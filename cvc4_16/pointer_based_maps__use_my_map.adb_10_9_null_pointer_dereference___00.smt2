;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun to_rep1 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (rec__my_map__int_acc__is_null_pointer Bool)(rec__my_map__int_acc__pointer_address Int)(rec__my_map__int_acc__pointer_value integer)))))
(define-fun us_rep_rec__my_map__int_acc__is_null_pointer__projection ((a us_rep)) Bool 
  (rec__my_map__int_acc__is_null_pointer a))

(define-fun us_rep_rec__my_map__int_acc__pointer_address__projection ((a us_rep)) Int 
  (rec__my_map__int_acc__pointer_address a))

(define-fun us_rep_rec__my_map__int_acc__pointer_value__projection ((a us_rep)) integer 
  (rec__my_map__int_acc__pointer_value a))

(declare-datatypes ((us_rep__ref 0))
(((us_rep__refqtmk (us_rep__content us_rep)))))
(define-fun us_rep__ref___rep__content__2__projection ((a us_rep__ref)) us_rep 
  (us_rep__content a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__my_map__int_acc__is_null_pointer a) 
                        (rec__my_map__int_acc__is_null_pointer b))
                        (=>
                        (not
                        (= (rec__my_map__int_acc__is_null_pointer a) true))
                        (and
                        (= (rec__my_map__int_acc__pointer_address a) 
                        (rec__my_map__int_acc__pointer_address b))
                        (= (rec__my_map__int_acc__pointer_value a) (rec__my_map__int_acc__pointer_value
                                                                   b)))))
                   true false))

(define-fun rec__my_map__int_acc__pointer_value__pred ((a us_rep)) Bool 
  (not (= (rec__my_map__int_acc__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
  (assert (= (rec__my_map__int_acc__is_null_pointer us_null_pointer) true))

(declare-const dummy2 us_rep)

(declare-datatypes ((int_acc__ref 0))
(((int_acc__refqtmk (int_acc__content us_rep)))))
(define-fun int_acc__ref_int_acc__content__projection ((a int_acc__ref)) us_rep 
  (int_acc__content a))

(declare-sort us_main_type 0)

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (rec__use_my_map__T1b__is_null_pointer Bool)(rec__use_my_map__T1b__pointer_address Int)(rec__use_my_map__T1b__pointer_value_abstr us_main_type)))))
(define-fun us_rep_rec__use_my_map__T1b__is_null_pointer__projection ((a us_rep1)) Bool 
  (rec__use_my_map__T1b__is_null_pointer a))

(define-fun us_rep_rec__use_my_map__T1b__pointer_address__projection ((a us_rep1)) Int 
  (rec__use_my_map__T1b__pointer_address a))

(define-fun us_rep_rec__use_my_map__T1b__pointer_value_abstr__projection ((a us_rep1)) us_main_type 
  (rec__use_my_map__T1b__pointer_value_abstr a))

(declare-datatypes ((us_rep__ref1 0))
(((us_rep__refqtmk1 (us_rep__content1 us_rep1)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref1)) us_rep1 
  (us_rep__content1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (rec__use_my_map__T1b__is_null_pointer a) 
                         (rec__use_my_map__T1b__is_null_pointer b))
                         (=>
                         (not
                         (= (rec__use_my_map__T1b__is_null_pointer a) true))
                         (and
                         (= (rec__use_my_map__T1b__pointer_address a) 
                         (rec__use_my_map__T1b__pointer_address b))
                         (= (rec__use_my_map__T1b__pointer_value_abstr a) 
                         (rec__use_my_map__T1b__pointer_value_abstr b)))))
                    true false))

(declare-const dummy3 us_rep1)

(declare-datatypes ((map_acc__ref 0))
(((map_acc__refqtmk (map_acc__content us_rep1)))))
(define-fun map_acc__ref_map_acc__content__projection ((a map_acc__ref)) us_rep1 
  (map_acc__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__my_map__map__key positive)(rec__my_map__map__value us_rep)(rec__my_map__map__next us_rep1)))))
(define-fun us_split_fields_rec__my_map__map__key__projection ((a us_split_fields)) positive 
  (rec__my_map__map__key a))

(define-fun us_split_fields_rec__my_map__map__value__projection ((a us_split_fields)) us_rep 
  (rec__my_map__map__value a))

(define-fun us_split_fields_rec__my_map__map__next__projection ((a us_split_fields)) us_rep1 
  (rec__my_map__map__next a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep2)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__my_map__map__key (us_split_fields1 a))) 
                         (to_rep1
                         (rec__my_map__map__key (us_split_fields1 b))))
                         (= (bool_eq
                            (rec__my_map__map__value (us_split_fields1 a))
                            (rec__my_map__map__value (us_split_fields1 b))) true))
                         (= (bool_eq1
                            (rec__my_map__map__next (us_split_fields1 a))
                            (rec__my_map__map__next (us_split_fields1 b))) true))
                    true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const my_map__map__key__first__bit Int)

(declare-const my_map__map__key__last__bit Int)

(declare-const my_map__map__key__position Int)

;; my_map__map__key__first__bit_axiom
  (assert (<= 0 my_map__map__key__first__bit))

;; my_map__map__key__last__bit_axiom
  (assert (< my_map__map__key__first__bit my_map__map__key__last__bit))

;; my_map__map__key__position_axiom
  (assert (<= 0 my_map__map__key__position))

(declare-const my_map__map__value__first__bit Int)

(declare-const my_map__map__value__last__bit Int)

(declare-const my_map__map__value__position Int)

;; my_map__map__value__first__bit_axiom
  (assert (<= 0 my_map__map__value__first__bit))

;; my_map__map__value__last__bit_axiom
  (assert (< my_map__map__value__first__bit my_map__map__value__last__bit))

;; my_map__map__value__position_axiom
  (assert (<= 0 my_map__map__value__position))

(declare-const my_map__map__next__first__bit Int)

(declare-const my_map__map__next__last__bit Int)

(declare-const my_map__map__next__position Int)

;; my_map__map__next__first__bit_axiom
  (assert (<= 0 my_map__map__next__first__bit))

;; my_map__map__next__last__bit_axiom
  (assert (< my_map__map__next__first__bit my_map__map__next__last__bit))

;; my_map__map__next__position_axiom
  (assert (<= 0 my_map__map__next__position))

(declare-fun user_eq2 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep2)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep2 
  (map__content a))

(declare-const m__pointer_address Int)

(declare-const m__is_null_pointer Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const v Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const dummy5 us_rep1)

(declare-datatypes ((t1s__ref 0))
(((t1s__refqtmk (t1s__content us_rep1)))))
(define-fun t1s__ref_t1s__content__projection ((a t1s__ref)) us_rep1 
  (t1s__content a))

(declare-fun model_contains (us_rep1 Int) Bool)

(declare-fun model_contains__function_guard (Bool us_rep1 Int) Bool)

(declare-fun has_element (us_rep2 Int) Bool)

(declare-fun has_element__function_guard (Bool us_rep2 Int) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((t1b__ref 0))
(((t1b__refqtmk (t1b__content us_rep1)))))
(define-fun t1b__ref_t1b__content__projection ((a t1b__ref)) us_rep1 
  (t1b__content a))

(declare-fun us_open (us_main_type) us_rep2)

(declare-fun us_close (us_rep2) us_main_type)

;; close_open
  (assert
  (forall ((x us_main_type))
  (! (= (us_close (us_open x)) x) :pattern ((us_open x)) )))

;; open_close
  (assert
  (forall ((x us_rep2))
  (! (= (us_open (us_close x)) x) :pattern ((us_close x)) )))

(define-fun rec__use_my_map__T1b__pointer_value ((a us_rep1)) us_rep2 
  (us_open (rec__use_my_map__T1b__pointer_value_abstr a)))

(define-fun rec__use_my_map__T1b__pointer_value__pred ((a us_rep1)) Bool 
  (not (= (rec__use_my_map__T1b__is_null_pointer a) true)))

(declare-const us_null_pointer1 us_rep1)

;; __null_pointer__def_axiom
  (assert (= (rec__use_my_map__T1b__is_null_pointer us_null_pointer1) true))

;; model_contains__def_axiom
  (assert
  (forall ((m us_rep1))
  (forall ((k1 Int))
  (! (= (= (model_contains m k1) true)
     (and (not (= (bool_eq1 m us_null_pointer1) true))
     (= (has_element (rec__use_my_map__T1b__pointer_value m) k1) true))) :pattern (
  (model_contains m k1)) ))))

(declare-const dummy7 us_rep1)

(declare-datatypes ((t2s__ref 0))
(((t2s__refqtmk (t2s__content us_rep1)))))
(define-fun t2s__ref_t2s__content__projection ((a t2s__ref)) us_rep1 
  (t2s__content a))

(declare-fun model_value (us_rep1 Int) Int)

(declare-fun model_value__function_guard (Int us_rep1 Int) Bool)

(declare-fun temp___dynamic_invariant_192 (us_rep1 Bool Bool Bool Bool) Bool)

(define-fun dynamic_invariant2 ((temp___expr_191 us_rep1)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)
  (temp___do_typ_inv_190 Bool)) Bool (=>
                                     (not
                                     (= (rec__use_my_map__T1b__is_null_pointer
                                        temp___expr_191) true))
                                     (and
                                     (not
                                     (= (rec__my_map__int_acc__is_null_pointer
                                        (rec__my_map__map__value
                                        (us_split_fields1
                                        (rec__use_my_map__T1b__pointer_value
                                        temp___expr_191)))) true))
                                     (temp___dynamic_invariant_192
                                     (rec__my_map__map__next
                                     (us_split_fields1
                                     (rec__use_my_map__T1b__pointer_value
                                     temp___expr_191))) true false true
                                     temp___do_typ_inv_190))))

;; def_axiom
  (assert
  (forall ((temp___expr_197 us_rep1))
  (forall ((temp___is_init_193 Bool) (temp___skip_constant_194 Bool)
  (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool))
  (! (= (temp___dynamic_invariant_192 temp___expr_197 temp___is_init_193
     temp___skip_constant_194 temp___do_toplevel_195 temp___do_typ_inv_196)
     (=>
     (not (= (rec__use_my_map__T1b__is_null_pointer temp___expr_197) true))
     (and
     (not
     (= (rec__my_map__int_acc__is_null_pointer
        (rec__my_map__map__value
        (us_split_fields1
        (rec__use_my_map__T1b__pointer_value temp___expr_197)))) true))
     (temp___dynamic_invariant_192
     (rec__my_map__map__next
     (us_split_fields1 (rec__use_my_map__T1b__pointer_value temp___expr_197)))
     true false true temp___do_typ_inv_196)))) :pattern ((temp___dynamic_invariant_192
  temp___expr_197 temp___is_init_193 temp___skip_constant_194
  temp___do_toplevel_195 temp___do_typ_inv_196)) ))))

(define-fun default_initial_assumption ((temp___expr_198 us_rep1)
  (temp___skip_top_level_199 Bool)) Bool (= (rec__use_my_map__T1b__is_null_pointer
                                            temp___expr_198) true))

(define-fun dynamic_invariant3 ((temp___expr_204 us_rep2)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)
  (temp___do_typ_inv_203 Bool)) Bool (and
                                     (not
                                     (= (rec__my_map__int_acc__is_null_pointer
                                        (rec__my_map__map__value
                                        (us_split_fields1 temp___expr_204))) true))
                                     (=>
                                     (not
                                     (= (rec__use_my_map__T1b__is_null_pointer
                                        (rec__my_map__map__next
                                        (us_split_fields1 temp___expr_204))) true))
                                     (and
                                     (not
                                     (= (rec__my_map__int_acc__is_null_pointer
                                        (rec__my_map__map__value
                                        (us_split_fields1
                                        (rec__use_my_map__T1b__pointer_value
                                        (rec__my_map__map__next
                                        (us_split_fields1 temp___expr_204)))))) true))
                                     (temp___dynamic_invariant_192
                                     (rec__my_map__map__next
                                     (us_split_fields1
                                     (rec__use_my_map__T1b__pointer_value
                                     (rec__my_map__map__next
                                     (us_split_fields1 temp___expr_204)))))
                                     true false true temp___do_typ_inv_203)))))

(define-fun default_initial_assumption1 ((temp___expr_205 us_rep2)
  (temp___skip_top_level_206 Bool)) Bool (and
                                         (= (rec__my_map__int_acc__is_null_pointer
                                            (rec__my_map__map__value
                                            (us_split_fields1
                                            temp___expr_205))) true)
                                         (= (rec__use_my_map__T1b__is_null_pointer
                                            (rec__my_map__map__next
                                            (us_split_fields1
                                            temp___expr_205))) true)))

;; model_value__def_axiom
  (assert
  (forall ((m us_rep1))
  (forall ((k1 Int))
  (! (=>
     (and
     (=> (not (= (rec__use_my_map__T1b__is_null_pointer m) true))
     (dynamic_invariant3 (rec__use_my_map__T1b__pointer_value m) true false
     true true)) (dynamic_invariant1 k1 true true true true))
     (= (model_value m k1) (ite (= (to_rep1
                                   (rec__my_map__map__key
                                   (us_split_fields1
                                   (rec__use_my_map__T1b__pointer_value m)))) k1)
                           (to_rep
                           (rec__my_map__int_acc__pointer_value
                           (rec__my_map__map__value
                           (us_split_fields1
                           (rec__use_my_map__T1b__pointer_value m)))))
                           (model_value
                           (rec__my_map__map__next
                           (us_split_fields1
                           (rec__use_my_map__T1b__pointer_value m))) k1)))) :pattern (
  (model_value m k1)) ))))

(declare-const dummy8 us_rep1)

(declare-datatypes ((t19s__ref 0))
(((t19s__refqtmk (t19s__content us_rep1)))))
(define-fun t19s__ref_t19s__content__projection ((a t19s__ref)) us_rep1 
  (t19s__content a))

(declare-const dummy9 us_rep)

(declare-datatypes ((t20s__ref 0))
(((t20s__refqtmk (t20s__content us_rep)))))
(define-fun t20s__ref_t20s__content__projection ((a t20s__ref)) us_rep 
  (t20s__content a))

(declare-fun reference (us_rep1 Int) us_rep)

(declare-fun reference__function_guard (us_rep us_rep1 Int) Bool)

(declare-sort us_pledge_ty 0)

(declare-datatypes ((us_pledge_ty__ref 0))
(((us_pledge_ty__refqtmk (us_pledge_ty__content us_pledge_ty)))))
(declare-fun us_pledge_get (us_pledge_ty us_rep1 us_rep) Bool)

(declare-fun my_map__reference__pledge (us_rep1 Int) us_pledge_ty)

(declare-const dummy10 us_rep)

(declare-datatypes ((t5b__ref 0))
(((t5b__refqtmk (t5b__content us_rep)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) us_rep (t5b__content
                                                                    a))

(declare-const x__pointer_address Int)

(declare-const x__is_null_pointer Bool)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort us_pledge_ty1 0)

(declare-datatypes ((us_pledge_ty__ref1 0))
(((us_pledge_ty__refqtmk1 (us_pledge_ty__content1 us_pledge_ty1)))))
(declare-fun us_pledge_get1 (us_pledge_ty1 us_rep1 us_rep) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (natural natural) Bool)

(declare-const dummy11 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range3
                                    temp___expr_39)))

;; model_contains__post_axiom
  (assert true)

;; model_value__post_axiom
  (assert
  (forall ((m us_rep1))
  (forall ((k1 Int))
  (! (=>
     (and
     (and
     (=> (not (= (rec__use_my_map__T1b__is_null_pointer m) true))
     (dynamic_invariant3 (rec__use_my_map__T1b__pointer_value m) true false
     true true)) (dynamic_invariant1 k1 true true true true))
     (= (model_contains m k1) true)) (dynamic_invariant (model_value m k1)
     true false true true)) :pattern ((model_value m k1)) ))))

;; has_element__def_axiom
  (assert
  (forall ((m us_rep2))
  (forall ((k1 Int))
  (! (= (= (has_element m k1) true)
     (and (not (= k1 0))
     (or (= (to_rep1 (rec__my_map__map__key (us_split_fields1 m))) k1)
     (= (model_contains (rec__my_map__map__next (us_split_fields1 m)) k1) true)))) :pattern (
  (has_element m k1)) ))))

;; has_element__post_axiom
  (assert true)

(define-fun dynamic_invariant5 ((temp___expr_184 us_rep)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)
  (temp___do_typ_inv_183 Bool)) Bool (not
                                     (= (rec__my_map__int_acc__is_null_pointer
                                        temp___expr_184) true)))

(define-fun default_initial_assumption2 ((temp___expr_185 us_rep)
  (temp___skip_top_level_186 Bool)) Bool (= (rec__my_map__int_acc__is_null_pointer
                                            temp___expr_185) true))

(assert
;; defqtvc
 ;; File "use_my_map.adb", line 3, characters 0-0
  (not
  (forall ((m__pointer_value us_split_fields))
  (=>
  (=> (not (= m__is_null_pointer true)) (dynamic_invariant3
  (rec__use_my_map__T1b__pointer_value
  (us_repqtmk1 m__is_null_pointer m__pointer_address
  (us_close (us_repqtmk2 m__pointer_value)))) true false true true))
  (=> (dynamic_invariant1 k true false true true)
  (=> (dynamic_invariant v true false true true)
  (=>
  (= (model_contains
     (us_repqtmk1 m__is_null_pointer m__pointer_address
     (us_close (us_repqtmk2 m__pointer_value))) k) true)
  (let ((o k))
  (let ((o1 (us_repqtmk1 m__is_null_pointer m__pointer_address
            (us_close (us_repqtmk2 m__pointer_value)))))
  (let ((use_my_map__my_replace_element__x__assume (reference o1 o)))
  (=>
  (and
  (not
  (= (rec__my_map__int_acc__is_null_pointer
     use_my_map__my_replace_element__x__assume) true))
  (let ((us_result_pledge (my_map__reference__pledge o1 o)))
  (and
  (and
  (= (model_value o1 o) (to_rep
                        (rec__my_map__int_acc__pointer_value
                        use_my_map__my_replace_element__x__assume)))
  (forall ((temp___borrowed_211 us_rep1))
  (forall ((temp___brower_210 us_rep))
  (! (=>
     (and
     (and
     (= (us_pledge_get us_result_pledge temp___borrowed_211
        temp___brower_210) true)
     (not (= (rec__my_map__int_acc__is_null_pointer temp___brower_210) true)))
     (and
     (= m__is_null_pointer (rec__use_my_map__T1b__is_null_pointer
                           temp___borrowed_211))
     (= (rec__my_map__int_acc__is_null_pointer
        use_my_map__my_replace_element__x__assume) (rec__my_map__int_acc__is_null_pointer
                                                   temp___brower_210))))
     (and (= (model_contains temp___borrowed_211 o) true)
     (= (model_value temp___borrowed_211 o) (to_rep
                                            (rec__my_map__int_acc__pointer_value
                                            temp___brower_210))))) :pattern (
  (us_pledge_get us_result_pledge temp___borrowed_211 temp___brower_210)) ))))
  (= (us_pledge_get us_result_pledge o1
     use_my_map__my_replace_element__x__assume) true))))
  (forall ((usf us_pledge_ty1))
  (=>
  (forall ((temp___borrowed_214 us_rep1))
  (forall ((temp___brower_212 us_rep))
  (! (= (us_pledge_get1 usf temp___borrowed_214 temp___brower_212) (ite 
                                                                   (exists
                                                                   ((temp___borrowed_213 us_rep1))
                                                                   (and
                                                                   (= 
                                                                   m__is_null_pointer 
                                                                   (rec__use_my_map__T1b__is_null_pointer
                                                                   temp___borrowed_213))
                                                                   (= (and 
                                                                   (ite (= temp___borrowed_214 temp___borrowed_213)
                                                                   true
                                                                   false) (and 
                                                                   (us_pledge_get
                                                                   (my_map__reference__pledge
                                                                   (us_repqtmk1
                                                                   m__is_null_pointer
                                                                   m__pointer_address
                                                                   (us_close
                                                                   (us_repqtmk2
                                                                   m__pointer_value)))
                                                                   k)
                                                                   temp___borrowed_213
                                                                   temp___brower_212) 
                                                                   (ite 
                                                                   (=>
                                                                   (not
                                                                   (= 
                                                                   (rec__use_my_map__T1b__is_null_pointer
                                                                   temp___borrowed_213) true))
                                                                   (dynamic_invariant3
                                                                   (rec__use_my_map__T1b__pointer_value
                                                                   temp___borrowed_213)
                                                                   true false
                                                                   true
                                                                   true))
                                                                   true
                                                                   false))) true)))
                                                                   true
                                                                   false)) :pattern (
  (us_pledge_get1 usf temp___borrowed_214 temp___brower_212)) )))
  (forall ((use_my_map__my_replace_element__x__pledge us_pledge_ty1))
  (=> (= use_my_map__my_replace_element__x__pledge usf)
  (forall ((x__pointer_value integer))
  (=>
  (= x__pointer_value (rec__my_map__int_acc__pointer_value
                      use_my_map__my_replace_element__x__assume))
  (=>
  (= x__pointer_address (rec__my_map__int_acc__pointer_address
                        use_my_map__my_replace_element__x__assume))
  (=>
  (= x__is_null_pointer (rec__my_map__int_acc__is_null_pointer
                        use_my_map__my_replace_element__x__assume))
  (rec__my_map__int_acc__pointer_value__pred
  (us_repqtmk x__is_null_pointer x__pointer_address x__pointer_value)))))))))))))))))))))
(check-sat)
