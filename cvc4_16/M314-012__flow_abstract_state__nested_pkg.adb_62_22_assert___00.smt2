;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun g (tuple0) Bool)

(declare-fun g__function_guard (Bool tuple0) Bool)

;; g__post_axiom
  (assert true)

;; g__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (g us_void_param) true) :pattern ((g us_void_param)) )))

(declare-fun f (tuple0) Bool)

(declare-fun f__function_guard (Bool tuple0) Bool)

;; f__post_axiom
  (assert true)

;; f__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (f us_void_param) true) :pattern ((f us_void_param)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun h (Bool) Bool)

(declare-fun h__function_guard (Bool Bool) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; h__post_axiom
  (assert true)

;; h__def_axiom
  (assert
  (forall ((nested_pkg__z__bar Bool))
  (! (= (= (h nested_pkg__z__bar) true) (= nested_pkg__z__bar true)) :pattern (
  (h nested_pkg__z__bar)) )))

(assert
;; defqtvc
 ;; File "nested_pkg.adb", line 56, characters 0-0
  (not
  (=> (f__function_guard (f Tuple0) Tuple0)
  (=> (= (f Tuple0) true)
  (=> (g__function_guard (g Tuple0) Tuple0) (= (g Tuple0) true))))))
(check-sat)
