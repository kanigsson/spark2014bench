(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort field_type 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (field_type field_type) Bool)

(declare-const dummy field_type)

(declare-datatypes ((field_type__ref 0))
(((field_type__refqtmk (field_type__content field_type)))))
(define-fun field_type__ref_field_type__content__projection ((a field_type__ref)) field_type 
  (field_type__content a))

(declare-fun to_rep (field_type) Int)

(declare-fun of_rep (Int) field_type)

;; inversion_axiom
  (assert
  (forall ((x field_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x field_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort state_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (state_type state_type) Bool)

(declare-const dummy1 state_type)

(declare-datatypes ((state_type__ref 0))
(((state_type__refqtmk (state_type__content state_type)))))
(define-fun state_type__ref_state_type__content__projection ((a state_type__ref)) state_type 
  (state_type__content a))

(declare-fun to_rep1 (state_type) Int)

(declare-fun of_rep1 (Int) state_type)

;; inversion_axiom
  (assert
  (forall ((x state_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x state_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__test__element_type__state state_type)))))
(define-fun us_split_discrs_rec__test__element_type__state__projection ((a us_split_discrs)) state_type 
  (rec__test__element_type__state a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_discrs1 us_split_discrs)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__test__element_type__state
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__test__element_type__state
                                                  (us_split_discrs1 b))))
                   true false))

(define-fun in_range2 ((rec__test__element_type__state1 Int)
  (a us_split_discrs)) Bool (= rec__test__element_type__state1 (to_rep1
                                                               (rec__test__element_type__state
                                                               a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test__element_type__state__first__bit Int)

(declare-const test__element_type__state__last__bit Int)

(declare-const test__element_type__state__position Int)

;; test__element_type__state__first__bit_axiom
  (assert (<= 0 test__element_type__state__first__bit))

;; test__element_type__state__last__bit_axiom
  (assert
  (< test__element_type__state__first__bit test__element_type__state__last__bit))

;; test__element_type__state__position_axiom
  (assert (<= 0 test__element_type__state__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content us_rep)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) us_rep 
  (element_type__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy3 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__test__context_type__field field_type)(rec__test__context_type__elements (Array Int us_rep))))))
(define-fun us_split_fields_rec__test__context_type__field__projection ((a us_split_fields)) field_type 
  (rec__test__context_type__field a))

(define-fun us_split_fields_rec__test__context_type__elements__projection ((a us_split_fields)) (Array Int us_rep) 
  (rec__test__context_type__elements a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__test__context_type__field
                            (us_split_fields1 a))) (to_rep
                                                   (rec__test__context_type__field
                                                   (us_split_fields1 b))))
                         (= (bool_eq1
                            (rec__test__context_type__elements
                            (us_split_fields1 a)) 0 3
                            (rec__test__context_type__elements
                            (us_split_fields1 b)) 0 3) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const test__context_type__field__first__bit Int)

(declare-const test__context_type__field__last__bit Int)

(declare-const test__context_type__field__position Int)

;; test__context_type__field__first__bit_axiom
  (assert (<= 0 test__context_type__field__first__bit))

;; test__context_type__field__last__bit_axiom
  (assert
  (< test__context_type__field__first__bit test__context_type__field__last__bit))

;; test__context_type__field__position_axiom
  (assert (<= 0 test__context_type__field__position))

(declare-const test__context_type__elements__first__bit Int)

(declare-const test__context_type__elements__last__bit Int)

(declare-const test__context_type__elements__position Int)

;; test__context_type__elements__first__bit_axiom
  (assert (<= 0 test__context_type__elements__first__bit))

;; test__context_type__elements__last__bit_axiom
  (assert
  (< test__context_type__elements__first__bit test__context_type__elements__last__bit))

;; test__context_type__elements__position_axiom
  (assert (<= 0 test__context_type__elements__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((context_type__ref 0))
(((context_type__refqtmk (context_type__content us_rep1)))))
(define-fun context_type__ref_context_type__content__projection ((a context_type__ref)) us_rep1 
  (context_type__content a))

(declare-fun context_field (us_rep1) Int)

(declare-fun context_field__function_guard (Int us_rep1) Bool)

(define-fun default_initial_assumption ((temp___expr_198 us_rep1)
  (temp___skip_top_level_199 Bool)) Bool (forall ((temp___202 Int))
                                         (=>
                                         (and (<= 0 temp___202)
                                         (<= temp___202 3))
                                         (= (to_rep1
                                            (rec__test__element_type__state
                                            (us_split_discrs1
                                            (select (rec__test__context_type__elements
                                                    (us_split_fields1
                                                    temp___expr_198)) temp___202)))) 1))))

(define-fun dynamic_invariant ((temp___expr_160 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (<= 0 3)) (in_range temp___expr_160)))

;; context_field__post_axiom
  (assert
  (forall ((context us_rep1))
  (! (let ((result (context_field context)))
     (=> (context_field__function_guard result context) (dynamic_invariant
     result true false true true))) :pattern ((context_field context)) )))

;; context_field__def_axiom
  (assert
  (forall ((context us_rep1))
  (! (= (context_field context) (to_rep
                                (rec__test__context_type__field
                                (us_split_fields1 context)))) :pattern (
  (context_field context)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const test__element_type__state__first__bit1 Int)

(declare-const test__element_type__state__last__bit1 Int)

(declare-const test__element_type__state__position1 Int)

;; test__element_type__state__first__bit_axiom
  (assert (<= 0 test__element_type__state__first__bit1))

;; test__element_type__state__last__bit_axiom
  (assert
  (< test__element_type__state__first__bit1 test__element_type__state__last__bit1))

;; test__element_type__state__position_axiom
  (assert (<= 0 test__element_type__state__position1))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((t2b__ref 0))
(((t2b__refqtmk (t2b__content us_rep)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) us_rep (t2b__content
                                                                    a))

(define-fun default_initial_assumption1 ((temp___expr_186 (Array Int us_rep))
  (temp___skip_top_level_187 Bool)) Bool (forall ((temp___188 Int))
                                         (=>
                                         (and (<= 0 temp___188)
                                         (<= temp___188 3))
                                         (= (to_rep1
                                            (rec__test__element_type__state
                                            (us_split_discrs1
                                            (select temp___expr_186 temp___188)))) 1))))

(define-fun dynamic_invariant1 ((temp___expr_167 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (<= 0 1)) (in_range1 temp___expr_167)))

(define-fun default_initial_assumption2 ((temp___expr_176 us_rep)
  (temp___skip_top_level_177 Bool)) Bool (= (to_rep1
                                            (rec__test__element_type__state
                                            (us_split_discrs1
                                            temp___expr_176))) 1))

(assert
;; defqtvc
 ;; File "test.ads", line 12, characters 0-0
  (not
  (forall ((context__split_fields us_split_fields) (o state_type))
  (=>
  (forall ((context__split_fields1 us_split_fields))
  (context_field__function_guard
  (context_field (us_repqtmk1 context__split_fields1))
  (us_repqtmk1 context__split_fields1)))
  (=> (= (context_field (us_repqtmk1 context__split_fields)) 0)
  (=> (= (to_rep1 o) 0)
  (forall ((context__split_fields1 us_split_fields))
  (=>
  (= context__split_fields1 (us_split_fieldsqtmk
                            (rec__test__context_type__field
                            context__split_fields)
                            (store (rec__test__context_type__elements
                                   context__split_fields) 1 (us_repqtmk
                                                            (us_split_discrsqtmk
                                                            o)))))
  (forall ((o1 field_type))
  (=> (= (to_rep o1) 1)
  (forall ((context__split_fields2 us_split_fields))
  (=>
  (= context__split_fields2 (us_split_fieldsqtmk o1
                            (rec__test__context_type__elements
                            context__split_fields1)))
  (=> (= (to_rep (rec__test__context_type__field context__split_fields2)) 1)
  (=>
  (forall ((context__split_fields3 us_split_fields))
  (context_field__function_guard
  (context_field (us_repqtmk1 context__split_fields3))
  (us_repqtmk1 context__split_fields3)))
  (= (context_field (us_repqtmk1 context__split_fields2)) 1)))))))))))))))
(check-sat)
(exit)
