(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort my_nat 0)

(declare-fun my_natqtint (my_nat) Int)

;; my_nat'axiom
  (assert
  (forall ((i my_nat))
  (and (<= 0 (my_natqtint i)) (<= (my_natqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (my_nat my_nat) Bool)

(declare-const dummy1 my_nat)

(declare-datatypes ((my_nat__ref 0))
(((my_nat__refqtmk (my_nat__content my_nat)))))
(define-fun my_nat__ref_my_nat__content__projection ((a my_nat__ref)) my_nat 
  (my_nat__content a))

(declare-datatypes ((my_nat__init_wrapper 0))
(((my_nat__init_wrapperqtmk (rec__value my_nat)(attr__init Bool)))))
(define-fun my_nat__init_wrapper_rec__value__projection ((a my_nat__init_wrapper)) my_nat 
  (rec__value a))

(define-fun my_nat__init_wrapper_attr__init__projection ((a my_nat__init_wrapper)) Bool 
  (attr__init a))

(define-fun to_rep ((x my_nat)) Int (my_natqtint x))

(declare-fun of_rep (Int) my_nat)

;; inversion_axiom
  (assert
  (forall ((x my_nat)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x my_nat)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__nested_init_by_proof__rec__d Bool)))))
(define-fun us_split_discrs_rec__nested_init_by_proof__rec__d__projection ((a us_split_discrs)) Bool 
  (rec__nested_init_by_proof__rec__d a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__nested_init_by_proof__rec__f2 my_nat__init_wrapper)(rec__nested_init_by_proof__rec__f1 my_nat__init_wrapper)(rec__nested_init_by_proof__rec__f3 my_nat__init_wrapper)))))
(define-fun us_split_fields_rec__nested_init_by_proof__rec__f2__projection ((a us_split_fields)) my_nat__init_wrapper 
  (rec__nested_init_by_proof__rec__f2 a))

(define-fun us_split_fields_rec__nested_init_by_proof__rec__f1__projection ((a us_split_fields)) my_nat__init_wrapper 
  (rec__nested_init_by_proof__rec__f1 a))

(define-fun us_split_fields_rec__nested_init_by_proof__rec__f3__projection ((a us_split_fields)) my_nat__init_wrapper 
  (rec__nested_init_by_proof__rec__f3 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun nested_init_by_proof__rec__f1__pred ((a us_rep)) Bool (= (ite 
  (rec__nested_init_by_proof__rec__d (us_split_discrs1 a)) 1 0) 1))

(define-fun nested_init_by_proof__rec__f3__pred ((a us_rep)) Bool (= (ite 
  (rec__nested_init_by_proof__rec__d (us_split_discrs1 a)) 1 0) 0))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__nested_init_by_proof__rec__d
                                (us_split_discrs1 a)) 1 0) (ite (rec__nested_init_by_proof__rec__d
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (and
                        (and
                        (= (to_rep
                           (rec__value
                           (rec__nested_init_by_proof__rec__f2
                           (us_split_fields1 a)))) (to_rep
                                                   (rec__value
                                                   (rec__nested_init_by_proof__rec__f2
                                                   (us_split_fields1 b)))))
                        (=> (nested_init_by_proof__rec__f1__pred a)
                        (= (to_rep
                           (rec__value
                           (rec__nested_init_by_proof__rec__f1
                           (us_split_fields1 a)))) (to_rep
                                                   (rec__value
                                                   (rec__nested_init_by_proof__rec__f1
                                                   (us_split_fields1 b)))))))
                        (=> (nested_init_by_proof__rec__f3__pred a)
                        (= (to_rep
                           (rec__value
                           (rec__nested_init_by_proof__rec__f3
                           (us_split_fields1 a)))) (to_rep
                                                   (rec__value
                                                   (rec__nested_init_by_proof__rec__f3
                                                   (us_split_fields1 b))))))))
                   true false))

(define-fun in_range3 ((rec__nested_init_by_proof__rec__d1 Bool)
  (a us_split_discrs)) Bool (= rec__nested_init_by_proof__rec__d1 (rec__nested_init_by_proof__rec__d
                                                                  a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const nested_init_by_proof__rec__d__first__bit Int)

(declare-const nested_init_by_proof__rec__d__last__bit Int)

(declare-const nested_init_by_proof__rec__d__position Int)

;; nested_init_by_proof__rec__d__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__d__first__bit))

;; nested_init_by_proof__rec__d__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__d__first__bit nested_init_by_proof__rec__d__last__bit))

;; nested_init_by_proof__rec__d__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__d__position))

(declare-const nested_init_by_proof__rec__f2__first__bit Int)

(declare-const nested_init_by_proof__rec__f2__last__bit Int)

(declare-const nested_init_by_proof__rec__f2__position Int)

;; nested_init_by_proof__rec__f2__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f2__first__bit))

;; nested_init_by_proof__rec__f2__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f2__first__bit nested_init_by_proof__rec__f2__last__bit))

;; nested_init_by_proof__rec__f2__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f2__position))

(declare-const nested_init_by_proof__rec__f1__first__bit Int)

(declare-const nested_init_by_proof__rec__f1__last__bit Int)

(declare-const nested_init_by_proof__rec__f1__position Int)

;; nested_init_by_proof__rec__f1__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f1__first__bit))

;; nested_init_by_proof__rec__f1__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f1__first__bit nested_init_by_proof__rec__f1__last__bit))

;; nested_init_by_proof__rec__f1__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f1__position))

(declare-const nested_init_by_proof__rec__f3__first__bit Int)

(declare-const nested_init_by_proof__rec__f3__last__bit Int)

(declare-const nested_init_by_proof__rec__f3__position Int)

;; nested_init_by_proof__rec__f3__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f3__first__bit))

;; nested_init_by_proof__rec__f3__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f3__first__bit nested_init_by_proof__rec__f3__last__bit))

;; nested_init_by_proof__rec__f3__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f3__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((rec____ref 0))
(((rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__projection ((a rec____ref)) us_rep 
  (rec____content a))

(define-fun dynamic_invariant1 ((temp___expr_183 Int)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)
  (temp___do_typ_inv_182 Bool)) Bool (=>
                                     (or (= temp___is_init_179 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_183)))

(declare-fun my_eq (us_rep us_rep) Bool)

(declare-fun my_eq__function_guard (Bool us_rep us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_198 us_rep)
  (temp___skip_top_level_199 Bool)) Bool (and
                                         (= (rec__nested_init_by_proof__rec__d
                                            (us_split_discrs1
                                            temp___expr_198)) (distinct 0 0))
                                         (and
                                         (and
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f2
                                            (us_split_fields1
                                            temp___expr_198))) false)
                                         (=>
                                         (nested_init_by_proof__rec__f1__pred
                                         temp___expr_198)
                                         (and
                                         (= (to_rep
                                            (rec__value
                                            (rec__nested_init_by_proof__rec__f1
                                            (us_split_fields1
                                            temp___expr_198)))) 15)
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f1
                                            (us_split_fields1
                                            temp___expr_198))) true))))
                                         (=>
                                         (nested_init_by_proof__rec__f3__pred
                                         temp___expr_198)
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f3
                                            (us_split_fields1
                                            temp___expr_198))) false)))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq (select a temp___idx_156)
                              (select b (+ (- b__first a__first) temp___idx_156))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq (select a temp___idx_156)
     (select b (+ (- b__first a__first) temp___idx_156))) true))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int us_rep))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))

(define-fun of_array ((a (Array Int us_rep)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((my_arr__ref 0))
(((my_arr__refqtmk (my_arr__content us_t)))))
(define-fun my_arr__ref_my_arr__content__projection ((a my_arr__ref)) us_t 
  (my_arr__content a))

(declare-datatypes ((t4b__ref 0))
(((t4b__refqtmk (t4b__content us_t)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_t (t4b__content
                                                                  a))

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1 (rec__nested_init_by_proof__holder__d my_nat)))))
(define-fun us_split_discrs_rec__nested_init_by_proof__holder__d__projection ((a us_split_discrs2)) my_nat 
  (rec__nested_init_by_proof__holder__d a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__nested_init_by_proof__holder__content us_t)))))
(define-fun us_split_fields_rec__nested_init_by_proof__holder__content__projection ((a us_split_fields2)) us_t 
  (rec__nested_init_by_proof__holder__content a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__nested_init_by_proof__holder__d
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__nested_init_by_proof__holder__d
                                                   (us_split_discrs3 b))))
                         (= (bool_eq2
                            (rec__nested_init_by_proof__holder__content
                            (us_split_fields3 a))
                            (rec__nested_init_by_proof__holder__content
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range4 ((rec__nested_init_by_proof__holder__d1 Int)
  (a us_split_discrs2)) Bool (= rec__nested_init_by_proof__holder__d1 
  (to_rep (rec__nested_init_by_proof__holder__d a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const nested_init_by_proof__holder__d__first__bit Int)

(declare-const nested_init_by_proof__holder__d__last__bit Int)

(declare-const nested_init_by_proof__holder__d__position Int)

;; nested_init_by_proof__holder__d__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__holder__d__first__bit))

;; nested_init_by_proof__holder__d__last__bit_axiom
  (assert
  (< nested_init_by_proof__holder__d__first__bit nested_init_by_proof__holder__d__last__bit))

;; nested_init_by_proof__holder__d__position_axiom
  (assert (<= 0 nested_init_by_proof__holder__d__position))

(declare-const nested_init_by_proof__holder__content__first__bit Int)

(declare-const nested_init_by_proof__holder__content__last__bit Int)

(declare-const nested_init_by_proof__holder__content__position Int)

;; nested_init_by_proof__holder__content__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__holder__content__first__bit))

;; nested_init_by_proof__holder__content__last__bit_axiom
  (assert
  (< nested_init_by_proof__holder__content__first__bit nested_init_by_proof__holder__content__last__bit))

;; nested_init_by_proof__holder__content__position_axiom
  (assert (<= 0 nested_init_by_proof__holder__content__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((holder__ref 0))
(((holder__refqtmk (holder__content us_rep1)))))
(define-fun holder__ref_holder__content__projection ((a holder__ref)) us_rep1 
  (holder__content a))

(declare-sort tT6bP1 0)

(declare-fun tT6bP1qtint (tT6bP1) Int)

;; tT6bP1'axiom
  (assert
  (forall ((i tT6bP1)) (and (<= 1 (tT6bP1qtint i)) (<= (tT6bP1qtint i) 15))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (tT6bP1 tT6bP1) Bool)

(declare-const dummy5 tT6bP1)

(declare-datatypes ((tT6bP1__ref 0))
(((tT6bP1__refqtmk (tT6bP1__content tT6bP1)))))
(define-fun tT6bP1__ref_tT6bP1__content__projection ((a tT6bP1__ref)) tT6bP1 
  (tT6bP1__content a))

(declare-const dummy6 (Array Int us_rep))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq6 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__nested_init_by_proof__holder__content1 (Array Int us_rep))))))
(define-fun us_split_fields_rec__nested_init_by_proof__holder__content__2__projection ((a us_split_fields4)) (Array Int us_rep) 
  (rec__nested_init_by_proof__holder__content1 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs4 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs2 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base ((a us_rep2)) us_rep1 (us_repqtmk1 (us_split_discrs4 a)
                                          (us_split_fieldsqtmk1
                                          (of_array
                                          (rec__nested_init_by_proof__holder__content1
                                          (us_split_fields5 a)) 1 15))))

(define-fun of_base ((r us_rep1)) us_rep2 (us_repqtmk2 (us_split_discrs3 r)
                                          (us_split_fieldsqtmk2
                                          (let ((temp___157 (rec__nested_init_by_proof__holder__content
                                                            (us_split_fields3
                                                            r))))
                                          (to_array temp___157)))))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__nested_init_by_proof__holder__d
                            (us_split_discrs4 a))) (to_rep
                                                   (rec__nested_init_by_proof__holder__d
                                                   (us_split_discrs4 b))))
                         (= (bool_eq1
                            (rec__nested_init_by_proof__holder__content1
                            (us_split_fields5 a)) 1 15
                            (rec__nested_init_by_proof__holder__content1
                            (us_split_fields5 b)) 1 15) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const nested_init_by_proof__holder__d__first__bit1 Int)

(declare-const nested_init_by_proof__holder__d__last__bit1 Int)

(declare-const nested_init_by_proof__holder__d__position1 Int)

;; nested_init_by_proof__holder__d__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__holder__d__first__bit1))

;; nested_init_by_proof__holder__d__last__bit_axiom
  (assert
  (< nested_init_by_proof__holder__d__first__bit1 nested_init_by_proof__holder__d__last__bit1))

;; nested_init_by_proof__holder__d__position_axiom
  (assert (<= 0 nested_init_by_proof__holder__d__position1))

(declare-const nested_init_by_proof__holder__content__first__bit1 Int)

(declare-const nested_init_by_proof__holder__content__last__bit1 Int)

(declare-const nested_init_by_proof__holder__content__position1 Int)

;; nested_init_by_proof__holder__content__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__holder__content__first__bit1))

;; nested_init_by_proof__holder__content__last__bit_axiom
  (assert
  (< nested_init_by_proof__holder__content__first__bit1 nested_init_by_proof__holder__content__last__bit1))

;; nested_init_by_proof__holder__content__position_axiom
  (assert (<= 0 nested_init_by_proof__holder__content__position1))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ((txS__ref 0))
(((txS__refqtmk (txS__content us_rep2)))))
(define-fun txS__ref_txS__content__projection ((a txS__ref)) us_rep2 
  (txS__content a))

(declare-const x__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant2 ((temp___expr_245 us_rep2)
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)
  (temp___do_typ_inv_244 Bool)) Bool (=>
                                     (not (= temp___skip_constant_242 true))
                                     (in_range4 15
                                     (us_split_discrs3
                                     (to_base temp___expr_245)))))

(define-fun default_initial_assumption1 ((temp___expr_249 us_rep2)
  (temp___skip_top_level_250 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__nested_init_by_proof__holder__d
                                            (us_split_discrs4
                                            temp___expr_249))) 15)
                                         (forall ((temp___253 Int))
                                         (=>
                                         (and (<= 1 temp___253)
                                         (<= temp___253 15))
                                         (and
                                         (= (rec__nested_init_by_proof__rec__d
                                            (us_split_discrs1
                                            (select (rec__nested_init_by_proof__holder__content1
                                                    (us_split_fields5
                                                    temp___expr_249)) temp___253))) (distinct 0 0))
                                         (and
                                         (and
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f2
                                            (us_split_fields1
                                            (select (rec__nested_init_by_proof__holder__content1
                                                    (us_split_fields5
                                                    temp___expr_249)) temp___253)))) false)
                                         (=>
                                         (nested_init_by_proof__rec__f1__pred
                                         (select (rec__nested_init_by_proof__holder__content1
                                                 (us_split_fields5
                                                 temp___expr_249)) temp___253))
                                         (and
                                         (= (to_rep
                                            (rec__value
                                            (rec__nested_init_by_proof__rec__f1
                                            (us_split_fields1
                                            (select (rec__nested_init_by_proof__holder__content1
                                                    (us_split_fields5
                                                    temp___expr_249)) temp___253))))) 15)
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f1
                                            (us_split_fields1
                                            (select (rec__nested_init_by_proof__holder__content1
                                                    (us_split_fields5
                                                    temp___expr_249)) temp___253)))) true))))
                                         (=>
                                         (nested_init_by_proof__rec__f3__pred
                                         (select (rec__nested_init_by_proof__holder__content1
                                                 (us_split_fields5
                                                 temp___expr_249)) temp___253))
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f3
                                            (us_split_fields1
                                            (select (rec__nested_init_by_proof__holder__content1
                                                    (us_split_fields5
                                                    temp___expr_249)) temp___253)))) false))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const nested_init_by_proof__rec__d__first__bit1 Int)

(declare-const nested_init_by_proof__rec__d__last__bit1 Int)

(declare-const nested_init_by_proof__rec__d__position1 Int)

;; nested_init_by_proof__rec__d__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__d__first__bit1))

;; nested_init_by_proof__rec__d__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__d__first__bit1 nested_init_by_proof__rec__d__last__bit1))

;; nested_init_by_proof__rec__d__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__d__position1))

(declare-const nested_init_by_proof__rec__f3__first__bit1 Int)

(declare-const nested_init_by_proof__rec__f3__last__bit1 Int)

(declare-const nested_init_by_proof__rec__f3__position1 Int)

;; nested_init_by_proof__rec__f3__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f3__first__bit1))

;; nested_init_by_proof__rec__f3__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f3__first__bit1 nested_init_by_proof__rec__f3__last__bit1))

;; nested_init_by_proof__rec__f3__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f3__position1))

(declare-const nested_init_by_proof__rec__f2__first__bit1 Int)

(declare-const nested_init_by_proof__rec__f2__last__bit1 Int)

(declare-const nested_init_by_proof__rec__f2__position1 Int)

;; nested_init_by_proof__rec__f2__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f2__first__bit1))

;; nested_init_by_proof__rec__f2__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f2__first__bit1 nested_init_by_proof__rec__f2__last__bit1))

;; nested_init_by_proof__rec__f2__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f2__position1))

(declare-const nested_init_by_proof__rec__f1__first__bit1 Int)

(declare-const nested_init_by_proof__rec__f1__last__bit1 Int)

(declare-const nested_init_by_proof__rec__f1__position1 Int)

;; nested_init_by_proof__rec__f1__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f1__first__bit1))

;; nested_init_by_proof__rec__f1__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f1__first__bit1 nested_init_by_proof__rec__f1__last__bit1))

;; nested_init_by_proof__rec__f1__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f1__position1))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((trS__ref 0))
(((trS__refqtmk (trS__content us_rep)))))
(define-fun trS__ref_trS__content__projection ((a trS__ref)) us_rep (trS__content
                                                                    a))

(declare-const r__split_discrs us_split_discrs)

(declare-const r__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant3 ((temp___expr_262 us_rep)
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool)
  (temp___do_typ_inv_261 Bool)) Bool (=>
                                     (not (= temp___skip_constant_259 true))
                                     (in_range3 (distinct 1 0)
                                     (us_split_discrs1 temp___expr_262))))

(define-fun default_initial_assumption2 ((temp___expr_264 us_rep)
  (temp___skip_top_level_265 Bool)) Bool (and
                                         (= (rec__nested_init_by_proof__rec__d
                                            (us_split_discrs1
                                            temp___expr_264)) (distinct 1 0))
                                         (and
                                         (and
                                         (=>
                                         (nested_init_by_proof__rec__f3__pred
                                         temp___expr_264)
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f3
                                            (us_split_fields1
                                            temp___expr_264))) false))
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f2
                                            (us_split_fields1
                                            temp___expr_264))) false))
                                         (=>
                                         (nested_init_by_proof__rec__f1__pred
                                         temp___expr_264)
                                         (and
                                         (= (to_rep
                                            (rec__value
                                            (rec__nested_init_by_proof__rec__f1
                                            (us_split_fields1
                                            temp___expr_264)))) 15)
                                         (= (attr__init
                                            (rec__nested_init_by_proof__rec__f1
                                            (us_split_fields1
                                            temp___expr_264))) true))))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const nested_init_by_proof__rec__d__first__bit2 Int)

(declare-const nested_init_by_proof__rec__d__last__bit2 Int)

(declare-const nested_init_by_proof__rec__d__position2 Int)

;; nested_init_by_proof__rec__d__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__d__first__bit2))

;; nested_init_by_proof__rec__d__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__d__first__bit2 nested_init_by_proof__rec__d__last__bit2))

;; nested_init_by_proof__rec__d__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__d__position2))

(declare-const nested_init_by_proof__rec__f3__first__bit2 Int)

(declare-const nested_init_by_proof__rec__f3__last__bit2 Int)

(declare-const nested_init_by_proof__rec__f3__position2 Int)

;; nested_init_by_proof__rec__f3__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f3__first__bit2))

;; nested_init_by_proof__rec__f3__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f3__first__bit2 nested_init_by_proof__rec__f3__last__bit2))

;; nested_init_by_proof__rec__f3__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f3__position2))

(declare-const nested_init_by_proof__rec__f2__first__bit2 Int)

(declare-const nested_init_by_proof__rec__f2__last__bit2 Int)

(declare-const nested_init_by_proof__rec__f2__position2 Int)

;; nested_init_by_proof__rec__f2__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f2__first__bit2))

;; nested_init_by_proof__rec__f2__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f2__first__bit2 nested_init_by_proof__rec__f2__last__bit2))

;; nested_init_by_proof__rec__f2__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f2__position2))

(declare-const nested_init_by_proof__rec__f1__first__bit2 Int)

(declare-const nested_init_by_proof__rec__f1__last__bit2 Int)

(declare-const nested_init_by_proof__rec__f1__position2 Int)

;; nested_init_by_proof__rec__f1__first__bit_axiom
  (assert (<= 0 nested_init_by_proof__rec__f1__first__bit2))

;; nested_init_by_proof__rec__f1__last__bit_axiom
  (assert
  (< nested_init_by_proof__rec__f1__first__bit2 nested_init_by_proof__rec__f1__last__bit2))

;; nested_init_by_proof__rec__f1__position_axiom
  (assert (<= 0 nested_init_by_proof__rec__f1__position2))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((t9b__ref 0))
(((t9b__refqtmk (t9b__content us_rep)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) us_rep (t9b__content
                                                                    a))

;; my_eq__post_axiom
  (assert true)

;; my_eq__def_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (= (= (my_eq x y) true)
     (and
     (and
     (and
     (= (= (rec__nested_init_by_proof__rec__d (us_split_discrs1 x)) true)
     (= (rec__nested_init_by_proof__rec__d (us_split_discrs1 y)) true))
     (=
     (= (let ((temp___212 (rec__nested_init_by_proof__rec__f2
                          (us_split_fields1 x))))
        (ite (= (attr__init temp___212) true) true false)) true)
     (= (let ((temp___213 (rec__nested_init_by_proof__rec__f2
                          (us_split_fields1 y))))
        (ite (= (attr__init temp___213) true) true false)) true)))
     (=>
     (= (let ((temp___214 (rec__nested_init_by_proof__rec__f2
                          (us_split_fields1 x))))
        (ite (= (attr__init temp___214) true) true false)) true)
     (= (to_rep
        (rec__value
        (rec__nested_init_by_proof__rec__f2 (us_split_fields1 x)))) (to_rep
                                                                    (rec__value
                                                                    (rec__nested_init_by_proof__rec__f2
                                                                    (us_split_fields1
                                                                    y)))))))
     (ite (= (rec__nested_init_by_proof__rec__d (us_split_discrs1 x)) true)
     (and
     (=
     (= (let ((temp___215 (rec__nested_init_by_proof__rec__f1
                          (us_split_fields1 x))))
        (ite (= (attr__init temp___215) true) true false)) true)
     (= (let ((temp___216 (rec__nested_init_by_proof__rec__f1
                          (us_split_fields1 y))))
        (ite (= (attr__init temp___216) true) true false)) true))
     (=>
     (= (let ((temp___217 (rec__nested_init_by_proof__rec__f1
                          (us_split_fields1 x))))
        (ite (= (attr__init temp___217) true) true false)) true)
     (= (to_rep
        (rec__value
        (rec__nested_init_by_proof__rec__f1 (us_split_fields1 x)))) (to_rep
                                                                    (rec__value
                                                                    (rec__nested_init_by_proof__rec__f1
                                                                    (us_split_fields1
                                                                    y)))))))
     (and
     (=
     (= (let ((temp___218 (rec__nested_init_by_proof__rec__f3
                          (us_split_fields1 x))))
        (ite (= (attr__init temp___218) true) true false)) true)
     (= (let ((temp___219 (rec__nested_init_by_proof__rec__f3
                          (us_split_fields1 y))))
        (ite (= (attr__init temp___219) true) true false)) true))
     (=>
     (= (let ((temp___220 (rec__nested_init_by_proof__rec__f3
                          (us_split_fields1 x))))
        (ite (= (attr__init temp___220) true) true false)) true)
     (= (to_rep
        (rec__value
        (rec__nested_init_by_proof__rec__f3 (us_split_fields1 x)))) (to_rep
                                                                    (rec__value
                                                                    (rec__nested_init_by_proof__rec__f3
                                                                    (us_split_fields1
                                                                    y)))))))))) :pattern (
  (my_eq x y)) )))

(define-fun dynamic_invariant4 ((temp___expr_232 us_rep1)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)
  (temp___do_typ_inv_231 Bool)) Bool (let ((temp___233 (rec__nested_init_by_proof__holder__d
                                                       (us_split_discrs3
                                                       temp___expr_232))))
                                     (and (dynamic_property 1
                                     (to_rep temp___233)
                                     (first1
                                     (rec__nested_init_by_proof__holder__content
                                     (us_split_fields3 temp___expr_232)))
                                     (last1
                                     (rec__nested_init_by_proof__holder__content
                                     (us_split_fields3 temp___expr_232))))
                                     (and
                                     (= (first1
                                        (rec__nested_init_by_proof__holder__content
                                        (us_split_fields3 temp___expr_232))) 1)
                                     (= (last1
                                        (rec__nested_init_by_proof__holder__content
                                        (us_split_fields3 temp___expr_232))) 
                                     (to_rep temp___233))))))

(declare-const rliteral my_nat)

;; rliteral_axiom
  (assert (= (my_natqtint rliteral) 0))

(declare-const rliteral1 my_nat)

;; rliteral_axiom
  (assert (= (my_natqtint rliteral1) 14))

(assert
;; defqtvc
 ;; File "nested_init_by_proof.adb", line 1, characters 0-0
  (not
  (forall ((x__split_fields (Array Int us_rep)) (c Int)
  (r__split_fields us_split_fields))
  (=>
  (exists ((usf Int))
  (and (dynamic_invariant1 usf true true true true)
  (exists ((usf1 us_rep1))
  (= (to_rep (rec__nested_init_by_proof__holder__d (us_split_discrs3 usf1))) usf))))
  (=> (in_range2 15)
  (=> (default_initial_assumption1
  (us_repqtmk2 x__split_discrs (us_split_fieldsqtmk2 x__split_fields)) false)
  (=> (dynamic_invariant2
  (us_repqtmk2 x__split_discrs (us_split_fieldsqtmk2 x__split_fields)) false
  false true true)
  (=> (dynamic_invariant c false false true true)
  (=> (= r__attr__constrained true)
  (=> (default_initial_assumption2
  (us_repqtmk r__split_discrs r__split_fields) false)
  (=> (dynamic_invariant3 (us_repqtmk r__split_discrs r__split_fields) false
  false true true)
  (forall ((x__split_fields1 (Array Int us_rep)))
  (=>
  (= x__split_fields1 (store x__split_fields 10 (us_repqtmk
                                                (us_split_discrsqtmk
                                                (distinct 1 0))
                                                (us_split_fieldsqtmk
                                                (my_nat__init_wrapperqtmk
                                                rliteral true)
                                                (my_nat__init_wrapperqtmk
                                                rliteral true)
                                                (my_nat__init_wrapperqtmk
                                                dummy1 true)))))
  (=>
  (let ((temp___298 (select x__split_fields1 10)))
  (and
  (and
  (= (attr__init
     (rec__nested_init_by_proof__rec__f2 (us_split_fields1 temp___298))) true)
  (=> (nested_init_by_proof__rec__f1__pred temp___298)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f1 (us_split_fields1 temp___298))) true)))
  (=> (nested_init_by_proof__rec__f3__pred temp___298)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f3 (us_split_fields1 temp___298))) true))))
  (forall ((x__split_fields2 (Array Int us_rep)))
  (=>
  (= x__split_fields2 (store x__split_fields1 8 (us_repqtmk r__split_discrs
                                                r__split_fields)))
  (let ((temp___312 (select x__split_fields2 8)))
  (let ((q_ (us_split_fields1 temp___312)))
  (forall ((x__split_fields3 (Array Int us_rep)))
  (=>
  (= x__split_fields3 (store x__split_fields2 8 (us_repqtmk
                                                (us_split_discrs1 temp___312)
                                                (us_split_fieldsqtmk
                                                (my_nat__init_wrapperqtmk
                                                rliteral1 true)
                                                (rec__nested_init_by_proof__rec__f1
                                                q_)
                                                (rec__nested_init_by_proof__rec__f3
                                                q_)))))
  (=>
  (let ((temp___324 (select x__split_fields3 8)))
  (and
  (and
  (= (attr__init
     (rec__nested_init_by_proof__rec__f2 (us_split_fields1 temp___324))) true)
  (=> (nested_init_by_proof__rec__f1__pred temp___324)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f1 (us_split_fields1 temp___324))) true)))
  (=> (nested_init_by_proof__rec__f3__pred temp___324)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f3 (us_split_fields1 temp___324))) true))))
  (forall ((o Int))
  (=>
  (= (to_rep
     (rec__value
     (rec__nested_init_by_proof__rec__f2
     (us_split_fields1 (select x__split_fields3 6))))) o)
  (forall ((nested_init_by_proof__init__x Int) (o1 Int))
  (=> (= o1 nested_init_by_proof__init__x)
  (=> (dynamic_invariant1 o1 false true true true)
  (let ((temp___332 (select x__split_fields3 6)))
  (let ((q_1 (us_split_fields1 temp___332)))
  (forall ((o2 my_nat))
  (=> (= (to_rep o2) nested_init_by_proof__init__x)
  (forall ((x__split_fields4 (Array Int us_rep)))
  (=>
  (= x__split_fields4 (store x__split_fields3 6 (us_repqtmk
                                                (us_split_discrs1 temp___332)
                                                (us_split_fieldsqtmk
                                                (my_nat__init_wrapperqtmk o2
                                                true)
                                                (rec__nested_init_by_proof__rec__f1
                                                q_1)
                                                (rec__nested_init_by_proof__rec__f3
                                                q_1)))))
  (forall ((o3 Int))
  (=>
  (= (to_rep
     (rec__value
     (rec__nested_init_by_proof__rec__f2
     (us_split_fields1 (select x__split_fields4 6))))) o3)
  (forall ((o4 my_nat))
  (=> (= (to_rep o4) o3)
  (forall ((o5 Int))
  (=> (= (to_rep o4) o5)
  (forall ((nested_init_by_proof__assign__x Int))
  (=> (dynamic_invariant1 nested_init_by_proof__assign__x true true true
  true)
  (let ((temp___338 (select x__split_fields4 6)))
  (let ((q_2 (us_split_fields1 temp___338)))
  (forall ((o6 my_nat))
  (=> (= (to_rep o6) nested_init_by_proof__assign__x)
  (forall ((x__split_fields5 (Array Int us_rep)))
  (=>
  (= x__split_fields5 (store x__split_fields4 6 (us_repqtmk
                                                (us_split_discrs1 temp___338)
                                                (us_split_fieldsqtmk
                                                (my_nat__init_wrapperqtmk o6
                                                true)
                                                (rec__nested_init_by_proof__rec__f1
                                                q_2)
                                                (rec__nested_init_by_proof__rec__f3
                                                q_2)))))
  (let ((nested_init_by_proof__init_f3__x__compl (select x__split_fields5 6)))
  (forall ((nested_init_by_proof__init_f3__x__discrs Bool)
  (nested_init_by_proof__init_f3__x__fields us_split_fields))
  (=>
  (forall ((nested_init_by_proof__init_f3__x__compl1 us_rep)
  (nested_init_by_proof__init_f3__x__discrs1 Bool)
  (nested_init_by_proof__init_f3__x__fields1 us_split_fields))
  (my_eq__function_guard
  (my_eq
  (us_repqtmk (us_split_discrsqtmk nested_init_by_proof__init_f3__x__discrs1)
  nested_init_by_proof__init_f3__x__fields1)
  (us_repqtmk (us_split_discrs1 nested_init_by_proof__init_f3__x__compl1)
  (us_split_fields1 nested_init_by_proof__init_f3__x__compl1)))
  (us_repqtmk (us_split_discrsqtmk nested_init_by_proof__init_f3__x__discrs1)
  nested_init_by_proof__init_f3__x__fields1)
  (us_repqtmk (us_split_discrs1 nested_init_by_proof__init_f3__x__compl1)
  (us_split_fields1 nested_init_by_proof__init_f3__x__compl1))))
  (=>
  (and
  (= (= nested_init_by_proof__init_f3__x__discrs true)
  (= (rec__nested_init_by_proof__rec__d
     (us_split_discrs1 nested_init_by_proof__init_f3__x__compl)) true))
  (ite (= nested_init_by_proof__init_f3__x__discrs true)
  (= (my_eq
     (us_repqtmk
     (us_split_discrsqtmk nested_init_by_proof__init_f3__x__discrs)
     nested_init_by_proof__init_f3__x__fields)
     (us_repqtmk (us_split_discrs1 nested_init_by_proof__init_f3__x__compl)
     (us_split_fields1 nested_init_by_proof__init_f3__x__compl))) true)
  (and
  (and
  (= (attr__init
     (rec__nested_init_by_proof__rec__f3
     nested_init_by_proof__init_f3__x__fields)) true)
  (=
  (= (attr__init
     (rec__nested_init_by_proof__rec__f2
     nested_init_by_proof__init_f3__x__fields)) true)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f2
     (us_split_fields1 nested_init_by_proof__init_f3__x__compl))) true)))
  (=>
  (= (attr__init
     (rec__nested_init_by_proof__rec__f2
     nested_init_by_proof__init_f3__x__fields)) true)
  (= (to_rep
     (rec__value
     (rec__nested_init_by_proof__rec__f2
     nested_init_by_proof__init_f3__x__fields))) (to_rep
                                                 (rec__value
                                                 (rec__nested_init_by_proof__rec__f2
                                                 (us_split_fields1
                                                 nested_init_by_proof__init_f3__x__compl)))))))))
  (forall ((x__split_fields6 (Array Int us_rep)))
  (=>
  (= x__split_fields6 (store x__split_fields5 6 (us_repqtmk
                                                (us_split_discrsqtmk
                                                nested_init_by_proof__init_f3__x__discrs)
                                                nested_init_by_proof__init_f3__x__fields)))
  (=>
  (let ((temp___355 (select x__split_fields6 6)))
  (and
  (and
  (= (attr__init
     (rec__nested_init_by_proof__rec__f2 (us_split_fields1 temp___355))) true)
  (=> (nested_init_by_proof__rec__f1__pred temp___355)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f1 (us_split_fields1 temp___355))) true)))
  (=> (nested_init_by_proof__rec__f3__pred temp___355)
  (= (attr__init
     (rec__nested_init_by_proof__rec__f3 (us_split_fields1 temp___355))) true))))
  (=>
  (exists ((o7 Int))
  (= (to_rep
     (rec__value
     (rec__nested_init_by_proof__rec__f1
     (us_split_fields1 (select x__split_fields6 10))))) o7))
  (nested_init_by_proof__rec__f3__pred (select x__split_fields6 12))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
