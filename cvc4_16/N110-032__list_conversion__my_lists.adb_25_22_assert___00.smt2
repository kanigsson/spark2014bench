;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__my_lists__my_lists__list__capacity count_type)))))
(define-fun us_split_discrs_rec__my_lists__my_lists__list__capacity__projection ((a us_split_discrs)) count_type 
  (rec__my_lists__my_lists__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__my_lists__my_lists__list us_main_type)))))
(define-fun us_split_fields_rec__my_lists__my_lists__list__projection ((a us_split_fields)) us_main_type 
  (rec__my_lists__my_lists__list a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__my_lists__my_lists__list__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__my_lists__my_lists__list__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__my_lists__my_lists__list
                           (us_split_fields1 a))
                           (rec__my_lists__my_lists__list
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const my_lists__my_lists__list__capacity__first__bit Int)

(declare-const my_lists__my_lists__list__capacity__last__bit Int)

(declare-const my_lists__my_lists__list__capacity__position Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit my_lists__my_lists__list__capacity__last__bit))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

(define-fun in_range1 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const my_lists__my_lists__list__capacity__first__bit1 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit1 Int)

(declare-const my_lists__my_lists__list__capacity__position1 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit1))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit1 my_lists__my_lists__list__capacity__last__bit1))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((tl1S__ref 0))
(((tl1S__refqtmk (tl1S__content us_rep)))))
(define-fun tl1S__ref_tl1S__content__projection ((a tl1S__ref)) us_rep 
  (tl1S__content a))

(declare-const l1__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun dynamic_invariant ((temp___expr_655 us_rep)
  (temp___is_init_651 Bool) (temp___skip_constant_652 Bool)
  (temp___do_toplevel_653 Bool)
  (temp___do_typ_inv_654 Bool)) Bool (=>
                                     (not (= temp___skip_constant_652 true))
                                     (in_range1 100 temp___expr_655)))

(define-fun default_initial_assumption ((temp___expr_657 us_rep)
  (temp___skip_top_level_658 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_657))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_658 true))
                                         (= (is_empty temp___expr_657) true))))

(define-fun in_range2 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const my_lists__my_lists__list__capacity__first__bit2 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit2 Int)

(declare-const my_lists__my_lists__list__capacity__position2 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit2))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit2 my_lists__my_lists__list__capacity__last__bit2))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((c_list1__ref 0))
(((c_list1__refqtmk (c_list1__content us_rep)))))
(define-fun c_list1__ref_c_list1__content__projection ((a c_list1__ref)) us_rep 
  (c_list1__content a))

(declare-const l2__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

(define-fun dynamic_invariant1 ((temp___expr_583 us_rep)
  (temp___is_init_579 Bool) (temp___skip_constant_580 Bool)
  (temp___do_toplevel_581 Bool)
  (temp___do_typ_inv_582 Bool)) Bool (=>
                                     (not (= temp___skip_constant_580 true))
                                     (in_range2 100 temp___expr_583)))

(define-fun default_initial_assumption1 ((temp___expr_585 us_rep)
  (temp___skip_top_level_586 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_585))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_586 true))
                                         (= (is_empty temp___expr_585) true))))

(define-fun in_range3 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const my_lists__my_lists__list__capacity__first__bit3 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit3 Int)

(declare-const my_lists__my_lists__list__capacity__position3 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit3))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit3 my_lists__my_lists__list__capacity__last__bit3))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position3))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((c_list2__ref 0))
(((c_list2__refqtmk (c_list2__content us_rep)))))
(define-fun c_list2__ref_c_list2__content__projection ((a c_list2__ref)) us_rep 
  (c_list2__content a))

(declare-const l3__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun dynamic_invariant2 ((temp___expr_593 us_rep)
  (temp___is_init_589 Bool) (temp___skip_constant_590 Bool)
  (temp___do_toplevel_591 Bool)
  (temp___do_typ_inv_592 Bool)) Bool (=>
                                     (not (= temp___skip_constant_590 true))
                                     (in_range3 100 temp___expr_593)))

(define-fun default_initial_assumption2 ((temp___expr_595 us_rep)
  (temp___skip_top_level_596 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_595))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_596 true))
                                         (= (is_empty temp___expr_595) true))))

(define-fun in_range4 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const my_lists__my_lists__list__capacity__first__bit4 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit4 Int)

(declare-const my_lists__my_lists__list__capacity__position4 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit4))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit4 my_lists__my_lists__list__capacity__last__bit4))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position4))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((c_list11__ref 0))
(((c_list11__refqtmk (c_list11__content us_rep)))))
(define-fun c_list11__ref_c_list11__content__projection ((a c_list11__ref)) us_rep 
  (c_list11__content a))

(declare-const l4__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq5 a b) (oeq a b)) :pattern ((user_eq5 a b)) )))

(define-fun dynamic_invariant3 ((temp___expr_615 us_rep)
  (temp___is_init_611 Bool) (temp___skip_constant_612 Bool)
  (temp___do_toplevel_613 Bool)
  (temp___do_typ_inv_614 Bool)) Bool (=>
                                     (not (= temp___skip_constant_612 true))
                                     (in_range4 100 temp___expr_615)))

(define-fun default_initial_assumption3 ((temp___expr_617 us_rep)
  (temp___skip_top_level_618 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_617))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_618 true))
                                         (= (is_empty temp___expr_617) true))))

(define-fun in_range5 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const my_lists__my_lists__list__capacity__first__bit5 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit5 Int)

(declare-const my_lists__my_lists__list__capacity__position5 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit5))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit5 my_lists__my_lists__list__capacity__last__bit5))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position5))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((c_list12__ref 0))
(((c_list12__refqtmk (c_list12__content us_rep)))))
(define-fun c_list12__ref_c_list12__content__projection ((a c_list12__ref)) us_rep 
  (c_list12__content a))

(declare-const l5__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)) )))

(define-fun dynamic_invariant4 ((temp___expr_625 us_rep)
  (temp___is_init_621 Bool) (temp___skip_constant_622 Bool)
  (temp___do_toplevel_623 Bool)
  (temp___do_typ_inv_624 Bool)) Bool (=>
                                     (not (= temp___skip_constant_622 true))
                                     (in_range5 100 temp___expr_625)))

(define-fun default_initial_assumption4 ((temp___expr_627 us_rep)
  (temp___skip_top_level_628 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_627))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_628 true))
                                         (= (is_empty temp___expr_627) true))))

(define-fun in_range6 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const my_lists__my_lists__list__capacity__first__bit6 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit6 Int)

(declare-const my_lists__my_lists__list__capacity__position6 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit6))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit6 my_lists__my_lists__list__capacity__last__bit6))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position6))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((c_list21__ref 0))
(((c_list21__refqtmk (c_list21__content us_rep)))))
(define-fun c_list21__ref_c_list21__content__projection ((a c_list21__ref)) us_rep 
  (c_list21__content a))

(declare-const l6__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq7 a b) (oeq a b)) :pattern ((user_eq7 a b)) )))

(define-fun dynamic_invariant5 ((temp___expr_635 us_rep)
  (temp___is_init_631 Bool) (temp___skip_constant_632 Bool)
  (temp___do_toplevel_633 Bool)
  (temp___do_typ_inv_634 Bool)) Bool (=>
                                     (not (= temp___skip_constant_632 true))
                                     (in_range6 100 temp___expr_635)))

(define-fun default_initial_assumption5 ((temp___expr_637 us_rep)
  (temp___skip_top_level_638 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_637))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_638 true))
                                         (= (is_empty temp___expr_637) true))))

(define-fun in_range7 ((rec__my_lists__my_lists__list__capacity1 Int)
  (a us_rep)) Bool (= rec__my_lists__my_lists__list__capacity1 (to_rep
                                                               (rec__my_lists__my_lists__list__capacity
                                                               (us_split_discrs1
                                                               a)))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const my_lists__my_lists__list__capacity__first__bit7 Int)

(declare-const my_lists__my_lists__list__capacity__last__bit7 Int)

(declare-const my_lists__my_lists__list__capacity__position7 Int)

;; my_lists__my_lists__list__capacity__first__bit_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__first__bit7))

;; my_lists__my_lists__list__capacity__last__bit_axiom
  (assert
  (< my_lists__my_lists__list__capacity__first__bit7 my_lists__my_lists__list__capacity__last__bit7))

;; my_lists__my_lists__list__capacity__position_axiom
  (assert (<= 0 my_lists__my_lists__list__capacity__position7))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((c_list22__ref 0))
(((c_list22__refqtmk (c_list22__content us_rep)))))
(define-fun c_list22__ref_c_list22__content__projection ((a c_list22__ref)) us_rep 
  (c_list22__content a))

(declare-const l7__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant6 ((temp___expr_645 us_rep)
  (temp___is_init_641 Bool) (temp___skip_constant_642 Bool)
  (temp___do_toplevel_643 Bool)
  (temp___do_typ_inv_644 Bool)) Bool (=>
                                     (not (= temp___skip_constant_642 true))
                                     (in_range7 100 temp___expr_645)))

(define-fun default_initial_assumption6 ((temp___expr_647 us_rep)
  (temp___skip_top_level_648 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__my_lists__my_lists__list__capacity
                                            (us_split_discrs1
                                            temp___expr_647))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_648 true))
                                         (= (is_empty temp___expr_647) true))))

(define-fun dynamic_invariant7 ((temp___expr_243 Int)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)
  (temp___do_typ_inv_242 Bool)) Bool (=>
                                     (or (= temp___is_init_239 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_243)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__my_lists__my_lists__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant7 result true false true true))) :pattern ((length
                                                                  container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(declare-fun model1 (us_rep) us_rep1)

(declare-fun model__function_guard (us_rep1 us_rep) Bool)

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range8 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun oeq1 ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq9 a b) (oeq1 a b)) :pattern ((user_eq9 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_294 us_rep1)
  (temp___skip_top_level_295 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_295 true))
                                         (= (length1 temp___expr_294) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq10 (extended_index extended_index) Bool)

(declare-const dummy10 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant8 ((temp___expr_286 Int)
  (temp___is_init_282 Bool) (temp___skip_constant_283 Bool)
  (temp___do_toplevel_284 Bool)
  (temp___do_typ_inv_285 Bool)) Bool (=>
                                     (or (= temp___is_init_282 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_286)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant7 result true false
     true true))) :pattern ((length1 container)) )))

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 100))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq11 (element_type element_type) Bool)

(declare-const dummy11 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant9 ((temp___expr_279 Int)
  (temp___is_init_275 Bool) (temp___skip_constant_276 Bool)
  (temp___do_toplevel_277 Bool)
  (temp___do_typ_inv_278 Bool)) Bool (=>
                                     (or (= temp___is_init_275 true)
                                     (<= 0 100)) (in_range10
                                     temp___expr_279)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant8 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant9 (get container position) true false true true)) :pattern (
  (get container position)) ))))

(assert
;; defqtvc
 ;; File "my_lists.ads", line 32, characters 0-0
  (not
  (forall ((l1__split_fields us_main_type) (l3__split_fields us_main_type)
  (l4__split_fields us_main_type) (l5__split_fields us_main_type)
  (l6__split_fields us_main_type) (l7__split_fields us_main_type))
  (=> (in_range 100)
  (=> (default_initial_assumption
  (us_repqtmk l1__split_discrs (us_split_fieldsqtmk l1__split_fields)) false)
  (=> (dynamic_invariant
  (us_repqtmk l1__split_discrs (us_split_fieldsqtmk l1__split_fields)) false
  false true true)
  (let ((o (us_repqtmk l1__split_discrs
           (us_split_fieldsqtmk l1__split_fields))))
  (forall ((l2__split_fields us_main_type))
  (=> (= (us_split_fieldsqtmk l2__split_fields) (us_split_fields1 o))
  (=> (= l2__split_discrs (us_split_discrs1 o))
  (=> (dynamic_invariant1
  (us_repqtmk l2__split_discrs (us_split_fieldsqtmk l2__split_fields)) true
  false true true)
  (=> (default_initial_assumption2
  (us_repqtmk l3__split_discrs (us_split_fieldsqtmk l3__split_fields)) false)
  (=> (dynamic_invariant2
  (us_repqtmk l3__split_discrs (us_split_fieldsqtmk l3__split_fields)) false
  false true true)
  (=> (default_initial_assumption3
  (us_repqtmk l4__split_discrs (us_split_fieldsqtmk l4__split_fields)) false)
  (=> (dynamic_invariant3
  (us_repqtmk l4__split_discrs (us_split_fieldsqtmk l4__split_fields)) false
  false true true)
  (=> (default_initial_assumption4
  (us_repqtmk l5__split_discrs (us_split_fieldsqtmk l5__split_fields)) false)
  (=> (dynamic_invariant4
  (us_repqtmk l5__split_discrs (us_split_fieldsqtmk l5__split_fields)) false
  false true true)
  (=> (default_initial_assumption5
  (us_repqtmk l6__split_discrs (us_split_fieldsqtmk l6__split_fields)) false)
  (=> (dynamic_invariant5
  (us_repqtmk l6__split_discrs (us_split_fieldsqtmk l6__split_fields)) false
  false true true)
  (=> (default_initial_assumption6
  (us_repqtmk l7__split_discrs (us_split_fieldsqtmk l7__split_fields)) false)
  (=> (dynamic_invariant6
  (us_repqtmk l7__split_discrs (us_split_fieldsqtmk l7__split_fields)) false
  false true true)
  (forall ((my_lists__my_lists__clear__container__fields us_main_type))
  (=>
  (= (length
     (us_repqtmk l1__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields))) 0)
  (forall ((l1__split_fields1 us_main_type))
  (=> (= l1__split_fields1 my_lists__my_lists__clear__container__fields)
  (forall ((my_lists__my_lists__clear__container__fields1 us_main_type))
  (=>
  (= (length
     (us_repqtmk l2__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields1))) 0)
  (forall ((l2__split_fields1 us_main_type))
  (=> (= l2__split_fields1 my_lists__my_lists__clear__container__fields1)
  (forall ((my_lists__my_lists__clear__container__fields2 us_main_type))
  (=>
  (= (length
     (us_repqtmk l3__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields2))) 0)
  (forall ((l3__split_fields1 us_main_type))
  (=> (= l3__split_fields1 my_lists__my_lists__clear__container__fields2)
  (forall ((my_lists__my_lists__clear__container__fields3 us_main_type))
  (=>
  (= (length
     (us_repqtmk l4__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields3))) 0)
  (forall ((l4__split_fields1 us_main_type))
  (=> (= l4__split_fields1 my_lists__my_lists__clear__container__fields3)
  (forall ((my_lists__my_lists__clear__container__fields4 us_main_type))
  (=>
  (= (length
     (us_repqtmk l5__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields4))) 0)
  (forall ((l5__split_fields1 us_main_type))
  (=> (= l5__split_fields1 my_lists__my_lists__clear__container__fields4)
  (forall ((my_lists__my_lists__clear__container__fields5 us_main_type))
  (=>
  (= (length
     (us_repqtmk l6__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields5))) 0)
  (forall ((l6__split_fields1 us_main_type))
  (=> (= l6__split_fields1 my_lists__my_lists__clear__container__fields5)
  (forall ((my_lists__my_lists__clear__container__fields6 us_main_type))
  (=>
  (= (length
     (us_repqtmk l7__split_discrs
     (us_split_fieldsqtmk my_lists__my_lists__clear__container__fields6))) 0)
  (forall ((l7__split_fields1 us_main_type))
  (=> (= l7__split_fields1 my_lists__my_lists__clear__container__fields6)
  (=>
  (= (to_rep (rec__my_lists__my_lists__list__capacity l1__split_discrs)) 100)
  (=>
  (= (to_rep (rec__my_lists__my_lists__list__capacity l2__split_discrs)) 100)
  (=>
  (= (to_rep (rec__my_lists__my_lists__list__capacity l3__split_discrs)) 100)
  (=>
  (= (to_rep (rec__my_lists__my_lists__list__capacity l4__split_discrs)) 100)
  (=>
  (= (to_rep (rec__my_lists__my_lists__list__capacity l5__split_discrs)) 100)
  (= (to_rep (rec__my_lists__my_lists__list__capacity l6__split_discrs)) 100)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
