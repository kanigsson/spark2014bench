;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__pack__t1__x Bool)))))
(define-fun us_split_fields_rec__pack__t1__x__projection ((a us_split_fields)) Bool 
  (rec__pack__t1__x a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b1 us_rep)) Bool (ite (= (ite (rec__pack__t1__x (us_split_fields1 a)) 1 0) (ite 
                    (rec__pack__t1__x (us_split_fields1 b1)) 1 0)) true
                    false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const pack__t1__x__first__bit Int)

(declare-const pack__t1__x__last__bit Int)

(declare-const pack__t1__x__position Int)

;; pack__t1__x__first__bit_axiom
  (assert (<= 0 pack__t1__x__first__bit))

;; pack__t1__x__last__bit_axiom
  (assert (< pack__t1__x__first__bit pack__t1__x__last__bit))

;; pack__t1__x__position_axiom
  (assert (<= 0 pack__t1__x__position))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((t1__ref 0))
(((t1__refqtmk (t1__content us_rep)))))
(define-fun t1__ref_t1__content__projection ((a t1__ref)) us_rep (t1__content
                                                                 a))

(declare-const x1 us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun query_x1 (tuple0) Bool)

(declare-fun query_x1__function_guard (Bool tuple0) Bool)

;; query_x1__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (query_x1 us_void_param)))
     (=> (query_x1__function_guard result us_void_param) (= result true))) :pattern (
  (query_x1 us_void_param)) )))

;; query_x1__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (query_x1 us_void_param) true)
     (= (rec__pack__t1__x (us_split_fields1 x1)) true)) :pattern ((query_x1
                                                                  us_void_param)) )))

(declare-fun query_x2 (tuple0) Int)

(declare-fun query_x2__function_guard (Int tuple0) Bool)

(declare-sort t2 0)

(declare-fun t2qtint (t2) Int)

;; t2'axiom
  (assert (forall ((i t2)) (and (<= 1 (t2qtint i)) (<= (t2qtint i) 10))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t2 t2) Bool)

(declare-const dummy1 t2)

(declare-datatypes ((t2__ref 0))
(((t2__refqtmk (t2__content t2)))))
(define-fun t2__ref_t2__content__projection ((a t2__ref)) t2 (t2__content a))

(define-fun dynamic_invariant ((temp___expr_168 Int)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)
  (temp___do_typ_inv_167 Bool)) Bool (=>
                                     (or (= temp___is_init_164 true)
                                     (<= 1 10)) (in_range1 temp___expr_168)))

;; query_x2__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (query_x2 us_void_param)))
     (=> (query_x2__function_guard result us_void_param)
     (and (= result 3) (dynamic_invariant result true false true true)))) :pattern (
  (query_x2 us_void_param)) )))

;; x1__def_axiom
  (assert (= x1 (us_repqtmk (us_split_fieldsqtmk (distinct 1 0)))))

(assert
;; defqtvc
 ;; File "user.adb", line 2, characters 0-0
  (not
  (forall ((spark__branch Bool))
  (=> (= (us_repqtmk (us_split_fieldsqtmk (distinct 1 0))) x1)
  (=> (= spark__branch b)
  (=> (= spark__branch true)
  (= (rec__pack__t1__x (us_split_fields1 x1)) true)))))))
(check-sat)
