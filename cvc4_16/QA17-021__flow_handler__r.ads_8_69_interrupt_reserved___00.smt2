;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort interrupt_id 0)

(declare-fun interrupt_idqtint (interrupt_id) Int)

;; interrupt_id'axiom
  (assert
  (forall ((i interrupt_id))
  (and (<= 0 (interrupt_idqtint i)) (<= (interrupt_idqtint i) 63))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (interrupt_id interrupt_id) Bool)

(declare-const dummy interrupt_id)

(declare-datatypes ((interrupt_id__ref 0))
(((interrupt_id__refqtmk (interrupt_id__content interrupt_id)))))
(define-fun interrupt_id__ref_interrupt_id__content__projection ((a interrupt_id__ref)) interrupt_id 
  (interrupt_id__content a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__r__pt__irq interrupt_id)))))
(define-fun us_split_discrs_rec__r__pt__irq__projection ((a us_split_discrs)) interrupt_id 
  (rec__r__pt__irq a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_discrs1 us_split_discrs)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const r__pt__irq__first__bit Int)

(declare-const r__pt__irq__last__bit Int)

(declare-const r__pt__irq__position Int)

;; r__pt__irq__first__bit_axiom
  (assert (<= 0 r__pt__irq__first__bit))

;; r__pt__irq__last__bit_axiom
  (assert (< r__pt__irq__first__bit r__pt__irq__last__bit))

;; r__pt__irq__position_axiom
  (assert (<= 0 r__pt__irq__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-datatypes ((pt__ref 0))
(((pt__refqtmk (pt__content us_rep)))))
(define-fun pt__ref_pt__content__projection ((a pt__ref)) us_rep (pt__content
                                                                 a))

(define-fun to_rep ((x interrupt_id)) Int (interrupt_idqtint x))

(declare-fun of_rep (Int) interrupt_id)

;; inversion_axiom
  (assert
  (forall ((x interrupt_id))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x interrupt_id)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun dynamic_invariant ((temp___expr_179 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (=>
                                     (or (= temp___is_init_175 true)
                                     (<= 0 63)) (in_range temp___expr_179)))

(declare-const self__ us_rep)

(assert
;; defqtvc
 ;; File "r.ads", line 7, characters 0-0
  (not
  (forall ((temp___273 Bool))
  (=>
  (exists ((o Int))
  (= (to_rep (rec__r__pt__irq (us_split_discrs1 self__))) o))
  (= temp___273 false)))))
(check-sat)
