;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun to_rep1 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int positive))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int positive) (elts a))

(define-fun of_array ((a (Array Int positive)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ((array_of_positives__ref 0))
(((array_of_positives__refqtmk (array_of_positives__content us_t)))))
(define-fun array_of_positives__ref_array_of_positives__content__projection ((a array_of_positives__ref)) us_t 
  (array_of_positives__content a))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__p__search_result__found Bool)))))
(define-fun us_split_discrs_rec__p__search_result__found__projection ((a1 us_split_discrs)) Bool 
  (rec__p__search_result__found a1))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a1 us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a1))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__p__search_result__content integer)))))
(define-fun us_split_fields_rec__p__search_result__content__projection ((a1 us_split_fields)) integer 
  (rec__p__search_result__content a1))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a1 us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a1))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a1 us_rep)) us_split_discrs 
  (us_split_discrs1 a1))

(define-fun us_rep___split_fields__projection ((a1 us_rep)) us_split_fields 
  (us_split_fields1 a1))

(define-fun p__search_result__content__pred ((a1 us_rep)) Bool (= (ite 
  (rec__p__search_result__found (us_split_discrs1 a1)) 1 0) 1))

(define-fun bool_eq2 ((a1 us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__p__search_result__found
                                (us_split_discrs1 a1)) 1 0) (ite (rec__p__search_result__found
                                                                 (us_split_discrs1
                                                                 b)) 1 0))
                        (=> (p__search_result__content__pred a1)
                        (= (to_rep
                           (rec__p__search_result__content
                           (us_split_fields1 a1))) (to_rep
                                                   (rec__p__search_result__content
                                                   (us_split_fields1 b))))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const p__search_result__found__first__bit Int)

(declare-const p__search_result__found__last__bit Int)

(declare-const p__search_result__found__position Int)

;; p__search_result__found__first__bit_axiom
  (assert (<= 0 p__search_result__found__first__bit))

;; p__search_result__found__last__bit_axiom
  (assert
  (< p__search_result__found__first__bit p__search_result__found__last__bit))

;; p__search_result__found__position_axiom
  (assert (<= 0 p__search_result__found__position))

(declare-const p__search_result__content__first__bit Int)

(declare-const p__search_result__content__last__bit Int)

(declare-const p__search_result__content__position Int)

;; p__search_result__content__first__bit_axiom
  (assert (<= 0 p__search_result__content__first__bit))

;; p__search_result__content__last__bit_axiom
  (assert
  (< p__search_result__content__first__bit p__search_result__content__last__bit))

;; p__search_result__content__position_axiom
  (assert (<= 0 p__search_result__content__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((search_result__ref 0))
(((search_result__refqtmk (search_result__content us_rep)))))
(define-fun search_result__ref_search_result__content__projection ((a1 search_result__ref)) us_rep 
  (search_result__content a1))

(declare-const result____attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun default_initial_assumption ((temp___expr_170 us_rep)
  (temp___skip_top_level_171 Bool)) Bool (= (rec__p__search_result__found
                                            (us_split_discrs1
                                            temp___expr_170)) (distinct 0 0)))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r17b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r21b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant1 ((temp___expr_161 us_t)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)
  (temp___do_typ_inv_160 Bool)) Bool (=>
                                     (not (= temp___skip_constant_158 true))
                                     (dynamic_property (- 2147483648)
                                     2147483647 (first1 temp___expr_161)
                                     (last1 temp___expr_161))))

(define-fun in_range3 ((rec__p__search_result__found1 Bool)
  (a1 us_rep)) Bool (= rec__p__search_result__found1 (rec__p__search_result__found
                                                     (us_split_discrs1 a1))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const p__search_result__found__first__bit1 Int)

(declare-const p__search_result__found__last__bit1 Int)

(declare-const p__search_result__found__position1 Int)

;; p__search_result__found__first__bit_axiom
  (assert (<= 0 p__search_result__found__first__bit1))

;; p__search_result__found__last__bit_axiom
  (assert
  (< p__search_result__found__first__bit1 p__search_result__found__last__bit1))

;; p__search_result__found__position_axiom
  (assert (<= 0 p__search_result__found__position1))

(declare-const p__search_result__content__first__bit1 Int)

(declare-const p__search_result__content__last__bit1 Int)

(declare-const p__search_result__content__position1 Int)

;; p__search_result__content__first__bit_axiom
  (assert (<= 0 p__search_result__content__first__bit1))

;; p__search_result__content__last__bit_axiom
  (assert
  (< p__search_result__content__first__bit1 p__search_result__content__last__bit1))

;; p__search_result__content__position_axiom
  (assert (<= 0 p__search_result__content__position1))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((t18b__ref 0))
(((t18b__refqtmk (t18b__content us_rep)))))
(define-fun t18b__ref_t18b__content__projection ((a1 t18b__ref)) us_rep 
  (t18b__content a1))

(define-fun in_range4 ((rec__p__search_result__found1 Bool)
  (a1 us_rep)) Bool (= rec__p__search_result__found1 (rec__p__search_result__found
                                                     (us_split_discrs1 a1))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const p__search_result__found__first__bit2 Int)

(declare-const p__search_result__found__last__bit2 Int)

(declare-const p__search_result__found__position2 Int)

;; p__search_result__found__first__bit_axiom
  (assert (<= 0 p__search_result__found__first__bit2))

;; p__search_result__found__last__bit_axiom
  (assert
  (< p__search_result__found__first__bit2 p__search_result__found__last__bit2))

;; p__search_result__found__position_axiom
  (assert (<= 0 p__search_result__found__position2))

(declare-const p__search_result__content__first__bit2 Int)

(declare-const p__search_result__content__last__bit2 Int)

(declare-const p__search_result__content__position2 Int)

;; p__search_result__content__first__bit_axiom
  (assert (<= 0 p__search_result__content__first__bit2))

;; p__search_result__content__last__bit_axiom
  (assert
  (< p__search_result__content__first__bit2 p__search_result__content__last__bit2))

;; p__search_result__content__position_axiom
  (assert (<= 0 p__search_result__content__position2))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((t22b__ref 0))
(((t22b__refqtmk (t22b__content us_rep)))))
(define-fun t22b__ref_t22b__content__projection ((a1 t22b__ref)) us_rep 
  (t22b__content a1))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(assert
;; defqtvc
 ;; File "p.ads", line 18, characters 0-0
  (not
  (forall ((result____split_discrs Bool))
  (=> (dynamic_invariant1 a true false true true)
  (=> (dynamic_invariant e true false true true)
  (=> (not (= result____attr__constrained true))
  (let ((temp___286 (first1 a)))
  (forall ((i Int))
  (=> (= i temp___286)
  (=>
  (= (and (ite (<= temp___286 i) true false) (ite (<= i (last1 a)) true
                                             false)) true)
  (forall ((i1 Int))
  (=>
  (= (and (ite true true false) (ite (and (<= (first1 a) i1)
                                     (<= i1 (last1 a)))
                                true false)) true)
  (forall ((o Int))
  (=> (= (to_rep1 (select (to_array a) i1)) o)
  (forall ((spark__branch Bool))
  (=> (= spark__branch (ite (= o e) true false))
  (=> (= spark__branch true)
  (=> (= result____split_discrs r17b)
  (forall ((o1 integer))
  (=> (= (to_rep o1) i1)
  (=> (= result____attr__constrained true)
  (= (distinct 1 0) result____split_discrs))))))))))))))))))))))
(check-sat)
