;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep1 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy2 (Array Int natural))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int (Array Int natural)))))))
(declare-fun slide1 ((Array Int (Array Int natural)) Int
  Int) (Array Int (Array Int natural)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int (Array Int natural))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int natural))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155) 1 100
                              (select b (+ (- b__first a__first) temp___idx_155))
                              1 100) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int natural)))
  (b (Array Int (Array Int natural))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155) 1 100
     (select b (+ (- b__first a__first) temp___idx_155)) 1 100) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const dummy3 (Array Int natural))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int (Array Int natural)))))))
(declare-fun slide2 ((Array Int (Array Int natural)) Int
  Int) (Array Int (Array Int natural)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int (Array Int natural))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int natural))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq (select a temp___idx_156) 1 100
                              (select b (+ (- b__first a__first) temp___idx_156))
                              1 100) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int natural)))
  (b (Array Int (Array Int natural))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq (select a temp___idx_156) 1 100
     (select b (+ (- b__first a__first) temp___idx_156)) 1 100) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__test__rec__x integer)))))
(define-fun us_split_discrs_rec__test__rec__x__projection ((a us_split_discrs)) integer 
  (rec__test__rec__x a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__test__rec__y integer)))))
(define-fun us_split_fields_rec__test__rec__y__projection ((a us_split_fields)) integer 
  (rec__test__rec__y a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep (rec__test__rec__x (us_split_discrs1 a))) 
                        (to_rep (rec__test__rec__x (us_split_discrs1 b))))
                        (= (to_rep (rec__test__rec__y (us_split_fields1 a))) 
                        (to_rep (rec__test__rec__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const test__rec__x__first__bit Int)

(declare-const test__rec__x__last__bit Int)

(declare-const test__rec__x__position Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit test__rec__x__last__bit))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position))

(declare-const test__rec__y__first__bit Int)

(declare-const test__rec__y__last__bit Int)

(declare-const test__rec__y__position Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit test__rec__y__last__bit))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((rec1__ref 0))
(((rec1__refqtmk (rec1__content us_rep)))))
(define-fun rec1__ref_rec1__content__projection ((a rec1__ref)) us_rep 
  (rec1__content a))

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 (Array Int us_rep))))))
(declare-fun slide3 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (bool_eq3 (select a temp___idx_157)
                              (select b (+ (- b__first a__first) temp___idx_157))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (bool_eq3 (select a temp___idx_157)
     (select b (+ (- b__first a__first) temp___idx_157))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const test__rec__x__first__bit1 Int)

(declare-const test__rec__x__last__bit1 Int)

(declare-const test__rec__x__position1 Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit1))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit1 test__rec__x__last__bit1))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position1))

(declare-const test__rec__y__first__bit1 Int)

(declare-const test__rec__y__last__bit1 Int)

(declare-const test__rec__y__position1 Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit1))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit1 test__rec__y__last__bit1))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position1))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((rec2__ref 0))
(((rec2__refqtmk (rec2__content us_rep)))))
(define-fun rec2__ref_rec2__content__projection ((a rec2__ref)) us_rep 
  (rec2__content a))

(declare-datatypes ((map__ref4 0))
(((map__refqtmk4 (map__content4 (Array Int us_rep))))))
(declare-fun slide4 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_158 Int))
                           (=>
                           (and (<= a__first temp___idx_158)
                           (<= temp___idx_158 a__last))
                           (= (bool_eq3 (select a temp___idx_158)
                              (select b (+ (- b__first a__first) temp___idx_158))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_158 Int))
  (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last))
  (= (bool_eq3 (select a temp___idx_158)
     (select b (+ (- b__first a__first) temp___idx_158))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-datatypes ((map__ref5 0))
(((map__refqtmk5 (map__content5 (Array Int integer))))))
(declare-fun slide5 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide5 a first first) a) :pattern ((slide5 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide5 a old_first new_first) i)) ))))))

(define-fun bool_eq6 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_159 Int))
                           (=>
                           (and (<= a__first temp___idx_159)
                           (<= temp___idx_159 a__last))
                           (= (to_rep (select a temp___idx_159)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_159)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_159 Int))
  (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last))
  (= (to_rep (select a temp___idx_159)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_159)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort integer_subtype 0)

(declare-fun integer_subtypeqtint (integer_subtype) Int)

;; integer_subtype'axiom
  (assert
  (forall ((i integer_subtype))
  (and (<= (- 2147483648) (integer_subtypeqtint i))
  (<= (integer_subtypeqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq6 (integer_subtype integer_subtype) Bool)

(declare-const dummy6 integer_subtype)

(declare-datatypes ((integer_subtype__ref 0))
(((integer_subtype__refqtmk (integer_subtype__content integer_subtype)))))
(define-fun integer_subtype__ref_integer_subtype__content__projection ((a integer_subtype__ref)) integer_subtype 
  (integer_subtype__content a))

(define-fun to_rep2 ((x integer_subtype)) Int (integer_subtypeqtint x))

(declare-fun of_rep2 (Int) integer_subtype)

;; inversion_axiom
  (assert
  (forall ((x integer_subtype))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer_subtype)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref6 0))
(((map__refqtmk6 (map__content6 (Array Int integer_subtype))))))
(declare-fun slide6 ((Array Int integer_subtype) Int
  Int) (Array Int integer_subtype))

;; slide_eq
  (assert
  (forall ((a (Array Int integer_subtype)))
  (forall ((first Int))
  (! (= (slide6 a first first) a) :pattern ((slide6 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer_subtype)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide6 a old_first new_first) i)) ))))))

(define-fun bool_eq7 ((a (Array Int integer_subtype)) (a__first Int)
  (a__last Int) (b (Array Int integer_subtype)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_160 Int))
                           (=>
                           (and (<= a__first temp___idx_160)
                           (<= temp___idx_160 a__last))
                           (= (to_rep2 (select a temp___idx_160)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_160)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer_subtype)) (b (Array Int integer_subtype)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq7 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_160 Int))
  (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last))
  (= (to_rep2 (select a temp___idx_160)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_160)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun cast ((Array Int integer)) (Array Int integer_subtype))

(declare-fun cast__function_guard ((Array Int integer_subtype)
  (Array Int integer)) Bool)

;; cast__post_axiom
  (assert
  (forall ((input_array (Array Int integer)))
  (! (let ((result (cast input_array)))
     (=> (cast__function_guard result input_array)
     (forall ((k Int))
     (=> (and (<= 0 k) (<= k 2))
     (= (to_rep2 (select result k)) (to_rep (select input_array k))))))) :pattern (
  (cast input_array)) )))

(define-fun in_range4 ((rec__test__rec__x1 Int)
  (a us_split_discrs)) Bool (= rec__test__rec__x1 (to_rep
                                                  (rec__test__rec__x a))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const test__rec__x__first__bit2 Int)

(declare-const test__rec__x__last__bit2 Int)

(declare-const test__rec__x__position2 Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit2))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit2 test__rec__x__last__bit2))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position2))

(declare-const test__rec__y__first__bit2 Int)

(declare-const test__rec__y__last__bit2 Int)

(declare-const test__rec__y__position2 Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit2))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit2 test__rec__y__last__bit2))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position2))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((rec____ref 0))
(((rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__projection ((a rec____ref)) us_rep 
  (rec____content a))

(declare-sort tarr3D1 0)

(declare-fun tarr3D1qtint (tarr3D1) Int)

;; tarr3D1'axiom
  (assert
  (forall ((i tarr3D1))
  (and (<= 1 (tarr3D1qtint i)) (<= (tarr3D1qtint i) 3))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (tarr3D1 tarr3D1) Bool)

(declare-const dummy8 tarr3D1)

(declare-datatypes ((tarr3D1__ref 0))
(((tarr3D1__refqtmk (tarr3D1__content tarr3D1)))))
(define-fun tarr3D1__ref_tarr3D1__content__projection ((a tarr3D1__ref)) tarr3D1 
  (tarr3D1__content a))

(define-fun dynamic_invariant ((temp___expr_265 (Array Int us_rep))
  (temp___is_init_261 Bool) (temp___skip_constant_262 Bool)
  (temp___do_toplevel_263 Bool)
  (temp___do_typ_inv_264 Bool)) Bool (forall ((temp___266 Int))
                                     (=>
                                     (and (<= 1 temp___266)
                                     (<= temp___266 3)) (in_range4 10
                                     (us_split_discrs1
                                     (select temp___expr_265 temp___266))))))

(define-fun default_initial_assumption ((temp___expr_268 (Array Int us_rep))
  (temp___skip_top_level_269 Bool)) Bool (forall ((temp___270 Int))
                                         (=>
                                         (and (<= 1 temp___270)
                                         (<= temp___270 3))
                                         (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            (select temp___expr_268 temp___270)))) 10))))

(declare-sort tarr4D1 0)

(declare-fun tarr4D1qtint (tarr4D1) Int)

;; tarr4D1'axiom
  (assert
  (forall ((i tarr4D1))
  (and (<= 1 (tarr4D1qtint i)) (<= (tarr4D1qtint i) 3))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (tarr4D1 tarr4D1) Bool)

(declare-const dummy9 tarr4D1)

(declare-datatypes ((tarr4D1__ref 0))
(((tarr4D1__refqtmk (tarr4D1__content tarr4D1)))))
(define-fun tarr4D1__ref_tarr4D1__content__projection ((a tarr4D1__ref)) tarr4D1 
  (tarr4D1__content a))

(define-fun dynamic_invariant1 ((temp___expr_278 (Array Int us_rep))
  (temp___is_init_274 Bool) (temp___skip_constant_275 Bool)
  (temp___do_toplevel_276 Bool)
  (temp___do_typ_inv_277 Bool)) Bool (forall ((temp___279 Int))
                                     (=>
                                     (and (<= 1 temp___279)
                                     (<= temp___279 3)) (in_range4 10
                                     (us_split_discrs1
                                     (select temp___expr_278 temp___279))))))

(define-fun default_initial_assumption1 ((temp___expr_281 (Array Int us_rep))
  (temp___skip_top_level_282 Bool)) Bool (forall ((temp___283 Int))
                                         (=>
                                         (and (<= 1 temp___283)
                                         (<= temp___283 3))
                                         (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            (select temp___expr_281 temp___283)))) 10))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const test__rec__x__first__bit3 Int)

(declare-const test__rec__x__last__bit3 Int)

(declare-const test__rec__x__position3 Int)

;; test__rec__x__first__bit_axiom
  (assert (<= 0 test__rec__x__first__bit3))

;; test__rec__x__last__bit_axiom
  (assert (< test__rec__x__first__bit3 test__rec__x__last__bit3))

;; test__rec__x__position_axiom
  (assert (<= 0 test__rec__x__position3))

(declare-const test__rec__y__first__bit3 Int)

(declare-const test__rec__y__last__bit3 Int)

(declare-const test__rec__y__position3 Int)

;; test__rec__y__first__bit_axiom
  (assert (<= 0 test__rec__y__first__bit3))

;; test__rec__y__last__bit_axiom
  (assert (< test__rec__y__first__bit3 test__rec__y__last__bit3))

;; test__rec__y__position_axiom
  (assert (<= 0 test__rec__y__position3))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((t15b__ref 0))
(((t15b__refqtmk (t15b__content us_rep)))))
(define-fun t15b__ref_t15b__content__projection ((a t15b__ref)) us_rep 
  (t15b__content a))

(declare-fun test__x__aggregate_def ((Array Int natural)) (Array Int (Array Int natural)))

(declare-fun temp_____aggregate_def_325 (Int) (Array Int natural))

(declare-fun convert ((Array Int (Array Int natural))) (Array Int (Array Int natural)))

;; convert__def
  (assert
  (forall ((a (Array Int (Array Int natural))))
  (forall ((temp___329 Int))
  (= (select a temp___329) (select (convert a) temp___329)))))

(declare-fun test__w__aggregate_def (us_rep) (Array Int us_rep))

(declare-fun convert1 ((Array Int us_rep)) (Array Int us_rep))

;; convert__def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((temp___335 Int))
  (= (select a temp___335) (select (convert1 a) temp___335)))))

(declare-fun test__test_array__aggregate_def (Int Int
  Int) (Array Int integer))

(declare-fun convert2 ((Array Int integer)) (Array Int integer_subtype))

;; convert__def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((temp___346 Int))
  (= (to_rep (select a temp___346)) (to_rep2
                                    (select (convert2 a) temp___346))))))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_245 us_rep)
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)
  (temp___do_typ_inv_244 Bool)) Bool (=>
                                     (not (= temp___skip_constant_242 true))
                                     (in_range4 10
                                     (us_split_discrs1 temp___expr_245))))

(define-fun default_initial_assumption2 ((temp___expr_247 us_rep)
  (temp___skip_top_level_248 Bool)) Bool (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            temp___expr_247))) 10))

(define-fun dynamic_invariant5 ((temp___expr_255 us_rep)
  (temp___is_init_251 Bool) (temp___skip_constant_252 Bool)
  (temp___do_toplevel_253 Bool)
  (temp___do_typ_inv_254 Bool)) Bool (=>
                                     (not (= temp___skip_constant_252 true))
                                     (in_range4 10
                                     (us_split_discrs1 temp___expr_255))))

(define-fun default_initial_assumption3 ((temp___expr_257 us_rep)
  (temp___skip_top_level_258 Bool)) Bool (= (to_rep
                                            (rec__test__rec__x
                                            (us_split_discrs1
                                            temp___expr_257))) 10))

;; def_axiom
  (assert
  (forall ((temp___323 (Array Int natural)))
  (forall ((temp___324 Int))
  (= (select (test__x__aggregate_def temp___323) temp___324) temp___323))))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 1))

;; def_axiom
  (assert
  (forall ((temp___327 Int))
  (=> (dynamic_invariant3 temp___327 true true true true)
  (forall ((temp___328 Int))
  (= (select (temp_____aggregate_def_325 temp___327) temp___328) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___332 us_rep))
  (=> (dynamic_invariant4 temp___332 true true true true)
  (forall ((temp___333 Int))
  (= (select (test__w__aggregate_def temp___332) temp___333) temp___332)))))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 1))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 2))

(declare-const rliteral3 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral3) 3))

;; def_axiom
  (assert
  (forall ((temp___338 Int) (temp___339 Int) (temp___340 Int))
  (let ((temp___337 (test__test_array__aggregate_def temp___338 temp___339
                    temp___340)))
  (=>
  (and
  (and (dynamic_invariant2 temp___338 true true true true)
  (dynamic_invariant2 temp___339 true true true true)) (dynamic_invariant2
  temp___340 true true true true))
  (and
  (and (= (select temp___337 0) rliteral1)
  (= (select temp___337 1) rliteral2)) (= (select temp___337 2) rliteral3))))))

(define-fun dynamic_invariant6 ((temp___expr_301 Int)
  (temp___is_init_297 Bool) (temp___skip_constant_298 Bool)
  (temp___do_toplevel_299 Bool)
  (temp___do_typ_inv_300 Bool)) Bool (=>
                                     (or (= temp___is_init_297 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_301)))

(declare-const rliteral4 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral4) 10))

(assert
;; defqtvc
 ;; File "test.adb", line 5, characters 0-0
  (not
  (forall ((x (Array Int (Array Int natural)))
  (y (Array Int (Array Int natural))))
  (=> (in_range1 10)
  (=> (in_range1 10)
  (=> (= x (test__x__aggregate_def (temp_____aggregate_def_325 1)))
  (=> (= y (convert x))
  (forall ((w (Array Int us_rep)))
  (=>
  (= w (test__w__aggregate_def
       (us_repqtmk (us_split_discrsqtmk rliteral4)
       (us_split_fieldsqtmk rliteral1))))
  (=> (dynamic_invariant w true false true true)
  (forall ((z (Array Int us_rep)))
  (=> (= z (convert1 w))
  (=> (dynamic_invariant1 z true false true true)
  (forall ((test_array (Array Int integer)))
  (=> (= test_array (test__test_array__aggregate_def 1 2 3))
  (=>
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 3))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 100)) (= (to_rep1 (select (select y i) j)) 1)))))
  (forall ((i Int))
  (=> (and (<= 1 i) (<= i 3))
  (= (to_rep (rec__test__rec__y (us_split_fields1 (select z i)))) 1)))))))))))))))))))
(check-sat)
