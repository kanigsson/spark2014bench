;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (rec__incomplete_types__list__is_null_pointer Bool)(rec__incomplete_types__list__pointer_address Int)(rec__incomplete_types__list__pointer_value_abstr us_main_type)))))
(define-fun us_rep_rec__incomplete_types__list__is_null_pointer__projection ((a us_rep)) Bool 
  (rec__incomplete_types__list__is_null_pointer a))

(define-fun us_rep_rec__incomplete_types__list__pointer_address__projection ((a us_rep)) Int 
  (rec__incomplete_types__list__pointer_address a))

(define-fun us_rep_rec__incomplete_types__list__pointer_value_abstr__projection ((a us_rep)) us_main_type 
  (rec__incomplete_types__list__pointer_value_abstr a))

(declare-datatypes ((us_rep__ref 0))
(((us_rep__refqtmk (us_rep__content us_rep)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep 
  (us_rep__content a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__incomplete_types__list__is_null_pointer a) 
                        (rec__incomplete_types__list__is_null_pointer b))
                        (=>
                        (not
                        (= (rec__incomplete_types__list__is_null_pointer a) true))
                        (and
                        (= (rec__incomplete_types__list__pointer_address a) 
                        (rec__incomplete_types__list__pointer_address b))
                        (= (rec__incomplete_types__list__pointer_value_abstr
                           a) (rec__incomplete_types__list__pointer_value_abstr
                              b)))))
                   true false))

(declare-const dummy1 us_rep)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__incomplete_types__list_cell__value integer)(rec__incomplete_types__list_cell__next us_rep)))))
(define-fun us_split_fields_rec__incomplete_types__list_cell__value__projection ((a us_split_fields)) integer 
  (rec__incomplete_types__list_cell__value a))

(define-fun us_split_fields_rec__incomplete_types__list_cell__next__projection ((a us_split_fields)) us_rep 
  (rec__incomplete_types__list_cell__next a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__incomplete_types__list_cell__value
                            (us_split_fields1 a))) (to_rep
                                                   (rec__incomplete_types__list_cell__value
                                                   (us_split_fields1 b))))
                         (= (bool_eq
                            (rec__incomplete_types__list_cell__next
                            (us_split_fields1 a))
                            (rec__incomplete_types__list_cell__next
                            (us_split_fields1 b))) true))
                    true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const incomplete_types__list_cell__value__first__bit Int)

(declare-const incomplete_types__list_cell__value__last__bit Int)

(declare-const incomplete_types__list_cell__value__position Int)

;; incomplete_types__list_cell__value__first__bit_axiom
  (assert (<= 0 incomplete_types__list_cell__value__first__bit))

;; incomplete_types__list_cell__value__last__bit_axiom
  (assert
  (< incomplete_types__list_cell__value__first__bit incomplete_types__list_cell__value__last__bit))

;; incomplete_types__list_cell__value__position_axiom
  (assert (<= 0 incomplete_types__list_cell__value__position))

(declare-const incomplete_types__list_cell__next__first__bit Int)

(declare-const incomplete_types__list_cell__next__last__bit Int)

(declare-const incomplete_types__list_cell__next__position Int)

;; incomplete_types__list_cell__next__first__bit_axiom
  (assert (<= 0 incomplete_types__list_cell__next__first__bit))

;; incomplete_types__list_cell__next__last__bit_axiom
  (assert
  (< incomplete_types__list_cell__next__first__bit incomplete_types__list_cell__next__last__bit))

;; incomplete_types__list_cell__next__position_axiom
  (assert (<= 0 incomplete_types__list_cell__next__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((list_cell__ref 0))
(((list_cell__refqtmk (list_cell__content us_rep1)))))
(define-fun list_cell__ref_list_cell__content__projection ((a list_cell__ref)) us_rep1 
  (list_cell__content a))

(declare-const x us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range1 ((x1 Int)) Bool (or (= x1 0) (= x1 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-fun us_open (us_main_type) us_rep1)

(declare-fun us_close (us_rep1) us_main_type)

;; close_open
  (assert
  (forall ((x1 us_main_type))
  (! (= (us_close (us_open x1)) x1) :pattern ((us_open x1)) )))

;; open_close
  (assert
  (forall ((x1 us_rep1))
  (! (= (us_open (us_close x1)) x1) :pattern ((us_close x1)) )))

(define-fun rec__incomplete_types__list__pointer_value ((a us_rep)) us_rep1 
  (us_open (rec__incomplete_types__list__pointer_value_abstr a)))

(define-fun rec__incomplete_types__list__pointer_value__pred ((a us_rep)) Bool 
  (not (= (rec__incomplete_types__list__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
  (assert
  (= (rec__incomplete_types__list__is_null_pointer us_null_pointer) true))

(define-fun default_initial_assumption ((temp___expr_166 us_rep1)
  (temp___skip_top_level_167 Bool)) Bool (= (rec__incomplete_types__list__is_null_pointer
                                            (rec__incomplete_types__list_cell__next
                                            (us_split_fields1
                                            temp___expr_166))) true))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun default_initial_assumption1 ((temp___expr_159 us_rep)
  (temp___skip_top_level_160 Bool)) Bool (= (rec__incomplete_types__list__is_null_pointer
                                            temp___expr_159) true))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

;; x__def_axiom
  (assert (= x (us_repqtmk1 (us_split_fieldsqtmk rliteral us_null_pointer))))

(assert
;; defqtvc
 ;; File "incomplete_types.ads", line 1, characters 0-0
  (not
  (=> (= (us_repqtmk1 (us_split_fieldsqtmk rliteral us_null_pointer)) 
  x)
  (= (to_rep (rec__incomplete_types__list_cell__value (us_split_fields1 x))) 2))))
(check-sat)
