(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__dyn_pred__non_zero_type__val integer)))))
(define-fun us_split_fields_rec__dyn_pred__non_zero_type__val__projection ((a us_split_fields)) integer 
  (rec__dyn_pred__non_zero_type__val a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__dyn_pred__non_zero_type__val
                           (us_split_fields1 a))) (to_rep
                                                  (rec__dyn_pred__non_zero_type__val
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dyn_pred__non_zero_type__val__first__bit Int)

(declare-const dyn_pred__non_zero_type__val__last__bit Int)

(declare-const dyn_pred__non_zero_type__val__position Int)

;; dyn_pred__non_zero_type__val__first__bit_axiom
  (assert (<= 0 dyn_pred__non_zero_type__val__first__bit))

;; dyn_pred__non_zero_type__val__last__bit_axiom
  (assert
  (< dyn_pred__non_zero_type__val__first__bit dyn_pred__non_zero_type__val__last__bit))

;; dyn_pred__non_zero_type__val__position_axiom
  (assert (<= 0 dyn_pred__non_zero_type__val__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((non_zero_type__ref 0))
(((non_zero_type__refqtmk (non_zero_type__content us_rep)))))
(define-fun non_zero_type__ref_non_zero_type__content__projection ((a non_zero_type__ref)) us_rep 
  (non_zero_type__content a))

(declare-fun is_positive (us_rep) Bool)

(declare-fun is_positive__function_guard (Bool us_rep) Bool)

(declare-datatypes ((positive_subtype__ref 0))
(((positive_subtype__refqtmk (positive_subtype__content us_rep)))))
(define-fun positive_subtype__ref_positive_subtype__content__projection ((a positive_subtype__ref)) us_rep 
  (positive_subtype__content a))

(declare-const one us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

;; temp___result_170'def
  (assert
  (forall ((temp___169 us_rep)) (is_positive__function_guard
  (is_positive temp___169) temp___169)))

(define-fun dynamic_predicate ((temp___168 us_rep)) Bool (and
                                                         (not
                                                         (= (to_rep
                                                            (rec__dyn_pred__non_zero_type__val
                                                            (us_split_fields1
                                                            temp___168))) 0))
                                                         (= (is_positive
                                                            temp___168) true)))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_161 us_rep)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)
  (temp___do_typ_inv_160 Bool)) Bool (=> (= temp___do_toplevel_159 true)
                                     (=> (= temp___is_init_157 true)
                                     (not
                                     (= (to_rep
                                        (rec__dyn_pred__non_zero_type__val
                                        (us_split_fields1 temp___expr_161))) 0)))))

(define-fun dynamic_predicate1 ((temp___166 us_rep)) Bool (not
                                                          (= (to_rep
                                                             (rec__dyn_pred__non_zero_type__val
                                                             (us_split_fields1
                                                             temp___166))) 0)))

;; is_positive__post_axiom
  (assert true)

;; is_positive__def_axiom
  (assert
  (forall ((the_limit us_rep))
  (! (= (= (is_positive the_limit) true)
     (< 0 (to_rep
          (rec__dyn_pred__non_zero_type__val (us_split_fields1 the_limit))))) :pattern (
  (is_positive the_limit)) )))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

;; one__def_axiom
  (assert (= one (us_repqtmk (us_split_fieldsqtmk rliteral))))

(assert
;; defqtvc
 ;; File "dyn_pred.ads", line 1, characters 0-0
  (not (dynamic_predicate (us_repqtmk (us_split_fieldsqtmk rliteral)))))
(check-sat)
(exit)
