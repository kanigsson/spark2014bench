(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 64) Int) Bool)

(declare-fun lsr2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int3 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv2 x ((_ int2bv 64) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes ((t__ref2 0))
(((t__refqtmk2 (t__content2 (_ BitVec 64))))))
(declare-fun power2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun inmemoryrange ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun inmemoryrange__function_guard (Bool (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((unsigned64__refqtmk (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref_unsigned64__content__projection ((a unsigned64__ref)) unsigned64 
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_172 (_ BitVec 64))
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool true)

;; inmemoryrange__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (lower (_ BitVec 64)) (upper (_ BitVec 64)))
  (! (=>
     (and
     (and (dynamic_invariant var true true true true) (dynamic_invariant
     lower true true true true)) (dynamic_invariant upper true true true
     true))
     (let ((result (inmemoryrange var lower upper)))
     (=> (inmemoryrange__function_guard result var lower upper)
     (= (= result true)
     (ite (bvult lower upper) (and (bvule lower var) (bvult var upper))
     (or (bvule lower var) (bvult var upper))))))) :pattern ((inmemoryrange
                                                             var lower upper)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun insaferegion64 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun insaferegion64__function_guard (Bool (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; insaferegion64__post_axiom
  (assert
  (forall ((var (_ BitVec 64)) (rsp (_ BitVec 64)))
  (! (=>
     (and (dynamic_invariant var true true true true) (dynamic_invariant rsp
     true true true true))
     (let ((result (insaferegion64 var rsp)))
     (=> (insaferegion64__function_guard result var rsp)
     (= (= result true)
     (or
     (and (bvule var #xCFFFFFFFFFFFFFFF)
     (bvuge var (bvadd rsp #x0000000000000008)))
     (and (bvule var #x3FFFFFFFFFFFFFFF) (bvuge var #x0000000000000000))))))) :pattern (
  (insaferegion64 var rsp)) )))

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned8 unsigned8) Bool)

(declare-const dummy1 unsigned8)

(declare-datatypes ((unsigned8__ref 0))
(((unsigned8__refqtmk (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref_unsigned8__content__projection ((a unsigned8__ref)) unsigned8 
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_156 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_156)
                                     (bvule temp___idx_156 a__last))
                                     (= (to_rep (select a temp___idx_156)) 
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_156)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_156 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_156) (bvule temp___idx_156 a__last))
  (= (to_rep (select a temp___idx_156)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_156)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem64 addr x86__memory)))
     (=> (readmem64__function_guard result addr x86__memory)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (bvand result #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                              (select x86__memory addr))))
     (= (bvand result #x000000000000FF00) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0000000000000100)))
     (= (bvand result #x0000000000FF0000) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000002)))) #x0000000000010000)))
     (= (bvand result #x00000000FF000000) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000003)))) #x0000000001000000)))
     (= (bvand result #x000000FF00000000) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000004)))) #x0000000100000000)))
     (= (bvand result #x0000FF0000000000) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000005)))) #x0000010000000000)))
     (= (bvand result #x00FF000000000000) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000006)))) #x0001000000000000)))
     (= (bvand result #xFF00000000000000) (bvmul ((_ zero_extend 56) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000007)))) #x0100000000000000)))
     (dynamic_invariant result true false true true))))) :pattern ((readmem64
                                                                   addr
                                                                   x86__memory)) ))))

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (unsigned32 unsigned32) Bool)

(declare-const dummy2 unsigned32)

(declare-datatypes ((unsigned32__ref 0))
(((unsigned32__refqtmk (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref_unsigned32__content__projection ((a unsigned32__ref)) unsigned32 
  (unsigned32__content a))

(define-fun dynamic_invariant1 ((temp___expr_193 (_ BitVec 32))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool true)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true true)
     (let ((result (eax x86__rax)))
     (=> (eax__function_guard result x86__rax)
     (and (= result ((_ extract 31 0) (bvand x86__rax #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((eax
                                                                    x86__rax)) )))

(declare-fun writereg32post ((_ BitVec 64) (_ BitVec 32)) Bool)

(declare-fun writereg32post__function_guard (Bool (_ BitVec 64)
  (_ BitVec 32)) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned641 unsigned641) Bool)

(declare-const dummy3 unsigned641)

(declare-datatypes ((unsigned64__ref1 0))
(((unsigned64__refqtmk1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_unsigned64__content__2__projection ((a unsigned64__ref1)) unsigned641 
  (unsigned64__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_179 (_ BitVec 64))
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_235 (_ BitVec 8))
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool) (temp___do_typ_inv_234 Bool)) Bool true)

(declare-fun readreg32 ((_ BitVec 64)) (_ BitVec 32))

(declare-fun readreg32__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; readreg32__post_axiom
  (assert
  (forall ((reg (_ BitVec 64)))
  (! (=> (dynamic_invariant reg true true true true)
     (let ((result (readreg32 reg)))
     (=> (readreg32__function_guard result reg)
     (and (= result ((_ extract 31 0) (bvand reg #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((readreg32
                                                                    reg)) )))

;; writereg32post__post_axiom
  (assert
  (forall ((regnew (_ BitVec 64)))
  (forall ((val__ (_ BitVec 32)))
  (! (=>
     (and (dynamic_invariant regnew true true true true) (dynamic_invariant1
     val__ true true true true))
     (let ((result (writereg32post regnew val__)))
     (and
     (forall ((regnew1 (_ BitVec 64))) (readreg32__function_guard
     (readreg32 regnew1) regnew1))
     (=> (writereg32post__function_guard result regnew val__)
     (= (= result true)
     (and (= (readreg32 regnew) val__)
     (= (bvand regnew #xFFFFFFFF00000000) #x0000000000000000))))))) :pattern (
  (writereg32post regnew val__)) ))))

(assert
;; defqtvc
 ;; File "memcpy.ads", line 14, characters 0-0
  (not
  (forall ((rdi (_ BitVec 64)) (rdx (_ BitVec 64)) (rsp (_ BitVec 64))
  (memory (Array (_ BitVec 64) unsigned8)) (rbp (_ BitVec 64))
  (rsi (_ BitVec 64)) (rax (_ BitVec 64))
  (memory1 (Array (_ BitVec 64) unsigned8)) (rsp1 (_ BitVec 64))
  (rdx_400586 (_ BitVec 64)) (rdi_400586 (_ BitVec 64)))
  (=> (= memory1 memory)
  (=> (= rsp1 rsp)
  (=> (dynamic_invariant rax true false true true)
  (=> (dynamic_invariant rdx true false true true)
  (=> (dynamic_invariant rsp true false true true)
  (=> (dynamic_invariant rbp true false true true)
  (=> (dynamic_invariant rsi true false true true)
  (=> (dynamic_invariant rdi true false true true)
  (=>
  (forall ((rdi1 (_ BitVec 64)) (rdx1 (_ BitVec 64)) (i (_ BitVec 64)))
  (inmemoryrange__function_guard (inmemoryrange i rdi1 (bvadd rdi1 rdx1)) i
  rdi1 (bvadd rdi1 rdx1)))
  (=>
  (forall ((rsp2 (_ BitVec 64)) (i (_ BitVec 64)))
  (insaferegion64__function_guard (insaferegion64 i rsp2) i rsp2))
  (=>
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=> (= (inmemoryrange i rdi (bvadd rdi rdx)) true)
  (= (insaferegion64 i rsp) true))))
  (=> (= rdx_400586 rdx)
  (=> (dynamic_invariant2 rdx_400586 true false true true)
  (=> (= rdi_400586 rdi)
  (=> (dynamic_invariant2 rdi_400586 true false true true)
  (=> (= rsp #xA7FFFFFFFFFFFFFF)
  (let ((o (bvsub rsp #x0000000000000008)))
  (forall ((memory2 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory2 memory)
  (forall ((memory3 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rbp #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                        (select memory3 o))))
  (= (bvand rbp #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rbp #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rbp #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rbp #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rbp #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rbp #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rbp #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory3 (bvadd o #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o)) (not (= i (bvadd o #x0000000000000001))))
  (not (= i (bvadd o #x0000000000000002))))
  (not (= i (bvadd o #x0000000000000003))))
  (not (= i (bvadd o #x0000000000000004))))
  (not (= i (bvadd o #x0000000000000005))))
  (not (= i (bvadd o #x0000000000000006))))
  (not (= i (bvadd o #x0000000000000007))))
  (= (to_rep (select memory3 i)) (to_rep (select memory2 i)))))))
  (forall ((rsp2 (_ BitVec 64)))
  (=> (= rsp2 (bvsub rsp #x0000000000000008))
  (forall ((rbp1 (_ BitVec 64)))
  (=> (= rbp1 rsp2)
  (let ((o1 (bvsub rbp1 #x0000000000000038)))
  (forall ((memory4 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory4 memory3)
  (forall ((memory5 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rdi #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                        (select memory5 o1))))
  (= (bvand rdi #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rdi #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rdi #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rdi #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rdi #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rdi #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rdi #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory5 (bvadd o1 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o1)) (not (= i (bvadd o1 #x0000000000000001))))
  (not (= i (bvadd o1 #x0000000000000002))))
  (not (= i (bvadd o1 #x0000000000000003))))
  (not (= i (bvadd o1 #x0000000000000004))))
  (not (= i (bvadd o1 #x0000000000000005))))
  (not (= i (bvadd o1 #x0000000000000006))))
  (not (= i (bvadd o1 #x0000000000000007))))
  (= (to_rep (select memory5 i)) (to_rep (select memory4 i)))))))
  (let ((o2 (bvsub rbp1 #x0000000000000040)))
  (forall ((memory6 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory6 memory5)
  (forall ((memory7 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rsi #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                        (select memory7 o2))))
  (= (bvand rsi #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rsi #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rsi #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rsi #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rsi #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rsi #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rsi #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory7 (bvadd o2 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o2)) (not (= i (bvadd o2 #x0000000000000001))))
  (not (= i (bvadd o2 #x0000000000000002))))
  (not (= i (bvadd o2 #x0000000000000003))))
  (not (= i (bvadd o2 #x0000000000000004))))
  (not (= i (bvadd o2 #x0000000000000005))))
  (not (= i (bvadd o2 #x0000000000000006))))
  (not (= i (bvadd o2 #x0000000000000007))))
  (= (to_rep (select memory7 i)) (to_rep (select memory6 i)))))))
  (let ((o3 (bvsub rbp1 #x0000000000000048)))
  (forall ((memory8 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory8 memory7)
  (forall ((memory9 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rdx #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                        (select memory9 o3))))
  (= (bvand rdx #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rdx #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rdx #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rdx #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rdx #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rdx #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rdx #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory9 (bvadd o3 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o3)) (not (= i (bvadd o3 #x0000000000000001))))
  (not (= i (bvadd o3 #x0000000000000002))))
  (not (= i (bvadd o3 #x0000000000000003))))
  (not (= i (bvadd o3 #x0000000000000004))))
  (not (= i (bvadd o3 #x0000000000000005))))
  (not (= i (bvadd o3 #x0000000000000006))))
  (not (= i (bvadd o3 #x0000000000000007))))
  (= (to_rep (select memory9 i)) (to_rep (select memory8 i)))))))
  (let ((o4 (bvsub rbp1 #x0000000000000038)))
  (let ((o5 (readmem64 o4 memory9)))
  (=>
  (and (readmem64__function_guard o5 o4 memory9)
  (and (dynamic_invariant o5 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o5 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory9 o4))))
  (= (bvand o5 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o5 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o5 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o5 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o5 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o5 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o5 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o4 #x0000000000000007)))) #x0100000000000000)))))
  (forall ((rax1 (_ BitVec 64)))
  (=> (= rax1 o5)
  (let ((o6 (eax rax1)))
  (=>
  (and (eax__function_guard o6 rax1)
  (and (dynamic_invariant1 o6 true false true true)
  (= o6 ((_ extract 31 0) (bvand rax1 #x00000000FFFFFFFF)))))
  (forall ((rax2 (_ BitVec 64)))
  (=>
  (forall ((o7 (_ BitVec 32)) (rax3 (_ BitVec 64)))
  (writereg32post__function_guard (writereg32post rax3 o7) rax3 o7))
  (=>
  (and (= (writereg32post rax2 (bvand o6 #x00000007)) true)
  (dynamic_invariant rax2 true true true true))
  (forall ((memory10 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (or (not (= rax2 #x0000000000000000))
  (let ((o7 (bvsub rbp1 #x0000000000000040)))
  (let ((o8 (readmem64 o7 memory9)))
  (and (readmem64__function_guard o8 o7 memory9)
  (and (dynamic_invariant o8 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory9 o7))))
  (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000007)))) #x0100000000000000))))))))
  (and
  (or
  (=> (= rax2 #x0000000000000000)
  (not
  (= (bvand (readmem64 (bvsub rbp1 #x0000000000000040) memory9) #x0000000000000007) #x0000000000000000)))
  (let ((o7 (bvsub rbp1 #x0000000000000048)))
  (let ((o8 (readmem64 o7 memory9)))
  (and (readmem64__function_guard o8 o7 memory9)
  (and (dynamic_invariant o8 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory9 o7))))
  (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000007)))) #x0100000000000000))))))))
  (exists ((spark__branch Bool))
  (and
  (= spark__branch (ite (=>
                        (not
                        (=> (= rax2 #x0000000000000000)
                        (not
                        (= (bvand (readmem64 (bvsub rbp1 #x0000000000000040)
                                  memory9) #x0000000000000007) #x0000000000000000))))
                        (not
                        (= (bvand (readmem64 (bvsub rbp1 #x0000000000000048)
                                  memory9) #x0000000000000007) #x0000000000000000)))
                   false true))
  (ite (= spark__branch true)
  (let ((o7 (bvsub rbp1 #x0000000000000038)))
  (let ((o8 (readmem64 o7 memory9)))
  (and
  (and (readmem64__function_guard o8 o7 memory9)
  (and (dynamic_invariant o8 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory9 o7))))
  (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000007)))) #x0100000000000000)))))
  (exists ((rax3 (_ BitVec 64)))
  (and (= rax3 o8)
  (let ((o9 (bvsub rbp1 #x0000000000000010)))
  (exists ((memory11 (Array (_ BitVec 64) unsigned8)))
  (and (= memory11 memory9)
  (exists ((memory12 (Array (_ BitVec 64) unsigned8)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax3 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                         (select memory12 o9))))
  (= (bvand rax3 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rax3 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rax3 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rax3 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rax3 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rax3 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rax3 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o9)) (not (= i (bvadd o9 #x0000000000000001))))
  (not (= i (bvadd o9 #x0000000000000002))))
  (not (= i (bvadd o9 #x0000000000000003))))
  (not (= i (bvadd o9 #x0000000000000004))))
  (not (= i (bvadd o9 #x0000000000000005))))
  (not (= i (bvadd o9 #x0000000000000006))))
  (not (= i (bvadd o9 #x0000000000000007))))
  (= (to_rep (select memory12 i)) (to_rep (select memory11 i)))))))
  (let ((o10 (bvsub rbp1 #x0000000000000040)))
  (let ((o11 (readmem64 o10 memory12)))
  (and
  (and (readmem64__function_guard o11 o10 memory12)
  (and (dynamic_invariant o11 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o11 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                        (select memory12 o10))))
  (= (bvand o11 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o11 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o11 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o11 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o11 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o11 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o11 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000007)))) #x0100000000000000)))))
  (exists ((rax4 (_ BitVec 64)))
  (and (= rax4 o11)
  (let ((o12 (bvsub rbp1 #x0000000000000018)))
  (exists ((memory13 (Array (_ BitVec 64) unsigned8)))
  (and (= memory13 memory12)
  (exists ((memory14 (Array (_ BitVec 64) unsigned8)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax4 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                         (select memory14 o12))))
  (= (bvand rax4 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rax4 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rax4 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rax4 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rax4 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rax4 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rax4 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o12)) (not (= i (bvadd o12 #x0000000000000001))))
  (not (= i (bvadd o12 #x0000000000000002))))
  (not (= i (bvadd o12 #x0000000000000003))))
  (not (= i (bvadd o12 #x0000000000000004))))
  (not (= i (bvadd o12 #x0000000000000005))))
  (not (= i (bvadd o12 #x0000000000000006))))
  (not (= i (bvadd o12 #x0000000000000007))))
  (= (to_rep (select memory14 i)) (to_rep (select memory13 i)))))))
  (let ((o13 (bvsub rbp1 #x0000000000000008)))
  (exists ((memory15 (Array (_ BitVec 64) unsigned8)))
  (and (= memory15 memory14)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand #x0000000000000000 #x00000000000000FF) ((_ zero_extend 56) 
  (to_rep (select memory10 o13))))
  (= (bvand #x0000000000000000 #x000000000000FF00) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand #x0000000000000000 #x0000000000FF0000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand #x0000000000000000 #x00000000FF000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand #x0000000000000000 #x000000FF00000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand #x0000000000000000 #x0000FF0000000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand #x0000000000000000 #x00FF000000000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand #x0000000000000000 #xFF00000000000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o13)) (not (= i (bvadd o13 #x0000000000000001))))
  (not (= i (bvadd o13 #x0000000000000002))))
  (not (= i (bvadd o13 #x0000000000000003))))
  (not (= i (bvadd o13 #x0000000000000004))))
  (not (= i (bvadd o13 #x0000000000000005))))
  (not (= i (bvadd o13 #x0000000000000006))))
  (not (= i (bvadd o13 #x0000000000000007))))
  (= (to_rep (select memory10 i)) (to_rep (select memory15 i))))))))))))))))))))))))))))))
  (let ((o7 (bvsub rbp1 #x0000000000000038)))
  (let ((o8 (readmem64 o7 memory9)))
  (and
  (and (readmem64__function_guard o8 o7 memory9)
  (and (dynamic_invariant o8 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory9 o7))))
  (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory9 (bvadd o7 #x0000000000000007)))) #x0100000000000000)))))
  (exists ((rax3 (_ BitVec 64)))
  (and (= rax3 o8)
  (let ((o9 (bvsub rbp1 #x0000000000000020)))
  (exists ((memory11 (Array (_ BitVec 64) unsigned8)))
  (and (= memory11 memory9)
  (exists ((memory12 (Array (_ BitVec 64) unsigned8)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax3 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                         (select memory12 o9))))
  (= (bvand rax3 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rax3 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rax3 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rax3 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rax3 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rax3 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rax3 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory12 (bvadd o9 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o9)) (not (= i (bvadd o9 #x0000000000000001))))
  (not (= i (bvadd o9 #x0000000000000002))))
  (not (= i (bvadd o9 #x0000000000000003))))
  (not (= i (bvadd o9 #x0000000000000004))))
  (not (= i (bvadd o9 #x0000000000000005))))
  (not (= i (bvadd o9 #x0000000000000006))))
  (not (= i (bvadd o9 #x0000000000000007))))
  (= (to_rep (select memory12 i)) (to_rep (select memory11 i)))))))
  (let ((o10 (bvsub rbp1 #x0000000000000040)))
  (let ((o11 (readmem64 o10 memory12)))
  (and
  (and (readmem64__function_guard o11 o10 memory12)
  (and (dynamic_invariant o11 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o11 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                        (select memory12 o10))))
  (= (bvand o11 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o11 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o11 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o11 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o11 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o11 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o11 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                               (select memory12 (bvadd o10 #x0000000000000007)))) #x0100000000000000)))))
  (exists ((rax4 (_ BitVec 64)))
  (and (= rax4 o11)
  (let ((o12 (bvsub rbp1 #x0000000000000028)))
  (exists ((memory13 (Array (_ BitVec 64) unsigned8)))
  (and (= memory13 memory12)
  (exists ((memory14 (Array (_ BitVec 64) unsigned8)))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand rax4 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                         (select memory14 o12))))
  (= (bvand rax4 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand rax4 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand rax4 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand rax4 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand rax4 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand rax4 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand rax4 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                                (select memory14 (bvadd o12 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o12)) (not (= i (bvadd o12 #x0000000000000001))))
  (not (= i (bvadd o12 #x0000000000000002))))
  (not (= i (bvadd o12 #x0000000000000003))))
  (not (= i (bvadd o12 #x0000000000000004))))
  (not (= i (bvadd o12 #x0000000000000005))))
  (not (= i (bvadd o12 #x0000000000000006))))
  (not (= i (bvadd o12 #x0000000000000007))))
  (= (to_rep (select memory14 i)) (to_rep (select memory13 i)))))))
  (let ((o13 (bvsub rbp1 #x0000000000000008)))
  (exists ((memory15 (Array (_ BitVec 64) unsigned8)))
  (and (= memory15 memory14)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand #x0000000000000000 #x00000000000000FF) ((_ zero_extend 56) 
  (to_rep (select memory10 o13))))
  (= (bvand #x0000000000000000 #x000000000000FF00) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand #x0000000000000000 #x0000000000FF0000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand #x0000000000000000 #x00000000FF000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand #x0000000000000000 #x000000FF00000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand #x0000000000000000 #x0000FF0000000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand #x0000000000000000 #x00FF000000000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand #x0000000000000000 #xFF00000000000000) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory10 (bvadd o13 #x0000000000000007)))) #x0100000000000000)))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o13)) (not (= i (bvadd o13 #x0000000000000001))))
  (not (= i (bvadd o13 #x0000000000000002))))
  (not (= i (bvadd o13 #x0000000000000003))))
  (not (= i (bvadd o13 #x0000000000000004))))
  (not (= i (bvadd o13 #x0000000000000005))))
  (not (= i (bvadd o13 #x0000000000000006))))
  (not (= i (bvadd o13 #x0000000000000007))))
  (= (to_rep (select memory10 i)) (to_rep (select memory15 i)))))))))))))))))))))))))))))))))))
  (let ((o7 (bvsub rbp1 #x0000000000000038)))
  (let ((o8 (readmem64 o7 memory10)))
  (=>
  (and (readmem64__function_guard o8 o7 memory10)
  (and (dynamic_invariant o8 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o8 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory10 o7))))
  (= (bvand o8 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o8 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o8 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o8 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o8 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o8 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o8 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd o7 #x0000000000000007)))) #x0100000000000000)))))
  (let ((o9 (readmem64 rsp2 memory10)))
  (=>
  (and (readmem64__function_guard o9 rsp2 memory10)
  (and (dynamic_invariant o9 true false true true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= (bvand o9 #x00000000000000FF) ((_ zero_extend 56) (to_rep
                                                       (select memory10 rsp2))))
  (= (bvand o9 #x000000000000FF00) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000001)))) #x0000000000000100)))
  (= (bvand o9 #x0000000000FF0000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000002)))) #x0000000000010000)))
  (= (bvand o9 #x00000000FF000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000003)))) #x0000000001000000)))
  (= (bvand o9 #x000000FF00000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000004)))) #x0000000100000000)))
  (= (bvand o9 #x0000FF0000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000005)))) #x0000010000000000)))
  (= (bvand o9 #x00FF000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000006)))) #x0001000000000000)))
  (= (bvand o9 #xFF00000000000000) (bvmul ((_ zero_extend 56) (to_rep
                                                              (select memory10 (bvadd rsp2 #x0000000000000007)))) #x0100000000000000)))))
  (forall ((rbp2 (_ BitVec 64)))
  (=> (= rbp2 o9)
  (forall ((rsp3 (_ BitVec 64)))
  (=> (= rsp3 (bvadd rsp2 #x0000000000000008))
  (forall ((rsp4 (_ BitVec 64)))
  (=> (= rsp4 (bvadd rsp3 #x0000000000000008))
  (= (to_rep (select memory10 (bvadd rsp1 #x0000000000000006))) (to_rep
                                                                (select memory1 (bvadd rsp1 #x0000000000000006))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
