;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort root_component_type 0)

(declare-fun root_component_typeqtint (root_component_type) Int)

;; root_component_type'axiom
  (assert
  (forall ((i root_component_type))
  (and (<= 0 (root_component_typeqtint i))
  (<= (root_component_typeqtint i) 2))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (root_component_type root_component_type) Bool)

(declare-const dummy2 root_component_type)

(declare-datatypes ((root_component_type__ref 0))
(((root_component_type__refqtmk
  (root_component_type__content root_component_type)))))
(define-fun root_component_type__ref_root_component_type__content__projection ((a root_component_type__ref)) root_component_type 
  (root_component_type__content a))

(define-fun to_rep ((x root_component_type)) Int (root_component_typeqtint x))

(declare-fun of_rep (Int) root_component_type)

;; inversion_axiom
  (assert
  (forall ((x root_component_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x root_component_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort second_level_component_type 0)

(declare-fun second_level_component_typeqtint (second_level_component_type) Int)

;; second_level_component_type'axiom
  (assert
  (forall ((i second_level_component_type))
  (and (<= 0 (second_level_component_typeqtint i))
  (<= (second_level_component_typeqtint i) 175))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 175)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (second_level_component_type
  second_level_component_type) Bool)

(declare-const dummy3 second_level_component_type)

(declare-datatypes ((second_level_component_type__ref 0))
(((second_level_component_type__refqtmk
  (second_level_component_type__content second_level_component_type)))))
(define-fun second_level_component_type__ref_second_level_component_type__content__projection ((a second_level_component_type__ref)) second_level_component_type 
  (second_level_component_type__content a))

(define-fun to_rep1 ((x second_level_component_type)) Int (second_level_component_typeqtint
                                                          x))

(declare-fun of_rep1 (Int) second_level_component_type)

;; inversion_axiom
  (assert
  (forall ((x second_level_component_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x second_level_component_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort component_type 0)

(declare-fun component_typeqtint (component_type) Int)

;; component_type'axiom
  (assert
  (forall ((i component_type))
  (and (<= 0 (component_typeqtint i))
  (<= (component_typeqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (component_type component_type) Bool)

(declare-const dummy4 component_type)

(declare-datatypes ((component_type__ref 0))
(((component_type__refqtmk (component_type__content component_type)))))
(define-fun component_type__ref_component_type__content__projection ((a component_type__ref)) component_type 
  (component_type__content a))

(define-fun to_rep2 ((x component_type)) Int (component_typeqtint x))

(declare-fun of_rep2 (Int) component_type)

;; inversion_axiom
  (assert
  (forall ((x component_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x component_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int component_type))))))
(declare-fun slide ((Array Int component_type) Int
  Int) (Array Int component_type))

;; slide_eq
  (assert
  (forall ((a (Array Int component_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int component_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int component_type)) (a__first Int)
  (a__last Int) (b (Array Int component_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep2 (select a temp___idx_155)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int component_type)) (b (Array Int component_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep2 (select a temp___idx_155)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-const dummy5 (Array Int component_type))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq5 ((Array Int component_type)
  (Array Int component_type)) Bool)

(declare-sort other_count_type 0)

(declare-fun other_count_typeqtint (other_count_type) Int)

;; other_count_type'axiom
  (assert
  (forall ((i other_count_type))
  (and (<= 0 (other_count_typeqtint i)) (<= (other_count_typeqtint i) 13))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 13)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (other_count_type other_count_type) Bool)

(declare-const dummy6 other_count_type)

(declare-datatypes ((other_count_type__ref 0))
(((other_count_type__refqtmk (other_count_type__content other_count_type)))))
(define-fun other_count_type__ref_other_count_type__content__projection ((a other_count_type__ref)) other_count_type 
  (other_count_type__content a))

(define-fun to_rep3 ((x other_count_type)) Int (other_count_typeqtint x))

(declare-fun of_rep3 (Int) other_count_type)

;; inversion_axiom
  (assert
  (forall ((x other_count_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x other_count_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__ada___hermes__oid__object_identifier__root_component root_component_type)(rec__ada___hermes__oid__object_identifier__second_level_component second_level_component_type)(rec__ada___hermes__oid__object_identifier__other_components (Array Int component_type))(rec__ada___hermes__oid__object_identifier__other_component_count other_count_type)))))
(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__root_component__projection ((a us_split_fields)) root_component_type 
  (rec__ada___hermes__oid__object_identifier__root_component a))

(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__second_level_component__projection ((a us_split_fields)) second_level_component_type 
  (rec__ada___hermes__oid__object_identifier__second_level_component a))

(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__other_components__projection ((a us_split_fields)) (Array Int component_type) 
  (rec__ada___hermes__oid__object_identifier__other_components a))

(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__other_component_count__projection ((a us_split_fields)) other_count_type 
  (rec__ada___hermes__oid__object_identifier__other_component_count a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__ada___hermes__oid__object_identifier__root_component
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___hermes__oid__object_identifier__root_component
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ada___hermes__oid__object_identifier__second_level_component
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___hermes__oid__object_identifier__second_level_component
                                                  (us_split_fields1 b)))))
                        (and
                        (= (bool_eq
                           (rec__ada___hermes__oid__object_identifier__other_components
                           (us_split_fields1 a)) 1 13
                           (rec__ada___hermes__oid__object_identifier__other_components
                           (us_split_fields1 b)) 1 13) true)
                        (= (to_rep3
                           (rec__ada___hermes__oid__object_identifier__other_component_count
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__ada___hermes__oid__object_identifier__other_component_count
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const ada___hermes__oid__object_identifier__root_component__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__root_component__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__root_component__position Int)

;; ada___hermes__oid__object_identifier__root_component__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__root_component__first__bit))

;; ada___hermes__oid__object_identifier__root_component__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__root_component__first__bit 
  ada___hermes__oid__object_identifier__root_component__last__bit))

;; ada___hermes__oid__object_identifier__root_component__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__root_component__position))

(declare-const ada___hermes__oid__object_identifier__second_level_component__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__second_level_component__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__second_level_component__position Int)

;; ada___hermes__oid__object_identifier__second_level_component__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__second_level_component__first__bit))

;; ada___hermes__oid__object_identifier__second_level_component__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__second_level_component__first__bit 
  ada___hermes__oid__object_identifier__second_level_component__last__bit))

;; ada___hermes__oid__object_identifier__second_level_component__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__second_level_component__position))

(declare-const ada___hermes__oid__object_identifier__other_components__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_components__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_components__position Int)

;; ada___hermes__oid__object_identifier__other_components__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_components__first__bit))

;; ada___hermes__oid__object_identifier__other_components__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__other_components__first__bit 
  ada___hermes__oid__object_identifier__other_components__last__bit))

;; ada___hermes__oid__object_identifier__other_components__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_components__position))

(declare-const ada___hermes__oid__object_identifier__other_component_count__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_component_count__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_component_count__position Int)

;; ada___hermes__oid__object_identifier__other_component_count__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_component_count__first__bit))

;; ada___hermes__oid__object_identifier__other_component_count__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__other_component_count__first__bit 
  ada___hermes__oid__object_identifier__other_component_count__last__bit))

;; ada___hermes__oid__object_identifier__other_component_count__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_component_count__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((object_identifier__ref 0))
(((object_identifier__refqtmk (object_identifier__content us_rep)))))
(define-fun object_identifier__ref_object_identifier__content__projection ((a object_identifier__ref)) us_rep 
  (object_identifier__content a))

(declare-sort version_type 0)

(declare-fun version_typeqtint (version_type) Int)

;; version_type'axiom
  (assert
  (forall ((i version_type))
  (and (<= 1 (version_typeqtint i)) (<= (version_typeqtint i) 1))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (version_type version_type) Bool)

(declare-const dummy8 version_type)

(declare-datatypes ((version_type__ref 0))
(((version_type__refqtmk (version_type__content version_type)))))
(define-fun version_type__ref_version_type__content__projection ((a version_type__ref)) version_type 
  (version_type__content a))

(define-fun to_rep4 ((x version_type)) Int (version_typeqtint x))

(declare-fun of_rep4 (Int) version_type)

;; inversion_axiom
  (assert
  (forall ((x version_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x version_type)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq9 (octet octet) Bool)

(declare-const dummy9 octet)

(declare-datatypes ((octet__ref 0))
(((octet__refqtmk (octet__content octet)))))
(define-fun octet__ref_octet__content__projection ((a octet__ref)) octet 
  (octet__content a))

(declare-fun to_rep5 (octet) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))) )))

(define-fun to_int3 ((x octet)) Int (bv2nat (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int octet))))))
(declare-fun slide1 ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep5 (select a temp___idx_154)) (to_rep5
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep5 (select a temp___idx_154)) (to_rep5
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy10 (Array Int octet))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq10 ((Array Int octet) (Array Int octet)) Bool)

(declare-sort serial_number_type 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 64))

(declare-fun user_eq11 (serial_number_type serial_number_type) Bool)

(declare-const dummy11 serial_number_type)

(declare-datatypes ((serial_number_type__ref 0))
(((serial_number_type__refqtmk
  (serial_number_type__content serial_number_type)))))
(define-fun serial_number_type__ref_serial_number_type__content__projection ((a serial_number_type__ref)) serial_number_type 
  (serial_number_type__content a))

(declare-fun to_rep6 (serial_number_type) (_ BitVec 64))

(declare-fun of_rep6 ((_ BitVec 64)) serial_number_type)

;; inversion_axiom
  (assert
  (forall ((x serial_number_type))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep6 (of_rep6 x)) x) :pattern ((to_rep6 (of_rep6 x))) )))

(define-fun to_int4 ((x serial_number_type)) Int (bv2nat (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x serial_number_type)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-const dummy12 (Array Int octet))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq12 ((Array Int octet) (Array Int octet)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__timestamp_messages__timestamp__version version_type)(rec__timestamp_messages__timestamp__policy us_rep)(rec__timestamp_messages__timestamp__hash_algorithm us_rep)(rec__timestamp_messages__timestamp__hashed_message (Array Int octet))(rec__timestamp_messages__timestamp__serial_number serial_number_type)(rec__timestamp_messages__timestamp__generalized_time (Array Int octet))))))
(define-fun us_split_fields_rec__timestamp_messages__timestamp__version__projection ((a us_split_fields2)) version_type 
  (rec__timestamp_messages__timestamp__version a))

(define-fun us_split_fields_rec__timestamp_messages__timestamp__policy__projection ((a us_split_fields2)) us_rep 
  (rec__timestamp_messages__timestamp__policy a))

(define-fun us_split_fields_rec__timestamp_messages__timestamp__hash_algorithm__projection ((a us_split_fields2)) us_rep 
  (rec__timestamp_messages__timestamp__hash_algorithm a))

(define-fun us_split_fields_rec__timestamp_messages__timestamp__hashed_message__projection ((a us_split_fields2)) (Array Int octet) 
  (rec__timestamp_messages__timestamp__hashed_message a))

(define-fun us_split_fields_rec__timestamp_messages__timestamp__serial_number__projection ((a us_split_fields2)) serial_number_type 
  (rec__timestamp_messages__timestamp__serial_number a))

(define-fun us_split_fields_rec__timestamp_messages__timestamp__generalized_time__projection ((a us_split_fields2)) (Array Int octet) 
  (rec__timestamp_messages__timestamp__generalized_time a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__timestamp_messages__timestamp__version
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__timestamp_messages__timestamp__version
                                                   (us_split_fields3 b))))
                         (= (bool_eq1
                            (rec__timestamp_messages__timestamp__policy
                            (us_split_fields3 a))
                            (rec__timestamp_messages__timestamp__policy
                            (us_split_fields3 b))) true))
                         (and
                         (and
                         (= (bool_eq1
                            (rec__timestamp_messages__timestamp__hash_algorithm
                            (us_split_fields3 a))
                            (rec__timestamp_messages__timestamp__hash_algorithm
                            (us_split_fields3 b))) true)
                         (= (bool_eq2
                            (rec__timestamp_messages__timestamp__hashed_message
                            (us_split_fields3 a)) 1 32
                            (rec__timestamp_messages__timestamp__hashed_message
                            (us_split_fields3 b)) 1 32) true))
                         (and
                         (= (to_rep6
                            (rec__timestamp_messages__timestamp__serial_number
                            (us_split_fields3 a))) (to_rep6
                                                   (rec__timestamp_messages__timestamp__serial_number
                                                   (us_split_fields3 b))))
                         (= (bool_eq2
                            (rec__timestamp_messages__timestamp__generalized_time
                            (us_split_fields3 a)) 1 14
                            (rec__timestamp_messages__timestamp__generalized_time
                            (us_split_fields3 b)) 1 14) true))))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const timestamp_messages__timestamp__version__first__bit Int)

(declare-const timestamp_messages__timestamp__version__last__bit Int)

(declare-const timestamp_messages__timestamp__version__position Int)

;; timestamp_messages__timestamp__version__first__bit_axiom
  (assert (<= 0 timestamp_messages__timestamp__version__first__bit))

;; timestamp_messages__timestamp__version__last__bit_axiom
  (assert
  (< timestamp_messages__timestamp__version__first__bit timestamp_messages__timestamp__version__last__bit))

;; timestamp_messages__timestamp__version__position_axiom
  (assert (<= 0 timestamp_messages__timestamp__version__position))

(declare-const timestamp_messages__timestamp__policy__first__bit Int)

(declare-const timestamp_messages__timestamp__policy__last__bit Int)

(declare-const timestamp_messages__timestamp__policy__position Int)

;; timestamp_messages__timestamp__policy__first__bit_axiom
  (assert (<= 0 timestamp_messages__timestamp__policy__first__bit))

;; timestamp_messages__timestamp__policy__last__bit_axiom
  (assert
  (< timestamp_messages__timestamp__policy__first__bit timestamp_messages__timestamp__policy__last__bit))

;; timestamp_messages__timestamp__policy__position_axiom
  (assert (<= 0 timestamp_messages__timestamp__policy__position))

(declare-const timestamp_messages__timestamp__hash_algorithm__first__bit Int)

(declare-const timestamp_messages__timestamp__hash_algorithm__last__bit Int)

(declare-const timestamp_messages__timestamp__hash_algorithm__position Int)

;; timestamp_messages__timestamp__hash_algorithm__first__bit_axiom
  (assert (<= 0 timestamp_messages__timestamp__hash_algorithm__first__bit))

;; timestamp_messages__timestamp__hash_algorithm__last__bit_axiom
  (assert
  (< timestamp_messages__timestamp__hash_algorithm__first__bit timestamp_messages__timestamp__hash_algorithm__last__bit))

;; timestamp_messages__timestamp__hash_algorithm__position_axiom
  (assert (<= 0 timestamp_messages__timestamp__hash_algorithm__position))

(declare-const timestamp_messages__timestamp__hashed_message__first__bit Int)

(declare-const timestamp_messages__timestamp__hashed_message__last__bit Int)

(declare-const timestamp_messages__timestamp__hashed_message__position Int)

;; timestamp_messages__timestamp__hashed_message__first__bit_axiom
  (assert (<= 0 timestamp_messages__timestamp__hashed_message__first__bit))

;; timestamp_messages__timestamp__hashed_message__last__bit_axiom
  (assert
  (< timestamp_messages__timestamp__hashed_message__first__bit timestamp_messages__timestamp__hashed_message__last__bit))

;; timestamp_messages__timestamp__hashed_message__position_axiom
  (assert (<= 0 timestamp_messages__timestamp__hashed_message__position))

(declare-const timestamp_messages__timestamp__serial_number__first__bit Int)

(declare-const timestamp_messages__timestamp__serial_number__last__bit Int)

(declare-const timestamp_messages__timestamp__serial_number__position Int)

;; timestamp_messages__timestamp__serial_number__first__bit_axiom
  (assert (<= 0 timestamp_messages__timestamp__serial_number__first__bit))

;; timestamp_messages__timestamp__serial_number__last__bit_axiom
  (assert
  (< timestamp_messages__timestamp__serial_number__first__bit timestamp_messages__timestamp__serial_number__last__bit))

;; timestamp_messages__timestamp__serial_number__position_axiom
  (assert (<= 0 timestamp_messages__timestamp__serial_number__position))

(declare-const timestamp_messages__timestamp__generalized_time__first__bit Int)

(declare-const timestamp_messages__timestamp__generalized_time__last__bit Int)

(declare-const timestamp_messages__timestamp__generalized_time__position Int)

;; timestamp_messages__timestamp__generalized_time__first__bit_axiom
  (assert (<= 0 timestamp_messages__timestamp__generalized_time__first__bit))

;; timestamp_messages__timestamp__generalized_time__last__bit_axiom
  (assert
  (< timestamp_messages__timestamp__generalized_time__first__bit timestamp_messages__timestamp__generalized_time__last__bit))

;; timestamp_messages__timestamp__generalized_time__position_axiom
  (assert (<= 0 timestamp_messages__timestamp__generalized_time__position))

(declare-fun user_eq13 (us_rep1 us_rep1) Bool)

(declare-const dummy13 us_rep1)

(declare-datatypes ((timestamp__ref 0))
(((timestamp__refqtmk (timestamp__content us_rep1)))))
(define-fun timestamp__ref_timestamp__content__projection ((a timestamp__ref)) us_rep1 
  (timestamp__content a))

(declare-const stamp us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep7 ((x integer)) Int (integerqtint x))

(declare-fun of_rep7 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep7 (of_rep7 x)) x)) :pattern ((to_rep7
                                                             (of_rep7 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep7 (first (mk f l))) f) (= (to_rep7 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep7 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep7 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size3 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment5))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep7 (first (rt x)))
                 (to_rep7 (last (rt x))) (elts y) (to_rep7 (first (rt y)))
                 (to_rep7 (last (rt y)))))

(declare-fun user_eq14 (us_t us_t) Bool)

(declare-const dummy14 us_t)

(declare-datatypes ((octet_array__ref 0))
(((octet_array__refqtmk (octet_array__content us_t)))))
(define-fun octet_array__ref_octet_array__content__projection ((a octet_array__ref)) us_t 
  (octet_array__content a))

(declare-fun put_oid_value (us_rep) us_t)

(declare-fun put_oid_value__function_guard (us_t us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_191 us_t)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)
  (temp___do_typ_inv_190 Bool)) Bool (=>
                                     (not (= temp___skip_constant_188 true))
                                     (dynamic_property 0 2147483647
                                     (first1 temp___expr_191)
                                     (last1 temp___expr_191))))

;; put_oid_value__post_axiom
  (assert
  (forall ((value us_rep))
  (! (let ((result (put_oid_value value)))
     (=> (put_oid_value__function_guard result value) (dynamic_invariant
     result true false true true))) :pattern ((put_oid_value value)) )))

(declare-fun put_octet_string_value (us_t) us_t)

(declare-fun put_octet_string_value__function_guard (us_t us_t) Bool)

;; put_octet_string_value__post_axiom
  (assert
  (forall ((value us_t))
  (! (=> (dynamic_invariant value true true true true)
     (let ((result (put_octet_string_value value)))
     (=> (put_octet_string_value__function_guard result value)
     (dynamic_invariant result true false true true)))) :pattern ((put_octet_string_value
                                                                  value)) )))

(declare-const message_imprint us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun make_leading_identifier (Int Int Int) (_ BitVec 8))

(declare-fun make_leading_identifier__function_guard ((_ BitVec 8) Int Int
  Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_184 (_ BitVec 8))
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool) (temp___do_typ_inv_183 Bool)) Bool true)

(declare-sort tag_class_type 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (tag_class_type tag_class_type) Bool)

(declare-const dummy15 tag_class_type)

(declare-datatypes ((tag_class_type__ref 0))
(((tag_class_type__refqtmk (tag_class_type__content tag_class_type)))))
(define-fun tag_class_type__ref_tag_class_type__content__projection ((a tag_class_type__ref)) tag_class_type 
  (tag_class_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_353 Int)
  (temp___is_init_349 Bool) (temp___skip_constant_350 Bool)
  (temp___do_toplevel_351 Bool)
  (temp___do_typ_inv_352 Bool)) Bool (=>
                                     (or (= temp___is_init_349 true)
                                     (<= 0 3)) (in_range7 temp___expr_353)))

(declare-sort structured_flag_type 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq16 (structured_flag_type structured_flag_type) Bool)

(declare-const dummy16 structured_flag_type)

(declare-datatypes ((structured_flag_type__ref 0))
(((structured_flag_type__refqtmk
  (structured_flag_type__content structured_flag_type)))))
(define-fun structured_flag_type__ref_structured_flag_type__content__projection ((a structured_flag_type__ref)) structured_flag_type 
  (structured_flag_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_360 Int)
  (temp___is_init_356 Bool) (temp___skip_constant_357 Bool)
  (temp___do_toplevel_358 Bool)
  (temp___do_typ_inv_359 Bool)) Bool (=>
                                     (or (= temp___is_init_356 true)
                                     (<= 0 1)) (in_range8 temp___expr_360)))

(declare-sort leading_number_type 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 34)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq17 (leading_number_type leading_number_type) Bool)

(declare-const dummy17 leading_number_type)

(declare-datatypes ((leading_number_type__ref 0))
(((leading_number_type__refqtmk
  (leading_number_type__content leading_number_type)))))
(define-fun leading_number_type__ref_leading_number_type__content__projection ((a leading_number_type__ref)) leading_number_type 
  (leading_number_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_367 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)
  (temp___do_typ_inv_366 Bool)) Bool (=>
                                     (or (= temp___is_init_363 true)
                                     (<= 0 34)) (in_range9 temp___expr_367)))

;; make_leading_identifier__post_axiom
  (assert
  (forall ((tag_class Int) (structured_flag Int) (tag Int))
  (! (=>
     (and
     (and (dynamic_invariant2 tag_class true true true true)
     (dynamic_invariant3 structured_flag true true true true))
     (dynamic_invariant4 tag true true true true))
     (let ((result (make_leading_identifier tag_class structured_flag tag)))
     (=> (make_leading_identifier__function_guard result tag_class
     structured_flag tag) (dynamic_invariant1 result true false true true)))) :pattern (
  (make_leading_identifier tag_class structured_flag tag)) )))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-fun put_length_value (Int) us_t)

(declare-fun put_length_value__function_guard (us_t Int) Bool)

;; put_length_value__post_axiom
  (assert
  (forall ((length2 Int))
  (! (=> (dynamic_invariant5 length2 true true true true)
     (let ((result (put_length_value length2)))
     (=> (put_length_value__function_guard result length2)
     (and (<= (length1 result) 5) (dynamic_invariant result true false true
     true))))) :pattern ((put_length_value length2)) )))

(declare-const message_imprint_value us_t)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant6 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun put_integer_value (Int) us_t)

(declare-fun put_integer_value__function_guard (us_t Int) Bool)

;; put_integer_value__post_axiom
  (assert
  (forall ((value Int))
  (! (=> (dynamic_invariant6 value true true true true)
     (let ((result (put_integer_value value)))
     (=> (put_integer_value__function_guard result value) (dynamic_invariant
     result true false true true)))) :pattern ((put_integer_value value)) )))

(declare-const tst_info us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun concat1 ((Array Int octet) Int Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_def
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (octet Int (Array Int octet) Int
  Int) (Array Int octet))

;; concat_singleton_left_def
  (assert
  (forall ((a octet))
  (forall ((b (Array Int octet)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int octet) Int Int
  octet) (Array Int octet))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((b octet))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (octet Int octet) (Array Int octet))

;; concat_singletons_def
  (assert
  (forall ((a octet) (b octet))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (octet Int) (Array Int octet))

;; singleton_def
  (assert
  (forall ((v octet))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-sort t1s 0)

(declare-fun t1sqtint (t1s) Int)

;; t1s'axiom
  (assert (forall ((i t1s)) (and (<= 1 (t1sqtint i)) (<= (t1sqtint i) 32))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 32)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq18 (t1s t1s) Bool)

(declare-const dummy18 t1s)

(declare-datatypes ((t1s__ref 0))
(((t1s__refqtmk (t1s__content t1s)))))
(define-fun t1s__ref_t1s__content__projection ((a t1s__ref)) t1s (t1s__content
                                                                 a))

;; message_imprint__def_axiom
  (assert
  (and (put_octet_string_value__function_guard
  (put_octet_string_value
  (of_array
  (rec__timestamp_messages__timestamp__hashed_message
  (us_split_fields3 stamp)) 1 32))
  (of_array
  (rec__timestamp_messages__timestamp__hashed_message
  (us_split_fields3 stamp)) 1 32))
  (and (put_oid_value__function_guard
  (put_oid_value
  (rec__timestamp_messages__timestamp__hash_algorithm
  (us_split_fields3 stamp)))
  (rec__timestamp_messages__timestamp__hash_algorithm
  (us_split_fields3 stamp)))
  (= message_imprint (let ((temp___163 (put_octet_string_value
                                       (of_array
                                       (rec__timestamp_messages__timestamp__hashed_message
                                       (us_split_fields3 stamp)) 1 32))))
                     (let ((temp___162 (put_oid_value
                                       (rec__timestamp_messages__timestamp__hash_algorithm
                                       (us_split_fields3 stamp)))))
                     (ite (= (length1 temp___162) 0)
                     (of_array (to_array temp___163) (first1 temp___163)
                     (last1 temp___163))
                     (of_array
                     (concat1 (to_array temp___162) (first1 temp___162)
                     (last1 temp___162) (to_array temp___163)
                     (first1 temp___163) (last1 temp___163))
                     (first1 temp___162)
                     (- (+ (first1 temp___162) (+ (length (first1 temp___162)
                                                  (last1 temp___162)) 
                     (length (first1 temp___163) (last1 temp___163)))) 1)))))))))

;; message_imprint_value__def_axiom
  (assert
  (and (put_length_value__function_guard
  (put_length_value (length1 message_imprint)) (length1 message_imprint))
  (and (make_leading_identifier__function_guard
  (make_leading_identifier 0 1 15) 0 1 15)
  (= message_imprint_value (let ((temp___170 (let ((temp___169 (put_length_value
                                                               (length1
                                                               message_imprint))))
                                             (let ((temp___168 (make_leading_identifier
                                                               0 1 15)))
                                             (of_array
                                             (concat_singleton_left
                                             (of_rep5 temp___168) 0
                                             (to_array temp___169)
                                             (first1 temp___169)
                                             (last1 temp___169)) 0
                                             (- (+ 0 (+ 1 (length
                                                          (first1 temp___169)
                                                          (last1 temp___169)))) 1))))))
                           (ite (= (length1 temp___170) 0)
                           (of_array (to_array message_imprint)
                           (first1 message_imprint) (last1 message_imprint))
                           (of_array
                           (concat1 (to_array temp___170) (first1 temp___170)
                           (last1 temp___170) (to_array message_imprint)
                           (first1 message_imprint) (last1 message_imprint))
                           (first1 temp___170)
                           (- (+ (first1 temp___170) (+ (length
                                                        (first1 temp___170)
                                                        (last1 temp___170)) 
                           (length (first1 message_imprint)
                           (last1 message_imprint)))) 1))))))))

;; tst_info__def_axiom
  (assert
  (and (put_integer_value__function_guard
  (put_integer_value
  (bv2nat (to_rep6
          (rec__timestamp_messages__timestamp__serial_number
          (us_split_fields3 stamp)))))
  (bv2nat (to_rep6
          (rec__timestamp_messages__timestamp__serial_number
          (us_split_fields3 stamp)))))
  (and (put_oid_value__function_guard
  (put_oid_value
  (rec__timestamp_messages__timestamp__policy (us_split_fields3 stamp)))
  (rec__timestamp_messages__timestamp__policy (us_split_fields3 stamp)))
  (and (put_integer_value__function_guard
  (put_integer_value
  (to_rep4
  (rec__timestamp_messages__timestamp__version (us_split_fields3 stamp))))
  (to_rep4
  (rec__timestamp_messages__timestamp__version (us_split_fields3 stamp))))
  (= tst_info (let ((temp___179 (put_integer_value
                                (bv2nat (to_rep6
                                        (rec__timestamp_messages__timestamp__serial_number
                                        (us_split_fields3 stamp)))))))
              (let ((temp___178 (let ((temp___176 (let ((temp___175 (put_oid_value
                                                                    (rec__timestamp_messages__timestamp__policy
                                                                    (us_split_fields3
                                                                    stamp)))))
                                                  (let ((temp___174 (put_integer_value
                                                                    (to_rep4
                                                                    (rec__timestamp_messages__timestamp__version
                                                                    (us_split_fields3
                                                                    stamp))))))
                                                  (ite (= (length1
                                                          temp___174) 0)
                                                  (of_array
                                                  (to_array temp___175)
                                                  (first1 temp___175)
                                                  (last1 temp___175))
                                                  (of_array
                                                  (concat1
                                                  (to_array temp___174)
                                                  (first1 temp___174)
                                                  (last1 temp___174)
                                                  (to_array temp___175)
                                                  (first1 temp___175)
                                                  (last1 temp___175))
                                                  (first1 temp___174)
                                                  (- (+ (first1 temp___174) (+ 
                                                  (length (first1 temp___174)
                                                  (last1 temp___174)) 
                                                  (length (first1 temp___175)
                                                  (last1 temp___175)))) 1)))))))
                                (ite (= (length1 temp___176) 0)
                                (of_array (to_array message_imprint_value)
                                (first1 message_imprint_value)
                                (last1 message_imprint_value))
                                (of_array
                                (concat1 (to_array temp___176)
                                (first1 temp___176) (last1 temp___176)
                                (to_array message_imprint_value)
                                (first1 message_imprint_value)
                                (last1 message_imprint_value))
                                (first1 temp___176)
                                (- (+ (first1 temp___176) (+ (length
                                                             (first1
                                                             temp___176)
                                                             (last1
                                                             temp___176)) 
                                (length (first1 message_imprint_value)
                                (last1 message_imprint_value)))) 1))))))
              (ite (= (length1 temp___178) 0)
              (of_array (to_array temp___179) (first1 temp___179)
              (last1 temp___179))
              (of_array
              (concat1 (to_array temp___178) (first1 temp___178)
              (last1 temp___178) (to_array temp___179) (first1 temp___179)
              (last1 temp___179)) (first1 temp___178)
              (- (+ (first1 temp___178) (+ (length (first1 temp___178)
                                           (last1 temp___178)) (length
                                                               (first1
                                                               temp___179)
                                                               (last1
                                                               temp___179)))) 1))))))))))

(define-fun dynamic_invariant7 ((temp___expr_197 Int)
  (temp___is_init_193 Bool) (temp___skip_constant_194 Bool)
  (temp___do_toplevel_195 Bool)
  (temp___do_typ_inv_196 Bool)) Bool (=>
                                     (or (= temp___is_init_193 true)
                                     (<= 1 1)) (in_range6 temp___expr_197)))

(define-fun dynamic_invariant8 ((temp___expr_204 Int)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)
  (temp___do_typ_inv_203 Bool)) Bool (=>
                                     (or (= temp___is_init_200 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_204)))

(define-fun dynamic_invariant9 ((temp___expr_211 Int)
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)
  (temp___do_typ_inv_210 Bool)) Bool (=>
                                     (or (= temp___is_init_207 true)
                                     (<= 0 2)) (in_range2 temp___expr_211)))

(define-fun dynamic_invariant10 ((temp___expr_218 Int)
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)
  (temp___do_typ_inv_217 Bool)) Bool (=>
                                     (or (= temp___is_init_214 true)
                                     (<= 0 175)) (in_range3 temp___expr_218)))

(define-fun dynamic_invariant11 ((temp___expr_249 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (or (= temp___is_init_245 true)
                                     (<= 0 13)) (in_range5 temp___expr_249)))

(define-fun dynamic_invariant12 ((temp___expr_270 (_ BitVec 64))
  (temp___is_init_266 Bool) (temp___skip_constant_267 Bool)
  (temp___do_toplevel_268 Bool) (temp___do_typ_inv_269 Bool)) Bool true)

(assert
;; defqtvc
 ;; File "timestamp_messages-server.ads", line 19, characters 0-0
  (not
  (forall
  ((ada___timestamp_messages__server__put_timestamp_value__message_imprint__assume us_t))
  (=>
  (let ((o (of_array
           (rec__timestamp_messages__timestamp__hashed_message
           (us_split_fields3 stamp)) 1 32)))
  (let ((temp___375 (put_octet_string_value o)))
  (and
  (and (put_octet_string_value__function_guard temp___375 o)
  (dynamic_invariant temp___375 true false true true))
  (let ((o1 (rec__timestamp_messages__timestamp__hash_algorithm
            (us_split_fields3 stamp))))
  (let ((temp___374 (put_oid_value o1)))
  (and
  (and (put_oid_value__function_guard temp___374 o1) (dynamic_invariant
  temp___374 true false true true))
  (ite (= (length1 temp___374) 0)
  (= ada___timestamp_messages__server__put_timestamp_value__message_imprint__assume 
  (of_array (to_array temp___375) (first1 temp___375) (last1 temp___375)))
  (let ((o2 (- (+ (first1 temp___374) (+ (length (first1 temp___374)
                                         (last1 temp___374)) (length
                                                             (first1
                                                             temp___375)
                                                             (last1
                                                             temp___375)))) 1)))
  (and (in_range1 o2)
  (= ada___timestamp_messages__server__put_timestamp_value__message_imprint__assume 
  (of_array
  (concat1 (to_array temp___374) (first1 temp___374) (last1 temp___374)
  (to_array temp___375) (first1 temp___375) (last1 temp___375))
  (first1 temp___374) o2)))))))))))
  (=>
  (= ada___timestamp_messages__server__put_timestamp_value__message_imprint__assume 
  message_imprint)
  (=> (dynamic_invariant message_imprint true false true true) (in_range1
  (length1 message_imprint))))))))
(check-sat)
