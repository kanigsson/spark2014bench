;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort value_type 0)

(declare-fun value_typeqtint (value_type) Int)

;; value_type'axiom
  (assert
  (forall ((i value_type))
  (and (<= (- 2147483648) (value_typeqtint i))
  (<= (value_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (value_type value_type) Bool)

(declare-const dummy value_type)

(declare-datatypes ((value_type__ref 0))
(((value_type__refqtmk (value_type__content value_type)))))
(define-fun value_type__ref_value_type__content__projection ((a value_type__ref)) value_type 
  (value_type__content a))

(declare-sort tindex_typeB 0)

(declare-fun tindex_typeBqtint (tindex_typeB) Int)

;; tindex_typeB'axiom
  (assert
  (forall ((i tindex_typeB))
  (and (<= (- 2147483648) (tindex_typeBqtint i))
  (<= (tindex_typeBqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tindex_typeB tindex_typeB) Bool)

(declare-const dummy1 tindex_typeB)

(declare-datatypes ((tindex_typeB__ref 0))
(((tindex_typeB__refqtmk (tindex_typeB__content tindex_typeB)))))
(define-fun tindex_typeB__ref_tindex_typeB__content__projection ((a tindex_typeB__ref)) tindex_typeB 
  (tindex_typeB__content a))

(define-fun to_rep ((x tindex_typeB)) Int (tindex_typeBqtint x))

(declare-fun of_rep (Int) tindex_typeB)

;; inversion_axiom
  (assert
  (forall ((x tindex_typeB))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x tindex_typeB)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= (- 2147483648) (index_typeqtint i))
  (<= (index_typeqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (index_type index_type) Bool)

(declare-const dummy2 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun to_rep1 ((x value_type)) Int (value_typeqtint x))

(declare-fun of_rep1 (Int) value_type)

;; inversion_axiom
  (assert
  (forall ((x value_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x value_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int value_type))))))
(declare-fun slide ((Array Int value_type) Int Int) (Array Int value_type))

;; slide_eq
  (assert
  (forall ((a (Array Int value_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int value_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int value_type)) (a__first Int) (a__last Int)
  (b (Array Int value_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int value_type)) (b (Array Int value_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) tindex_typeB)

(declare-fun last (t) tindex_typeB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int value_type))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int value_type) (elts a))

(define-fun of_array ((a (Array Int value_type)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((generic_array__ref 0))
(((generic_array__refqtmk (generic_array__content us_t)))))
(define-fun generic_array__ref_generic_array__content__projection ((a generic_array__ref)) us_t 
  (generic_array__content a))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant ((temp___expr_169 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)
  (temp___do_typ_inv_168 Bool)) Bool (=>
                                     (or (= temp___is_init_165 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_169)))

(define-fun dynamic_invariant1 ((temp___expr_176 us_t)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)
  (temp___do_typ_inv_175 Bool)) Bool (=>
                                     (not (= temp___skip_constant_173 true))
                                     (dynamic_property (- 2147483648)
                                     2147483647 (first1 temp___expr_176)
                                     (last1 temp___expr_176))))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tindex_typeB tindex_typeB) Bool)

(declare-const dummy4 tindex_typeB)

(declare-datatypes ((t3b__ref 0))
(((t3b__refqtmk (t3b__content tindex_typeB)))))
(define-fun t3b__ref_t3b__content__projection ((a1 t3b__ref)) tindex_typeB 
  (t3b__content a1))

(define-fun dynamic_invariant2 ((temp___expr_162 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)
  (temp___do_typ_inv_161 Bool)) Bool (=>
                                     (or (= temp___is_init_158 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_162)))

(assert
;; defqtvc
 ;; File "array_algorithms.ads", line 25, characters 0-0
  (not
  (forall ((location Int) (found Bool) (location1 Int) (found1 Bool)
  (location2 Int) (usf Int))
  (=> (dynamic_invariant1 a true false true true)
  (=> (dynamic_invariant1 b true false true true)
  (=> (dynamic_invariant location false false true true)
  (=> (= (first1 a) (first1 b))
  (=> (= (last1 a) (last1 b))
  (=> (= found (distinct 0 0))
  (=> (= location1 (first1 a))
  (=>
  (let ((temp___224 (first1 a)))
  (let ((temp___225 (last1 a)))
  (exists ((i Int))
  (and (= i temp___224)
  (ite (= (and (ite (<= temp___224 i) true false) (ite (<= i temp___225) true
                                                  false)) true)
  (or
  (and
  (and
  (and (and (<= (first1 b) i) (<= i (last1 b)))
  (exists ((o Int))
  (and (= (to_rep1 (select (to_array b) i)) o)
  (exists ((o1 Int))
  (and (= (to_rep1 (select (to_array a) i)) o1)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o1 o) false true))
  (and (not (= spark__branch true))
  (exists ((i1 Int))
  (and
  (and
  (forall ((j Int))
  (=> (and (<= (first1 a) j) (<= j i1))
  (= (to_rep1 (select (to_array a) j)) (to_rep1 (select (to_array b) j)))))
  (not (= found true)))
  (and
  (= (and (ite (and (dynamic_property1 (first1 a) (last1 a) i1)
               (dynamic_invariant location1 false true true true))
          true false) (ite (and (<= (first1 a) i1) (<= i1 (last1 a))) true
                      false)) true)
  (= i1 temp___225)))))))))))) (= found1 found)) (= location2 location1))
  (exists ((i1 Int))
  (and
  (and (and (<= (first1 b) i) (<= i (last1 b)))
  (exists ((o Int))
  (and (= (to_rep1 (select (to_array b) i)) o)
  (exists ((o1 Int))
  (and (= (to_rep1 (select (to_array a) i)) o1)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o1 o) false true))
  (ite (= spark__branch true) (= i1 i)
  (exists ((i2 Int))
  (and
  (and
  (forall ((j Int))
  (=> (and (<= (first1 a) j) (<= j i2))
  (= (to_rep1 (select (to_array a) j)) (to_rep1 (select (to_array b) j)))))
  (not (= found true)))
  (and
  (= (and (ite (and (dynamic_property1 (first1 a) (last1 a) i2)
               (dynamic_invariant location1 false true true true))
          true false) (ite (and (<= (first1 a) i2) (<= i2 (last1 a))) true
                      false)) true)
  (and (not (= i2 temp___225))
  (and (= i1 (+ i2 1))
  (and (and (<= (first1 b) i1) (<= i1 (last1 b)))
  (exists ((o2 Int))
  (and (= (to_rep1 (select (to_array b) i1)) o2)
  (exists ((o3 Int))
  (and (= (to_rep1 (select (to_array a) i1)) o3)
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (= o3 o2) false true)) (= spark__branch1 true)))))))))))))))))))))
  (and (= found1 (distinct 1 0)) (= location2 i1)))))
  (and (= found1 found) (= location2 location1)))))))
  (=> (= found1 true)
  (let ((o (- location2 1)))
  (=> (in_range2 o)
  (=>
  (= (and (ite (<= (first1 a) usf) true false) (ite (<= usf o) true false)) true)
  (<= (first1 b) usf))))))))))))))))
(check-sat)
