;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort int_type 0)

(declare-fun int_typeqtint (int_type) Int)

;; int_type'axiom
  (assert
  (forall ((i int_type))
  (and (<= (- 100) (int_typeqtint i)) (<= (int_typeqtint i) 100))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 100) x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (int_type int_type) Bool)

(declare-const dummy4 int_type)

(declare-datatypes ((int_type__ref 0))
(((int_type__refqtmk (int_type__content int_type)))))
(define-fun int_type__ref_int_type__content__projection ((a int_type__ref)) int_type 
  (int_type__content a))

(define-fun to_rep2 ((x int_type)) Int (int_typeqtint x))

(declare-fun of_rep2 (Int) int_type)

;; inversion_axiom
  (assert
  (forall ((x int_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x int_type)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__main__my_complex_pkg__complex_type__real int_type)(rec__main__my_complex_pkg__complex_type__imag int_type)))))
(define-fun us_split_fields_rec__main__my_complex_pkg__complex_type__real__projection ((a us_split_fields)) int_type 
  (rec__main__my_complex_pkg__complex_type__real a))

(define-fun us_split_fields_rec__main__my_complex_pkg__complex_type__imag__projection ((a us_split_fields)) int_type 
  (rec__main__my_complex_pkg__complex_type__imag a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__main__my_complex_pkg__complex_type__real
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__main__my_complex_pkg__complex_type__real
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__main__my_complex_pkg__complex_type__imag
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__main__my_complex_pkg__complex_type__imag
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const main__my_complex_pkg__complex_type__real__first__bit Int)

(declare-const main__my_complex_pkg__complex_type__real__last__bit Int)

(declare-const main__my_complex_pkg__complex_type__real__position Int)

;; main__my_complex_pkg__complex_type__real__first__bit_axiom
  (assert (<= 0 main__my_complex_pkg__complex_type__real__first__bit))

;; main__my_complex_pkg__complex_type__real__last__bit_axiom
  (assert
  (< main__my_complex_pkg__complex_type__real__first__bit main__my_complex_pkg__complex_type__real__last__bit))

;; main__my_complex_pkg__complex_type__real__position_axiom
  (assert (<= 0 main__my_complex_pkg__complex_type__real__position))

(declare-const main__my_complex_pkg__complex_type__imag__first__bit Int)

(declare-const main__my_complex_pkg__complex_type__imag__last__bit Int)

(declare-const main__my_complex_pkg__complex_type__imag__position Int)

;; main__my_complex_pkg__complex_type__imag__first__bit_axiom
  (assert (<= 0 main__my_complex_pkg__complex_type__imag__first__bit))

;; main__my_complex_pkg__complex_type__imag__last__bit_axiom
  (assert
  (< main__my_complex_pkg__complex_type__imag__first__bit main__my_complex_pkg__complex_type__imag__last__bit))

;; main__my_complex_pkg__complex_type__imag__position_axiom
  (assert (<= 0 main__my_complex_pkg__complex_type__imag__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((complex_type__ref 0))
(((complex_type__refqtmk (complex_type__content us_rep)))))
(define-fun complex_type__ref_complex_type__content__projection ((a complex_type__ref)) us_rep 
  (complex_type__content a))

(declare-fun real_part (us_rep) Int)

(declare-fun real_part__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_192 Int)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)
  (temp___do_typ_inv_191 Bool)) Bool (=>
                                     (or (= temp___is_init_188 true)
                                     (<= (- 100) 100)) (in_range4
                                     temp___expr_192)))

;; real_part__post_axiom
  (assert
  (forall ((complex_no us_rep))
  (! (let ((result (real_part complex_no)))
     (=> (real_part__function_guard result complex_no) (dynamic_invariant
     result true false true true))) :pattern ((real_part complex_no)) )))

(declare-fun imag_part (us_rep) Int)

(declare-fun imag_part__function_guard (Int us_rep) Bool)

;; imag_part__post_axiom
  (assert
  (forall ((complex_no us_rep))
  (! (let ((result (imag_part complex_no)))
     (=> (imag_part__function_guard result complex_no) (dynamic_invariant
     result true false true true))) :pattern ((imag_part complex_no)) )))

(declare-fun complex (Int Int) us_rep)

(declare-fun complex__function_guard (us_rep Int Int) Bool)

;; complex__post_axiom
  (assert true)

(declare-fun omultiply (Int us_rep) us_rep)

(declare-fun omultiply__function_guard (us_rep Int us_rep) Bool)

;; omultiply__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort my_integer 0)

(declare-fun my_integerqtint (my_integer) Int)

;; my_integer'axiom
  (assert
  (forall ((i my_integer))
  (and (<= (- 100) (my_integerqtint i)) (<= (my_integerqtint i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 100) x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (my_integer my_integer) Bool)

(declare-const dummy6 my_integer)

(declare-datatypes ((my_integer__ref 0))
(((my_integer__refqtmk (my_integer__content my_integer)))))
(define-fun my_integer__ref_my_integer__content__projection ((a my_integer__ref)) my_integer 
  (my_integer__content a))

(define-fun dynamic_invariant1 ((temp___expr_185 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)
  (temp___do_typ_inv_184 Bool)) Bool (=>
                                     (or (= temp___is_init_181 true)
                                     (<= (- 100) 100)) (in_range5
                                     temp___expr_185)))

(declare-fun temp___String_Literal_211 (tuple0) (Array Int character))

;; temp___String_Literal_211__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 2)) 65))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 3)) 49)
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 4)) 49))
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 5)) 48))
     (and
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 6)) 50)
     (= (to_rep (select (temp___String_Literal_211 us_void_param) 7)) 49)))) :pattern (
  (temp___String_Literal_211 us_void_param)) )))

(declare-fun temp___String_Literal_212 (tuple0) (Array Int character))

;; temp___String_Literal_212__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 2)) 104))
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 3)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 4)) 99))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 5)) 107))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 6)) 32)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 7)) 116))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 8)) 104)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 9)) 97)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 10)) 116))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 11)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 12)) 98)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 13)) 111))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 14)) 100)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 15)) 121))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 16)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 17)) 111)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 18)) 102)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 20)) 116))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 21)) 104))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 22)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 23)) 32)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 24)) 103)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 25)) 101))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 26)) 110))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 27)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 28)) 114))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 29)) 105)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 30)) 99)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 32)) 112))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 33)) 97)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 34)) 114))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 35)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 36)) 110))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 37)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 38)) 32)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 39)) 112)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 40)) 97)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 41)) 99))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 42)) 107))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 43)) 97)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 44)) 103))))))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 45)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 47)) 99))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 48)) 97)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 49)) 110))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 50)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 51)) 100)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 52)) 101))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 53)) 112))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 54)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 55)) 110))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 56)) 100)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 57)) 32))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 58)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 59)) 110)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 60)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 61)) 105)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 62)) 116))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 63)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 64)) 32)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 65)) 112)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 66)) 114)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 67)) 105))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 68)) 118))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 69)) 97)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 70)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 71)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 72)) 32))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 73)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 74)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 75)) 110))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 76)) 101)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 77)) 114))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 78)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 79)) 99)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 80)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 81)) 99)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 82)) 104))
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 83)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 84)) 108)
     (= (to_rep (select (temp___String_Literal_212 us_void_param) 85)) 100)))))))) :pattern (
  (temp___String_Literal_212 us_void_param)) )))

(declare-fun temp___String_Literal_215 (tuple0) (Array Int character))

;; temp___String_Literal_215__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 2)) 110))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 3)) 99)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 4)) 111))
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 5)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 6)) 114)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 7)) 101)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 8)) 99)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 10)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 11)) 114)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 12)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 13)) 115)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 14)) 117))
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 15)) 108))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 16)) 116)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 17)) 115)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 18)) 32)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 19)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 20)) 114)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 21)) 111)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 22)) 109)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 24)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 25)) 111)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 26)) 109)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 27)) 112)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 28)) 108))
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 29)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 30)) 120)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 31)) 32))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 32)) 111)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 33)) 112))
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 34)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 35)) 114)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 36)) 97)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 37)) 116)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 38)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 39)) 111)
     (= (to_rep (select (temp___String_Literal_215 us_void_param) 40)) 110))))))) :pattern (
  (temp___String_Literal_215 us_void_param)) )))

(declare-fun temp___String_Literal_218 (tuple0) (Array Int character))

;; temp___String_Literal_218__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 1)) 73)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 2)) 110))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 3)) 99)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 4)) 111))
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 5)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 6)) 114)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 7)) 101)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 8)) 99)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 9)) 116))
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 10)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 11)) 114)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 12)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 13)) 115)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 14)) 117))
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 15)) 108))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 16)) 116)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 17)) 115)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 18)) 32)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 19)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 20)) 114)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 21)) 111)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 22)) 109)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 23)) 32))
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 24)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 25)) 111)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 26)) 109)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 27)) 112)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 28)) 108))
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 29)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 30)) 120)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 31)) 32))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 32)) 111)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 33)) 112))
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 34)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 35)) 114)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 36)) 97)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 37)) 116)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 38)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 39)) 111)
     (= (to_rep (select (temp___String_Literal_218 us_void_param) 40)) 110))))))) :pattern (
  (temp___String_Literal_218 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant5 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(assert
;; defqtvc
 ;; File "main.adb", line 4, characters 0-0
  (not
  (forall ((my_literal Int))
  (=> (= my_literal (- 3))
  (=> (dynamic_invariant1 my_literal true false true true)
  (let ((temp___213 (complex 11 6)))
  (=> (complex__function_guard temp___213 11 6)
  (forall ((complex_one__split_fields us_split_fields))
  (=> (= complex_one__split_fields (us_split_fields1 temp___213))
  (let ((o (us_repqtmk complex_one__split_fields)))
  (let ((temp___214 (omultiply 5 o)))
  (=> (omultiply__function_guard temp___214 5 o)
  (forall ((complex_two__split_fields us_split_fields))
  (=> (= complex_two__split_fields (us_split_fields1 temp___214))
  (let ((o1 (us_repqtmk complex_two__split_fields)))
  (let ((o2 (imag_part o1)))
  (=>
  (and (imag_part__function_guard o2 o1) (dynamic_invariant o2 true false
  true true))
  (let ((o3 (us_repqtmk complex_two__split_fields)))
  (let ((o4 (real_part o3)))
  (=>
  (and (real_part__function_guard o4 o3) (dynamic_invariant o4 true false
  true true))
  (forall ((spark__branch Bool))
  (=>
  (= spark__branch (and (ite (= o4 55) false true) (ite (= o2 30) false true)))
  (not (= spark__branch true))))))))))))))))))))))))
(check-sat)
