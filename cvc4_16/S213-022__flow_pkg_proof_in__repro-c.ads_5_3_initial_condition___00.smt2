;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun invariant__ (Int us_private) Bool)

(declare-fun invariant____function_guard (Bool Int us_private) Bool)

(declare-fun get_foo (us_private) Int)

(declare-fun get_foo__function_guard (Int us_private) Bool)

(declare-sort byte 0)

(declare-fun byteqtint (byte) Int)

;; byte'axiom
  (assert
  (forall ((i byte))
  (and (<= (- 2147483648) (byteqtint i)) (<= (byteqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (byte byte) Bool)

(declare-const dummy byte)

(declare-datatypes ((byte__ref 0))
(((byte__refqtmk (byte__content byte)))))
(define-fun byte__ref_byte__content__projection ((a byte__ref)) byte 
  (byte__content a))

(define-fun dynamic_invariant ((temp___expr_160 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_160)))

;; invariant____post_axiom
  (assert true)

;; invariant____def_axiom
  (assert
  (forall ((ada___repro__c__y Int))
  (forall ((repro__foo us_private))
  (! (and
     (forall ((repro__foo1 us_private)) (get_foo__function_guard
     (get_foo repro__foo1) repro__foo1))
     (= (= (invariant__ ada___repro__c__y repro__foo) true)
     (and (< 0 (get_foo repro__foo)) (= ada___repro__c__y 0)))) :pattern (
  (invariant__ ada___repro__c__y repro__foo)) ))))

;; get_foo__post_axiom
  (assert
  (forall ((repro__foo us_private))
  (! (let ((result (get_foo repro__foo)))
     (=> (get_foo__function_guard result repro__foo) (dynamic_invariant
     result true false true true))) :pattern ((get_foo repro__foo)) )))

(assert
;; defqtvc
 ;; File "repro-c.ads", line 1, characters 0-0
  (not
  (forall ((foo us_private) (y Int))
  (=> (= y 0)
  (=> (dynamic_invariant y true false true true)
  (let ((result (invariant__ y foo)))
  (=>
  (forall ((foo1 us_private)) (get_foo__function_guard (get_foo foo1) foo1))
  (=>
  (and (invariant____function_guard result y foo)
  (= (= result true) (and (< 0 (get_foo foo)) (= y 0))))
  (=>
  (forall ((foo1 us_private) (y1 Int)) (invariant____function_guard
  (invariant__ y1 foo1) y1 foo1)) (= (invariant__ y foo) true))))))))))
(check-sat)
