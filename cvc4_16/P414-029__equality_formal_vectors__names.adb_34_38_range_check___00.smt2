(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort name_id 0)

(declare-fun name_idqtint (name_id) Int)

;; name_id'axiom
  (assert
  (forall ((i name_id))
  (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (name_id name_id) Bool)

(declare-const dummy name_id)

(declare-datatypes ((name_id__ref 0))
(((name_id__refqtmk (name_id__content name_id)))))
(define-fun name_id__ref_name_id__content__projection ((a name_id__ref)) name_id 
  (name_id__content a))

(define-fun to_rep ((x name_id)) Int (name_idqtint x))

(declare-fun of_rep (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 32) name_id))))))
(declare-fun slide ((Array (_ BitVec 32) name_id) (_ BitVec 32)
  (_ BitVec 32)) (Array (_ BitVec 32) name_id))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 32) name_id)))
  (forall ((first (_ BitVec 32)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 32) name_id)))
  (forall ((old_first (_ BitVec 32)))
  (forall ((new_first (_ BitVec 32)))
  (forall ((i (_ BitVec 32)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 32) name_id))
  (a__first (_ BitVec 32)) (a__last (_ BitVec 32))
  (b (Array (_ BitVec 32) name_id)) (b__first (_ BitVec 32))
  (b__last (_ BitVec 32))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_156 (_ BitVec 32)))
                                     (=>
                                     (and (bvule a__first temp___idx_156)
                                     (bvule temp___idx_156 a__last))
                                     (= (to_rep (select a temp___idx_156)) 
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_156)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 32) name_id))
  (b (Array (_ BitVec 32) name_id)))
  (forall ((a__first (_ BitVec 32)) (a__last (_ BitVec 32))
  (b__first (_ BitVec 32)) (b__last (_ BitVec 32)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_156 (_ BitVec 32)))
  (=> (and (bvule a__first temp___idx_156) (bvule temp___idx_156 a__last))
  (= (to_rep (select a temp___idx_156)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_156)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i))
  (<= (capacity_rangeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (capacity_range capacity_range) Bool)

(declare-const dummy1 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__names__char_tables__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__names__char_tables__vector__capacity__projection ((a us_split_discrs)) capacity_range 
  (rec__names__char_tables__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__names__char_tables__vector us_main_type)))))
(define-fun us_split_fields_rec__names__char_tables__vector__projection ((a us_split_fields)) us_main_type 
  (rec__names__char_tables__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun to_rep1 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep1 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun in_range2 ((rec__names__char_tables__vector__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__names__char_tables__vector__capacity1 
  (to_rep1 (rec__names__char_tables__vector__capacity a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const names__char_tables__vector__capacity__first__bit Int)

(declare-const names__char_tables__vector__capacity__last__bit Int)

(declare-const names__char_tables__vector__capacity__position Int)

;; names__char_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__char_tables__vector__capacity__first__bit))

;; names__char_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__char_tables__vector__capacity__first__bit names__char_tables__vector__capacity__last__bit))

;; names__char_tables__vector__capacity__position_axiom
  (assert (<= 0 names__char_tables__vector__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep 
  (vector__content a))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const names__char_tables__vector__capacity__first__bit1 Int)

(declare-const names__char_tables__vector__capacity__last__bit1 Int)

(declare-const names__char_tables__vector__capacity__position1 Int)

;; names__char_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__char_tables__vector__capacity__first__bit1))

;; names__char_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__char_tables__vector__capacity__first__bit1 names__char_tables__vector__capacity__last__bit1))

;; names__char_tables__vector__capacity__position_axiom
  (assert (<= 0 names__char_tables__vector__capacity__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((tchar_tableS__ref 0))
(((tchar_tableS__refqtmk (tchar_tableS__content us_rep)))))
(define-fun tchar_tableS__ref_tchar_tableS__content__projection ((a tchar_tableS__ref)) us_rep 
  (tchar_tableS__content a))

(declare-const char_table__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

(define-fun dynamic_invariant ((temp___expr_415 us_rep)
  (temp___is_init_411 Bool) (temp___skip_constant_412 Bool)
  (temp___do_toplevel_413 Bool)
  (temp___do_typ_inv_414 Bool)) Bool (=>
                                     (not (= temp___skip_constant_412 true))
                                     (in_range2 1024
                                     (us_split_discrs1 temp___expr_415))))

(define-fun default_initial_assumption ((temp___expr_417 us_rep)
  (temp___skip_top_level_418 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__names__char_tables__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_417))) 1024)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_418 true))
                                         (= (is_empty temp___expr_417) true))))

(declare-sort capacity_range1 0)

(declare-fun capacity_rangeqtint1 (capacity_range1) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range1))
  (and (<= 0 (capacity_rangeqtint1 i))
  (<= (capacity_rangeqtint1 i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (capacity_range1 capacity_range1) Bool)

(declare-const dummy4 capacity_range1)

(declare-datatypes ((capacity_range__ref1 0))
(((capacity_range__refqtmk1 (capacity_range__content1 capacity_range1)))))
(define-fun capacity_range__ref_capacity_range__content__2__projection ((a capacity_range__ref1)) capacity_range1 
  (capacity_range__content1 a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__names__entry_tables__vector__capacity capacity_range1)))))
(define-fun us_split_discrs_rec__names__entry_tables__vector__capacity__projection ((a us_split_discrs2)) capacity_range1 
  (rec__names__entry_tables__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__names__entry_tables__vector us_main_type1)))))
(define-fun us_split_fields_rec__names__entry_tables__vector__projection ((a us_split_fields2)) us_main_type1 
  (rec__names__entry_tables__vector a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_rep2 ((x capacity_range1)) Int (capacity_rangeqtint1 x))

(declare-fun of_rep2 (Int) capacity_range1)

;; inversion_axiom
  (assert
  (forall ((x capacity_range1))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range1)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun in_range4 ((rec__names__entry_tables__vector__capacity1 Int)
  (a us_split_discrs2)) Bool (= rec__names__entry_tables__vector__capacity1 
  (to_rep2 (rec__names__entry_tables__vector__capacity a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const names__entry_tables__vector__capacity__first__bit Int)

(declare-const names__entry_tables__vector__capacity__last__bit Int)

(declare-const names__entry_tables__vector__capacity__position Int)

;; names__entry_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__first__bit))

;; names__entry_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__entry_tables__vector__capacity__first__bit names__entry_tables__vector__capacity__last__bit))

;; names__entry_tables__vector__capacity__position_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((vector__ref1 0))
(((vector__refqtmk1 (vector__content1 us_rep1)))))
(define-fun vector__ref_vector__content__2__projection ((a vector__ref1)) us_rep1 
  (vector__content1 a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const names__entry_tables__vector__capacity__first__bit1 Int)

(declare-const names__entry_tables__vector__capacity__last__bit1 Int)

(declare-const names__entry_tables__vector__capacity__position1 Int)

;; names__entry_tables__vector__capacity__first__bit_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__first__bit1))

;; names__entry_tables__vector__capacity__last__bit_axiom
  (assert
  (< names__entry_tables__vector__capacity__first__bit1 names__entry_tables__vector__capacity__last__bit1))

;; names__entry_tables__vector__capacity__position_axiom
  (assert (<= 0 names__entry_tables__vector__capacity__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((tentry_tableS__ref 0))
(((tentry_tableS__refqtmk (tentry_tableS__content us_rep1)))))
(define-fun tentry_tableS__ref_tentry_tableS__content__projection ((a tentry_tableS__ref)) us_rep1 
  (tentry_tableS__content a))

(declare-const entry_table__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun oeq1 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq6 a b) (oeq1 a b)) :pattern ((user_eq6 a b)) )))

(define-fun dynamic_invariant1 ((temp___expr_613 us_rep1)
  (temp___is_init_609 Bool) (temp___skip_constant_610 Bool)
  (temp___do_toplevel_611 Bool)
  (temp___do_typ_inv_612 Bool)) Bool (=>
                                     (not (= temp___skip_constant_610 true))
                                     (in_range4 128
                                     (us_split_discrs3 temp___expr_613))))

(define-fun default_initial_assumption1 ((temp___expr_615 us_rep1)
  (temp___skip_top_level_616 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__names__entry_tables__vector__capacity
                                            (us_split_discrs3
                                            temp___expr_615))) 128)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_616 true))
                                         (= (is_empty1 temp___expr_615) true))))

(declare-fun names__hash_table__aggregate_def (Int) (Array (_ BitVec 32) name_id))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (positive positive) Bool)

(declare-const dummy7 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range5
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_282 Int)
  (temp___is_init_278 Bool) (temp___skip_constant_279 Bool)
  (temp___do_toplevel_280 Bool)
  (temp___do_typ_inv_281 Bool)) Bool (=>
                                     (or (= temp___is_init_278 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_282)))

(declare-const rliteral name_id)

;; rliteral_axiom
  (assert (= (name_idqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___642 Int))
  (=> (dynamic_invariant3 temp___642 true true true true)
  (forall ((temp___643 (_ BitVec 32)))
  (= (select (names__hash_table__aggregate_def temp___642) temp___643) 
  rliteral)))))

(declare-sort char_table_index 0)

(declare-fun char_table_indexqtint (char_table_index) Int)

;; char_table_index'axiom
  (assert
  (forall ((i char_table_index))
  (and (<= 0 (char_table_indexqtint i))
  (<= (char_table_indexqtint i) 2147483646))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (char_table_index char_table_index) Bool)

(declare-const dummy8 char_table_index)

(declare-datatypes ((char_table_index__ref 0))
(((char_table_index__refqtmk (char_table_index__content char_table_index)))))
(define-fun char_table_index__ref_char_table_index__content__projection ((a char_table_index__ref)) char_table_index 
  (char_table_index__content a))

(define-fun dynamic_invariant4 ((temp___expr_337 Int)
  (temp___is_init_333 Bool) (temp___skip_constant_334 Bool)
  (temp___do_toplevel_335 Bool)
  (temp___do_typ_inv_336 Bool)) Bool (=>
                                     (or (= temp___is_init_333 true)
                                     (<= 0 2147483646)) (in_range6
                                     temp___expr_337)))

(define-fun to_rep3 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep3 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun to_rep4 ((x char_table_index)) Int (char_table_indexqtint x))

(declare-fun of_rep4 (Int) char_table_index)

;; inversion_axiom
  (assert
  (forall ((x char_table_index))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x char_table_index)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__names__name_entry__table_index char_table_index)(rec__names__name_entry__length positive)(rec__names__name_entry__next_hash name_id)))))
(define-fun us_split_fields_rec__names__name_entry__table_index__projection ((a us_split_fields4)) char_table_index 
  (rec__names__name_entry__table_index a))

(define-fun us_split_fields_rec__names__name_entry__length__projection ((a us_split_fields4)) positive 
  (rec__names__name_entry__length a))

(define-fun us_split_fields_rec__names__name_entry__next_hash__projection ((a us_split_fields4)) name_id 
  (rec__names__name_entry__next_hash a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq1 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__names__name_entry__table_index
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__names__name_entry__table_index
                                                   (us_split_fields5 b))))
                         (= (to_rep3
                            (rec__names__name_entry__length
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__names__name_entry__length
                                                   (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__names__name_entry__next_hash
                            (us_split_fields5 a))) (to_rep
                                                   (rec__names__name_entry__next_hash
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const names__name_entry__table_index__first__bit Int)

(declare-const names__name_entry__table_index__last__bit Int)

(declare-const names__name_entry__table_index__position Int)

;; names__name_entry__table_index__first__bit_axiom
  (assert (<= 0 names__name_entry__table_index__first__bit))

;; names__name_entry__table_index__last__bit_axiom
  (assert
  (< names__name_entry__table_index__first__bit names__name_entry__table_index__last__bit))

;; names__name_entry__table_index__position_axiom
  (assert (<= 0 names__name_entry__table_index__position))

(declare-const names__name_entry__length__first__bit Int)

(declare-const names__name_entry__length__last__bit Int)

(declare-const names__name_entry__length__position Int)

;; names__name_entry__length__first__bit_axiom
  (assert (<= 0 names__name_entry__length__first__bit))

;; names__name_entry__length__last__bit_axiom
  (assert
  (< names__name_entry__length__first__bit names__name_entry__length__last__bit))

;; names__name_entry__length__position_axiom
  (assert (<= 0 names__name_entry__length__position))

(declare-const names__name_entry__next_hash__first__bit Int)

(declare-const names__name_entry__next_hash__last__bit Int)

(declare-const names__name_entry__next_hash__position Int)

;; names__name_entry__next_hash__first__bit_axiom
  (assert (<= 0 names__name_entry__next_hash__first__bit))

;; names__name_entry__next_hash__last__bit_axiom
  (assert
  (< names__name_entry__next_hash__first__bit names__name_entry__next_hash__last__bit))

;; names__name_entry__next_hash__position_axiom
  (assert (<= 0 names__name_entry__next_hash__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((name_entry__ref 0))
(((name_entry__refqtmk (name_entry__content us_rep2)))))
(define-fun name_entry__ref_name_entry__content__projection ((a name_entry__ref)) us_rep2 
  (name_entry__content a))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq10 (count_type count_type) Bool)

(declare-const dummy10 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant5 ((temp___expr_365 Int)
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)
  (temp___do_typ_inv_364 Bool)) Bool (=>
                                     (or (= temp___is_init_361 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_365)))

(define-fun dynamic_invariant6 ((temp___expr_372 Int)
  (temp___is_init_368 Bool) (temp___skip_constant_369 Bool)
  (temp___do_toplevel_370 Bool)
  (temp___do_typ_inv_371 Bool)) Bool (=>
                                     (or (= temp___is_init_368 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_372)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun in_range8 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Bool)

(define-fun capacity ((container us_rep)) Int (ite (= (distinct 0 0) true)
                                              (to_rep1
                                              (rec__names__char_tables__vector__capacity
                                              (us_split_discrs1 container)))
                                              2147483647))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant6 result true
     false true true))) :pattern ((length container)) )))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq2 (us_rep3 us_rep3) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-const dummy11 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep3)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep3 
  (sequence__content a))

(declare-fun length1 (us_rep3) Int)

(declare-fun length__function_guard1 (Int us_rep3) Bool)

(declare-fun model1 (us_rep) us_rep3)

(declare-fun model__function_guard (us_rep3 us_rep) Bool)

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun last ((container us_rep3)) Int (+ (- 1) (length1 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(declare-fun get (us_rep3 Int) Int)

(declare-fun get__function_guard (Int us_rep3 Int) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 0 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq11 a b) (oeq2 a b)) :pattern ((user_eq11 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_407 us_rep3)
  (temp___skip_top_level_408 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_408 true))
                                         (= (length1 temp___expr_407) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq2 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= (- 1) (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483646))))

(define-fun in_range9 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq12 (extended_index extended_index) Bool)

(declare-const dummy12 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant7 ((temp___expr_399 Int)
  (temp___is_init_395 Bool) (temp___skip_constant_396 Bool)
  (temp___do_toplevel_397 Bool)
  (temp___do_typ_inv_398 Bool)) Bool (=>
                                     (or (= temp___is_init_395 true)
                                     (<= (- 1) 2147483646)) (in_range9
                                     temp___expr_399)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length1 container)))
     (and (<= (+ (- 1) result) 2147483646) (dynamic_invariant5 result true
     false true true))) :pattern ((length1 container)) )))

(declare-sort element_type 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (element_type element_type) Bool)

(declare-const dummy13 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_392 Int)
  (temp___is_init_388 Bool) (temp___skip_constant_389 Bool)
  (temp___do_toplevel_390 Bool)
  (temp___do_typ_inv_391 Bool)) Bool (=>
                                     (or (= temp___is_init_388 true)
                                     (<= 0 255)) (in_range10
                                     temp___expr_392)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant7 position true true true true)
     (and (<= 0 position) (<= position (last container))))
     (dynamic_invariant8 (get container position) true false true true)) :pattern (
  (get container position)) ))))

(define-fun dynamic_invariant9 ((temp___expr_459 Int)
  (temp___is_init_455 Bool) (temp___skip_constant_456 Bool)
  (temp___do_toplevel_457 Bool)
  (temp___do_typ_inv_458 Bool)) Bool (=>
                                     (or (= temp___is_init_455 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_459)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq5 a b) (oeq1 a b)) :pattern ((user_eq5 a b)) )))

(define-fun capacity1 ((container us_rep1)) Int (ite (= (distinct 0 0) true)
                                                (to_rep2
                                                (rec__names__entry_tables__vector__capacity
                                                (us_split_discrs3 container)))
                                                2147483647))

(declare-fun capacity__function_guard1 (Int us_rep1) Bool)

(declare-fun length3 (us_rep1) Int)

(declare-fun length__function_guard2 (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length3 container)))
     (and (<= result (capacity1 container)) (dynamic_invariant9 result true
     false true true))) :pattern ((length3 container)) )))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq3 (us_rep4 us_rep4) Bool)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-fun user_eq14 (us_rep4 us_rep4) Bool)

(declare-const dummy14 us_rep4)

(declare-datatypes ((sequence__ref1 0))
(((sequence__refqtmk1 (sequence__content1 us_rep4)))))
(define-fun sequence__ref_sequence__content__2__projection ((a sequence__ref1)) us_rep4 
  (sequence__content1 a))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun model2 (us_rep1) us_rep4)

(declare-fun model__function_guard1 (us_rep4 us_rep1) Bool)

(define-fun last1 ((container us_rep4)) Int (+ 0 (length4 container)))

(declare-fun last__function_guard1 (Int us_rep4) Bool)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 us_rep2)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref1)) us_rep2 
  (element_type__content1 a))

(declare-fun get1 (us_rep4 Int) us_rep2)

(declare-fun get__function_guard1 (us_rep2 us_rep4 Int) Bool)

(define-fun oeq3 ((left us_rep4)
  (right us_rep4)) Bool (and (= (length4 left) (length4 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last1 left)))
                                                                (= (bool_eq1
                                                                   (get1 left
                                                                   n)
                                                                   (get1
                                                                   right n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq14 a b) (oeq3 a b)) :pattern ((user_eq14 a b)) )))

(define-fun default_initial_assumption3 ((temp___expr_497 us_rep4)
  (temp___skip_top_level_498 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_498 true))
                                         (= (length4 temp___expr_497) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length4 (model2 container)) (length3 container)) :pattern ((model2
                                                                    container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq1 left right) true)
     (= (oeq3 (model2 left) (model2 right)) true)) :pattern ((oeq1 left
                                                             right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true) (= (length3 container) 0)) :pattern (
  (is_empty1 container)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i))
  (<= (extended_indexqtint1 i) 2147483647))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (extended_index1 extended_index1) Bool)

(declare-const dummy15 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__4__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant10 ((temp___expr_489 Int)
  (temp___is_init_485 Bool) (temp___skip_constant_486 Bool)
  (temp___do_toplevel_487 Bool)
  (temp___do_typ_inv_488 Bool)) Bool (=>
                                     (or (= temp___is_init_485 true)
                                     (<= 0 2147483647)) (in_range11
                                     temp___expr_489)))

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length4 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant5 result true false
     true true))) :pattern ((length4 container)) )))

;; get__post_axiom
  (assert true)

(assert
;; defqtvc
 ;; File "names.ads", line 1, characters 0-0
  (not
  (forall ((hash_table (Array (_ BitVec 32) name_id)))
  (=> (= hash_table (names__hash_table__aggregate_def 0)) (in_range1 1024)))))
(check-sat)
(exit)
