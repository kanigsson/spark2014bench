(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 8))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-const dummy1 index)

(declare-datatypes ((index__ref 0))
(((index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(declare-fun temp_____aggregate_def_295 ((Array Int integer) Int Int Int Int
  Int) (Array Int integer))

(declare-fun temp_____aggregate_def_304 (Int) (Array Int integer))

(declare-fun temp_____aggregate_def_455 (Int) (Array Int integer))

(declare-fun temp_____aggregate_def_459 ((Array Int integer) Int Int Int Int
  Int) (Array Int integer))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

;; def_axiom
  (assert
  (forall ((temp___457 Int))
  (=> (dynamic_invariant temp___457 true true true true)
  (forall ((temp___458 Int))
  (= (select (temp_____aggregate_def_455 temp___457) temp___458) rliteral)))))

(define-fun dynamic_invariant1 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 1 8)) (in_range1 temp___expr_166)))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 3))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 2))

;; def_axiom
  (assert
  (forall ((temp___461 (Array Int integer)))
  (forall ((temp___462 Int) (temp___463 Int) (temp___464 Int)
  (temp___465 Int) (temp___466 Int))
  (let ((temp___460 (temp_____aggregate_def_459 temp___461 temp___462
                    temp___463 temp___464 temp___465 temp___466)))
  (=>
  (and (dynamic_invariant1 temp___462 true true true true)
  (and
  (and (dynamic_invariant temp___463 true true true true) (dynamic_invariant1
  temp___464 true true true true))
  (and (dynamic_invariant1 temp___465 true true true true) (dynamic_invariant
  temp___466 true true true true))))
  (forall ((temp___467 Int))
  (ite (and (<= temp___464 temp___467) (<= temp___467 temp___465))
  (= (select temp___460 temp___467) rliteral1)
  (ite (= temp___467 temp___462) (= (select temp___460 temp___467) rliteral2)
  (= (select temp___460 temp___467) (select temp___461 temp___467))))))))))

;; def_axiom
  (assert
  (forall ((temp___306 Int))
  (=> (dynamic_invariant temp___306 true true true true)
  (forall ((temp___307 Int))
  (= (select (temp_____aggregate_def_304 temp___306) temp___307) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___297 (Array Int integer)))
  (forall ((temp___298 Int) (temp___299 Int) (temp___300 Int)
  (temp___301 Int) (temp___302 Int))
  (let ((temp___296 (temp_____aggregate_def_295 temp___297 temp___298
                    temp___299 temp___300 temp___301 temp___302)))
  (=>
  (and (dynamic_invariant1 temp___298 true true true true)
  (and
  (and (dynamic_invariant temp___299 true true true true) (dynamic_invariant1
  temp___300 true true true true))
  (and (dynamic_invariant1 temp___301 true true true true) (dynamic_invariant
  temp___302 true true true true))))
  (forall ((temp___303 Int))
  (ite (and (<= temp___300 temp___303) (<= temp___303 temp___301))
  (= (select temp___296 temp___303) rliteral1)
  (ite (= temp___303 temp___298) (= (select temp___296 temp___303) rliteral2)
  (= (select temp___296 temp___303) (select temp___297 temp___303))))))))))

(assert
;; defqtvc
 ;; File "arrays.ads", line 56, characters 0-0
  (not
  (forall ((a (Array Int integer)) (a1 (Array Int integer)))
  (=> (= a (temp_____aggregate_def_455 1))
  (=> (= a1 (temp_____aggregate_def_459 a 3 2 4 5 3))
  (= (bool_eq a1 1 8
     (temp_____aggregate_def_295 (temp_____aggregate_def_304 1) 3 2 4 5 3) 1
     8) true))))))
(check-sat)
(exit)
