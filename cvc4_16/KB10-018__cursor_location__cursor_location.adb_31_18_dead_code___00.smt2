;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-fun change_side (Int) Int)

(declare-fun change_side__function_guard (Int Int) Bool)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (ite (select a temp___idx_154) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_154)) 1 0)))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (ite (select a temp___idx_154) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_154)) 1 0)))))))))

(declare-fun fulfill_condition (Int (Array Int Bool) (Array Int Bool)) Bool)

(declare-fun fulfill_condition__function_guard (Bool Int (Array Int Bool)
  (Array Int Bool)) Bool)

(declare-sort location 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (location location) Bool)

(declare-const dummy location)

(declare-datatypes ((location__ref 0))
(((location__refqtmk (location__content location)))))
(define-fun location__ref_location__content__projection ((a location__ref)) location 
  (location__content a))

(define-fun dynamic_invariant ((temp___expr_169 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)
  (temp___do_typ_inv_168 Bool)) Bool (=>
                                     (or (= temp___is_init_165 true)
                                     (<= 1 2)) (in_range1 temp___expr_169)))

;; fulfill_condition__post_axiom
  (assert
  (forall ((side Int))
  (forall ((request (Array Int Bool)) (du_available (Array Int Bool)))
  (! (=> (dynamic_invariant side true true true true)
     (and
     (forall ((side1 Int)) (change_side__function_guard (change_side side1)
     side1))
     (=> (fulfill_condition__function_guard
     (fulfill_condition side request du_available) side request du_available)
     (and (= (select du_available side) true)
     (or (= (select request side) true)
     (not (= (select du_available (change_side side)) true))))))) :pattern (
  (fulfill_condition side request du_available)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const request (Array Int Bool))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const du_available (Array Int Bool))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun none_available ((Array Int Bool)) Bool)

(declare-fun none_available__function_guard (Bool (Array Int Bool)) Bool)

;; none_available__post_axiom
  (assert
  (forall ((du_available1 (Array Int Bool)))
  (! (=> (none_available__function_guard (none_available du_available1)
     du_available1)
     (and (not (= (select du_available1 1) true))
     (not (= (select du_available1 2) true)))) :pattern ((none_available
                                                         du_available1)) )))

(declare-sort extended_location 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (extended_location extended_location) Bool)

(declare-const dummy1 extended_location)

(declare-datatypes ((extended_location__ref 0))
(((extended_location__refqtmk (extended_location__content extended_location)))))
(define-fun extended_location__ref_extended_location__content__projection ((a extended_location__ref)) extended_location 
  (extended_location__content a))

(define-fun dynamic_invariant1 ((temp___expr_162 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)
  (temp___do_typ_inv_161 Bool)) Bool (=>
                                     (or (= temp___is_init_158 true)
                                     (<= 0 2)) (in_range2 temp___expr_162)))

;; change_side__post_axiom
  (assert
  (forall ((side Int))
  (! (=> (dynamic_invariant side true true true true)
     (let ((result (change_side side)))
     (=> (change_side__function_guard result side) (dynamic_invariant result
     true false true true)))) :pattern ((change_side side)) )))

;; change_side__def_axiom
  (assert
  (forall ((side Int))
  (! (=> (dynamic_invariant side true true true true)
     (= (change_side side) (ite (= side 1) 2 1))) :pattern ((change_side
                                                            side)) )))

(assert
;; defqtvc
 ;; File "cursor_location.ads", line 22, characters 0-0
  (not
  (forall ((current Int))
  (=> (dynamic_invariant1 current true false true true)
  (let ((o du_available))
  (let ((o1 request))
  (let ((o2 (fulfill_condition 1 o1 o)))
  (=> (change_side__function_guard (change_side 1) 1)
  (=>
  (and (fulfill_condition__function_guard o2 1 o1 o)
  (and (= (select o 1) true)
  (or (= (select o1 1) true) (not (= (select o (change_side 1)) true)))))
  (forall ((spark__branch Bool))
  (=> (= spark__branch o2)
  (=> (not (= spark__branch true))
  (let ((o3 du_available))
  (let ((o4 request))
  (let ((o5 (fulfill_condition 2 o4 o3)))
  (=> (change_side__function_guard (change_side 2) 2)
  (=>
  (and (fulfill_condition__function_guard o5 2 o4 o3)
  (and (= (select o3 2) true)
  (or (= (select o4 2) true) (not (= (select o3 (change_side 2)) true)))))
  (forall ((spark__branch1 Bool))
  (=> (= spark__branch1 o5) (not (= spark__branch1 true)))))))))))))))))))))
(check-sat)
