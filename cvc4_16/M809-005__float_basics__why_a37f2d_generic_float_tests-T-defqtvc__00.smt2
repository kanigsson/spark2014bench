;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float64)))))
(declare-const x Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort ft 0)

(declare-fun user_eq (ft ft) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)

(declare-const dummy ft)

(declare-datatypes ((ft__ref 0))
(((ft__refqtmk (ft__content ft)))))
(define-fun ft__ref_ft__content__2__projection ((a ft__ref)) ft (ft__content
                                                                a))

(declare-fun to_rep (ft) Float64)

(declare-fun of_rep (Float64) ft)

;; inversion_axiom
  (assert
  (forall ((x1 ft)) (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)) )))

;; range_axiom
  (assert
  (forall ((x1 ft)) (! (fp.isFinite64 (to_rep x1)) :pattern ((to_rep x1)) )))

;; coerce_axiom
  (assert
  (forall ((x1 Float64))
  (! (=> (fp.isFinite64 x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep
                                                                   (of_rep
                                                                   x1))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int ft))))))
(declare-fun slide ((Array Int ft) Int Int) (Array Int ft))

;; slide_eq
  (assert
  (forall ((a (Array Int ft)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int ft)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int ft)) (a__first Int) (a__last Int)
  (b (Array Int ft)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_175 Int))
                           (=>
                           (and (<= a__first temp___idx_175)
                           (<= temp___idx_175 a__last))
                           (fp.eq (to_rep (select a temp___idx_175)) 
                           (to_rep
                           (select b (+ (- b__first a__first) temp___idx_175)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int ft)) (b (Array Int ft)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_175 Int))
  (=> (and (<= a__first temp___idx_175) (<= temp___idx_175 a__last))
  (fp.eq (to_rep (select a temp___idx_175)) (to_rep
                                            (select b (+ (- b__first a__first) temp___idx_175)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant ((temp___expr_214 Float64)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)
  (temp___do_typ_inv_213 Bool)) Bool (=>
                                     (or (= temp___is_init_210 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_214)))

(declare-fun foo__double_tests__test_array_1__a__aggregate_def (Float64) (Array Int ft))

;; def_axiom
  (assert
  (forall ((temp___303 Float64))
  (=> (dynamic_invariant temp___303 true true true true)
  (forall ((temp___304 Int))
  (= (to_rep
     (select (foo__double_tests__test_array_1__a__aggregate_def temp___303) temp___304)) temp___303)))))

(assert
;; defqtvc
 ;; File "generic_float_tests.adb", line 419, characters 0-0
  (not
  (forall ((y Float64) (a (Array Int ft)) (o ft) (a1 (Array Int ft)) (o1 ft)
  (a2 (Array Int ft)) (o2 Float64) (y1 Float64))
  (=> (dynamic_invariant x true false true true)
  (=> (dynamic_invariant y false false true true)
  (=>
  (= a (foo__double_tests__test_array_1__a__aggregate_def
       (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
  (=> (= (to_rep o) x)
  (=> (= a1 (store a 8 o))
  (=>
  (= (to_rep o1) (fp #b0 #b10000000000 #b1000000000000000000000000000000000000000000000000000))
  (=> (= a2 (store a1 5 o1))
  (=> (= (to_rep (select a2 8)) o2) (=> (= y1 o2) (fp.eq x y1)))))))))))))
(check-sat)
