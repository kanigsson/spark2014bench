;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (rec__early_exits__int_acc__is_null_pointer Bool)(rec__early_exits__int_acc__pointer_address Int)(rec__early_exits__int_acc__pointer_value integer)))))
(define-fun us_rep_rec__early_exits__int_acc__is_null_pointer__projection ((a us_rep)) Bool 
  (rec__early_exits__int_acc__is_null_pointer a))

(define-fun us_rep_rec__early_exits__int_acc__pointer_address__projection ((a us_rep)) Int 
  (rec__early_exits__int_acc__pointer_address a))

(define-fun us_rep_rec__early_exits__int_acc__pointer_value__projection ((a us_rep)) integer 
  (rec__early_exits__int_acc__pointer_value a))

(declare-datatypes ((us_rep__ref 0))
(((us_rep__refqtmk (us_rep__content us_rep)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep 
  (us_rep__content a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__early_exits__int_acc__is_null_pointer a) 
                        (rec__early_exits__int_acc__is_null_pointer b))
                        (=>
                        (not
                        (= (rec__early_exits__int_acc__is_null_pointer a) true))
                        (and
                        (= (rec__early_exits__int_acc__pointer_address a) 
                        (rec__early_exits__int_acc__pointer_address b))
                        (= (rec__early_exits__int_acc__pointer_value a) 
                        (rec__early_exits__int_acc__pointer_value b)))))
                   true false))

(define-fun rec__early_exits__int_acc__pointer_value__pred ((a us_rep)) Bool 
  (not (= (rec__early_exits__int_acc__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
  (assert
  (= (rec__early_exits__int_acc__is_null_pointer us_null_pointer) true))

(declare-const dummy1 us_rep)

(declare-datatypes ((int_acc__ref 0))
(((int_acc__refqtmk (int_acc__content us_rep)))))
(define-fun int_acc__ref_int_acc__content__projection ((a int_acc__ref)) us_rep 
  (int_acc__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__early_exits__two_acc__f us_rep)(rec__early_exits__two_acc__g us_rep)))))
(define-fun us_split_fields_rec__early_exits__two_acc__f__projection ((a us_split_fields)) us_rep 
  (rec__early_exits__two_acc__f a))

(define-fun us_split_fields_rec__early_exits__two_acc__g__projection ((a us_split_fields)) us_rep 
  (rec__early_exits__two_acc__g a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq
                            (rec__early_exits__two_acc__f
                            (us_split_fields1 a))
                            (rec__early_exits__two_acc__f
                            (us_split_fields1 b))) true)
                         (= (bool_eq
                            (rec__early_exits__two_acc__g
                            (us_split_fields1 a))
                            (rec__early_exits__two_acc__g
                            (us_split_fields1 b))) true))
                    true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const early_exits__two_acc__f__first__bit Int)

(declare-const early_exits__two_acc__f__last__bit Int)

(declare-const early_exits__two_acc__f__position Int)

;; early_exits__two_acc__f__first__bit_axiom
  (assert (<= 0 early_exits__two_acc__f__first__bit))

;; early_exits__two_acc__f__last__bit_axiom
  (assert
  (< early_exits__two_acc__f__first__bit early_exits__two_acc__f__last__bit))

;; early_exits__two_acc__f__position_axiom
  (assert (<= 0 early_exits__two_acc__f__position))

(declare-const early_exits__two_acc__g__first__bit Int)

(declare-const early_exits__two_acc__g__last__bit Int)

(declare-const early_exits__two_acc__g__position Int)

;; early_exits__two_acc__g__first__bit_axiom
  (assert (<= 0 early_exits__two_acc__g__first__bit))

;; early_exits__two_acc__g__last__bit_axiom
  (assert
  (< early_exits__two_acc__g__first__bit early_exits__two_acc__g__last__bit))

;; early_exits__two_acc__g__position_axiom
  (assert (<= 0 early_exits__two_acc__g__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((two_acc__ref 0))
(((two_acc__refqtmk (two_acc__content us_rep1)))))
(define-fun two_acc__ref_two_acc__content__projection ((a two_acc__ref)) us_rep1 
  (two_acc__content a))

(define-fun dynamic_invariant ((temp___expr_186 us_rep1)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (and
                                     (not
                                     (= (rec__early_exits__int_acc__is_null_pointer
                                        (rec__early_exits__two_acc__f
                                        (us_split_fields1 temp___expr_186))) true))
                                     (not
                                     (= (rec__early_exits__int_acc__is_null_pointer
                                        (rec__early_exits__two_acc__g
                                        (us_split_fields1 temp___expr_186))) true))))

(define-fun default_initial_assumption ((temp___expr_187 us_rep1)
  (temp___skip_top_level_188 Bool)) Bool (and
                                         (= (rec__early_exits__int_acc__is_null_pointer
                                            (rec__early_exits__two_acc__f
                                            (us_split_fields1
                                            temp___expr_187))) true)
                                         (= (rec__early_exits__int_acc__is_null_pointer
                                            (rec__early_exits__two_acc__g
                                            (us_split_fields1
                                            temp___expr_187))) true)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const dummy3 us_rep)

(declare-datatypes ((t8b__ref 0))
(((t8b__refqtmk (t8b__content us_rep)))))
(define-fun t8b__ref_t8b__content__projection ((a t8b__ref)) us_rep (t8b__content
                                                                    a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort us_pledge_ty 0)

(declare-datatypes ((us_pledge_ty__ref 0))
(((us_pledge_ty__refqtmk (us_pledge_ty__content us_pledge_ty)))))
(declare-fun us_pledge_get (us_pledge_ty us_rep1 us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((t9b__ref 0))
(((t9b__refqtmk (t9b__content us_rep)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) us_rep (t9b__content
                                                                    a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort us_pledge_ty1 0)

(declare-datatypes ((us_pledge_ty__ref1 0))
(((us_pledge_ty__refqtmk1 (us_pledge_ty__content1 us_pledge_ty1)))))
(declare-fun us_pledge_get1 (us_pledge_ty1 us_rep1 us_rep) Bool)

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_179 us_rep)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (not
                                     (= (rec__early_exits__int_acc__is_null_pointer
                                        temp___expr_179) true)))

(define-fun default_initial_assumption1 ((temp___expr_180 us_rep)
  (temp___skip_top_level_181 Bool)) Bool (= (rec__early_exits__int_acc__is_null_pointer
                                            temp___expr_180) true))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

(assert
;; defqtvc
 ;; File "early_exits.adb", line 34, characters 0-0
  (not
  (forall ((x__split_fields us_split_fields))
  (=> (dynamic_invariant (us_repqtmk1 x__split_fields) true false true true)
  (let ((usf (to_rep
             (rec__early_exits__int_acc__pointer_value
             (rec__early_exits__two_acc__f x__split_fields)))))
  (forall ((x__split_fields1 us_split_fields))
  (=>
  (let ((early_exits__p2__B_4__y__assume (rec__early_exits__two_acc__f
                                         x__split_fields)))
  (exists ((usf1 us_pledge_ty))
  (and
  (forall ((temp___borrowed_252 us_rep1))
  (forall ((temp___brower_250 us_rep))
  (! (= (= (us_pledge_get usf1 temp___borrowed_252 temp___brower_250) true)
     (= (rec__early_exits__two_acc__f (us_split_fields1 temp___borrowed_252)) temp___brower_250)) :pattern (
  (us_pledge_get usf1 temp___borrowed_252 temp___brower_250)) )))
  (exists ((early_exits__p2__B_4__y__pledge us_pledge_ty))
  (and (= early_exits__p2__B_4__y__pledge usf1)
  (exists ((y__pointer_value integer))
  (and
  (= y__pointer_value (rec__early_exits__int_acc__pointer_value
                      early_exits__p2__B_4__y__assume))
  (exists ((y__pointer_address Int))
  (and
  (= y__pointer_address (rec__early_exits__int_acc__pointer_address
                        early_exits__p2__B_4__y__assume))
  (exists ((y__is_null_pointer Bool))
  (and
  (= y__is_null_pointer (rec__early_exits__int_acc__is_null_pointer
                        early_exits__p2__B_4__y__assume))
  (exists ((o Int))
  (and (= (to_rep y__pointer_value) o)
  (exists ((o1 integer))
  (and (= (to_rep o1) (div1 o 2))
  (exists ((y__pointer_value1 integer))
  (and (= y__pointer_value1 o1)
  (let ((early_exits__p2__B_4__B_5__z__assume (rec__early_exits__two_acc__g
                                              x__split_fields)))
  (exists ((usf2 us_pledge_ty1))
  (and
  (forall ((temp___borrowed_239 us_rep1))
  (forall ((temp___brower_237 us_rep))
  (! (= (= (us_pledge_get1 usf2 temp___borrowed_239 temp___brower_237) true)
     (= (rec__early_exits__two_acc__g (us_split_fields1 temp___borrowed_239)) temp___brower_237)) :pattern (
  (us_pledge_get1 usf2 temp___borrowed_239 temp___brower_237)) )))
  (exists ((early_exits__p2__B_4__B_5__z__pledge us_pledge_ty1))
  (and (= early_exits__p2__B_4__B_5__z__pledge usf2)
  (exists ((z__pointer_value integer))
  (and
  (= z__pointer_value (rec__early_exits__int_acc__pointer_value
                      early_exits__p2__B_4__B_5__z__assume))
  (exists ((z__pointer_address Int))
  (and
  (= z__pointer_address (rec__early_exits__int_acc__pointer_address
                        early_exits__p2__B_4__B_5__z__assume))
  (exists ((z__is_null_pointer Bool))
  (and
  (= z__is_null_pointer (rec__early_exits__int_acc__is_null_pointer
                        early_exits__p2__B_4__B_5__z__assume))
  (exists ((o2 Int))
  (and (= (to_rep y__pointer_value1) o2)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o2 0) true false))
  (ite (= spark__branch true)
  (exists ((z__pointer_value1 integer))
  (and (= z__pointer_value1 rliteral)
  (exists ((usf3 us_split_fields))
  (and
  (and
  (= (us_pledge_get1 early_exits__p2__B_4__B_5__z__pledge (us_repqtmk1 usf3)
     (us_repqtmk z__is_null_pointer z__pointer_address z__pointer_value1)) true)
  (= (rec__early_exits__int_acc__is_null_pointer
     (rec__early_exits__two_acc__g x__split_fields)) (rec__early_exits__int_acc__is_null_pointer
                                                     (rec__early_exits__two_acc__g
                                                     usf3))))
  (exists ((x__split_fields2 us_split_fields))
  (and
  (= x__split_fields2 (us_split_fieldsqtmk
                      (rec__early_exits__two_acc__f x__split_fields)
                      (rec__early_exits__two_acc__g usf3)))
  (exists ((usf4 us_split_fields))
  (and
  (and
  (= (us_pledge_get early_exits__p2__B_4__y__pledge (us_repqtmk1 usf4)
     (us_repqtmk y__is_null_pointer y__pointer_address y__pointer_value1)) true)
  (= (rec__early_exits__int_acc__is_null_pointer
     (rec__early_exits__two_acc__f x__split_fields2)) (rec__early_exits__int_acc__is_null_pointer
                                                      (rec__early_exits__two_acc__f
                                                      usf4))))
  (= x__split_fields1 (us_split_fieldsqtmk
                      (rec__early_exits__two_acc__f usf4)
                      (rec__early_exits__two_acc__g x__split_fields2)))))))))))
  (exists ((usf3 us_split_fields))
  (and
  (and
  (= (us_pledge_get1 early_exits__p2__B_4__B_5__z__pledge (us_repqtmk1 usf3)
     (us_repqtmk z__is_null_pointer z__pointer_address z__pointer_value)) true)
  (= (rec__early_exits__int_acc__is_null_pointer
     (rec__early_exits__two_acc__g x__split_fields)) (rec__early_exits__int_acc__is_null_pointer
                                                     (rec__early_exits__two_acc__g
                                                     usf3))))
  (exists ((x__split_fields2 us_split_fields))
  (and
  (= x__split_fields2 (us_split_fieldsqtmk
                      (rec__early_exits__two_acc__f x__split_fields)
                      (rec__early_exits__two_acc__g usf3)))
  (exists ((o3 Int))
  (and
  (= (to_rep
     (rec__early_exits__int_acc__pointer_value
     (rec__early_exits__two_acc__g x__split_fields2))) o3)
  (exists ((o4 integer))
  (and (= (to_rep o4) o3)
  (exists ((y__pointer_value2 integer))
  (and (= y__pointer_value2 o4)
  (exists ((o5 Int))
  (and (= (to_rep y__pointer_value2) o5)
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (< o5 0) true false))
  (exists ((usf4 us_split_fields))
  (and
  (and
  (= (us_pledge_get early_exits__p2__B_4__y__pledge (us_repqtmk1 usf4)
     (us_repqtmk y__is_null_pointer y__pointer_address y__pointer_value2)) true)
  (= (rec__early_exits__int_acc__is_null_pointer
     (rec__early_exits__two_acc__f x__split_fields2)) (rec__early_exits__int_acc__is_null_pointer
                                                      (rec__early_exits__two_acc__f
                                                      usf4))))
  (= x__split_fields1 (us_split_fieldsqtmk
                      (rec__early_exits__two_acc__f usf4)
                      (rec__early_exits__two_acc__g x__split_fields2))))))))))))))))))))))))))))))))))))))))))))))))))))
  (forall ((o Bool))
  (=>
  (ite (= (and (ite (<= (- 1) usf) true false) (ite (<= usf 1) true false)) true)
  (exists ((o1 Int))
  (and
  (= (to_rep
     (rec__early_exits__int_acc__pointer_value
     (rec__early_exits__two_acc__f x__split_fields1))) o1)
  (= o (ite (= o1 0) true false))))
  (exists ((o1 Int))
  (and
  (= (to_rep
     (rec__early_exits__int_acc__pointer_value
     (rec__early_exits__two_acc__f x__split_fields1))) o1)
  (= o (ite (= o1 (to_rep
                  (rec__early_exits__int_acc__pointer_value
                  (rec__early_exits__two_acc__g x__split_fields))))
       true false)))))
  (rec__early_exits__int_acc__pointer_value__pred
  (rec__early_exits__two_acc__g x__split_fields1)))))))))))
(check-sat)
