(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const first Int)

(declare-const last Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((my_index__ref 0))
(((my_index__refqtmk (my_index__content integer)))))
(define-fun my_index__ref_my_index__content__projection ((a my_index__ref)) integer 
  (my_index__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first1 Int))
  (! (= (slide a first1 first1) a) :pattern ((slide a first1 first1)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep (select a temp___idx_157)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep (select a temp___idx_157)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-sort t 0)

(declare-fun first1 (t) integer)

(declare-fun last1 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first1 (mk f l))) f) (= (to_rep (last1 (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property range_first range_last low)
                   (dynamic_property range_first range_last high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first2 ((a us_t)) Int (to_rep (first1 (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep (last1 (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first2 a) (last2 a))
                                  (+ (- (last2 a) (first2 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first1 (rt x)))
                 (to_rep (last1 (rt x))) (elts y) (to_rep (first1 (rt y)))
                 (to_rep (last1 (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ((my_array__ref 0))
(((my_array__refqtmk (my_array__content us_t)))))
(define-fun my_array__ref_my_array__content__projection ((a my_array__ref)) us_t 
  (my_array__content a))

(declare-fun ind_prop (us_t Int Int) Bool)

(declare-fun ind_prop__function_guard (Bool us_t Int Int) Bool)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-const fst Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const lst Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= first last)) (dynamic_property 
                                     first last temp___expr_171)))

;; first__def_axiom
  (assert (= first fst))

;; last__def_axiom
  (assert (= last lst))

(define-fun dynamic_invariant2 ((temp___expr_178 us_t)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (not (= temp___skip_constant_175 true))
                                     (dynamic_property1 first last
                                     (first2 temp___expr_178)
                                     (last2 temp___expr_178))))

;; ind_prop__post_axiom
  (assert true)

(declare-fun final_prop (us_t Int) Bool)

(declare-fun final_prop__function_guard (Bool us_t Int) Bool)

;; final_prop__post_axiom
  (assert true)

(declare-fun f (Int Int) Int)

(declare-fun f__function_guard (Int Int Int) Bool)

;; f__post_axiom
  (assert
  (forall ((x Int) (i Int))
  (! (=>
     (and (dynamic_invariant x true true true true) (dynamic_invariant i true
     true true true))
     (let ((result (f x i)))
     (=> (f__function_guard result x i) (dynamic_invariant result true false
     true true)))) :pattern ((f x i)) )))

(declare-datatypes ((array_type__ref 0))
(((array_type__refqtmk (array_type__content us_t)))))
(define-fun array_type__ref_array_type__content__4__projection ((a array_type__ref)) us_t 
  (array_type__content a))

(declare-const a us_t)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const init Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const first3 Int)

(declare-const last3 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content integer)))))
(define-fun index_type__ref_index_type__content__4__projection ((a1 index_type__ref)) integer 
  (index_type__content a1))

(declare-sort element_out 0)

(declare-fun element_outqtint (element_out) Int)

;; element_out'axiom
  (assert
  (forall ((i element_out))
  (and (<= (- 2147483648) (element_outqtint i))
  (<= (element_outqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (element_out element_out) Bool)

(declare-const dummy4 element_out)

(declare-datatypes ((element_out__ref 0))
(((element_out__refqtmk (element_out__content element_out)))))
(define-fun element_out__ref_element_out__content__4__projection ((a1 element_out__ref)) element_out 
  (element_out__content a1))

(define-fun to_rep1 ((x element_out)) Int (element_outqtint x))

(declare-fun of_rep1 (Int) element_out)

;; inversion_axiom
  (assert
  (forall ((x element_out))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x element_out)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int element_out))))))
(declare-fun slide1 ((Array Int element_out) Int
  Int) (Array Int element_out))

;; slide_eq
  (assert
  (forall ((a1 (Array Int element_out)))
  (forall ((first4 Int))
  (! (= (slide1 a1 first4 first4) a1) :pattern ((slide1 a1 first4 first4)) ))))

;; slide_def
  (assert
  (forall ((a1 (Array Int element_out)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a1 old_first new_first) i) (select a1 (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a1 old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a1 (Array Int element_out)) (a__first Int)
  (a__last Int) (b (Array Int element_out)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (to_rep1 (select a1 temp___idx_164)) (to_rep1
                                                                   (select b (+ (- b__first a__first) temp___idx_164)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a1 (Array Int element_out)) (b (Array Int element_out)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a1 a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (to_rep1 (select a1 temp___idx_164)) (to_rep1
                                          (select b (+ (- b__first a__first) temp___idx_164)))))))))))

(declare-sort t1 0)

(declare-fun first4 (t1) integer)

(declare-fun last4 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f1 Int) (l Int))
  (! (=> (in_range1 f1)
     (=> (in_range1 l)
     (and (= (to_rep (first4 (mk1 f1 l))) f1)
     (= (to_rep (last4 (mk1 f1 l))) l)))) :pattern ((mk1 f1 l)) )))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property2 range_first range_last low)
                   (dynamic_property2 range_first range_last high))))))

(declare-datatypes ((us_t1 0))
(((us_tqtmk1 (elts1 (Array Int element_out))(rt1 t1)))))
(define-fun to_array1 ((a1 us_t1)) (Array Int element_out) (elts1 a1))

(define-fun of_array1 ((a1 (Array Int element_out)) (f1 Int)
  (l Int)) us_t1 (us_tqtmk1 a1 (mk1 f1 l)))

(define-fun first5 ((a1 us_t1)) Int (to_rep (first4 (rt1 a1))))

(define-fun last5 ((a1 us_t1)) Int (to_rep (last4 (rt1 a1))))

(define-fun length1 ((a1 us_t1)) Int (ite (<= (first5 a1) (last5 a1))
                                     (+ (- (last5 a1) (first5 a1)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first4 (rt1 x)))
                  (to_rep (last4 (rt1 x))) (elts1 y)
                  (to_rep (first4 (rt1 y))) (to_rep (last4 (rt1 y)))))

(declare-fun user_eq5 (us_t1 us_t1) Bool)

(declare-const dummy5 us_t1)

(declare-datatypes ((acc_array__ref 0))
(((acc_array__refqtmk (acc_array__content us_t1)))))
(define-fun acc_array__ref_acc_array__content__2__projection ((a1 acc_array__ref)) us_t1 
  (acc_array__content a1))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r__first integer)

(declare-const r__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant3 ((temp___expr_377 Int)
  (temp___is_init_373 Bool) (temp___skip_constant_374 Bool)
  (temp___do_toplevel_375 Bool)
  (temp___do_typ_inv_376 Bool)) Bool (=>
                                     (or (= temp___is_init_373 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_377)))

(declare-datatypes ((trS__ref 0))
(((trS__refqtmk (trS__content us_t1)))))
(define-fun trS__ref_trS__content__2__projection ((a1 trS__ref)) us_t1 
  (trS__content a1))

(declare-datatypes ((t47s__ref 0))
(((t47s__refqtmk (t47s__content us_t1)))))
(define-fun t47s__ref_t47s__content__projection ((a1 t47s__ref)) us_t1 
  (t47s__content a1))

(define-fun dynamic_property4 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t48s__ref 0))
(((t48s__refqtmk (t48s__content integer)))))
(define-fun t48s__ref_t48s__content__projection ((a1 t48s__ref)) integer 
  (t48s__content a1))

(define-fun dynamic_invariant4 ((temp___expr_371 us_t)
  (temp___is_init_367 Bool) (temp___skip_constant_368 Bool)
  (temp___do_toplevel_369 Bool)
  (temp___do_typ_inv_370 Bool)) Bool (=>
                                     (not (= temp___skip_constant_368 true))
                                     (dynamic_property1 first last
                                     (first2 temp___expr_371)
                                     (last2 temp___expr_371))))

(declare-fun test_higher_order__my_fold_left__acc__fold__R45s__r__aggregate_def (Int
  Int Int) us_t1)

(declare-fun id (Int) Int)

(declare-fun id__function_guard (Int Int) Bool)

;; id__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (id x)))
     (=> (id__function_guard result x) (dynamic_invariant result true false
     true true)))) :pattern ((id x)) )))

;; fst__def_axiom
  (assert (and (id__function_guard (id 0) 0) (= fst (id 0))))

;; lst__def_axiom
  (assert (and (id__function_guard (id 100) 100) (= lst (id 100))))

(define-fun dynamic_invariant5 ((temp___expr_392 us_t1)
  (temp___is_init_388 Bool) (temp___skip_constant_389 Bool)
  (temp___do_toplevel_390 Bool)
  (temp___do_typ_inv_391 Bool)) Bool (=>
                                     (not (= temp___skip_constant_389 true))
                                     (dynamic_property3 first3 last3
                                     (first5 temp___expr_392)
                                     (last5 temp___expr_392))))

(define-fun dynamic_invariant6 ((temp___expr_357 Int)
  (temp___is_init_353 Bool) (temp___skip_constant_354 Bool)
  (temp___do_toplevel_355 Bool)
  (temp___do_typ_inv_356 Bool)) Bool (=>
                                     (or (= temp___is_init_353 true)
                                     (<= first3 last3)) (dynamic_property2
                                     first3 last3 temp___expr_357)))

;; first__def_axiom
  (assert (= first3 fst))

;; last__def_axiom
  (assert (= last3 lst))

;; def_axiom
  (assert
  (forall ((temp___558 Int) (temp___559 Int) (temp___560 Int))
  (let ((temp___557 (test_higher_order__my_fold_left__acc__fold__R45s__r__aggregate_def
                    temp___558 temp___559 temp___560)))
  (=> (dynamic_invariant3 temp___558 true true true true)
  (and
  (=> (dynamic_property3 first3 last3 temp___559 temp___560)
  (and (= (first5 temp___557) temp___559) (= (last5 temp___557) temp___560)))
  (forall ((temp___561 Int))
  (= (to_rep1 (select (to_array1 temp___557) temp___561)) temp___558)))))))

(define-fun dynamic_invariant7 ((temp___expr_424 us_t1)
  (temp___is_init_420 Bool) (temp___skip_constant_421 Bool)
  (temp___do_toplevel_422 Bool)
  (temp___do_typ_inv_423 Bool)) Bool (=>
                                     (not (= temp___skip_constant_421 true))
                                     (and (dynamic_property3 (first2 a)
                                     (last2 a) (first5 temp___expr_424)
                                     (last5 temp___expr_424))
                                     (and
                                     (= (first5 temp___expr_424) (first2 a))
                                     (= (last5 temp___expr_424) (last2 a))))))

(define-fun default_initial_assumption ((temp___expr_426 us_t1)
  (temp___skip_top_level_427 Bool)) Bool (and
                                         (= (first5 temp___expr_426) 
                                         (first2 a))
                                         (= (last5 temp___expr_426) (last2 a))))

(assert
;; defqtvc
 ;; File "spark-higher_order-fold.ads", line 69, characters 0-0
  (not
  (forall ((acc Int))
  (=> (dynamic_invariant4 a true false true true)
  (=> (dynamic_invariant3 init true false true true)
  (=> (< 0 (length a))
  (=> (ind_prop__function_guard
  (ind_prop (of_array (to_array a) (first2 a) (last2 a)) init (first2 a))
  (of_array (to_array a) (first2 a) (last2 a)) init (first2 a))
  (=>
  (= (ind_prop (of_array (to_array a) (first2 a) (last2 a)) init (first2 a)) true)
  (=> (= acc init)
  (=> (dynamic_invariant3 acc true false true true)
  (let ((temp___562 (test_higher_order__my_fold_left__acc__fold__R45s__r__aggregate_def
                    init (first2 a) (last2 a))))
  (=> (= (first5 temp___562) (first2 a))
  (=> (= (last5 temp___562) (last2 a))
  (=>
  (ite (<= (first5 temp___562) (last5 temp___562))
  (and (<= (first2 a) (last2 a))
  (= (- (last5 temp___562) (first5 temp___562)) (- (last2 a) (first2 a))))
  (< (last2 a) (first2 a)))
  (let ((test_higher_order__my_fold_left__acc__fold__R45s__r__assume 
  (of_array1 (slide1 (to_array1 temp___562) (first5 temp___562) (first2 a))
  (first2 a) (last2 a))))
  (forall ((r (Array Int element_out)))
  (=>
  (= r (to_array1
       test_higher_order__my_fold_left__acc__fold__R45s__r__assume))
  (=>
  (= (to_rep r__first) (first5
                       test_higher_order__my_fold_left__acc__fold__R45s__r__assume))
  (=>
  (= (to_rep r__last) (last5
                      test_higher_order__my_fold_left__acc__fold__R45s__r__assume))
  (=>
  (and (dynamic_property3 (first2 a) (last2 a) (to_rep r__first)
  (to_rep r__last))
  (and (= (to_rep r__first) (first2 a)) (= (to_rep r__last) (last2 a))))
  (let ((temp___565 (first2 a)))
  (let ((temp___566 (last2 a)))
  (forall ((i Int))
  (=> (= i temp___565)
  (=>
  (= (and (ite (<= temp___565 i) true false) (ite (<= i temp___566) true
                                             false)) true)
  (=>
  (forall ((acc1 Int) (i1 Int)) (ind_prop__function_guard
  (ind_prop (of_array (to_array a) (first2 a) (last2 a)) acc1 i1)
  (of_array (to_array a) (first2 a) (last2 a)) acc1 i1))
  (=> (= (ind_prop (of_array (to_array a) (first2 a) (last2 a)) acc i) true)
  (forall ((o Int))
  (=> (= (to_rep (select (to_array a) i)) o)
  (let ((o1 (f o acc)))
  (=>
  (and (f__function_guard o1 o acc) (dynamic_invariant o1 true false true
  true))
  (forall ((o2 element_out))
  (=> (= (to_rep1 o2) o1)
  (forall ((r1 (Array Int element_out)))
  (=> (= r1 (store r i o2))
  (=>
  (let ((temp___583 (first2 a)))
  (and (dynamic_property first last temp___583)
  (let ((o3 init))
  (let ((o4 (of_array (to_array a) (first2 a) (last2 a))))
  (let ((o5 (ind_prop o4 o3 temp___583)))
  (and (ind_prop__function_guard o5 o4 o3 temp___583)
  (or (not (= o5 true))
  (let ((o6 init))
  (let ((temp___585 (first2 a)))
  (and (and (<= (first2 a) temp___585) (<= temp___585 (last2 a)))
  (exists ((o7 Int))
  (and (= (to_rep (select (to_array a) temp___585)) o7)
  (let ((o8 (f o7 o6)))
  (and
  (and (f__function_guard o8 o7 o6) (dynamic_invariant o8 true false true
  true))
  (let ((temp___584 (first2 a)))
  (and
  (and (<= (to_rep r__first) temp___584) (<= temp___584 (to_rep r__last)))
  (exists ((o9 Int)) (= (to_rep1 (select r1 temp___584)) o9))))))))))))))))))
  (forall ((acc1 Int) (r2 (Array Int element_out)) (i1 Int))
  (=> (ind_prop__function_guard
  (ind_prop (of_array (to_array a) (first2 a) (last2 a)) init (first2 a))
  (of_array (to_array a) (first2 a) (last2 a)) init (first2 a))
  (=> (f__function_guard (f (to_rep (select (to_array a) (first2 a))) init)
  (to_rep (select (to_array a) (first2 a))) init)
  (=>
  (forall ((r3 (Array Int element_out)) (k Int)) (ind_prop__function_guard
  (ind_prop (of_array (to_array a) (first2 a) (last2 a))
  (to_rep1 (select r3 (- k 1))) k)
  (of_array (to_array a) (first2 a) (last2 a)) (to_rep1 (select r3 (- k 1)))
  k))
  (=>
  (forall ((r3 (Array Int element_out)) (k Int)) (f__function_guard
  (f (to_rep (select (to_array a) k)) (to_rep1 (select r3 (- k 1))))
  (to_rep (select (to_array a) k)) (to_rep1 (select r3 (- k 1)))))
  (=>
  (and
  (and
  (= (ind_prop (of_array (to_array a) (first2 a) (last2 a)) init (first2 a)) true)
  (= (to_rep1 (select r2 (first2 a))) (f
                                      (to_rep
                                      (select (to_array a) (first2 a))) 
                                      init)))
  (and
  (forall ((k Int))
  (=> (and (<= (first2 a) k) (<= k i1))
  (=> (< (first2 a) k)
  (and
  (= (ind_prop (of_array (to_array a) (first2 a) (last2 a))
     (to_rep1 (select r2 (- k 1))) k) true)
  (= (to_rep1 (select r2 k)) (f (to_rep (select (to_array a) k))
                             (to_rep1 (select r2 (- k 1)))))))))
  (ite (= i1 (first2 a)) (= acc1 init)
  (= acc1 (to_rep1 (select r2 (- i1 1)))))))
  (=>
  (= (and (ite (and
               (and (dynamic_property4 (first2 a) (last2 a) i1)
               (forall ((temp___571 Int))
               (=>
               (and (<= (to_rep r__first) temp___571)
               (<= temp___571 (to_rep r__last)))
               (=>
               (or (< temp___566 temp___571)
               (or (< temp___571 temp___565) (< i1 temp___571)))
               (= (select r2 temp___571) (select r temp___571))))))
               (dynamic_invariant3 acc1 true true true true))
          true false) (ite (and (<= (first2 a) i1) (<= i1 (last2 a))) true
                      false)) true)
  (=>
  (forall ((acc2 Int) (i2 Int) (o3 us_t)) (f__function_guard
  (f (to_rep (select (to_array o3) i2)) acc2)
  (to_rep (select (to_array o3) i2)) acc2))
  (=>
  (forall ((acc2 Int) (i2 Int) (o3 us_t)) (f__function_guard
  (f (to_rep (select (to_array o3) i2)) acc2)
  (to_rep (select (to_array o3) i2)) acc2))
  (=>
  (forall ((acc2 Int) (i2 Int) (o3 us_t)) (ind_prop__function_guard
  (ind_prop (of_array (to_array o3) (first2 o3) (last2 o3))
  (f (to_rep (select (to_array o3) i2)) acc2) (+ i2 1))
  (of_array (to_array o3) (first2 o3) (last2 o3))
  (f (to_rep (select (to_array o3) i2)) acc2) (+ i2 1)))
  (=>
  (forall ((acc2 Int) (o3 us_t)) (f__function_guard
  (f (to_rep (select (to_array o3) (last2 o3))) acc2)
  (to_rep (select (to_array o3) (last2 o3))) acc2))
  (=>
  (forall ((acc2 Int) (o3 us_t)) (f__function_guard
  (f (to_rep (select (to_array o3) (last2 o3))) acc2)
  (to_rep (select (to_array o3) (last2 o3))) acc2))
  (=>
  (forall ((acc2 Int) (o3 us_t)) (final_prop__function_guard
  (final_prop (of_array (to_array o3) (first2 o3) (last2 o3))
  (f (to_rep (select (to_array o3) (last2 o3))) acc2))
  (of_array (to_array o3) (first2 o3) (last2 o3))
  (f (to_rep (select (to_array o3) (last2 o3))) acc2)))
  (=>
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= i1 (last2 a)) false true))
  (ite (= spark__branch true)
  (and (dynamic_property2 first3 last3 i1)
  (let ((o3 a))
  (= (ind_prop (of_array (to_array o3) (first2 o3) (last2 o3))
     (f (to_rep (select (to_array o3) i1)) acc1) (+ i1 1)) true)))
  (let ((o3 a))
  (= (final_prop (of_array (to_array o3) (first2 o3) (last2 o3))
     (f (to_rep (select (to_array o3) (last2 o3))) acc1)) true)))))
  (forall ((o3 Int))
  (=> (= (to_rep1 (select r2 i1)) o3)
  (forall ((acc2 Int))
  (=> (= acc2 o3)
  (=> (not (= i1 temp___566))
  (forall ((i2 Int))
  (=> (= i2 (+ i1 1))
  (=>
  (forall ((acc3 Int) (i3 Int)) (ind_prop__function_guard
  (ind_prop (of_array (to_array a) (first2 a) (last2 a)) acc3 i3)
  (of_array (to_array a) (first2 a) (last2 a)) acc3 i3))
  (=>
  (= (ind_prop (of_array (to_array a) (first2 a) (last2 a)) acc2 i2) true)
  (forall ((o4 Int))
  (=> (= (to_rep (select (to_array a) i2)) o4)
  (let ((o5 (f o4 acc2)))
  (=>
  (and (f__function_guard o5 o4 acc2) (dynamic_invariant o5 true false true
  true))
  (forall ((o6 element_out))
  (=> (= (to_rep1 o6) o5)
  (forall ((r3 (Array Int element_out)))
  (=> (= r3 (store r2 i2 o6))
  (=>
  (let ((temp___583 (first2 a)))
  (and (dynamic_property first last temp___583)
  (let ((o7 init))
  (let ((o8 (of_array (to_array a) (first2 a) (last2 a))))
  (let ((o9 (ind_prop o8 o7 temp___583)))
  (and (ind_prop__function_guard o9 o8 o7 temp___583)
  (or (not (= o9 true))
  (let ((o10 init))
  (let ((temp___585 (first2 a)))
  (and (and (<= (first2 a) temp___585) (<= temp___585 (last2 a)))
  (exists ((o11 Int))
  (and (= (to_rep (select (to_array a) temp___585)) o11)
  (let ((o12 (f o11 o10)))
  (and
  (and (f__function_guard o12 o11 o10) (dynamic_invariant o12 true false true
  true))
  (let ((temp___584 (first2 a)))
  (and
  (and (<= (to_rep r__first) temp___584) (<= temp___584 (to_rep r__last)))
  (exists ((o13 Int)) (= (to_rep1 (select r3 temp___584)) o13))))))))))))))))))
  (forall ((usf Int))
  (=>
  (= (and (ite (<= (first2 a) usf) true false) (ite (<= usf i2) true false)) true)
  (=> (< (first2 a) usf)
  (=> (dynamic_property first last usf)
  (let ((o7 (- usf 1)))
  (=> (in_range1 o7)
  (=> (and (<= (to_rep r__first) o7) (<= o7 (to_rep r__last)))
  (forall ((o8 Int))
  (=> (= (to_rep1 (select r3 o7)) o8)
  (let ((o9 (of_array (to_array a) (first2 a) (last2 a))))
  (let ((o10 (ind_prop o9 o8 usf)))
  (=> (ind_prop__function_guard o10 o9 o8 usf)
  (=> (= o10 true)
  (let ((o11 (- usf 1)))
  (=> (in_range1 o11)
  (=> (and (<= (to_rep r__first) o11) (<= o11 (to_rep r__last)))
  (forall ((o12 Int))
  (=> (= (to_rep1 (select r3 o11)) o12)
  (=> (and (<= (first2 a) usf) (<= usf (last2 a)))
  (forall ((o13 Int))
  (=> (= (to_rep (select (to_array a) usf)) o13)
  (let ((o14 (f o13 o12)))
  (=>
  (and (f__function_guard o14 o13 o12) (dynamic_invariant o14 true false true
  true)) (<= usf (to_rep r__last)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
