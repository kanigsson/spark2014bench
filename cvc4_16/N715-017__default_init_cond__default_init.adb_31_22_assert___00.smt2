;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__default_init__rec__f natural)))))
(define-fun us_split_fields_rec__default_init__rec__f__projection ((a us_split_fields)) natural 
  (rec__default_init__rec__f a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__default_init__rec__f (us_split_fields1 a))) 
                   (to_rep (rec__default_init__rec__f (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const default_init__rec__f__first__bit Int)

(declare-const default_init__rec__f__last__bit Int)

(declare-const default_init__rec__f__position Int)

;; default_init__rec__f__first__bit_axiom
  (assert (<= 0 default_init__rec__f__first__bit))

;; default_init__rec__f__last__bit_axiom
  (assert
  (< default_init__rec__f__first__bit default_init__rec__f__last__bit))

;; default_init__rec__f__position_axiom
  (assert (<= 0 default_init__rec__f__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((rec____ref 0))
(((rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__projection ((a rec____ref)) us_rep 
  (rec____content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun rec_ok (us_rep) Bool)

(declare-fun rec_ok__function_guard (Bool us_rep) Bool)

;; temp___result_178'def
  (assert
  (forall ((temp___177 us_rep)) (rec_ok__function_guard (rec_ok temp___177)
  temp___177)))

(define-fun default_initial_assumption ((temp___expr_175 us_rep)
  (temp___skip_top_level_176 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__default_init__rec__f
                                            (us_split_fields1
                                            temp___expr_175))) 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_176 true))
                                         (= (rec_ok temp___expr_175) true))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun arr_ok ((Array Int natural)) Bool)

(declare-fun arr_ok__function_guard (Bool (Array Int natural)) Bool)

(declare-sort tarrD1 0)

(declare-fun tarrD1qtint (tarrD1) Int)

;; tarrD1'axiom
  (assert
  (forall ((i tarrD1)) (and (<= 1 (tarrD1qtint i)) (<= (tarrD1qtint i) 3))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (tarrD1 tarrD1) Bool)

(declare-const dummy2 tarrD1)

(declare-datatypes ((tarrD1__ref 0))
(((tarrD1__refqtmk (tarrD1__content tarrD1)))))
(define-fun tarrD1__ref_tarrD1__content__projection ((a tarrD1__ref)) tarrD1 
  (tarrD1__content a))

;; temp___result_189'def
  (assert
  (forall ((temp___188 (Array Int natural))) (arr_ok__function_guard
  (arr_ok temp___188) temp___188)))

(define-fun default_initial_assumption1 ((temp___expr_185 (Array Int natural))
  (temp___skip_top_level_186 Bool)) Bool (and
                                         (forall ((temp___187 Int))
                                         (=>
                                         (and (<= 1 temp___187)
                                         (<= temp___187 3))
                                         (= (to_rep
                                            (select temp___expr_185 temp___187)) 0)))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_186 true))
                                         (= (arr_ok temp___expr_185) true))))

(declare-fun nat_ok (Int) Bool)

(declare-fun nat_ok__function_guard (Bool Int) Bool)

(declare-sort nat 0)

(declare-fun natqtint (nat) Int)

;; nat'axiom
  (assert
  (forall ((i nat)) (and (<= 0 (natqtint i)) (<= (natqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (nat nat) Bool)

(declare-const dummy3 nat)

(declare-datatypes ((nat__ref 0))
(((nat__refqtmk (nat__content nat)))))
(define-fun nat__ref_nat__content__projection ((a nat__ref)) nat (nat__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_194 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)
  (temp___do_typ_inv_193 Bool)) Bool (=>
                                     (or (= temp___is_init_190 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_194)))

;; temp___result_198'def
  (assert
  (forall ((temp___197 Int)) (nat_ok__function_guard (nat_ok temp___197)
  temp___197)))

(define-fun default_initial_assumption2 ((temp___expr_195 Int)
  (temp___skip_top_level_196 Bool)) Bool (and (= temp___expr_195 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_196 true))
                                         (= (nat_ok temp___expr_195) true))))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

;; rec_ok__post_axiom
  (assert true)

;; rec_ok__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (rec_ok x) true)
     (= (to_rep (rec__default_init__rec__f (us_split_fields1 x))) 0)) :pattern (
  (rec_ok x)) )))

;; arr_ok__post_axiom
  (assert true)

;; arr_ok__def_axiom
  (assert
  (forall ((x (Array Int natural)))
  (! (= (= (arr_ok x) true) (= (to_rep (select x 1)) 0)) :pattern ((arr_ok x)) )))

;; nat_ok__post_axiom
  (assert true)

;; nat_ok__def_axiom
  (assert
  (forall ((x Int))
  (! (= (= (nat_ok x) true) (= x 0)) :pattern ((nat_ok x)) )))

(assert
;; defqtvc
 ;; File "default_init.ads", line 36, characters 0-0
  (not
  (forall ((r__split_fields natural) (n Int) (a (Array Int natural)))
  (=> (default_initial_assumption
  (us_repqtmk (us_split_fieldsqtmk r__split_fields)) false)
  (=> (default_initial_assumption2 n false)
  (=> (dynamic_invariant n false false true true)
  (=> (= n 0)
  (=> (default_initial_assumption1 a false)
  (=> (= (to_rep r__split_fields) 0) (= (to_rep (select a 1)) 0))))))))))
(check-sat)
