(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__ext__ us_private)))))
(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((root__ref 0))
(((root__refqtmk (root__content us_rep)))))
(define-fun root__ref_root__content__projection ((a root__ref)) us_rep 
  (root__content a))

(declare-fun get (us_rep Bool) Bool)

(declare-fun get__function_guard (Bool us_rep Bool) Bool)

(declare-fun get1 (Int us_rep Bool) Bool)

(declare-fun get__function_guard1 (Bool Int us_rep Bool) Bool)

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_162 us_rep)
  (temp___skip_top_level_163 Bool)) Bool (= (attr__tag temp___expr_162) 
  us_tag))

;; get__post_axiom
  (assert true)

;; get__post__dispatch_axiom
  (assert true)

;; root_pkg__root__compat_axiom
  (assert
  (forall ((x us_rep))
  (forall ((extension_pkg__body_elaborated Bool))
  (! (=> (get__function_guard1 (get1 us_tag x extension_pkg__body_elaborated)
     us_tag x extension_pkg__body_elaborated)
     (and
     (forall ((x1 us_rep) (extension_pkg__body_elaborated1 Bool))
     (get__function_guard (get x1 extension_pkg__body_elaborated1) x1
     extension_pkg__body_elaborated1))
     (= (ite (get x extension_pkg__body_elaborated) 1 0) (ite (get1 us_tag x
                                                              extension_pkg__body_elaborated) 1 0)))) :pattern (
  (get1 us_tag x extension_pkg__body_elaborated)) ))))

;; get__def_axiom
  (assert
  (forall ((x us_rep))
  (forall ((extension_pkg__body_elaborated Bool))
  (! (= (get x extension_pkg__body_elaborated) true) :pattern ((get x
                                                               extension_pkg__body_elaborated)) ))))

(declare-fun op (us_rep Bool) Bool)

(declare-fun op__function_guard (Bool us_rep Bool) Bool)

(declare-fun op1 (Int us_rep Bool) Bool)

(declare-fun op__function_guard1 (Bool Int us_rep Bool) Bool)

;; op__post_axiom
  (assert
  (forall ((x us_rep) (extension_pkg__body_elaborated Bool))
  (get__function_guard (get x extension_pkg__body_elaborated) x
  extension_pkg__body_elaborated)))

;; op__post__dispatch_axiom
  (assert
  (forall ((x us_rep) (extension_pkg__body_elaborated Bool))
  (get__function_guard1 (get1 (attr__tag x) x extension_pkg__body_elaborated)
  (attr__tag x) x extension_pkg__body_elaborated)))

;; root_pkg__root__compat_axiom
  (assert
  (forall ((x us_rep))
  (forall ((extension_pkg__body_elaborated Bool))
  (! (=> (op__function_guard1 (op1 us_tag x extension_pkg__body_elaborated)
     us_tag x extension_pkg__body_elaborated)
     (and
     (forall ((x1 us_rep) (extension_pkg__body_elaborated1 Bool))
     (op__function_guard (op x1 extension_pkg__body_elaborated1) x1
     extension_pkg__body_elaborated1))
     (= (ite (op x extension_pkg__body_elaborated) 1 0) (ite (op1 us_tag x
                                                             extension_pkg__body_elaborated) 1 0)))) :pattern (
  (op1 us_tag x extension_pkg__body_elaborated)) ))))

(declare-const y us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(assert
;; defqtvc
 ;; File "root_pkg.ads", line 9, characters 0-0
  (not
  (forall ((body_elaborated Bool))
  (=>
  (forall ((body_elaborated1 Bool)) (get__function_guard1
  (get1 (attr__tag y) y body_elaborated1) (attr__tag y) y body_elaborated1))
  (=> (= (get1 (attr__tag y) y body_elaborated) true)
  (let ((o y))
  (=>
  (forall ((body_elaborated1 Bool) (o1 us_rep)) (get__function_guard1
  (get1 (attr__tag o1) o1 body_elaborated1) (attr__tag o1) o1
  body_elaborated1)) (= (get1 (attr__tag o) o body_elaborated) true))))))))
(check-sat)
(exit)
