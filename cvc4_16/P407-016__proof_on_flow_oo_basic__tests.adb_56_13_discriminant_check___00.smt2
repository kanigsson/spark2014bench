(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__tests__test_14__record_with_mutable_discrs__present Bool)))))
(define-fun us_split_discrs_rec__tests__test_14__record_with_mutable_discrs__present__projection ((a us_split_discrs)) Bool 
  (rec__tests__test_14__record_with_mutable_discrs__present a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__tests__test_14__record_with_mutable_discrs__field natural)))))
(define-fun us_split_fields_rec__tests__test_14__record_with_mutable_discrs__field__projection ((a us_split_fields)) natural 
  (rec__tests__test_14__record_with_mutable_discrs__field a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun tests__test_14__record_with_mutable_discrs__field__pred ((a us_rep)) Bool (= (ite 
  (rec__tests__test_14__record_with_mutable_discrs__present
  (us_split_discrs1 a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__tests__test_14__record_with_mutable_discrs__present
                                (us_split_discrs1 a)) 1 0) (ite (rec__tests__test_14__record_with_mutable_discrs__present
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=>
                        (tests__test_14__record_with_mutable_discrs__field__pred
                        a)
                        (= (to_rep
                           (rec__tests__test_14__record_with_mutable_discrs__field
                           (us_split_fields1 a))) (to_rep
                                                  (rec__tests__test_14__record_with_mutable_discrs__field
                                                  (us_split_fields1 b))))))
                   true false))

(define-fun in_range2 ((rec__tests__test_14__record_with_mutable_discrs__present1 Bool)
  (a us_split_discrs)) Bool (= rec__tests__test_14__record_with_mutable_discrs__present1 
  (rec__tests__test_14__record_with_mutable_discrs__present a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const tests__test_14__record_with_mutable_discrs__present__first__bit Int)

(declare-const tests__test_14__record_with_mutable_discrs__present__last__bit Int)

(declare-const tests__test_14__record_with_mutable_discrs__present__position Int)

;; tests__test_14__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__present__first__bit))

;; tests__test_14__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_14__record_with_mutable_discrs__present__first__bit 
  tests__test_14__record_with_mutable_discrs__present__last__bit))

;; tests__test_14__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__present__position))

(declare-const tests__test_14__record_with_mutable_discrs__field__first__bit Int)

(declare-const tests__test_14__record_with_mutable_discrs__field__last__bit Int)

(declare-const tests__test_14__record_with_mutable_discrs__field__position Int)

;; tests__test_14__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__field__first__bit))

;; tests__test_14__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_14__record_with_mutable_discrs__field__first__bit tests__test_14__record_with_mutable_discrs__field__last__bit))

;; tests__test_14__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 tests__test_14__record_with_mutable_discrs__field__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((record_with_mutable_discrs__ref 0))
(((record_with_mutable_discrs__refqtmk
  (record_with_mutable_discrs__content us_rep)))))
(define-fun record_with_mutable_discrs__ref_record_with_mutable_discrs__content__projection ((a record_with_mutable_discrs__ref)) us_rep 
  (record_with_mutable_discrs__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tTaSP1 0)

(declare-fun tTaSP1qtint (tTaSP1) Int)

;; tTaSP1'axiom
  (assert
  (forall ((i tTaSP1)) (and (<= 1 (tTaSP1qtint i)) (<= (tTaSP1qtint i) 1))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tTaSP1 tTaSP1) Bool)

(declare-const dummy2 tTaSP1)

(declare-datatypes ((tTaSP1__ref 0))
(((tTaSP1__refqtmk (tTaSP1__content tTaSP1)))))
(define-fun tTaSP1__ref_tTaSP1__content__projection ((a tTaSP1__ref)) tTaSP1 
  (tTaSP1__content a))

(define-fun default_initial_assumption ((temp___expr_224 (Array Int us_rep))
  (temp___skip_top_level_225 Bool)) Bool (forall ((temp___226 Int))
                                         (=>
                                         (and (<= 1 temp___226)
                                         (<= temp___226 1))
                                         (= (rec__tests__test_14__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (select temp___expr_224 temp___226))) (distinct 0 0)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const tests__test_14__record_with_mutable_discrs__present__first__bit1 Int)

(declare-const tests__test_14__record_with_mutable_discrs__present__last__bit1 Int)

(declare-const tests__test_14__record_with_mutable_discrs__present__position1 Int)

;; tests__test_14__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__present__first__bit1))

;; tests__test_14__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_14__record_with_mutable_discrs__present__first__bit1 
  tests__test_14__record_with_mutable_discrs__present__last__bit1))

;; tests__test_14__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__present__position1))

(declare-const tests__test_14__record_with_mutable_discrs__field__first__bit1 Int)

(declare-const tests__test_14__record_with_mutable_discrs__field__last__bit1 Int)

(declare-const tests__test_14__record_with_mutable_discrs__field__position1 Int)

;; tests__test_14__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__field__first__bit1))

;; tests__test_14__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_14__record_with_mutable_discrs__field__first__bit1 tests__test_14__record_with_mutable_discrs__field__last__bit1))

;; tests__test_14__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__field__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t5b__ref 0))
(((t5b__refqtmk (t5b__content us_rep)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) us_rep (t5b__content
                                                                    a))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const tests__test_14__record_with_mutable_discrs__present__first__bit2 Int)

(declare-const tests__test_14__record_with_mutable_discrs__present__last__bit2 Int)

(declare-const tests__test_14__record_with_mutable_discrs__present__position2 Int)

;; tests__test_14__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__present__first__bit2))

;; tests__test_14__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_14__record_with_mutable_discrs__present__first__bit2 
  tests__test_14__record_with_mutable_discrs__present__last__bit2))

;; tests__test_14__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__present__position2))

(declare-const tests__test_14__record_with_mutable_discrs__field__first__bit2 Int)

(declare-const tests__test_14__record_with_mutable_discrs__field__last__bit2 Int)

(declare-const tests__test_14__record_with_mutable_discrs__field__position2 Int)

;; tests__test_14__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__field__first__bit2))

;; tests__test_14__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_14__record_with_mutable_discrs__field__first__bit2 tests__test_14__record_with_mutable_discrs__field__last__bit2))

;; tests__test_14__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 tests__test_14__record_with_mutable_discrs__field__position2))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((t8b__ref 0))
(((t8b__refqtmk (t8b__content us_rep)))))
(define-fun t8b__ref_t8b__content__projection ((a t8b__ref)) us_rep (t8b__content
                                                                    a))

(declare-fun tests__test_14__a__aggregate_def (us_rep) (Array Int us_rep))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun default_initial_assumption1 ((temp___expr_206 us_rep)
  (temp___skip_top_level_207 Bool)) Bool (= (rec__tests__test_14__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            temp___expr_206)) (distinct 0 0)))

;; def_axiom
  (assert
  (forall ((temp___257 us_rep))
  (= (select (tests__test_14__a__aggregate_def temp___257) 1) temp___257)))

(assert
;; defqtvc
 ;; File "tests.adb", line 42, characters 0-0
  (not true))
(check-sat)
