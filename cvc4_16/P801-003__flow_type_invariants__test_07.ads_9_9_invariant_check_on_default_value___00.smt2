(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__test_07__t__a Bool)(rec__test_07__t__b Bool)))))
(define-fun us_split_fields_rec__test_07__t__a__projection ((a us_split_fields)) Bool 
  (rec__test_07__t__a a))

(define-fun us_split_fields_rec__test_07__t__b__projection ((a us_split_fields)) Bool 
  (rec__test_07__t__b a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__test_07__t__a (us_split_fields1 a)) 1 0) (ite 
                        (rec__test_07__t__a (us_split_fields1 b)) 1 0))
                        (= (ite (rec__test_07__t__b (us_split_fields1 a)) 1 0) (ite 
                        (rec__test_07__t__b (us_split_fields1 b)) 1 0)))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test_07__t__a__first__bit Int)

(declare-const test_07__t__a__last__bit Int)

(declare-const test_07__t__a__position Int)

;; test_07__t__a__first__bit_axiom
  (assert (<= 0 test_07__t__a__first__bit))

;; test_07__t__a__last__bit_axiom
  (assert (< test_07__t__a__first__bit test_07__t__a__last__bit))

;; test_07__t__a__position_axiom
  (assert (<= 0 test_07__t__a__position))

(declare-const test_07__t__b__first__bit Int)

(declare-const test_07__t__b__last__bit Int)

(declare-const test_07__t__b__position Int)

;; test_07__t__b__first__bit_axiom
  (assert (<= 0 test_07__t__b__first__bit))

;; test_07__t__b__last__bit_axiom
  (assert (< test_07__t__b__first__bit test_07__t__b__last__bit))

;; test_07__t__b__position_axiom
  (assert (<= 0 test_07__t__b__position))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-fun exclusive_or (Bool Bool) Bool)

(declare-fun exclusive_or__function_guard (Bool Bool Bool) Bool)

;; exclusive_or__post_axiom
  (assert
  (forall ((a Bool) (b Bool))
  (! (let ((result (exclusive_or a b)))
     (=> (exclusive_or__function_guard result a b)
     (ite (= a true) (= (= result true) (not (= b true)))
     (= (= result true) (= b true))))) :pattern ((exclusive_or a b)) )))

(define-fun default_initial_assumption ((temp___expr_160 us_rep)
  (temp___skip_top_level_161 Bool)) Bool (and
                                         (= (rec__test_07__t__a
                                            (us_split_fields1
                                            temp___expr_160)) (distinct 0 0))
                                         (= (rec__test_07__t__b
                                            (us_split_fields1
                                            temp___expr_160)) (distinct 1 0))))

;; temp___result_164'def
  (assert
  (forall ((temp___163 us_rep)) (exclusive_or__function_guard
  (exclusive_or (rec__test_07__t__a (us_split_fields1 temp___163))
  (rec__test_07__t__b (us_split_fields1 temp___163)))
  (rec__test_07__t__a (us_split_fields1 temp___163))
  (rec__test_07__t__b (us_split_fields1 temp___163)))))

(define-fun type_invariant ((temp___162 us_rep)) Bool (= (exclusive_or
                                                         (rec__test_07__t__a
                                                         (us_split_fields1
                                                         temp___162))
                                                         (rec__test_07__t__b
                                                         (us_split_fields1
                                                         temp___162))) true))

(assert
;; defqtvc
 ;; File "test_07.ads", line 3, characters 0-0
  (not
  (forall ((usf us_split_fields))
  (=>
  (and (= (rec__test_07__t__a usf) (distinct 0 0))
  (= (rec__test_07__t__b usf) (distinct 1 0))) (type_invariant
  (us_repqtmk usf))))))
(check-sat)
(exit)
