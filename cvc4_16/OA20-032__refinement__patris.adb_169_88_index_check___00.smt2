;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort cell 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (cell cell) Bool)

(declare-const dummy1 cell)

(declare-datatypes ((cell__ref 0))
(((cell__refqtmk (cell__content cell)))))
(define-fun cell__ref_cell__content__projection ((a cell__ref)) cell 
  (cell__content a))

(declare-fun to_rep (cell) Int)

(declare-fun of_rep (Int) cell)

;; inversion_axiom
  (assert
  (forall ((x cell)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x cell)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int cell))))))
(declare-fun slide ((Array Int cell) Int Int) (Array Int cell))

;; slide_eq
  (assert
  (forall ((a (Array Int cell)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int cell)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int cell)) (a__first Int) (a__last Int)
  (b (Array Int cell)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int cell)) (b (Array Int cell)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy2 (Array Int cell))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 ((Array Int cell) (Array Int cell)) Bool)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int (Array Int cell)))))))
(declare-fun slide1 ((Array Int (Array Int cell)) Int
  Int) (Array Int (Array Int cell)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int cell))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int cell))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int (Array Int cell))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int cell))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155) 1 10
                              (select b (+ (- b__first a__first) temp___idx_155))
                              1 10) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int cell))) (b (Array Int (Array Int cell))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155) 1 10
     (select b (+ (- b__first a__first) temp___idx_155)) 1 10) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort shape 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (shape shape) Bool)

(declare-const dummy3 shape)

(declare-datatypes ((shape__ref 0))
(((shape__refqtmk (shape__content shape)))))
(define-fun shape__ref_shape__content__projection ((a shape__ref)) shape 
  (shape__content a))

(declare-fun to_rep1 (shape) Int)

(declare-fun of_rep1 (Int) shape)

;; inversion_axiom
  (assert
  (forall ((x shape))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x shape)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort px_coord 0)

(declare-fun px_coordqtint (px_coord) Int)

;; px_coord'axiom
  (assert
  (forall ((i px_coord))
  (and (<= (- 1) (px_coordqtint i)) (<= (px_coordqtint i) 9))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 1) x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (px_coord px_coord) Bool)

(declare-const dummy4 px_coord)

(declare-datatypes ((px_coord__ref 0))
(((px_coord__refqtmk (px_coord__content px_coord)))))
(define-fun px_coord__ref_px_coord__content__projection ((a px_coord__ref)) px_coord 
  (px_coord__content a))

(define-fun to_rep2 ((x px_coord)) Int (px_coordqtint x))

(declare-fun of_rep2 (Int) px_coord)

;; inversion_axiom
  (assert
  (forall ((x px_coord))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x px_coord)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort py_coord 0)

(declare-fun py_coordqtint (py_coord) Int)

;; py_coord'axiom
  (assert
  (forall ((i py_coord))
  (and (<= (- 1) (py_coordqtint i)) (<= (py_coordqtint i) 19))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 19)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (py_coord py_coord) Bool)

(declare-const dummy5 py_coord)

(declare-datatypes ((py_coord__ref 0))
(((py_coord__refqtmk (py_coord__content py_coord)))))
(define-fun py_coord__ref_py_coord__content__projection ((a py_coord__ref)) py_coord 
  (py_coord__content a))

(define-fun to_rep3 ((x py_coord)) Int (py_coordqtint x))

(declare-fun of_rep3 (Int) py_coord)

;; inversion_axiom
  (assert
  (forall ((x py_coord))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x py_coord)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort direction 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (direction direction) Bool)

(declare-const dummy6 direction)

(declare-datatypes ((direction__ref 0))
(((direction__refqtmk (direction__content direction)))))
(define-fun direction__ref_direction__content__projection ((a direction__ref)) direction 
  (direction__content a))

(declare-fun to_rep4 (direction) Int)

(declare-fun of_rep4 (Int) direction)

;; inversion_axiom
  (assert
  (forall ((x direction))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x direction)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__patris__piece__s shape)(rec__patris__piece__d direction)(rec__patris__piece__x px_coord)(rec__patris__piece__y py_coord)))))
(define-fun us_split_fields_rec__patris__piece__s__projection ((a us_split_fields)) shape 
  (rec__patris__piece__s a))

(define-fun us_split_fields_rec__patris__piece__d__projection ((a us_split_fields)) direction 
  (rec__patris__piece__d a))

(define-fun us_split_fields_rec__patris__piece__x__projection ((a us_split_fields)) px_coord 
  (rec__patris__piece__x a))

(define-fun us_split_fields_rec__patris__piece__y__projection ((a us_split_fields)) py_coord 
  (rec__patris__piece__y a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__patris__piece__s (us_split_fields1 a))) 
                        (to_rep1
                        (rec__patris__piece__s (us_split_fields1 b))))
                        (= (to_rep4
                           (rec__patris__piece__d (us_split_fields1 a))) 
                        (to_rep4
                        (rec__patris__piece__d (us_split_fields1 b)))))
                        (and
                        (= (to_rep2
                           (rec__patris__piece__x (us_split_fields1 a))) 
                        (to_rep2
                        (rec__patris__piece__x (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__patris__piece__y (us_split_fields1 a))) 
                        (to_rep3
                        (rec__patris__piece__y (us_split_fields1 b))))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const patris__piece__s__first__bit Int)

(declare-const patris__piece__s__last__bit Int)

(declare-const patris__piece__s__position Int)

;; patris__piece__s__first__bit_axiom
  (assert (<= 0 patris__piece__s__first__bit))

;; patris__piece__s__last__bit_axiom
  (assert (< patris__piece__s__first__bit patris__piece__s__last__bit))

;; patris__piece__s__position_axiom
  (assert (<= 0 patris__piece__s__position))

(declare-const patris__piece__d__first__bit Int)

(declare-const patris__piece__d__last__bit Int)

(declare-const patris__piece__d__position Int)

;; patris__piece__d__first__bit_axiom
  (assert (<= 0 patris__piece__d__first__bit))

;; patris__piece__d__last__bit_axiom
  (assert (< patris__piece__d__first__bit patris__piece__d__last__bit))

;; patris__piece__d__position_axiom
  (assert (<= 0 patris__piece__d__position))

(declare-const patris__piece__x__first__bit Int)

(declare-const patris__piece__x__last__bit Int)

(declare-const patris__piece__x__position Int)

;; patris__piece__x__first__bit_axiom
  (assert (<= 0 patris__piece__x__first__bit))

;; patris__piece__x__last__bit_axiom
  (assert (< patris__piece__x__first__bit patris__piece__x__last__bit))

;; patris__piece__x__position_axiom
  (assert (<= 0 patris__piece__x__position))

(declare-const patris__piece__y__first__bit Int)

(declare-const patris__piece__y__last__bit Int)

(declare-const patris__piece__y__position Int)

;; patris__piece__y__first__bit_axiom
  (assert (<= 0 patris__piece__y__first__bit))

;; patris__piece__y__last__bit_axiom
  (assert (< patris__piece__y__first__bit patris__piece__y__last__bit))

;; patris__piece__y__position_axiom
  (assert (<= 0 patris__piece__y__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((piece__ref 0))
(((piece__refqtmk (piece__content us_rep)))))
(define-fun piece__ref_piece__content__projection ((a piece__ref)) us_rep 
  (piece__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun get_state (Int) Int)

(declare-fun get_state__function_guard (Int Int) Bool)

(declare-sort state 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (state state) Bool)

(declare-const dummy8 state)

(declare-datatypes ((state__ref 0))
(((state__refqtmk (state__content state)))))
(define-fun state__ref_state__content__projection ((a state__ref)) state 
  (state__content a))

(define-fun dynamic_invariant1 ((temp___expr_663 Int)
  (temp___is_init_659 Bool) (temp___skip_constant_660 Bool)
  (temp___do_toplevel_661 Bool)
  (temp___do_typ_inv_662 Bool)) Bool (=>
                                     (or (= temp___is_init_659 true)
                                     (<= 0 4)) (in_range7 temp___expr_663)))

;; get_state__post_axiom
  (assert
  (forall ((patris__cur_state Int))
  (! (=> (dynamic_invariant1 patris__cur_state true true true true)
     (dynamic_invariant1 (get_state patris__cur_state) true false true true)) :pattern (
  (get_state patris__cur_state)) )))

;; get_state__def_axiom
  (assert
  (forall ((patris__cur_state Int))
  (! (=> (dynamic_invariant1 patris__cur_state true true true true)
     (= (get_state patris__cur_state) patris__cur_state)) :pattern ((get_state
                                                                    patris__cur_state)) )))

(declare-fun is_complete_line ((Array Int cell)) Bool)

(declare-fun is_complete_line__function_guard (Bool (Array Int cell)) Bool)

;; is_complete_line__post_axiom
  (assert true)

;; is_complete_line__def_axiom
  (assert
  (forall ((l (Array Int cell)))
  (! (= (= (is_complete_line l) true)
     (forall ((x Int))
     (=> (and (<= 1 x) (<= x 10)) (not (= (to_rep (select l x)) 0))))) :pattern (
  (is_complete_line l)) )))

(declare-fun is_empty_line ((Array Int cell)) Bool)

(declare-fun is_empty_line__function_guard (Bool (Array Int cell)) Bool)

;; is_empty_line__post_axiom
  (assert true)

;; is_empty_line__def_axiom
  (assert
  (forall ((l (Array Int cell)))
  (! (= (= (is_empty_line l) true)
     (forall ((x Int))
     (=> (and (<= 1 x) (<= x 10)) (= (to_rep (select l x)) 0)))) :pattern (
  (is_empty_line l)) )))

(declare-fun no_complete_lines ((Array Int (Array Int cell))) Bool)

(declare-fun no_complete_lines__function_guard (Bool
  (Array Int (Array Int cell))) Bool)

;; no_complete_lines__post_axiom
  (assert true)

;; no_complete_lines__def_axiom
  (assert
  (forall ((b (Array Int (Array Int cell))))
  (! (= (= (no_complete_lines b) true)
     (forall ((y Int))
     (=> (and (<= 1 y) (<= y 20))
     (not (= (is_complete_line (select b y)) true))))) :pattern ((no_complete_lines
                                                                 b)) )))

(declare-fun valid_configuration ((Array Int (Array Int cell))
  us_split_fields Int) Bool)

(declare-fun valid_configuration__function_guard (Bool
  (Array Int (Array Int cell)) us_split_fields Int) Bool)

(declare-fun get_board ((Array Int (Array Int cell))) (Array Int (Array Int cell)))

(declare-fun get_board__function_guard ((Array Int (Array Int cell))
  (Array Int (Array Int cell))) Bool)

(declare-fun get_piece (us_split_fields) us_rep)

(declare-fun get_piece__function_guard (us_rep us_split_fields) Bool)

(declare-fun valid_configuration1 ((Array Int (Array Int cell)) Int
  us_rep) Bool)

(declare-fun valid_configuration__function_guard1 (Bool
  (Array Int (Array Int cell)) Int us_rep) Bool)

;; valid_configuration__post_axiom
  (assert true)

;; valid_configuration__def_axiom
  (assert
  (forall ((patris__cur_board (Array Int (Array Int cell))))
  (forall ((patris__cur_piece__fields us_split_fields))
  (forall ((patris__cur_state Int))
  (! (=
     (= (valid_configuration patris__cur_board patris__cur_piece__fields
        patris__cur_state) true)
     (= (valid_configuration1 (get_board patris__cur_board)
        (get_state patris__cur_state) (get_piece patris__cur_piece__fields)) true)) :pattern (
  (valid_configuration patris__cur_board patris__cur_piece__fields
  patris__cur_state)) )))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const empty_line (Array Int cell))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const r21b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-sort score_t 0)

(define-fun in_range8 ((x (_ BitVec 32))) Bool (and (bvule #x00000000 x)
                                               (bvule x #x0001869F)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 99999)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 32))

(declare-fun user_eq9 (score_t score_t) Bool)

(declare-const dummy9 score_t)

(declare-datatypes ((score_t__ref 0))
(((score_t__refqtmk (score_t__content score_t)))))
(define-fun score_t__ref_score_t__content__projection ((a score_t__ref)) score_t 
  (score_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_558 (_ BitVec 32))
  (temp___is_init_554 Bool) (temp___skip_constant_555 Bool)
  (temp___do_toplevel_556 Bool)
  (temp___do_typ_inv_557 Bool)) Bool (=>
                                     (or (= temp___is_init_554 true)
                                     (bvule #x00000000 #x0001869F))
                                     (in_range8 temp___expr_558)))

(declare-sort y_coord 0)

(declare-fun y_coordqtint (y_coord) Int)

;; y_coord'axiom
  (assert
  (forall ((i y_coord))
  (and (<= 1 (y_coordqtint i)) (<= (y_coordqtint i) 20))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (y_coord y_coord) Bool)

(declare-const dummy10 y_coord)

(declare-datatypes ((y_coord__ref 0))
(((y_coord__refqtmk (y_coord__content y_coord)))))
(define-fun y_coord__ref_y_coord__content__projection ((a y_coord__ref)) y_coord 
  (y_coord__content a))

(define-fun dynamic_invariant3 ((temp___expr_593 Int)
  (temp___is_init_589 Bool) (temp___skip_constant_590 Bool)
  (temp___do_toplevel_591 Bool)
  (temp___do_typ_inv_592 Bool)) Bool (=>
                                     (or (= temp___is_init_589 true)
                                     (<= 1 20)) (in_range9 temp___expr_593)))

(declare-fun patris__delete_complete_lines__empty_line__aggregate_def (Int) (Array Int cell))

(define-fun to_rep5 ((x integer)) Int (integerqtint x))

(declare-fun of_rep5 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (integer integer) Bool)

(declare-const dummy11 integer)

(declare-datatypes ((t22b__ref 0))
(((t22b__refqtmk (t22b__content integer)))))
(define-fun t22b__ref_t22b__content__projection ((a t22b__ref)) integer 
  (t22b__content a))

;; empty_line__def_axiom
  (assert
  (= empty_line (patris__delete_complete_lines__empty_line__aggregate_def 0)))

(define-fun dynamic_invariant4 ((temp___expr_565 Int)
  (temp___is_init_561 Bool) (temp___skip_constant_562 Bool)
  (temp___do_toplevel_563 Bool)
  (temp___do_typ_inv_564 Bool)) Bool (=>
                                     (or (= temp___is_init_561 true)
                                     (<= 0 7)) (in_range2 temp___expr_565)))

;; def_axiom
  (assert
  (forall ((temp___552 Int))
  (=> (dynamic_invariant4 temp___552 true true true true)
  (forall ((temp___553 Int))
  (= (to_rep
     (select (patris__delete_complete_lines__empty_line__aggregate_def
             temp___552) temp___553)) temp___552)))))

(define-fun dynamic_invariant5 ((temp___expr_572 Int)
  (temp___is_init_568 Bool) (temp___skip_constant_569 Bool)
  (temp___do_toplevel_570 Bool)
  (temp___do_typ_inv_571 Bool)) Bool (=>
                                     (or (= temp___is_init_568 true)
                                     (<= 1 7)) (in_range3 temp___expr_572)))

(declare-sort x_coord 0)

(declare-fun x_coordqtint (x_coord) Int)

;; x_coord'axiom
  (assert
  (forall ((i x_coord))
  (and (<= 1 (x_coordqtint i)) (<= (x_coordqtint i) 10))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (x_coord x_coord) Bool)

(declare-const dummy12 x_coord)

(declare-datatypes ((x_coord__ref 0))
(((x_coord__refqtmk (x_coord__content x_coord)))))
(define-fun x_coord__ref_x_coord__content__projection ((a x_coord__ref)) x_coord 
  (x_coord__content a))

(define-fun dynamic_invariant6 ((temp___expr_586 Int)
  (temp___is_init_582 Bool) (temp___skip_constant_583 Bool)
  (temp___do_toplevel_584 Bool)
  (temp___do_typ_inv_585 Bool)) Bool (=>
                                     (or (= temp___is_init_582 true)
                                     (<= 1 10)) (in_range10 temp___expr_586)))

;; get_board__post_axiom
  (assert true)

;; get_board__def_axiom
  (assert
  (forall ((patris__cur_board (Array Int (Array Int cell))))
  (! (= (get_board patris__cur_board) patris__cur_board) :pattern ((get_board
                                                                   patris__cur_board)) )))

(define-fun dynamic_invariant7 ((temp___expr_631 Int)
  (temp___is_init_627 Bool) (temp___skip_constant_628 Bool)
  (temp___do_toplevel_629 Bool)
  (temp___do_typ_inv_630 Bool)) Bool (=>
                                     (or (= temp___is_init_627 true)
                                     (<= (- 1) 9)) (in_range4
                                     temp___expr_631)))

(define-fun dynamic_invariant8 ((temp___expr_638 Int)
  (temp___is_init_634 Bool) (temp___skip_constant_635 Bool)
  (temp___do_toplevel_636 Bool)
  (temp___do_typ_inv_637 Bool)) Bool (=>
                                     (or (= temp___is_init_634 true)
                                     (<= (- 1) 19)) (in_range5
                                     temp___expr_638)))

(define-fun dynamic_invariant9 ((temp___expr_645 Int)
  (temp___is_init_641 Bool) (temp___skip_constant_642 Bool)
  (temp___do_toplevel_643 Bool)
  (temp___do_typ_inv_644 Bool)) Bool (=>
                                     (or (= temp___is_init_641 true)
                                     (<= 0 3)) (in_range6 temp___expr_645)))

;; get_piece__post_axiom
  (assert true)

;; get_piece__def_axiom
  (assert
  (forall ((patris__cur_piece__fields us_split_fields))
  (! (= (get_piece patris__cur_piece__fields) (us_repqtmk
                                              patris__cur_piece__fields)) :pattern (
  (get_piece patris__cur_piece__fields)) )))

(declare-sort map1 0)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 map1)))))
(declare-fun get (map1 Int Int) Bool)

(declare-fun set (map1 Int Int Bool) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a Bool))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a Bool))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide2 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide2 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide2 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_160 Int)
                             (temp___idx_161 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_160)
                             (<= temp___idx_160 a__last))
                             (and (<= a__first_2 temp___idx_161)
                             (<= temp___idx_161 a__last_2)))
                             (= (ite (get a temp___idx_160 temp___idx_161) 1 0) (ite 
                             (get b (+ (- b__first a__first) temp___idx_160)
                             (+ (- b__first_2 a__first_2) temp___idx_161)) 1 0)))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq3 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_160 Int) (temp___idx_161 Int))
  (=>
  (and (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last))
  (and (<= a__first_2 temp___idx_161) (<= temp___idx_161 a__last_2)))
  (= (ite (get a temp___idx_160 temp___idx_161) 1 0) (ite (get b
                                                          (+ (- b__first a__first) temp___idx_160)
                                                          (+ (- b__first_2 a__first_2) temp___idx_161)) 1 0)))))))))

(declare-const dummy13 map1)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq13 (map1 map1) Bool)

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 (Array Int map1))))))
(declare-fun slide3 ((Array Int map1) Int Int) (Array Int map1))

;; slide_eq
  (assert
  (forall ((a (Array Int map1)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int map1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int map1)) (a__first Int) (a__last Int)
  (b (Array Int map1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_162 Int))
                           (=>
                           (and (<= a__first temp___idx_162)
                           (<= temp___idx_162 a__last))
                           (= (bool_eq3 (select a temp___idx_162) 0 3 0 3
                              (select b (+ (- b__first a__first) temp___idx_162))
                              0 3 0 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int map1)) (b (Array Int map1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_162 Int))
  (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last))
  (= (bool_eq3 (select a temp___idx_162) 0 3 0 3
     (select b (+ (- b__first a__first) temp___idx_162)) 0 3 0 3) true))))))))

(declare-const possible_i_shapes (Array Int map1))

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-fun patris__possible_i_shapes__aggregate_def (map1 map1 map1
  map1) (Array Int map1))

(declare-fun temp_____aggregate_def_169 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

(declare-fun temp_____aggregate_def_189 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

(declare-fun temp_____aggregate_def_209 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

(declare-fun temp_____aggregate_def_229 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; possible_i_shapes__def_axiom
  (assert
  (= possible_i_shapes (patris__possible_i_shapes__aggregate_def
                       (temp_____aggregate_def_169 (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0)
                       (distinct 1 0) (distinct 1 0) (distinct 1 0)
                       (distinct 1 0) (distinct 0 0) (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0))
                       (temp_____aggregate_def_189 (distinct 0 0)
                       (distinct 0 0) (distinct 1 0) (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 1 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0)
                       (distinct 1 0) (distinct 0 0) (distinct 0 0)
                       (distinct 0 0) (distinct 1 0) (distinct 0 0))
                       (temp_____aggregate_def_209 (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0)
                       (distinct 0 0) (distinct 1 0) (distinct 1 0)
                       (distinct 1 0) (distinct 1 0) (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0))
                       (temp_____aggregate_def_229 (distinct 0 0)
                       (distinct 1 0) (distinct 0 0) (distinct 0 0)
                       (distinct 0 0) (distinct 1 0) (distinct 0 0)
                       (distinct 0 0) (distinct 0 0) (distinct 1 0)
                       (distinct 0 0) (distinct 0 0) (distinct 0 0)
                       (distinct 1 0) (distinct 0 0) (distinct 0 0)))))

;; def_axiom
  (assert
  (forall ((temp___171 Bool) (temp___172 Bool) (temp___173 Bool)
  (temp___174 Bool) (temp___175 Bool) (temp___176 Bool) (temp___177 Bool)
  (temp___178 Bool) (temp___179 Bool) (temp___180 Bool) (temp___181 Bool)
  (temp___182 Bool) (temp___183 Bool) (temp___184 Bool) (temp___185 Bool)
  (temp___186 Bool))
  (let ((temp___170 (temp_____aggregate_def_169 temp___171 temp___172
                    temp___173 temp___174 temp___175 temp___176 temp___177
                    temp___178 temp___179 temp___180 temp___181 temp___182
                    temp___183 temp___184 temp___185 temp___186)))
  (and
  (and
  (and
  (and (= (get temp___170 0 0) temp___171)
  (= (get temp___170 0 1) temp___172))
  (and (= (get temp___170 0 2) temp___173)
  (= (get temp___170 0 3) temp___174)))
  (and
  (and (= (get temp___170 1 0) temp___175)
  (= (get temp___170 1 1) temp___176))
  (and (= (get temp___170 1 2) temp___177)
  (= (get temp___170 1 3) temp___178))))
  (and
  (and
  (and (= (get temp___170 2 0) temp___179)
  (= (get temp___170 2 1) temp___180))
  (and (= (get temp___170 2 2) temp___181)
  (= (get temp___170 2 3) temp___182)))
  (and
  (and (= (get temp___170 3 0) temp___183)
  (= (get temp___170 3 1) temp___184))
  (and (= (get temp___170 3 2) temp___185)
  (= (get temp___170 3 3) temp___186))))))))

;; def_axiom
  (assert
  (forall ((temp___164 map1) (temp___165 map1) (temp___166 map1)
  (temp___167 map1))
  (let ((temp___163 (patris__possible_i_shapes__aggregate_def temp___164
                    temp___165 temp___166 temp___167)))
  (and
  (and (= (select temp___163 0) temp___164)
  (= (select temp___163 1) temp___165))
  (and (= (select temp___163 2) temp___166)
  (= (select temp___163 3) temp___167))))))

;; def_axiom
  (assert
  (forall ((temp___191 Bool) (temp___192 Bool) (temp___193 Bool)
  (temp___194 Bool) (temp___195 Bool) (temp___196 Bool) (temp___197 Bool)
  (temp___198 Bool) (temp___199 Bool) (temp___200 Bool) (temp___201 Bool)
  (temp___202 Bool) (temp___203 Bool) (temp___204 Bool) (temp___205 Bool)
  (temp___206 Bool))
  (let ((temp___190 (temp_____aggregate_def_189 temp___191 temp___192
                    temp___193 temp___194 temp___195 temp___196 temp___197
                    temp___198 temp___199 temp___200 temp___201 temp___202
                    temp___203 temp___204 temp___205 temp___206)))
  (and
  (and
  (and
  (and (= (get temp___190 0 0) temp___191)
  (= (get temp___190 0 1) temp___192))
  (and (= (get temp___190 0 2) temp___193)
  (= (get temp___190 0 3) temp___194)))
  (and
  (and (= (get temp___190 1 0) temp___195)
  (= (get temp___190 1 1) temp___196))
  (and (= (get temp___190 1 2) temp___197)
  (= (get temp___190 1 3) temp___198))))
  (and
  (and
  (and (= (get temp___190 2 0) temp___199)
  (= (get temp___190 2 1) temp___200))
  (and (= (get temp___190 2 2) temp___201)
  (= (get temp___190 2 3) temp___202)))
  (and
  (and (= (get temp___190 3 0) temp___203)
  (= (get temp___190 3 1) temp___204))
  (and (= (get temp___190 3 2) temp___205)
  (= (get temp___190 3 3) temp___206))))))))

;; def_axiom
  (assert
  (forall ((temp___211 Bool) (temp___212 Bool) (temp___213 Bool)
  (temp___214 Bool) (temp___215 Bool) (temp___216 Bool) (temp___217 Bool)
  (temp___218 Bool) (temp___219 Bool) (temp___220 Bool) (temp___221 Bool)
  (temp___222 Bool) (temp___223 Bool) (temp___224 Bool) (temp___225 Bool)
  (temp___226 Bool))
  (let ((temp___210 (temp_____aggregate_def_209 temp___211 temp___212
                    temp___213 temp___214 temp___215 temp___216 temp___217
                    temp___218 temp___219 temp___220 temp___221 temp___222
                    temp___223 temp___224 temp___225 temp___226)))
  (and
  (and
  (and
  (and (= (get temp___210 0 0) temp___211)
  (= (get temp___210 0 1) temp___212))
  (and (= (get temp___210 0 2) temp___213)
  (= (get temp___210 0 3) temp___214)))
  (and
  (and (= (get temp___210 1 0) temp___215)
  (= (get temp___210 1 1) temp___216))
  (and (= (get temp___210 1 2) temp___217)
  (= (get temp___210 1 3) temp___218))))
  (and
  (and
  (and (= (get temp___210 2 0) temp___219)
  (= (get temp___210 2 1) temp___220))
  (and (= (get temp___210 2 2) temp___221)
  (= (get temp___210 2 3) temp___222)))
  (and
  (and (= (get temp___210 3 0) temp___223)
  (= (get temp___210 3 1) temp___224))
  (and (= (get temp___210 3 2) temp___225)
  (= (get temp___210 3 3) temp___226))))))))

;; def_axiom
  (assert
  (forall ((temp___231 Bool) (temp___232 Bool) (temp___233 Bool)
  (temp___234 Bool) (temp___235 Bool) (temp___236 Bool) (temp___237 Bool)
  (temp___238 Bool) (temp___239 Bool) (temp___240 Bool) (temp___241 Bool)
  (temp___242 Bool) (temp___243 Bool) (temp___244 Bool) (temp___245 Bool)
  (temp___246 Bool))
  (let ((temp___230 (temp_____aggregate_def_229 temp___231 temp___232
                    temp___233 temp___234 temp___235 temp___236 temp___237
                    temp___238 temp___239 temp___240 temp___241 temp___242
                    temp___243 temp___244 temp___245 temp___246)))
  (and
  (and
  (and
  (and (= (get temp___230 0 0) temp___231)
  (= (get temp___230 0 1) temp___232))
  (and (= (get temp___230 0 2) temp___233)
  (= (get temp___230 0 3) temp___234)))
  (and
  (and (= (get temp___230 1 0) temp___235)
  (= (get temp___230 1 1) temp___236))
  (and (= (get temp___230 1 2) temp___237)
  (= (get temp___230 1 3) temp___238))))
  (and
  (and
  (and (= (get temp___230 2 0) temp___239)
  (= (get temp___230 2 1) temp___240))
  (and (= (get temp___230 2 2) temp___241)
  (= (get temp___230 2 3) temp___242)))
  (and
  (and (= (get temp___230 3 0) temp___243)
  (= (get temp___230 3 1) temp___244))
  (and (= (get temp___230 3 2) temp___245)
  (= (get temp___230 3 3) temp___246))))))))

(declare-const dummy14 map1)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq14 (map1 map1) Bool)

(declare-sort map2 0)

(declare-datatypes ((map__ref4 0))
(((map__refqtmk4 (map__content4 map2)))))
(declare-fun get1 (map2 Int Int) map1)

(declare-fun set1 (map2 Int Int map1) map2)

;; Select_eq
  (assert
  (forall ((m map2))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a map1))
  (! (= (get1 (set1 m i j a) i j) a) :pattern ((set1 m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map2))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a map1))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get1 (set1 m i j a) i2 j2) (get1 m i2 j2))) :pattern ((get1
                                                               (set1 m i j a)
                                                               i2 j2)) :pattern (
  (set1 m i j a) (get1 m i2 j2)) ))))))

(declare-fun slide4 (map2 Int Int Int Int) map2)

;; slide_def
  (assert
  (forall ((a map2))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j) 
  (get1 a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get1 (slide4 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq5 ((a map2) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map2) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_249 Int)
                             (temp___idx_250 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_249)
                             (<= temp___idx_249 a__last))
                             (and (<= a__first_2 temp___idx_250)
                             (<= temp___idx_250 a__last_2)))
                             (= (bool_eq3
                                (get1 a temp___idx_249 temp___idx_250) 0 2 0
                                2
                                (get1 b
                                (+ (- b__first a__first) temp___idx_249)
                                (+ (- b__first_2 a__first_2) temp___idx_250))
                                0 2 0 2) true))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map2) (b map2))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq5 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_249 Int) (temp___idx_250 Int))
  (=>
  (and (and (<= a__first temp___idx_249) (<= temp___idx_249 a__last))
  (and (<= a__first_2 temp___idx_250) (<= temp___idx_250 a__last_2)))
  (= (bool_eq3 (get1 a temp___idx_249 temp___idx_250) 0 2 0 2
     (get1 b (+ (- b__first a__first) temp___idx_249)
     (+ (- b__first_2 a__first_2) temp___idx_250)) 0 2 0 2) true))))))))

(declare-const possible_three_shapes map2)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-fun patris__possible_three_shapes__aggregate_def (map1 map1 map1
  map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1 map1
  map1 map1) map2)

(declare-fun temp_____aggregate_def_274 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_287 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_300 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_313 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_326 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_339 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_352 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_365 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_378 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_391 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_404 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_417 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_430 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_443 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_456 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_469 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_482 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_495 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_508 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

(declare-fun temp_____aggregate_def_521 (Bool Bool Bool Bool Bool Bool Bool
  Bool Bool) map1)

;; possible_three_shapes__def_axiom
  (assert
  (= possible_three_shapes (patris__possible_three_shapes__aggregate_def
                           (temp_____aggregate_def_274 (distinct 1 0)
                           (distinct 0 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 0 0) (distinct 0 0))
                           (temp_____aggregate_def_287 (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_300 (distinct 0 0)
                           (distinct 0 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 0 0) (distinct 1 0))
                           (temp_____aggregate_def_313 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_326 (distinct 0 0)
                           (distinct 0 0) (distinct 1 0) (distinct 1 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 0 0) (distinct 0 0))
                           (temp_____aggregate_def_339 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0))
                           (temp_____aggregate_def_352 (distinct 0 0)
                           (distinct 0 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 1 0) (distinct 1 0)
                           (distinct 0 0) (distinct 0 0))
                           (temp_____aggregate_def_365 (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_378 (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 0 0) (distinct 0 0))
                           (temp_____aggregate_def_391 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 0 0) (distinct 1 0))
                           (temp_____aggregate_def_404 (distinct 0 0)
                           (distinct 0 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_417 (distinct 1 0)
                           (distinct 0 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_430 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 0 0) (distinct 0 0))
                           (temp_____aggregate_def_443 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_456 (distinct 0 0)
                           (distinct 0 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_469 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_482 (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 0 0) (distinct 0 0))
                           (temp_____aggregate_def_495 (distinct 0 0)
                           (distinct 0 0) (distinct 1 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0) (distinct 0 0)
                           (distinct 1 0) (distinct 0 0))
                           (temp_____aggregate_def_508 (distinct 0 0)
                           (distinct 0 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 0 0)
                           (distinct 1 0) (distinct 1 0))
                           (temp_____aggregate_def_521 (distinct 0 0)
                           (distinct 1 0) (distinct 0 0) (distinct 1 0)
                           (distinct 1 0) (distinct 0 0) (distinct 1 0)
                           (distinct 0 0) (distinct 0 0)))))

;; def_axiom
  (assert
  (forall ((temp___276 Bool) (temp___277 Bool) (temp___278 Bool)
  (temp___279 Bool) (temp___280 Bool) (temp___281 Bool) (temp___282 Bool)
  (temp___283 Bool) (temp___284 Bool))
  (let ((temp___275 (temp_____aggregate_def_274 temp___276 temp___277
                    temp___278 temp___279 temp___280 temp___281 temp___282
                    temp___283 temp___284)))
  (and
  (and
  (and
  (and (= (get temp___275 0 0) temp___276)
  (= (get temp___275 0 1) temp___277)) (= (get temp___275 0 2) temp___278))
  (and
  (and (= (get temp___275 1 0) temp___279)
  (= (get temp___275 1 1) temp___280)) (= (get temp___275 1 2) temp___281)))
  (and
  (and (= (get temp___275 2 0) temp___282)
  (= (get temp___275 2 1) temp___283)) (= (get temp___275 2 2) temp___284))))))

;; def_axiom
  (assert
  (forall ((temp___289 Bool) (temp___290 Bool) (temp___291 Bool)
  (temp___292 Bool) (temp___293 Bool) (temp___294 Bool) (temp___295 Bool)
  (temp___296 Bool) (temp___297 Bool))
  (let ((temp___288 (temp_____aggregate_def_287 temp___289 temp___290
                    temp___291 temp___292 temp___293 temp___294 temp___295
                    temp___296 temp___297)))
  (and
  (and
  (and
  (and (= (get temp___288 0 0) temp___289)
  (= (get temp___288 0 1) temp___290)) (= (get temp___288 0 2) temp___291))
  (and
  (and (= (get temp___288 1 0) temp___292)
  (= (get temp___288 1 1) temp___293)) (= (get temp___288 1 2) temp___294)))
  (and
  (and (= (get temp___288 2 0) temp___295)
  (= (get temp___288 2 1) temp___296)) (= (get temp___288 2 2) temp___297))))))

;; def_axiom
  (assert
  (forall ((temp___302 Bool) (temp___303 Bool) (temp___304 Bool)
  (temp___305 Bool) (temp___306 Bool) (temp___307 Bool) (temp___308 Bool)
  (temp___309 Bool) (temp___310 Bool))
  (let ((temp___301 (temp_____aggregate_def_300 temp___302 temp___303
                    temp___304 temp___305 temp___306 temp___307 temp___308
                    temp___309 temp___310)))
  (and
  (and
  (and
  (and (= (get temp___301 0 0) temp___302)
  (= (get temp___301 0 1) temp___303)) (= (get temp___301 0 2) temp___304))
  (and
  (and (= (get temp___301 1 0) temp___305)
  (= (get temp___301 1 1) temp___306)) (= (get temp___301 1 2) temp___307)))
  (and
  (and (= (get temp___301 2 0) temp___308)
  (= (get temp___301 2 1) temp___309)) (= (get temp___301 2 2) temp___310))))))

;; def_axiom
  (assert
  (forall ((temp___315 Bool) (temp___316 Bool) (temp___317 Bool)
  (temp___318 Bool) (temp___319 Bool) (temp___320 Bool) (temp___321 Bool)
  (temp___322 Bool) (temp___323 Bool))
  (let ((temp___314 (temp_____aggregate_def_313 temp___315 temp___316
                    temp___317 temp___318 temp___319 temp___320 temp___321
                    temp___322 temp___323)))
  (and
  (and
  (and
  (and (= (get temp___314 0 0) temp___315)
  (= (get temp___314 0 1) temp___316)) (= (get temp___314 0 2) temp___317))
  (and
  (and (= (get temp___314 1 0) temp___318)
  (= (get temp___314 1 1) temp___319)) (= (get temp___314 1 2) temp___320)))
  (and
  (and (= (get temp___314 2 0) temp___321)
  (= (get temp___314 2 1) temp___322)) (= (get temp___314 2 2) temp___323))))))

;; def_axiom
  (assert
  (forall ((temp___252 map1) (temp___253 map1) (temp___254 map1)
  (temp___255 map1) (temp___256 map1) (temp___257 map1) (temp___258 map1)
  (temp___259 map1) (temp___260 map1) (temp___261 map1) (temp___262 map1)
  (temp___263 map1) (temp___264 map1) (temp___265 map1) (temp___266 map1)
  (temp___267 map1) (temp___268 map1) (temp___269 map1) (temp___270 map1)
  (temp___271 map1))
  (let ((temp___251 (patris__possible_three_shapes__aggregate_def temp___252
                    temp___253 temp___254 temp___255 temp___256 temp___257
                    temp___258 temp___259 temp___260 temp___261 temp___262
                    temp___263 temp___264 temp___265 temp___266 temp___267
                    temp___268 temp___269 temp___270 temp___271)))
  (and
  (and
  (and
  (and (= (get1 temp___251 3 0) temp___252)
  (= (get1 temp___251 3 1) temp___253))
  (and (= (get1 temp___251 3 2) temp___254)
  (= (get1 temp___251 3 3) temp___255)))
  (and
  (and (= (get1 temp___251 4 0) temp___256)
  (= (get1 temp___251 4 1) temp___257))
  (and (= (get1 temp___251 4 2) temp___258)
  (= (get1 temp___251 4 3) temp___259))))
  (and
  (and
  (and
  (and (= (get1 temp___251 5 0) temp___260)
  (= (get1 temp___251 5 1) temp___261))
  (and (= (get1 temp___251 5 2) temp___262)
  (= (get1 temp___251 5 3) temp___263)))
  (and
  (and (= (get1 temp___251 6 0) temp___264)
  (= (get1 temp___251 6 1) temp___265))
  (and (= (get1 temp___251 6 2) temp___266)
  (= (get1 temp___251 6 3) temp___267))))
  (and
  (and (= (get1 temp___251 7 0) temp___268)
  (= (get1 temp___251 7 1) temp___269))
  (and (= (get1 temp___251 7 2) temp___270)
  (= (get1 temp___251 7 3) temp___271))))))))

;; def_axiom
  (assert
  (forall ((temp___328 Bool) (temp___329 Bool) (temp___330 Bool)
  (temp___331 Bool) (temp___332 Bool) (temp___333 Bool) (temp___334 Bool)
  (temp___335 Bool) (temp___336 Bool))
  (let ((temp___327 (temp_____aggregate_def_326 temp___328 temp___329
                    temp___330 temp___331 temp___332 temp___333 temp___334
                    temp___335 temp___336)))
  (and
  (and
  (and
  (and (= (get temp___327 0 0) temp___328)
  (= (get temp___327 0 1) temp___329)) (= (get temp___327 0 2) temp___330))
  (and
  (and (= (get temp___327 1 0) temp___331)
  (= (get temp___327 1 1) temp___332)) (= (get temp___327 1 2) temp___333)))
  (and
  (and (= (get temp___327 2 0) temp___334)
  (= (get temp___327 2 1) temp___335)) (= (get temp___327 2 2) temp___336))))))

;; def_axiom
  (assert
  (forall ((temp___341 Bool) (temp___342 Bool) (temp___343 Bool)
  (temp___344 Bool) (temp___345 Bool) (temp___346 Bool) (temp___347 Bool)
  (temp___348 Bool) (temp___349 Bool))
  (let ((temp___340 (temp_____aggregate_def_339 temp___341 temp___342
                    temp___343 temp___344 temp___345 temp___346 temp___347
                    temp___348 temp___349)))
  (and
  (and
  (and
  (and (= (get temp___340 0 0) temp___341)
  (= (get temp___340 0 1) temp___342)) (= (get temp___340 0 2) temp___343))
  (and
  (and (= (get temp___340 1 0) temp___344)
  (= (get temp___340 1 1) temp___345)) (= (get temp___340 1 2) temp___346)))
  (and
  (and (= (get temp___340 2 0) temp___347)
  (= (get temp___340 2 1) temp___348)) (= (get temp___340 2 2) temp___349))))))

;; def_axiom
  (assert
  (forall ((temp___354 Bool) (temp___355 Bool) (temp___356 Bool)
  (temp___357 Bool) (temp___358 Bool) (temp___359 Bool) (temp___360 Bool)
  (temp___361 Bool) (temp___362 Bool))
  (let ((temp___353 (temp_____aggregate_def_352 temp___354 temp___355
                    temp___356 temp___357 temp___358 temp___359 temp___360
                    temp___361 temp___362)))
  (and
  (and
  (and
  (and (= (get temp___353 0 0) temp___354)
  (= (get temp___353 0 1) temp___355)) (= (get temp___353 0 2) temp___356))
  (and
  (and (= (get temp___353 1 0) temp___357)
  (= (get temp___353 1 1) temp___358)) (= (get temp___353 1 2) temp___359)))
  (and
  (and (= (get temp___353 2 0) temp___360)
  (= (get temp___353 2 1) temp___361)) (= (get temp___353 2 2) temp___362))))))

;; def_axiom
  (assert
  (forall ((temp___367 Bool) (temp___368 Bool) (temp___369 Bool)
  (temp___370 Bool) (temp___371 Bool) (temp___372 Bool) (temp___373 Bool)
  (temp___374 Bool) (temp___375 Bool))
  (let ((temp___366 (temp_____aggregate_def_365 temp___367 temp___368
                    temp___369 temp___370 temp___371 temp___372 temp___373
                    temp___374 temp___375)))
  (and
  (and
  (and
  (and (= (get temp___366 0 0) temp___367)
  (= (get temp___366 0 1) temp___368)) (= (get temp___366 0 2) temp___369))
  (and
  (and (= (get temp___366 1 0) temp___370)
  (= (get temp___366 1 1) temp___371)) (= (get temp___366 1 2) temp___372)))
  (and
  (and (= (get temp___366 2 0) temp___373)
  (= (get temp___366 2 1) temp___374)) (= (get temp___366 2 2) temp___375))))))

;; def_axiom
  (assert
  (forall ((temp___380 Bool) (temp___381 Bool) (temp___382 Bool)
  (temp___383 Bool) (temp___384 Bool) (temp___385 Bool) (temp___386 Bool)
  (temp___387 Bool) (temp___388 Bool))
  (let ((temp___379 (temp_____aggregate_def_378 temp___380 temp___381
                    temp___382 temp___383 temp___384 temp___385 temp___386
                    temp___387 temp___388)))
  (and
  (and
  (and
  (and (= (get temp___379 0 0) temp___380)
  (= (get temp___379 0 1) temp___381)) (= (get temp___379 0 2) temp___382))
  (and
  (and (= (get temp___379 1 0) temp___383)
  (= (get temp___379 1 1) temp___384)) (= (get temp___379 1 2) temp___385)))
  (and
  (and (= (get temp___379 2 0) temp___386)
  (= (get temp___379 2 1) temp___387)) (= (get temp___379 2 2) temp___388))))))

;; def_axiom
  (assert
  (forall ((temp___393 Bool) (temp___394 Bool) (temp___395 Bool)
  (temp___396 Bool) (temp___397 Bool) (temp___398 Bool) (temp___399 Bool)
  (temp___400 Bool) (temp___401 Bool))
  (let ((temp___392 (temp_____aggregate_def_391 temp___393 temp___394
                    temp___395 temp___396 temp___397 temp___398 temp___399
                    temp___400 temp___401)))
  (and
  (and
  (and
  (and (= (get temp___392 0 0) temp___393)
  (= (get temp___392 0 1) temp___394)) (= (get temp___392 0 2) temp___395))
  (and
  (and (= (get temp___392 1 0) temp___396)
  (= (get temp___392 1 1) temp___397)) (= (get temp___392 1 2) temp___398)))
  (and
  (and (= (get temp___392 2 0) temp___399)
  (= (get temp___392 2 1) temp___400)) (= (get temp___392 2 2) temp___401))))))

;; def_axiom
  (assert
  (forall ((temp___406 Bool) (temp___407 Bool) (temp___408 Bool)
  (temp___409 Bool) (temp___410 Bool) (temp___411 Bool) (temp___412 Bool)
  (temp___413 Bool) (temp___414 Bool))
  (let ((temp___405 (temp_____aggregate_def_404 temp___406 temp___407
                    temp___408 temp___409 temp___410 temp___411 temp___412
                    temp___413 temp___414)))
  (and
  (and
  (and
  (and (= (get temp___405 0 0) temp___406)
  (= (get temp___405 0 1) temp___407)) (= (get temp___405 0 2) temp___408))
  (and
  (and (= (get temp___405 1 0) temp___409)
  (= (get temp___405 1 1) temp___410)) (= (get temp___405 1 2) temp___411)))
  (and
  (and (= (get temp___405 2 0) temp___412)
  (= (get temp___405 2 1) temp___413)) (= (get temp___405 2 2) temp___414))))))

;; def_axiom
  (assert
  (forall ((temp___419 Bool) (temp___420 Bool) (temp___421 Bool)
  (temp___422 Bool) (temp___423 Bool) (temp___424 Bool) (temp___425 Bool)
  (temp___426 Bool) (temp___427 Bool))
  (let ((temp___418 (temp_____aggregate_def_417 temp___419 temp___420
                    temp___421 temp___422 temp___423 temp___424 temp___425
                    temp___426 temp___427)))
  (and
  (and
  (and
  (and (= (get temp___418 0 0) temp___419)
  (= (get temp___418 0 1) temp___420)) (= (get temp___418 0 2) temp___421))
  (and
  (and (= (get temp___418 1 0) temp___422)
  (= (get temp___418 1 1) temp___423)) (= (get temp___418 1 2) temp___424)))
  (and
  (and (= (get temp___418 2 0) temp___425)
  (= (get temp___418 2 1) temp___426)) (= (get temp___418 2 2) temp___427))))))

;; def_axiom
  (assert
  (forall ((temp___432 Bool) (temp___433 Bool) (temp___434 Bool)
  (temp___435 Bool) (temp___436 Bool) (temp___437 Bool) (temp___438 Bool)
  (temp___439 Bool) (temp___440 Bool))
  (let ((temp___431 (temp_____aggregate_def_430 temp___432 temp___433
                    temp___434 temp___435 temp___436 temp___437 temp___438
                    temp___439 temp___440)))
  (and
  (and
  (and
  (and (= (get temp___431 0 0) temp___432)
  (= (get temp___431 0 1) temp___433)) (= (get temp___431 0 2) temp___434))
  (and
  (and (= (get temp___431 1 0) temp___435)
  (= (get temp___431 1 1) temp___436)) (= (get temp___431 1 2) temp___437)))
  (and
  (and (= (get temp___431 2 0) temp___438)
  (= (get temp___431 2 1) temp___439)) (= (get temp___431 2 2) temp___440))))))

;; def_axiom
  (assert
  (forall ((temp___445 Bool) (temp___446 Bool) (temp___447 Bool)
  (temp___448 Bool) (temp___449 Bool) (temp___450 Bool) (temp___451 Bool)
  (temp___452 Bool) (temp___453 Bool))
  (let ((temp___444 (temp_____aggregate_def_443 temp___445 temp___446
                    temp___447 temp___448 temp___449 temp___450 temp___451
                    temp___452 temp___453)))
  (and
  (and
  (and
  (and (= (get temp___444 0 0) temp___445)
  (= (get temp___444 0 1) temp___446)) (= (get temp___444 0 2) temp___447))
  (and
  (and (= (get temp___444 1 0) temp___448)
  (= (get temp___444 1 1) temp___449)) (= (get temp___444 1 2) temp___450)))
  (and
  (and (= (get temp___444 2 0) temp___451)
  (= (get temp___444 2 1) temp___452)) (= (get temp___444 2 2) temp___453))))))

;; def_axiom
  (assert
  (forall ((temp___458 Bool) (temp___459 Bool) (temp___460 Bool)
  (temp___461 Bool) (temp___462 Bool) (temp___463 Bool) (temp___464 Bool)
  (temp___465 Bool) (temp___466 Bool))
  (let ((temp___457 (temp_____aggregate_def_456 temp___458 temp___459
                    temp___460 temp___461 temp___462 temp___463 temp___464
                    temp___465 temp___466)))
  (and
  (and
  (and
  (and (= (get temp___457 0 0) temp___458)
  (= (get temp___457 0 1) temp___459)) (= (get temp___457 0 2) temp___460))
  (and
  (and (= (get temp___457 1 0) temp___461)
  (= (get temp___457 1 1) temp___462)) (= (get temp___457 1 2) temp___463)))
  (and
  (and (= (get temp___457 2 0) temp___464)
  (= (get temp___457 2 1) temp___465)) (= (get temp___457 2 2) temp___466))))))

;; def_axiom
  (assert
  (forall ((temp___471 Bool) (temp___472 Bool) (temp___473 Bool)
  (temp___474 Bool) (temp___475 Bool) (temp___476 Bool) (temp___477 Bool)
  (temp___478 Bool) (temp___479 Bool))
  (let ((temp___470 (temp_____aggregate_def_469 temp___471 temp___472
                    temp___473 temp___474 temp___475 temp___476 temp___477
                    temp___478 temp___479)))
  (and
  (and
  (and
  (and (= (get temp___470 0 0) temp___471)
  (= (get temp___470 0 1) temp___472)) (= (get temp___470 0 2) temp___473))
  (and
  (and (= (get temp___470 1 0) temp___474)
  (= (get temp___470 1 1) temp___475)) (= (get temp___470 1 2) temp___476)))
  (and
  (and (= (get temp___470 2 0) temp___477)
  (= (get temp___470 2 1) temp___478)) (= (get temp___470 2 2) temp___479))))))

;; def_axiom
  (assert
  (forall ((temp___484 Bool) (temp___485 Bool) (temp___486 Bool)
  (temp___487 Bool) (temp___488 Bool) (temp___489 Bool) (temp___490 Bool)
  (temp___491 Bool) (temp___492 Bool))
  (let ((temp___483 (temp_____aggregate_def_482 temp___484 temp___485
                    temp___486 temp___487 temp___488 temp___489 temp___490
                    temp___491 temp___492)))
  (and
  (and
  (and
  (and (= (get temp___483 0 0) temp___484)
  (= (get temp___483 0 1) temp___485)) (= (get temp___483 0 2) temp___486))
  (and
  (and (= (get temp___483 1 0) temp___487)
  (= (get temp___483 1 1) temp___488)) (= (get temp___483 1 2) temp___489)))
  (and
  (and (= (get temp___483 2 0) temp___490)
  (= (get temp___483 2 1) temp___491)) (= (get temp___483 2 2) temp___492))))))

;; def_axiom
  (assert
  (forall ((temp___497 Bool) (temp___498 Bool) (temp___499 Bool)
  (temp___500 Bool) (temp___501 Bool) (temp___502 Bool) (temp___503 Bool)
  (temp___504 Bool) (temp___505 Bool))
  (let ((temp___496 (temp_____aggregate_def_495 temp___497 temp___498
                    temp___499 temp___500 temp___501 temp___502 temp___503
                    temp___504 temp___505)))
  (and
  (and
  (and
  (and (= (get temp___496 0 0) temp___497)
  (= (get temp___496 0 1) temp___498)) (= (get temp___496 0 2) temp___499))
  (and
  (and (= (get temp___496 1 0) temp___500)
  (= (get temp___496 1 1) temp___501)) (= (get temp___496 1 2) temp___502)))
  (and
  (and (= (get temp___496 2 0) temp___503)
  (= (get temp___496 2 1) temp___504)) (= (get temp___496 2 2) temp___505))))))

;; def_axiom
  (assert
  (forall ((temp___510 Bool) (temp___511 Bool) (temp___512 Bool)
  (temp___513 Bool) (temp___514 Bool) (temp___515 Bool) (temp___516 Bool)
  (temp___517 Bool) (temp___518 Bool))
  (let ((temp___509 (temp_____aggregate_def_508 temp___510 temp___511
                    temp___512 temp___513 temp___514 temp___515 temp___516
                    temp___517 temp___518)))
  (and
  (and
  (and
  (and (= (get temp___509 0 0) temp___510)
  (= (get temp___509 0 1) temp___511)) (= (get temp___509 0 2) temp___512))
  (and
  (and (= (get temp___509 1 0) temp___513)
  (= (get temp___509 1 1) temp___514)) (= (get temp___509 1 2) temp___515)))
  (and
  (and (= (get temp___509 2 0) temp___516)
  (= (get temp___509 2 1) temp___517)) (= (get temp___509 2 2) temp___518))))))

;; def_axiom
  (assert
  (forall ((temp___523 Bool) (temp___524 Bool) (temp___525 Bool)
  (temp___526 Bool) (temp___527 Bool) (temp___528 Bool) (temp___529 Bool)
  (temp___530 Bool) (temp___531 Bool))
  (let ((temp___522 (temp_____aggregate_def_521 temp___523 temp___524
                    temp___525 temp___526 temp___527 temp___528 temp___529
                    temp___530 temp___531)))
  (and
  (and
  (and
  (and (= (get temp___522 0 0) temp___523)
  (= (get temp___522 0 1) temp___524)) (= (get temp___522 0 2) temp___525))
  (and
  (and (= (get temp___522 1 0) temp___526)
  (= (get temp___522 1 1) temp___527)) (= (get temp___522 1 2) temp___528)))
  (and
  (and (= (get temp___522 2 0) temp___529)
  (= (get temp___522 2 1) temp___530)) (= (get temp___522 2 2) temp___531))))))

(declare-fun is_empty ((Array Int (Array Int cell)) Int Int) Bool)

(declare-fun is_empty__function_guard (Bool (Array Int (Array Int cell)) Int
  Int) Bool)

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((b (Array Int (Array Int cell))))
  (forall ((y Int) (x Int))
  (! (= (= (is_empty b y x) true)
     (and (and (in_range10 x) (in_range9 y))
     (= (to_rep (let ((temp___709 (select b y))) (select temp___709 x))) 0))) :pattern (
  (is_empty b y x)) ))))

(declare-fun no_overlap ((Array Int (Array Int cell)) us_rep) Bool)

(declare-fun no_overlap__function_guard (Bool (Array Int (Array Int cell))
  us_rep) Bool)

;; no_overlap__post_axiom
  (assert true)

;; no_overlap__def_axiom
  (assert
  (forall ((b (Array Int (Array Int cell))))
  (forall ((p us_rep))
  (! (= (= (no_overlap b p) true)
     (ite (= (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) 2)
     (and
     (and
     (and
     (= (is_empty b (to_rep3 (rec__patris__piece__y (us_split_fields1 p)))
        (to_rep2 (rec__patris__piece__x (us_split_fields1 p)))) true)
     (= (is_empty b (to_rep3 (rec__patris__piece__y (us_split_fields1 p)))
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) true))
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1)
        (to_rep2 (rec__patris__piece__x (us_split_fields1 p)))) true))
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) 1)
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) 1)) true))
     (ite (= (to_rep1 (rec__patris__piece__s (us_split_fields1 p))) 1)
     (forall ((y Int))
     (=> (and (<= 0 y) (<= y 3))
     (forall ((x Int))
     (=> (and (<= 0 x) (<= x 3))
     (=>
     (= (let ((temp___728 (select possible_i_shapes (to_rep4
                                                    (rec__patris__piece__d
                                                    (us_split_fields1 p))))))
        (get temp___728 y x)) true)
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) y)
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) x)) true))))))
     (forall ((y Int))
     (=> (and (<= 0 y) (<= y 2))
     (forall ((x Int))
     (=> (and (<= 0 x) (<= x 2))
     (=>
     (= (let ((temp___729 (get1 possible_three_shapes
                          (to_rep1
                          (rec__patris__piece__s (us_split_fields1 p)))
                          (to_rep4
                          (rec__patris__piece__d (us_split_fields1 p))))))
        (get temp___729 y x)) true)
     (= (is_empty b
        (+ (to_rep3 (rec__patris__piece__y (us_split_fields1 p))) y)
        (+ (to_rep2 (rec__patris__piece__x (us_split_fields1 p))) x)) true))))))))) :pattern (
  (no_overlap b p)) ))))

;; valid_configuration__post_axiom
  (assert true)

;; valid_configuration__def_axiom
  (assert
  (forall ((cur_board (Array Int (Array Int cell))))
  (forall ((cur_state Int))
  (forall ((cur_piece us_rep))
  (! (= (= (valid_configuration1 cur_board cur_state cur_piece) true)
     (ite (or (= cur_state 0) (= cur_state 1))
     (= (no_overlap cur_board cur_piece) true)
     (=> (not (= cur_state 2))
     (=> (not (= cur_state 4)) (= (no_complete_lines cur_board) true))))) :pattern (
  (valid_configuration1 cur_board cur_state cur_piece)) )))))

(assert
;; defqtvc
 ;; File "patris.ads", line 250, characters 0-0
  (not
  (forall ((cur_board (Array Int (Array Int cell)))
  (cur_piece__split_fields us_split_fields) (cur_state Int)
  (score_nbr (_ BitVec 32)) (level_nbr (_ BitVec 32))
  (line_counter (_ BitVec 32)) (to_line Int) (complete_lines (_ BitVec 32))
  (del_line Int) (spark__branch Bool)
  (cur_board1 (Array Int (Array Int cell))) (to_line1 Int)
  (complete_lines1 (_ BitVec 32)) (usf Int))
  (=> (dynamic_invariant2 score_nbr true false true true)
  (=> (dynamic_invariant2 level_nbr true false true true)
  (=> (dynamic_invariant2 line_counter true false true true)
  (=> (dynamic_invariant1 cur_state true false true true)
  (=> (= (get_state cur_state) 2)
  (=>
  (= (valid_configuration cur_board cur_piece__split_fields cur_state) true)
  (=>
  (= (patris__delete_complete_lines__empty_line__aggregate_def 0) empty_line)
  (=> (= to_line 20)
  (=> (dynamic_invariant3 to_line true false true true)
  (=> (= complete_lines #x00000000)
  (=> (dynamic_invariant2 complete_lines true false true true)
  (=> (= del_line 1)
  (=>
  (= (and (ite (<= 1 del_line) true false) (ite (<= del_line 20) true false)) true)
  (=>
  (let ((o (select cur_board del_line)))
  (let ((o1 (is_complete_line o)))
  (and
  (= (= o1 true)
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 10)) (not (= (to_rep (select o x)) 0)))))
  (and (= spark__branch o1)
  (ite (= spark__branch true)
  (and (= cur_board1 (store cur_board del_line empty_line))
  (and (= to_line1 del_line)
  (exists ((o2 (_ BitVec 32)))
  (and
  (let ((temp___919 (bvadd complete_lines #x00000001)))
  (ite (bvule (bvsub #x000186A0 complete_lines) #x00000001)
  (= o2 (bvsub temp___919 #x000186A0)) (= o2 temp___919)))
  (and (= complete_lines1 o2)
  (= (to_rep (select (select cur_board1 del_line) 1)) 0))))))
  (and (and (= cur_board1 cur_board) (= to_line1 to_line))
  (= complete_lines1 complete_lines)))))))
  (=>
  (= (and (ite (<= 1 usf) true false) (ite (<= usf del_line) true false)) true)
  (<= 1 usf)))))))))))))))))))
(check-sat)
