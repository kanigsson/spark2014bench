(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float64)))))
(declare-const x Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort ft 0)

(declare-fun user_eq (ft ft) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)

(declare-const dummy ft)

(declare-datatypes ((ft__ref 0))
(((ft__refqtmk (ft__content ft)))))
(define-fun ft__ref_ft__content__2__projection ((a ft__ref)) ft (ft__content
                                                                a))

(declare-fun to_rep (ft) Float64)

(declare-fun of_rep (Float64) ft)

;; inversion_axiom
  (assert
  (forall ((x1 ft)) (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)) )))

;; range_axiom
  (assert
  (forall ((x1 ft)) (! (fp.isFinite64 (to_rep x1)) :pattern ((to_rep x1)) )))

;; coerce_axiom
  (assert
  (forall ((x1 Float64))
  (! (=> (fp.isFinite64 x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep
                                                                   (of_rep
                                                                   x1))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__foo__double_tests__test_record_1__rec__a ft)(rec__foo__double_tests__test_record_1__rec__b ft)(rec__foo__double_tests__test_record_1__rec__c ft)))))
(define-fun us_split_fields_rec__foo__double_tests__test_record_1__rec__a__projection ((a us_split_fields)) ft 
  (rec__foo__double_tests__test_record_1__rec__a a))

(define-fun us_split_fields_rec__foo__double_tests__test_record_1__rec__b__projection ((a us_split_fields)) ft 
  (rec__foo__double_tests__test_record_1__rec__b a))

(define-fun us_split_fields_rec__foo__double_tests__test_record_1__rec__c__projection ((a us_split_fields)) ft 
  (rec__foo__double_tests__test_record_1__rec__c a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (fp.eq (to_rep
                               (rec__foo__double_tests__test_record_1__rec__a
                               (us_split_fields1 a))) (to_rep
                                                      (rec__foo__double_tests__test_record_1__rec__a
                                                      (us_split_fields1 b))))
                        (fp.eq (to_rep
                               (rec__foo__double_tests__test_record_1__rec__b
                               (us_split_fields1 a))) (to_rep
                                                      (rec__foo__double_tests__test_record_1__rec__b
                                                      (us_split_fields1 b)))))
                        (fp.eq (to_rep
                               (rec__foo__double_tests__test_record_1__rec__c
                               (us_split_fields1 a))) (to_rep
                                                      (rec__foo__double_tests__test_record_1__rec__c
                                                      (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const foo__double_tests__test_record_1__rec__a__first__bit Int)

(declare-const foo__double_tests__test_record_1__rec__a__last__bit Int)

(declare-const foo__double_tests__test_record_1__rec__a__position Int)

;; foo__double_tests__test_record_1__rec__a__first__bit_axiom
  (assert (<= 0 foo__double_tests__test_record_1__rec__a__first__bit))

;; foo__double_tests__test_record_1__rec__a__last__bit_axiom
  (assert
  (< foo__double_tests__test_record_1__rec__a__first__bit foo__double_tests__test_record_1__rec__a__last__bit))

;; foo__double_tests__test_record_1__rec__a__position_axiom
  (assert (<= 0 foo__double_tests__test_record_1__rec__a__position))

(declare-const foo__double_tests__test_record_1__rec__b__first__bit Int)

(declare-const foo__double_tests__test_record_1__rec__b__last__bit Int)

(declare-const foo__double_tests__test_record_1__rec__b__position Int)

;; foo__double_tests__test_record_1__rec__b__first__bit_axiom
  (assert (<= 0 foo__double_tests__test_record_1__rec__b__first__bit))

;; foo__double_tests__test_record_1__rec__b__last__bit_axiom
  (assert
  (< foo__double_tests__test_record_1__rec__b__first__bit foo__double_tests__test_record_1__rec__b__last__bit))

;; foo__double_tests__test_record_1__rec__b__position_axiom
  (assert (<= 0 foo__double_tests__test_record_1__rec__b__position))

(declare-const foo__double_tests__test_record_1__rec__c__first__bit Int)

(declare-const foo__double_tests__test_record_1__rec__c__last__bit Int)

(declare-const foo__double_tests__test_record_1__rec__c__position Int)

;; foo__double_tests__test_record_1__rec__c__first__bit_axiom
  (assert (<= 0 foo__double_tests__test_record_1__rec__c__first__bit))

;; foo__double_tests__test_record_1__rec__c__last__bit_axiom
  (assert
  (< foo__double_tests__test_record_1__rec__c__first__bit foo__double_tests__test_record_1__rec__c__last__bit))

;; foo__double_tests__test_record_1__rec__c__position_axiom
  (assert (<= 0 foo__double_tests__test_record_1__rec__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((rec____ref 0))
(((rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__2__projection ((a rec____ref)) us_rep 
  (rec____content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant ((temp___expr_214 Float64)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)
  (temp___do_typ_inv_213 Bool)) Bool (=>
                                     (or (= temp___is_init_210 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                     (fp.isFinite64 temp___expr_214)))

(assert
;; defqtvc
 ;; File "generic_float_tests.adb", line 404, characters 0-0
  (not
  (forall ((y Float64) (o ft) (o1 ft) (o2 ft)
  (r__split_fields us_split_fields) (o3 Float64) (o4 ft)
  (r__split_fields1 us_split_fields) (o5 Float64) (y1 Float64))
  (=> (dynamic_invariant x true false true true)
  (=> (dynamic_invariant y false false true true)
  (=>
  (= (to_rep o) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))
  (=> (= (to_rep o1) x)
  (=>
  (= (to_rep o2) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
  (=> (= r__split_fields (us_split_fieldsqtmk o2 o1 o))
  (=>
  (= (to_rep (rec__foo__double_tests__test_record_1__rec__b r__split_fields)) o3)
  (=> (= (to_rep o4) o3)
  (=>
  (= r__split_fields1 (us_split_fieldsqtmk o4
                      (rec__foo__double_tests__test_record_1__rec__b
                      r__split_fields)
                      (rec__foo__double_tests__test_record_1__rec__c
                      r__split_fields)))
  (=>
  (= (to_rep
     (rec__foo__double_tests__test_record_1__rec__a r__split_fields1)) o5)
  (=> (= y1 o5) (fp.eq x y1)))))))))))))))
(check-sat)
