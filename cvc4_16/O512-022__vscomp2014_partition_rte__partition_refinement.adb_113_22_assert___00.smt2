(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun to_rep ((x positive)) Int (positiveqtint x))

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep1 ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__partition_refinement__inverse_sets__cursor__node count_type)))))
(define-fun us_split_fields_rec__partition_refinement__inverse_sets__cursor__node__projection ((a us_split_fields)) count_type 
  (rec__partition_refinement__inverse_sets__cursor__node a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__partition_refinement__inverse_sets__cursor__node
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__partition_refinement__inverse_sets__cursor__node
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const partition_refinement__inverse_sets__cursor__node__first__bit Int)

(declare-const partition_refinement__inverse_sets__cursor__node__last__bit Int)

(declare-const partition_refinement__inverse_sets__cursor__node__position Int)

;; partition_refinement__inverse_sets__cursor__node__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__cursor__node__first__bit))

;; partition_refinement__inverse_sets__cursor__node__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__cursor__node__first__bit partition_refinement__inverse_sets__cursor__node__last__bit))

;; partition_refinement__inverse_sets__cursor__node__position_axiom
  (assert (<= 0 partition_refinement__inverse_sets__cursor__node__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep)))))
(define-fun cursor__ref_cursor__content__2__projection ((a cursor__ref)) us_rep 
  (cursor__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__partition_refinement__inverse_sets__map__capacity count_type)))))
(define-fun us_split_discrs_rec__partition_refinement__inverse_sets__map__capacity__projection ((a us_split_discrs)) count_type 
  (rec__partition_refinement__inverse_sets__map__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__partition_refinement__inverse_sets__map us_main_type)))))
(define-fun us_split_fields_rec__partition_refinement__inverse_sets__map__projection ((a us_split_fields2)) us_main_type 
  (rec__partition_refinement__inverse_sets__map a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__partition_refinement__inverse_sets__map__capacity
                            (us_split_discrs1 a))) (to_rep1
                                                   (rec__partition_refinement__inverse_sets__map__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__partition_refinement__inverse_sets__map
                            (us_split_fields3 a))
                            (rec__partition_refinement__inverse_sets__map
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range3 ((rec__partition_refinement__inverse_sets__map__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__partition_refinement__inverse_sets__map__capacity1 
  (to_rep1 (rec__partition_refinement__inverse_sets__map__capacity a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const partition_refinement__inverse_sets__map__capacity__first__bit Int)

(declare-const partition_refinement__inverse_sets__map__capacity__last__bit Int)

(declare-const partition_refinement__inverse_sets__map__capacity__position Int)

;; partition_refinement__inverse_sets__map__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit))

;; partition_refinement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__map__capacity__first__bit partition_refinement__inverse_sets__map__capacity__last__bit))

;; partition_refinement__inverse_sets__map__capacity__position_axiom
  (assert (<= 0 partition_refinement__inverse_sets__map__capacity__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep1)))))
(define-fun map__ref_map__content__2__projection ((a map__ref)) us_rep1 
  (map__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep2)))))
(define-fun sequence__ref_sequence__content__2__projection ((a sequence__ref)) us_rep2 
  (sequence__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(define-fun oeq ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun keys (us_rep1) us_rep2)

(declare-fun keys__function_guard (us_rep2 us_rep1) Bool)

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(declare-fun length2 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 us_rep3)))))
(define-fun map__ref_map__content__3__projection ((a map__ref1)) us_rep3 
  (map__content1 a))

(declare-fun has_key (us_rep3 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep3 Int) Bool)

(define-fun iter_has_element ((container us_rep2)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep2 Int) Bool)

(define-fun k_bigger_than_range ((container us_rep2) (fst Int) (lst Int)
  (key Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (< (get container i) key)))
                  true false))

(declare-fun k_bigger_than_range__function_guard (Bool us_rep2 Int Int
  Int) Bool)

(define-fun k_smaller_than_range ((container us_rep2) (fst Int) (lst Int)
  (key Int)) Bool (ite (forall ((i Int))
                       (=> (and (<= fst i) (<= i lst))
                       (< key (get container i))))
                  true false))

(declare-fun k_smaller_than_range__function_guard (Bool us_rep2 Int Int
  Int) Bool)

(define-fun k_is_find ((container us_rep2) (key Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (k_bigger_than_range container 1 (- position 1)
                            key) (distinct 1 0)) (ite (< position (length1
                                                                  container))
                                                 (k_smaller_than_range
                                                 container (+ position 1)
                                                 (length1 container) key)
                                                 (distinct 1 0))))

(declare-fun k_is_find__function_guard (Bool us_rep2 Int Int) Bool)

(declare-fun find (us_rep2 Int) Int)

(declare-fun find__function_guard (Int us_rep2 Int) Bool)

(declare-fun model1 (us_rep1) us_rep3)

(declare-fun model__function_guard (us_rep3 us_rep1) Bool)

(declare-fun oeq1 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq6 (key_type key_type) Bool)

(declare-const dummy6 key_type)

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content key_type)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref)) key_type 
  (key_type__content a))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (extended_index extended_index) Bool)

(declare-const dummy7 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_888 us_rep2)
  (temp___skip_top_level_889 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_889 true))
                                         (= (length1 temp___expr_888) 0)))

;; keys__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (keys container)))
     (and
     (and
     (and (= (length1 result) (length2 container))
     (forall ((temp___960 Int))
     (=>
     (and (in_range5 temp___960)
     (= (iter_has_element result temp___960) true))
     (= (has_key (model1 container) (get result temp___960)) true))))
     (forall ((key Int))
     (=> (and (in_range4 key) (= (has_key (model1 container) key) true))
     (and (< 0 (find result key))
     (= (equivalent_keys (get result (find result key)) key) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length2 container)))
     (and (= (find result (get result i)) i)
     (= (k_is_find result (get result i) i) true)))))) :pattern ((keys
                                                                 container)) )))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq8 (us_rep4 us_rep4) Bool)

(declare-const dummy8 us_rep4)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 us_rep4)))))
(define-fun map__ref_map__content__4__projection ((a map__ref2)) us_rep4 
  (map__content2 a))

(declare-datatypes ((key_type__ref1 0))
(((key_type__refqtmk1 (key_type__content1 us_rep)))))
(define-fun key_type__ref_key_type__content__4__projection ((a key_type__ref1)) us_rep 
  (key_type__content1 a))

(declare-fun has_key1 (us_rep4 us_rep) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep) Bool)

(declare-fun positions (us_rep1) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep1) Bool)

(define-fun has_element ((container us_rep1)
  (position us_rep)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep1 us_rep) Bool)

(declare-fun get1 (us_rep4 us_rep) Int)

(declare-fun get__function_guard1 (Int us_rep4 us_rep) Bool)

(define-fun key ((container us_rep1)
  (position us_rep)) Int (get (keys container)
                         (get1 (positions container) position)))

(declare-fun key__function_guard (Int us_rep1 us_rep) Bool)

(declare-sort key_type1 0)

(declare-fun key_typeqtint1 (key_type1) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type1))
  (and (<= 1 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (key_type1 key_type1) Bool)

(declare-const dummy9 key_type1)

(declare-datatypes ((key_type__ref2 0))
(((key_type__refqtmk2 (key_type__content2 key_type1)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref2)) key_type1 
  (key_type__content2 a))

(define-fun dynamic_invariant1 ((temp___expr_800 Int)
  (temp___is_init_796 Bool) (temp___skip_constant_797 Bool)
  (temp___do_toplevel_798 Bool)
  (temp___do_typ_inv_799 Bool)) Bool (=>
                                     (or (= temp___is_init_796 true)
                                     (<= 1 2147483647)) (in_range6
                                     temp___expr_800)))

(declare-fun get2 (us_rep3 Int) Int)

(declare-fun get__function_guard2 (Int us_rep3 Int) Bool)

(define-fun element ((container us_rep1)
  (position us_rep)) Int (get2 (model1 container) (key container position)))

(declare-fun element__function_guard (Int us_rep1 us_rep) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 5))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (element_type element_type) Bool)

(declare-const dummy10 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_807 Int)
  (temp___is_init_803 Bool) (temp___skip_constant_804 Bool)
  (temp___do_toplevel_805 Bool)
  (temp___do_typ_inv_806 Bool)) Bool (=>
                                     (or (= temp___is_init_803 true)
                                     (<= 0 5)) (in_range7 temp___expr_807)))

(define-fun contains ((container us_rep1)
  (key1 Int)) Bool (has_key (model1 container) key1))

(declare-fun contains__function_guard (Bool us_rep1 Int) Bool)

(define-fun element1 ((container us_rep1)
  (key1 Int)) Int (get2 (model1 container) key1))

(declare-fun element__function_guard1 (Int us_rep1 Int) Bool)

(declare-fun keys_included (us_rep3 us_rep3) Bool)

(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

(define-fun same_keys ((left us_rep3)
  (right us_rep3)) Bool (and (keys_included left right) (keys_included right
                                                        left)))

(declare-fun same_keys__function_guard (Bool us_rep3 us_rep3) Bool)

(declare-fun elements_equal_except (us_rep3 us_rep3 Int) Bool)

(declare-fun elements_equal_except__function_guard (Bool us_rep3 us_rep3
  Int) Bool)

(define-fun equal_except ((left us_rep2) (right us_rep2)
  (position Int)) Bool (and (= (length1 left) (length1 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (= 
                                                                    (get left
                                                                    i) 
                                                                    (get
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep2 us_rep2 Int) Bool)

(declare-fun oeq2 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep4 us_rep4) Bool)

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 10001))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (capacity_range capacity_range) Bool)

(declare-const dummy11 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep2 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range8
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__partition_refinement__partitions__vector__capacity__projection ((a us_split_discrs2)) capacity_range 
  (rec__partition_refinement__partitions__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__partition_refinement__partitions__vector us_main_type4)))))
(define-fun us_split_fields_rec__partition_refinement__partitions__vector__projection ((a us_split_fields4)) us_main_type4 
  (rec__partition_refinement__partitions__vector a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk2
  (us_split_discrs3 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep5)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__6__projection ((a us_rep5)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq5 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep2
                            (rec__partition_refinement__partitions__vector__capacity
                            (us_split_discrs3 a))) (to_rep2
                                                   (rec__partition_refinement__partitions__vector__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq4
                            (rec__partition_refinement__partitions__vector
                            (us_split_fields5 a))
                            (rec__partition_refinement__partitions__vector
                            (us_split_fields5 b))) true))
                    true false))

(define-fun in_range9 ((rec__partition_refinement__partitions__vector__capacity1 Int)
  (a us_split_discrs2)) Bool (= rec__partition_refinement__partitions__vector__capacity1 
  (to_rep2 (rec__partition_refinement__partitions__vector__capacity a))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const partition_refinement__partitions__vector__capacity__first__bit Int)

(declare-const partition_refinement__partitions__vector__capacity__last__bit Int)

(declare-const partition_refinement__partitions__vector__capacity__position Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position))

(declare-fun user_eq12 (us_rep5 us_rep5) Bool)

(declare-const dummy12 us_rep5)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep5)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep5 
  (vector__content a))

(define-fun capacity ((container us_rep5)) Int (to_rep2
                                               (rec__partition_refinement__partitions__vector__capacity
                                               (us_split_discrs3 container))))

(declare-fun capacity__function_guard (Int us_rep5) Bool)

(define-fun dynamic_invariant3 ((temp___expr_1157 Int)
  (temp___is_init_1153 Bool) (temp___skip_constant_1154 Bool)
  (temp___do_toplevel_1155 Bool)
  (temp___do_typ_inv_1156 Bool)) Bool (=>
                                      (or (= temp___is_init_1153 true)
                                      (<= 0 10001)) (in_range8
                                      temp___expr_1157)))

(declare-fun length3 (us_rep5) Int)

(declare-fun length__function_guard2 (Int us_rep5) Bool)

(declare-fun oeq3 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep5 us_rep5) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq12 a b) (oeq3 a b)) :pattern ((user_eq12 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (length3 container)))
     (and (<= result (capacity container)) (dynamic_invariant3 result true
     false true true))) :pattern ((length3 container)) )))

(declare-sort index_count 0)

(declare-fun index_countqtint (index_count) Int)

;; index_count'axiom
  (assert
  (forall ((i index_count))
  (and (<= 0 (index_countqtint i)) (<= (index_countqtint i) 6))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (index_count index_count) Bool)

(declare-const dummy13 index_count)

(declare-datatypes ((index_count__ref 0))
(((index_count__refqtmk (index_count__content index_count)))))
(define-fun index_count__ref_index_count__content__projection ((a index_count__ref)) index_count 
  (index_count__content a))

(define-fun to_rep3 ((x index_count)) Int (index_countqtint x))

(declare-fun of_rep3 (Int) index_count)

;; inversion_axiom
  (assert
  (forall ((x index_count))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x index_count)) (! (in_range10
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                               (of_rep3 x))) )))

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 5))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (index index) Bool)

(declare-const dummy14 index)

(declare-datatypes ((index__ref 0))
(((index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(define-fun to_rep4 ((x index)) Int (indexqtint x))

(declare-fun of_rep4 (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range11 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                               (of_rep4 x))) )))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__partition_refinement__interval__first index)(rec__partition_refinement__interval__last index)(rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_rec__partition_refinement__interval__first__projection ((a us_split_fields6)) index 
  (rec__partition_refinement__interval__first a))

(define-fun us_split_fields_rec__partition_refinement__interval__last__projection ((a us_split_fields6)) index 
  (rec__partition_refinement__interval__last a))

(define-fun us_split_fields_rec__partition_refinement__interval__count__projection ((a us_split_fields6)) index_count 
  (rec__partition_refinement__interval__count a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep6 0))
(((us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep6)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq6 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (and
                         (= (to_rep4
                            (rec__partition_refinement__interval__first
                            (us_split_fields7 a))) (to_rep4
                                                   (rec__partition_refinement__interval__first
                                                   (us_split_fields7 b))))
                         (= (to_rep4
                            (rec__partition_refinement__interval__last
                            (us_split_fields7 a))) (to_rep4
                                                   (rec__partition_refinement__interval__last
                                                   (us_split_fields7 b)))))
                         (= (to_rep3
                            (rec__partition_refinement__interval__count
                            (us_split_fields7 a))) (to_rep3
                                                   (rec__partition_refinement__interval__count
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const partition_refinement__interval__first__first__bit Int)

(declare-const partition_refinement__interval__first__last__bit Int)

(declare-const partition_refinement__interval__first__position Int)

;; partition_refinement__interval__first__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__first__first__bit))

;; partition_refinement__interval__first__last__bit_axiom
  (assert
  (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))

;; partition_refinement__interval__first__position_axiom
  (assert (<= 0 partition_refinement__interval__first__position))

(declare-const partition_refinement__interval__last__first__bit Int)

(declare-const partition_refinement__interval__last__last__bit Int)

(declare-const partition_refinement__interval__last__position Int)

;; partition_refinement__interval__last__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__last__first__bit))

;; partition_refinement__interval__last__last__bit_axiom
  (assert
  (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))

;; partition_refinement__interval__last__position_axiom
  (assert (<= 0 partition_refinement__interval__last__position))

(declare-const partition_refinement__interval__count__first__bit Int)

(declare-const partition_refinement__interval__count__last__bit Int)

(declare-const partition_refinement__interval__count__position Int)

;; partition_refinement__interval__count__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__count__first__bit))

;; partition_refinement__interval__count__last__bit_axiom
  (assert
  (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))

;; partition_refinement__interval__count__position_axiom
  (assert (<= 0 partition_refinement__interval__count__position))

(declare-fun user_eq15 (us_rep6 us_rep6) Bool)

(declare-const dummy15 us_rep6)

(declare-datatypes ((interval__ref 0))
(((interval__refqtmk (interval__content us_rep6)))))
(define-fun interval__ref_interval__content__projection ((a interval__ref)) us_rep6 
  (interval__content a))

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 us_rep6)))))
(define-fun element_type__ref_element_type__content__8__projection ((a element_type__ref1)) us_rep6 
  (element_type__content1 a))

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq7 (us_rep7 us_rep7) Bool)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-fun user_eq16 (us_rep7 us_rep7) Bool)

(declare-const dummy16 us_rep7)

(declare-datatypes ((sequence__ref1 0))
(((sequence__refqtmk1 (sequence__content1 us_rep7)))))
(define-fun sequence__ref_sequence__content__3__projection ((a sequence__ref1)) us_rep7 
  (sequence__content1 a))

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 us_rep6)))))
(define-fun element_type__ref_element_type__content__9__projection ((a element_type__ref2)) us_rep6 
  (element_type__content2 a))

(declare-fun get3 (us_rep7 Int) us_rep6)

(declare-fun get__function_guard3 (us_rep6 us_rep7 Int) Bool)

(declare-fun model2 (us_rep5) us_rep7)

(declare-fun model__function_guard1 (us_rep7 us_rep5) Bool)

(define-fun element2 ((container us_rep5)
  (index1 Int)) us_rep6 (get3 (model2 container) index1))

(declare-fun element__function_guard2 (us_rep6 us_rep5 Int) Bool)

(declare-fun length4 (us_rep7) Int)

(declare-fun length__function_guard3 (Int us_rep7) Bool)

(define-fun last1 ((container us_rep7)) Int (+ (- 1) (length4 container)))

(declare-fun last__function_guard1 (Int us_rep7) Bool)

(define-fun last_index ((container us_rep5)) Int (last1 (model2 container)))

(declare-fun last_index__function_guard (Int us_rep5) Bool)

(declare-fun first_index__function_guard (Int us_rep5) Bool)

(define-fun equal_except1 ((left us_rep7) (right us_rep7)
  (position Int)) Bool (and (= (length4 left) (length4 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 0 i)
                                                                    (<= i 
                                                                    (last1
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (= 
                                                                    (bool_eq6
                                                                    (get3
                                                                    left i)
                                                                    (get3
                                                                    right i)) true))))
                                                               true false)))

(declare-fun equal_except__function_guard1 (Bool us_rep7 us_rep7 Int) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-const partition_refinement__inverse_sets__map__capacity__first__bit1 Int)

(declare-const partition_refinement__inverse_sets__map__capacity__last__bit1 Int)

(declare-const partition_refinement__inverse_sets__map__capacity__position1 Int)

;; partition_refinement__inverse_sets__map__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit1))

;; partition_refinement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__map__capacity__first__bit1 partition_refinement__inverse_sets__map__capacity__last__bit1))

;; partition_refinement__inverse_sets__map__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__position1))

(declare-fun user_eq17 (us_rep1 us_rep1) Bool)

(declare-const dummy17 us_rep1)

(declare-datatypes ((inverse_set__ref 0))
(((inverse_set__refqtmk (inverse_set__content us_rep1)))))
(define-fun inverse_set__ref_inverse_set__content__projection ((a inverse_set__ref)) us_rep1 
  (inverse_set__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq17 a b) (oeq1 a b)) :pattern ((user_eq17 a b)) )))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const partition_refinement__partitions__vector__capacity__first__bit1 Int)

(declare-const partition_refinement__partitions__vector__capacity__last__bit1 Int)

(declare-const partition_refinement__partitions__vector__capacity__position1 Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit1 
  partition_refinement__partitions__vector__capacity__last__bit1))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position1))

(declare-fun user_eq18 (us_rep5 us_rep5) Bool)

(declare-const dummy18 us_rep5)

(declare-datatypes ((partition__ref 0))
(((partition__refqtmk (partition__content us_rep5)))))
(define-fun partition__ref_partition__content__projection ((a partition__ref)) us_rep5 
  (partition__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq18 a b) (oeq3 a b)) :pattern ((user_eq18 a b)) )))

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq8 ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const d__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const p__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort partition_index 0)

(declare-fun partition_indexqtint (partition_index) Int)

;; partition_index'axiom
  (assert
  (forall ((i partition_index))
  (and (<= 0 (partition_indexqtint i)) (<= (partition_indexqtint i) 10000))))

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq19 (partition_index partition_index) Bool)

(declare-const dummy19 partition_index)

(declare-datatypes ((partition_index__ref 0))
(((partition_index__refqtmk (partition_index__content partition_index)))))
(define-fun partition_index__ref_partition_index__content__projection ((a partition_index__ref)) partition_index 
  (partition_index__content a))

(define-fun to_rep5 ((x partition_index)) Int (partition_indexqtint x))

(declare-fun of_rep5 (Int) partition_index)

;; inversion_axiom
  (assert
  (forall ((x partition_index))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x partition_index)) (! (in_range12
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(declare-datatypes ((map__ref4 0))
(((map__refqtmk4 (map__content4 (Array Int partition_index))))))
(declare-fun slide1 ((Array Int partition_index) Int
  Int) (Array Int partition_index))

;; slide_eq
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq9 ((a (Array Int partition_index)) (a__first Int)
  (a__last Int) (b (Array Int partition_index)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_403 Int))
                           (=>
                           (and (<= a__first temp___idx_403)
                           (<= temp___idx_403 a__last))
                           (= (to_rep5 (select a temp___idx_403)) (to_rep5
                                                                  (select b (+ (- b__first a__first) temp___idx_403)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq9 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_403 Int))
  (=> (and (<= a__first temp___idx_403) (<= temp___idx_403 a__last))
  (= (to_rep5 (select a temp___idx_403)) (to_rep5
                                         (select b (+ (- b__first a__first) temp___idx_403)))))))))))

(declare-const f (Array Int partition_index))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const x_elem Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const j Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const a_old (Array Int positive))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const a_update (Array Int positive))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun dynamic_invariant4 ((temp___expr_423 Int)
  (temp___is_init_419 Bool) (temp___skip_constant_420 Bool)
  (temp___do_toplevel_421 Bool)
  (temp___do_typ_inv_422 Bool)) Bool (=>
                                     (or (= temp___is_init_419 true)
                                     (<= 0 5)) (in_range11 temp___expr_423)))

(declare-fun temp_____aggregate_def_404 ((Array Int positive) Int Int Int
  Int) (Array Int positive))

;; a_update__def_axiom
  (assert
  (= a_update (temp_____aggregate_def_404 a_old i (to_rep (select a_old j)) 
              j (to_rep (select a_old i)))))

;; def_axiom
  (assert
  (forall ((temp___406 (Array Int positive)))
  (forall ((temp___407 Int) (temp___408 Int) (temp___409 Int)
  (temp___410 Int))
  (let ((temp___405 (temp_____aggregate_def_404 temp___406 temp___407
                    temp___408 temp___409 temp___410)))
  (=>
  (and (dynamic_invariant4 temp___407 true true true true)
  (and
  (and (dynamic_invariant temp___408 true true true true) (dynamic_invariant4
  temp___409 true true true true)) (dynamic_invariant temp___410 true true
  true true)))
  (forall ((temp___411 Int))
  (ite (= temp___411 temp___409)
  (= (to_rep (select temp___405 temp___411)) temp___410)
  (ite (= temp___411 temp___407)
  (= (to_rep (select temp___405 temp___411)) temp___408)
  (= (select temp___405 temp___411) (select temp___406 temp___411))))))))))

(define-fun dynamic_invariant5 ((temp___expr_416 Int)
  (temp___is_init_412 Bool) (temp___skip_constant_413 Bool)
  (temp___do_toplevel_414 Bool)
  (temp___do_typ_inv_415 Bool)) Bool (=>
                                     (or (= temp___is_init_412 true)
                                     (<= 0 6)) (in_range10 temp___expr_416)))

(define-fun dynamic_invariant6 ((temp___expr_1126 Int)
  (temp___is_init_1122 Bool) (temp___skip_constant_1123 Bool)
  (temp___do_toplevel_1124 Bool)
  (temp___do_typ_inv_1125 Bool)) Bool (=>
                                      (or (= temp___is_init_1122 true)
                                      (<= 0 10000)) (in_range12
                                      temp___expr_1126)))

(define-fun dynamic_invariant7 ((temp___expr_447 Int)
  (temp___is_init_443 Bool) (temp___skip_constant_444 Bool)
  (temp___do_toplevel_445 Bool)
  (temp___do_typ_inv_446 Bool)) Bool (=>
                                     (or (= temp___is_init_443 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_447)))

(declare-const no_element us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk (us_split_fieldsqtmk rliteral))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length2 container)))
     (and
     (<= result (to_rep1
                (rec__partition_refinement__inverse_sets__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant7 result true false true true))) :pattern ((length2
                                                                  container)) )))

;; find__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant1 key1 true true true true)
     (let ((result (find container key1)))
     (and
     (=> (< 0 result)
     (and (<= result (length1 container))
     (= (equivalent_keys key1 (get container result)) true)))
     (dynamic_invariant7 result true false true true)))) :pattern ((find
                                                                   container
                                                                   key1)) ))))

(declare-fun length5 (us_rep3) Int)

(declare-fun length__function_guard4 (Int us_rep3) Bool)

(declare-fun oeq4 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep3 us_rep3) Bool)

(declare-fun is_empty (us_rep3) Bool)

(declare-fun is_empty__function_guard (Bool us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq5 a b) (oeq4 a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_852 us_rep3)
  (temp___skip_top_level_853 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_853 true))
                                         (and
                                         (= (is_empty temp___expr_852) true)
                                         (= (length5 temp___expr_852) 0))))

;; model__post_axiom
  (assert true)

(declare-fun length6 (us_rep4) Int)

(declare-fun length__function_guard5 (Int us_rep4) Bool)

(declare-fun is_empty1 (us_rep4) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq8 a b) (oeq2 a b)) :pattern ((user_eq8 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_911 us_rep4)
  (temp___skip_top_level_912 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_912 true))
                                         (and
                                         (= (is_empty1 temp___expr_911) true)
                                         (= (length6 temp___expr_911) 0))))

;; positions__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (positions container)))
     (and (not (= (has_key1 result no_element) true))
     (forall ((i1 us_rep))
     (=> (= (has_key1 result i1) true)
     (and
     (let ((temp___967 (get1 result i1)))
     (and (<= 1 temp___967) (<= temp___967 (length2 container))))
     (forall ((j1 us_rep))
     (=> (= (has_key1 result j1) true)
     (=> (= (get1 result i1) (get1 result j1)) (= (bool_eq i1 j1) true))))))))) :pattern (
  (positions container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq1 left right) true)
     (= (oeq4 (model1 left) (model1 right)) true)) :pattern ((oeq1 left
                                                             right)) )))

(define-fun dynamic_invariant8 ((temp___expr_837 Int)
  (temp___is_init_833 Bool) (temp___skip_constant_834 Bool)
  (temp___do_toplevel_835 Bool)
  (temp___do_typ_inv_836 Bool)) Bool (=>
                                     (or (= temp___is_init_833 true)
                                     (<= 1 2147483647)) (in_range4
                                     temp___expr_837)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant8 key1 true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k Int))
     (and (and (in_range4 k) (= (has_key container k) true))
     (= (equivalent_keys k key1) true))) (= (has_key container key1) true)))) :pattern (
  (has_key container key1)) ))))

(declare-fun witness (us_rep3 Int) Int)

(declare-fun witness__function_guard (Int us_rep3 Int) Bool)

(declare-fun w_get (us_rep3 Int) Int)

(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i1 element_type1))
  (and (<= 0 (element_typeqtint1 i1)) (<= (element_typeqtint1 i1) 5))))

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq20 (element_type1 element_type1) Bool)

(declare-const dummy20 element_type1)

(declare-datatypes ((element_type__ref3 0))
(((element_type__refqtmk3 (element_type__content3 element_type1)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref3)) element_type1 
  (element_type__content3 a))

(define-fun dynamic_invariant9 ((temp___expr_844 Int)
  (temp___is_init_840 Bool) (temp___skip_constant_841 Bool)
  (temp___do_toplevel_842 Bool)
  (temp___do_typ_inv_843 Bool)) Bool (=>
                                     (or (= temp___is_init_840 true)
                                     (<= 0 5)) (in_range13 temp___expr_844)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant8 key1 true true true true)
     (= (has_key container key1) true))
     (let ((result (get2 container key1)))
     (and
     (=> (= (distinct 1 0) true)
     (and (= result (w_get container (witness container key1)))
     (forall ((k Int))
     (=> (and (in_range4 k) (= (has_key container k) true))
     (= (= (equivalent_keys k key1) true)
     (= (witness container key1) (witness container k)))))))
     (dynamic_invariant9 result true false true true)))) :pattern ((get2
                                                                   container
                                                                   key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (dynamic_invariant7 (length5 container)
  true false true true) :pattern ((length5 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq4 left right) true)
     (and
     (forall ((key1 Int))
     (=> (and (in_range4 key1) (= (has_key left key1) true))
     (and (= (has_key right key1) true)
     (= (get2 right key1) (get2 left key1)))))
     (forall ((key1 Int))
     (=> (and (in_range4 key1) (= (has_key right key1) true))
     (= (has_key left key1) true))))) :pattern ((oeq4 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (= (is_empty container) true)
     (forall ((key1 Int))
     (not (and (in_range4 key1) (= (has_key container key1) true))))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (keys_included left right) true)
     (forall ((key1 Int))
     (=> (and (in_range4 key1) (= (has_key left key1) true))
     (= (has_key right key1) true)))) :pattern ((keys_included left right)) )))

;; elements_equal_except__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant8 new_key true true true true)
     (= (= (elements_equal_except left right new_key) true)
     (forall ((key1 Int))
     (=> (and (in_range4 key1) (= (has_key left key1) true))
     (=> (not (= (equivalent_keys key1 new_key) true))
     (and (= (has_key right key1) true)
     (= (get2 left key1) (get2 right key1)))))))) :pattern ((elements_equal_except
                                                            left right
                                                            new_key)) ))))

(declare-fun has_witness (us_rep3 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant8 key1 true true true true)
     (= (has_key container key1) true))
     (let ((result (witness container key1)))
     (and (= (has_witness container result) true) (dynamic_invariant7 result
     true false true true)))) :pattern ((witness container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant7 witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant9
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

(define-fun dynamic_invariant10 ((temp___expr_880 Int)
  (temp___is_init_876 Bool) (temp___skip_constant_877 Bool)
  (temp___do_toplevel_878 Bool)
  (temp___do_typ_inv_879 Bool)) Bool (=>
                                     (or (= temp___is_init_876 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_880)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant7 result true false
     true true))) :pattern ((length1 container)) )))

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i1 element_type2))
  (and (<= 1 (element_typeqtint2 i1))
  (<= (element_typeqtint2 i1) 2147483647))))

(define-fun in_range14 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq21 (element_type2 element_type2) Bool)

(declare-const dummy21 element_type2)

(declare-datatypes ((element_type__ref4 0))
(((element_type__refqtmk4 (element_type__content4 element_type2)))))
(define-fun element_type__ref_element_type__content__6__projection ((a element_type__ref4)) element_type2 
  (element_type__content4 a))

(define-fun dynamic_invariant11 ((temp___expr_873 Int)
  (temp___is_init_869 Bool) (temp___skip_constant_870 Bool)
  (temp___do_toplevel_871 Bool)
  (temp___do_typ_inv_872 Bool)) Bool (=>
                                     (or (= temp___is_init_869 true)
                                     (<= 1 2147483647)) (in_range14
                                     temp___expr_873)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant10 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant11 (get container position) true false true true)) :pattern (
  (get container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 us_rep))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k us_rep))
     (and (= (has_key1 container k) true) (= (bool_eq k key1) true)))
     (= (has_key1 container key1) true))) :pattern ((has_key1 container key1)) ))))

(declare-fun witness1 (us_rep4 us_rep) Int)

(declare-fun witness__function_guard1 (Int us_rep4 us_rep) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

(declare-sort element_type3 0)

(declare-fun element_typeqtint3 (element_type3) Int)

;; element_type'axiom
  (assert
  (forall ((i1 element_type3))
  (and (<= 1 (element_typeqtint3 i1))
  (<= (element_typeqtint3 i1) 2147483647))))

(define-fun in_range15 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq22 (element_type3 element_type3) Bool)

(declare-const dummy22 element_type3)

(declare-datatypes ((element_type__ref5 0))
(((element_type__refqtmk5 (element_type__content5 element_type3)))))
(define-fun element_type__ref_element_type__content__7__projection ((a element_type__ref5)) element_type3 
  (element_type__content5 a))

(define-fun dynamic_invariant12 ((temp___expr_903 Int)
  (temp___is_init_899 Bool) (temp___skip_constant_900 Bool)
  (temp___do_toplevel_901 Bool)
  (temp___do_typ_inv_902 Bool)) Bool (=>
                                     (or (= temp___is_init_899 true)
                                     (<= 1 2147483647)) (in_range15
                                     temp___expr_903)))

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 us_rep))
  (! (=> (= (has_key1 container key1) true)
     (let ((result (get1 container key1)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get1 container (witness1 container key1)))
     (forall ((k us_rep))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq k key1) true)
     (= (witness1 container key1) (witness1 container k)))))))
     (dynamic_invariant12 result true false true true)))) :pattern ((get1
                                                                    container
                                                                    key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant7 (length6 container)
  true false true true) :pattern ((length6 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key1 us_rep))
     (=> (= (has_key1 left key1) true)
     (and (= (has_key1 right key1) true)
     (= (get1 right key1) (get1 left key1)))))
     (forall ((key1 us_rep))
     (=> (= (has_key1 right key1) true) (= (has_key1 left key1) true))))) :pattern (
  (oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty1 container) true)
     (forall ((key1 us_rep)) (not (= (has_key1 container key1) true)))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 us_rep))
  (! (=> (= (has_key1 container key1) true)
     (let ((result (witness1 container key1)))
     (and (= (has_witness1 container result) true) (dynamic_invariant7 result
     true false true true)))) :pattern ((witness1 container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant7 witness2 true true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant12
     (w_get1 container witness2) true false true true)) :pattern ((w_get1
                                                                  container
                                                                  witness2)) ))))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i1 extended_index1))
  (and (<= (- 1) (extended_indexqtint1 i1))
  (<= (extended_indexqtint1 i1) 10001))))

(define-fun in_range16 ((x Int)) Bool (and (<= (- 1) x) (<= x 10001)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq23 (extended_index1 extended_index1) Bool)

(declare-const dummy23 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__3__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant13 ((temp___expr_1150 Int)
  (temp___is_init_1146 Bool) (temp___skip_constant_1147 Bool)
  (temp___do_toplevel_1148 Bool)
  (temp___do_typ_inv_1149 Bool)) Bool (=>
                                      (or (= temp___is_init_1146 true)
                                      (<= (- 1) 10001)) (in_range16
                                      temp___expr_1150)))

(define-fun oeq5 ((left us_rep7)
  (right us_rep7)) Bool (and (= (length4 left) (length4 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 0 n)
                                                                (<= n 
                                                                (last1 left)))
                                                                (= (bool_eq6
                                                                   (get3 left
                                                                   n)
                                                                   (get3
                                                                   right n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard5 (Bool us_rep7 us_rep7) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep7) (b us_rep7))
  (! (= (user_eq16 a b) (oeq5 a b)) :pattern ((user_eq16 a b)) )))

(define-fun default_initial_assumption3 ((temp___expr_1199 us_rep7)
  (temp___skip_top_level_1200 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_1200 true))
                                          (= (length4 temp___expr_1199) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (length4 (model2 container)) (length3 container)) :pattern ((model2
                                                                    container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq3 left right) true)
     (= (oeq5 (model2 left) (model2 right)) true)) :pattern ((oeq3 left
                                                             right)) )))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i1 index_type))
  (and (<= 0 (index_typeqtint i1)) (<= (index_typeqtint i1) 10000))))

(define-fun in_range17 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq24 (index_type index_type) Bool)

(declare-const dummy24 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__3__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant14 ((temp___expr_1133 Int)
  (temp___is_init_1129 Bool) (temp___skip_constant_1130 Bool)
  (temp___do_toplevel_1131 Bool)
  (temp___do_typ_inv_1132 Bool)) Bool (=>
                                      (or (= temp___is_init_1129 true)
                                      (<= 0 10000)) (in_range17
                                      temp___expr_1133)))

(declare-sort extended_index2 0)

(declare-fun extended_indexqtint2 (extended_index2) Int)

;; extended_index'axiom
  (assert
  (forall ((i1 extended_index2))
  (and (<= (- 1) (extended_indexqtint2 i1))
  (<= (extended_indexqtint2 i1) 10000))))

(define-fun in_range18 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq25 (extended_index2 extended_index2) Bool)

(declare-const dummy25 extended_index2)

(declare-datatypes ((extended_index__ref2 0))
(((extended_index__refqtmk2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref_extended_index__content__4__projection ((a extended_index__ref2)) extended_index2 
  (extended_index__content2 a))

(define-fun dynamic_invariant15 ((temp___expr_1191 Int)
  (temp___is_init_1187 Bool) (temp___skip_constant_1188 Bool)
  (temp___do_toplevel_1189 Bool)
  (temp___do_typ_inv_1190 Bool)) Bool (=>
                                      (or (= temp___is_init_1187 true)
                                      (<= (- 1) 10000)) (in_range18
                                      temp___expr_1191)))

;; length__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (let ((result (length4 container)))
     (and (<= (+ (- 1) result) 10000) (dynamic_invariant7 result true false
     true true))) :pattern ((length4 container)) )))

;; get__post_axiom
  (assert true)

(assert
;; defqtvc
 ;; File "partition_refinement.adb", line 16, characters 0-0
  (not
  (forall ((a (Array Int positive)) (d__split_fields us_main_type)
  (p__split_fields us_main_type4))
  (=> (dynamic_invariant x_elem true false true true)
  (=>
  (< (length3
     (us_repqtmk2 p__split_discrs (us_split_fieldsqtmk2 p__split_fields))) 10000)
  (=>
  (= (contains
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields))
     x_elem) true)
  (=>
  (let ((temp___2259 (to_rep5
                     (select f (element1
                               (us_repqtmk1 d__split_discrs
                               (us_split_fieldsqtmk1 d__split_fields))
                               x_elem)))))
  (and (<= 0 temp___2259)
  (<= temp___2259 (- (length3
                     (us_repqtmk2 p__split_discrs
                     (us_split_fieldsqtmk2 p__split_fields))) 1))))
  (=>
  (forall ((j1 Int))
  (=> (and (<= 0 j1) (<= j1 5))
  (= (contains
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields))
     (to_rep (select a j1))) true)))
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields)) c) true)
  (= (to_rep
     (select a (element
               (us_repqtmk1 d__split_discrs
               (us_split_fieldsqtmk1 d__split_fields)) c))) (key
                                                            (us_repqtmk1
                                                            d__split_discrs
                                                            (us_split_fieldsqtmk1
                                                            d__split_fields))
                                                            c))))
  (let ((o x_elem))
  (let ((o1 (us_repqtmk1 d__split_discrs
            (us_split_fieldsqtmk1 d__split_fields))))
  (let ((partition_refinement__refine_one__i__assume (element1 o1 o)))
  (=>
  (and (dynamic_invariant2 partition_refinement__refine_one__i__assume true
  false true true)
  (= partition_refinement__refine_one__i__assume (get2 (model1 o1) o)))
  (=> (= partition_refinement__refine_one__i__assume i)
  (=> (dynamic_invariant4 i true false true true)
  (forall ((o2 Int))
  (=> (= (to_rep5 (select f i)) o2)
  (let ((o3 (us_repqtmk2 p__split_discrs
            (us_split_fieldsqtmk2 p__split_fields))))
  (let ((partition_refinement__refine_one__p_elem__assume (element2 o3 o2)))
  (=>
  (= (bool_eq6 partition_refinement__refine_one__p_elem__assume
     (get3 (model2 o3) o2)) true)
  (forall ((p_elem__split_fields us_split_fields6))
  (=>
  (= p_elem__split_fields (us_split_fields7
                          partition_refinement__refine_one__p_elem__assume))
  (=> (in_range11
  (+ (to_rep4
     (rec__partition_refinement__interval__first p_elem__split_fields)) 
  (to_rep3 (rec__partition_refinement__interval__count p_elem__split_fields))))
  (forall ((o4 Int))
  (=>
  (= (to_rep3
     (rec__partition_refinement__interval__count p_elem__split_fields)) o4)
  (forall ((o5 Int))
  (=>
  (= (to_rep4
     (rec__partition_refinement__interval__first p_elem__split_fields)) o5)
  (let ((o6 (+ o5 o4)))
  (=> (in_range11 o6)
  (=> (= o6 j)
  (=> (dynamic_invariant4 j true false true true)
  (=> (= a a_old)
  (forall ((o7 Int))
  (=> (= (to_rep (select a_old i)) o7)
  (forall ((o8 Int))
  (=> (= (to_rep (select a_old j)) o8)
  (=> (= (temp_____aggregate_def_404 a_old i o8 j o7) a_update)
  (let ((o9 j))
  (let ((o10 i))
  (forall ((a1 (Array Int positive)))
  (=>
  (forall ((temp___index_1428 Int))
  (=> (and (<= 0 temp___index_1428) (<= temp___index_1428 5))
  (= (to_rep (select a1 temp___index_1428)) (ite (= temp___index_1428 o9)
                                            (to_rep (select a o10))
                                            (ite (= temp___index_1428 o10)
                                            (to_rep (select a o9))
                                            (to_rep
                                            (select a temp___index_1428)))))))
  (=> (= (bool_eq8 a1 0 5 a_update 0 5) true)
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields)) c) true)
  (=>
  (and
  (not
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields)) c) 
  (to_rep (select a1 i))))
  (not
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields)) c) 
  (to_rep (select a1 j)))))
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields)) c))) (key
                                                             (us_repqtmk1
                                                             d__split_discrs
                                                             (us_split_fieldsqtmk1
                                                             d__split_fields))
                                                             c)))))
  (=>
  (forall ((j1 Int))
  (=> (and (<= 0 j1) (<= j1 5))
  (= (contains
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields))
     (to_rep (select a1 j1))) true)))
  (forall ((o11 Int))
  (=> (= (to_rep (select a1 i)) o11)
  (let ((o12 d__split_discrs))
  (forall
  ((partition_refinement__inverse_sets__replace__container__fields us_main_type))
  (=>
  (and
  (and
  (and
  (and
  (and
  (= (oeq2
     (positions
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields)))
     (positions (us_repqtmk1 o12 (us_split_fieldsqtmk1 d__split_fields)))) true)
  (= (get
     (keys
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields)))
     (find
     (keys
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields))) o11)) o11))
  (= (equal_except
     (keys (us_repqtmk1 o12 (us_split_fieldsqtmk1 d__split_fields)))
     (keys
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields)))
     (find
     (keys
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields))) o11)) true))
  (= (get2
     (model1
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields))) o11) 
  i))
  (= (same_keys
     (model1
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields)))
     (model1 (us_repqtmk1 o12 (us_split_fieldsqtmk1 d__split_fields)))) true))
  (= (elements_equal_except
     (model1
     (us_repqtmk1 o12
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields)))
     (model1 (us_repqtmk1 o12 (us_split_fieldsqtmk1 d__split_fields))) o11) true))
  (forall ((d__split_fields1 us_main_type))
  (=>
  (= d__split_fields1 partition_refinement__inverse_sets__replace__container__fields)
  (=> (= (bool_eq8 a1 0 5 a_update 0 5) true)
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields1)) c) true)
  (=>
  (and
  (not
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields1)) c) 
  (to_rep (select a1 i))))
  (not
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields1)) c) 
  (to_rep (select a1 j)))))
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields1)) c))) (key
                                                              (us_repqtmk1
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk1
                                                              d__split_fields1))
                                                              c)))))
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields1)) c) true)
  (=>
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields1)) c) 
  (to_rep (select a1 i)))
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields1)) c))) (key
                                                              (us_repqtmk1
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk1
                                                              d__split_fields1))
                                                              c)))))
  (forall ((o13 Int))
  (=> (= (to_rep (select a1 j)) o13)
  (let ((o14 d__split_discrs))
  (forall
  ((partition_refinement__inverse_sets__replace__container__fields1 us_main_type))
  (=>
  (and
  (and
  (and
  (and
  (and
  (= (oeq2
     (positions
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1)))
     (positions (us_repqtmk1 o14 (us_split_fieldsqtmk1 d__split_fields1)))) true)
  (= (get
     (keys
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1)))
     (find
     (keys
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1))) o13)) o13))
  (= (equal_except
     (keys (us_repqtmk1 o14 (us_split_fieldsqtmk1 d__split_fields1)))
     (keys
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1)))
     (find
     (keys
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1))) o13)) true))
  (= (get2
     (model1
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1))) o13) 
  j))
  (= (same_keys
     (model1
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1)))
     (model1 (us_repqtmk1 o14 (us_split_fieldsqtmk1 d__split_fields1)))) true))
  (= (elements_equal_except
     (model1
     (us_repqtmk1 o14
     (us_split_fieldsqtmk1
     partition_refinement__inverse_sets__replace__container__fields1)))
     (model1 (us_repqtmk1 o14 (us_split_fieldsqtmk1 d__split_fields1))) o13) true))
  (forall ((d__split_fields2 us_main_type))
  (=>
  (= d__split_fields2 partition_refinement__inverse_sets__replace__container__fields1)
  (=> (= (bool_eq8 a1 0 5 a_update 0 5) true)
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) true)
  (=>
  (and
  (not
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) 
  (to_rep (select a1 i))))
  (not
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) 
  (to_rep (select a1 j)))))
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields2)) c))) (key
                                                              (us_repqtmk1
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk1
                                                              d__split_fields2))
                                                              c)))))
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) true)
  (=>
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) 
  (to_rep (select a1 i)))
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields2)) c))) (key
                                                              (us_repqtmk1
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk1
                                                              d__split_fields2))
                                                              c)))))
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) true)
  (=>
  (= (key
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) 
  (to_rep (select a1 j)))
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields2)) c))) (key
                                                              (us_repqtmk1
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk1
                                                              d__split_fields2))
                                                              c)))))
  (=>
  (forall ((c us_rep))
  (=>
  (= (has_element
     (us_repqtmk1 d__split_discrs (us_split_fieldsqtmk1 d__split_fields2)) c) true)
  (= (to_rep
     (select a1 (element
                (us_repqtmk1 d__split_discrs
                (us_split_fieldsqtmk1 d__split_fields2)) c))) (key
                                                              (us_repqtmk1
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk1
                                                              d__split_fields2))
                                                              c))))
  (forall ((o15 Int))
  (=>
  (= (to_rep3
     (rec__partition_refinement__interval__count p_elem__split_fields)) o15)
  (let ((o16 (+ o15 1)))
  (=> (in_range10 o16)
  (forall ((o17 index_count))
  (=> (= (to_rep3 o17) o16)
  (forall ((p_elem__split_fields1 us_split_fields6))
  (=>
  (= p_elem__split_fields1 (us_split_fieldsqtmk3
                           (rec__partition_refinement__interval__first
                           p_elem__split_fields)
                           (rec__partition_refinement__interval__last
                           p_elem__split_fields) o17))
  (forall ((o18 Int))
  (=> (= (to_rep5 (select f i)) o18)
  (let ((o19 p__split_discrs))
  (forall
  ((partition_refinement__partitions__replace_element__container__fields us_main_type4))
  (=>
  (and
  (and
  (= (length3
     (us_repqtmk2 o19
     (us_split_fieldsqtmk2
     partition_refinement__partitions__replace_element__container__fields))) 
  (length3 (us_repqtmk2 o19 (us_split_fieldsqtmk2 p__split_fields))))
  (= (bool_eq6
     (get3
     (model2
     (us_repqtmk2 o19
     (us_split_fieldsqtmk2
     partition_refinement__partitions__replace_element__container__fields)))
     o18) (us_repqtmk3 p_elem__split_fields1)) true))
  (= (equal_except1
     (model2 (us_repqtmk2 o19 (us_split_fieldsqtmk2 p__split_fields)))
     (model2
     (us_repqtmk2 o19
     (us_split_fieldsqtmk2
     partition_refinement__partitions__replace_element__container__fields)))
     o18) true))
  (forall ((p__split_fields1 us_main_type4))
  (=>
  (= p__split_fields1 partition_refinement__partitions__replace_element__container__fields)
  (= (bool_eq8 a1 0 5 a_update 0 5) true))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
