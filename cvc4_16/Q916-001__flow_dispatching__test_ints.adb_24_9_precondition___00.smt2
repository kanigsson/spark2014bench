(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__ints__int__min integer)(rec__ints__int__max integer)(rec__ints__int__value integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__ints__int__min__projection ((a us_split_fields)) integer 
  (rec__ints__int__min a))

(define-fun us_split_fields_rec__ints__int__max__projection ((a us_split_fields)) integer 
  (rec__ints__int__max a))

(define-fun us_split_fields_rec__ints__int__value__projection ((a us_split_fields)) integer 
  (rec__ints__int__value a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__ints__int__min (us_split_fields1 a))) 
                        (to_rep1 (rec__ints__int__min (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ints__int__max (us_split_fields1 a))) 
                        (to_rep1 (rec__ints__int__max (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__ints__int__value (us_split_fields1 a))) 
                        (to_rep1
                        (rec__ints__int__value (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const ints__int__min__first__bit Int)

(declare-const ints__int__min__last__bit Int)

(declare-const ints__int__min__position Int)

;; ints__int__min__first__bit_axiom
  (assert (<= 0 ints__int__min__first__bit))

;; ints__int__min__last__bit_axiom
  (assert (< ints__int__min__first__bit ints__int__min__last__bit))

;; ints__int__min__position_axiom
  (assert (<= 0 ints__int__min__position))

(declare-const ints__int__max__first__bit Int)

(declare-const ints__int__max__last__bit Int)

(declare-const ints__int__max__position Int)

;; ints__int__max__first__bit_axiom
  (assert (<= 0 ints__int__max__first__bit))

;; ints__int__max__last__bit_axiom
  (assert (< ints__int__max__first__bit ints__int__max__last__bit))

;; ints__int__max__position_axiom
  (assert (<= 0 ints__int__max__position))

(declare-const ints__int__value__first__bit Int)

(declare-const ints__int__value__last__bit Int)

(declare-const ints__int__value__position Int)

;; ints__int__value__first__bit_axiom
  (assert (<= 0 ints__int__value__first__bit))

;; ints__int__value__last__bit_axiom
  (assert (< ints__int__value__first__bit ints__int__value__last__bit))

;; ints__int__value__position_axiom
  (assert (<= 0 ints__int__value__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((int____ref 0))
(((int____refqtmk (int____content us_rep)))))
(define-fun int____ref_int____content__projection ((a int____ref)) us_rep 
  (int____content a))

(declare-const i__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_182 us_rep)
  (temp___skip_top_level_183 Bool)) Bool (= (attr__tag temp___expr_182) 
  us_tag))

(define-fun to_rep2 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__ints__approx_int__precision natural)(rec__ints__int__min1 integer)(rec__ints__int__max1 integer)(rec__ints__int__value1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__ints__approx_int__precision__projection ((a us_split_fields2)) natural 
  (rec__ints__approx_int__precision a))

(define-fun us_split_fields_rec__ints__int__min__2__projection ((a us_split_fields2)) integer 
  (rec__ints__int__min1 a))

(define-fun us_split_fields_rec__ints__int__max__2__projection ((a us_split_fields2)) integer 
  (rec__ints__int__max1 a))

(define-fun us_split_fields_rec__ints__int__value__2__projection ((a us_split_fields2)) integer 
  (rec__ints__int__value1 a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (natural us_private) us_private)

(declare-fun extract__ints__approx_int__precision (us_private) natural)

;; extract__ints__approx_int__precision__conv
  (assert
  (forall ((ints__approx_int__precision natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__ints__approx_int__precision
     (hide_ext__ ints__approx_int__precision rec__ext__2)) ints__approx_int__precision))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (rec__ints__int__min1
                                         (us_split_fields3 a))
                                         (rec__ints__int__max1
                                         (us_split_fields3 a))
                                         (rec__ints__int__value1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__ints__approx_int__precision
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (extract__ints__approx_int__precision
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__ints__int__min
                                         (us_split_fields1 r))
                                         (rec__ints__int__max
                                         (us_split_fields1 r))
                                         (rec__ints__int__value
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__ints__approx_int__precision
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__ints__approx_int__precision
                                                   (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__ints__int__min1 (us_split_fields3 a))) 
                         (to_rep1
                         (rec__ints__int__min1 (us_split_fields3 b)))))
                         (and
                         (= (to_rep1
                            (rec__ints__int__max1 (us_split_fields3 a))) 
                         (to_rep1
                         (rec__ints__int__max1 (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__ints__int__value1 (us_split_fields3 a))) 
                         (to_rep1
                         (rec__ints__int__value1 (us_split_fields3 b))))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const ints__approx_int__precision__first__bit Int)

(declare-const ints__approx_int__precision__last__bit Int)

(declare-const ints__approx_int__precision__position Int)

;; ints__approx_int__precision__first__bit_axiom
  (assert (<= 0 ints__approx_int__precision__first__bit))

;; ints__approx_int__precision__last__bit_axiom
  (assert
  (< ints__approx_int__precision__first__bit ints__approx_int__precision__last__bit))

;; ints__approx_int__precision__position_axiom
  (assert (<= 0 ints__approx_int__precision__position))

(declare-const ints__int__min__first__bit1 Int)

(declare-const ints__int__min__last__bit1 Int)

(declare-const ints__int__min__position1 Int)

;; ints__int__min__first__bit_axiom
  (assert (<= 0 ints__int__min__first__bit1))

;; ints__int__min__last__bit_axiom
  (assert (< ints__int__min__first__bit1 ints__int__min__last__bit1))

;; ints__int__min__position_axiom
  (assert (<= 0 ints__int__min__position1))

(declare-const ints__int__max__first__bit1 Int)

(declare-const ints__int__max__last__bit1 Int)

(declare-const ints__int__max__position1 Int)

;; ints__int__max__first__bit_axiom
  (assert (<= 0 ints__int__max__first__bit1))

;; ints__int__max__last__bit_axiom
  (assert (< ints__int__max__first__bit1 ints__int__max__last__bit1))

;; ints__int__max__position_axiom
  (assert (<= 0 ints__int__max__position1))

(declare-const ints__int__value__first__bit1 Int)

(declare-const ints__int__value__last__bit1 Int)

(declare-const ints__int__value__position1 Int)

;; ints__int__value__first__bit_axiom
  (assert (<= 0 ints__int__value__first__bit1))

;; ints__int__value__last__bit_axiom
  (assert (< ints__int__value__first__bit1 ints__int__value__last__bit1))

;; ints__int__value__position_axiom
  (assert (<= 0 ints__int__value__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((approx_int__ref 0))
(((approx_int__refqtmk (approx_int__content us_rep1)))))
(define-fun approx_int__ref_approx_int__content__projection ((a approx_int__ref)) us_rep1 
  (approx_int__content a))

(declare-const ai__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption1 ((temp___expr_192 us_rep1)
  (temp___skip_top_level_193 Bool)) Bool (= (attr__tag1 temp___expr_192) 
  us_tag1))

(declare-fun display__specific_post (Int us_rep us_t us_private
  us_private) Bool)

;; ints__int__compat_axiom
  (assert true)

;; ints__approx_int__compat_axiom
  (assert true)

(declare-fun display__specific_post1 (Int us_rep1 us_t us_private
  us_private) Bool)

;; ints__approx_int__compat_axiom
  (assert true)

(declare-fun bump__specific_post (Int us_split_fields Int
  us_split_fields) Bool)

;; ints__int__compat_axiom
  (assert
  (forall ((ints__bump__arg__fields us_split_fields)
  (ints__bump__arg__old__fields us_split_fields))
  (forall ((arg__attr__tag Int))
  (! (=> (bump__specific_post us_tag ints__bump__arg__fields arg__attr__tag
     ints__bump__arg__old__fields)
     (< (to_rep1
        (rec__ints__int__value
        (us_split_fields1
        (us_repqtmk ints__bump__arg__old__fields arg__attr__tag)))) (to_rep1
                                                                    (rec__ints__int__value
                                                                    (us_split_fields1
                                                                    (us_repqtmk
                                                                    ints__bump__arg__fields
                                                                    arg__attr__tag)))))) :pattern ((bump__specific_post
  us_tag ints__bump__arg__fields arg__attr__tag
  ints__bump__arg__old__fields)) ))))

;; ints__approx_int__compat_axiom
  (assert
  (forall ((ints__bump__arg__fields us_split_fields)
  (ints__bump__arg__old__fields us_split_fields))
  (forall ((arg__attr__tag Int))
  (! (=> (bump__specific_post us_tag1 ints__bump__arg__fields arg__attr__tag
     ints__bump__arg__old__fields)
     (< (to_rep1
        (rec__ints__int__value1
        (us_split_fields3
        (of_base (us_repqtmk ints__bump__arg__old__fields arg__attr__tag))))) 
     (to_rep1
     (rec__ints__int__value1
     (us_split_fields3
     (of_base (us_repqtmk ints__bump__arg__fields arg__attr__tag))))))) :pattern ((bump__specific_post
  us_tag1 ints__bump__arg__fields arg__attr__tag
  ints__bump__arg__old__fields)) ))))

(declare-fun bump__specific_post1 (Int us_split_fields2 Int
  us_split_fields2) Bool)

;; ints__approx_int__compat_axiom
  (assert
  (forall ((ints__bump__2__arg__fields us_split_fields2)
  (ints__bump__2__arg__old__fields us_split_fields2))
  (forall ((arg__attr__tag Int))
  (! (=> (bump__specific_post1 us_tag1 ints__bump__2__arg__fields
     arg__attr__tag ints__bump__2__arg__old__fields)
     (< (to_rep1
        (rec__ints__int__value1
        (us_split_fields3
        (us_repqtmk1 ints__bump__2__arg__old__fields arg__attr__tag)))) 
     (to_rep1
     (rec__ints__int__value1
     (us_split_fields3
     (us_repqtmk1 ints__bump__2__arg__fields arg__attr__tag)))))) :pattern ((bump__specific_post1
  us_tag1 ints__bump__2__arg__fields arg__attr__tag
  ints__bump__2__arg__old__fields)) ))))

(declare-const ic__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const ic__attr__tag1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun temp___String_Literal_224 (tuple0) (Array Int character))

;; temp___String_Literal_224__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 2)) 110))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 5)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 6)) 97)
     (= (to_rep (select (temp___String_Literal_224 us_void_param) 7)) 108)))) :pattern (
  (temp___String_Literal_224 us_void_param)) )))

(declare-fun temp___String_Literal_225 (tuple0) (Array Int character))

;; temp___String_Literal_225__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 2)) 110))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 5)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 6)) 97)
     (= (to_rep (select (temp___String_Literal_225 us_void_param) 7)) 108)))) :pattern (
  (temp___String_Literal_225 us_void_param)) )))

(declare-fun temp___String_Literal_227 (tuple0) (Array Int character))

;; temp___String_Literal_227__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 2)) 110))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 5)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 6)) 109)
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 7)) 101)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 8)) 100)
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 10)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 11)) 116)
     (= (to_rep (select (temp___String_Literal_227 us_void_param) 12)) 101))))) :pattern (
  (temp___String_Literal_227 us_void_param)) )))

(declare-fun temp___String_Literal_228 (tuple0) (Array Int character))

;; temp___String_Literal_228__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 2)) 110))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 5)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 6)) 109)
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 7)) 101)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 8)) 100)
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 10)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 11)) 116)
     (= (to_rep (select (temp___String_Literal_228 us_void_param) 12)) 101))))) :pattern (
  (temp___String_Literal_228 us_void_param)) )))

(declare-fun temp___String_Literal_229 (tuple0) (Array Int character))

;; temp___String_Literal_229__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 2)) 101))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 3)) 109)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 4)) 112))
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 5)) 111)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 6)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 7)) 97)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 8)) 114))
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 9)) 121)))) :pattern (
  (temp___String_Literal_229 us_void_param)) )))

(declare-fun temp___String_Literal_230 (tuple0) (Array Int character))

;; temp___String_Literal_230__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 2)) 101))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 3)) 109)
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 4)) 112))
     (and
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 5)) 111)
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 6)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 7)) 97)
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 8)) 114))
     (= (to_rep (select (temp___String_Literal_230 us_void_param) 9)) 121)))) :pattern (
  (temp___String_Literal_230 us_void_param)) )))

(declare-fun temp___String_Literal_233 (tuple0) (Array Int character))

;; temp___String_Literal_233__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_233 us_void_param) 1)) 102)
     (= (to_rep (select (temp___String_Literal_233 us_void_param) 2)) 105))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_233 us_void_param) 3)) 110)
     (= (to_rep (select (temp___String_Literal_233 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_233 us_void_param) 5)) 108))) :pattern (
  (temp___String_Literal_233 us_void_param)) )))

(declare-fun temp___String_Literal_234 (tuple0) (Array Int character))

;; temp___String_Literal_234__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_234 us_void_param) 1)) 102)
     (= (to_rep (select (temp___String_Literal_234 us_void_param) 2)) 105))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_234 us_void_param) 3)) 110)
     (= (to_rep (select (temp___String_Literal_234 us_void_param) 4)) 97))
     (= (to_rep (select (temp___String_Literal_234 us_void_param) 5)) 108))) :pattern (
  (temp___String_Literal_234 us_void_param)) )))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 100))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 42))

(declare-const rliteral3 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral3) 5))

(assert
;; defqtvc
 ;; File "test_ints.adb", line 3, characters 0-0
  (not
  (forall ((i__split_fields us_split_fields)
  (ai__split_fields us_split_fields2) (i__split_fields1 us_split_fields)
  (i__split_fields2 us_split_fields) (ai__split_fields1 us_split_fields2))
  (=>
  (= i__split_fields (us_split_fieldsqtmk rliteral rliteral1 rliteral2
                     us_null_ext__))
  (=> (= i__attr__tag us_tag)
  (=>
  (= ai__split_fields (us_split_fieldsqtmk1 rliteral3
                      (rec__ints__int__min i__split_fields)
                      (rec__ints__int__max i__split_fields)
                      (rec__ints__int__value i__split_fields) us_null_ext__))
  (=> (= ai__attr__tag us_tag1)
  (=>
  (< (to_rep1 (rec__ints__int__value i__split_fields)) (to_rep1
                                                       (rec__ints__int__value
                                                       i__split_fields1)))
  (=>
  (< (to_rep1 (rec__ints__int__value i__split_fields1)) (to_rep1
                                                        (rec__ints__int__value
                                                        i__split_fields2)))
  (=>
  (< (to_rep1 (rec__ints__int__value1 ai__split_fields)) (to_rep1
                                                         (rec__ints__int__value1
                                                         ai__split_fields1)))
  (let ((ints__bump__arg__compl (to_base
                                (us_repqtmk1 ai__split_fields1 ai__attr__tag))))
  (forall ((ints__bump__arg__fields us_split_fields))
  (=>
  (< (to_rep1
     (rec__ints__int__value (us_split_fields1 ints__bump__arg__compl))) 
  (to_rep1 (rec__ints__int__value ints__bump__arg__fields)))
  (forall ((ai__split_fields2 us_split_fields2))
  (=>
  (= ai__split_fields2 (us_split_fields3
                       (of_base
                       (us_repqtmk ints__bump__arg__fields
                       (attr__tag ints__bump__arg__compl)))))
  (forall ((ic__split_fields us_split_fields))
  (=> (= ic__split_fields i__split_fields2)
  (=> (= ic__attr__tag i__attr__tag)
  (< (to_rep1 (rec__ints__int__value ic__split_fields)) (- (to_rep1
                                                           (rec__ints__int__max
                                                           ic__split_fields)) 10))))))))))))))))))))
(check-sat)
