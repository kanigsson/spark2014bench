(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__tests__test_16__t__d Bool)))))
(define-fun us_split_discrs_rec__tests__test_16__t__d__projection ((a us_split_discrs)) Bool 
  (rec__tests__test_16__t__d a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__4__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__tests__test_16__t__x integer)))))
(define-fun us_split_fields_rec__tests__test_16__t__x__projection ((a us_split_fields)) integer 
  (rec__tests__test_16__t__x a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__10__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__10__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun tests__test_16__t__x__pred ((a us_rep)) Bool (= (ite (rec__tests__test_16__t__d
                                                                 (us_split_discrs1
                                                                 a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__tests__test_16__t__d
                                (us_split_discrs1 a)) 1 0) (ite (rec__tests__test_16__t__d
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=> (tests__test_16__t__x__pred a)
                        (= (to_rep
                           (rec__tests__test_16__t__x (us_split_fields1 a))) 
                        (to_rep
                        (rec__tests__test_16__t__x (us_split_fields1 b))))))
                   true false))

(define-fun in_range2 ((rec__tests__test_16__t__d1 Bool)
  (a us_split_discrs)) Bool (= rec__tests__test_16__t__d1 (rec__tests__test_16__t__d
                                                          a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const tests__test_16__t__d__first__bit Int)

(declare-const tests__test_16__t__d__last__bit Int)

(declare-const tests__test_16__t__d__position Int)

;; tests__test_16__t__d__first__bit_axiom
  (assert (<= 0 tests__test_16__t__d__first__bit))

;; tests__test_16__t__d__last__bit_axiom
  (assert
  (< tests__test_16__t__d__first__bit tests__test_16__t__d__last__bit))

;; tests__test_16__t__d__position_axiom
  (assert (<= 0 tests__test_16__t__d__position))

(declare-const tests__test_16__t__x__first__bit Int)

(declare-const tests__test_16__t__x__last__bit Int)

(declare-const tests__test_16__t__x__position Int)

;; tests__test_16__t__x__first__bit_axiom
  (assert (<= 0 tests__test_16__t__x__first__bit))

;; tests__test_16__t__x__last__bit_axiom
  (assert
  (< tests__test_16__t__x__first__bit tests__test_16__t__x__last__bit))

;; tests__test_16__t__x__position_axiom
  (assert (<= 0 tests__test_16__t__x__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-fun f (us_rep) Bool)

(declare-fun f__function_guard (Bool us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_326 us_rep)
  (temp___skip_top_level_327 Bool)) Bool (= (rec__tests__test_16__t__d
                                            (us_split_discrs1
                                            temp___expr_326)) (distinct 0 0)))

;; f__post_axiom
  (assert true)

;; f__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (f x) true)
     (= (rec__tests__test_16__t__d (us_split_discrs1 x)) true)) :pattern (
  (f x)) )))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const tests__test_16__t__d__first__bit1 Int)

(declare-const tests__test_16__t__d__last__bit1 Int)

(declare-const tests__test_16__t__d__position1 Int)

;; tests__test_16__t__d__first__bit_axiom
  (assert (<= 0 tests__test_16__t__d__first__bit1))

;; tests__test_16__t__d__last__bit_axiom
  (assert
  (< tests__test_16__t__d__first__bit1 tests__test_16__t__d__last__bit1))

;; tests__test_16__t__d__position_axiom
  (assert (<= 0 tests__test_16__t__d__position1))

(declare-const tests__test_16__t__x__first__bit1 Int)

(declare-const tests__test_16__t__x__last__bit1 Int)

(declare-const tests__test_16__t__x__position1 Int)

;; tests__test_16__t__x__first__bit_axiom
  (assert (<= 0 tests__test_16__t__x__first__bit1))

;; tests__test_16__t__x__last__bit_axiom
  (assert
  (< tests__test_16__t__x__first__bit1 tests__test_16__t__x__last__bit1))

;; tests__test_16__t__x__position_axiom
  (assert (<= 0 tests__test_16__t__x__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((taS__ref 0))
(((taS__refqtmk (taS__content us_rep)))))
(define-fun taS__ref_taS__content__projection ((a taS__ref)) us_rep (taS__content
                                                                    a))

(declare-const a__split_discrs us_split_discrs)

(declare-const a__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant ((temp___expr_334 us_rep)
  (temp___is_init_330 Bool) (temp___skip_constant_331 Bool)
  (temp___do_toplevel_332 Bool)
  (temp___do_typ_inv_333 Bool)) Bool (=>
                                     (not (= temp___skip_constant_331 true))
                                     (in_range2 (distinct 0 0)
                                     (us_split_discrs1 temp___expr_334))))

(define-fun default_initial_assumption1 ((temp___expr_336 us_rep)
  (temp___skip_top_level_337 Bool)) Bool (= (rec__tests__test_16__t__d
                                            (us_split_discrs1
                                            temp___expr_336)) (distinct 0 0)))

(declare-const b__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const tests__test_16__t__d__first__bit2 Int)

(declare-const tests__test_16__t__d__last__bit2 Int)

(declare-const tests__test_16__t__d__position2 Int)

;; tests__test_16__t__d__first__bit_axiom
  (assert (<= 0 tests__test_16__t__d__first__bit2))

;; tests__test_16__t__d__last__bit_axiom
  (assert
  (< tests__test_16__t__d__first__bit2 tests__test_16__t__d__last__bit2))

;; tests__test_16__t__d__position_axiom
  (assert (<= 0 tests__test_16__t__d__position2))

(declare-const tests__test_16__t__x__first__bit2 Int)

(declare-const tests__test_16__t__x__last__bit2 Int)

(declare-const tests__test_16__t__x__position2 Int)

;; tests__test_16__t__x__first__bit_axiom
  (assert (<= 0 tests__test_16__t__x__first__bit2))

;; tests__test_16__t__x__last__bit_axiom
  (assert
  (< tests__test_16__t__x__first__bit2 tests__test_16__t__x__last__bit2))

;; tests__test_16__t__x__position_axiom
  (assert (<= 0 tests__test_16__t__x__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t19b__ref 0))
(((t19b__refqtmk (t19b__content us_rep)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) us_rep 
  (t19b__content a))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(assert
;; defqtvc
 ;; File "tests.adb", line 340, characters 0-0
  (not
  (forall ((b__split_fields integer) (b__split_discrs Bool))
  (let ((temp___467 (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
                    (us_split_fieldsqtmk dummy))))
  (forall ((a__split_fields integer))
  (=> (= (us_split_fieldsqtmk a__split_fields) (us_split_fields1 temp___467))
  (=> (= a__split_discrs (us_split_discrs1 temp___467))
  (=> (= a__attr__constrained true)
  (=> (dynamic_invariant
  (us_repqtmk a__split_discrs (us_split_fieldsqtmk a__split_fields)) true
  false true true)
  (=> (= b__attr__constrained false)
  (=> (default_initial_assumption
  (us_repqtmk (us_split_discrsqtmk b__split_discrs)
  (us_split_fieldsqtmk b__split_fields)) false)
  (=> (= b__attr__constrained true)
  (= (rec__tests__test_16__t__d a__split_discrs) b__split_discrs)))))))))))))
(check-sat)
(exit)
