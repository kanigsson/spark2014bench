;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun us_compatible_tags (Int Int) Bool)

;; __compatible_tags_refl
  (assert (forall ((tag Int)) (us_compatible_tags tag tag)))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__ext__ us_private)))))
(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((root_t__ref 0))
(((root_t__refqtmk (root_t__content us_rep)))))
(define-fun root_t__ref_root_t__content__projection ((a root_t__ref)) us_rep 
  (root_t__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__foo__widget_t__x integer)(rec__foo__widget_t__y integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__foo__widget_t__x__projection ((a us_split_fields2)) integer 
  (rec__foo__widget_t__x a))

(define-fun us_split_fields_rec__foo__widget_t__y__projection ((a us_split_fields2)) integer 
  (rec__foo__widget_t__y a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer integer us_private) us_private)

(declare-fun extract__foo__widget_t__x (us_private) integer)

;; extract__foo__widget_t__x__conv
  (assert
  (forall ((foo__widget_t__x integer) (foo__widget_t__y integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__foo__widget_t__x
     (hide_ext__ foo__widget_t__x foo__widget_t__y rec__ext__2)) foo__widget_t__x))))

(declare-fun extract__foo__widget_t__y (us_private) integer)

;; extract__foo__widget_t__y__conv
  (assert
  (forall ((foo__widget_t__x integer) (foo__widget_t__y integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__foo__widget_t__y
     (hide_ext__ foo__widget_t__x foo__widget_t__y rec__ext__2)) foo__widget_t__y))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (hide_ext__
                                         (rec__foo__widget_t__x
                                         (us_split_fields3 a))
                                         (rec__foo__widget_t__y
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (extract__foo__widget_t__x
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__foo__widget_t__y
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__foo__widget_t__x (us_split_fields3 a))) 
                         (to_rep
                         (rec__foo__widget_t__x (us_split_fields3 b))))
                         (= (to_rep
                            (rec__foo__widget_t__y (us_split_fields3 a))) 
                         (to_rep
                         (rec__foo__widget_t__y (us_split_fields3 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const foo__widget_t__x__first__bit Int)

(declare-const foo__widget_t__x__last__bit Int)

(declare-const foo__widget_t__x__position Int)

;; foo__widget_t__x__first__bit_axiom
  (assert (<= 0 foo__widget_t__x__first__bit))

;; foo__widget_t__x__last__bit_axiom
  (assert (< foo__widget_t__x__first__bit foo__widget_t__x__last__bit))

;; foo__widget_t__x__position_axiom
  (assert (<= 0 foo__widget_t__x__position))

(declare-const foo__widget_t__y__first__bit Int)

(declare-const foo__widget_t__y__last__bit Int)

(declare-const foo__widget_t__y__position Int)

;; foo__widget_t__y__first__bit_axiom
  (assert (<= 0 foo__widget_t__y__first__bit))

;; foo__widget_t__y__last__bit_axiom
  (assert (< foo__widget_t__y__first__bit foo__widget_t__y__last__bit))

;; foo__widget_t__y__position_axiom
  (assert (<= 0 foo__widget_t__y__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((widget_t__ref 0))
(((widget_t__refqtmk (widget_t__content us_rep1)))))
(define-fun widget_t__ref_widget_t__content__projection ((a widget_t__ref)) us_rep1 
  (widget_t__content a))

(declare-fun hash (us_rep1) Int)

(declare-fun hash__function_guard (Int us_rep1) Bool)

(declare-fun hash1 (Int us_rep1) Int)

(declare-fun hash__function_guard1 (Int Int us_rep1) Bool)

(define-fun default_initial_assumption ((temp___expr_178 us_rep1)
  (temp___skip_top_level_179 Bool)) Bool (= (attr__tag1 temp___expr_178) 
  us_tag1))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__foo__nice_widget_t__round Bool)(rec__foo__widget_t__x1 integer)(rec__foo__widget_t__y1 integer)(rec__ext__2 us_private)))))
(define-fun us_split_fields_rec__foo__nice_widget_t__round__projection ((a us_split_fields4)) Bool 
  (rec__foo__nice_widget_t__round a))

(define-fun us_split_fields_rec__foo__widget_t__x__2__projection ((a us_split_fields4)) integer 
  (rec__foo__widget_t__x1 a))

(define-fun us_split_fields_rec__foo__widget_t__y__2__projection ((a us_split_fields4)) integer 
  (rec__foo__widget_t__y1 a))

(define-fun us_split_fields_rec__ext____3__projection ((a us_split_fields4)) us_private 
  (rec__ext__2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)(attr__tag2 Int)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun us_rep_attr__tag__3__projection ((a us_rep2)) Int (attr__tag2 a))

(declare-fun hide_ext__1 (Bool integer integer us_private) us_private)

(declare-fun extract__foo__nice_widget_t__round (us_private) Bool)

;; extract__foo__nice_widget_t__round__conv
  (assert
  (forall ((foo__nice_widget_t__round Bool))
  (forall ((foo__nice_widget_t__x integer) (foo__nice_widget_t__y integer))
  (forall ((rec__ext__3 us_private))
  (= (ite (extract__foo__nice_widget_t__round
          (hide_ext__1 foo__nice_widget_t__round foo__nice_widget_t__x
          foo__nice_widget_t__y rec__ext__3)) 1 0) (ite foo__nice_widget_t__round 1 0))))))

;; extract__foo__widget_t__x__conv
  (assert
  (forall ((foo__nice_widget_t__round Bool))
  (forall ((foo__nice_widget_t__x integer) (foo__nice_widget_t__y integer))
  (forall ((rec__ext__3 us_private))
  (= (extract__foo__widget_t__x
     (hide_ext__1 foo__nice_widget_t__round foo__nice_widget_t__x
     foo__nice_widget_t__y rec__ext__3)) foo__nice_widget_t__x)))))

;; extract__foo__widget_t__y__conv
  (assert
  (forall ((foo__nice_widget_t__round Bool))
  (forall ((foo__nice_widget_t__x integer) (foo__nice_widget_t__y integer))
  (forall ((rec__ext__3 us_private))
  (= (extract__foo__widget_t__y
     (hide_ext__1 foo__nice_widget_t__round foo__nice_widget_t__x
     foo__nice_widget_t__y rec__ext__3)) foo__nice_widget_t__y)))))

(declare-fun extract__ext__1 (us_private) us_private)

(define-fun to_base1 ((a us_rep2)) us_rep (us_repqtmk
                                          (us_split_fieldsqtmk
                                          (hide_ext__1
                                          (rec__foo__nice_widget_t__round
                                          (us_split_fields5 a))
                                          (rec__foo__widget_t__x1
                                          (us_split_fields5 a))
                                          (rec__foo__widget_t__y1
                                          (us_split_fields5 a))
                                          (rec__ext__2 (us_split_fields5 a))))
                                          (attr__tag2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (us_repqtmk2
                                          (us_split_fieldsqtmk2
                                          (extract__foo__nice_widget_t__round
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__foo__widget_t__x
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__foo__widget_t__y
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__ext__1
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (ite (rec__foo__nice_widget_t__round
                                 (us_split_fields5 a)) 1 0) (ite (rec__foo__nice_widget_t__round
                                                                 (us_split_fields5
                                                                 b)) 1 0))
                         (= (to_rep
                            (rec__foo__widget_t__x1 (us_split_fields5 a))) 
                         (to_rep
                         (rec__foo__widget_t__x1 (us_split_fields5 b)))))
                         (= (to_rep
                            (rec__foo__widget_t__y1 (us_split_fields5 a))) 
                         (to_rep
                         (rec__foo__widget_t__y1 (us_split_fields5 b)))))
                    true false))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const foo__nice_widget_t__round__first__bit Int)

(declare-const foo__nice_widget_t__round__last__bit Int)

(declare-const foo__nice_widget_t__round__position Int)

;; foo__nice_widget_t__round__first__bit_axiom
  (assert (<= 0 foo__nice_widget_t__round__first__bit))

;; foo__nice_widget_t__round__last__bit_axiom
  (assert
  (< foo__nice_widget_t__round__first__bit foo__nice_widget_t__round__last__bit))

;; foo__nice_widget_t__round__position_axiom
  (assert (<= 0 foo__nice_widget_t__round__position))

(declare-const foo__widget_t__x__first__bit1 Int)

(declare-const foo__widget_t__x__last__bit1 Int)

(declare-const foo__widget_t__x__position1 Int)

;; foo__widget_t__x__first__bit_axiom
  (assert (<= 0 foo__widget_t__x__first__bit1))

;; foo__widget_t__x__last__bit_axiom
  (assert (< foo__widget_t__x__first__bit1 foo__widget_t__x__last__bit1))

;; foo__widget_t__x__position_axiom
  (assert (<= 0 foo__widget_t__x__position1))

(declare-const foo__widget_t__y__first__bit1 Int)

(declare-const foo__widget_t__y__last__bit1 Int)

(declare-const foo__widget_t__y__position1 Int)

;; foo__widget_t__y__first__bit_axiom
  (assert (<= 0 foo__widget_t__y__first__bit1))

;; foo__widget_t__y__last__bit_axiom
  (assert (< foo__widget_t__y__first__bit1 foo__widget_t__y__last__bit1))

;; foo__widget_t__y__position_axiom
  (assert (<= 0 foo__widget_t__y__position1))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((nice_widget_t__ref 0))
(((nice_widget_t__refqtmk (nice_widget_t__content us_rep2)))))
(define-fun nice_widget_t__ref_nice_widget_t__content__projection ((a nice_widget_t__ref)) us_rep2 
  (nice_widget_t__content a))

(declare-fun hash2 (us_rep2) Int)

(declare-fun hash__function_guard2 (Int us_rep2) Bool)

(declare-fun hash3 (Int us_rep2) Int)

(declare-fun hash__function_guard3 (Int Int us_rep2) Bool)

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__foo__magic_widget_t__magic Bool)(rec__foo__widget_t__x2 integer)(rec__foo__widget_t__y2 integer)(rec__ext__3 us_private)))))
(define-fun us_split_fields_rec__foo__magic_widget_t__magic__projection ((a us_split_fields6)) Bool 
  (rec__foo__magic_widget_t__magic a))

(define-fun us_split_fields_rec__foo__widget_t__x__3__projection ((a us_split_fields6)) integer 
  (rec__foo__widget_t__x2 a))

(define-fun us_split_fields_rec__foo__widget_t__y__3__projection ((a us_split_fields6)) integer 
  (rec__foo__widget_t__y2 a))

(define-fun us_split_fields_rec__ext____4__projection ((a us_split_fields6)) us_private 
  (rec__ext__3 a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__11__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3 (us_split_fields7 us_split_fields6)(attr__tag3 Int)))))
(define-fun us_rep___split_fields__11__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun us_rep_attr__tag__4__projection ((a us_rep3)) Int (attr__tag3 a))

(declare-fun hide_ext__2 (Bool integer integer us_private) us_private)

(declare-fun extract__foo__magic_widget_t__magic (us_private) Bool)

;; extract__foo__magic_widget_t__magic__conv
  (assert
  (forall ((foo__magic_widget_t__magic Bool))
  (forall ((foo__magic_widget_t__x integer) (foo__magic_widget_t__y integer))
  (forall ((rec__ext__4 us_private))
  (= (ite (extract__foo__magic_widget_t__magic
          (hide_ext__2 foo__magic_widget_t__magic foo__magic_widget_t__x
          foo__magic_widget_t__y rec__ext__4)) 1 0) (ite foo__magic_widget_t__magic 1 0))))))

;; extract__foo__widget_t__x__conv
  (assert
  (forall ((foo__magic_widget_t__magic Bool))
  (forall ((foo__magic_widget_t__x integer) (foo__magic_widget_t__y integer))
  (forall ((rec__ext__4 us_private))
  (= (extract__foo__widget_t__x
     (hide_ext__2 foo__magic_widget_t__magic foo__magic_widget_t__x
     foo__magic_widget_t__y rec__ext__4)) foo__magic_widget_t__x)))))

;; extract__foo__widget_t__y__conv
  (assert
  (forall ((foo__magic_widget_t__magic Bool))
  (forall ((foo__magic_widget_t__x integer) (foo__magic_widget_t__y integer))
  (forall ((rec__ext__4 us_private))
  (= (extract__foo__widget_t__y
     (hide_ext__2 foo__magic_widget_t__magic foo__magic_widget_t__x
     foo__magic_widget_t__y rec__ext__4)) foo__magic_widget_t__y)))))

(declare-fun extract__ext__2 (us_private) us_private)

(define-fun to_base2 ((a us_rep3)) us_rep (us_repqtmk
                                          (us_split_fieldsqtmk
                                          (hide_ext__2
                                          (rec__foo__magic_widget_t__magic
                                          (us_split_fields7 a))
                                          (rec__foo__widget_t__x2
                                          (us_split_fields7 a))
                                          (rec__foo__widget_t__y2
                                          (us_split_fields7 a))
                                          (rec__ext__3 (us_split_fields7 a))))
                                          (attr__tag3 a)))

(define-fun of_base2 ((r us_rep)) us_rep3 (us_repqtmk3
                                          (us_split_fieldsqtmk3
                                          (extract__foo__magic_widget_t__magic
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__foo__widget_t__x
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__foo__widget_t__y
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__ext__2
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (ite (rec__foo__magic_widget_t__magic
                                 (us_split_fields7 a)) 1 0) (ite (rec__foo__magic_widget_t__magic
                                                                 (us_split_fields7
                                                                 b)) 1 0))
                         (= (to_rep
                            (rec__foo__widget_t__x2 (us_split_fields7 a))) 
                         (to_rep
                         (rec__foo__widget_t__x2 (us_split_fields7 b)))))
                         (= (to_rep
                            (rec__foo__widget_t__y2 (us_split_fields7 a))) 
                         (to_rep
                         (rec__foo__widget_t__y2 (us_split_fields7 b)))))
                    true false))

(declare-const us_tag3 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const foo__magic_widget_t__magic__first__bit Int)

(declare-const foo__magic_widget_t__magic__last__bit Int)

(declare-const foo__magic_widget_t__magic__position Int)

;; foo__magic_widget_t__magic__first__bit_axiom
  (assert (<= 0 foo__magic_widget_t__magic__first__bit))

;; foo__magic_widget_t__magic__last__bit_axiom
  (assert
  (< foo__magic_widget_t__magic__first__bit foo__magic_widget_t__magic__last__bit))

;; foo__magic_widget_t__magic__position_axiom
  (assert (<= 0 foo__magic_widget_t__magic__position))

(declare-const foo__widget_t__x__first__bit2 Int)

(declare-const foo__widget_t__x__last__bit2 Int)

(declare-const foo__widget_t__x__position2 Int)

;; foo__widget_t__x__first__bit_axiom
  (assert (<= 0 foo__widget_t__x__first__bit2))

;; foo__widget_t__x__last__bit_axiom
  (assert (< foo__widget_t__x__first__bit2 foo__widget_t__x__last__bit2))

;; foo__widget_t__x__position_axiom
  (assert (<= 0 foo__widget_t__x__position2))

(declare-const foo__widget_t__y__first__bit2 Int)

(declare-const foo__widget_t__y__last__bit2 Int)

(declare-const foo__widget_t__y__position2 Int)

;; foo__widget_t__y__first__bit_axiom
  (assert (<= 0 foo__widget_t__y__first__bit2))

;; foo__widget_t__y__last__bit_axiom
  (assert (< foo__widget_t__y__first__bit2 foo__widget_t__y__last__bit2))

;; foo__widget_t__y__position_axiom
  (assert (<= 0 foo__widget_t__y__position2))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((magic_widget_t__ref 0))
(((magic_widget_t__refqtmk (magic_widget_t__content us_rep3)))))
(define-fun magic_widget_t__ref_magic_widget_t__content__projection ((a magic_widget_t__ref)) us_rep3 
  (magic_widget_t__content a))

(declare-fun hash4 (us_rep3) Int)

(declare-fun hash__function_guard4 (Int us_rep3) Bool)

(declare-fun hash5 (Int us_rep3) Int)

(declare-fun hash__function_guard5 (Int Int us_rep3) Bool)

;; hash__post_axiom
  (assert
  (forall ((obj us_rep1))
  (! (let ((result (hash obj)))
     (=> (hash__function_guard result obj) (dynamic_invariant1 result true
     false true true))) :pattern ((hash obj)) )))

;; hash__post__dispatch_axiom
  (assert
  (forall ((attr__tag4 Int))
  (forall ((obj us_rep1))
  (! (let ((result (hash1 attr__tag4 obj)))
     (=> (hash__function_guard1 result attr__tag4 obj) (dynamic_invariant1
     result true false true true))) :pattern ((hash1 attr__tag4 obj)) ))))

;; foo__widget_t__compat_axiom
  (assert
  (forall ((obj us_rep1))
  (! (=> (hash__function_guard1 (hash1 us_tag1 obj) us_tag1 obj)
     (and (forall ((obj1 us_rep1)) (hash__function_guard (hash obj1) obj1))
     (= (hash obj) (hash1 us_tag1 obj)))) :pattern ((hash1 us_tag1 obj)) )))

;; foo__nice_widget_t__compat_axiom
  (assert
  (forall ((obj us_rep1))
  (! (=> (hash__function_guard1 (hash1 us_tag2 obj) us_tag2 obj)
     (and
     (forall ((obj1 us_rep1)) (hash__function_guard2
     (hash2 (of_base1 (to_base obj1))) (of_base1 (to_base obj1))))
     (= (hash2 (of_base1 (to_base obj))) (hash1 us_tag2 obj)))) :pattern (
  (hash1 us_tag2 obj)) )))

;; foo__magic_widget_t__compat_axiom
  (assert
  (forall ((obj us_rep1))
  (! (=> (hash__function_guard1 (hash1 us_tag3 obj) us_tag3 obj)
     (and
     (forall ((obj1 us_rep1)) (hash__function_guard4
     (hash4 (of_base2 (to_base obj1))) (of_base2 (to_base obj1))))
     (= (hash4 (of_base2 (to_base obj))) (hash1 us_tag3 obj)))) :pattern (
  (hash1 us_tag3 obj)) )))

(define-fun default_initial_assumption1 ((temp___expr_187 us_rep2)
  (temp___skip_top_level_188 Bool)) Bool (= (attr__tag2 temp___expr_187) 
  us_tag2))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const x__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const y__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const z__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun default_initial_assumption2 ((temp___expr_171 us_rep)
  (temp___skip_top_level_172 Bool)) Bool (= (attr__tag temp___expr_171) 
  us_tag))

;; hash__post_axiom
  (assert
  (forall ((obj us_rep2))
  (! (let ((result (hash2 obj)))
     (=> (hash__function_guard2 result obj) (dynamic_invariant1 result true
     false true true))) :pattern ((hash2 obj)) )))

;; hash__post__dispatch_axiom
  (assert
  (forall ((attr__tag4 Int))
  (forall ((obj us_rep2))
  (! (let ((result (hash3 attr__tag4 obj)))
     (=> (hash__function_guard3 result attr__tag4 obj) (dynamic_invariant1
     result true false true true))) :pattern ((hash3 attr__tag4 obj)) ))))

;; foo__nice_widget_t__compat_axiom
  (assert
  (forall ((obj us_rep2))
  (! (=> (hash__function_guard3 (hash3 us_tag2 obj) us_tag2 obj)
     (and (forall ((obj1 us_rep2)) (hash__function_guard2 (hash2 obj1) obj1))
     (= (hash2 obj) (hash3 us_tag2 obj)))) :pattern ((hash3 us_tag2 obj)) )))

(define-fun default_initial_assumption3 ((temp___expr_345 us_rep3)
  (temp___skip_top_level_346 Bool)) Bool (= (attr__tag3 temp___expr_345) 
  us_tag3))

;; hash__post_axiom
  (assert
  (forall ((obj us_rep3))
  (! (let ((result (hash4 obj)))
     (=> (hash__function_guard4 result obj) (dynamic_invariant1 result true
     false true true))) :pattern ((hash4 obj)) )))

;; hash__post__dispatch_axiom
  (assert
  (forall ((attr__tag4 Int))
  (forall ((obj us_rep3))
  (! (let ((result (hash5 attr__tag4 obj)))
     (=> (hash__function_guard5 result attr__tag4 obj) (dynamic_invariant1
     result true false true true))) :pattern ((hash5 attr__tag4 obj)) ))))

;; foo__magic_widget_t__compat_axiom
  (assert
  (forall ((obj us_rep3))
  (! (=> (hash__function_guard5 (hash5 us_tag3 obj) us_tag3 obj)
     (and (forall ((obj1 us_rep3)) (hash__function_guard4 (hash4 obj1) obj1))
     (= (hash4 obj) (hash5 us_tag3 obj)))) :pattern ((hash5 us_tag3 obj)) )))

(assert
;; defqtvc
 ;; File "tests.adb", line 406, characters 0-0
  (not
  (forall ((n Int) (m Int) (o integer) (o1 integer)
  (x__split_fields us_split_fields4))
  (=> (dynamic_invariant a true false true true)
  (=> (dynamic_invariant1 n false false true true)
  (=> (dynamic_invariant1 m false false true true)
  (=> (= (to_rep o) a)
  (=> (= (to_rep o1) a)
  (=> (= x__split_fields (us_split_fieldsqtmk2 b o1 o us_null_ext__))
  (=> (= x__attr__tag us_tag2)
  (let ((tests__test_20__y__assume (of_base
                                   (to_base1
                                   (us_repqtmk2 x__split_fields x__attr__tag)))))
  (forall ((y__split_fields us_split_fields2))
  (=> (= y__split_fields (us_split_fields3 tests__test_20__y__assume))
  (=> (= y__attr__tag (attr__tag1 tests__test_20__y__assume))
  (us_compatible_tags
  (attr__tag (to_base (us_repqtmk1 y__split_fields y__attr__tag))) us_tag2)))))))))))))))
(check-sat)
