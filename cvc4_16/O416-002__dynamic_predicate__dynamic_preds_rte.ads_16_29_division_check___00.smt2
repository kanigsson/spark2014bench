;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort small 0)

(declare-fun smallqtint (small) Int)

;; small'axiom
  (assert
  (forall ((i small))
  (and (<= 0 (smallqtint i)) (<= (smallqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (small small) Bool)

(declare-const dummy small)

(declare-datatypes ((small__ref 0))
(((small__refqtmk (small__content small)))))
(define-fun small__ref_small__content__projection ((a small__ref)) small 
  (small__content a))

(define-fun to_rep ((x small)) Int (smallqtint x))

(declare-fun of_rep (Int) small)

;; inversion_axiom
  (assert
  (forall ((x small)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x small)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort very_small 0)

(declare-fun very_smallqtint (very_small) Int)

;; very_small'axiom
  (assert
  (forall ((i very_small))
  (and (<= 0 (very_smallqtint i)) (<= (very_smallqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (very_small very_small) Bool)

(declare-const dummy1 very_small)

(declare-datatypes ((very_small__ref 0))
(((very_small__refqtmk (very_small__content very_small)))))
(define-fun very_small__ref_very_small__content__projection ((a very_small__ref)) very_small 
  (very_small__content a))

(define-fun to_rep1 ((x very_small)) Int (very_smallqtint x))

(declare-fun of_rep1 (Int) very_small)

;; inversion_axiom
  (assert
  (forall ((x very_small))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x very_small)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__dynamic_preds_rte__small_pair__a small)(rec__dynamic_preds_rte__small_pair__b very_small)))))
(define-fun us_split_fields_rec__dynamic_preds_rte__small_pair__a__projection ((a us_split_fields)) small 
  (rec__dynamic_preds_rte__small_pair__a a))

(define-fun us_split_fields_rec__dynamic_preds_rte__small_pair__b__projection ((a us_split_fields)) very_small 
  (rec__dynamic_preds_rte__small_pair__b a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__dynamic_preds_rte__small_pair__a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__dynamic_preds_rte__small_pair__a
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__dynamic_preds_rte__small_pair__b
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__dynamic_preds_rte__small_pair__b
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dynamic_preds_rte__small_pair__a__first__bit Int)

(declare-const dynamic_preds_rte__small_pair__a__last__bit Int)

(declare-const dynamic_preds_rte__small_pair__a__position Int)

;; dynamic_preds_rte__small_pair__a__first__bit_axiom
  (assert (<= 0 dynamic_preds_rte__small_pair__a__first__bit))

;; dynamic_preds_rte__small_pair__a__last__bit_axiom
  (assert
  (< dynamic_preds_rte__small_pair__a__first__bit dynamic_preds_rte__small_pair__a__last__bit))

;; dynamic_preds_rte__small_pair__a__position_axiom
  (assert (<= 0 dynamic_preds_rte__small_pair__a__position))

(declare-const dynamic_preds_rte__small_pair__b__first__bit Int)

(declare-const dynamic_preds_rte__small_pair__b__last__bit Int)

(declare-const dynamic_preds_rte__small_pair__b__position Int)

;; dynamic_preds_rte__small_pair__b__first__bit_axiom
  (assert (<= 0 dynamic_preds_rte__small_pair__b__first__bit))

;; dynamic_preds_rte__small_pair__b__last__bit_axiom
  (assert
  (< dynamic_preds_rte__small_pair__b__first__bit dynamic_preds_rte__small_pair__b__last__bit))

;; dynamic_preds_rte__small_pair__b__position_axiom
  (assert (<= 0 dynamic_preds_rte__small_pair__b__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((small_pair__ref 0))
(((small_pair__refqtmk (small_pair__content us_rep)))))
(define-fun small_pair__ref_small_pair__content__projection ((a small_pair__ref)) us_rep 
  (small_pair__content a))

(declare-datatypes ((ordered_small_pair__ref 0))
(((ordered_small_pair__refqtmk (ordered_small_pair__content us_rep)))))
(define-fun ordered_small_pair__ref_ordered_small_pair__content__projection ((a ordered_small_pair__ref)) us_rep 
  (ordered_small_pair__content a))

(define-fun dynamic_invariant ((temp___expr_207 us_rep)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)
  (temp___do_typ_inv_206 Bool)) Bool (and
                                     (=> (= temp___do_toplevel_205 true)
                                     (=> (= temp___is_init_203 true)
                                     (= (div1
                                        (to_rep
                                        (rec__dynamic_preds_rte__small_pair__a
                                        (us_split_fields1 temp___expr_207)))
                                        (to_rep1
                                        (rec__dynamic_preds_rte__small_pair__b
                                        (us_split_fields1 temp___expr_207)))) 0)))
                                     (and
                                     (=> (= temp___is_init_203 true)
                                     (< (* 2 (to_rep
                                             (rec__dynamic_preds_rte__small_pair__a
                                             (us_split_fields1
                                             temp___expr_207)))) 100000))
                                     (=> (= temp___is_init_203 true)
                                     (let ((temp___210 (rec__dynamic_preds_rte__small_pair__b
                                                       (us_split_fields1
                                                       temp___expr_207))))
                                     (< (* (to_rep1 temp___210) (to_rep1
                                                                temp___210)) 100000))))))

(define-fun dynamic_predicate ((temp___215 us_rep)) Bool (= (div1
                                                            (to_rep
                                                            (rec__dynamic_preds_rte__small_pair__a
                                                            (us_split_fields1
                                                            temp___215)))
                                                            (to_rep1
                                                            (rec__dynamic_preds_rte__small_pair__b
                                                            (us_split_fields1
                                                            temp___215)))) 0))

(declare-const i3s Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i5s Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const i7s us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_165 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_161 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_165))
                                     (=> (= temp___do_toplevel_163 true)
                                     (=> (= temp___is_init_161 true)
                                     (< (* 2 temp___expr_165) 100000)))))

(define-fun dynamic_predicate1 ((temp___169 Int)) Bool (< (* 2 temp___169) 100000))

(define-fun dynamic_invariant2 ((temp___expr_175 Int)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)
  (temp___do_typ_inv_174 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_171 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_175))
                                     (=> (= temp___do_toplevel_173 true)
                                     (=> (= temp___is_init_171 true)
                                     (< (* temp___expr_175 temp___expr_175) 100000)))))

(define-fun dynamic_predicate2 ((temp___179 Int)) Bool (< (* temp___179 temp___179) 100000))

(assert
;; defqtvc
 ;; File "dynamic_preds_rte.ads", line 14, characters 0-0
  (not
  (forall ((o Int))
  (=> (dynamic_invariant1 i3s true false true true)
  (=> (dynamic_invariant2 i5s true false true true)
  (=> (dynamic_invariant1 i3s true false true true)
  (=> (dynamic_invariant2 i5s true false true true)
  (=> (dynamic_invariant i7s true false false true)
  (=>
  (= (to_rep1 (rec__dynamic_preds_rte__small_pair__b (us_split_fields1 i7s))) o)
  (not (= o 0)))))))))))
(check-sat)
