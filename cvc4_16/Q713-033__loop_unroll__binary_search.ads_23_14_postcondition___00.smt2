(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const a (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort u 0)

(declare-fun uqtint (u) Int)

;; u'axiom
  (assert (forall ((i1 u)) (and (<= 1 (uqtint i1)) (<= (uqtint i1) 10))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (u u) Bool)

(declare-const dummy1 u)

(declare-datatypes ((u__ref 0))
(((u__refqtmk (u__content u)))))
(define-fun u__ref_u__content__projection ((a1 u__ref)) u (u__content a1))

(define-fun dynamic_invariant1 ((temp___expr_167 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (<= 1 10)) (in_range2 temp___expr_167)))

(assert
;; defqtvc
 ;; File "binary_search.ads", line 17, characters 0-0
  (not
  (forall ((left Int) (right Int) (med Int)
  (binary_search__search__result Int))
  (=> (dynamic_invariant i true false true true)
  (=>
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 10))
  (forall ((i2 Int))
  (=> (and (<= i1 i2) (<= i2 10))
  (<= (to_rep (select a i1)) (to_rep (select a i2)))))))
  (=> (dynamic_invariant1 left false false true true)
  (=> (dynamic_invariant1 right false false true true)
  (=> (dynamic_invariant1 med false false true true)
  (=>
  (exists ((left1 Int))
  (and (= left1 1)
  (exists ((right1 Int))
  (and (= right1 10)
  (exists ((o Bool))
  (and
  (exists ((o1 Int))
  (and (= (to_rep (select a left1)) o1)
  (ite (< i o1) (= o true)
  (exists ((o2 Int))
  (and (= (to_rep (select a right1)) o2) (= o (ite (< o2 i) true false)))))))
  (exists ((spark__branch Bool))
  (and (= spark__branch o)
  (ite (= spark__branch true) (= binary_search__search__result 0)
  (or
  (let ((o1 (+ left1 (div1 (- right1 left1) 2))))
  (and (in_range2 o1)
  (exists ((med1 Int))
  (and (= med1 o1)
  (or
  (exists ((o2 Int))
  (and (= (to_rep (select a med1)) o2)
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (< o2 i) true false))
  (and (not (= spark__branch1 true))
  (exists ((o3 Int))
  (and (= (to_rep (select a med1)) o3)
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (< i o3) true false))
  (and (not (= spark__branch2 true)) (= binary_search__search__result med1)))))))))))
  (exists ((spark__branch1 Bool) (left2 Int) (right2 Int))
  (and
  (exists ((o2 Int))
  (and (= (to_rep (select a med1)) o2)
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (< o2 i) true false))
  (ite (= spark__branch2 true)
  (and
  (and (let ((o3 (+ med1 1))) (and (in_range2 o3) (= left2 o3)))
  (= spark__branch1 spark__branch2)) (= right2 right1))
  (and
  (exists ((o3 Int))
  (and (= (to_rep (select a med1)) o3)
  (and (= spark__branch1 (ite (< i o3) true false))
  (and (= spark__branch1 true)
  (let ((o4 (- med1 1))) (and (in_range2 o4) (= right2 o4)))))))
  (= left2 left1)))))))
  (let ((o2 (+ left2 (div1 (- right2 left2) 2))))
  (and (in_range2 o2)
  (exists ((med2 Int))
  (and (= med2 o2)
  (or
  (exists ((o3 Int))
  (and (= (to_rep (select a med2)) o3)
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (< o3 i) true false))
  (and (not (= spark__branch2 true))
  (exists ((o4 Int))
  (and (= (to_rep (select a med2)) o4)
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (< i o4) true false))
  (and (not (= spark__branch3 true)) (= binary_search__search__result med2)))))))))))
  (exists ((spark__branch2 Bool) (left3 Int) (right3 Int))
  (and
  (exists ((o3 Int))
  (and (= (to_rep (select a med2)) o3)
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (< o3 i) true false))
  (ite (= spark__branch3 true)
  (and
  (and (let ((o4 (+ med2 1))) (and (in_range2 o4) (= left3 o4)))
  (= spark__branch2 spark__branch3)) (= right3 right2))
  (and
  (exists ((o4 Int))
  (and (= (to_rep (select a med2)) o4)
  (and (= spark__branch2 (ite (< i o4) true false))
  (and (= spark__branch2 true)
  (let ((o5 (- med2 1))) (and (in_range2 o5) (= right3 o5)))))))
  (= left3 left2)))))))
  (let ((o3 (+ left3 (div1 (- right3 left3) 2))))
  (and (in_range2 o3)
  (exists ((med3 Int))
  (and (= med3 o3)
  (or
  (exists ((o4 Int))
  (and (= (to_rep (select a med3)) o4)
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (< o4 i) true false))
  (and (not (= spark__branch3 true))
  (exists ((o5 Int))
  (and (= (to_rep (select a med3)) o5)
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (< i o5) true false))
  (and (not (= spark__branch4 true)) (= binary_search__search__result med3)))))))))))
  (exists ((spark__branch3 Bool) (left4 Int) (right4 Int))
  (and
  (exists ((o4 Int))
  (and (= (to_rep (select a med3)) o4)
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (< o4 i) true false))
  (ite (= spark__branch4 true)
  (and
  (and (let ((o5 (+ med3 1))) (and (in_range2 o5) (= left4 o5)))
  (= spark__branch3 spark__branch4)) (= right4 right3))
  (and
  (exists ((o5 Int))
  (and (= (to_rep (select a med3)) o5)
  (and (= spark__branch3 (ite (< i o5) true false))
  (and (= spark__branch3 true)
  (let ((o6 (- med3 1))) (and (in_range2 o6) (= right4 o6)))))))
  (= left4 left3)))))))
  (let ((o4 (+ left4 (div1 (- right4 left4) 2))))
  (and (in_range2 o4)
  (exists ((med4 Int))
  (and (= med4 o4)
  (or
  (exists ((o5 Int))
  (and (= (to_rep (select a med4)) o5)
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (< o5 i) true false))
  (and (not (= spark__branch4 true))
  (exists ((o6 Int))
  (and (= (to_rep (select a med4)) o6)
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (< i o6) true false))
  (and (not (= spark__branch5 true)) (= binary_search__search__result med4)))))))))))
  (exists ((spark__branch4 Bool) (left5 Int) (right5 Int))
  (and
  (exists ((o5 Int))
  (and (= (to_rep (select a med4)) o5)
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (< o5 i) true false))
  (ite (= spark__branch5 true)
  (and
  (and (let ((o6 (+ med4 1))) (and (in_range2 o6) (= left5 o6)))
  (= spark__branch4 spark__branch5)) (= right5 right4))
  (and
  (exists ((o6 Int))
  (and (= (to_rep (select a med4)) o6)
  (and (= spark__branch4 (ite (< i o6) true false))
  (and (= spark__branch4 true)
  (let ((o7 (- med4 1))) (and (in_range2 o7) (= right5 o7)))))))
  (= left5 left4)))))))
  (let ((o5 (+ left5 (div1 (- right5 left5) 2))))
  (and (in_range2 o5)
  (exists ((med5 Int))
  (and (= med5 o5)
  (or
  (exists ((o6 Int))
  (and (= (to_rep (select a med5)) o6)
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (< o6 i) true false))
  (and (not (= spark__branch5 true))
  (exists ((o7 Int))
  (and (= (to_rep (select a med5)) o7)
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (< i o7) true false))
  (and (not (= spark__branch6 true)) (= binary_search__search__result med5)))))))))))
  (exists ((spark__branch5 Bool) (left6 Int) (right6 Int))
  (and
  (exists ((o6 Int))
  (and (= (to_rep (select a med5)) o6)
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (< o6 i) true false))
  (ite (= spark__branch6 true)
  (and
  (and (let ((o7 (+ med5 1))) (and (in_range2 o7) (= left6 o7)))
  (= spark__branch5 spark__branch6)) (= right6 right5))
  (and
  (exists ((o7 Int))
  (and (= (to_rep (select a med5)) o7)
  (and (= spark__branch5 (ite (< i o7) true false))
  (and (= spark__branch5 true)
  (let ((o8 (- med5 1))) (and (in_range2 o8) (= right6 o8)))))))
  (= left6 left5)))))))
  (let ((o6 (+ left6 (div1 (- right6 left6) 2))))
  (and (in_range2 o6)
  (exists ((med6 Int))
  (and (= med6 o6)
  (or
  (exists ((o7 Int))
  (and (= (to_rep (select a med6)) o7)
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (< o7 i) true false))
  (and (not (= spark__branch6 true))
  (exists ((o8 Int))
  (and (= (to_rep (select a med6)) o8)
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (< i o8) true false))
  (and (not (= spark__branch7 true)) (= binary_search__search__result med6)))))))))))
  (exists ((spark__branch6 Bool) (left7 Int) (right7 Int))
  (and
  (exists ((o7 Int))
  (and (= (to_rep (select a med6)) o7)
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (< o7 i) true false))
  (ite (= spark__branch7 true)
  (and
  (and (let ((o8 (+ med6 1))) (and (in_range2 o8) (= left7 o8)))
  (= spark__branch6 spark__branch7)) (= right7 right6))
  (and
  (exists ((o8 Int))
  (and (= (to_rep (select a med6)) o8)
  (and (= spark__branch6 (ite (< i o8) true false))
  (and (= spark__branch6 true)
  (let ((o9 (- med6 1))) (and (in_range2 o9) (= right7 o9)))))))
  (= left7 left6)))))))
  (let ((o7 (+ left7 (div1 (- right7 left7) 2))))
  (and (in_range2 o7)
  (exists ((med7 Int))
  (and (= med7 o7)
  (or
  (exists ((o8 Int))
  (and (= (to_rep (select a med7)) o8)
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (< o8 i) true false))
  (and (not (= spark__branch7 true))
  (exists ((o9 Int))
  (and (= (to_rep (select a med7)) o9)
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (< i o9) true false))
  (and (not (= spark__branch8 true)) (= binary_search__search__result med7)))))))))))
  (exists ((spark__branch7 Bool) (left8 Int) (right8 Int))
  (and
  (exists ((o8 Int))
  (and (= (to_rep (select a med7)) o8)
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (< o8 i) true false))
  (ite (= spark__branch8 true)
  (and
  (and (let ((o9 (+ med7 1))) (and (in_range2 o9) (= left8 o9)))
  (= spark__branch7 spark__branch8)) (= right8 right7))
  (and
  (exists ((o9 Int))
  (and (= (to_rep (select a med7)) o9)
  (and (= spark__branch7 (ite (< i o9) true false))
  (and (= spark__branch7 true)
  (let ((o10 (- med7 1))) (and (in_range2 o10) (= right8 o10)))))))
  (= left8 left7)))))))
  (let ((o8 (+ left8 (div1 (- right8 left8) 2))))
  (and (in_range2 o8)
  (exists ((med8 Int))
  (and (= med8 o8)
  (or
  (exists ((o9 Int))
  (and (= (to_rep (select a med8)) o9)
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (< o9 i) true false))
  (and (not (= spark__branch8 true))
  (exists ((o10 Int))
  (and (= (to_rep (select a med8)) o10)
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (< i o10) true false))
  (and (not (= spark__branch9 true)) (= binary_search__search__result med8)))))))))))
  (exists ((spark__branch8 Bool) (left9 Int) (right9 Int))
  (and
  (exists ((o9 Int))
  (and (= (to_rep (select a med8)) o9)
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (< o9 i) true false))
  (ite (= spark__branch9 true)
  (and
  (and (let ((o10 (+ med8 1))) (and (in_range2 o10) (= left9 o10)))
  (= spark__branch8 spark__branch9)) (= right9 right8))
  (and
  (exists ((o10 Int))
  (and (= (to_rep (select a med8)) o10)
  (and (= spark__branch8 (ite (< i o10) true false))
  (and (= spark__branch8 true)
  (let ((o11 (- med8 1))) (and (in_range2 o11) (= right9 o11)))))))
  (= left9 left8)))))))
  (let ((o9 (+ left9 (div1 (- right9 left9) 2))))
  (and (in_range2 o9)
  (exists ((med9 Int))
  (and (= med9 o9)
  (or
  (exists ((o10 Int))
  (and (= (to_rep (select a med9)) o10)
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (< o10 i) true false))
  (and (not (= spark__branch9 true))
  (exists ((o11 Int))
  (and (= (to_rep (select a med9)) o11)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (< i o11) true false))
  (and (not (= spark__branch10 true)) (= binary_search__search__result med9)))))))))))
  (exists ((spark__branch9 Bool) (left10 Int) (right10 Int))
  (and
  (exists ((o10 Int))
  (and (= (to_rep (select a med9)) o10)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (< o10 i) true false))
  (ite (= spark__branch10 true)
  (and
  (and (let ((o11 (+ med9 1))) (and (in_range2 o11) (= left10 o11)))
  (= spark__branch9 spark__branch10)) (= right10 right9))
  (and
  (exists ((o11 Int))
  (and (= (to_rep (select a med9)) o11)
  (and (= spark__branch9 (ite (< i o11) true false))
  (and (= spark__branch9 true)
  (let ((o12 (- med9 1))) (and (in_range2 o12) (= right10 o12)))))))
  (= left10 left9)))))))
  (let ((o10 (+ left10 (div1 (- right10 left10) 2))))
  (and (in_range2 o10)
  (exists ((med10 Int))
  (and (= med10 o10)
  (exists ((o11 Int))
  (and (= (to_rep (select a med10)) o11)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (< o11 i) true false))
  (and (not (= spark__branch10 true))
  (exists ((o12 Int))
  (and (= (to_rep (select a med10)) o12)
  (exists ((spark__branch11 Bool))
  (and (= spark__branch11 (ite (< i o12) true false))
  (and (not (= spark__branch11 true))
  (= binary_search__search__result med10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  (and
  (let ((o1 (+ left1 (div1 (- right1 left1) 2))))
  (and (in_range2 o1)
  (exists ((med1 Int))
  (and (= med1 o1)
  (exists ((spark__branch1 Bool) (left2 Int) (right2 Int))
  (and
  (exists ((o2 Int))
  (and (= (to_rep (select a med1)) o2)
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (< o2 i) true false))
  (ite (= spark__branch2 true)
  (and
  (and (let ((o3 (+ med1 1))) (and (in_range2 o3) (= left2 o3)))
  (= spark__branch1 spark__branch2)) (= right2 right1))
  (and
  (exists ((o3 Int))
  (and (= (to_rep (select a med1)) o3)
  (and (= spark__branch1 (ite (< i o3) true false))
  (and (= spark__branch1 true)
  (let ((o4 (- med1 1))) (and (in_range2 o4) (= right2 o4)))))))
  (= left2 left1)))))))
  (let ((o2 (+ left2 (div1 (- right2 left2) 2))))
  (and (in_range2 o2)
  (exists ((med2 Int))
  (and (= med2 o2)
  (exists ((spark__branch2 Bool) (left3 Int) (right3 Int))
  (and
  (exists ((o3 Int))
  (and (= (to_rep (select a med2)) o3)
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (< o3 i) true false))
  (ite (= spark__branch3 true)
  (and
  (and (let ((o4 (+ med2 1))) (and (in_range2 o4) (= left3 o4)))
  (= spark__branch2 spark__branch3)) (= right3 right2))
  (and
  (exists ((o4 Int))
  (and (= (to_rep (select a med2)) o4)
  (and (= spark__branch2 (ite (< i o4) true false))
  (and (= spark__branch2 true)
  (let ((o5 (- med2 1))) (and (in_range2 o5) (= right3 o5)))))))
  (= left3 left2)))))))
  (let ((o3 (+ left3 (div1 (- right3 left3) 2))))
  (and (in_range2 o3)
  (exists ((med3 Int))
  (and (= med3 o3)
  (exists ((spark__branch3 Bool) (left4 Int) (right4 Int))
  (and
  (exists ((o4 Int))
  (and (= (to_rep (select a med3)) o4)
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (< o4 i) true false))
  (ite (= spark__branch4 true)
  (and
  (and (let ((o5 (+ med3 1))) (and (in_range2 o5) (= left4 o5)))
  (= spark__branch3 spark__branch4)) (= right4 right3))
  (and
  (exists ((o5 Int))
  (and (= (to_rep (select a med3)) o5)
  (and (= spark__branch3 (ite (< i o5) true false))
  (and (= spark__branch3 true)
  (let ((o6 (- med3 1))) (and (in_range2 o6) (= right4 o6)))))))
  (= left4 left3)))))))
  (let ((o4 (+ left4 (div1 (- right4 left4) 2))))
  (and (in_range2 o4)
  (exists ((med4 Int))
  (and (= med4 o4)
  (exists ((spark__branch4 Bool) (left5 Int) (right5 Int))
  (and
  (exists ((o5 Int))
  (and (= (to_rep (select a med4)) o5)
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (< o5 i) true false))
  (ite (= spark__branch5 true)
  (and
  (and (let ((o6 (+ med4 1))) (and (in_range2 o6) (= left5 o6)))
  (= spark__branch4 spark__branch5)) (= right5 right4))
  (and
  (exists ((o6 Int))
  (and (= (to_rep (select a med4)) o6)
  (and (= spark__branch4 (ite (< i o6) true false))
  (and (= spark__branch4 true)
  (let ((o7 (- med4 1))) (and (in_range2 o7) (= right5 o7)))))))
  (= left5 left4)))))))
  (let ((o5 (+ left5 (div1 (- right5 left5) 2))))
  (and (in_range2 o5)
  (exists ((med5 Int))
  (and (= med5 o5)
  (exists ((spark__branch5 Bool) (left6 Int) (right6 Int))
  (and
  (exists ((o6 Int))
  (and (= (to_rep (select a med5)) o6)
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (< o6 i) true false))
  (ite (= spark__branch6 true)
  (and
  (and (let ((o7 (+ med5 1))) (and (in_range2 o7) (= left6 o7)))
  (= spark__branch5 spark__branch6)) (= right6 right5))
  (and
  (exists ((o7 Int))
  (and (= (to_rep (select a med5)) o7)
  (and (= spark__branch5 (ite (< i o7) true false))
  (and (= spark__branch5 true)
  (let ((o8 (- med5 1))) (and (in_range2 o8) (= right6 o8)))))))
  (= left6 left5)))))))
  (let ((o6 (+ left6 (div1 (- right6 left6) 2))))
  (and (in_range2 o6)
  (exists ((med6 Int))
  (and (= med6 o6)
  (exists ((spark__branch6 Bool) (left7 Int) (right7 Int))
  (and
  (exists ((o7 Int))
  (and (= (to_rep (select a med6)) o7)
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (< o7 i) true false))
  (ite (= spark__branch7 true)
  (and
  (and (let ((o8 (+ med6 1))) (and (in_range2 o8) (= left7 o8)))
  (= spark__branch6 spark__branch7)) (= right7 right6))
  (and
  (exists ((o8 Int))
  (and (= (to_rep (select a med6)) o8)
  (and (= spark__branch6 (ite (< i o8) true false))
  (and (= spark__branch6 true)
  (let ((o9 (- med6 1))) (and (in_range2 o9) (= right7 o9)))))))
  (= left7 left6)))))))
  (let ((o7 (+ left7 (div1 (- right7 left7) 2))))
  (and (in_range2 o7)
  (exists ((med7 Int))
  (and (= med7 o7)
  (exists ((spark__branch7 Bool) (left8 Int) (right8 Int))
  (and
  (exists ((o8 Int))
  (and (= (to_rep (select a med7)) o8)
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (< o8 i) true false))
  (ite (= spark__branch8 true)
  (and
  (and (let ((o9 (+ med7 1))) (and (in_range2 o9) (= left8 o9)))
  (= spark__branch7 spark__branch8)) (= right8 right7))
  (and
  (exists ((o9 Int))
  (and (= (to_rep (select a med7)) o9)
  (and (= spark__branch7 (ite (< i o9) true false))
  (and (= spark__branch7 true)
  (let ((o10 (- med7 1))) (and (in_range2 o10) (= right8 o10)))))))
  (= left8 left7)))))))
  (let ((o8 (+ left8 (div1 (- right8 left8) 2))))
  (and (in_range2 o8)
  (exists ((med8 Int))
  (and (= med8 o8)
  (exists ((spark__branch8 Bool) (left9 Int) (right9 Int))
  (and
  (exists ((o9 Int))
  (and (= (to_rep (select a med8)) o9)
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (< o9 i) true false))
  (ite (= spark__branch9 true)
  (and
  (and (let ((o10 (+ med8 1))) (and (in_range2 o10) (= left9 o10)))
  (= spark__branch8 spark__branch9)) (= right9 right8))
  (and
  (exists ((o10 Int))
  (and (= (to_rep (select a med8)) o10)
  (and (= spark__branch8 (ite (< i o10) true false))
  (and (= spark__branch8 true)
  (let ((o11 (- med8 1))) (and (in_range2 o11) (= right9 o11)))))))
  (= left9 left8)))))))
  (let ((o9 (+ left9 (div1 (- right9 left9) 2))))
  (and (in_range2 o9)
  (exists ((med9 Int))
  (and (= med9 o9)
  (exists ((spark__branch9 Bool) (left10 Int) (right10 Int))
  (and
  (exists ((o10 Int))
  (and (= (to_rep (select a med9)) o10)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (< o10 i) true false))
  (ite (= spark__branch10 true)
  (and
  (and (let ((o11 (+ med9 1))) (and (in_range2 o11) (= left10 o11)))
  (= spark__branch9 spark__branch10)) (= right10 right9))
  (and
  (exists ((o11 Int))
  (and (= (to_rep (select a med9)) o11)
  (and (= spark__branch9 (ite (< i o11) true false))
  (and (= spark__branch9 true)
  (let ((o12 (- med9 1))) (and (in_range2 o12) (= right10 o12)))))))
  (= left10 left9)))))))
  (let ((o10 (+ left10 (div1 (- right10 left10) 2))))
  (and (in_range2 o10)
  (exists ((med10 Int))
  (and (= med10 o10)
  (exists ((o11 Int))
  (and (= (to_rep (select a med10)) o11)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (< o11 i) true false))
  (ite (= spark__branch10 true) (in_range2 (+ med10 1))
  (exists ((o12 Int))
  (and (= (to_rep (select a med10)) o12)
  (exists ((spark__branch11 Bool))
  (and (= spark__branch11 (ite (< i o12) true false))
  (and (= spark__branch11 true) (in_range2 (- med10 1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
  (= binary_search__search__result 0))))))))))))
  (=> (<= 1 binary_search__search__result)
  (=> (<= binary_search__search__result 10)
  (= (to_rep (select a binary_search__search__result)) i))))))))))))
(check-sat)
