;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun h_true (tuple0) Bool)

(declare-fun h_true__function_guard (Bool tuple0) Bool)

;; h_true__post_axiom
  (assert true)

;; h_true__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (h_true us_void_param) true) :pattern ((h_true us_void_param)) )))

(declare-fun h_x (Bool) Bool)

(declare-fun h_x__function_guard (Bool Bool) Bool)

;; h_x__post_axiom
  (assert true)

;; h_x__def_axiom
  (assert
  (forall ((p__dummy__B17b__z Bool))
  (! (= (= (h_x p__dummy__B17b__z) true) (= p__dummy__B17b__z true)) :pattern (
  (h_x p__dummy__B17b__z)) )))

(declare-fun h_false (tuple0) Bool)

(declare-fun h_false__function_guard (Bool tuple0) Bool)

;; h_false__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (h_false us_void_param)))
     (=> (h_false__function_guard result us_void_param)
     (not (= result true)))) :pattern ((h_false us_void_param)) )))

;; h_false__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (not (= (h_false us_void_param) true)) :pattern ((h_false us_void_param)) )))

(declare-fun h_y (Bool) Bool)

(declare-fun h_y__function_guard (Bool Bool) Bool)

;; h_y__post_axiom
  (assert
  (forall ((p__dummy__B17b__z Bool))
  (! (let ((result (h_y p__dummy__B17b__z)))
     (=> (h_y__function_guard result p__dummy__B17b__z)
     (= (= result true) (= p__dummy__B17b__z true)))) :pattern ((h_y
                                                                p__dummy__B17b__z)) )))

;; h_y__def_axiom
  (assert
  (forall ((p__dummy__B17b__z Bool))
  (! (= (= (h_y p__dummy__B17b__z) true) (= p__dummy__B17b__z true)) :pattern (
  (h_y p__dummy__B17b__z)) )))

(assert
;; defqtvc
 ;; File "p.adb", line 41, characters 0-0
  (not
  (let ((o (h_true Tuple0)))
  (=> (and (h_true__function_guard o Tuple0) (= o true))
  (forall ((z Bool))
  (=> (= z o)
  (=> (= z true)
  (let ((o1 (h_x z)))
  (=> (and (h_x__function_guard o1 z) (= (= o1 true) (= z true)))
  (forall ((z1 Bool))
  (=> (= z1 o1)
  (=> (= z1 true)
  (let ((o2 (h_false Tuple0)))
  (=> (and (h_false__function_guard o2 Tuple0) (not (= o2 true)))
  (forall ((z2 Bool)) (=> (= z2 o2) (not (= z2 true))))))))))))))))))
(check-sat)
