(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-fun factorial (Int) Int)

(declare-fun factorial__function_guard (Int Int) Bool)

;; factorial__post_axiom
  (assert
  (forall ((n Int))
  (! (=> (and (dynamic_invariant n true true true true) (<= n 7))
     (let ((result (factorial n)))
     (=> (factorial__function_guard result n) (dynamic_invariant result true
     false true true)))) :pattern ((factorial n)) )))

(declare-const n1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const n2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((t5b__ref 0))
(((t5b__refqtmk (t5b__content integer)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) integer 
  (t5b__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((t6b__ref 0))
(((t6b__refqtmk (t6b__content integer)))))
(define-fun t6b__ref_t6b__content__projection ((a t6b__ref)) integer 
  (t6b__content a))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(assert
;; defqtvc
 ;; File "fib.ads", line 23, characters 0-0
  (not
  (forall ((p1 Int) (p2 Int) (p11 Int) (p12 Int))
  (=> (dynamic_invariant n1 true false true true)
  (=> (dynamic_invariant n2 true false true true)
  (=> (dynamic_invariant p1 false false true true)
  (=> (dynamic_invariant p2 false false true true)
  (=> (= n1 n2)
  (=> (<= n1 7)
  (=> (= p11 1)
  (=>
  (forall ((i Int)) (factorial__function_guard (factorial (- i 1)) (- i 1)))
  (=>
  (forall ((i Int)) (factorial__function_guard (factorial (- i 1)) (- i 1)))
  (=>
  (let ((temp___210 n1))
  (exists ((i Int))
  (and (= i 2)
  (ite (= (and (ite (<= 2 i) true false) (ite (<= i temp___210) true false)) true)
  (let ((o (- i 1)))
  (let ((o1 (factorial o)))
  (and
  (and (factorial__function_guard o1 o) (dynamic_invariant o1 true false true
  true))
  (exists ((p13 Int) (i1 Int))
  (and (= p13 (factorial (- i1 1)))
  (and
  (= (and (ite (and (dynamic_invariant p13 false true true true)
               (dynamic_property 2 n1 i1))
          true false) (ite (and (<= 2 i1) (<= i1 n1)) true false)) true)
  (let ((o2 (* i1 p13)))
  (and (in_range1 o2)
  (and (in_range2 o2) (and (= p12 o2) (= i1 temp___210)))))))))))
  (= p12 p11)))))
  (forall ((i Int))
  (=> (= i 2)
  (=> (= (and (ite (<= 2 i) true false) (ite (<= i n2) true false)) true)
  (let ((o (- i 1)))
  (let ((o1 (factorial o)))
  (=>
  (and (factorial__function_guard o1 o) (dynamic_invariant o1 true false true
  true))
  (forall ((p21 Int) (i1 Int))
  (=>
  (forall ((i2 Int)) (factorial__function_guard (factorial (- i2 1))
  (- i2 1)))
  (=> (= p21 (factorial (- i1 1)))
  (=>
  (= (and (ite (and (dynamic_property1 2 n2 i1) (dynamic_invariant p21 false
               true true true))
          true false) (ite (and (<= 2 i1) (<= i1 n2)) true false)) true)
  (in_range1 (* i1 p21)))))))))))))))))))))))))
(check-sat)
(exit)
