(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun nth2 ((_ BitVec 8) Int) Bool)

(declare-fun lsr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right3 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left3 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun to_int3 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv2 x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv2 x ((_ int2bv 8) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes ((t__ref2 0))
(((t__refqtmk2 (t__content2 (_ BitVec 8))))))
(declare-fun power2 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned8 unsigned8) Bool)

(declare-const dummy unsigned8)

(declare-datatypes ((unsigned8__ref 0))
(((unsigned8__refqtmk (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref_unsigned8__content__projection ((a unsigned8__ref)) unsigned8 
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x unsigned8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range2
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_154 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_154)
                                     (bvule temp___idx_154 a__last))
                                     (= (to_rep (select a temp___idx_154)) 
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned64 unsigned64) Bool)

(declare-const dummy1 unsigned64)

(declare-datatypes ((unsigned64__ref 0))
(((unsigned64__refqtmk (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref_unsigned64__content__projection ((a unsigned64__ref)) unsigned64 
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_172 (_ BitVec 64))
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool true)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (unsigned32 unsigned32) Bool)

(declare-const dummy2 unsigned32)

(declare-datatypes ((unsigned32__ref 0))
(((unsigned32__refqtmk (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref_unsigned32__content__projection ((a unsigned32__ref)) unsigned32 
  (unsigned32__content a))

(define-fun dynamic_invariant1 ((temp___expr_193 (_ BitVec 32))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool true)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true true)
     (let ((result (edi x86__rdi)))
     (=> (edi__function_guard result x86__rdi)
     (and (= result ((_ extract 31 0) (bvand x86__rdi #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((edi
                                                                    x86__rdi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun nth3 ((_ BitVec 16) Int) Bool)

(declare-fun lsr3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right4 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left4 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int5 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr3 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr3 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl3 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left4 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right4 v (bv2nat n)))))

(declare-fun nth_bv3 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv3 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth3 x (bv2nat i)) (nth_bv3 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv3 x ((_ int2bv 16) i)) (nth3 x i)))))

(declare-fun eq_sub_bv3 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub3 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))

(declare-datatypes ((t__ref3 0))
(((t__refqtmk3 (t__content3 (_ BitVec 16))))))
(declare-fun power3 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min3 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun readmem16 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 16))

(declare-fun readmem16__function_guard ((_ BitVec 16) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem16__function_guard (readmem16 addr1 x86__memory1) addr1
     x86__memory1))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem16__function_guard
     (readmem16 (bvadd addr1 #x0000000000000002) x86__memory1)
     (bvadd addr1 #x0000000000000002) x86__memory1))
     (=> (readmem32__function_guard result addr x86__memory)
     (and
     (and
     (= result (bvadd ((_ zero_extend 16) (readmem16 addr x86__memory)) (bvmul ((_ zero_extend 16) 
     (readmem16 (bvadd addr #x0000000000000002) x86__memory)) #x00010000)))
     (bvuge result #x00000000)) (dynamic_invariant1 result true false true
     true))))))) :pattern ((readmem32 addr x86__memory)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true true)
     (let ((result (eax x86__rax)))
     (=> (eax__function_guard result x86__rax)
     (and (= result ((_ extract 31 0) (bvand x86__rax #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((eax
                                                                    x86__rax)) )))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true true)
     (let ((result (edx x86__rdx)))
     (=> (edx__function_guard result x86__rdx)
     (and (= result ((_ extract 31 0) (bvand x86__rdx #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((edx
                                                                    x86__rdx)) )))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem32__function_guard (readmem32 addr1 x86__memory1) addr1
     x86__memory1))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem32__function_guard
     (readmem32 (bvadd addr1 #x0000000000000004) x86__memory1)
     (bvadd addr1 #x0000000000000004) x86__memory1))
     (=> (readmem64__function_guard result addr x86__memory)
     (and
     (and
     (= result (bvadd ((_ zero_extend 32) (readmem32 addr x86__memory)) (bvmul ((_ zero_extend 32) 
     (readmem32 (bvadd addr #x0000000000000004) x86__memory)) #x0000000100000000)))
     (bvuge result #x0000000000000000)) (dynamic_invariant result true false
     true true))))))) :pattern ((readmem64 addr x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned641 unsigned641) Bool)

(declare-const dummy3 unsigned641)

(declare-datatypes ((unsigned64__ref1 0))
(((unsigned64__refqtmk1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_unsigned64__content__2__projection ((a unsigned64__ref1)) unsigned641 
  (unsigned64__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_179 (_ BitVec 64))
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq4 (unsigned16 unsigned16) Bool)

(declare-const dummy4 unsigned16)

(declare-datatypes ((unsigned16__ref 0))
(((unsigned16__refqtmk (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref_unsigned16__content__projection ((a unsigned16__ref)) unsigned16 
  (unsigned16__content a))

(define-fun dynamic_invariant3 ((temp___expr_246 (_ BitVec 16))
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool) (temp___do_typ_inv_245 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_216 (_ BitVec 8))
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool) (temp___do_typ_inv_215 Bool)) Bool true)

;; readmem16__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem16 addr x86__memory)))
     (=> (readmem16__function_guard result addr x86__memory)
     (and
     (and
     (= result (bvadd ((_ zero_extend 8) (to_rep (select x86__memory addr))) (bvmul ((_ zero_extend 8) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0100)))
     (bvuge result #x0000)) (dynamic_invariant3 result true false true true))))) :pattern (
  (readmem16 addr x86__memory)) ))))

(assert
;; defqtvc
 ;; File "simple1_zstspark.ads", line 12, characters 0-0
  (not
  (forall ((rsp (_ BitVec 64)) (rbp (_ BitVec 64))
  (memory (Array (_ BitVec 64) unsigned8)) (rdi (_ BitVec 64))
  (rsi (_ BitVec 64)) (rax (_ BitVec 64)) (rdx (_ BitVec 64))
  (saversp (_ BitVec 64)))
  (=> (dynamic_invariant rax true false true true)
  (=> (dynamic_invariant rdx true false true true)
  (=> (dynamic_invariant rsp true false true true)
  (=> (dynamic_invariant rbp true false true true)
  (=> (dynamic_invariant rsi true false true true)
  (=> (dynamic_invariant rdi true false true true)
  (=> (= saversp rsp)
  (=> (dynamic_invariant2 saversp true false true true)
  (let ((o (bvsub rsp #x0000000000000008)))
  (forall ((memory1 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory1 memory)
  (forall ((memory2 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (= (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd ((_ zero_extend 56) 
  (to_rep (select memory2 o))) (bvmul ((_ zero_extend 56) (to_rep
                                                          (select memory2 (bvadd o #x0000000000000001)))) #x0000000000000100)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000002)))) #x0000000000010000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000003)))) #x0000000001000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000004)))) #x0000000100000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000005)))) #x0000010000000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000006)))) #x0001000000000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000007)))) #x0100000000000000)) rbp)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o)) (not (= i (bvadd o #x0000000000000001))))
  (not (= i (bvadd o #x0000000000000002))))
  (not (= i (bvadd o #x0000000000000003))))
  (not (= i (bvadd o #x0000000000000004))))
  (not (= i (bvadd o #x0000000000000005))))
  (not (= i (bvadd o #x0000000000000006))))
  (not (= i (bvadd o #x0000000000000007))))
  (= (to_rep (select memory2 i)) (to_rep (select memory1 i)))))))
  (forall ((rsp1 (_ BitVec 64)))
  (=> (= rsp1 (bvsub rsp #x0000000000000008))
  (=> (= rsp1 (bvsub saversp #x0000000000000008))
  (forall ((rbp1 (_ BitVec 64)))
  (=> (= rbp1 rsp1)
  (let ((o1 (edi rdi)))
  (=>
  (and (edi__function_guard o1 rdi)
  (and (dynamic_invariant1 o1 true false true true)
  (= o1 ((_ extract 31 0) (bvand rdi #x00000000FFFFFFFF)))))
  (let ((o2 (bvsub rbp1 #x0000000000000014)))
  (forall ((memory3 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory3 memory2)
  (forall ((memory4 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory4 o2))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory4 (bvadd o2 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory4 (bvadd o2 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory4 (bvadd o2 #x0000000000000003)))) #x01000000)) o1)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o2)) (not (= i (bvadd o2 #x0000000000000001))))
  (not (= i (bvadd o2 #x0000000000000002))))
  (not (= i (bvadd o2 #x0000000000000003))))
  (= (to_rep (select memory4 i)) (to_rep (select memory3 i)))))))
  (let ((o3 (bvsub rbp1 #x0000000000000020)))
  (forall ((memory5 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory5 memory4)
  (forall ((memory6 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (= (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd ((_ zero_extend 56) 
  (to_rep (select memory6 o3))) (bvmul ((_ zero_extend 56) (to_rep
                                                           (select memory6 (bvadd o3 #x0000000000000001)))) #x0000000000000100)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory6 (bvadd o3 #x0000000000000002)))) #x0000000000010000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory6 (bvadd o3 #x0000000000000003)))) #x0000000001000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory6 (bvadd o3 #x0000000000000004)))) #x0000000100000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory6 (bvadd o3 #x0000000000000005)))) #x0000010000000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory6 (bvadd o3 #x0000000000000006)))) #x0001000000000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory6 (bvadd o3 #x0000000000000007)))) #x0100000000000000)) rsi)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o3)) (not (= i (bvadd o3 #x0000000000000001))))
  (not (= i (bvadd o3 #x0000000000000002))))
  (not (= i (bvadd o3 #x0000000000000003))))
  (not (= i (bvadd o3 #x0000000000000004))))
  (not (= i (bvadd o3 #x0000000000000005))))
  (not (= i (bvadd o3 #x0000000000000006))))
  (not (= i (bvadd o3 #x0000000000000007))))
  (= (to_rep (select memory6 i)) (to_rep (select memory5 i)))))))
  (let ((o4 (bvsub rbp1 #x0000000000000014)))
  (let ((o5 (readmem32 o4 memory6)))
  (=>
  (forall ((memory7 (Array (_ BitVec 64) unsigned8)) (o6 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o6 memory7) o6 memory7))
  (=>
  (forall ((memory7 (Array (_ BitVec 64) unsigned8)) (o6 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o6 #x0000000000000002) memory7)
  (bvadd o6 #x0000000000000002) memory7))
  (=>
  (and (readmem32__function_guard o5 o4 memory6)
  (and (dynamic_invariant1 o5 true false true true)
  (and
  (= o5 (bvadd ((_ zero_extend 16) (readmem16 o4 memory6)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o4 #x0000000000000002) memory6)) #x00010000)))
  (bvuge o5 #x00000000))))
  (forall ((rax1 (_ BitVec 64)))
  (=> (= rax1 rax)
  (forall ((rax2 (_ BitVec 64)))
  (=>
  (and
  (= rax2 (bvor (bvand rax1 #xFFFFFFFF00000000) ((_ zero_extend 32) o5)))
  (dynamic_invariant rax2 true true true true))
  (let ((o6 (eax rax2)))
  (=>
  (and (eax__function_guard o6 rax2)
  (and (dynamic_invariant1 o6 true false true true)
  (= o6 ((_ extract 31 0) (bvand rax2 #x00000000FFFFFFFF)))))
  (let ((o7 (bvsub rbp1 #x0000000000000008)))
  (forall ((memory7 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory7 memory6)
  (forall ((memory8 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory8 o7))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory8 (bvadd o7 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory8 (bvadd o7 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory8 (bvadd o7 #x0000000000000003)))) #x01000000)) o6)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o7)) (not (= i (bvadd o7 #x0000000000000001))))
  (not (= i (bvadd o7 #x0000000000000002))))
  (not (= i (bvadd o7 #x0000000000000003))))
  (= (to_rep (select memory8 i)) (to_rep (select memory7 i)))))))
  (let ((o8 (bvsub rbp1 #x000000000000000C)))
  (forall ((memory9 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory9 memory8)
  (forall ((memory10 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory10 o8))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory10 (bvadd o8 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory10 (bvadd o8 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory10 (bvadd o8 #x0000000000000003)))) #x01000000)) #x00000002)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o8)) (not (= i (bvadd o8 #x0000000000000001))))
  (not (= i (bvadd o8 #x0000000000000002))))
  (not (= i (bvadd o8 #x0000000000000003))))
  (= (to_rep (select memory10 i)) (to_rep (select memory9 i)))))))
  (let ((o9 (bvsub rbp1 #x0000000000000004)))
  (forall ((memory11 (Array (_ BitVec 64) unsigned8)))
  (=> (= memory11 memory10)
  (forall ((memory12 (Array (_ BitVec 64) unsigned8)))
  (=>
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory12 o9))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory12 (bvadd o9 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory12 (bvadd o9 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory12 (bvadd o9 #x0000000000000003)))) #x01000000)) #x0000000D)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o9)) (not (= i (bvadd o9 #x0000000000000001))))
  (not (= i (bvadd o9 #x0000000000000002))))
  (not (= i (bvadd o9 #x0000000000000003))))
  (= (to_rep (select memory12 i)) (to_rep (select memory11 i)))))))
  (let ((o10 (bvsub rbp1 #x0000000000000008)))
  (let ((o11 (readmem32 o10 memory12)))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o12 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o12 memory13) o12 memory13))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o12 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o12 #x0000000000000002) memory13)
  (bvadd o12 #x0000000000000002) memory13))
  (=>
  (and (readmem32__function_guard o11 o10 memory12)
  (and (dynamic_invariant1 o11 true false true true)
  (and
  (= o11 (bvadd ((_ zero_extend 16) (readmem16 o10 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o10 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o11 #x00000000))))
  (forall ((rax3 (_ BitVec 64)))
  (=> (= rax3 rax2)
  (forall ((rax4 (_ BitVec 64)))
  (=>
  (and
  (= rax4 (bvor (bvand rax3 #xFFFFFFFF00000000) ((_ zero_extend 32) o11)))
  (dynamic_invariant rax4 true true true true))
  (let ((o12 (bvsub rbp1 #x0000000000000004)))
  (let ((o13 (readmem32 o12 memory12)))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o14 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o14 memory13) o14 memory13))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o14 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o14 #x0000000000000002) memory13)
  (bvadd o14 #x0000000000000002) memory13))
  (=>
  (and (readmem32__function_guard o13 o12 memory12)
  (and (dynamic_invariant1 o13 true false true true)
  (and
  (= o13 (bvadd ((_ zero_extend 16) (readmem16 o12 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o12 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o13 #x00000000))))
  (let ((o14 (eax rax4)))
  (=>
  (and (eax__function_guard o14 rax4)
  (and (dynamic_invariant1 o14 true false true true)
  (= o14 ((_ extract 31 0) (bvand rax4 #x00000000FFFFFFFF)))))
  (forall ((zeroflag Bool))
  (=> (= zeroflag (ite (= (bvsub o14 o13) #x00000000) true false))
  (let ((o15 (bvsub rbp1 #x0000000000000004)))
  (let ((o16 (readmem32 o15 memory12)))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o17 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o17 memory13) o17 memory13))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o17 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o17 #x0000000000000002) memory13)
  (bvadd o17 #x0000000000000002) memory13))
  (=>
  (and (readmem32__function_guard o16 o15 memory12)
  (and (dynamic_invariant1 o16 true false true true)
  (and
  (= o16 (bvadd ((_ zero_extend 16) (readmem16 o15 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o15 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o16 #x00000000))))
  (let ((o17 (eax rax4)))
  (=>
  (and (eax__function_guard o17 rax4)
  (and (dynamic_invariant1 o17 true false true true)
  (= o17 ((_ extract 31 0) (bvand rax4 #x00000000FFFFFFFF)))))
  (forall ((signflag Bool))
  (=> (= signflag (ite (bvugt (bvsub o17 o16) #x7FFFFFFF) true false))
  (let ((o18 (bvsub rbp1 #x0000000000000004)))
  (let ((o19 (readmem32 o18 memory12)))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o20 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o20 memory13) o20 memory13))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o20 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o20 #x0000000000000002) memory13)
  (bvadd o20 #x0000000000000002) memory13))
  (=>
  (and (readmem32__function_guard o19 o18 memory12)
  (and (dynamic_invariant1 o19 true false true true)
  (and
  (= o19 (bvadd ((_ zero_extend 16) (readmem16 o18 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o18 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o19 #x00000000))))
  (let ((o20 (eax rax4)))
  (=>
  (and (eax__function_guard o20 rax4)
  (and (dynamic_invariant1 o20 true false true true)
  (= o20 ((_ extract 31 0) (bvand rax4 #x00000000FFFFFFFF)))))
  (=>
  (or (= signflag true)
  (let ((o21 (eax rax4)))
  (and (eax__function_guard o21 rax4)
  (and (dynamic_invariant1 o21 true false true true)
  (= o21 ((_ extract 31 0) (bvand rax4 #x00000000FFFFFFFF)))))))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory13) o21 memory13))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory13)
  (bvadd o21 #x0000000000000002) memory13))
  (=>
  (or (not (and (not (= signflag true)) (bvugt (eax rax4) #x7FFFFFFF)))
  (let ((o21 (bvsub rbp1 #x0000000000000004)))
  (let ((o22 (readmem32 o21 memory12)))
  (and (readmem32__function_guard o22 o21 memory12)
  (and (dynamic_invariant1 o22 true false true true)
  (and
  (= o22 (bvadd ((_ zero_extend 16) (readmem16 o21 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o21 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o22 #x00000000)))))))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory13) o21 memory13))
  (=>
  (forall ((memory13 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory13)
  (bvadd o21 #x0000000000000002) memory13))
  (=>
  (or (not (= signflag true))
  (let ((o21 (bvsub rbp1 #x0000000000000004)))
  (let ((o22 (readmem32 o21 memory12)))
  (and (readmem32__function_guard o22 o21 memory12)
  (and (dynamic_invariant1 o22 true false true true)
  (and
  (= o22 (bvadd ((_ zero_extend 16) (readmem16 o21 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o21 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o22 #x00000000)))))))
  (=>
  (or
  (not
  (and (= signflag true)
  (bvugt (readmem32 (bvsub rbp1 #x0000000000000004) memory12) #x7FFFFFFF)))
  (let ((o21 (eax rax4)))
  (and (eax__function_guard o21 rax4)
  (and (dynamic_invariant1 o21 true false true true)
  (= o21 ((_ extract 31 0) (bvand rax4 #x00000000FFFFFFFF)))))))
  (forall ((overflowflag Bool))
  (=>
  (= overflowflag (or (ite (and (= signflag true)
                           (bvugt (readmem32 (bvsub rbp1 #x0000000000000004)
                                  memory12) #x7FFFFFFF))
                      (ite (bvule (eax rax4) #x7FFFFFFF) true false) false) 
  (ite (and (not (= signflag true)) (bvugt (eax rax4) #x7FFFFFFF))
  (ite (bvule (readmem32 (bvsub rbp1 #x0000000000000004) memory12) #x7FFFFFFF)
  true false) false)))
  (forall ((spark__branch Bool) (memory13 (Array (_ BitVec 64) unsigned8))
  (rax5 (_ BitVec 64)))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory14) o21 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory14)
  (bvadd o21 #x0000000000000002) memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory14) o21 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory14)
  (bvadd o21 #x0000000000000002) memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory14) o21 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory14)
  (bvadd o21 #x0000000000000002) memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory14) o21 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory14)
  (bvadd o21 #x0000000000000002) memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o21 memory14) o21 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o21 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o21 #x0000000000000002) memory14)
  (bvadd o21 #x0000000000000002) memory14))
  (=>
  (and
  (= spark__branch (ite (= (ite zeroflag 1 0) (ite overflowflag 1 0)) false
                   true))
  (ite (= spark__branch true)
  (let ((o21 (bvsub rbp1 #x0000000000000004)))
  (let ((o22 (readmem32 o21 memory12)))
  (and
  (and (readmem32__function_guard o22 o21 memory12)
  (and (dynamic_invariant1 o22 true false true true)
  (and
  (= o22 (bvadd ((_ zero_extend 16) (readmem16 o21 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o21 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o22 #x00000000))))
  (exists ((rax6 (_ BitVec 64)))
  (and (= rax6 rax4)
  (exists ((rax7 (_ BitVec 64)))
  (and
  (and
  (= rax7 (bvor (bvand rax6 #xFFFFFFFF00000000) ((_ zero_extend 32) o22)))
  (dynamic_invariant rax7 true true true true))
  (let ((o23 (bvsub rbp1 #x0000000000000008)))
  (let ((o24 (readmem32 o23 memory12)))
  (and
  (and (readmem32__function_guard o24 o23 memory12)
  (and (dynamic_invariant1 o24 true false true true)
  (and
  (= o24 (bvadd ((_ zero_extend 16) (readmem16 o23 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o23 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o24 #x00000000))))
  (let ((o25 (eax rax7)))
  (and
  (and (eax__function_guard o25 rax7)
  (and (dynamic_invariant1 o25 true false true true)
  (= o25 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))
  (exists ((rax8 (_ BitVec 64)))
  (and (= rax8 rax7)
  (and
  (and
  (= rax5 (bvor (bvand rax8 #xFFFFFFFF00000000) ((_ zero_extend 32) (bvsub o25 o24))))
  (dynamic_invariant rax5 true true true true))
  (let ((o26 (eax rax5)))
  (and
  (and (eax__function_guard o26 rax5)
  (and (dynamic_invariant1 o26 true false true true)
  (= o26 ((_ extract 31 0) (bvand rax5 #x00000000FFFFFFFF)))))
  (let ((o27 (bvsub rbp1 #x000000000000000C)))
  (exists ((memory14 (Array (_ BitVec 64) unsigned8)))
  (and (= memory14 memory12)
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory13 o27))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory13 (bvadd o27 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory13 (bvadd o27 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory13 (bvadd o27 #x0000000000000003)))) #x01000000)) o26)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o27)) (not (= i (bvadd o27 #x0000000000000001))))
  (not (= i (bvadd o27 #x0000000000000002))))
  (not (= i (bvadd o27 #x0000000000000003))))
  (= (to_rep (select memory13 i)) (to_rep (select memory14 i)))))))))))))))))))))))))))
  (let ((o21 (bvsub rbp1 #x0000000000000008)))
  (let ((o22 (readmem32 o21 memory12)))
  (and
  (and (readmem32__function_guard o22 o21 memory12)
  (and (dynamic_invariant1 o22 true false true true)
  (and
  (= o22 (bvadd ((_ zero_extend 16) (readmem16 o21 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o21 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o22 #x00000000))))
  (exists ((rax6 (_ BitVec 64)))
  (and (= rax6 rax4)
  (exists ((rax7 (_ BitVec 64)))
  (and
  (and
  (= rax7 (bvor (bvand rax6 #xFFFFFFFF00000000) ((_ zero_extend 32) o22)))
  (dynamic_invariant rax7 true true true true))
  (let ((o23 (bvsub rbp1 #x000000000000000C)))
  (let ((o24 (readmem32 o23 memory12)))
  (and
  (and (readmem32__function_guard o24 o23 memory12)
  (and (dynamic_invariant1 o24 true false true true)
  (and
  (= o24 (bvadd ((_ zero_extend 16) (readmem16 o23 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o23 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o24 #x00000000))))
  (let ((o25 (eax rax7)))
  (and
  (and (eax__function_guard o25 rax7)
  (and (dynamic_invariant1 o25 true false true true)
  (= o25 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))
  (exists ((rax8 (_ BitVec 64)))
  (and (= rax8 rax7)
  (exists ((rax9 (_ BitVec 64)))
  (and
  (and
  (= rax9 (bvor (bvand rax8 #xFFFFFFFF00000000) ((_ zero_extend 32) (bvsub o25 o24))))
  (dynamic_invariant rax9 true true true true))
  (let ((o26 (eax rax9)))
  (and
  (and (eax__function_guard o26 rax9)
  (and (dynamic_invariant1 o26 true false true true)
  (= o26 ((_ extract 31 0) (bvand rax9 #x00000000FFFFFFFF)))))
  (exists ((rdx1 (_ BitVec 64)))
  (and (= rdx1 rdx)
  (exists ((rdx2 (_ BitVec 64)))
  (and
  (and
  (= rdx2 (bvor (bvand rdx1 #xFFFFFFFF00000000) ((_ zero_extend 32) o26)))
  (dynamic_invariant rdx2 true true true true))
  (let ((o27 (bvsub rbp1 #x0000000000000004)))
  (let ((o28 (readmem32 o27 memory12)))
  (and
  (and (readmem32__function_guard o28 o27 memory12)
  (and (dynamic_invariant1 o28 true false true true)
  (and
  (= o28 (bvadd ((_ zero_extend 16) (readmem16 o27 memory12)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o27 #x0000000000000002) memory12)) #x00010000)))
  (bvuge o28 #x00000000))))
  (exists ((rax10 (_ BitVec 64)))
  (and (= rax10 rax9)
  (exists ((rax11 (_ BitVec 64)))
  (and
  (and
  (= rax11 (bvor (bvand rax10 #xFFFFFFFF00000000) ((_ zero_extend 32) o28)))
  (dynamic_invariant rax11 true true true true))
  (let ((o29 (edx rdx2)))
  (and
  (and (edx__function_guard o29 rdx2)
  (and (dynamic_invariant1 o29 true false true true)
  (= o29 ((_ extract 31 0) (bvand rdx2 #x00000000FFFFFFFF)))))
  (let ((o30 (eax rax11)))
  (and
  (and (eax__function_guard o30 rax11)
  (and (dynamic_invariant1 o30 true false true true)
  (= o30 ((_ extract 31 0) (bvand rax11 #x00000000FFFFFFFF)))))
  (exists ((rax12 (_ BitVec 64)))
  (and (= rax12 rax11)
  (and
  (and
  (= rax5 (bvor (bvand rax12 #xFFFFFFFF00000000) ((_ zero_extend 32) (bvadd o30 o29))))
  (dynamic_invariant rax5 true true true true))
  (let ((o31 (eax rax5)))
  (and
  (and (eax__function_guard o31 rax5)
  (and (dynamic_invariant1 o31 true false true true)
  (= o31 ((_ extract 31 0) (bvand rax5 #x00000000FFFFFFFF)))))
  (let ((o32 (bvsub rbp1 #x000000000000000C)))
  (exists ((memory14 (Array (_ BitVec 64) unsigned8)))
  (and (= memory14 memory12)
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory13 o32))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory13 (bvadd o32 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory13 (bvadd o32 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory13 (bvadd o32 #x0000000000000003)))) #x01000000)) o31)
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o32)) (not (= i (bvadd o32 #x0000000000000001))))
  (not (= i (bvadd o32 #x0000000000000002))))
  (not (= i (bvadd o32 #x0000000000000003))))
  (= (to_rep (select memory13 i)) (to_rep (select memory14 i))))))))))))))))))))))))))))))))))))))))))))))))))
  (let ((o21 (bvsub rbp1 #x0000000000000008)))
  (let ((o22 (readmem32 o21 memory13)))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o23 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o23 memory14) o23 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o23 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o23 #x0000000000000002) memory14)
  (bvadd o23 #x0000000000000002) memory14))
  (=>
  (and (readmem32__function_guard o22 o21 memory13)
  (and (dynamic_invariant1 o22 true false true true)
  (and
  (= o22 (bvadd ((_ zero_extend 16) (readmem16 o21 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o21 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o22 #x00000000))))
  (forall ((rax6 (_ BitVec 64)))
  (=> (= rax6 rax5)
  (forall ((rax7 (_ BitVec 64)))
  (=>
  (and
  (= rax7 (bvor (bvand rax6 #xFFFFFFFF00000000) ((_ zero_extend 32) o22)))
  (dynamic_invariant rax7 true true true true))
  (let ((o23 (bvsub rbp1 #x0000000000000004)))
  (let ((o24 (readmem32 o23 memory13)))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o25 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o25 memory14) o25 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o25 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o25 #x0000000000000002) memory14)
  (bvadd o25 #x0000000000000002) memory14))
  (=>
  (and (readmem32__function_guard o24 o23 memory13)
  (and (dynamic_invariant1 o24 true false true true)
  (and
  (= o24 (bvadd ((_ zero_extend 16) (readmem16 o23 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o23 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o24 #x00000000))))
  (let ((o25 (eax rax7)))
  (=>
  (and (eax__function_guard o25 rax7)
  (and (dynamic_invariant1 o25 true false true true)
  (= o25 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))
  (forall ((zeroflag1 Bool))
  (=> (= zeroflag1 (ite (= (bvsub o25 o24) #x00000000) true false))
  (let ((o26 (bvsub rbp1 #x0000000000000004)))
  (let ((o27 (readmem32 o26 memory13)))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o28 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o28 memory14) o28 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o28 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o28 #x0000000000000002) memory14)
  (bvadd o28 #x0000000000000002) memory14))
  (=>
  (and (readmem32__function_guard o27 o26 memory13)
  (and (dynamic_invariant1 o27 true false true true)
  (and
  (= o27 (bvadd ((_ zero_extend 16) (readmem16 o26 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o26 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o27 #x00000000))))
  (let ((o28 (eax rax7)))
  (=>
  (and (eax__function_guard o28 rax7)
  (and (dynamic_invariant1 o28 true false true true)
  (= o28 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))
  (forall ((signflag1 Bool))
  (=> (= signflag1 (ite (bvugt (bvsub o28 o27) #x7FFFFFFF) true false))
  (let ((o29 (bvsub rbp1 #x0000000000000004)))
  (let ((o30 (readmem32 o29 memory13)))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o31 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o31 memory14) o31 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o31 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o31 #x0000000000000002) memory14)
  (bvadd o31 #x0000000000000002) memory14))
  (=>
  (and (readmem32__function_guard o30 o29 memory13)
  (and (dynamic_invariant1 o30 true false true true)
  (and
  (= o30 (bvadd ((_ zero_extend 16) (readmem16 o29 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o29 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o30 #x00000000))))
  (let ((o31 (eax rax7)))
  (=>
  (and (eax__function_guard o31 rax7)
  (and (dynamic_invariant1 o31 true false true true)
  (= o31 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))
  (=>
  (or (= signflag1 true)
  (let ((o32 (eax rax7)))
  (and (eax__function_guard o32 rax7)
  (and (dynamic_invariant1 o32 true false true true)
  (= o32 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o32 memory14) o32 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o32 #x0000000000000002) memory14)
  (bvadd o32 #x0000000000000002) memory14))
  (=>
  (or (not (and (not (= signflag1 true)) (bvugt (eax rax7) #x7FFFFFFF)))
  (let ((o32 (bvsub rbp1 #x0000000000000004)))
  (let ((o33 (readmem32 o32 memory13)))
  (and (readmem32__function_guard o33 o32 memory13)
  (and (dynamic_invariant1 o33 true false true true)
  (and
  (= o33 (bvadd ((_ zero_extend 16) (readmem16 o32 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o32 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o33 #x00000000)))))))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o32 memory14) o32 memory14))
  (=>
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o32 #x0000000000000002) memory14)
  (bvadd o32 #x0000000000000002) memory14))
  (=>
  (or (not (= signflag1 true))
  (let ((o32 (bvsub rbp1 #x0000000000000004)))
  (let ((o33 (readmem32 o32 memory13)))
  (and (readmem32__function_guard o33 o32 memory13)
  (and (dynamic_invariant1 o33 true false true true)
  (and
  (= o33 (bvadd ((_ zero_extend 16) (readmem16 o32 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o32 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o33 #x00000000)))))))
  (=>
  (or
  (not
  (and (= signflag1 true)
  (bvugt (readmem32 (bvsub rbp1 #x0000000000000004) memory13) #x7FFFFFFF)))
  (let ((o32 (eax rax7)))
  (and (eax__function_guard o32 rax7)
  (and (dynamic_invariant1 o32 true false true true)
  (= o32 ((_ extract 31 0) (bvand rax7 #x00000000FFFFFFFF)))))))
  (forall ((overflowflag1 Bool))
  (=>
  (= overflowflag1 (or (ite (and (= signflag1 true)
                            (bvugt (readmem32 (bvsub rbp1 #x0000000000000004)
                                   memory13) #x7FFFFFFF))
                       (ite (bvule (eax rax7) #x7FFFFFFF) true false) false) 
  (ite (and (not (= signflag1 true)) (bvugt (eax rax7) #x7FFFFFFF))
  (ite (bvule (readmem32 (bvsub rbp1 #x0000000000000004) memory13) #x7FFFFFFF)
  true false) false)))
  (forall ((memory14 (Array (_ BitVec 64) unsigned8)) (rax8 (_ BitVec 64)))
  (=>
  (forall ((memory15 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o32 memory15) o32 memory15))
  (=>
  (forall ((memory15 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o32 #x0000000000000002) memory15)
  (bvadd o32 #x0000000000000002) memory15))
  (=>
  (forall ((memory15 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard (readmem16 o32 memory15) o32 memory15))
  (=>
  (forall ((memory15 (Array (_ BitVec 64) unsigned8)) (o32 (_ BitVec 64)))
  (readmem16__function_guard
  (readmem16 (bvadd o32 #x0000000000000002) memory15)
  (bvadd o32 #x0000000000000002) memory15))
  (=>
  (exists ((spark__branch1 Bool))
  (and
  (= spark__branch1 (ite (= (ite zeroflag1 1 0) (ite overflowflag1 1 0))
                    false true))
  (ite (= spark__branch1 true)
  (let ((o32 (bvsub rbp1 #x000000000000000C)))
  (let ((o33 (readmem32 o32 memory13)))
  (and
  (and (readmem32__function_guard o33 o32 memory13)
  (and (dynamic_invariant1 o33 true false true true)
  (and
  (= o33 (bvadd ((_ zero_extend 16) (readmem16 o32 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o32 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o33 #x00000000))))
  (exists ((rax9 (_ BitVec 64)))
  (and (= rax9 rax7)
  (and
  (and
  (= rax8 (bvor (bvand rax9 #xFFFFFFFF00000000) ((_ zero_extend 32) o33)))
  (dynamic_invariant rax8 true true true true))
  (let ((o34 (eax rax8)))
  (and
  (and (eax__function_guard o34 rax8)
  (and (dynamic_invariant1 o34 true false true true)
  (= o34 ((_ extract 31 0) (bvand rax8 #x00000000FFFFFFFF)))))
  (let ((o35 (bvsub rbp1 #x0000000000000008)))
  (let ((o36 (readmem32 o35 memory13)))
  (and
  (and (readmem32__function_guard o36 o35 memory13)
  (and (dynamic_invariant1 o36 true false true true)
  (and
  (= o36 (bvadd ((_ zero_extend 16) (readmem16 o35 memory13)) (bvmul ((_ zero_extend 16) 
  (readmem16 (bvadd o35 #x0000000000000002) memory13)) #x00010000)))
  (bvuge o36 #x00000000))))
  (let ((o37 (bvsub rbp1 #x0000000000000008)))
  (exists ((memory15 (Array (_ BitVec 64) unsigned8)))
  (and (= memory15 memory13)
  (and
  (= (bvadd (bvadd (bvadd ((_ zero_extend 24) (to_rep (select memory14 o37))) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory14 (bvadd o37 #x0000000000000001)))) #x00000100)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory14 (bvadd o37 #x0000000000000002)))) #x00010000)) (bvmul ((_ zero_extend 24) 
  (to_rep (select memory14 (bvadd o37 #x0000000000000003)))) #x01000000)) (bvadd o36 o34))
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and (and (not (= i o37)) (not (= i (bvadd o37 #x0000000000000001))))
  (not (= i (bvadd o37 #x0000000000000002))))
  (not (= i (bvadd o37 #x0000000000000003))))
  (= (to_rep (select memory14 i)) (to_rep (select memory15 i)))))))))))))))))))))
  (and (= memory14 memory13) (= rax8 rax7)))))
  (forall ((rax9 (_ BitVec 64)))
  (=> (= rax9 rax8)
  (forall ((rax10 (_ BitVec 64)))
  (=>
  (and
  (= rax10 (bvor (bvand rax9 #xFFFFFFFF00000000) ((_ zero_extend 32) #x00000000)))
  (dynamic_invariant rax10 true true true true))
  (=> (= rsp1 (bvsub saversp #x0000000000000008))
  (let ((o32 (bvadd rsp1 #x0000000000000000)))
  (let ((o33 (readmem64 o32 memory14)))
  (=>
  (forall ((memory15 (Array (_ BitVec 64) unsigned8)) (o34 (_ BitVec 64)))
  (readmem32__function_guard (readmem32 o34 memory15) o34 memory15))
  (=>
  (forall ((memory15 (Array (_ BitVec 64) unsigned8)) (o34 (_ BitVec 64)))
  (readmem32__function_guard
  (readmem32 (bvadd o34 #x0000000000000004) memory15)
  (bvadd o34 #x0000000000000004) memory15))
  (=>
  (and (readmem64__function_guard o33 o32 memory14)
  (and (dynamic_invariant o33 true false true true)
  (and
  (= o33 (bvadd ((_ zero_extend 32) (readmem32 o32 memory14)) (bvmul ((_ zero_extend 32) 
  (readmem32 (bvadd o32 #x0000000000000004) memory14)) #x0000000100000000)))
  (bvuge o33 #x0000000000000000))))
  (forall ((rsp2 (_ BitVec 64)))
  (=> (= rsp2 (bvadd rsp1 #x0000000000000008))
  (=> (= rsp2 (bvadd (bvsub saversp #x0000000000000008) #x0000000000000008))
  (= rsp2 (bvadd saversp #x0000000000000000))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
