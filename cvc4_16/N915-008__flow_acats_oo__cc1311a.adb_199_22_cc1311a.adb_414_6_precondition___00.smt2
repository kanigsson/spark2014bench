;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort month_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 11)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (month_type month_type) Bool)

(declare-const dummy4 month_type)

(declare-datatypes ((month_type__ref 0))
(((month_type__refqtmk (month_type__content month_type)))))
(define-fun month_type__ref_month_type__content__projection ((a month_type__ref)) month_type 
  (month_type__content a))

(declare-fun to_rep2 (month_type) Int)

(declare-fun of_rep2 (Int) month_type)

;; inversion_axiom
  (assert
  (forall ((x month_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x month_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort day_type 0)

(declare-fun day_typeqtint (day_type) Int)

;; day_type'axiom
  (assert
  (forall ((i day_type))
  (and (<= 1 (day_typeqtint i)) (<= (day_typeqtint i) 31))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (day_type day_type) Bool)

(declare-const dummy5 day_type)

(declare-datatypes ((day_type__ref 0))
(((day_type__refqtmk (day_type__content day_type)))))
(define-fun day_type__ref_day_type__content__projection ((a day_type__ref)) day_type 
  (day_type__content a))

(define-fun to_rep3 ((x day_type)) Int (day_typeqtint x))

(declare-fun of_rep3 (Int) day_type)

;; inversion_axiom
  (assert
  (forall ((x day_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x day_type)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort year_type 0)

(declare-fun year_typeqtint (year_type) Int)

;; year_type'axiom
  (assert
  (forall ((i year_type))
  (and (<= 1904 (year_typeqtint i)) (<= (year_typeqtint i) 2050))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1904 x) (<= x 2050)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (year_type year_type) Bool)

(declare-const dummy6 year_type)

(declare-datatypes ((year_type__ref 0))
(((year_type__refqtmk (year_type__content year_type)))))
(define-fun year_type__ref_year_type__content__projection ((a year_type__ref)) year_type 
  (year_type__content a))

(define-fun to_rep4 ((x year_type)) Int (year_typeqtint x))

(declare-fun of_rep4 (Int) year_type)

;; inversion_axiom
  (assert
  (forall ((x year_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x year_type)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__cc1311a__date__month month_type)(rec__cc1311a__date__day day_type)(rec__cc1311a__date__year year_type)))))
(define-fun us_split_fields_rec__cc1311a__date__month__projection ((a us_split_fields)) month_type 
  (rec__cc1311a__date__month a))

(define-fun us_split_fields_rec__cc1311a__date__day__projection ((a us_split_fields)) day_type 
  (rec__cc1311a__date__day a))

(define-fun us_split_fields_rec__cc1311a__date__year__projection ((a us_split_fields)) year_type 
  (rec__cc1311a__date__year a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__cc1311a__date__month (us_split_fields1 a))) 
                        (to_rep2
                        (rec__cc1311a__date__month (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__cc1311a__date__day (us_split_fields1 a))) 
                        (to_rep3
                        (rec__cc1311a__date__day (us_split_fields1 b)))))
                        (= (to_rep4
                           (rec__cc1311a__date__year (us_split_fields1 a))) 
                        (to_rep4
                        (rec__cc1311a__date__year (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const cc1311a__date__month__first__bit Int)

(declare-const cc1311a__date__month__last__bit Int)

(declare-const cc1311a__date__month__position Int)

;; cc1311a__date__month__first__bit_axiom
  (assert (<= 0 cc1311a__date__month__first__bit))

;; cc1311a__date__month__last__bit_axiom
  (assert
  (< cc1311a__date__month__first__bit cc1311a__date__month__last__bit))

;; cc1311a__date__month__position_axiom
  (assert (<= 0 cc1311a__date__month__position))

(declare-const cc1311a__date__day__first__bit Int)

(declare-const cc1311a__date__day__last__bit Int)

(declare-const cc1311a__date__day__position Int)

;; cc1311a__date__day__first__bit_axiom
  (assert (<= 0 cc1311a__date__day__first__bit))

;; cc1311a__date__day__last__bit_axiom
  (assert (< cc1311a__date__day__first__bit cc1311a__date__day__last__bit))

;; cc1311a__date__day__position_axiom
  (assert (<= 0 cc1311a__date__day__position))

(declare-const cc1311a__date__year__first__bit Int)

(declare-const cc1311a__date__year__last__bit Int)

(declare-const cc1311a__date__year__position Int)

;; cc1311a__date__year__first__bit_axiom
  (assert (<= 0 cc1311a__date__year__first__bit))

;; cc1311a__date__year__last__bit_axiom
  (assert (< cc1311a__date__year__first__bit cc1311a__date__year__last__bit))

;; cc1311a__date__year__position_axiom
  (assert (<= 0 cc1311a__date__year__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((date__ref 0))
(((date__refqtmk (date__content us_rep)))))
(define-fun date__ref_date__content__projection ((a date__ref)) us_rep 
  (date__content a))

(declare-const today us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((component_type__ref 0))
(((component_type__refqtmk (component_type__content us_rep)))))
(define-fun component_type__ref_component_type__content__4__projection ((a component_type__ref)) us_rep 
  (component_type__content a))

(declare-const default_value us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort map1 0)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 map1)))))
(declare-fun get (map1 Int Int Int) us_rep)

(declare-fun set (map1 Int Int Int us_rep) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((k Int))
  (forall ((a us_rep))
  (! (= (get (set m i j k a) i j k) a) :pattern ((set m i j k a)) )))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((k Int) (k2 Int))
  (forall ((a us_rep))
  (! (=> (not (and (= i i2) (and (= j j2) (= k k2))))
     (= (get (set m i j k a) i2 j2 k2) (get m i2 j2 k2))) :pattern ((get
                                                                    (set m i
                                                                    j k a) i2
                                                                    j2 k2)) :pattern (
  (set m i j k a) (get m i2 j2 k2)) )))))))

(declare-fun slide1 (map1 Int Int Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((old_first Int) (new_first Int))
  (forall ((old_first_2 Int) (new_first_2 Int))
  (forall ((old_first_3 Int) (new_first_3 Int))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((k Int))
  (! (= (get
        (slide1 a old_first new_first old_first_2 new_first_2 old_first_3
        new_first_3) i j k) (get a (- i (- new_first old_first))
                            (- j (- new_first_2 old_first_2))
                            (- k (- new_first_3 old_first_3)))) :pattern (
  (get
  (slide1 a old_first new_first old_first_2 new_first_2 old_first_3
  new_first_3) i j k)) )))))))))

(define-fun bool_eq3 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (b map1) (b__first Int)
  (b__last Int) (b__first_2 Int) (b__last_2 Int) (b__first_3 Int)
  (b__last_3 Int)) Bool (ite (and
                             (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (ite (<= a__first_3 a__last_3)
                             (and (<= b__first_3 b__last_3)
                             (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
                             (< b__last_3 b__first_3)))
                             (forall ((temp___idx_154 Int)
                             (temp___idx_155 Int) (temp___idx_156 Int))
                             (=>
                             (and
                             (and
                             (and (<= a__first temp___idx_154)
                             (<= temp___idx_154 a__last))
                             (and (<= a__first_2 temp___idx_155)
                             (<= temp___idx_155 a__last_2)))
                             (and (<= a__first_3 temp___idx_156)
                             (<= temp___idx_156 a__last_3)))
                             (= (bool_eq2
                                (get a temp___idx_154 temp___idx_155
                                temp___idx_156)
                                (get b
                                (+ (- b__first a__first) temp___idx_154)
                                (+ (- b__first_2 a__first_2) temp___idx_155)
                                (+ (- b__first_3 a__first_3) temp___idx_156))) true))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (a__first_3 Int) (a__last_3 Int) (b__first Int) (b__last Int)
  (b__first_2 Int) (b__last_2 Int) (b__first_3 Int) (b__last_3 Int))
  (=>
  (= (bool_eq3 b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3 a
     a__first a__last a__first_2 a__last_2 a__first_3 a__last_3) true)
  (and
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (ite (<= a__first_3 a__last_3)
  (and (<= b__first_3 b__last_3)
  (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
  (< b__last_3 b__first_3)))
  (forall ((temp___idx_154 Int) (temp___idx_155 Int) (temp___idx_156 Int))
  (=>
  (and
  (and (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (and (<= a__first_2 temp___idx_155) (<= temp___idx_155 a__last_2)))
  (and (<= a__first_3 temp___idx_156) (<= temp___idx_156 a__last_3)))
  (= (bool_eq2 (get a temp___idx_154 temp___idx_155 temp___idx_156)
     (get b (+ (- b__first a__first) temp___idx_154)
     (+ (- b__first_2 a__first_2) temp___idx_155)
     (+ (- b__first_3 a__first_3) temp___idx_156))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c414b map1)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort really_short 0)

(declare-fun really_shortqtint (really_short) Int)

;; really_short'axiom
  (assert
  (forall ((i really_short))
  (and (<= (- 9) (really_shortqtint i)) (<= (really_shortqtint i) 0))))

(define-fun in_range7 ((x Int)) Bool (and (<= (- 9) x) (<= x 0)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (really_short really_short) Bool)

(declare-const dummy8 really_short)

(declare-datatypes ((really_short__ref 0))
(((really_short__refqtmk (really_short__content really_short)))))
(define-fun really_short__ref_really_short__content__projection ((a really_short__ref)) really_short 
  (really_short__content a))

(declare-sort first_half 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (first_half first_half) Bool)

(declare-const dummy9 first_half)

(declare-datatypes ((first_half__ref 0))
(((first_half__refqtmk (first_half__content first_half)))))
(define-fun first_half__ref_first_half__content__projection ((a first_half__ref)) first_half 
  (first_half__content a))

(declare-sort first_five 0)

(define-fun in_range9 ((x Int)) Bool (and (<= 65 x) (<= x 69)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (first_five first_five) Bool)

(declare-const dummy10 first_five)

(declare-datatypes ((first_five__ref 0))
(((first_five__refqtmk (first_five__content first_five)))))
(define-fun first_five__ref_first_five__content__projection ((a first_five__ref)) first_five 
  (first_five__content a))

(declare-fun temp_____aggregate_def_176 (us_rep) map1)

(declare-fun temp___String_Literal_680 (tuple0) (Array Int character))

;; temp___String_Literal_680__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 2)) 82))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 3)) 79)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 4)) 66))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 5)) 76)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 6)) 69)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 7)) 77)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 8)) 83))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 9)) 32)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 10)) 87))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 11)) 73)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 12)) 84))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 13)) 72)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 14)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 15)) 84)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 16)) 72))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 17)) 82)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 18)) 69)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 19)) 69)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 20)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 21)) 68)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 22)) 73)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 23)) 77)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 24)) 69))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 25)) 78)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 26)) 83))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 27)) 73)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 28)) 79))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 29)) 78)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 30)) 65)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 31)) 76)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 33)) 65)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 34)) 82)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 35)) 82))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 36)) 65)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 37)) 89)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 38)) 44)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 39)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 40)) 80)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 41)) 82))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 42)) 79)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 43)) 67))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 44)) 69)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 45)) 68)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 46)) 85)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 47)) 82))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 48)) 69)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 49)) 44)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 50)) 32)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 51)) 65))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 52)) 78)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 53)) 68)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 54)) 32)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 55)) 80))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 56)) 82)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 57)) 79))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 58)) 67)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 59)) 69))
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 60)) 68)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 61)) 85)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 62)) 82)
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 63)) 69))
     (= (to_rep (select (temp___String_Literal_680 us_void_param) 64)) 46))))))) :pattern (
  (temp___String_Literal_680 us_void_param)) )))

(declare-fun temp_____aggregate_def_681 (us_rep) map1)

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant2 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant4 ((temp___expr_239 Int)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)
  (temp___do_typ_inv_238 Bool)) Bool (=>
                                     (or (= temp___is_init_235 true)
                                     (<= (- 9) 0)) (in_range7
                                     temp___expr_239)))

(define-fun dynamic_invariant5 ((temp___expr_246 Int)
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool)
  (temp___do_typ_inv_245 Bool)) Bool (=>
                                     (or (= temp___is_init_242 true)
                                     (<= 0 11)) (in_range4 temp___expr_246)))

(define-fun dynamic_invariant6 ((temp___expr_253 Int)
  (temp___is_init_249 Bool) (temp___skip_constant_250 Bool)
  (temp___do_toplevel_251 Bool)
  (temp___do_typ_inv_252 Bool)) Bool (=>
                                     (or (= temp___is_init_249 true)
                                     (<= 0 5)) (in_range8 temp___expr_253)))

(define-fun dynamic_invariant7 ((temp___expr_260 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)
  (temp___do_typ_inv_259 Bool)) Bool (=>
                                     (or (= temp___is_init_256 true)
                                     (<= 1 31)) (in_range5 temp___expr_260)))

(define-fun dynamic_invariant8 ((temp___expr_267 Int)
  (temp___is_init_263 Bool) (temp___skip_constant_264 Bool)
  (temp___do_toplevel_265 Bool)
  (temp___do_typ_inv_266 Bool)) Bool (=>
                                     (or (= temp___is_init_263 true)
                                     (<= 1904 2050)) (in_range6
                                     temp___expr_267)))

(declare-const rliteral day_type)

;; rliteral_axiom
  (assert (= (day_typeqtint rliteral) 8))

(declare-const rliteral1 year_type)

;; rliteral_axiom
  (assert (= (year_typeqtint rliteral1) 1990))

;; today__def_axiom
  (assert
  (= today (us_repqtmk (us_split_fieldsqtmk (of_rep2 7) rliteral rliteral1))))

(define-fun dynamic_invariant9 ((temp___expr_284 Int)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)
  (temp___do_typ_inv_283 Bool)) Bool (=>
                                     (or (= temp___is_init_280 true)
                                     (<= 65 69)) (in_range9 temp___expr_284)))

;; default_value__def_axiom
  (assert (= default_value today))

;; def_axiom
  (assert
  (forall ((temp___683 us_rep))
  (forall ((temp___684 Int) (temp___685 Int) (temp___686 Int))
  (= (get (temp_____aggregate_def_681 temp___683) temp___684 temp___685
     temp___686) temp___683))))

;; c414b__def_axiom
  (assert (= c414b (temp_____aggregate_def_176 default_value)))

;; def_axiom
  (assert
  (forall ((temp___178 us_rep))
  (forall ((temp___179 Int) (temp___180 Int) (temp___181 Int))
  (= (get (temp_____aggregate_def_176 temp___178) temp___179 temp___180
     temp___181) temp___178))))

(assert
;; defqtvc
 ;; File "cc1311a.adb", line 414, characters 0-0
  (not
  (forall ((results map1) (spark__branch Bool))
  (=> (= today default_value)
  (=> (= (temp_____aggregate_def_176 default_value) c414b)
  (=> (= results c414b)
  (=>
  (= spark__branch (ite (= (bool_eq3 results (- 9) 0 0 5 65 69
                           (temp_____aggregate_def_681 default_value) (- 9) 0
                           0 5 65 69) true)
                   false true))
  (not (= spark__branch true)))))))))
(check-sat)
