(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__p__tt us_main_type)))))
(define-fun us_split_fields_rec__p__tt__projection ((a us_split_fields)) us_main_type 
  (rec__p__tt a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-datatypes ((tt__ref 0))
(((tt__refqtmk (tt__content us_rep)))))
(define-fun tt__ref_tt__content__projection ((a tt__ref)) us_rep (tt__content
                                                                 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__p__tt1 us_main_type)))))
(define-fun us_split_fields_rec__p__tt__2__projection ((a us_split_fields2)) us_main_type 
  (rec__p__tt1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (rec__p__tt1 (us_split_fields3 a)))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (rec__p__tt (us_split_fields1 r)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-datatypes ((s__ref 0))
(((s__refqtmk (s__content us_rep1)))))
(define-fun s__ref_s__content__projection ((a s__ref)) us_rep1 (s__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun not_reall_true (tuple0) Bool)

(declare-fun not_reall_true__function_guard (Bool tuple0) Bool)

;; temp___result_190'def
  (assert (not_reall_true__function_guard (not_reall_true Tuple0) Tuple0))

(define-fun dynamic_invariant ((temp___expr_188 us_rep1)
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)
  (temp___do_typ_inv_187 Bool)) Bool (=> (= temp___do_toplevel_186 true)
                                     (= (not_reall_true Tuple0) true)))

;; temp___result_195'def
  (assert (not_reall_true__function_guard (not_reall_true Tuple0) Tuple0))

(define-fun dynamic_predicate ((temp___193 us_rep1)) Bool (= (not_reall_true
                                                             Tuple0) true))

;; not_reall_true__post_axiom
  (assert true)

;; not_reall_true__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (not (= (not_reall_true us_void_param) true)) :pattern ((not_reall_true
                                                             us_void_param)) )))

(assert
;; defqtvc
 ;; File "p.ads", line 1, characters 0-0
  (not
  (forall ((usf us_main_type)) (dynamic_predicate
  (us_repqtmk1 (us_split_fieldsqtmk1 usf))))))
(check-sat)
(exit)
