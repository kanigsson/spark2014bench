(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort cardindex 0)

(declare-fun cardindexqtint (cardindex) Int)

;; cardindex'axiom
  (assert
  (forall ((i cardindex))
  (and (<= (- 1) (cardindexqtint i)) (<= (cardindexqtint i) 100))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (cardindex cardindex) Bool)

(declare-const dummy1 cardindex)

(declare-datatypes ((cardindex__ref 0))
(((cardindex__refqtmk (cardindex__content cardindex)))))
(define-fun cardindex__ref_cardindex__content__projection ((a cardindex__ref)) cardindex 
  (cardindex__content a))

(define-fun to_rep ((x cardindex)) Int (cardindexqtint x))

(declare-fun of_rep (Int) cardindex)

;; inversion_axiom
  (assert
  (forall ((x cardindex))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x cardindex)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort card1 0)

(declare-fun cardqtint (card1) Int)

;; card'axiom
  (assert
  (forall ((i card1)) (and (<= 1 (cardqtint i)) (<= (cardqtint i) 52))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 52)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (card1 card1) Bool)

(declare-const dummy2 card1)

(declare-datatypes ((card__ref 0))
(((card__refqtmk (card__content card1)))))
(define-fun card__ref_card__content__projection ((a card__ref)) card1 
  (card__content a))

(define-fun to_rep1 ((x card1)) Int (cardqtint x))

(declare-fun of_rep1 (Int) card1)

;; inversion_axiom
  (assert
  (forall ((x card1))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x card1)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int card1))))))
(declare-fun slide ((Array Int card1) Int Int) (Array Int card1))

;; slide_eq
  (assert
  (forall ((a (Array Int card1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int card1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int card1)) (a__first Int) (a__last Int)
  (b (Array Int card1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int card1)) (b (Array Int card1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy3 (Array Int card1))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq3 ((Array Int card1) (Array Int card1)) Bool)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int cardindex))))))
(declare-fun slide1 ((Array Int cardindex) Int Int) (Array Int cardindex))

;; slide_eq
  (assert
  (forall ((a (Array Int cardindex)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int cardindex)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int cardindex)) (a__first Int) (a__last Int)
  (b (Array Int cardindex)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep (select a temp___idx_155)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep (select a temp___idx_155)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-const dummy4 (Array Int cardindex))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 ((Array Int cardindex) (Array Int cardindex)) Bool)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int (Array Int cardindex)))))))
(declare-fun slide2 ((Array Int (Array Int cardindex)) Int
  Int) (Array Int (Array Int cardindex)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int (Array Int cardindex))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int cardindex))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq1 (select a temp___idx_156) 0 99
                              (select b (+ (- b__first a__first) temp___idx_156))
                              0 99) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int cardindex)))
  (b (Array Int (Array Int cardindex))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq1 (select a temp___idx_156) 0 99
     (select b (+ (- b__first a__first) temp___idx_156)) 0 99) true))))))))

(declare-const dummy5 (Array Int (Array Int cardindex)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq5 ((Array Int (Array Int cardindex))
  (Array Int (Array Int cardindex))) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__patience__state__numelts cardindex)(rec__patience__state__values (Array Int card1))(rec__patience__state__numstacks cardindex)(rec__patience__state__stacksizes (Array Int cardindex))(rec__patience__state__stacks (Array Int (Array Int cardindex)))(rec__patience__state__posstack (Array Int cardindex))(rec__patience__state__posheight (Array Int cardindex))(rec__patience__state__preds (Array Int cardindex))))))
(define-fun us_split_fields_rec__patience__state__numelts__projection ((a us_split_fields)) cardindex 
  (rec__patience__state__numelts a))

(define-fun us_split_fields_rec__patience__state__values__projection ((a us_split_fields)) (Array Int card1) 
  (rec__patience__state__values a))

(define-fun us_split_fields_rec__patience__state__numstacks__projection ((a us_split_fields)) cardindex 
  (rec__patience__state__numstacks a))

(define-fun us_split_fields_rec__patience__state__stacksizes__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__stacksizes a))

(define-fun us_split_fields_rec__patience__state__stacks__projection ((a us_split_fields)) (Array Int (Array Int cardindex)) 
  (rec__patience__state__stacks a))

(define-fun us_split_fields_rec__patience__state__posstack__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__posstack a))

(define-fun us_split_fields_rec__patience__state__posheight__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__posheight a))

(define-fun us_split_fields_rec__patience__state__preds__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__preds a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__patience__state__numelts
                           (us_split_fields1 a))) (to_rep
                                                  (rec__patience__state__numelts
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__patience__state__values
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__values
                           (us_split_fields1 b)) 0 99) true))
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__patience__state__numstacks
                           (us_split_fields1 a))) (to_rep
                                                  (rec__patience__state__numstacks
                                                  (us_split_fields1 b))))
                        (= (bool_eq1
                           (rec__patience__state__stacksizes
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__stacksizes
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq2
                           (rec__patience__state__stacks
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__stacks
                           (us_split_fields1 b)) 0 99) true))
                        (and
                        (and
                        (= (bool_eq1
                           (rec__patience__state__posstack
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__posstack
                           (us_split_fields1 b)) 0 99) true)
                        (= (bool_eq1
                           (rec__patience__state__posheight
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__posheight
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq1
                           (rec__patience__state__preds (us_split_fields1 a))
                           0 99
                           (rec__patience__state__preds (us_split_fields1 b))
                           0 99) true))))
                   true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const patience__state__numelts__first__bit Int)

(declare-const patience__state__numelts__last__bit Int)

(declare-const patience__state__numelts__position Int)

;; patience__state__numelts__first__bit_axiom
  (assert (<= 0 patience__state__numelts__first__bit))

;; patience__state__numelts__last__bit_axiom
  (assert
  (< patience__state__numelts__first__bit patience__state__numelts__last__bit))

;; patience__state__numelts__position_axiom
  (assert (<= 0 patience__state__numelts__position))

(declare-const patience__state__values__first__bit Int)

(declare-const patience__state__values__last__bit Int)

(declare-const patience__state__values__position Int)

;; patience__state__values__first__bit_axiom
  (assert (<= 0 patience__state__values__first__bit))

;; patience__state__values__last__bit_axiom
  (assert
  (< patience__state__values__first__bit patience__state__values__last__bit))

;; patience__state__values__position_axiom
  (assert (<= 0 patience__state__values__position))

(declare-const patience__state__numstacks__first__bit Int)

(declare-const patience__state__numstacks__last__bit Int)

(declare-const patience__state__numstacks__position Int)

;; patience__state__numstacks__first__bit_axiom
  (assert (<= 0 patience__state__numstacks__first__bit))

;; patience__state__numstacks__last__bit_axiom
  (assert
  (< patience__state__numstacks__first__bit patience__state__numstacks__last__bit))

;; patience__state__numstacks__position_axiom
  (assert (<= 0 patience__state__numstacks__position))

(declare-const patience__state__stacksizes__first__bit Int)

(declare-const patience__state__stacksizes__last__bit Int)

(declare-const patience__state__stacksizes__position Int)

;; patience__state__stacksizes__first__bit_axiom
  (assert (<= 0 patience__state__stacksizes__first__bit))

;; patience__state__stacksizes__last__bit_axiom
  (assert
  (< patience__state__stacksizes__first__bit patience__state__stacksizes__last__bit))

;; patience__state__stacksizes__position_axiom
  (assert (<= 0 patience__state__stacksizes__position))

(declare-const patience__state__stacks__first__bit Int)

(declare-const patience__state__stacks__last__bit Int)

(declare-const patience__state__stacks__position Int)

;; patience__state__stacks__first__bit_axiom
  (assert (<= 0 patience__state__stacks__first__bit))

;; patience__state__stacks__last__bit_axiom
  (assert
  (< patience__state__stacks__first__bit patience__state__stacks__last__bit))

;; patience__state__stacks__position_axiom
  (assert (<= 0 patience__state__stacks__position))

(declare-const patience__state__posstack__first__bit Int)

(declare-const patience__state__posstack__last__bit Int)

(declare-const patience__state__posstack__position Int)

;; patience__state__posstack__first__bit_axiom
  (assert (<= 0 patience__state__posstack__first__bit))

;; patience__state__posstack__last__bit_axiom
  (assert
  (< patience__state__posstack__first__bit patience__state__posstack__last__bit))

;; patience__state__posstack__position_axiom
  (assert (<= 0 patience__state__posstack__position))

(declare-const patience__state__posheight__first__bit Int)

(declare-const patience__state__posheight__last__bit Int)

(declare-const patience__state__posheight__position Int)

;; patience__state__posheight__first__bit_axiom
  (assert (<= 0 patience__state__posheight__first__bit))

;; patience__state__posheight__last__bit_axiom
  (assert
  (< patience__state__posheight__first__bit patience__state__posheight__last__bit))

;; patience__state__posheight__position_axiom
  (assert (<= 0 patience__state__posheight__position))

(declare-const patience__state__preds__first__bit Int)

(declare-const patience__state__preds__last__bit Int)

(declare-const patience__state__preds__position Int)

;; patience__state__preds__first__bit_axiom
  (assert (<= 0 patience__state__preds__first__bit))

;; patience__state__preds__last__bit_axiom
  (assert
  (< patience__state__preds__first__bit patience__state__preds__last__bit))

;; patience__state__preds__position_axiom
  (assert (<= 0 patience__state__preds__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((state__ref 0))
(((state__refqtmk (state__content us_rep)))))
(define-fun state__ref_state__content__projection ((a state__ref)) us_rep 
  (state__content a))

(declare-fun inv (us_rep) Bool)

(declare-fun inv__function_guard (Bool us_rep) Bool)

;; inv__post_axiom
  (assert true)

;; inv__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (= (inv s) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (<= 0 (to_rep (rec__patience__state__numstacks (us_split_fields1 s))))
     (<= (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 
     (to_rep (rec__patience__state__numelts (us_split_fields1 s)))))
     (<= (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 100))
     (or (= (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 0)
     (< 0 (to_rep (rec__patience__state__numstacks (us_split_fields1 s))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (and
     (and
     (<= 1 (to_rep
           (let ((temp___340 (rec__patience__state__stacksizes
                             (us_split_fields1 s))))
           (select temp___340 i))))
     (<= (to_rep
         (let ((temp___341 (rec__patience__state__stacksizes
                           (us_split_fields1 s))))
         (select temp___341 i))) (to_rep
                                 (rec__patience__state__numelts
                                 (us_split_fields1 s)))))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep
              (let ((temp___342 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___342 i))) 1)))
     (and
     (<= 0 (to_rep
           (let ((temp___344 (let ((temp___343 (rec__patience__state__stacks
                                               (us_split_fields1 s))))
                             (select temp___343 i))))
           (select temp___344 j))))
     (< (to_rep
        (let ((temp___346 (let ((temp___345 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___345 i))))
        (select temp___346 j))) (to_rep
                                (rec__patience__state__numelts
                                (us_split_fields1 s)))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 1)))
     (and
     (and
     (let ((temp___348 (to_rep
                       (let ((temp___347 (rec__patience__state__posstack
                                         (us_split_fields1 s))))
                       (select temp___347 i)))))
     (and (<= 0 temp___348)
     (<= temp___348 (- (to_rep
                       (rec__patience__state__numstacks (us_split_fields1 s))) 1))))
     (let ((temp___350 (to_rep
                       (let ((temp___349 (rec__patience__state__posheight
                                         (us_split_fields1 s))))
                       (select temp___349 i)))))
     (and (<= 0 temp___350)
     (<= temp___350 (- (to_rep
                       (let ((temp___351 (rec__patience__state__stacksizes
                                         (us_split_fields1 s))))
                       (select temp___351 (to_rep
                                          (let ((temp___352 (rec__patience__state__posstack
                                                            (us_split_fields1
                                                            s))))
                                          (select temp___352 i)))))) 1)))))
     (= (to_rep
        (let ((temp___355 (let ((temp___353 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___353 (to_rep
                                             (let ((temp___354 (rec__patience__state__posstack
                                                               (us_split_fields1
                                                               s))))
                                             (select temp___354 i)))))))
        (select temp___355 (to_rep
                           (let ((temp___356 (rec__patience__state__posheight
                                             (us_split_fields1 s))))
                           (select temp___356 i)))))) i)))))
     (forall ((ist Int))
     (=>
     (and (<= 0 ist)
     (<= ist (- (to_rep
                (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((ip Int))
     (=>
     (and (<= 0 ip)
     (<= ip (- (to_rep
               (let ((temp___357 (rec__patience__state__stacksizes
                                 (us_split_fields1 s))))
               (select temp___357 ist))) 1)))
     (and
     (= ist (to_rep
            (let ((temp___358 (rec__patience__state__posstack
                              (us_split_fields1 s))))
            (select temp___358 (to_rep
                               (let ((temp___360 (let ((temp___359 (rec__patience__state__stacks
                                                                   (us_split_fields1
                                                                   s))))
                                                 (select temp___359 ist))))
                               (select temp___360 ip)))))))
     (= ip (to_rep
           (let ((temp___361 (rec__patience__state__posheight
                             (us_split_fields1 s))))
           (select temp___361 (to_rep
                              (let ((temp___363 (let ((temp___362 (rec__patience__state__stacks
                                                                  (us_split_fields1
                                                                  s))))
                                                (select temp___362 ist))))
                              (select temp___363 ip)))))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep
              (let ((temp___364 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___364 i))) 2)))
     (forall ((k Int))
     (=>
     (and (<= (+ j 1) k)
     (<= k (- (to_rep
              (let ((temp___365 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___365 i))) 1)))
     (< (to_rep
        (let ((temp___367 (let ((temp___366 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___366 i))))
        (select temp___367 j))) (to_rep
                                (let ((temp___369 (let ((temp___368 (rec__patience__state__stacks
                                                                    (us_split_fields1
                                                                    s))))
                                                  (select temp___368 i))))
                                (select temp___369 k)))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep
              (let ((temp___370 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___370 i))) 2)))
     (forall ((k Int))
     (=>
     (and (<= (+ j 1) k)
     (<= k (- (to_rep
              (let ((temp___371 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___371 i))) 1)))
     (<= (to_rep1
         (let ((temp___375 (rec__patience__state__values
                           (us_split_fields1 s))))
         (select temp___375 (to_rep
                            (let ((temp___377 (let ((temp___376 (rec__patience__state__stacks
                                                                (us_split_fields1
                                                                s))))
                                              (select temp___376 i))))
                            (select temp___377 k)))))) (to_rep1
                                                       (let ((temp___372 
                                                       (rec__patience__state__values
                                                       (us_split_fields1 s))))
                                                       (select temp___372 
                                                       (to_rep
                                                       (let ((temp___374 
                                                       (let ((temp___373 
                                                       (rec__patience__state__stacks
                                                       (us_split_fields1 s))))
                                                       (select temp___373 i))))
                                                       (select temp___374 j))))))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep (rec__patience__state__numelts (us_split_fields1 s))) 1)))
     (and
     (and
     (let ((temp___379 (to_rep
                       (let ((temp___378 (rec__patience__state__preds
                                         (us_split_fields1 s))))
                       (select temp___378 i)))))
     (and (<= (- 1) temp___379)
     (<= temp___379 (- (to_rep
                       (rec__patience__state__numelts (us_split_fields1 s))) 1))))
     (< (to_rep
        (let ((temp___380 (rec__patience__state__preds (us_split_fields1 s))))
        (select temp___380 i))) i))
     (ite (< (to_rep
             (let ((temp___389 (rec__patience__state__preds
                               (us_split_fields1 s))))
             (select temp___389 i))) 0)
     (= (to_rep
        (let ((temp___381 (rec__patience__state__posstack
                          (us_split_fields1 s))))
        (select temp___381 i))) 0)
     (and
     (and
     (< (to_rep1
        (let ((temp___382 (rec__patience__state__values (us_split_fields1 s))))
        (select temp___382 (to_rep
                           (let ((temp___383 (rec__patience__state__preds
                                             (us_split_fields1 s))))
                           (select temp___383 i)))))) (to_rep1
                                                      (let ((temp___384 
                                                      (rec__patience__state__values
                                                      (us_split_fields1 s))))
                                                      (select temp___384 i))))
     (< 0 (to_rep
          (let ((temp___385 (rec__patience__state__posstack
                            (us_split_fields1 s))))
          (select temp___385 i)))))
     (= (to_rep
        (let ((temp___386 (rec__patience__state__posstack
                          (us_split_fields1 s))))
        (select temp___386 (to_rep
                           (let ((temp___387 (rec__patience__state__preds
                                             (us_split_fields1 s))))
                           (select temp___387 i)))))) (- (to_rep
                                                         (let ((temp___388 
                                                         (rec__patience__state__posstack
                                                         (us_split_fields1 s))))
                                                         (select temp___388 i))) 1))))))))) :pattern (
  (inv s)) )))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant1 ((temp___expr_191 Int)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)
  (temp___do_typ_inv_190 Bool)) Bool (=>
                                     (or (= temp___is_init_187 true)
                                     (<= 1 52)) (in_range3 temp___expr_191)))

(define-fun dynamic_invariant2 ((temp___expr_204 Int)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)
  (temp___do_typ_inv_203 Bool)) Bool (=>
                                     (or (= temp___is_init_200 true)
                                     (<= (- 1) 100)) (in_range2
                                     temp___expr_204)))

(declare-sort tcardarrayD1 0)

(declare-fun tcardarrayD1qtint (tcardarrayD1) Int)

;; tcardarrayD1'axiom
  (assert
  (forall ((i tcardarrayD1))
  (and (<= 0 (tcardarrayD1qtint i)) (<= (tcardarrayD1qtint i) 99))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (tcardarrayD1 tcardarrayD1) Bool)

(declare-const dummy7 tcardarrayD1)

(declare-datatypes ((tcardarrayD1__ref 0))
(((tcardarrayD1__refqtmk (tcardarrayD1__content tcardarrayD1)))))
(define-fun tcardarrayD1__ref_tcardarrayD1__content__projection ((a tcardarrayD1__ref)) tcardarrayD1 
  (tcardarrayD1__content a))

(declare-sort tindexarrayD1 0)

(declare-fun tindexarrayD1qtint (tindexarrayD1) Int)

;; tindexarrayD1'axiom
  (assert
  (forall ((i tindexarrayD1))
  (and (<= 0 (tindexarrayD1qtint i)) (<= (tindexarrayD1qtint i) 99))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (tindexarrayD1 tindexarrayD1) Bool)

(declare-const dummy8 tindexarrayD1)

(declare-datatypes ((tindexarrayD1__ref 0))
(((tindexarrayD1__refqtmk (tindexarrayD1__content tindexarrayD1)))))
(define-fun tindexarrayD1__ref_tindexarrayD1__content__projection ((a tindexarrayD1__ref)) tindexarrayD1 
  (tindexarrayD1__content a))

(declare-sort tindexmatrixD1 0)

(declare-fun tindexmatrixD1qtint (tindexmatrixD1) Int)

;; tindexmatrixD1'axiom
  (assert
  (forall ((i tindexmatrixD1))
  (and (<= 0 (tindexmatrixD1qtint i)) (<= (tindexmatrixD1qtint i) 99))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (tindexmatrixD1 tindexmatrixD1) Bool)

(declare-const dummy9 tindexmatrixD1)

(declare-datatypes ((tindexmatrixD1__ref 0))
(((tindexmatrixD1__refqtmk (tindexmatrixD1__content tindexmatrixD1)))))
(define-fun tindexmatrixD1__ref_tindexmatrixD1__content__projection ((a tindexmatrixD1__ref)) tindexmatrixD1 
  (tindexmatrixD1__content a))

(declare-const rliteral cardindex)

;; rliteral_axiom
  (assert (= (cardindexqtint rliteral) 1))

(declare-const rliteral1 cardindex)

;; rliteral_axiom
  (assert (= (cardindexqtint rliteral1) 0))

(assert
;; defqtvc
 ;; File "patience.ads", line 122, characters 0-0
  (not
  (forall ((s__split_fields us_split_fields) (idx Int) (pred Int) (i Int)
  (stackisize Int) (topstacki Int))
  (=> (dynamic_invariant1 c true false true true)
  (=>
  (forall ((s__split_fields1 us_split_fields)) (inv__function_guard
  (inv (us_repqtmk s__split_fields1)) (us_repqtmk s__split_fields1)))
  (=> (= (inv (us_repqtmk s__split_fields)) true)
  (=> (< (to_rep (rec__patience__state__numelts s__split_fields)) 100)
  (=> (dynamic_invariant idx false false true true)
  (=> (dynamic_invariant pred false false true true)
  (=> (dynamic_invariant i false false true true)
  (=> (dynamic_invariant2 stackisize false false true true)
  (=> (dynamic_invariant2 topstacki false false true true)
  (forall ((pred1 Int))
  (=> (= pred1 (- 1))
  (forall ((i1 Int))
  (=> (= i1 0)
  (forall ((pred2 Int) (i2 Int) (stackisize1 Int))
  (=>
  (exists ((o Int))
  (and (= (to_rep (rec__patience__state__numstacks s__split_fields)) o)
  (ite (< i1 o)
  (exists ((o1 Int))
  (and (= (to_rep (rec__patience__state__numstacks s__split_fields)) o1)
  (exists ((pred3 Int) (i3 Int) (stackisize2 Int) (topstacki1 Int))
  (and
  (and
  (and (<= 0 i3)
  (<= i3 (to_rep (rec__patience__state__numstacks s__split_fields))))
  (ite (= i3 0) (= pred3 (- 1))
  (and
  (and
  (and
  (and (<= 0 pred3)
  (<= pred3 (- (to_rep (rec__patience__state__numelts s__split_fields)) 1)))
  (= pred3 (to_rep
           (select (select (rec__patience__state__stacks s__split_fields) (- i3 1)) (- 
           (to_rep
           (select (rec__patience__state__stacksizes s__split_fields) (- i3 1))) 1)))))
  (< (to_rep1 (select (rec__patience__state__values s__split_fields) pred3)) 
  c))
  (= (to_rep (select (rec__patience__state__posstack s__split_fields) pred3)) (- i3 1)))))
  (and
  (= (and (ite (and
               (and
               (and (dynamic_invariant pred3 false true true true)
               (dynamic_invariant i3 false true true true))
               (dynamic_invariant2 stackisize2 false true true true))
               (dynamic_invariant2 topstacki1 false true true true))
          true false) (ite (< i3 (to_rep
                                 (rec__patience__state__numstacks
                                 s__split_fields)))
                      true false)) true)
  (and (and (<= 0 i3) (<= i3 99))
  (exists ((o2 Int))
  (and
  (= (to_rep (select (rec__patience__state__stacksizes s__split_fields) i3)) o2)
  (and (= stackisize1 o2)
  (and (and (<= 0 i3) (<= i3 99))
  (let ((temp___584 (- stackisize1 1)))
  (and (and (<= 0 temp___584) (<= temp___584 99))
  (exists ((o3 Int))
  (and
  (= (to_rep
     (select (select (rec__patience__state__stacks s__split_fields) i3) temp___584)) o3)
  (exists ((topstacki2 Int))
  (and (= topstacki2 o3)
  (and (and (<= 0 topstacki2) (<= topstacki2 99))
  (exists ((o4 Int))
  (and
  (= (to_rep1
     (select (rec__patience__state__values s__split_fields) topstacki2)) o4)
  (ite (<= c o4) (and (= pred2 pred3) (= i2 i3))
  (and
  (and (<= 0 topstacki2)
  (< topstacki2 (to_rep (rec__patience__state__numelts s__split_fields))))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (<= 0 (to_rep
        (select (rec__patience__state__posstack s__split_fields) topstacki2)))
  (< (to_rep
     (select (rec__patience__state__posstack s__split_fields) topstacki2)) 
  (to_rep (rec__patience__state__numstacks s__split_fields))))
  (<= 0 (to_rep
        (select (rec__patience__state__posheight s__split_fields) topstacki2))))
  (< (to_rep
     (select (rec__patience__state__posheight s__split_fields) topstacki2)) 
  (to_rep
  (select (rec__patience__state__stacksizes s__split_fields) (to_rep
                                                             (select 
                                                             (rec__patience__state__posstack
                                                             s__split_fields) topstacki2))))))
  (= (to_rep
     (select (select (rec__patience__state__stacks s__split_fields) (to_rep
                                                                    (select 
                                                                    (rec__patience__state__posstack
                                                                    s__split_fields) topstacki2))) 
     (to_rep
     (select (rec__patience__state__posheight s__split_fields) topstacki2)))) topstacki2))
  (= (to_rep
     (select (rec__patience__state__posstack s__split_fields) topstacki2)) i3))
  (= (to_rep
     (select (rec__patience__state__posheight s__split_fields) topstacki2)) (- stackisize1 1)))
  (and (= pred2 topstacki2)
  (let ((o5 (+ i3 1)))
  (and (in_range1 o5)
  (and (= i2 o5)
  (exists ((o6 Int))
  (and (= (to_rep (rec__patience__state__numstacks s__split_fields)) o6)
  (not (< i2 o6))))))))))))))))))))))))))))))
  (and (and (= pred2 pred1) (= i2 i1)) (= stackisize1 stackisize)))))
  (forall ((o Int))
  (=> (= (to_rep (rec__patience__state__numelts s__split_fields)) o)
  (forall ((idx1 Int))
  (=> (= idx1 o)
  (forall ((o1 card1))
  (=> (= (to_rep1 o1) c)
  (=> (and (<= 0 idx1) (<= idx1 99))
  (forall ((s__split_fields1 us_split_fields))
  (=>
  (= s__split_fields1 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields)
                      (store (rec__patience__state__values s__split_fields) idx1 o1)
                      (rec__patience__state__numstacks s__split_fields)
                      (rec__patience__state__stacksizes s__split_fields)
                      (rec__patience__state__stacks s__split_fields)
                      (rec__patience__state__posstack s__split_fields)
                      (rec__patience__state__posheight s__split_fields)
                      (rec__patience__state__preds s__split_fields)))
  (let ((o2 (+ idx1 1)))
  (=> (in_range1 o2)
  (=> (in_range2 o2)
  (forall ((o3 cardindex))
  (=> (= (to_rep o3) o2)
  (forall ((s__split_fields2 us_split_fields))
  (=>
  (= s__split_fields2 (us_split_fieldsqtmk o3
                      (rec__patience__state__values s__split_fields1)
                      (rec__patience__state__numstacks s__split_fields1)
                      (rec__patience__state__stacksizes s__split_fields1)
                      (rec__patience__state__stacks s__split_fields1)
                      (rec__patience__state__posstack s__split_fields1)
                      (rec__patience__state__posheight s__split_fields1)
                      (rec__patience__state__preds s__split_fields1)))
  (=> (in_range2 pred2)
  (forall ((o4 cardindex))
  (=> (= (to_rep o4) pred2)
  (=> (and (<= 0 idx1) (<= idx1 99))
  (forall ((s__split_fields3 us_split_fields))
  (=>
  (= s__split_fields3 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields2)
                      (rec__patience__state__values s__split_fields2)
                      (rec__patience__state__numstacks s__split_fields2)
                      (rec__patience__state__stacksizes s__split_fields2)
                      (rec__patience__state__stacks s__split_fields2)
                      (rec__patience__state__posstack s__split_fields2)
                      (rec__patience__state__posheight s__split_fields2)
                      (store (rec__patience__state__preds s__split_fields2) idx1 o4)))
  (forall ((s__split_fields4 us_split_fields))
  (=>
  (exists ((o5 Int))
  (and (= (to_rep (rec__patience__state__numstacks s__split_fields3)) o5)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= i2 o5) true false))
  (ite (= spark__branch true)
  (exists ((o6 Int))
  (and (= (to_rep (rec__patience__state__numstacks s__split_fields3)) o6)
  (exists ((i3 Int))
  (and (= i3 o6)
  (exists ((o7 Int))
  (and (= (to_rep (rec__patience__state__numstacks s__split_fields3)) o7)
  (let ((o8 (+ o7 1)))
  (and (in_range2 o8)
  (exists ((o9 cardindex))
  (and (= (to_rep o9) o8)
  (exists ((s__split_fields5 us_split_fields))
  (and
  (= s__split_fields5 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields3)
                      (rec__patience__state__values s__split_fields3) o9
                      (rec__patience__state__stacksizes s__split_fields3)
                      (rec__patience__state__stacks s__split_fields3)
                      (rec__patience__state__posstack s__split_fields3)
                      (rec__patience__state__posheight s__split_fields3)
                      (rec__patience__state__preds s__split_fields3)))
  (and (and (<= 0 i3) (<= i3 99))
  (exists ((s__split_fields6 us_split_fields))
  (and
  (= s__split_fields6 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields5)
                      (rec__patience__state__values s__split_fields5)
                      (rec__patience__state__numstacks s__split_fields5)
                      (store (rec__patience__state__stacksizes
                             s__split_fields5) i3 rliteral)
                      (rec__patience__state__stacks s__split_fields5)
                      (rec__patience__state__posstack s__split_fields5)
                      (rec__patience__state__posheight s__split_fields5)
                      (rec__patience__state__preds s__split_fields5)))
  (and (in_range2 idx1)
  (exists ((o10 cardindex))
  (and (= (to_rep o10) idx1)
  (and (and (<= 0 i3) (<= i3 99))
  (exists ((s__split_fields7 us_split_fields))
  (and
  (= s__split_fields7 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields6)
                      (rec__patience__state__values s__split_fields6)
                      (rec__patience__state__numstacks s__split_fields6)
                      (rec__patience__state__stacksizes s__split_fields6)
                      (store (rec__patience__state__stacks s__split_fields6) i3 (store (select 
                      (rec__patience__state__stacks s__split_fields6) i3) 0 o10))
                      (rec__patience__state__posstack s__split_fields6)
                      (rec__patience__state__posheight s__split_fields6)
                      (rec__patience__state__preds s__split_fields6)))
  (and (in_range2 i3)
  (exists ((o11 cardindex))
  (and (= (to_rep o11) i3)
  (and (and (<= 0 idx1) (<= idx1 99))
  (exists ((s__split_fields8 us_split_fields))
  (and
  (= s__split_fields8 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields7)
                      (rec__patience__state__values s__split_fields7)
                      (rec__patience__state__numstacks s__split_fields7)
                      (rec__patience__state__stacksizes s__split_fields7)
                      (rec__patience__state__stacks s__split_fields7)
                      (store (rec__patience__state__posstack
                             s__split_fields7) idx1 o11)
                      (rec__patience__state__posheight s__split_fields7)
                      (rec__patience__state__preds s__split_fields7)))
  (and (and (<= 0 idx1) (<= idx1 99))
  (= s__split_fields4 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields8)
                      (rec__patience__state__values s__split_fields8)
                      (rec__patience__state__numstacks s__split_fields8)
                      (rec__patience__state__stacksizes s__split_fields8)
                      (rec__patience__state__stacks s__split_fields8)
                      (rec__patience__state__posstack s__split_fields8)
                      (store (rec__patience__state__posheight
                             s__split_fields8) idx1 rliteral1)
                      (rec__patience__state__preds s__split_fields8)))))))))))))))))))))))))))))))
  (and (and (<= 0 i2) (<= i2 99))
  (exists ((o6 Int))
  (and
  (= (to_rep (select (rec__patience__state__stacksizes s__split_fields3) i2)) o6)
  (exists ((stackisize2 Int))
  (and (= stackisize2 o6)
  (let ((o7 (+ stackisize2 1)))
  (and (in_range2 o7)
  (exists ((o8 cardindex))
  (and (= (to_rep o8) o7)
  (and (and (<= 0 i2) (<= i2 99))
  (exists ((s__split_fields5 us_split_fields))
  (and
  (= s__split_fields5 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields3)
                      (rec__patience__state__values s__split_fields3)
                      (rec__patience__state__numstacks s__split_fields3)
                      (store (rec__patience__state__stacksizes
                             s__split_fields3) i2 o8)
                      (rec__patience__state__stacks s__split_fields3)
                      (rec__patience__state__posstack s__split_fields3)
                      (rec__patience__state__posheight s__split_fields3)
                      (rec__patience__state__preds s__split_fields3)))
  (and (in_range2 idx1)
  (exists ((o9 cardindex))
  (and (= (to_rep o9) idx1)
  (and (and (<= 0 stackisize2) (<= stackisize2 99))
  (and (and (<= 0 i2) (<= i2 99))
  (exists ((s__split_fields6 us_split_fields))
  (and
  (= s__split_fields6 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields5)
                      (rec__patience__state__values s__split_fields5)
                      (rec__patience__state__numstacks s__split_fields5)
                      (rec__patience__state__stacksizes s__split_fields5)
                      (store (rec__patience__state__stacks s__split_fields5) i2 (store (select 
                      (rec__patience__state__stacks s__split_fields5) i2) stackisize2 o9))
                      (rec__patience__state__posstack s__split_fields5)
                      (rec__patience__state__posheight s__split_fields5)
                      (rec__patience__state__preds s__split_fields5)))
  (and (in_range2 i2)
  (exists ((o10 cardindex))
  (and (= (to_rep o10) i2)
  (and (and (<= 0 idx1) (<= idx1 99))
  (exists ((s__split_fields7 us_split_fields))
  (and
  (= s__split_fields7 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields6)
                      (rec__patience__state__values s__split_fields6)
                      (rec__patience__state__numstacks s__split_fields6)
                      (rec__patience__state__stacksizes s__split_fields6)
                      (rec__patience__state__stacks s__split_fields6)
                      (store (rec__patience__state__posstack
                             s__split_fields6) idx1 o10)
                      (rec__patience__state__posheight s__split_fields6)
                      (rec__patience__state__preds s__split_fields6)))
  (exists ((o11 cardindex))
  (and (= (to_rep o11) stackisize2)
  (and (and (<= 0 idx1) (<= idx1 99))
  (= s__split_fields4 (us_split_fieldsqtmk
                      (rec__patience__state__numelts s__split_fields7)
                      (rec__patience__state__values s__split_fields7)
                      (rec__patience__state__numstacks s__split_fields7)
                      (rec__patience__state__stacksizes s__split_fields7)
                      (rec__patience__state__stacks s__split_fields7)
                      (rec__patience__state__posstack s__split_fields7)
                      (store (rec__patience__state__posheight
                             s__split_fields7) idx1 o11)
                      (rec__patience__state__preds s__split_fields7))))))))))))))))))))))))))))))))))))
  (=>
  (and
  (and
  (and (<= 0 (to_rep (rec__patience__state__numstacks s__split_fields4)))
  (<= (to_rep (rec__patience__state__numstacks s__split_fields4)) (to_rep
                                                                  (rec__patience__state__numelts
                                                                  s__split_fields4))))
  (<= (to_rep (rec__patience__state__numelts s__split_fields4)) 100))
  (or (= (to_rep (rec__patience__state__numelts s__split_fields4)) 0)
  (< 0 (to_rep (rec__patience__state__numstacks s__split_fields4)))))
  (=>
  (forall ((i3 Int))
  (=>
  (and (<= 0 i3)
  (<= i3 (- (to_rep (rec__patience__state__numstacks s__split_fields4)) 1)))
  (<= 1 (to_rep
        (select (rec__patience__state__stacksizes s__split_fields4) i3)))))
  (forall ((usf Int))
  (forall ((o5 Int))
  (=> (= (to_rep (rec__patience__state__numstacks s__split_fields4)) o5)
  (=>
  (= (and (ite (<= 0 usf) true false) (ite (<= usf (- o5 1)) true false)) true)
  (forall ((usf1 Int))
  (=> (and (<= 0 usf) (<= usf 99))
  (forall ((o6 Int))
  (=>
  (= (to_rep
     (select (rec__patience__state__stacksizes s__split_fields4) usf)) o6)
  (=>
  (= (and (ite (<= 0 usf1) true false) (ite (<= usf1 (- o6 1)) true false)) true)
  (forall ((o7 Int))
  (=> (= (to_rep (rec__patience__state__numelts s__split_fields4)) o7)
  (=> (and (<= 0 usf) (<= usf 99)) (<= 0 usf1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
