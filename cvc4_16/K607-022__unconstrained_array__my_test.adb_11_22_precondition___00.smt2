;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep2 ((x integer)) Int (integerqtint x))

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort value 0)

(declare-fun valueqtint (value) Int)

;; value'axiom
  (assert
  (forall ((i value))
  (and (<= (- 2147483648) (valueqtint i)) (<= (valueqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (value value) Bool)

(declare-const dummy5 value)

(declare-datatypes ((value__ref 0))
(((value__refqtmk (value__content value)))))
(define-fun value__ref_value__content__projection ((a value__ref)) value 
  (value__content a))

(define-fun to_rep3 ((x value)) Int (valueqtint x))

(declare-fun of_rep3 (Int) value)

;; inversion_axiom
  (assert
  (forall ((x value))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x value)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int value))))))
(declare-fun slide1 ((Array Int value) Int Int) (Array Int value))

;; slide_eq
  (assert
  (forall ((a (Array Int value)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int value)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int value)) (a__first Int) (a__last Int)
  (b (Array Int value)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep3 (select a temp___idx_154)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep3 (select a temp___idx_154)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first2 (mk1 f l))) f)
     (= (to_rep2 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t1 0))
(((us_tqtmk1 (elts1 (Array Int value))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int value) (elts1 a))

(define-fun of_array1 ((a (Array Int value)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep2 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep2 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep2 (first2 (rt1 x)))
                  (to_rep2 (last2 (rt1 x))) (elts1 y)
                  (to_rep2 (first2 (rt1 y))) (to_rep2 (last2 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((values__ref 0))
(((values__refqtmk (values__content us_t1)))))
(define-fun values__ref_values__content__projection ((a values__ref)) us_t1 
  (values__content a))

(declare-datatypes ((t4s__ref 0))
(((t4s__refqtmk (t4s__content us_t1)))))
(define-fun t4s__ref_t4s__content__projection ((a t4s__ref)) us_t1 (t4s__content
                                                                   a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__simple_unc_arrays__table__last natural)))))
(define-fun us_split_discrs_rec__simple_unc_arrays__table__last__projection ((a us_split_discrs)) natural 
  (rec__simple_unc_arrays__table__last a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__simple_unc_arrays__table__v us_t1)))))
(define-fun us_split_fields_rec__simple_unc_arrays__table__v__projection ((a us_split_fields)) us_t1 
  (rec__simple_unc_arrays__table__v a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__simple_unc_arrays__table__last
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__simple_unc_arrays__table__last
                                                  (us_split_discrs1 b))))
                        (= (bool_eq3
                           (rec__simple_unc_arrays__table__v
                           (us_split_fields1 a))
                           (rec__simple_unc_arrays__table__v
                           (us_split_fields1 b))) true))
                   true false))

(define-fun in_range6 ((rec__simple_unc_arrays__table__last1 Int)
  (a us_split_discrs)) Bool (= rec__simple_unc_arrays__table__last1 (to_rep
                                                                    (rec__simple_unc_arrays__table__last
                                                                    a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const simple_unc_arrays__table__last__first__bit Int)

(declare-const simple_unc_arrays__table__last__last__bit Int)

(declare-const simple_unc_arrays__table__last__position Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit simple_unc_arrays__table__last__last__bit))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position))

(declare-const simple_unc_arrays__table__v__first__bit Int)

(declare-const simple_unc_arrays__table__v__last__bit Int)

(declare-const simple_unc_arrays__table__v__position Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit simple_unc_arrays__table__v__last__bit))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((table__ref 0))
(((table__refqtmk (table__content us_rep)))))
(define-fun table__ref_table__content__projection ((a table__ref)) us_rep 
  (table__content a))

(declare-const t1__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_205 us_rep)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)
  (temp___do_typ_inv_204 Bool)) Bool (let ((temp___206 (rec__simple_unc_arrays__table__last
                                                       (us_split_discrs1
                                                       temp___expr_205))))
                                     (and (dynamic_property1 1
                                     (to_rep temp___206)
                                     (first3
                                     (rec__simple_unc_arrays__table__v
                                     (us_split_fields1 temp___expr_205)))
                                     (last3
                                     (rec__simple_unc_arrays__table__v
                                     (us_split_fields1 temp___expr_205))))
                                     (and
                                     (= (first3
                                        (rec__simple_unc_arrays__table__v
                                        (us_split_fields1 temp___expr_205))) 1)
                                     (= (last3
                                        (rec__simple_unc_arrays__table__v
                                        (us_split_fields1 temp___expr_205))) 
                                     (to_rep temp___206))))))

(declare-const t2__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tT9bP1 0)

(declare-fun tT9bP1qtint (tT9bP1) Int)

;; tT9bP1'axiom
  (assert
  (forall ((i tT9bP1)) (and (<= 1 (tT9bP1qtint i)) (<= (tT9bP1qtint i) 10))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (tT9bP1 tT9bP1) Bool)

(declare-const dummy8 tT9bP1)

(declare-datatypes ((tT9bP1__ref 0))
(((tT9bP1__refqtmk (tT9bP1__content tT9bP1)))))
(define-fun tT9bP1__ref_tT9bP1__content__projection ((a tT9bP1__ref)) tT9bP1 
  (tT9bP1__content a))

(declare-const dummy9 (Array Int value))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq9 ((Array Int value) (Array Int value)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__simple_unc_arrays__table__v1 (Array Int value))))))
(define-fun us_split_fields_rec__simple_unc_arrays__table__v__4__projection ((a us_split_fields2)) (Array Int value) 
  (rec__simple_unc_arrays__table__v1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (of_array1
                                         (rec__simple_unc_arrays__table__v1
                                         (us_split_fields3 a)) 1 10))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___157 (rec__simple_unc_arrays__table__v
                                                           (us_split_fields1
                                                           r))))
                                         (to_array1 temp___157)))))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__simple_unc_arrays__table__last
                            (us_split_discrs2 a))) (to_rep
                                                   (rec__simple_unc_arrays__table__last
                                                   (us_split_discrs2 b))))
                         (= (bool_eq2
                            (rec__simple_unc_arrays__table__v1
                            (us_split_fields3 a)) 1 10
                            (rec__simple_unc_arrays__table__v1
                            (us_split_fields3 b)) 1 10) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const simple_unc_arrays__table__last__first__bit1 Int)

(declare-const simple_unc_arrays__table__last__last__bit1 Int)

(declare-const simple_unc_arrays__table__last__position1 Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit1))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit1 simple_unc_arrays__table__last__last__bit1))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position1))

(declare-const simple_unc_arrays__table__v__first__bit1 Int)

(declare-const simple_unc_arrays__table__v__last__bit1 Int)

(declare-const simple_unc_arrays__table__v__position1 Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit1))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit1 simple_unc_arrays__table__v__last__bit1))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position1))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ((tt3S__ref 0))
(((tt3S__refqtmk (tt3S__content us_rep1)))))
(define-fun tt3S__ref_tt3S__content__projection ((a tt3S__ref)) us_rep1 
  (tt3S__content a))

(declare-const t3__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_212 us_rep1)
  (temp___is_init_208 Bool) (temp___skip_constant_209 Bool)
  (temp___do_toplevel_210 Bool)
  (temp___do_typ_inv_211 Bool)) Bool (=>
                                     (not (= temp___skip_constant_209 true))
                                     (in_range6 10
                                     (us_split_discrs1
                                     (to_base temp___expr_212)))))

(define-fun default_initial_assumption ((temp___expr_215 us_rep1)
  (temp___skip_top_level_216 Bool)) Bool (= (to_rep
                                            (rec__simple_unc_arrays__table__last
                                            (us_split_discrs2
                                            temp___expr_215))) 10))

(declare-fun empty (us_rep) Bool)

(declare-fun empty__function_guard (Bool us_rep) Bool)

(declare-fun max (us_rep) Int)

(declare-fun max__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant2 ((temp___expr_192 Int)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)
  (temp___do_typ_inv_191 Bool)) Bool (=>
                                     (or (= temp___is_init_188 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_192)))

;; max__post_axiom
  (assert
  (forall ((a us_rep))
  (! (and (forall ((a1 us_rep)) (empty__function_guard (empty a1) a1))
     (=>
     (and (dynamic_invariant a true true true true) (not (= (empty a) true)))
     (let ((result (max a)))
     (=> (max__function_guard result a)
     (and
     (and
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (to_rep
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (<= (to_rep3
         (let ((temp___231 (rec__simple_unc_arrays__table__v
                           (us_split_fields1 a))))
         (select (to_array1 temp___231) j))) result)))
     (exists ((j Int))
     (and
     (and (<= 1 j)
     (<= j (to_rep
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (= result (to_rep3
               (let ((temp___232 (rec__simple_unc_arrays__table__v
                                 (us_split_fields1 a))))
               (select (to_array1 temp___232) j)))))))
     (dynamic_invariant2 result true false true true)))))) :pattern (
  (max a)) )))

(declare-fun min (us_rep) Int)

(declare-fun min__function_guard (Int us_rep) Bool)

;; min__post_axiom
  (assert
  (forall ((a us_rep))
  (! (and (forall ((a1 us_rep)) (empty__function_guard (empty a1) a1))
     (=>
     (and (dynamic_invariant a true true true true) (not (= (empty a) true)))
     (let ((result (min a)))
     (=> (min__function_guard result a)
     (and
     (and
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (to_rep
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (<= result (to_rep3
                (let ((temp___242 (rec__simple_unc_arrays__table__v
                                  (us_split_fields1 a))))
                (select (to_array1 temp___242) j))))))
     (exists ((j Int))
     (and
     (and (<= 1 j)
     (<= j (to_rep
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (= result (to_rep3
               (let ((temp___243 (rec__simple_unc_arrays__table__v
                                 (us_split_fields1 a))))
               (select (to_array1 temp___243) j)))))))
     (dynamic_invariant2 result true false true true)))))) :pattern (
  (min a)) )))

(declare-fun average (us_rep) Int)

(declare-fun average__function_guard (Int us_rep) Bool)

;; average__post_axiom
  (assert
  (forall ((a us_rep))
  (! (and (forall ((a1 us_rep)) (empty__function_guard (empty a1) a1))
     (=>
     (and (dynamic_invariant a true true true true) (not (= (empty a) true)))
     (let ((result (average a)))
     (and (forall ((a1 us_rep)) (min__function_guard (min a1) a1))
     (and (forall ((a1 us_rep)) (max__function_guard (max a1) a1))
     (=> (average__function_guard result a)
     (and (and (<= (min a) result) (<= result (max a))) (dynamic_invariant2
     result true false true true)))))))) :pattern ((average a)) )))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-fun not_in (us_rep Int Int Int) Bool)

(declare-fun not_in__function_guard (Bool us_rep Int Int Int) Bool)

(declare-fun search (us_rep Int) Int)

(declare-fun search__function_guard (Int us_rep Int) Bool)

;; search__post_axiom
  (assert
  (forall ((a us_rep))
  (forall ((v Int))
  (! (=>
     (and (dynamic_invariant a true true true true) (dynamic_invariant2 v
     true true true true))
     (let ((result (search a v)))
     (and
     (forall ((a1 us_rep) (v1 Int)) (not_in__function_guard
     (not_in a1 v1 1
     (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a1)))) a1
     v1 1
     (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a1)))))
     (and
     (forall ((a1 us_rep) (v1 Int) (result1 Int)) (not_in__function_guard
     (not_in a1 v1 1 (- result1 1)) a1 v1 1 (- result1 1)))
     (=> (search__function_guard result a v)
     (and
     (or
     (and (= result 0)
     (= (not_in a v 1
        (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))) true))
     (and
     (= (to_rep3
        (let ((temp___268 (rec__simple_unc_arrays__table__v
                          (us_split_fields1 a))))
        (select (to_array1 temp___268) result))) v)
     (= (not_in a v 1 (- result 1)) true))) (dynamic_invariant3 result true
     false true true))))))) :pattern ((search a v)) ))))

(declare-fun same_range (us_rep us_rep) Bool)

(declare-fun same_range__function_guard (Bool us_rep us_rep) Bool)

(declare-fun add (us_rep us_rep) us_rep)

(declare-fun add__function_guard (us_rep us_rep us_rep) Bool)

;; add__post_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (and
     (forall ((a1 us_rep) (b1 us_rep)) (same_range__function_guard
     (same_range a1 b1) a1 b1))
     (=>
     (and
     (and (dynamic_invariant a true true true true) (dynamic_invariant b true
     true true true)) (= (same_range a b) true))
     (let ((result (add a b)))
     (and
     (forall ((a1 us_rep) (result1 us_rep)) (same_range__function_guard
     (same_range result1 a1) result1 a1))
     (=> (add__function_guard result a b)
     (and
     (and (= (same_range result a) true)
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (to_rep
           (rec__simple_unc_arrays__table__last (us_split_discrs1 a)))))
     (= (to_rep3
        (let ((temp___293 (rec__simple_unc_arrays__table__v
                          (us_split_fields1 result))))
        (select (to_array1 temp___293) j))) (+ (to_rep3
                                               (let ((temp___294 (rec__simple_unc_arrays__table__v
                                                                 (us_split_fields1
                                                                 a))))
                                               (select (to_array1 temp___294) j))) 
     (to_rep3
     (let ((temp___295 (rec__simple_unc_arrays__table__v
                       (us_split_fields1 b))))
     (select (to_array1 temp___295) j)))))))) (dynamic_invariant result true
     false true true))))))) :pattern ((add a b)) )))

(declare-fun bubble_sort (us_rep) us_rep)

(declare-fun bubble_sort__function_guard (us_rep us_rep) Bool)

(declare-sort tT2bP1 0)

(declare-fun tT2bP1qtint (tT2bP1) Int)

;; tT2bP1'axiom
  (assert
  (forall ((i tT2bP1)) (and (<= 1 (tT2bP1qtint i)) (<= (tT2bP1qtint i) 10))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (tT2bP1 tT2bP1) Bool)

(declare-const dummy11 tT2bP1)

(declare-datatypes ((tT2bP1__ref 0))
(((tT2bP1__refqtmk (tT2bP1__content tT2bP1)))))
(define-fun tT2bP1__ref_tT2bP1__content__projection ((a tT2bP1__ref)) tT2bP1 
  (tT2bP1__content a))

(declare-const dummy12 (Array Int value))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size3 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-fun user_eq12 ((Array Int value) (Array Int value)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__simple_unc_arrays__table__v2 (Array Int value))))))
(define-fun us_split_fields_rec__simple_unc_arrays__table__v__2__projection ((a us_split_fields4)) (Array Int value) 
  (rec__simple_unc_arrays__table__v2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base1 ((a us_rep2)) us_rep (us_repqtmk (us_split_discrs3 a)
                                          (us_split_fieldsqtmk
                                          (of_array1
                                          (rec__simple_unc_arrays__table__v2
                                          (us_split_fields5 a)) 1 10))))

(define-fun of_base1 ((r us_rep)) us_rep2 (us_repqtmk2 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk2
                                          (let ((temp___155 (rec__simple_unc_arrays__table__v
                                                            (us_split_fields1
                                                            r))))
                                          (to_array1 temp___155)))))

(define-fun bool_eq6 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__simple_unc_arrays__table__last
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__simple_unc_arrays__table__last
                                                   (us_split_discrs3 b))))
                         (= (bool_eq2
                            (rec__simple_unc_arrays__table__v2
                            (us_split_fields5 a)) 1 10
                            (rec__simple_unc_arrays__table__v2
                            (us_split_fields5 b)) 1 10) true))
                    true false))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const simple_unc_arrays__table__last__first__bit2 Int)

(declare-const simple_unc_arrays__table__last__last__bit2 Int)

(declare-const simple_unc_arrays__table__last__position2 Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit2))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit2 simple_unc_arrays__table__last__last__bit2))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position2))

(declare-const simple_unc_arrays__table__v__first__bit2 Int)

(declare-const simple_unc_arrays__table__v__last__bit2 Int)

(declare-const simple_unc_arrays__table__v__position2 Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit2))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit2 simple_unc_arrays__table__v__last__bit2))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position2))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ((t1b__ref 0))
(((t1b__refqtmk (t1b__content us_rep2)))))
(define-fun t1b__ref_t1b__content__projection ((a t1b__ref)) us_rep2 
  (t1b__content a))

(declare-sort tT6bP1 0)

(declare-fun tT6bP1qtint (tT6bP1) Int)

;; tT6bP1'axiom
  (assert
  (forall ((i tT6bP1)) (and (<= 1 (tT6bP1qtint i)) (<= (tT6bP1qtint i) 10))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (tT6bP1 tT6bP1) Bool)

(declare-const dummy14 tT6bP1)

(declare-datatypes ((tT6bP1__ref 0))
(((tT6bP1__refqtmk (tT6bP1__content tT6bP1)))))
(define-fun tT6bP1__ref_tT6bP1__content__projection ((a tT6bP1__ref)) tT6bP1 
  (tT6bP1__content a))

(declare-const dummy15 (Array Int value))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size4 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; component__size_axiom
  (assert (<= 0 component__size4))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-fun user_eq15 ((Array Int value) (Array Int value)) Bool)

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__simple_unc_arrays__table__v3 (Array Int value))))))
(define-fun us_split_fields_rec__simple_unc_arrays__table__v__3__projection ((a us_split_fields6)) (Array Int value) 
  (rec__simple_unc_arrays__table__v3 a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3
  (us_split_discrs4 us_split_discrs)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep3)) us_split_discrs 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun to_base2 ((a us_rep3)) us_rep (us_repqtmk (us_split_discrs4 a)
                                          (us_split_fieldsqtmk
                                          (of_array1
                                          (rec__simple_unc_arrays__table__v3
                                          (us_split_fields7 a)) 1 10))))

(define-fun of_base2 ((r us_rep)) us_rep3 (us_repqtmk3 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk3
                                          (let ((temp___156 (rec__simple_unc_arrays__table__v
                                                            (us_split_fields1
                                                            r))))
                                          (to_array1 temp___156)))))

(define-fun bool_eq7 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__simple_unc_arrays__table__last
                            (us_split_discrs4 a))) (to_rep
                                                   (rec__simple_unc_arrays__table__last
                                                   (us_split_discrs4 b))))
                         (= (bool_eq2
                            (rec__simple_unc_arrays__table__v3
                            (us_split_fields7 a)) 1 10
                            (rec__simple_unc_arrays__table__v3
                            (us_split_fields7 b)) 1 10) true))
                    true false))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-const simple_unc_arrays__table__last__first__bit3 Int)

(declare-const simple_unc_arrays__table__last__last__bit3 Int)

(declare-const simple_unc_arrays__table__last__position3 Int)

;; simple_unc_arrays__table__last__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__last__first__bit3))

;; simple_unc_arrays__table__last__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__last__first__bit3 simple_unc_arrays__table__last__last__bit3))

;; simple_unc_arrays__table__last__position_axiom
  (assert (<= 0 simple_unc_arrays__table__last__position3))

(declare-const simple_unc_arrays__table__v__first__bit3 Int)

(declare-const simple_unc_arrays__table__v__last__bit3 Int)

(declare-const simple_unc_arrays__table__v__position3 Int)

;; simple_unc_arrays__table__v__first__bit_axiom
  (assert (<= 0 simple_unc_arrays__table__v__first__bit3))

;; simple_unc_arrays__table__v__last__bit_axiom
  (assert
  (< simple_unc_arrays__table__v__first__bit3 simple_unc_arrays__table__v__last__bit3))

;; simple_unc_arrays__table__v__position_axiom
  (assert (<= 0 simple_unc_arrays__table__v__position3))

(declare-fun user_eq16 (us_rep3 us_rep3) Bool)

(declare-const dummy16 us_rep3)

(declare-datatypes ((t5b__ref 0))
(((t5b__refqtmk (t5b__content us_rep3)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) us_rep3 
  (t5b__content a))

(declare-fun temp_____aggregate_def_318 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int value))

(declare-fun temp_____aggregate_def_331 (Int Int Int Int Int Int Int Int Int
  Int) (Array Int value))

(declare-fun temp___String_Literal_348 (tuple0) (Array Int character))

;; temp___String_Literal_348__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_348 us_void_param) 1)) 77)
     (= (to_rep1 (select (temp___String_Literal_348 us_void_param) 2)) 97))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_348 us_void_param) 3)) 120)
     (= (to_rep1 (select (temp___String_Literal_348 us_void_param) 4)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_348 us_void_param) 5)) 61)
     (= (to_rep1 (select (temp___String_Literal_348 us_void_param) 6)) 32)))) :pattern (
  (temp___String_Literal_348 us_void_param)) )))

(declare-fun temp___String_Literal_349 (tuple0) (Array Int character))

;; temp___String_Literal_349__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_349 us_void_param) 1)) 77)
     (= (to_rep1 (select (temp___String_Literal_349 us_void_param) 2)) 105))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_349 us_void_param) 3)) 110)
     (= (to_rep1 (select (temp___String_Literal_349 us_void_param) 4)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_349 us_void_param) 5)) 61)
     (= (to_rep1 (select (temp___String_Literal_349 us_void_param) 6)) 32)))) :pattern (
  (temp___String_Literal_349 us_void_param)) )))

(declare-fun temp___String_Literal_350 (tuple0) (Array Int character))

;; temp___String_Literal_350__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 1)) 65)
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 2)) 118))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 3)) 101)
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 4)) 114))
     (and
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 5)) 97)
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 6)) 103)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 7)) 101)
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 8)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 9)) 61)
     (= (to_rep1 (select (temp___String_Literal_350 us_void_param) 10)) 32))))) :pattern (
  (temp___String_Literal_350 us_void_param)) )))

(declare-fun temp___String_Literal_351 (tuple0) (Array Int character))

;; temp___String_Literal_351__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 1)) 70)
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 2)) 105))
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 3)) 110)
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 4)) 100))
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 5)) 32))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 6)) 48)
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 7)) 32))
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 8)) 105)))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 9)) 110)
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 10)) 32))
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 11)) 84))
     (and
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 12)) 49)
     (= (to_rep1 (select (temp___String_Literal_351 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_351 us_void_param)) )))

(declare-fun temp___String_Literal_352 (tuple0) (Array Int character))

;; temp___String_Literal_352__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 1)) 70)
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 2)) 105))
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 3)) 110)
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 4)) 100))
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 5)) 32))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 6)) 57)
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 7)) 32))
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 8)) 105)))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 9)) 110)
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 10)) 32))
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 11)) 84))
     (and
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 12)) 50)
     (= (to_rep1 (select (temp___String_Literal_352 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_352 us_void_param)) )))

(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(define-fun dynamic_invariant6 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant7 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

;; empty__post_axiom
  (assert true)

;; empty__def_axiom
  (assert
  (forall ((a us_rep))
  (! (= (= (empty a) true)
     (< (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) 1)) :pattern (
  (empty a)) )))

;; same_range__post_axiom
  (assert true)

;; same_range__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (= (same_range a b) true)
     (= (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) 
     (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 b))))) :pattern (
  (same_range a b)) )))

;; not_in__post_axiom
  (assert true)

;; not_in__def_axiom
  (assert
  (forall ((a us_rep))
  (forall ((v Int) (low Int) (up Int))
  (! (= (= (not_in a v low up) true)
     (or
     (< (to_rep (rec__simple_unc_arrays__table__last (us_split_discrs1 a))) up)
     (forall ((j Int))
     (=> (and (<= low j) (<= j up))
     (not
     (= (to_rep3
        (let ((temp___261 (rec__simple_unc_arrays__table__v
                          (us_split_fields1 a))))
        (select (to_array1 temp___261) j))) v)))))) :pattern ((not_in a v low
                                                              up)) ))))

(declare-const rliteral value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral) 5))

(declare-const rliteral1 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral1) 1))

(declare-const rliteral2 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral2) 3))

(declare-const rliteral3 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral3) 0))

(declare-const rliteral4 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral4) 9))

(declare-const rliteral5 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral5) 8))

(declare-const rliteral6 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral6) 2))

(declare-const rliteral7 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral7) 7))

(declare-const rliteral8 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral8) 4))

(declare-const rliteral9 value)

;; rliteral_axiom
  (assert (= (valueqtint rliteral9) 6))

;; def_axiom
  (assert
  (forall ((temp___320 Int) (temp___321 Int) (temp___322 Int)
  (temp___323 Int) (temp___324 Int) (temp___325 Int) (temp___326 Int)
  (temp___327 Int) (temp___328 Int) (temp___329 Int))
  (let ((temp___319 (temp_____aggregate_def_318 temp___320 temp___321
                    temp___322 temp___323 temp___324 temp___325 temp___326
                    temp___327 temp___328 temp___329)))
  (=>
  (and
  (and (dynamic_invariant2 temp___320 true true true true)
  (dynamic_invariant2 temp___321 true true true true))
  (and
  (and
  (and (dynamic_invariant2 temp___322 true true true true)
  (dynamic_invariant2 temp___323 true true true true))
  (and (dynamic_invariant2 temp___324 true true true true)
  (dynamic_invariant2 temp___325 true true true true)))
  (and
  (and (dynamic_invariant2 temp___326 true true true true)
  (dynamic_invariant2 temp___327 true true true true))
  (and (dynamic_invariant2 temp___328 true true true true)
  (dynamic_invariant2 temp___329 true true true true)))))
  (and
  (and (= (select temp___319 1) rliteral)
  (= (select temp___319 2) rliteral1))
  (and
  (and
  (and (= (select temp___319 3) rliteral2)
  (= (select temp___319 4) rliteral3))
  (and (= (select temp___319 5) rliteral4)
  (= (select temp___319 6) rliteral5)))
  (and
  (and (= (select temp___319 7) rliteral6)
  (= (select temp___319 8) rliteral7))
  (and (= (select temp___319 9) rliteral8)
  (= (select temp___319 10) rliteral9)))))))))

;; def_axiom
  (assert
  (forall ((temp___333 Int) (temp___334 Int) (temp___335 Int)
  (temp___336 Int) (temp___337 Int) (temp___338 Int) (temp___339 Int)
  (temp___340 Int) (temp___341 Int) (temp___342 Int))
  (let ((temp___332 (temp_____aggregate_def_331 temp___333 temp___334
                    temp___335 temp___336 temp___337 temp___338 temp___339
                    temp___340 temp___341 temp___342)))
  (=>
  (and
  (and (dynamic_invariant2 temp___333 true true true true)
  (dynamic_invariant2 temp___334 true true true true))
  (and
  (and
  (and (dynamic_invariant2 temp___335 true true true true)
  (dynamic_invariant2 temp___336 true true true true))
  (and (dynamic_invariant2 temp___337 true true true true)
  (dynamic_invariant2 temp___338 true true true true)))
  (and
  (and (dynamic_invariant2 temp___339 true true true true)
  (dynamic_invariant2 temp___340 true true true true))
  (and (dynamic_invariant2 temp___341 true true true true)
  (dynamic_invariant2 temp___342 true true true true)))))
  (and
  (and (= (select temp___332 1) rliteral8)
  (= (select temp___332 2) rliteral5))
  (and
  (and
  (and (= (select temp___332 3) rliteral9)
  (= (select temp___332 4) rliteral4))
  (and (= (select temp___332 5) rliteral3)
  (= (select temp___332 6) rliteral1)))
  (and
  (and (= (select temp___332 7) rliteral7)
  (= (select temp___332 8) rliteral6))
  (and (= (select temp___332 9) rliteral)
  (= (select temp___332 10) rliteral2)))))))))

(declare-const rliteral10 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral10) 10))

(assert
;; defqtvc
 ;; File "my_test.adb", line 3, characters 0-0
  (not
  (forall ((t3__split_fields (Array Int value)))
  (let ((my_test__t1__assume (to_base1
                             (us_repqtmk2 (us_split_discrsqtmk rliteral10)
                             (us_split_fieldsqtmk2
                             (temp_____aggregate_def_318 5 1 3 0 9 8 2 7 4 6))))))
  (forall ((t1__split_fields us_t1))
  (=>
  (= (us_split_fieldsqtmk t1__split_fields) (us_split_fields1
                                            my_test__t1__assume))
  (=> (= t1__split_discrs (us_split_discrs1 my_test__t1__assume))
  (=> (dynamic_invariant
  (us_repqtmk t1__split_discrs (us_split_fieldsqtmk t1__split_fields)) true
  false true true)
  (let ((my_test__t2__assume (to_base2
                             (us_repqtmk3 (us_split_discrsqtmk rliteral10)
                             (us_split_fieldsqtmk3
                             (temp_____aggregate_def_331 4 8 6 9 0 1 7 2 5 3))))))
  (forall ((t2__split_fields us_t1))
  (=>
  (= (us_split_fieldsqtmk t2__split_fields) (us_split_fields1
                                            my_test__t2__assume))
  (=> (= t2__split_discrs (us_split_discrs1 my_test__t2__assume))
  (=> (dynamic_invariant
  (us_repqtmk t2__split_discrs (us_split_fieldsqtmk t2__split_fields)) true
  false true true)
  (=> (in_range1 10)
  (=> (default_initial_assumption
  (us_repqtmk1 t3__split_discrs (us_split_fieldsqtmk1 t3__split_fields))
  false)
  (=> (dynamic_invariant1
  (us_repqtmk1 t3__split_discrs (us_split_fieldsqtmk1 t3__split_fields))
  false false true true)
  (=> (forall ((o us_rep)) (empty__function_guard (empty o) o))
  (not
  (= (empty
     (us_repqtmk t1__split_discrs (us_split_fieldsqtmk t1__split_fields))) true)))))))))))))))))))
(check-sat)
