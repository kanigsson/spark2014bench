(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort t 0)

(declare-fun user_eq (t t) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dummy t)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content t)))))
(define-fun t__ref_t__content__projection ((a t__ref)) t (t__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__eq_null_record__s__x t)))))
(define-fun us_split_fields_rec__eq_null_record__s__x__projection ((a us_split_fields)) t 
  (rec__eq_null_record__s__x a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (user_eq
                           (rec__eq_null_record__s__x (us_split_fields1 a))
                           (rec__eq_null_record__s__x (us_split_fields1 b))) true)
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const eq_null_record__s__x__first__bit Int)

(declare-const eq_null_record__s__x__last__bit Int)

(declare-const eq_null_record__s__x__position Int)

;; eq_null_record__s__x__first__bit_axiom
  (assert (<= 0 eq_null_record__s__x__first__bit))

;; eq_null_record__s__x__last__bit_axiom
  (assert
  (< eq_null_record__s__x__first__bit eq_null_record__s__x__last__bit))

;; eq_null_record__s__x__position_axiom
  (assert (<= 0 eq_null_record__s__x__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((s__ref 0))
(((s__refqtmk (s__content us_rep)))))
(define-fun s__ref_s__content__projection ((a s__ref)) us_rep (s__content a))

(declare-const x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun oeq (t t) Bool)

(declare-fun oeq__function_guard (Bool t t) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a t) (b t))
  (! (and (forall ((a1 t) (b1 t)) (oeq__function_guard (oeq a1 b1) a1 b1))
     (= (user_eq a b) (oeq a b))) :pattern ((user_eq a b)) )))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x1 t) (y1 t))
  (! (not (= (oeq x1 y1) true)) :pattern ((oeq x1 y1)) )))

(assert
;; defqtvc
 ;; File "eq_null_record.ads", line 13, characters 0-0
  (not
  (forall ((eq_null_record__always_true__result Bool))
  (=> (= eq_null_record__always_true__result (distinct 1 0))
  (= eq_null_record__always_true__result true)))))
(check-sat)
(exit)
