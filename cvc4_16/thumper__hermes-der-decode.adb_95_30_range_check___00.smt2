;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const value (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort leading_number_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 34)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (leading_number_type leading_number_type) Bool)

(declare-const dummy leading_number_type)

(declare-datatypes ((leading_number_type__ref 0))
(((leading_number_type__refqtmk
  (leading_number_type__content leading_number_type)))))
(define-fun leading_number_type__ref_leading_number_type__content__projection ((a leading_number_type__ref)) leading_number_type 
  (leading_number_type__content a))

(declare-fun to_rep (leading_number_type) Int)

(declare-fun of_rep (Int) leading_number_type)

;; inversion_axiom
  (assert
  (forall ((x leading_number_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x leading_number_type)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 8) leading_number_type))))))
(declare-fun slide ((Array (_ BitVec 8) leading_number_type) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) leading_number_type))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) leading_number_type)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) leading_number_type)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 8) leading_number_type))
  (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b (Array (_ BitVec 8) leading_number_type)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_155 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_155)
                                    (bvule temp___idx_155 a__last))
                                    (= (to_rep (select a temp___idx_155)) 
                                    (to_rep
                                    (select b (bvadd (bvsub b__first a__first) temp___idx_155)))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) leading_number_type))
  (b (Array (_ BitVec 8) leading_number_type)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_155 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last))
  (= (to_rep (select a temp___idx_155)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_155)))))))))))

(declare-const leading_number_lookup_table (Array (_ BitVec 8) leading_number_type))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (octet octet) Bool)

(declare-const dummy1 octet)

(declare-datatypes ((octet__ref 0))
(((octet__refqtmk (octet__content octet)))))
(define-fun octet__ref_octet__content__projection ((a octet__ref)) octet 
  (octet__content a))

(define-fun dynamic_invariant ((temp___expr_195 (_ BitVec 8))
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool) (temp___do_typ_inv_194 Bool)) Bool true)

(define-fun dynamic_invariant1 ((temp___expr_216 Int)
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool)
  (temp___do_typ_inv_215 Bool)) Bool (=>
                                     (or (= temp___is_init_212 true)
                                     (<= 0 34)) (in_range1 temp___expr_216)))

(declare-sort status_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (status_type status_type) Bool)

(declare-const dummy2 status_type)

(declare-datatypes ((status_type__ref 0))
(((status_type__refqtmk (status_type__content status_type)))))
(define-fun status_type__ref_status_type__content__projection ((a status_type__ref)) status_type 
  (status_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_223 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)
  (temp___do_typ_inv_222 Bool)) Bool (=>
                                     (or (= temp___is_init_219 true)
                                     (<= 0 6)) (in_range2 temp___expr_223)))

(declare-sort leading_number_range_type 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x1F)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 31)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (leading_number_range_type
  leading_number_range_type) Bool)

(declare-const dummy3 leading_number_range_type)

(declare-datatypes ((leading_number_range_type__ref 0))
(((leading_number_range_type__refqtmk
  (leading_number_range_type__content leading_number_range_type)))))
(define-fun leading_number_range_type__ref_leading_number_range_type__content__projection ((a leading_number_range_type__ref)) leading_number_range_type 
  (leading_number_range_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_239 (_ BitVec 8))
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)
  (temp___do_typ_inv_238 Bool)) Bool (=>
                                     (or (= temp___is_init_235 true)
                                     (bvule #x00 #x1F)) (in_range3
                                     temp___expr_239)))

(declare-fun ada___ada___hermes__der__decode__split_leading_identifier__leading_number_lookup_table__aggregate_def (Int
  Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int
  Int Int Int Int Int Int Int Int Int Int Int
  Int) (Array (_ BitVec 8) leading_number_type))

;; leading_number_lookup_table__def_axiom
  (assert
  (= leading_number_lookup_table (ada___ada___hermes__der__decode__split_leading_identifier__leading_number_lookup_table__aggregate_def
                                 0 1 2 3 4 5 6 7 8 10 11 12 13 14 5 5 15 17
                                 19 20 21 23 24 25 26 27 28 30 31 32 33 34)))

;; def_axiom
  (assert
  (forall ((temp___157 Int) (temp___158 Int) (temp___159 Int)
  (temp___160 Int) (temp___161 Int) (temp___162 Int) (temp___163 Int)
  (temp___164 Int) (temp___165 Int) (temp___166 Int) (temp___167 Int)
  (temp___168 Int) (temp___169 Int) (temp___170 Int) (temp___171 Int)
  (temp___172 Int) (temp___173 Int) (temp___174 Int) (temp___175 Int)
  (temp___176 Int) (temp___177 Int) (temp___178 Int) (temp___179 Int)
  (temp___180 Int) (temp___181 Int) (temp___182 Int) (temp___183 Int)
  (temp___184 Int) (temp___185 Int) (temp___186 Int) (temp___187 Int)
  (temp___188 Int))
  (let ((temp___156 (ada___ada___hermes__der__decode__split_leading_identifier__leading_number_lookup_table__aggregate_def
                    temp___157 temp___158 temp___159 temp___160 temp___161
                    temp___162 temp___163 temp___164 temp___165 temp___166
                    temp___167 temp___168 temp___169 temp___170 temp___171
                    temp___172 temp___173 temp___174 temp___175 temp___176
                    temp___177 temp___178 temp___179 temp___180 temp___181
                    temp___182 temp___183 temp___184 temp___185 temp___186
                    temp___187 temp___188)))
  (=>
  (and
  (and (dynamic_invariant1 temp___157 true true true true)
  (dynamic_invariant1 temp___158 true true true true))
  (and
  (and
  (and
  (and
  (and (dynamic_invariant1 temp___159 true true true true)
  (dynamic_invariant1 temp___160 true true true true))
  (and (dynamic_invariant1 temp___161 true true true true)
  (dynamic_invariant1 temp___162 true true true true)))
  (and
  (and (dynamic_invariant1 temp___163 true true true true)
  (dynamic_invariant1 temp___164 true true true true))
  (and (dynamic_invariant1 temp___165 true true true true)
  (dynamic_invariant1 temp___166 true true true true))))
  (and
  (and
  (and (dynamic_invariant1 temp___167 true true true true)
  (dynamic_invariant1 temp___168 true true true true))
  (and (dynamic_invariant1 temp___169 true true true true)
  (dynamic_invariant1 temp___170 true true true true)))
  (and
  (and (dynamic_invariant1 temp___171 true true true true)
  (dynamic_invariant1 temp___172 true true true true)) (dynamic_invariant1
  temp___173 true true true true))))
  (and
  (and
  (and
  (and (dynamic_invariant1 temp___174 true true true true)
  (dynamic_invariant1 temp___175 true true true true))
  (and (dynamic_invariant1 temp___176 true true true true)
  (dynamic_invariant1 temp___177 true true true true)))
  (and
  (and (dynamic_invariant1 temp___178 true true true true)
  (dynamic_invariant1 temp___179 true true true true))
  (and (dynamic_invariant1 temp___180 true true true true)
  (dynamic_invariant1 temp___181 true true true true))))
  (and
  (and
  (and (dynamic_invariant1 temp___182 true true true true)
  (dynamic_invariant1 temp___183 true true true true))
  (and (dynamic_invariant1 temp___184 true true true true)
  (dynamic_invariant1 temp___185 true true true true)))
  (and
  (and (dynamic_invariant1 temp___186 true true true true)
  (dynamic_invariant1 temp___187 true true true true)) (dynamic_invariant1
  temp___188 true true true true))))))
  (and
  (and (= (to_rep (select temp___156 #x00)) temp___157)
  (= (to_rep (select temp___156 #x01)) temp___158))
  (and
  (and
  (and
  (and
  (and (= (to_rep (select temp___156 #x02)) temp___159)
  (= (to_rep (select temp___156 #x03)) temp___160))
  (and (= (to_rep (select temp___156 #x04)) temp___161)
  (= (to_rep (select temp___156 #x05)) temp___162)))
  (and
  (and (= (to_rep (select temp___156 #x06)) temp___163)
  (= (to_rep (select temp___156 #x07)) temp___164))
  (and (= (to_rep (select temp___156 #x08)) temp___165)
  (= (to_rep (select temp___156 #x09)) temp___166))))
  (and
  (and
  (and (= (to_rep (select temp___156 #x0A)) temp___167)
  (= (to_rep (select temp___156 #x0B)) temp___168))
  (and (= (to_rep (select temp___156 #x0C)) temp___169)
  (= (to_rep (select temp___156 #x0D)) temp___170)))
  (and
  (and (= (to_rep (select temp___156 #x0E)) temp___171)
  (= (to_rep (select temp___156 #x0F)) temp___172))
  (= (to_rep (select temp___156 #x10)) temp___173))))
  (and
  (and
  (and
  (and (= (to_rep (select temp___156 #x11)) temp___174)
  (= (to_rep (select temp___156 #x12)) temp___175))
  (and (= (to_rep (select temp___156 #x13)) temp___176)
  (= (to_rep (select temp___156 #x14)) temp___177)))
  (and
  (and (= (to_rep (select temp___156 #x15)) temp___178)
  (= (to_rep (select temp___156 #x16)) temp___179))
  (and (= (to_rep (select temp___156 #x17)) temp___180)
  (= (to_rep (select temp___156 #x18)) temp___181))))
  (and
  (and
  (and (= (to_rep (select temp___156 #x19)) temp___182)
  (= (to_rep (select temp___156 #x1A)) temp___183))
  (and (= (to_rep (select temp___156 #x1B)) temp___184)
  (= (to_rep (select temp___156 #x1C)) temp___185)))
  (and
  (and (= (to_rep (select temp___156 #x1D)) temp___186)
  (= (to_rep (select temp___156 #x1E)) temp___187))
  (= (to_rep (select temp___156 #x1F)) temp___188))))))))))

(assert
;; defqtvc
 ;; File "hermes-der-decode.adb", line 87, characters 0-0
  (not
  (forall ((tag Int) (status Int) (tag_value (_ BitVec 8)))
  (=>
  (= (ada___ada___hermes__der__decode__split_leading_identifier__leading_number_lookup_table__aggregate_def
     0 1 2 3 4 5 6 7 8 10 11 12 13 14 5 5 15 17 19 20 21 23 24 25 26 27 28 30
     31 32 33 34) leading_number_lookup_table)
  (=> (dynamic_invariant value true false true true)
  (=> (dynamic_invariant value true false true true)
  (=> (dynamic_invariant1 tag false false true true)
  (=> (dynamic_invariant2 status true false true true)
  (=> (dynamic_invariant3 tag_value false false true true) (in_range3
  (bvand value #x1F)))))))))))
(check-sat)
