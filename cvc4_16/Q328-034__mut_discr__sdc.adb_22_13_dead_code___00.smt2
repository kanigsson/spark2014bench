;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((file_type__ref 0))
(((file_type__refqtmk (file_type__content us_rep)))))
(define-fun file_type__ref_file_type__content__projection ((a file_type__ref)) us_rep 
  (file_type__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort token_kind 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (token_kind token_kind) Bool)

(declare-const dummy5 token_kind)

(declare-datatypes ((token_kind__ref 0))
(((token_kind__refqtmk (token_kind__content token_kind)))))
(define-fun token_kind__ref_token_kind__content__projection ((a token_kind__ref)) token_kind 
  (token_kind__content a))

(declare-fun to_rep2 (token_kind) Int)

(declare-fun of_rep2 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__types__value__e integer)))))
(define-fun us_split_fields_rec__types__value__e__projection ((a us_split_fields)) integer 
  (rec__types__value__e a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep1
                            (rec__types__value__e (us_split_fields1 a))) 
                    (to_rep1 (rec__types__value__e (us_split_fields1 b))))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const types__value__e__first__bit Int)

(declare-const types__value__e__last__bit Int)

(declare-const types__value__e__position Int)

;; types__value__e__first__bit_axiom
  (assert (<= 0 types__value__e__first__bit))

;; types__value__e__last__bit_axiom
  (assert (< types__value__e__first__bit types__value__e__last__bit))

;; types__value__e__position_axiom
  (assert (<= 0 types__value__e__position))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((value__ref 0))
(((value__refqtmk (value__content us_rep1)))))
(define-fun value__ref_value__content__projection ((a value__ref)) us_rep1 
  (value__content a))

(declare-sort operation 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (operation operation) Bool)

(declare-const dummy7 operation)

(declare-datatypes ((operation__ref 0))
(((operation__refqtmk (operation__content operation)))))
(define-fun operation__ref_operation__content__projection ((a operation__ref)) operation 
  (operation__content a))

(declare-fun to_rep3 (operation) Int)

(declare-fun of_rep3 (Int) operation)

;; inversion_axiom
  (assert
  (forall ((x operation))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x operation)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort instruction 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (instruction instruction) Bool)

(declare-const dummy8 instruction)

(declare-datatypes ((instruction__ref 0))
(((instruction__refqtmk (instruction__content instruction)))))
(define-fun instruction__ref_instruction__content__projection ((a instruction__ref)) instruction 
  (instruction__content a))

(declare-fun to_rep4 (instruction) Int)

(declare-fun of_rep4 (Int) instruction)

;; inversion_axiom
  (assert
  (forall ((x instruction))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x instruction)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__tokens__token__kind token_kind)))))
(define-fun us_split_discrs_rec__tokens__token__kind__projection ((a us_split_discrs)) token_kind 
  (rec__tokens__token__kind a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__tokens__token__val us_rep1)(rec__tokens__token__op operation)(rec__tokens__token__instr instruction)))))
(define-fun us_split_fields_rec__tokens__token__val__projection ((a us_split_fields2)) us_rep1 
  (rec__tokens__token__val a))

(define-fun us_split_fields_rec__tokens__token__op__projection ((a us_split_fields2)) operation 
  (rec__tokens__token__op a))

(define-fun us_split_fields_rec__tokens__token__instr__projection ((a us_split_fields2)) instruction 
  (rec__tokens__token__instr a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun tokens__token__val__pred ((a us_rep2)) Bool (= (to_rep2
                                                           (rec__tokens__token__kind
                                                           (us_split_discrs1
                                                           a))) 0))

(define-fun tokens__token__op__pred ((a us_rep2)) Bool (= (to_rep2
                                                          (rec__tokens__token__kind
                                                          (us_split_discrs1
                                                          a))) 1))

(define-fun tokens__token__instr__pred ((a us_rep2)) Bool (= (to_rep2
                                                             (rec__tokens__token__kind
                                                             (us_split_discrs1
                                                             a))) 2))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__tokens__token__kind (us_split_discrs1 a))) 
                         (to_rep2
                         (rec__tokens__token__kind (us_split_discrs1 b))))
                         (and
                         (and
                         (=> (tokens__token__val__pred a)
                         (= (bool_eq3
                            (rec__tokens__token__val (us_split_fields3 a))
                            (rec__tokens__token__val (us_split_fields3 b))) true))
                         (=> (tokens__token__op__pred a)
                         (= (to_rep3
                            (rec__tokens__token__op (us_split_fields3 a))) 
                         (to_rep3
                         (rec__tokens__token__op (us_split_fields3 b))))))
                         (=> (tokens__token__instr__pred a)
                         (= (to_rep4
                            (rec__tokens__token__instr (us_split_fields3 a))) 
                         (to_rep4
                         (rec__tokens__token__instr (us_split_fields3 b)))))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const tokens__token__kind__first__bit Int)

(declare-const tokens__token__kind__last__bit Int)

(declare-const tokens__token__kind__position Int)

;; tokens__token__kind__first__bit_axiom
  (assert (<= 0 tokens__token__kind__first__bit))

;; tokens__token__kind__last__bit_axiom
  (assert (< tokens__token__kind__first__bit tokens__token__kind__last__bit))

;; tokens__token__kind__position_axiom
  (assert (<= 0 tokens__token__kind__position))

(declare-const tokens__token__val__first__bit Int)

(declare-const tokens__token__val__last__bit Int)

(declare-const tokens__token__val__position Int)

;; tokens__token__val__first__bit_axiom
  (assert (<= 0 tokens__token__val__first__bit))

;; tokens__token__val__last__bit_axiom
  (assert (< tokens__token__val__first__bit tokens__token__val__last__bit))

;; tokens__token__val__position_axiom
  (assert (<= 0 tokens__token__val__position))

(declare-const tokens__token__op__first__bit Int)

(declare-const tokens__token__op__last__bit Int)

(declare-const tokens__token__op__position Int)

;; tokens__token__op__first__bit_axiom
  (assert (<= 0 tokens__token__op__first__bit))

;; tokens__token__op__last__bit_axiom
  (assert (< tokens__token__op__first__bit tokens__token__op__last__bit))

;; tokens__token__op__position_axiom
  (assert (<= 0 tokens__token__op__position))

(declare-const tokens__token__instr__first__bit Int)

(declare-const tokens__token__instr__last__bit Int)

(declare-const tokens__token__instr__position Int)

;; tokens__token__instr__first__bit_axiom
  (assert (<= 0 tokens__token__instr__first__bit))

;; tokens__token__instr__last__bit_axiom
  (assert
  (< tokens__token__instr__first__bit tokens__token__instr__last__bit))

;; tokens__token__instr__position_axiom
  (assert (<= 0 tokens__token__instr__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((token__ref 0))
(((token__refqtmk (token__content us_rep2)))))
(define-fun token__ref_token__content__projection ((a token__ref)) us_rep2 
  (token__content a))

(declare-const t__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_235 us_rep2)
  (temp___skip_top_level_236 Bool)) Bool (= (to_rep2
                                            (rec__tokens__token__kind
                                            (us_split_discrs1
                                            temp___expr_235))) 0))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (natural natural) Bool)

(declare-const dummy10 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range7
                                    temp___expr_39)))

(declare-fun argument_count (tuple0) Int)

(declare-fun argument_count__function_guard (Int tuple0) Bool)

;; argument_count__post_axiom
  (assert
  (forall ((us_void_param tuple0)) (! (dynamic_invariant
  (argument_count us_void_param) true false true
  true) :pattern ((argument_count us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant2 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-fun argument (Int) us_t)

(declare-fun argument__function_guard (us_t Int) Bool)

;; argument__post_axiom
  (assert
  (forall ((number Int))
  (! (=>
     (and (dynamic_invariant1 number true true true true)
     (<= number (argument_count Tuple0))) (dynamic_invariant2
     (argument number) true false true true)) :pattern ((argument number)) )))

(declare-fun is_open (us_rep) Bool)

(declare-fun is_open__function_guard (Bool us_rep) Bool)

(declare-fun mode (us_rep) Int)

(declare-fun mode__function_guard (Int us_rep) Bool)

(declare-fun line_length (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(define-fun default_initial_assumption1 ((temp___expr_197 us_rep)
  (temp___skip_top_level_198 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_198 true))
                                         (not
                                         (= (is_open temp___expr_197) true))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun full (Int) Bool)

(declare-fun full__function_guard (Bool Int) Bool)

(declare-fun size (Int) Int)

(declare-fun size__function_guard (Int Int) Bool)

(declare-sort tlastS 0)

(declare-fun tlastSqtint (tlastS) Int)

;; tlastS'axiom
  (assert
  (forall ((i tlastS)) (and (<= 0 (tlastSqtint i)) (<= (tlastSqtint i) 200))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 200)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (tlastS tlastS) Bool)

(declare-const dummy11 tlastS)

(declare-datatypes ((tlastS__ref 0))
(((tlastS__refqtmk (tlastS__content tlastS)))))
(define-fun tlastS__ref_tlastS__content__projection ((a tlastS__ref)) tlastS 
  (tlastS__content a))

(define-fun dynamic_invariant3 ((temp___expr_260 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)
  (temp___do_typ_inv_259 Bool)) Bool (=>
                                     (or (= temp___is_init_256 true)
                                     (<= 0 200)) (in_range8 temp___expr_260)))

(declare-fun temp___String_Literal_270 (tuple0) (Array Int character))

;; temp___String_Literal_270__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 2)) 101))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 3)) 108)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 4)) 99))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 5)) 111))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 6)) 109)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 8)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 9)) 116)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 10)) 111))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 11)) 32))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 12)) 115)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 13)) 100))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 14)) 99))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 15)) 46)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 16)) 32))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 17)) 71))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 18)) 111)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 19)) 32))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 20)) 97)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 21)) 104)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 22)) 101))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 23)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 24)) 100)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 25)) 32)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 26)) 116)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 27)) 121))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 28)) 112))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 29)) 101)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 30)) 32))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 31)) 121)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 32)) 111)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 33)) 117))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 34)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 35)) 32)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 36)) 99))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 37)) 111)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 38)) 109))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 39)) 109))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 40)) 97)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 41)) 110))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 42)) 100)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 43)) 115)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 44)) 32))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 45)) 46))
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 46)) 46)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 47)) 46))))))) :pattern (
  (temp___String_Literal_270 us_void_param)) )))

(declare-fun temp___String_Literal_271 (tuple0) (Array Int character))

;; temp___String_Literal_271__def_axiom
  (assert true)

(declare-fun temp___String_Literal_272 (tuple0) (Array Int character))

;; temp___String_Literal_272__def_axiom
  (assert true)

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

;; size__post_axiom
  (assert
  (forall ((stack__last Int))
  (! (=> (dynamic_invariant3 stack__last true true true true)
     (let ((result (size stack__last)))
     (=> (size__function_guard result stack__last) (dynamic_invariant4 result
     true false true true)))) :pattern ((size stack__last)) )))

;; size__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (=> (dynamic_invariant3 stack__last true true true true)
     (= (size stack__last) stack__last)) :pattern ((size stack__last)) )))

;; full__post_axiom
  (assert true)

;; full__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (= (= (full stack__last) true) (<= 200 stack__last)) :pattern ((full
                                                                    stack__last)) )))

(define-fun dynamic_invariant6 ((temp___expr_204 Int)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)
  (temp___do_typ_inv_203 Bool)) Bool (=>
                                     (or (= temp___is_init_200 true)
                                     (<= 0 2)) (in_range4 temp___expr_204)))

(define-fun dynamic_invariant7 ((temp___expr_226 Int)
  (temp___is_init_222 Bool) (temp___skip_constant_223 Bool)
  (temp___do_toplevel_224 Bool)
  (temp___do_typ_inv_225 Bool)) Bool (=>
                                     (or (= temp___is_init_222 true)
                                     (<= 0 2)) (in_range6 temp___expr_226)))

(define-fun dynamic_invariant8 ((temp___expr_219 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)
  (temp___do_typ_inv_218 Bool)) Bool (=>
                                     (or (= temp___is_init_215 true)
                                     (<= 0 3)) (in_range5 temp___expr_219)))

(declare-sort file_mode 0)

(define-fun pos_to_rep ((x Int)) Int (ite (= x 2) 3 (ite (= x 1) 2 0)))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (file_mode file_mode) Bool)

(declare-const dummy12 file_mode)

(declare-datatypes ((file_mode__ref 0))
(((file_mode__refqtmk (file_mode__content file_mode)))))
(define-fun file_mode__ref_file_mode__content__projection ((a file_mode__ref)) file_mode 
  (file_mode__content a))

(define-fun dynamic_invariant9 ((temp___expr_248 Int)
  (temp___is_init_244 Bool) (temp___skip_constant_245 Bool)
  (temp___do_toplevel_246 Bool)
  (temp___do_typ_inv_247 Bool)) Bool (=>
                                     (or (= temp___is_init_244 true)
                                     (<= 0 2)) (in_range9 temp___expr_248)))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (count count) Bool)

(declare-const dummy13 count)

(declare-datatypes ((count__ref 0))
(((count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant10 ((temp___expr_168 Int)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)
  (temp___do_typ_inv_167 Bool)) Bool (=>
                                     (or (= temp___is_init_164 true)
                                     (<= 0 2147483647)) (in_range10
                                     temp___expr_168)))

;; mode__post_axiom
  (assert
  (forall ((file us_rep))
  (! (=> (= (is_open file) true) (dynamic_invariant9 (mode file) true false
     true true)) :pattern ((mode file)) )))

;; is_open__post_axiom
  (assert true)

;; line_length__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private))
  (! (=> (and (= (is_open file) true) (not (= (mode file) 0)))
     (dynamic_invariant10
     (line_length file ada___ada__text_io__standard_in
     ada___ada__text_io__file_system ada___ada__text_io__standard_out
     ada___ada__text_io__standard_err ada___ada__text_io__current_in
     ada___ada__text_io__current_out ada___ada__text_io__current_err) true
     false true true)) :pattern ((line_length file
                                 ada___ada__text_io__standard_in
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out
                                 ada___ada__text_io__current_err)) ))))

;; page_length__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private))
  (! (=> (and (= (is_open file) true) (not (= (mode file) 0)))
     (dynamic_invariant10
     (page_length file ada___ada__text_io__standard_in
     ada___ada__text_io__file_system ada___ada__text_io__standard_out
     ada___ada__text_io__standard_err ada___ada__text_io__current_in
     ada___ada__text_io__current_out ada___ada__text_io__current_err) true
     false true true)) :pattern ((page_length file
                                 ada___ada__text_io__standard_in
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out
                                 ada___ada__text_io__current_err)) ))))

(assert
;; defqtvc
 ;; File "sdc.ads", line 24, characters 0-0
  (not
  (forall ((file us_rep) (t__split_fields us_split_fields2)
  (t__split_discrs token_kind) (last2 Int))
  (=> (dynamic_invariant3 last2 true false true true)
  (=> (default_initial_assumption1 file false)
  (=> (= t__attr__constrained false)
  (=> (default_initial_assumption
  (us_repqtmk1 (us_split_discrsqtmk t__split_discrs) t__split_fields) false)
  (not
  (let ((o (argument_count Tuple0)))
  (and (dynamic_invariant o true false true true)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o 1) true false))
  (or (not (= spark__branch true))
  (and (dynamic_invariant2 (argument 1) true false true true)
  (exists ((file1 us_rep)) (and (= (is_open file1) true) (= (mode file1) 0)))))))))))))))))
(check-sat)
