;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort os_mbx_index_t 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x02)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (os_mbx_index_t os_mbx_index_t) Bool)

(declare-const dummy os_mbx_index_t)

(declare-datatypes ((os_mbx_index_t__ref 0))
(((os_mbx_index_t__refqtmk (os_mbx_index_t__content os_mbx_index_t)))))
(define-fun os_mbx_index_t__ref_os_mbx_index_t__content__projection ((a os_mbx_index_t__ref)) os_mbx_index_t 
  (os_mbx_index_t__content a))

(declare-fun to_rep (os_mbx_index_t) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) os_mbx_index_t)

;; inversion_axiom
  (assert
  (forall ((x os_mbx_index_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x os_mbx_index_t)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x03))) (=> (in_range1 y) (= (to_rep (of_rep x)) y))) :pattern (
  (to_rep (of_rep x))) )))

(define-fun to_int2 ((x os_mbx_index_t)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x os_mbx_index_t)) (! (in_range_int
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort os_mbx_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x03)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (os_mbx_count_t os_mbx_count_t) Bool)

(declare-const dummy1 os_mbx_count_t)

(declare-datatypes ((os_mbx_count_t__ref 0))
(((os_mbx_count_t__refqtmk (os_mbx_count_t__content os_mbx_count_t)))))
(define-fun os_mbx_count_t__ref_os_mbx_count_t__content__projection ((a os_mbx_count_t__ref)) os_mbx_count_t 
  (os_mbx_count_t__content a))

(declare-fun to_rep1 (os_mbx_count_t) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) os_mbx_count_t)

;; inversion_axiom
  (assert
  (forall ((x os_mbx_count_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x os_mbx_count_t)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun to_int3 ((x os_mbx_count_t)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x os_mbx_count_t)) (! (in_range_int1
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort os_task_id_t 0)

(declare-fun os_task_id_tqtint (os_task_id_t) Int)

;; os_task_id_t'axiom
  (assert
  (forall ((i os_task_id_t))
  (and (<= (- 1) (os_task_id_tqtint i)) (<= (os_task_id_tqtint i) 4))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (os_task_id_t os_task_id_t) Bool)

(declare-const dummy2 os_task_id_t)

(declare-datatypes ((os_task_id_t__ref 0))
(((os_task_id_t__refqtmk (os_task_id_t__content os_task_id_t)))))
(define-fun os_task_id_t__ref_os_task_id_t__content__projection ((a os_task_id_t__ref)) os_task_id_t 
  (os_task_id_t__content a))

(define-fun to_rep2 ((x os_task_id_t)) Int (os_task_id_tqtint x))

(declare-fun of_rep2 (Int) os_task_id_t)

;; inversion_axiom
  (assert
  (forall ((x os_task_id_t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x os_task_id_t)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort os_mbx_msg_t 0)

(declare-fun os_mbx_msg_tqtint (os_mbx_msg_t) Int)

;; os_mbx_msg_t'axiom
  (assert
  (forall ((i os_mbx_msg_t))
  (and (<= 0 (os_mbx_msg_tqtint i)) (<= (os_mbx_msg_tqtint i) 4294967295))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 4294967295)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (os_mbx_msg_t os_mbx_msg_t) Bool)

(declare-const dummy3 os_mbx_msg_t)

(declare-datatypes ((os_mbx_msg_t__ref 0))
(((os_mbx_msg_t__refqtmk (os_mbx_msg_t__content os_mbx_msg_t)))))
(define-fun os_mbx_msg_t__ref_os_mbx_msg_t__content__projection ((a os_mbx_msg_t__ref)) os_mbx_msg_t 
  (os_mbx_msg_t__content a))

(define-fun to_rep3 ((x os_mbx_msg_t)) Int (os_mbx_msg_tqtint x))

(declare-fun of_rep3 (Int) os_mbx_msg_t)

;; inversion_axiom
  (assert
  (forall ((x os_mbx_msg_t))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x os_mbx_msg_t)) (! (in_range4
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__test__os_mbx_entry_t__sender_id os_task_id_t)(rec__test__os_mbx_entry_t__msg os_mbx_msg_t)))))
(define-fun us_split_fields_rec__test__os_mbx_entry_t__sender_id__projection ((a us_split_fields)) os_task_id_t 
  (rec__test__os_mbx_entry_t__sender_id a))

(define-fun us_split_fields_rec__test__os_mbx_entry_t__msg__projection ((a us_split_fields)) os_mbx_msg_t 
  (rec__test__os_mbx_entry_t__msg a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__test__os_mbx_entry_t__sender_id
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__test__os_mbx_entry_t__sender_id
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__test__os_mbx_entry_t__msg
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__test__os_mbx_entry_t__msg
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test__os_mbx_entry_t__sender_id__first__bit Int)

(declare-const test__os_mbx_entry_t__sender_id__last__bit Int)

(declare-const test__os_mbx_entry_t__sender_id__position Int)

;; test__os_mbx_entry_t__sender_id__first__bit_axiom
  (assert (<= 0 test__os_mbx_entry_t__sender_id__first__bit))

;; test__os_mbx_entry_t__sender_id__last__bit_axiom
  (assert
  (< test__os_mbx_entry_t__sender_id__first__bit test__os_mbx_entry_t__sender_id__last__bit))

;; test__os_mbx_entry_t__sender_id__position_axiom
  (assert (<= 0 test__os_mbx_entry_t__sender_id__position))

(declare-const test__os_mbx_entry_t__msg__first__bit Int)

(declare-const test__os_mbx_entry_t__msg__last__bit Int)

(declare-const test__os_mbx_entry_t__msg__position Int)

;; test__os_mbx_entry_t__msg__first__bit_axiom
  (assert (<= 0 test__os_mbx_entry_t__msg__first__bit))

;; test__os_mbx_entry_t__msg__last__bit_axiom
  (assert
  (< test__os_mbx_entry_t__msg__first__bit test__os_mbx_entry_t__msg__last__bit))

;; test__os_mbx_entry_t__msg__position_axiom
  (assert (<= 0 test__os_mbx_entry_t__msg__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((os_mbx_entry_t__ref 0))
(((os_mbx_entry_t__refqtmk (os_mbx_entry_t__content us_rep)))))
(define-fun os_mbx_entry_t__ref_os_mbx_entry_t__content__projection ((a os_mbx_entry_t__ref)) us_rep 
  (os_mbx_entry_t__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_154 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_154)
                                    (bvule temp___idx_154 a__last))
                                    (= (bool_eq (select a temp___idx_154)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy5 (Array (_ BitVec 8) us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq5 ((Array (_ BitVec 8) us_rep)
  (Array (_ BitVec 8) us_rep)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__test__os_mbx_t__head os_mbx_index_t)(rec__test__os_mbx_t__count os_mbx_count_t)(rec__test__os_mbx_t__mbx_array (Array (_ BitVec 8) us_rep))))))
(define-fun us_split_fields_rec__test__os_mbx_t__head__projection ((a us_split_fields2)) os_mbx_index_t 
  (rec__test__os_mbx_t__head a))

(define-fun us_split_fields_rec__test__os_mbx_t__count__projection ((a us_split_fields2)) os_mbx_count_t 
  (rec__test__os_mbx_t__count a))

(define-fun us_split_fields_rec__test__os_mbx_t__mbx_array__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep) 
  (rec__test__os_mbx_t__mbx_array a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__test__os_mbx_t__head (us_split_fields3 a))) 
                         (to_rep
                         (rec__test__os_mbx_t__head (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__test__os_mbx_t__count (us_split_fields3 a))) 
                         (to_rep1
                         (rec__test__os_mbx_t__count (us_split_fields3 b)))))
                         (= (bool_eq1
                            (rec__test__os_mbx_t__mbx_array
                            (us_split_fields3 a)) #x00 #x02
                            (rec__test__os_mbx_t__mbx_array
                            (us_split_fields3 b)) #x00 #x02) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const test__os_mbx_t__head__first__bit Int)

(declare-const test__os_mbx_t__head__last__bit Int)

(declare-const test__os_mbx_t__head__position Int)

;; test__os_mbx_t__head__first__bit_axiom
  (assert (<= 0 test__os_mbx_t__head__first__bit))

;; test__os_mbx_t__head__last__bit_axiom
  (assert
  (< test__os_mbx_t__head__first__bit test__os_mbx_t__head__last__bit))

;; test__os_mbx_t__head__position_axiom
  (assert (<= 0 test__os_mbx_t__head__position))

(declare-const test__os_mbx_t__count__first__bit Int)

(declare-const test__os_mbx_t__count__last__bit Int)

(declare-const test__os_mbx_t__count__position Int)

;; test__os_mbx_t__count__first__bit_axiom
  (assert (<= 0 test__os_mbx_t__count__first__bit))

;; test__os_mbx_t__count__last__bit_axiom
  (assert
  (< test__os_mbx_t__count__first__bit test__os_mbx_t__count__last__bit))

;; test__os_mbx_t__count__position_axiom
  (assert (<= 0 test__os_mbx_t__count__position))

(declare-const test__os_mbx_t__mbx_array__first__bit Int)

(declare-const test__os_mbx_t__mbx_array__last__bit Int)

(declare-const test__os_mbx_t__mbx_array__position Int)

;; test__os_mbx_t__mbx_array__first__bit_axiom
  (assert (<= 0 test__os_mbx_t__mbx_array__first__bit))

;; test__os_mbx_t__mbx_array__last__bit_axiom
  (assert
  (< test__os_mbx_t__mbx_array__first__bit test__os_mbx_t__mbx_array__last__bit))

;; test__os_mbx_t__mbx_array__position_axiom
  (assert (<= 0 test__os_mbx_t__mbx_array__position))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((os_mbx_t__ref 0))
(((os_mbx_t__refqtmk (os_mbx_t__content us_rep1)))))
(define-fun os_mbx_t__ref_os_mbx_t__content__projection ((a os_mbx_t__ref)) us_rep1 
  (os_mbx_t__content a))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq2 (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq2 (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun os_mbx_get_mbx_count (Int (Array Int us_rep1)) (_ BitVec 8))

(declare-fun os_mbx_get_mbx_count__function_guard ((_ BitVec 8) Int
  (Array Int us_rep1)) Bool)

(declare-sort os_task_id_param_t 0)

(declare-fun os_task_id_param_tqtint (os_task_id_param_t) Int)

;; os_task_id_param_t'axiom
  (assert
  (forall ((i os_task_id_param_t))
  (and (<= 0 (os_task_id_param_tqtint i)) (<= (os_task_id_param_tqtint i) 4))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (os_task_id_param_t os_task_id_param_t) Bool)

(declare-const dummy7 os_task_id_param_t)

(declare-datatypes ((os_task_id_param_t__ref 0))
(((os_task_id_param_t__refqtmk
  (os_task_id_param_t__content os_task_id_param_t)))))
(define-fun os_task_id_param_t__ref_os_task_id_param_t__content__projection ((a os_task_id_param_t__ref)) os_task_id_param_t 
  (os_task_id_param_t__content a))

(define-fun dynamic_invariant ((temp___expr_232 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)
  (temp___do_typ_inv_231 Bool)) Bool (=>
                                     (or (= temp___is_init_228 true)
                                     (<= 0 4)) (in_range5 temp___expr_232)))

(define-fun dynamic_invariant1 ((temp___expr_297 (_ BitVec 8))
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool)
  (temp___do_typ_inv_296 Bool)) Bool (=>
                                     (or (= temp___is_init_293 true)
                                     (bvule #x00 #x03)) (in_range2
                                     temp___expr_297)))

;; os_mbx_get_mbx_count__post_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (=> (dynamic_invariant task_id true true true true)
     (let ((result (os_mbx_get_mbx_count task_id test__os_task_mbx_rw)))
     (=> (os_mbx_get_mbx_count__function_guard result task_id
     test__os_task_mbx_rw) (dynamic_invariant1 result true false true true)))) :pattern (
  (os_mbx_get_mbx_count task_id test__os_task_mbx_rw)) ))))

;; os_mbx_get_mbx_count__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (=> (dynamic_invariant task_id true true true true)
     (= (os_mbx_get_mbx_count task_id test__os_task_mbx_rw) (to_rep1
                                                            (rec__test__os_mbx_t__count
                                                            (us_split_fields3
                                                            (select test__os_task_mbx_rw task_id)))))) :pattern (
  (os_mbx_get_mbx_count task_id test__os_task_mbx_rw)) ))))

(declare-fun os_mbx_is_empty (Int (Array Int us_rep1)) Bool)

(declare-fun os_mbx_is_empty__function_guard (Bool Int
  (Array Int us_rep1)) Bool)

;; os_mbx_is_empty__post_axiom
  (assert true)

;; os_mbx_is_empty__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (= (= (os_mbx_is_empty task_id test__os_task_mbx_rw) true)
     (= (to_rep1
        (rec__test__os_mbx_t__count
        (us_split_fields3 (select test__os_task_mbx_rw task_id)))) #x00)) :pattern (
  (os_mbx_is_empty task_id test__os_task_mbx_rw)) ))))

(declare-fun os_ghost_mbx_are_well_formed ((Array Int us_rep1)) Bool)

(declare-fun os_ghost_mbx_are_well_formed__function_guard (Bool
  (Array Int us_rep1)) Bool)

(declare-fun os_mbx_get_mbx_head (Int (Array Int us_rep1)) (_ BitVec 8))

(declare-fun os_mbx_get_mbx_head__function_guard ((_ BitVec 8) Int
  (Array Int us_rep1)) Bool)

(declare-fun oadd ((_ BitVec 8) (_ BitVec 8)) (_ BitVec 8))

(declare-fun oadd__function_guard ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; temp___result_168'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_count__function_guard
  (os_mbx_get_mbx_count task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw)))

;; temp___result_163'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_head__function_guard
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw)))

;; temp___result_163'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_head__function_guard
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw)))

;; temp___result_164'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1))
  (index (_ BitVec 8))) (oadd__function_guard
  (oadd (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) index)
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) index)))

;; temp___result_166'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_head__function_guard
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw)))

;; temp___result_166'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_head__function_guard
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw)))

;; temp___result_167'def
  (assert
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1))
  (index (_ BitVec 8))) (oadd__function_guard
  (oadd (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) index)
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) index)))

(define-fun os_ghost_task_mbx_are_well_formed ((task_id Int)
  (test__os_task_mbx_rw (Array Int us_rep1))) Bool (ite (forall
                                                        ((index (_ BitVec 8)))
                                                        (=>
                                                        (and
                                                        (bvule #x00 index)
                                                        (bvule index #x02))
                                                        (ite (bvuge index 
                                                        (os_mbx_get_mbx_count
                                                        task_id
                                                        test__os_task_mbx_rw))
                                                        (= (to_rep2
                                                           (rec__test__os_mbx_entry_t__sender_id
                                                           (us_split_fields1
                                                           (let ((temp___162 
                                                           (rec__test__os_mbx_t__mbx_array
                                                           (us_split_fields3
                                                           (select test__os_task_mbx_rw task_id)))))
                                                           (select temp___162 
                                                           (oadd
                                                           (os_mbx_get_mbx_head
                                                           task_id
                                                           test__os_task_mbx_rw)
                                                           index)))))) (- 1))
                                                        (in_range5
                                                        (to_rep2
                                                        (rec__test__os_mbx_entry_t__sender_id
                                                        (us_split_fields1
                                                        (let ((temp___165 
                                                        (rec__test__os_mbx_t__mbx_array
                                                        (us_split_fields3
                                                        (select test__os_task_mbx_rw task_id)))))
                                                        (select temp___165 
                                                        (oadd
                                                        (os_mbx_get_mbx_head
                                                        task_id
                                                        test__os_task_mbx_rw)
                                                        index))))))))))
                                                   true false))

(declare-fun os_ghost_task_mbx_are_well_formed__function_guard (Bool Int
  (Array Int us_rep1)) Bool)

;; os_ghost_mbx_are_well_formed__post_axiom
  (assert true)

;; os_ghost_mbx_are_well_formed__def_axiom
  (assert
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (= (= (os_ghost_mbx_are_well_formed test__os_task_mbx_rw) true)
     (forall ((task_id Int))
     (=> (and (<= 0 task_id) (<= task_id 4))
     (= (os_ghost_task_mbx_are_well_formed task_id test__os_task_mbx_rw) true)))) :pattern (
  (os_ghost_mbx_are_well_formed test__os_task_mbx_rw)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int4 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort os_mbx_mask_t 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 32))

(declare-fun user_eq8 (os_mbx_mask_t os_mbx_mask_t) Bool)

(declare-const dummy8 os_mbx_mask_t)

(declare-datatypes ((os_mbx_mask_t__ref 0))
(((os_mbx_mask_t__refqtmk (os_mbx_mask_t__content os_mbx_mask_t)))))
(define-fun os_mbx_mask_t__ref_os_mbx_mask_t__content__projection ((a os_mbx_mask_t__ref)) os_mbx_mask_t 
  (os_mbx_mask_t__content a))

(declare-fun to_rep4 (os_mbx_mask_t) (_ BitVec 32))

(declare-fun of_rep4 ((_ BitVec 32)) os_mbx_mask_t)

;; inversion_axiom
  (assert
  (forall ((x os_mbx_mask_t))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int5 ((x os_mbx_mask_t)) Int (bv2nat (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x os_mbx_mask_t)) (! (uint_in_range1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__test__os_task_rw_t__next os_task_id_t)(rec__test__os_task_rw_t__prev os_task_id_t)(rec__test__os_task_rw_t__mbx_waiting_mask os_mbx_mask_t)))))
(define-fun us_split_fields_rec__test__os_task_rw_t__next__projection ((a us_split_fields4)) os_task_id_t 
  (rec__test__os_task_rw_t__next a))

(define-fun us_split_fields_rec__test__os_task_rw_t__prev__projection ((a us_split_fields4)) os_task_id_t 
  (rec__test__os_task_rw_t__prev a))

(define-fun us_split_fields_rec__test__os_task_rw_t__mbx_waiting_mask__projection ((a us_split_fields4)) os_mbx_mask_t 
  (rec__test__os_task_rw_t__mbx_waiting_mask a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__test__os_task_rw_t__next
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__test__os_task_rw_t__next
                                                   (us_split_fields5 b))))
                         (= (to_rep2
                            (rec__test__os_task_rw_t__prev
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__test__os_task_rw_t__prev
                                                   (us_split_fields5 b)))))
                         (= (to_rep4
                            (rec__test__os_task_rw_t__mbx_waiting_mask
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__test__os_task_rw_t__mbx_waiting_mask
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const test__os_task_rw_t__next__first__bit Int)

(declare-const test__os_task_rw_t__next__last__bit Int)

(declare-const test__os_task_rw_t__next__position Int)

;; test__os_task_rw_t__next__first__bit_axiom
  (assert (<= 0 test__os_task_rw_t__next__first__bit))

;; test__os_task_rw_t__next__last__bit_axiom
  (assert
  (< test__os_task_rw_t__next__first__bit test__os_task_rw_t__next__last__bit))

;; test__os_task_rw_t__next__position_axiom
  (assert (<= 0 test__os_task_rw_t__next__position))

(declare-const test__os_task_rw_t__prev__first__bit Int)

(declare-const test__os_task_rw_t__prev__last__bit Int)

(declare-const test__os_task_rw_t__prev__position Int)

;; test__os_task_rw_t__prev__first__bit_axiom
  (assert (<= 0 test__os_task_rw_t__prev__first__bit))

;; test__os_task_rw_t__prev__last__bit_axiom
  (assert
  (< test__os_task_rw_t__prev__first__bit test__os_task_rw_t__prev__last__bit))

;; test__os_task_rw_t__prev__position_axiom
  (assert (<= 0 test__os_task_rw_t__prev__position))

(declare-const test__os_task_rw_t__mbx_waiting_mask__first__bit Int)

(declare-const test__os_task_rw_t__mbx_waiting_mask__last__bit Int)

(declare-const test__os_task_rw_t__mbx_waiting_mask__position Int)

;; test__os_task_rw_t__mbx_waiting_mask__first__bit_axiom
  (assert (<= 0 test__os_task_rw_t__mbx_waiting_mask__first__bit))

;; test__os_task_rw_t__mbx_waiting_mask__last__bit_axiom
  (assert
  (< test__os_task_rw_t__mbx_waiting_mask__first__bit test__os_task_rw_t__mbx_waiting_mask__last__bit))

;; test__os_task_rw_t__mbx_waiting_mask__position_axiom
  (assert (<= 0 test__os_task_rw_t__mbx_waiting_mask__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((os_task_rw_t__ref 0))
(((os_task_rw_t__refqtmk (os_task_rw_t__content us_rep2)))))
(define-fun os_task_rw_t__ref_os_task_rw_t__content__projection ((a os_task_rw_t__ref)) us_rep2 
  (os_task_rw_t__content a))

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int us_rep2))))))
(declare-fun slide2 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_170 Int))
                           (=>
                           (and (<= a__first temp___idx_170)
                           (<= temp___idx_170 a__last))
                           (= (bool_eq4 (select a temp___idx_170)
                              (select b (+ (- b__first a__first) temp___idx_170))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_170 Int))
  (=> (and (<= a__first temp___idx_170) (<= temp___idx_170 a__last))
  (= (bool_eq4 (select a temp___idx_170)
     (select b (+ (- b__first a__first) temp___idx_170))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun os_mbx_get_mbx_entry (Int (_ BitVec 8)
  (Array Int us_rep1)) us_rep)

(declare-fun os_mbx_get_mbx_entry__function_guard (us_rep Int (_ BitVec 8)
  (Array Int us_rep1)) Bool)

;; os_mbx_get_mbx_entry__post_axiom
  (assert true)

;; os_mbx_get_mbx_entry__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((index (_ BitVec 8)))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (=>
     (and (dynamic_invariant task_id true true true true) (dynamic_invariant1
     index true true true true))
     (and
     (forall ((task_id1 Int) (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_head__function_guard
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) task_id1
     test__os_task_mbx_rw1))
     (and
     (forall ((task_id1 Int) (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_head__function_guard
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) task_id1
     test__os_task_mbx_rw1))
     (and
     (forall ((task_id1 Int) (index1 (_ BitVec 8))
     (test__os_task_mbx_rw1 (Array Int us_rep1))) (oadd__function_guard
     (oadd (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) index1)
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) index1))
     (= (os_mbx_get_mbx_entry task_id index test__os_task_mbx_rw) (let ((temp___456 
                                                                  (rec__test__os_mbx_t__mbx_array
                                                                  (us_split_fields3
                                                                  (select test__os_task_mbx_rw task_id)))))
                                                                  (select temp___456 
                                                                  (oadd
                                                                  (os_mbx_get_mbx_head
                                                                  task_id
                                                                  test__os_task_mbx_rw)
                                                                  index)))))))) :pattern (
  (os_mbx_get_mbx_entry task_id index test__os_task_mbx_rw)) )))))

(declare-fun os_mbx_get_waiting_mask (Int (Array Int us_rep2)) (_ BitVec 32))

(declare-fun os_mbx_get_waiting_mask__function_guard ((_ BitVec 32) Int
  (Array Int us_rep2)) Bool)

(declare-fun os_mbx_get_mbx_entry_sender (Int (_ BitVec 8)
  (Array Int us_rep1)) Int)

(declare-fun os_mbx_get_mbx_entry_sender__function_guard (Int Int
  (_ BitVec 8) (Array Int us_rep1)) Bool)

(declare-fun os_mbx_is_waiting_mbx_entry (Int (_ BitVec 8)
  (Array Int us_rep1) (Array Int us_rep2)) Bool)

(declare-fun os_mbx_is_waiting_mbx_entry__function_guard (Bool Int
  (_ BitVec 8) (Array Int us_rep1) (Array Int us_rep2)) Bool)

;; os_mbx_is_waiting_mbx_entry__post_axiom
  (assert
  (and
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_is_empty__function_guard
  (os_mbx_is_empty task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw))
  (and
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (os_ghost_mbx_are_well_formed__function_guard
  (os_ghost_mbx_are_well_formed test__os_task_mbx_rw) test__os_task_mbx_rw))
  (and
  (forall ((task_id Int) (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_count__function_guard
  (os_mbx_get_mbx_count task_id test__os_task_mbx_rw) task_id
  test__os_task_mbx_rw))
  (forall ((task_id Int) (index (_ BitVec 8))
  (test__os_task_mbx_rw (Array Int us_rep1)))
  (os_mbx_get_mbx_entry_sender__function_guard
  (os_mbx_get_mbx_entry_sender task_id index test__os_task_mbx_rw) task_id
  index test__os_task_mbx_rw))))))

;; os_mbx_is_waiting_mbx_entry__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((index (_ BitVec 8)))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (forall ((test__os_task_list_rw (Array Int us_rep2)))
  (! (and
     (forall ((task_id1 Int) (test__os_task_list_rw1 (Array Int us_rep2)))
     (os_mbx_get_waiting_mask__function_guard
     (os_mbx_get_waiting_mask task_id1 test__os_task_list_rw1) task_id1
     test__os_task_list_rw1))
     (and
     (forall ((task_id1 Int) (index1 (_ BitVec 8))
     (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_entry_sender__function_guard
     (os_mbx_get_mbx_entry_sender task_id1 index1 test__os_task_mbx_rw1)
     task_id1 index1 test__os_task_mbx_rw1))
     (=
     (= (os_mbx_is_waiting_mbx_entry task_id index test__os_task_mbx_rw
        test__os_task_list_rw) true)
     (not
     (= (bvand (os_mbx_get_waiting_mask task_id test__os_task_list_rw) (bvshl #x00000001 ((_ int2bv 32) 
     (os_mbx_get_mbx_entry_sender task_id index test__os_task_mbx_rw)))) #x00000000))))) :pattern (
  (os_mbx_is_waiting_mbx_entry task_id index test__os_task_mbx_rw
  test__os_task_list_rw)) ))))))

(declare-fun os_sched_get_current_task_id (Int) Int)

(declare-fun os_sched_get_current_task_id__function_guard (Int Int) Bool)

;; os_sched_get_current_task_id__post_axiom
  (assert
  (forall ((test__os_task_current Int))
  (! (=> (dynamic_invariant test__os_task_current true true true true)
     (let ((result (os_sched_get_current_task_id test__os_task_current)))
     (=> (os_sched_get_current_task_id__function_guard result
     test__os_task_current) (dynamic_invariant result true false true true)))) :pattern (
  (os_sched_get_current_task_id test__os_task_current)) )))

;; os_sched_get_current_task_id__def_axiom
  (assert
  (forall ((test__os_task_current Int))
  (! (=> (dynamic_invariant test__os_task_current true true true true)
     (= (os_sched_get_current_task_id test__os_task_current) test__os_task_current)) :pattern (
  (os_sched_get_current_task_id test__os_task_current)) )))

(declare-fun temp_____aggregate_def_493 ((Array (_ BitVec 8) us_rep)
  (_ BitVec 8) us_rep) (Array (_ BitVec 8) us_rep))

(declare-const current Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const r25b (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort os_status_t 0)

(declare-fun os_status_tqtint (os_status_t) Int)

;; os_status_t'axiom
  (assert
  (forall ((i os_status_t))
  (and (<= (- 5) (os_status_tqtint i)) (<= (os_status_tqtint i) 0))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 5) x) (<= x 0)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (os_status_t os_status_t) Bool)

(declare-const dummy10 os_status_t)

(declare-datatypes ((os_status_t__ref 0))
(((os_status_t__refqtmk (os_status_t__content os_status_t)))))
(define-fun os_status_t__ref_os_status_t__content__projection ((a os_status_t__ref)) os_status_t 
  (os_status_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_253 Int)
  (temp___is_init_249 Bool) (temp___skip_constant_250 Bool)
  (temp___do_toplevel_251 Bool)
  (temp___do_typ_inv_252 Bool)) Bool (=>
                                     (or (= temp___is_init_249 true)
                                     (<= (- 5) 0)) (in_range6
                                     temp___expr_253)))

(declare-sort unsigned_char 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 8))

(declare-fun user_eq11 (unsigned_char unsigned_char) Bool)

(declare-const dummy11 unsigned_char)

(declare-datatypes ((unsigned_char__ref 0))
(((unsigned_char__refqtmk (unsigned_char__content unsigned_char)))))
(define-fun unsigned_char__ref_unsigned_char__content__projection ((a unsigned_char__ref)) unsigned_char 
  (unsigned_char__content a))

(define-fun dynamic_invariant3 ((temp___expr_283 (_ BitVec 8))
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool) (temp___do_typ_inv_282 Bool)) Bool true)

(declare-fun to_rep5 (unsigned_char) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) unsigned_char)

;; inversion_axiom
  (assert
  (forall ((x unsigned_char))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))) )))

(define-fun to_int6 ((x unsigned_char)) Int (bv2nat (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_char)) (! (uint_in_range
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 8))

(define-fun dynamic_property ((first_int (_ BitVec 8))
  (last_int (_ BitVec 8))
  (x (_ BitVec 8))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 8))

(declare-fun user_eq12 (unsigned_char unsigned_char) Bool)

(declare-const dummy12 unsigned_char)

(declare-datatypes ((t26b__ref 0))
(((t26b__refqtmk (t26b__content unsigned_char)))))
(define-fun t26b__ref_t26b__content__projection ((a t26b__ref)) unsigned_char 
  (t26b__content a))

(define-fun dynamic_invariant4 ((temp___expr_276 (_ BitVec 8))
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)
  (temp___do_typ_inv_275 Bool)) Bool (=>
                                     (or (= temp___is_init_272 true)
                                     (bvule #x00 #x02)) (in_range1
                                     temp___expr_276)))

;; oadd__post_axiom
  (assert
  (forall ((left (_ BitVec 8)) (right (_ BitVec 8)))
  (! (=>
     (and (dynamic_invariant4 left true true true true) (dynamic_invariant1
     right true true true true))
     (let ((result (oadd left right)))
     (=> (oadd__function_guard result left right) (dynamic_invariant4 result
     true false true true)))) :pattern ((oadd left right)) )))

;; oadd__def_axiom
  (assert
  (forall ((left (_ BitVec 8)) (right (_ BitVec 8)))
  (! (=>
     (and (dynamic_invariant4 left true true true true) (dynamic_invariant1
     right true true true true))
     (= (oadd left right) (let ((temp___340 (bvadd left (bvurem right ((_ int2bv 8) 256)))))
                          (ite (bvule (bvsub #x03 left) (bvurem right ((_ int2bv 8) 256)))
                          (bvsub temp___340 #x03) temp___340)))) :pattern (
  (oadd left right)) )))

(define-fun dynamic_invariant5 ((temp___expr_197 (_ BitVec 32))
  (temp___is_init_193 Bool) (temp___skip_constant_194 Bool)
  (temp___do_toplevel_195 Bool) (temp___do_typ_inv_196 Bool)) Bool true)

;; os_mbx_get_waiting_mask__post_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_list_rw (Array Int us_rep2)))
  (! (=> (dynamic_invariant task_id true true true true)
     (let ((result (os_mbx_get_waiting_mask task_id test__os_task_list_rw)))
     (=> (os_mbx_get_waiting_mask__function_guard result task_id
     test__os_task_list_rw) (dynamic_invariant5 result true false true true)))) :pattern (
  (os_mbx_get_waiting_mask task_id test__os_task_list_rw)) ))))

;; os_mbx_get_waiting_mask__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_list_rw (Array Int us_rep2)))
  (! (=> (dynamic_invariant task_id true true true true)
     (= (os_mbx_get_waiting_mask task_id test__os_task_list_rw) (to_rep4
                                                                (rec__test__os_task_rw_t__mbx_waiting_mask
                                                                (us_split_fields5
                                                                (select test__os_task_list_rw task_id)))))) :pattern (
  (os_mbx_get_waiting_mask task_id test__os_task_list_rw)) ))))

;; os_mbx_get_mbx_head__post_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (=> (dynamic_invariant task_id true true true true)
     (let ((result (os_mbx_get_mbx_head task_id test__os_task_mbx_rw)))
     (=> (os_mbx_get_mbx_head__function_guard result task_id
     test__os_task_mbx_rw) (dynamic_invariant4 result true false true true)))) :pattern (
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw)) ))))

;; os_mbx_get_mbx_head__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (=> (dynamic_invariant task_id true true true true)
     (= (os_mbx_get_mbx_head task_id test__os_task_mbx_rw) (to_rep
                                                           (rec__test__os_mbx_t__head
                                                           (us_split_fields3
                                                           (select test__os_task_mbx_rw task_id)))))) :pattern (
  (os_mbx_get_mbx_head task_id test__os_task_mbx_rw)) ))))

;; os_mbx_get_mbx_entry_sender__post_axiom
  (assert
  (forall ((task_id Int))
  (forall ((index (_ BitVec 8)))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (and
     (forall ((task_id1 Int) (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_head__function_guard
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) task_id1
     test__os_task_mbx_rw1))
     (and
     (forall ((task_id1 Int) (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_head__function_guard
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) task_id1
     test__os_task_mbx_rw1))
     (and
     (forall ((task_id1 Int) (index1 (_ BitVec 8))
     (test__os_task_mbx_rw1 (Array Int us_rep1))) (oadd__function_guard
     (oadd (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) index1)
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) index1))
     (=>
     (and
     (and (dynamic_invariant task_id true true true true) (dynamic_invariant1
     index true true true true)) (in_range5
     (to_rep2
     (rec__test__os_mbx_entry_t__sender_id
     (us_split_fields1
     (let ((temp___437 (rec__test__os_mbx_t__mbx_array
                       (us_split_fields3
                       (select test__os_task_mbx_rw task_id)))))
     (select temp___437 (oadd
                        (os_mbx_get_mbx_head task_id test__os_task_mbx_rw)
                        index))))))))
     (let ((result (os_mbx_get_mbx_entry_sender task_id index
                   test__os_task_mbx_rw)))
     (=> (os_mbx_get_mbx_entry_sender__function_guard result task_id index
     test__os_task_mbx_rw) (dynamic_invariant result true false true true))))))) :pattern (
  (os_mbx_get_mbx_entry_sender task_id index test__os_task_mbx_rw)) )))))

;; os_mbx_get_mbx_entry_sender__def_axiom
  (assert
  (forall ((task_id Int))
  (forall ((index (_ BitVec 8)))
  (forall ((test__os_task_mbx_rw (Array Int us_rep1)))
  (! (=>
     (and (dynamic_invariant task_id true true true true) (dynamic_invariant1
     index true true true true))
     (and
     (forall ((task_id1 Int) (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_head__function_guard
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) task_id1
     test__os_task_mbx_rw1))
     (and
     (forall ((task_id1 Int) (test__os_task_mbx_rw1 (Array Int us_rep1)))
     (os_mbx_get_mbx_head__function_guard
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) task_id1
     test__os_task_mbx_rw1))
     (and
     (forall ((task_id1 Int) (index1 (_ BitVec 8))
     (test__os_task_mbx_rw1 (Array Int us_rep1))) (oadd__function_guard
     (oadd (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) index1)
     (os_mbx_get_mbx_head task_id1 test__os_task_mbx_rw1) index1))
     (= (os_mbx_get_mbx_entry_sender task_id index test__os_task_mbx_rw) 
     (to_rep2
     (rec__test__os_mbx_entry_t__sender_id
     (us_split_fields1
     (let ((temp___444 (rec__test__os_mbx_t__mbx_array
                       (us_split_fields3
                       (select test__os_task_mbx_rw task_id)))))
     (select temp___444 (oadd
                        (os_mbx_get_mbx_head task_id test__os_task_mbx_rw)
                        index))))))))))) :pattern ((os_mbx_get_mbx_entry_sender
                                                   task_id index
                                                   test__os_task_mbx_rw)) )))))

(declare-fun os_mbx_get_mbx_tail (Int (Array Int us_rep1)) (_ BitVec 8))

(declare-fun os_mbx_get_mbx_tail__function_guard ((_ BitVec 8) Int
  (Array Int us_rep1)) Bool)

;; def_axiom
  (assert
  (forall ((temp___495 (Array (_ BitVec 8) us_rep)))
  (forall ((temp___496 (_ BitVec 8)))
  (forall ((temp___497 us_rep))
  (let ((temp___494 (temp_____aggregate_def_493 temp___495 temp___496
                    temp___497)))
  (=> (dynamic_invariant4 temp___496 true true true true)
  (forall ((temp___498 (_ BitVec 8)))
  (ite (= temp___498 temp___496)
  (= (select temp___494 temp___498) temp___497)
  (= (select temp___494 temp___498) (select temp___495 temp___498))))))))))

(define-fun dynamic_invariant6 ((temp___expr_225 Int)
  (temp___is_init_221 Bool) (temp___skip_constant_222 Bool)
  (temp___do_toplevel_223 Bool)
  (temp___do_typ_inv_224 Bool)) Bool (=>
                                     (or (= temp___is_init_221 true)
                                     (<= (- 1) 4)) (in_range3
                                     temp___expr_225)))

(define-fun dynamic_invariant7 ((temp___expr_260 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)
  (temp___do_typ_inv_259 Bool)) Bool (=>
                                     (or (= temp___is_init_256 true)
                                     (<= 0 4294967295)) (in_range4
                                     temp___expr_260)))

(declare-const rliteral os_task_id_t)

;; rliteral_axiom
  (assert (= (os_task_id_tqtint rliteral) (- 1)))

(declare-const rliteral1 os_mbx_msg_t)

;; rliteral_axiom
  (assert (= (os_mbx_msg_tqtint rliteral1) 0))

(assert
;; defqtvc
 ;; File "test.ads", line 80, characters 0-0
  (not
  (forall ((os_task_mbx_rw (Array Int us_rep1)) (status Int)
  (mbx_entry__split_fields us_split_fields) (os_task_current Int))
  (=> (dynamic_invariant os_task_current true false true true)
  (=> (dynamic_invariant2 status false false true true)
  (=>
  (forall ((os_task_mbx_rw1 (Array Int us_rep1)))
  (os_ghost_mbx_are_well_formed__function_guard
  (os_ghost_mbx_are_well_formed os_task_mbx_rw1) os_task_mbx_rw1))
  (=> (= (os_ghost_mbx_are_well_formed os_task_mbx_rw) true)
  (let ((test__os_mbx_receive__current__assume (os_sched_get_current_task_id
                                               os_task_current)))
  (=>
  (and (os_sched_get_current_task_id__function_guard
  test__os_mbx_receive__current__assume os_task_current)
  (and (dynamic_invariant test__os_mbx_receive__current__assume true false
  true true) (= test__os_mbx_receive__current__assume os_task_current)))
  (=> (= test__os_mbx_receive__current__assume current)
  (=> (dynamic_invariant current true false true true)
  (forall ((mbx_entry__split_fields1 us_split_fields))
  (=>
  (= mbx_entry__split_fields1 (us_split_fieldsqtmk rliteral
                              (rec__test__os_mbx_entry_t__msg
                              mbx_entry__split_fields)))
  (forall ((mbx_entry__split_fields2 us_split_fields))
  (=>
  (= mbx_entry__split_fields2 (us_split_fieldsqtmk
                              (rec__test__os_mbx_entry_t__sender_id
                              mbx_entry__split_fields1) rliteral1))
  (let ((o current))
  (let ((o1 (os_mbx_is_empty o os_task_mbx_rw)))
  (=>
  (and (os_mbx_is_empty__function_guard o1 o os_task_mbx_rw)
  (= (= o1 true)
  (= (to_rep1
     (rec__test__os_mbx_t__count
     (us_split_fields3 (select os_task_mbx_rw o)))) #x00)))
  (forall ((spark__branch Bool))
  (=> (= spark__branch o1)
  (=> (not (= spark__branch true))
  (forall ((status1 Int))
  (=> (= status1 (- 4))
  (let ((o2 current))
  (let ((o3 (os_mbx_get_mbx_count o2 os_task_mbx_rw)))
  (=>
  (and (os_mbx_get_mbx_count__function_guard o3 o2 os_task_mbx_rw)
  (and (dynamic_invariant1 o3 true false true true)
  (= o3 (to_rep1
        (rec__test__os_mbx_t__count
        (us_split_fields3 (select os_task_mbx_rw o2)))))))
  (=> (= (bvsub o3 #x01) r25b)
  (=> (dynamic_invariant3 r25b true false true true)
  (forall ((iterator (_ BitVec 8)))
  (=> (= iterator #x00)
  (=>
  (= (and (ite (bvule #x00 iterator) true false) (ite (bvule iterator 
                                                 r25b) true false)) true)
  (let ((o4 current))
  (let ((o5 (os_mbx_is_empty o4 os_task_mbx_rw)))
  (=>
  (and (os_mbx_is_empty__function_guard o5 o4 os_task_mbx_rw)
  (= (= o5 true)
  (= (to_rep1
     (rec__test__os_mbx_t__count
     (us_split_fields3 (select os_task_mbx_rw o4)))) #x00)))
  (let ((o6 (os_ghost_mbx_are_well_formed os_task_mbx_rw)))
  (=>
  (and (os_ghost_mbx_are_well_formed__function_guard o6 os_task_mbx_rw)
  (= (= o6 true)
  (forall ((task_id Int))
  (=> (and (<= 0 task_id) (<= task_id 4))
  (= (os_ghost_task_mbx_are_well_formed task_id os_task_mbx_rw) true)))))
  (=>
  (forall ((os_task_mbx_rw1 (Array Int us_rep1)))
  (os_ghost_mbx_are_well_formed__function_guard
  (os_ghost_mbx_are_well_formed os_task_mbx_rw1) os_task_mbx_rw1))
  (= (os_ghost_mbx_are_well_formed os_task_mbx_rw) true))))))))))))))))))))))))))))))))))))))
(check-sat)
