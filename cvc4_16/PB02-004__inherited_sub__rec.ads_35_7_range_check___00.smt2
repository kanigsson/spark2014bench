(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun to_rep1 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort enum 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (enum enum) Bool)

(declare-const dummy2 enum)

(declare-datatypes ((enum__ref 0))
(((enum__refqtmk (enum__content enum)))))
(define-fun enum__ref_enum__content__projection ((a enum__ref)) enum 
  (enum__content a))

(define-fun dynamic_invariant2 ((temp___expr_159 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)
  (temp___do_typ_inv_158 Bool)) Bool (=>
                                     (or (= temp___is_init_155 true)
                                     (<= 0 2)) (in_range2 temp___expr_159)))

(declare-fun to_rep2 (enum) Int)

(declare-fun of_rep2 (Int) enum)

;; inversion_axiom
  (assert
  (forall ((x enum)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x enum)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort sub_enum 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (sub_enum sub_enum) Bool)

(declare-const dummy3 sub_enum)

(declare-datatypes ((sub_enum__ref 0))
(((sub_enum__refqtmk (sub_enum__content sub_enum)))))
(define-fun sub_enum__ref_sub_enum__content__projection ((a sub_enum__ref)) sub_enum 
  (sub_enum__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float32)))))
(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep3 ((x integer)) Int (integerqtint x))

(declare-fun of_rep3 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort float__ 0)

(declare-fun user_eq5 (float__ float__) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Float32)

(declare-const dummy5 float__)

(declare-datatypes ((float____ref 0))
(((float____refqtmk (float____content float__)))))
(define-fun float____ref_float____content__projection ((a float____ref)) float__ 
  (float____content a))

(declare-fun to_rep4 (float__) Float32)

(declare-fun of_rep4 (Float32) float__)

;; inversion_axiom
  (assert
  (forall ((x float__))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x float__))
  (! (fp.isFinite32 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                                  (of_rep4 x))) )))

(declare-fun to_rep5 (sub_enum) Int)

(declare-fun of_rep5 (Int) sub_enum)

;; inversion_axiom
  (assert
  (forall ((x sub_enum))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x sub_enum)) (! (in_range3 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__rec__my_rec__e sub_enum)))))
(define-fun us_split_discrs_rec__rec__my_rec__e__projection ((a us_split_discrs)) sub_enum 
  (rec__rec__my_rec__e a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__rec__my_rec__x integer)(rec__rec__my_rec__y float__)))))
(define-fun us_split_fields_rec__rec__my_rec__x__projection ((a us_split_fields)) integer 
  (rec__rec__my_rec__x a))

(define-fun us_split_fields_rec__rec__my_rec__y__projection ((a us_split_fields)) float__ 
  (rec__rec__my_rec__y a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun rec__my_rec__x__pred ((a us_rep)) Bool (= (to_rep5
                                                      (rec__rec__my_rec__e
                                                      (us_split_discrs1 a))) 0))

(define-fun rec__my_rec__y__pred ((a us_rep)) Bool (= (to_rep5
                                                      (rec__rec__my_rec__e
                                                      (us_split_discrs1 a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep5
                           (rec__rec__my_rec__e (us_split_discrs1 a))) 
                        (to_rep5 (rec__rec__my_rec__e (us_split_discrs1 b))))
                        (and
                        (=> (rec__my_rec__x__pred a)
                        (= (to_rep3
                           (rec__rec__my_rec__x (us_split_fields1 a))) 
                        (to_rep3 (rec__rec__my_rec__x (us_split_fields1 b)))))
                        (=> (rec__my_rec__y__pred a)
                        (fp.eq (to_rep4
                               (rec__rec__my_rec__y (us_split_fields1 a))) 
                        (to_rep4 (rec__rec__my_rec__y (us_split_fields1 b)))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const rec__my_rec__e__first__bit Int)

(declare-const rec__my_rec__e__last__bit Int)

(declare-const rec__my_rec__e__position Int)

;; rec__my_rec__e__first__bit_axiom
  (assert (<= 0 rec__my_rec__e__first__bit))

;; rec__my_rec__e__last__bit_axiom
  (assert (< rec__my_rec__e__first__bit rec__my_rec__e__last__bit))

;; rec__my_rec__e__position_axiom
  (assert (<= 0 rec__my_rec__e__position))

(declare-const rec__my_rec__x__first__bit Int)

(declare-const rec__my_rec__x__last__bit Int)

(declare-const rec__my_rec__x__position Int)

;; rec__my_rec__x__first__bit_axiom
  (assert (<= 0 rec__my_rec__x__first__bit))

;; rec__my_rec__x__last__bit_axiom
  (assert (< rec__my_rec__x__first__bit rec__my_rec__x__last__bit))

;; rec__my_rec__x__position_axiom
  (assert (<= 0 rec__my_rec__x__position))

(declare-const rec__my_rec__y__first__bit Int)

(declare-const rec__my_rec__y__last__bit Int)

(declare-const rec__my_rec__y__position Int)

;; rec__my_rec__y__first__bit_axiom
  (assert (<= 0 rec__my_rec__y__first__bit))

;; rec__my_rec__y__last__bit_axiom
  (assert (< rec__my_rec__y__first__bit rec__my_rec__y__last__bit))

;; rec__my_rec__y__position_axiom
  (assert (<= 0 rec__my_rec__y__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((t1s__ref 0))
(((t1s__refqtmk (t1s__content us_rep)))))
(define-fun t1s__ref_t1s__content__projection ((a t1s__ref)) us_rep (t1s__content
                                                                    a))

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1 (rec__rec__sub_rec__z enum)))))
(define-fun us_split_discrs_rec__rec__sub_rec__z__projection ((a us_split_discrs2)) enum 
  (rec__rec__sub_rec__z a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__rec__sub_rec__plop us_rep)))))
(define-fun us_split_fields_rec__rec__sub_rec__plop__projection ((a us_split_fields2)) us_rep 
  (rec__rec__sub_rec__plop a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__rec__sub_rec__z (us_split_discrs3 a))) 
                         (to_rep2
                         (rec__rec__sub_rec__z (us_split_discrs3 b))))
                         (= (bool_eq
                            (rec__rec__sub_rec__plop (us_split_fields3 a))
                            (rec__rec__sub_rec__plop (us_split_fields3 b))) true))
                    true false))

(define-fun in_range5 ((rec__rec__sub_rec__z1 Int)
  (a us_split_discrs2)) Bool (= rec__rec__sub_rec__z1 (to_rep2
                                                      (rec__rec__sub_rec__z
                                                      a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const rec__sub_rec__z__first__bit Int)

(declare-const rec__sub_rec__z__last__bit Int)

(declare-const rec__sub_rec__z__position Int)

;; rec__sub_rec__z__first__bit_axiom
  (assert (<= 0 rec__sub_rec__z__first__bit))

;; rec__sub_rec__z__last__bit_axiom
  (assert (< rec__sub_rec__z__first__bit rec__sub_rec__z__last__bit))

;; rec__sub_rec__z__position_axiom
  (assert (<= 0 rec__sub_rec__z__position))

(declare-const rec__sub_rec__plop__first__bit Int)

(declare-const rec__sub_rec__plop__last__bit Int)

(declare-const rec__sub_rec__plop__position Int)

;; rec__sub_rec__plop__first__bit_axiom
  (assert (<= 0 rec__sub_rec__plop__first__bit))

;; rec__sub_rec__plop__last__bit_axiom
  (assert (< rec__sub_rec__plop__first__bit rec__sub_rec__plop__last__bit))

;; rec__sub_rec__plop__position_axiom
  (assert (<= 0 rec__sub_rec__plop__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((sub_rec__ref 0))
(((sub_rec__refqtmk (sub_rec__content us_rep1)))))
(define-fun sub_rec__ref_sub_rec__content__projection ((a sub_rec__ref)) us_rep1 
  (sub_rec__content a))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const rec__my_rec__e__first__bit1 Int)

(declare-const rec__my_rec__e__last__bit1 Int)

(declare-const rec__my_rec__e__position1 Int)

;; rec__my_rec__e__first__bit_axiom
  (assert (<= 0 rec__my_rec__e__first__bit1))

;; rec__my_rec__e__last__bit_axiom
  (assert (< rec__my_rec__e__first__bit1 rec__my_rec__e__last__bit1))

;; rec__my_rec__e__position_axiom
  (assert (<= 0 rec__my_rec__e__position1))

(declare-const rec__my_rec__x__first__bit1 Int)

(declare-const rec__my_rec__x__last__bit1 Int)

(declare-const rec__my_rec__x__position1 Int)

;; rec__my_rec__x__first__bit_axiom
  (assert (<= 0 rec__my_rec__x__first__bit1))

;; rec__my_rec__x__last__bit_axiom
  (assert (< rec__my_rec__x__first__bit1 rec__my_rec__x__last__bit1))

;; rec__my_rec__x__position_axiom
  (assert (<= 0 rec__my_rec__x__position1))

(declare-const rec__my_rec__y__first__bit1 Int)

(declare-const rec__my_rec__y__last__bit1 Int)

(declare-const rec__my_rec__y__position1 Int)

;; rec__my_rec__y__first__bit_axiom
  (assert (<= 0 rec__my_rec__y__first__bit1))

;; rec__my_rec__y__last__bit_axiom
  (assert (< rec__my_rec__y__first__bit1 rec__my_rec__y__last__bit1))

;; rec__my_rec__y__position_axiom
  (assert (<= 0 rec__my_rec__y__position1))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((t2s__ref 0))
(((t2s__refqtmk (t2s__content us_rep)))))
(define-fun t2s__ref_t2s__content__projection ((a t2s__ref)) us_rep (t2s__content
                                                                    a))

(declare-datatypes ((us_split_discrs4 0))
(((us_split_discrsqtmk2 (rec__rec__sub_rec_ok__z enum)))))
(define-fun us_split_discrs_rec__rec__sub_rec_ok__z__projection ((a us_split_discrs4)) enum 
  (rec__rec__sub_rec_ok__z a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((us_split_discrs__refqtmk2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__rec__sub_rec_ok__plop us_rep)))))
(define-fun us_split_fields_rec__rec__sub_rec_ok__plop__projection ((a us_split_fields4)) us_rep 
  (rec__rec__sub_rec_ok__plop a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs5 us_split_discrs4)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs4 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun rec__sub_rec_ok__plop__pred ((a us_rep2)) Bool (and
                                                           (<= 0 (to_rep2
                                                                 (rec__rec__sub_rec_ok__z
                                                                 (us_split_discrs5
                                                                 a))))
                                                           (<= (to_rep2
                                                               (rec__rec__sub_rec_ok__z
                                                               (us_split_discrs5
                                                               a))) 1)))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__rec__sub_rec_ok__z (us_split_discrs5 a))) 
                         (to_rep2
                         (rec__rec__sub_rec_ok__z (us_split_discrs5 b))))
                         (=> (rec__sub_rec_ok__plop__pred a)
                         (= (bool_eq
                            (rec__rec__sub_rec_ok__plop (us_split_fields5 a))
                            (rec__rec__sub_rec_ok__plop (us_split_fields5 b))) true)))
                    true false))

(define-fun in_range6 ((rec__rec__sub_rec_ok__z1 Int)
  (a us_split_discrs4)) Bool (= rec__rec__sub_rec_ok__z1 (to_rep2
                                                         (rec__rec__sub_rec_ok__z
                                                         a))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const rec__sub_rec_ok__z__first__bit Int)

(declare-const rec__sub_rec_ok__z__last__bit Int)

(declare-const rec__sub_rec_ok__z__position Int)

;; rec__sub_rec_ok__z__first__bit_axiom
  (assert (<= 0 rec__sub_rec_ok__z__first__bit))

;; rec__sub_rec_ok__z__last__bit_axiom
  (assert (< rec__sub_rec_ok__z__first__bit rec__sub_rec_ok__z__last__bit))

;; rec__sub_rec_ok__z__position_axiom
  (assert (<= 0 rec__sub_rec_ok__z__position))

(declare-const rec__sub_rec_ok__plop__first__bit Int)

(declare-const rec__sub_rec_ok__plop__last__bit Int)

(declare-const rec__sub_rec_ok__plop__position Int)

;; rec__sub_rec_ok__plop__first__bit_axiom
  (assert (<= 0 rec__sub_rec_ok__plop__first__bit))

;; rec__sub_rec_ok__plop__last__bit_axiom
  (assert
  (< rec__sub_rec_ok__plop__first__bit rec__sub_rec_ok__plop__last__bit))

;; rec__sub_rec_ok__plop__position_axiom
  (assert (<= 0 rec__sub_rec_ok__plop__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes ((sub_rec_ok__ref 0))
(((sub_rec_ok__refqtmk (sub_rec_ok__content us_rep2)))))
(define-fun sub_rec_ok__ref_sub_rec_ok__content__projection ((a sub_rec_ok__ref)) us_rep2 
  (sub_rec_ok__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range4 f)
     (=> (in_range4 l)
     (and (= (to_rep3 (first (mk f l))) f) (= (to_rep3 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range4 low)
                   (and (in_range4 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep3 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep3 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment4))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep3 (first (rt x)))
                 (to_rep3 (last (rt x))) (elts y) (to_rep3 (first (rt y)))
                 (to_rep3 (last (rt y)))))

(declare-fun user_eq10 (us_t us_t) Bool)

(declare-const dummy10 us_t)

(declare-datatypes ((my_array__ref 0))
(((my_array__refqtmk (my_array__content us_t)))))
(define-fun my_array__ref_my_array__content__projection ((a my_array__ref)) us_t 
  (my_array__content a))

(declare-datatypes ((t6s__ref 0))
(((t6s__refqtmk (t6s__content us_t)))))
(define-fun t6s__ref_t6s__content__projection ((a t6s__ref)) us_t (t6s__content
                                                                  a))

(declare-datatypes ((us_split_discrs6 0))
(((us_split_discrsqtmk3
  (rec__rec__sub_arr__f natural)(rec__rec__sub_arr__l natural)))))
(define-fun us_split_discrs_rec__rec__sub_arr__f__projection ((a us_split_discrs6)) natural 
  (rec__rec__sub_arr__f a))

(define-fun us_split_discrs_rec__rec__sub_arr__l__projection ((a us_split_discrs6)) natural 
  (rec__rec__sub_arr__l a))

(declare-datatypes ((us_split_discrs__ref3 0))
(((us_split_discrs__refqtmk3 (us_split_discrs__content3 us_split_discrs6)))))
(define-fun us_split_discrs__ref___split_discrs__content__4__projection ((a us_split_discrs__ref3)) us_split_discrs6 
  (us_split_discrs__content3 a))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3 (rec__rec__sub_arr__content us_t)))))
(define-fun us_split_fields_rec__rec__sub_arr__content__projection ((a us_split_fields6)) us_t 
  (rec__rec__sub_arr__content a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3
  (us_split_discrs7 us_split_discrs6)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep3)) us_split_discrs6 
  (us_split_discrs7 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__rec__sub_arr__f (us_split_discrs7 a))) 
                         (to_rep (rec__rec__sub_arr__f (us_split_discrs7 b))))
                         (= (to_rep
                            (rec__rec__sub_arr__l (us_split_discrs7 a))) 
                         (to_rep (rec__rec__sub_arr__l (us_split_discrs7 b)))))
                         (= (bool_eq4
                            (rec__rec__sub_arr__content (us_split_fields7 a))
                            (rec__rec__sub_arr__content (us_split_fields7 b))) true))
                    true false))

(define-fun in_range7 ((rec__rec__sub_arr__f1 Int)
  (rec__rec__sub_arr__l1 Int)
  (a us_split_discrs6)) Bool (and
                             (= rec__rec__sub_arr__f1 (to_rep
                                                      (rec__rec__sub_arr__f
                                                      a)))
                             (= rec__rec__sub_arr__l1 (to_rep
                                                      (rec__rec__sub_arr__l
                                                      a)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const rec__sub_arr__f__first__bit Int)

(declare-const rec__sub_arr__f__last__bit Int)

(declare-const rec__sub_arr__f__position Int)

;; rec__sub_arr__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr__f__first__bit))

;; rec__sub_arr__f__last__bit_axiom
  (assert (< rec__sub_arr__f__first__bit rec__sub_arr__f__last__bit))

;; rec__sub_arr__f__position_axiom
  (assert (<= 0 rec__sub_arr__f__position))

(declare-const rec__sub_arr__l__first__bit Int)

(declare-const rec__sub_arr__l__last__bit Int)

(declare-const rec__sub_arr__l__position Int)

;; rec__sub_arr__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr__l__first__bit))

;; rec__sub_arr__l__last__bit_axiom
  (assert (< rec__sub_arr__l__first__bit rec__sub_arr__l__last__bit))

;; rec__sub_arr__l__position_axiom
  (assert (<= 0 rec__sub_arr__l__position))

(declare-const rec__sub_arr__content__first__bit Int)

(declare-const rec__sub_arr__content__last__bit Int)

(declare-const rec__sub_arr__content__position Int)

;; rec__sub_arr__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr__content__first__bit))

;; rec__sub_arr__content__last__bit_axiom
  (assert
  (< rec__sub_arr__content__first__bit rec__sub_arr__content__last__bit))

;; rec__sub_arr__content__position_axiom
  (assert (<= 0 rec__sub_arr__content__position))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-const dummy11 us_rep3)

(declare-datatypes ((sub_arr__ref 0))
(((sub_arr__refqtmk (sub_arr__content us_rep3)))))
(define-fun sub_arr__ref_sub_arr__content__projection ((a sub_arr__ref)) us_rep3 
  (sub_arr__content a))

(declare-datatypes ((t8s__ref 0))
(((t8s__refqtmk (t8s__content us_t)))))
(define-fun t8s__ref_t8s__content__projection ((a t8s__ref)) us_t (t8s__content
                                                                  a))

(declare-datatypes ((us_split_discrs8 0))
(((us_split_discrsqtmk4
  (rec__rec__sub_arr_ok__f positive)(rec__rec__sub_arr_ok__l natural)))))
(define-fun us_split_discrs_rec__rec__sub_arr_ok__f__projection ((a us_split_discrs8)) positive 
  (rec__rec__sub_arr_ok__f a))

(define-fun us_split_discrs_rec__rec__sub_arr_ok__l__projection ((a us_split_discrs8)) natural 
  (rec__rec__sub_arr_ok__l a))

(declare-datatypes ((us_split_discrs__ref4 0))
(((us_split_discrs__refqtmk4 (us_split_discrs__content4 us_split_discrs8)))))
(define-fun us_split_discrs__ref___split_discrs__content__5__projection ((a us_split_discrs__ref4)) us_split_discrs8 
  (us_split_discrs__content4 a))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4 (rec__rec__sub_arr_ok__content us_t)))))
(define-fun us_split_fields_rec__rec__sub_arr_ok__content__projection ((a us_split_fields8)) us_t 
  (rec__rec__sub_arr_ok__content a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk4
  (us_split_discrs9 us_split_discrs8)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep4)) us_split_discrs8 
  (us_split_discrs9 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__rec__sub_arr_ok__f (us_split_discrs9 a))) 
                         (to_rep1
                         (rec__rec__sub_arr_ok__f (us_split_discrs9 b))))
                         (= (to_rep
                            (rec__rec__sub_arr_ok__l (us_split_discrs9 a))) 
                         (to_rep
                         (rec__rec__sub_arr_ok__l (us_split_discrs9 b)))))
                         (= (bool_eq4
                            (rec__rec__sub_arr_ok__content
                            (us_split_fields9 a))
                            (rec__rec__sub_arr_ok__content
                            (us_split_fields9 b))) true))
                    true false))

(define-fun in_range8 ((rec__rec__sub_arr_ok__f1 Int)
  (rec__rec__sub_arr_ok__l1 Int)
  (a us_split_discrs8)) Bool (and
                             (= rec__rec__sub_arr_ok__f1 (to_rep1
                                                         (rec__rec__sub_arr_ok__f
                                                         a)))
                             (= rec__rec__sub_arr_ok__l1 (to_rep
                                                         (rec__rec__sub_arr_ok__l
                                                         a)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const rec__sub_arr_ok__f__first__bit Int)

(declare-const rec__sub_arr_ok__f__last__bit Int)

(declare-const rec__sub_arr_ok__f__position Int)

;; rec__sub_arr_ok__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr_ok__f__first__bit))

;; rec__sub_arr_ok__f__last__bit_axiom
  (assert (< rec__sub_arr_ok__f__first__bit rec__sub_arr_ok__f__last__bit))

;; rec__sub_arr_ok__f__position_axiom
  (assert (<= 0 rec__sub_arr_ok__f__position))

(declare-const rec__sub_arr_ok__l__first__bit Int)

(declare-const rec__sub_arr_ok__l__last__bit Int)

(declare-const rec__sub_arr_ok__l__position Int)

;; rec__sub_arr_ok__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr_ok__l__first__bit))

;; rec__sub_arr_ok__l__last__bit_axiom
  (assert (< rec__sub_arr_ok__l__first__bit rec__sub_arr_ok__l__last__bit))

;; rec__sub_arr_ok__l__position_axiom
  (assert (<= 0 rec__sub_arr_ok__l__position))

(declare-const rec__sub_arr_ok__content__first__bit Int)

(declare-const rec__sub_arr_ok__content__last__bit Int)

(declare-const rec__sub_arr_ok__content__position Int)

;; rec__sub_arr_ok__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr_ok__content__first__bit))

;; rec__sub_arr_ok__content__last__bit_axiom
  (assert
  (< rec__sub_arr_ok__content__first__bit rec__sub_arr_ok__content__last__bit))

;; rec__sub_arr_ok__content__position_axiom
  (assert (<= 0 rec__sub_arr_ok__content__position))

(declare-fun user_eq12 (us_rep4 us_rep4) Bool)

(declare-const dummy12 us_rep4)

(declare-datatypes ((sub_arr_ok__ref 0))
(((sub_arr_ok__refqtmk (sub_arr_ok__content us_rep4)))))
(define-fun sub_arr_ok__ref_sub_arr_ok__content__projection ((a sub_arr_ok__ref)) us_rep4 
  (sub_arr_ok__content a))

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range4 temp___expr_18)))

(define-fun dynamic_invariant4 ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(define-fun dynamic_invariant5 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 0 1)) (in_range3 temp___expr_166)))

(define-fun in_range9 ((rec__rec__my_rec__e1 Int)
  (a us_split_discrs)) Bool (= rec__rec__my_rec__e1 (to_rep5
                                                    (rec__rec__my_rec__e a))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const rec__my_rec__e__first__bit2 Int)

(declare-const rec__my_rec__e__last__bit2 Int)

(declare-const rec__my_rec__e__position2 Int)

;; rec__my_rec__e__first__bit_axiom
  (assert (<= 0 rec__my_rec__e__first__bit2))

;; rec__my_rec__e__last__bit_axiom
  (assert (< rec__my_rec__e__first__bit2 rec__my_rec__e__last__bit2))

;; rec__my_rec__e__position_axiom
  (assert (<= 0 rec__my_rec__e__position2))

(declare-const rec__my_rec__x__first__bit2 Int)

(declare-const rec__my_rec__x__last__bit2 Int)

(declare-const rec__my_rec__x__position2 Int)

;; rec__my_rec__x__first__bit_axiom
  (assert (<= 0 rec__my_rec__x__first__bit2))

;; rec__my_rec__x__last__bit_axiom
  (assert (< rec__my_rec__x__first__bit2 rec__my_rec__x__last__bit2))

;; rec__my_rec__x__position_axiom
  (assert (<= 0 rec__my_rec__x__position2))

(declare-const rec__my_rec__y__first__bit2 Int)

(declare-const rec__my_rec__y__last__bit2 Int)

(declare-const rec__my_rec__y__position2 Int)

;; rec__my_rec__y__first__bit_axiom
  (assert (<= 0 rec__my_rec__y__first__bit2))

;; rec__my_rec__y__last__bit_axiom
  (assert (< rec__my_rec__y__first__bit2 rec__my_rec__y__last__bit2))

;; rec__my_rec__y__position_axiom
  (assert (<= 0 rec__my_rec__y__position2))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ((my_rec__ref 0))
(((my_rec__refqtmk (my_rec__content us_rep)))))
(define-fun my_rec__ref_my_rec__content__projection ((a my_rec__ref)) us_rep 
  (my_rec__content a))

(define-fun dynamic_invariant6 ((temp___expr_179 us_rep1)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool (in_range9
  (to_rep2 (rec__rec__sub_rec__z (us_split_discrs3 temp___expr_179)))
  (us_split_discrs1
  (rec__rec__sub_rec__plop (us_split_fields3 temp___expr_179)))))

(define-fun dynamic_invariant7 ((temp___expr_186 us_rep2)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=> (rec__sub_rec_ok__plop__pred
                                     temp___expr_186) (in_range9
                                     (to_rep2
                                     (rec__rec__sub_rec_ok__z
                                     (us_split_discrs5 temp___expr_186)))
                                     (us_split_discrs1
                                     (rec__rec__sub_rec_ok__plop
                                     (us_split_fields5 temp___expr_186))))))

(define-fun dynamic_invariant8 ((temp___expr_199 us_rep3)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (let ((temp___201 (rec__rec__sub_arr__l
                                                       (us_split_discrs7
                                                       temp___expr_199))))
                                     (let ((temp___200 (rec__rec__sub_arr__f
                                                       (us_split_discrs7
                                                       temp___expr_199))))
                                     (and (dynamic_property
                                     (to_rep temp___200) (to_rep temp___201)
                                     (first1
                                     (rec__rec__sub_arr__content
                                     (us_split_fields7 temp___expr_199)))
                                     (last1
                                     (rec__rec__sub_arr__content
                                     (us_split_fields7 temp___expr_199))))
                                     (and
                                     (= (first1
                                        (rec__rec__sub_arr__content
                                        (us_split_fields7 temp___expr_199))) 
                                     (to_rep temp___200))
                                     (= (last1
                                        (rec__rec__sub_arr__content
                                        (us_split_fields7 temp___expr_199))) 
                                     (to_rep temp___201)))))))

(define-fun dynamic_invariant9 ((temp___expr_207 us_rep4)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)
  (temp___do_typ_inv_206 Bool)) Bool (let ((temp___209 (rec__rec__sub_arr_ok__l
                                                       (us_split_discrs9
                                                       temp___expr_207))))
                                     (let ((temp___208 (rec__rec__sub_arr_ok__f
                                                       (us_split_discrs9
                                                       temp___expr_207))))
                                     (and (dynamic_property
                                     (to_rep1 temp___208) (to_rep temp___209)
                                     (first1
                                     (rec__rec__sub_arr_ok__content
                                     (us_split_fields9 temp___expr_207)))
                                     (last1
                                     (rec__rec__sub_arr_ok__content
                                     (us_split_fields9 temp___expr_207))))
                                     (and
                                     (= (first1
                                        (rec__rec__sub_arr_ok__content
                                        (us_split_fields9 temp___expr_207))) 
                                     (to_rep1 temp___208))
                                     (= (last1
                                        (rec__rec__sub_arr_ok__content
                                        (us_split_fields9 temp___expr_207))) 
                                     (to_rep temp___209)))))))

(assert
;; defqtvc
 ;; File "rec.ads", line 1, characters 0-0
  (not
  (forall ((usf Int) (usf1 Int) (usf2 us_rep4))
  (=>
  (exists ((usf3 Int))
  (and (dynamic_invariant2 usf3 true true true true)
  (exists ((usf4 us_rep1))
  (and (= (to_rep2 (rec__rec__sub_rec__z (us_split_discrs3 usf4))) usf3)
  (in_range3 usf3)))))
  (=>
  (exists ((usf3 Int))
  (and (dynamic_invariant2 usf3 true true true true)
  (exists ((usf4 us_rep2))
  (and (= (to_rep2 (rec__rec__sub_rec_ok__z (us_split_discrs5 usf4))) usf3)
  (or (not (rec__sub_rec_ok__plop__pred usf4)) (in_range3 usf3))))))
  (=>
  (exists ((usf3 Int))
  (and (dynamic_invariant usf3 true true true true)
  (exists ((usf4 Int))
  (and (dynamic_invariant usf4 true true true true)
  (exists ((usf5 us_rep3))
  (and (= (to_rep (rec__rec__sub_arr__f (us_split_discrs7 usf5))) usf4)
  (= (to_rep (rec__rec__sub_arr__l (us_split_discrs7 usf5))) usf3)))))))
  (=> (dynamic_invariant usf true true true true)
  (=> (dynamic_invariant1 usf1 true true true true)
  (=> (= (to_rep1 (rec__rec__sub_arr_ok__f (us_split_discrs9 usf2))) usf1)
  (=> (= (to_rep (rec__rec__sub_arr_ok__l (us_split_discrs9 usf2))) usf)
  (=> (<= usf1 usf) (<= 1 usf1))))))))))))
(check-sat)
