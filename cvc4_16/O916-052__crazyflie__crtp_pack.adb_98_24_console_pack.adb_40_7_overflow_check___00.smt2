;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun to_rep ((x positive)) Int (positiveqtint x))

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort crpt_packet_representation 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (crpt_packet_representation
  crpt_packet_representation) Bool)

(declare-const dummy3 crpt_packet_representation)

(declare-datatypes ((crpt_packet_representation__ref 0))
(((crpt_packet_representation__refqtmk
  (crpt_packet_representation__content crpt_packet_representation)))))
(define-fun crpt_packet_representation__ref_crpt_packet_representation__content__projection ((a crpt_packet_representation__ref)) crpt_packet_representation 
  (crpt_packet_representation__content a))

(declare-fun to_rep1 (crpt_packet_representation) Int)

(declare-fun of_rep1 (Int) crpt_packet_representation)

;; inversion_axiom
  (assert
  (forall ((x crpt_packet_representation))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x crpt_packet_representation)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t_uint8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (t_uint8 t_uint8) Bool)

(declare-const dummy4 t_uint8)

(declare-datatypes ((t_uint8__ref 0))
(((t_uint8__refqtmk (t_uint8__content t_uint8)))))
(define-fun t_uint8__ref_t_uint8__content__projection ((a t_uint8__ref)) t_uint8 
  (t_uint8__content a))

(declare-fun to_rep2 (t_uint8) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) t_uint8)

;; inversion_axiom
  (assert
  (forall ((x t_uint8))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int2 ((x t_uint8)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x t_uint8)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort crtp_channel 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x03)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (crtp_channel crtp_channel) Bool)

(declare-const dummy5 crtp_channel)

(declare-datatypes ((crtp_channel__ref 0))
(((crtp_channel__refqtmk (crtp_channel__content crtp_channel)))))
(define-fun crtp_channel__ref_crtp_channel__content__projection ((a crtp_channel__ref)) crtp_channel 
  (crtp_channel__content a))

(declare-fun to_rep3 (crtp_channel) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) crtp_channel)

;; inversion_axiom
  (assert
  (forall ((x crtp_channel))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x crtp_channel)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun to_int3 ((x crtp_channel)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x crtp_channel)) (! (in_range_int
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-sort crtp_reserved 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 8))

(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x03)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq6 (crtp_reserved crtp_reserved) Bool)

(declare-const dummy6 crtp_reserved)

(declare-datatypes ((crtp_reserved__ref 0))
(((crtp_reserved__refqtmk (crtp_reserved__content crtp_reserved)))))
(define-fun crtp_reserved__ref_crtp_reserved__content__projection ((a crtp_reserved__ref)) crtp_reserved 
  (crtp_reserved__content a))

(declare-fun to_rep4 (crtp_reserved) (_ BitVec 8))

(declare-fun of_rep4 ((_ BitVec 8)) crtp_reserved)

;; inversion_axiom
  (assert
  (forall ((x crtp_reserved))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x crtp_reserved)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(define-fun to_int4 ((x crtp_reserved)) Int (bv2nat (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x crtp_reserved)) (! (in_range_int1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort crtp_port 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq7 (crtp_port crtp_port) Bool)

(declare-const dummy7 crtp_port)

(declare-datatypes ((crtp_port__ref 0))
(((crtp_port__refqtmk (crtp_port__content crtp_port)))))
(define-fun crtp_port__ref_crtp_port__content__projection ((a crtp_port__ref)) crtp_port 
  (crtp_port__content a))

(declare-fun to_rep5 (crtp_port) Int)

(declare-fun of_rep5 (Int) crtp_port)

;; inversion_axiom
  (assert
  (forall ((x crtp_port))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x crtp_port)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int t_uint8))))))
(declare-fun slide ((Array Int t_uint8) Int Int) (Array Int t_uint8))

;; slide_eq
  (assert
  (forall ((a (Array Int t_uint8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int t_uint8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int t_uint8)) (a__first Int) (a__last Int)
  (b (Array Int t_uint8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep2 (select a temp___idx_155)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int t_uint8)) (b (Array Int t_uint8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep2 (select a temp___idx_155)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-const dummy8 (Array Int t_uint8))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq8 ((Array Int t_uint8) (Array Int t_uint8)) Bool)

(declare-const dummy9 (Array Int t_uint8))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq9 ((Array Int t_uint8) (Array Int t_uint8)) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__crtp_pack__crtp_packet__repr crpt_packet_representation)))))
(define-fun us_split_discrs_rec__crtp_pack__crtp_packet__repr__projection ((a us_split_discrs)) crpt_packet_representation 
  (rec__crtp_pack__crtp_packet__repr a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__crtp_pack__crtp_packet__size t_uint8)(rec__crtp_pack__crtp_packet__channel crtp_channel)(rec__crtp_pack__crtp_packet__reserved crtp_reserved)(rec__crtp_pack__crtp_packet__port crtp_port)(rec__crtp_pack__crtp_packet__data_1 (Array Int t_uint8))(rec__crtp_pack__crtp_packet__header t_uint8)(rec__crtp_pack__crtp_packet__data_2 (Array Int t_uint8))(rec__crtp_pack__crtp_packet__raw (Array Int t_uint8))))))
(define-fun us_split_fields_rec__crtp_pack__crtp_packet__size__projection ((a us_split_fields)) t_uint8 
  (rec__crtp_pack__crtp_packet__size a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__channel__projection ((a us_split_fields)) crtp_channel 
  (rec__crtp_pack__crtp_packet__channel a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__reserved__projection ((a us_split_fields)) crtp_reserved 
  (rec__crtp_pack__crtp_packet__reserved a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__port__projection ((a us_split_fields)) crtp_port 
  (rec__crtp_pack__crtp_packet__port a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__data_1__projection ((a us_split_fields)) (Array Int t_uint8) 
  (rec__crtp_pack__crtp_packet__data_1 a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__header__projection ((a us_split_fields)) t_uint8 
  (rec__crtp_pack__crtp_packet__header a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__data_2__projection ((a us_split_fields)) (Array Int t_uint8) 
  (rec__crtp_pack__crtp_packet__data_2 a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet__raw__projection ((a us_split_fields)) (Array Int t_uint8) 
  (rec__crtp_pack__crtp_packet__raw a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun crtp_pack__crtp_packet__channel__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__crtp_pack__crtp_packet__repr (us_split_discrs1 a))) 0))

(define-fun crtp_pack__crtp_packet__reserved__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__crtp_pack__crtp_packet__repr (us_split_discrs1 a))) 0))

(define-fun crtp_pack__crtp_packet__port__pred ((a us_rep)) Bool (= (to_rep1
                                                                    (rec__crtp_pack__crtp_packet__repr
                                                                    (us_split_discrs1
                                                                    a))) 0))

(define-fun crtp_pack__crtp_packet__data_1__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__crtp_pack__crtp_packet__repr (us_split_discrs1 a))) 0))

(define-fun crtp_pack__crtp_packet__header__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__crtp_pack__crtp_packet__repr (us_split_discrs1 a))) 1))

(define-fun crtp_pack__crtp_packet__data_2__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__crtp_pack__crtp_packet__repr (us_split_discrs1 a))) 1))

(define-fun crtp_pack__crtp_packet__raw__pred ((a us_rep)) Bool (= (to_rep1
                                                                   (rec__crtp_pack__crtp_packet__repr
                                                                   (us_split_discrs1
                                                                   a))) 2))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__crtp_pack__crtp_packet__repr
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__crtp_pack__crtp_packet__repr
                                                  (us_split_discrs1 b))))
                        (and
                        (and
                        (= (to_rep2
                           (rec__crtp_pack__crtp_packet__size
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__crtp_pack__crtp_packet__size
                                                  (us_split_fields1 b))))
                        (=> (crtp_pack__crtp_packet__channel__pred a)
                        (= (to_rep3
                           (rec__crtp_pack__crtp_packet__channel
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__crtp_pack__crtp_packet__channel
                                                  (us_split_fields1 b))))))
                        (and
                        (and
                        (and
                        (=> (crtp_pack__crtp_packet__reserved__pred a)
                        (= (to_rep4
                           (rec__crtp_pack__crtp_packet__reserved
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__crtp_pack__crtp_packet__reserved
                                                  (us_split_fields1 b)))))
                        (=> (crtp_pack__crtp_packet__port__pred a)
                        (= (to_rep5
                           (rec__crtp_pack__crtp_packet__port
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__crtp_pack__crtp_packet__port
                                                  (us_split_fields1 b))))))
                        (=> (crtp_pack__crtp_packet__data_1__pred a)
                        (= (bool_eq
                           (rec__crtp_pack__crtp_packet__data_1
                           (us_split_fields1 a)) 1 30
                           (rec__crtp_pack__crtp_packet__data_1
                           (us_split_fields1 b)) 1 30) true)))
                        (and
                        (and
                        (=> (crtp_pack__crtp_packet__header__pred a)
                        (= (to_rep2
                           (rec__crtp_pack__crtp_packet__header
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__crtp_pack__crtp_packet__header
                                                  (us_split_fields1 b)))))
                        (=> (crtp_pack__crtp_packet__data_2__pred a)
                        (= (bool_eq
                           (rec__crtp_pack__crtp_packet__data_2
                           (us_split_fields1 a)) 1 30
                           (rec__crtp_pack__crtp_packet__data_2
                           (us_split_fields1 b)) 1 30) true)))
                        (=> (crtp_pack__crtp_packet__raw__pred a)
                        (= (bool_eq
                           (rec__crtp_pack__crtp_packet__raw
                           (us_split_fields1 a)) 1 31
                           (rec__crtp_pack__crtp_packet__raw
                           (us_split_fields1 b)) 1 31) true))))))
                   true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const crtp_pack__crtp_packet__repr__first__bit Int)

(declare-const crtp_pack__crtp_packet__repr__last__bit Int)

(declare-const crtp_pack__crtp_packet__repr__position Int)

;; crtp_pack__crtp_packet__repr__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__repr__first__bit))

;; crtp_pack__crtp_packet__repr__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__repr__first__bit crtp_pack__crtp_packet__repr__last__bit))

;; crtp_pack__crtp_packet__repr__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__repr__position))

(declare-const crtp_pack__crtp_packet__size__first__bit Int)

(declare-const crtp_pack__crtp_packet__size__last__bit Int)

(declare-const crtp_pack__crtp_packet__size__position Int)

;; crtp_pack__crtp_packet__size__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__size__first__bit))

;; crtp_pack__crtp_packet__size__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__size__first__bit crtp_pack__crtp_packet__size__last__bit))

;; crtp_pack__crtp_packet__size__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__size__position))

(declare-const crtp_pack__crtp_packet__channel__first__bit Int)

(declare-const crtp_pack__crtp_packet__channel__last__bit Int)

(declare-const crtp_pack__crtp_packet__channel__position Int)

;; crtp_pack__crtp_packet__channel__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__channel__first__bit))

;; crtp_pack__crtp_packet__channel__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__channel__first__bit crtp_pack__crtp_packet__channel__last__bit))

;; crtp_pack__crtp_packet__channel__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__channel__position))

(declare-const crtp_pack__crtp_packet__reserved__first__bit Int)

(declare-const crtp_pack__crtp_packet__reserved__last__bit Int)

(declare-const crtp_pack__crtp_packet__reserved__position Int)

;; crtp_pack__crtp_packet__reserved__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__reserved__first__bit))

;; crtp_pack__crtp_packet__reserved__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__reserved__first__bit crtp_pack__crtp_packet__reserved__last__bit))

;; crtp_pack__crtp_packet__reserved__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__reserved__position))

(declare-const crtp_pack__crtp_packet__port__first__bit Int)

(declare-const crtp_pack__crtp_packet__port__last__bit Int)

(declare-const crtp_pack__crtp_packet__port__position Int)

;; crtp_pack__crtp_packet__port__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__port__first__bit))

;; crtp_pack__crtp_packet__port__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__port__first__bit crtp_pack__crtp_packet__port__last__bit))

;; crtp_pack__crtp_packet__port__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__port__position))

(declare-const crtp_pack__crtp_packet__data_1__first__bit Int)

(declare-const crtp_pack__crtp_packet__data_1__last__bit Int)

(declare-const crtp_pack__crtp_packet__data_1__position Int)

;; crtp_pack__crtp_packet__data_1__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__data_1__first__bit))

;; crtp_pack__crtp_packet__data_1__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__data_1__first__bit crtp_pack__crtp_packet__data_1__last__bit))

;; crtp_pack__crtp_packet__data_1__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__data_1__position))

(declare-const crtp_pack__crtp_packet__header__first__bit Int)

(declare-const crtp_pack__crtp_packet__header__last__bit Int)

(declare-const crtp_pack__crtp_packet__header__position Int)

;; crtp_pack__crtp_packet__header__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__header__first__bit))

;; crtp_pack__crtp_packet__header__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__header__first__bit crtp_pack__crtp_packet__header__last__bit))

;; crtp_pack__crtp_packet__header__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__header__position))

(declare-const crtp_pack__crtp_packet__data_2__first__bit Int)

(declare-const crtp_pack__crtp_packet__data_2__last__bit Int)

(declare-const crtp_pack__crtp_packet__data_2__position Int)

;; crtp_pack__crtp_packet__data_2__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__data_2__first__bit))

;; crtp_pack__crtp_packet__data_2__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__data_2__first__bit crtp_pack__crtp_packet__data_2__last__bit))

;; crtp_pack__crtp_packet__data_2__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__data_2__position))

(declare-const crtp_pack__crtp_packet__raw__first__bit Int)

(declare-const crtp_pack__crtp_packet__raw__last__bit Int)

(declare-const crtp_pack__crtp_packet__raw__position Int)

;; crtp_pack__crtp_packet__raw__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet__raw__first__bit))

;; crtp_pack__crtp_packet__raw__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet__raw__first__bit crtp_pack__crtp_packet__raw__last__bit))

;; crtp_pack__crtp_packet__raw__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet__raw__position))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((crtp_packet__ref 0))
(((crtp_packet__refqtmk (crtp_packet__content us_rep)))))
(define-fun crtp_packet__ref_crtp_packet__content__projection ((a crtp_packet__ref)) us_rep 
  (crtp_packet__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__crtp_pack__crtp_packet_handler__packet us_rep)(rec__crtp_pack__crtp_packet_handler__index positive)))))
(define-fun us_split_fields_rec__crtp_pack__crtp_packet_handler__packet__projection ((a us_split_fields2)) us_rep 
  (rec__crtp_pack__crtp_packet_handler__packet a))

(define-fun us_split_fields_rec__crtp_pack__crtp_packet_handler__index__projection ((a us_split_fields2)) positive 
  (rec__crtp_pack__crtp_packet_handler__index a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq1
                            (rec__crtp_pack__crtp_packet_handler__packet
                            (us_split_fields3 a))
                            (rec__crtp_pack__crtp_packet_handler__packet
                            (us_split_fields3 b))) true)
                         (= (to_rep
                            (rec__crtp_pack__crtp_packet_handler__index
                            (us_split_fields3 a))) (to_rep
                                                   (rec__crtp_pack__crtp_packet_handler__index
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const crtp_pack__crtp_packet_handler__packet__first__bit Int)

(declare-const crtp_pack__crtp_packet_handler__packet__last__bit Int)

(declare-const crtp_pack__crtp_packet_handler__packet__position Int)

;; crtp_pack__crtp_packet_handler__packet__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet_handler__packet__first__bit))

;; crtp_pack__crtp_packet_handler__packet__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet_handler__packet__first__bit crtp_pack__crtp_packet_handler__packet__last__bit))

;; crtp_pack__crtp_packet_handler__packet__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet_handler__packet__position))

(declare-const crtp_pack__crtp_packet_handler__index__first__bit Int)

(declare-const crtp_pack__crtp_packet_handler__index__last__bit Int)

(declare-const crtp_pack__crtp_packet_handler__index__position Int)

;; crtp_pack__crtp_packet_handler__index__first__bit_axiom
  (assert (<= 0 crtp_pack__crtp_packet_handler__index__first__bit))

;; crtp_pack__crtp_packet_handler__index__last__bit_axiom
  (assert
  (< crtp_pack__crtp_packet_handler__index__first__bit crtp_pack__crtp_packet_handler__index__last__bit))

;; crtp_pack__crtp_packet_handler__index__position_axiom
  (assert (<= 0 crtp_pack__crtp_packet_handler__index__position))

(declare-fun user_eq11 (us_rep1 us_rep1) Bool)

(declare-const dummy11 us_rep1)

(declare-datatypes ((crtp_packet_handler__ref 0))
(((crtp_packet_handler__refqtmk (crtp_packet_handler__content us_rep1)))))
(define-fun crtp_packet_handler__ref_crtp_packet_handler__content__projection ((a crtp_packet_handler__ref)) us_rep1 
  (crtp_packet_handler__content a))

(define-fun default_initial_assumption ((temp___expr_295 us_rep1)
  (temp___skip_top_level_296 Bool)) Bool (= (to_rep1
                                            (rec__crtp_pack__crtp_packet__repr
                                            (us_split_discrs1
                                            (rec__crtp_pack__crtp_packet_handler__packet
                                            (us_split_fields3
                                            temp___expr_295))))) 0))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const data Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const data_size Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun data_to_byte_array (Int) (Array Int t_uint8))

(declare-fun data_to_byte_array__function_guard ((Array Int t_uint8)
  Int) Bool)

(declare-sort source 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (source source) Bool)

(declare-const dummy12 source)

(declare-datatypes ((source__ref 0))
(((source__refqtmk (source__content source)))))
(define-fun source__ref_source__content__projection ((a source__ref)) source 
  (source__content a))

(define-fun dynamic_invariant3 ((temp___expr_384 Int)
  (temp___is_init_380 Bool) (temp___skip_constant_381 Bool)
  (temp___do_toplevel_382 Bool)
  (temp___do_typ_inv_383 Bool)) Bool (=>
                                     (or (= temp___is_init_380 true)
                                     (<= 0 255)) (in_range8 temp___expr_384)))

;; data_to_byte_array__post_axiom
  (assert true)

(declare-const r6b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r7b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort tcrtp_dataP1 0)

(declare-fun tcrtp_dataP1qtint (tcrtp_dataP1) Int)

;; tcrtp_dataP1'axiom
  (assert
  (forall ((i tcrtp_dataP1))
  (and (<= 1 (tcrtp_dataP1qtint i)) (<= (tcrtp_dataP1qtint i) 30))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 30)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (tcrtp_dataP1 tcrtp_dataP1) Bool)

(declare-const dummy13 tcrtp_dataP1)

(declare-datatypes ((tcrtp_dataP1__ref 0))
(((tcrtp_dataP1__refqtmk (tcrtp_dataP1__content tcrtp_dataP1)))))
(define-fun tcrtp_dataP1__ref_tcrtp_dataP1__content__projection ((a tcrtp_dataP1__ref)) tcrtp_dataP1 
  (tcrtp_dataP1__content a))

(declare-sort t_data 0)

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (t_data t_data) Bool)

(declare-const dummy14 t_data)

(declare-datatypes ((t_data__ref 0))
(((t_data__refqtmk (t_data__content t_data)))))
(define-fun t_data__ref_t_data__content__projection ((a t_data__ref)) t_data 
  (t_data__content a))

(define-fun dynamic_invariant4 ((temp___expr_367 Int)
  (temp___is_init_363 Bool) (temp___skip_constant_364 Bool)
  (temp___do_toplevel_365 Bool)
  (temp___do_typ_inv_366 Bool)) Bool (=>
                                     (or (= temp___is_init_363 true)
                                     (<= 0 255)) (in_range10
                                     temp___expr_367)))

(declare-sort tbyte_array_dataP1 0)

(declare-fun tbyte_array_dataP1qtint (tbyte_array_dataP1) Int)

;; tbyte_array_dataP1'axiom
  (assert
  (forall ((i tbyte_array_dataP1))
  (and (<= 1 (tbyte_array_dataP1qtint i)) (<= (tbyte_array_dataP1qtint i) 1))))

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq15 (tbyte_array_dataP1 tbyte_array_dataP1) Bool)

(declare-const dummy15 tbyte_array_dataP1)

(declare-datatypes ((tbyte_array_dataP1__ref 0))
(((tbyte_array_dataP1__refqtmk
  (tbyte_array_dataP1__content tbyte_array_dataP1)))))
(define-fun tbyte_array_dataP1__ref_tbyte_array_dataP1__content__projection ((a tbyte_array_dataP1__ref)) tbyte_array_dataP1 
  (tbyte_array_dataP1__content a))

(define-fun to_rep6 ((x integer)) Int (integerqtint x))

(declare-fun of_rep6 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep6 (first (mk f l))) f) (= (to_rep6 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int t_uint8))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int t_uint8) (elts a))

(define-fun of_array ((a (Array Int t_uint8)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep6 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep6 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size2 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment4))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep6 (first (rt x)))
                 (to_rep6 (last (rt x))) (elts y) (to_rep6 (first (rt y)))
                 (to_rep6 (last (rt y)))))

(declare-fun user_eq16 (us_t us_t) Bool)

(declare-const dummy16 us_t)

(declare-datatypes ((t_uint8_array__ref 0))
(((t_uint8_array__refqtmk (t_uint8_array__content us_t)))))
(define-fun t_uint8_array__ref_t_uint8_array__content__projection ((a t_uint8_array__ref)) us_t 
  (t_uint8_array__content a))

(declare-datatypes ((t9b__ref 0))
(((t9b__refqtmk (t9b__content us_t)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) us_t (t9b__content
                                                                  a))

(define-fun dynamic_invariant5 ((temp___expr_217 (_ BitVec 8))
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)
  (temp___do_typ_inv_216 Bool)) Bool (=>
                                     (or (= temp___is_init_213 true)
                                     (bvule #x00 #x03)) (in_range5
                                     temp___expr_217)))

(define-fun dynamic_invariant6 ((temp___expr_231 Int)
  (temp___is_init_227 Bool) (temp___skip_constant_228 Bool)
  (temp___do_toplevel_229 Bool)
  (temp___do_typ_inv_230 Bool)) Bool (=>
                                     (or (= temp___is_init_227 true)
                                     (<= 0 6)) (in_range7 temp___expr_231)))

(define-fun dynamic_invariant7 ((temp___expr_224 (_ BitVec 8))
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)
  (temp___do_typ_inv_223 Bool)) Bool (=>
                                     (or (= temp___is_init_220 true)
                                     (bvule #x00 #x03)) (in_range6
                                     temp___expr_224)))

(define-fun dynamic_invariant8 ((temp___expr_196 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)
  (temp___do_typ_inv_195 Bool)) Bool (=>
                                     (or (= temp___is_init_192 true)
                                     (<= 0 2)) (in_range4 temp___expr_196)))

(define-fun default_initial_assumption1 ((temp___expr_269 us_rep)
  (temp___skip_top_level_270 Bool)) Bool (= (to_rep1
                                            (rec__crtp_pack__crtp_packet__repr
                                            (us_split_discrs1
                                            temp___expr_269))) 0))

(define-fun dynamic_invariant9 ((temp___expr_210 (_ BitVec 8))
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool) (temp___do_typ_inv_209 Bool)) Bool true)

;; data_size__def_axiom
  (assert (= data_size 1))

(assert
;; defqtvc
 ;; File "console_pack.adb", line 40, characters 0-0
  (not
  (forall ((handler__split_fields us_split_fields2) (o Int))
  (=> (dynamic_invariant4 data true false true true)
  (=> (dynamic_invariant data_size true false true true)
  (=>
  (= (to_rep
     (rec__crtp_pack__crtp_packet_handler__index handler__split_fields)) o)
  (in_range1 (+ o 1))))))))
(check-sat)
