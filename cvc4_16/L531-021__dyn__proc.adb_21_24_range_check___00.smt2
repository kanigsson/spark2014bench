;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort ttB 0)

(declare-fun ttBqtint (ttB) Int)

;; ttB'axiom
  (assert
  (forall ((i ttB)) (and (<= (- 128) (ttBqtint i)) (<= (ttBqtint i) 127))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (ttB ttB) Bool)

(declare-const dummy1 ttB)

(declare-datatypes ((ttB__ref 0))
(((ttB__refqtmk (ttB__content ttB)))))
(define-fun ttB__ref_ttB__content__projection ((a ttB__ref)) ttB (ttB__content
                                                                 a))

(define-fun to_rep ((x ttB)) Int (ttBqtint x))

(declare-fun of_rep (Int) ttB)

;; inversion_axiom
  (assert
  (forall ((x ttB)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x ttB)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort t 0)

(declare-fun tqtint (t) Int)

;; t'axiom
  (assert (forall ((i t)) (and (<= 1 (tqtint i)) (<= (tqtint i) 10))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (t t) Bool)

(declare-const dummy2 t)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content t)))))
(define-fun t__ref_t__content__projection ((a t__ref)) t (t__content a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t1 0)

(declare-fun first (t1) ttB)

(declare-fun last (t1) ttB)

(declare-fun mk (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int integer))(rt t1)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((a__ref 0))
(((a__refqtmk (a__content us_t)))))
(define-fun a__ref_a__content__projection ((a a__ref)) us_t (a__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun f (Int) us_t)

(declare-fun f__function_guard (us_t Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_190 us_t)
  (temp___is_init_186 Bool) (temp___skip_constant_187 Bool)
  (temp___do_toplevel_188 Bool)
  (temp___do_typ_inv_189 Bool)) Bool (=>
                                     (not (= temp___skip_constant_187 true))
                                     (dynamic_property 1 10
                                     (first1 temp___expr_190)
                                     (last1 temp___expr_190))))

;; f__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (f x)))
     (=> (f__function_guard result x) (dynamic_invariant1 result true false
     true true)))) :pattern ((f x)) )))

(declare-const item__first ttB)

(declare-const item__last ttB)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep2 ((x t)) Int (tqtint x))

(declare-fun of_rep2 (Int) t)

;; inversion_axiom
  (assert
  (forall ((x t)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x t)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((t4b__ref 0))
(((t4b__refqtmk (t4b__content us_t)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_t (t4b__content
                                                                  a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__proc__r__length t)))))
(define-fun us_split_discrs_rec__proc__r__length__projection ((a us_split_discrs)) t 
  (rec__proc__r__length a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__proc__r__contents us_t)))))
(define-fun us_split_fields_rec__proc__r__contents__projection ((a us_split_fields)) us_t 
  (rec__proc__r__contents a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__proc__r__length (us_split_discrs1 a))) 
                        (to_rep2 (rec__proc__r__length (us_split_discrs1 b))))
                        (= (bool_eq1
                           (rec__proc__r__contents (us_split_fields1 a))
                           (rec__proc__r__contents (us_split_fields1 b))) true))
                   true false))

(define-fun in_range3 ((rec__proc__r__length1 Int)
  (a us_split_discrs)) Bool (= rec__proc__r__length1 (to_rep2
                                                     (rec__proc__r__length a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const proc__r__length__first__bit Int)

(declare-const proc__r__length__last__bit Int)

(declare-const proc__r__length__position Int)

;; proc__r__length__first__bit_axiom
  (assert (<= 0 proc__r__length__first__bit))

;; proc__r__length__last__bit_axiom
  (assert (< proc__r__length__first__bit proc__r__length__last__bit))

;; proc__r__length__position_axiom
  (assert (<= 0 proc__r__length__position))

(declare-const proc__r__contents__first__bit Int)

(declare-const proc__r__contents__last__bit Int)

(declare-const proc__r__contents__position Int)

;; proc__r__contents__first__bit_axiom
  (assert (<= 0 proc__r__contents__first__bit))

;; proc__r__contents__last__bit_axiom
  (assert (< proc__r__contents__first__bit proc__r__contents__last__bit))

;; proc__r__contents__position_axiom
  (assert (<= 0 proc__r__contents__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((r__ref 0))
(((r__refqtmk (r__content us_rep)))))
(define-fun r__ref_r__content__projection ((a r__ref)) us_rep (r__content a))

(declare-const dr__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_196 us_rep)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)
  (temp___do_typ_inv_195 Bool)) Bool (let ((temp___197 (rec__proc__r__length
                                                       (us_split_discrs1
                                                       temp___expr_196))))
                                     (and (dynamic_property 1
                                     (to_rep2 temp___197)
                                     (first1
                                     (rec__proc__r__contents
                                     (us_split_fields1 temp___expr_196)))
                                     (last1
                                     (rec__proc__r__contents
                                     (us_split_fields1 temp___expr_196))))
                                     (and
                                     (= (first1
                                        (rec__proc__r__contents
                                        (us_split_fields1 temp___expr_196))) 1)
                                     (= (last1
                                        (rec__proc__r__contents
                                        (us_split_fields1 temp___expr_196))) 
                                     (to_rep2 temp___197))))))

(declare-datatypes ((t14b__ref 0))
(((t14b__refqtmk (t14b__content us_t)))))
(define-fun t14b__ref_t14b__content__projection ((a t14b__ref)) us_t 
  (t14b__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__proc__r__contents1 us_t)))))
(define-fun us_split_fields_rec__proc__r__contents__2__projection ((a us_split_fields2)) us_t 
  (rec__proc__r__contents1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (let ((temp___157 (rec__proc__r__contents1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array (to_array temp___157)
                                         (first1 temp___157)
                                         (last1 temp___157))))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___156 (rec__proc__r__contents
                                                           (us_split_fields1
                                                           r))))
                                         (of_array (to_array temp___156)
                                         (first1 temp___156)
                                         (last1 temp___156))))))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__proc__r__length (us_split_discrs2 a))) 
                         (to_rep2
                         (rec__proc__r__length (us_split_discrs2 b))))
                         (= (bool_eq1
                            (rec__proc__r__contents1 (us_split_fields3 a))
                            (rec__proc__r__contents1 (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const proc__r__length__first__bit1 Int)

(declare-const proc__r__length__last__bit1 Int)

(declare-const proc__r__length__position1 Int)

;; proc__r__length__first__bit_axiom
  (assert (<= 0 proc__r__length__first__bit1))

;; proc__r__length__last__bit_axiom
  (assert (< proc__r__length__first__bit1 proc__r__length__last__bit1))

;; proc__r__length__position_axiom
  (assert (<= 0 proc__r__length__position1))

(declare-const proc__r__contents__first__bit1 Int)

(declare-const proc__r__contents__last__bit1 Int)

(declare-const proc__r__contents__position1 Int)

;; proc__r__contents__first__bit_axiom
  (assert (<= 0 proc__r__contents__first__bit1))

;; proc__r__contents__last__bit_axiom
  (assert (< proc__r__contents__first__bit1 proc__r__contents__last__bit1))

;; proc__r__contents__position_axiom
  (assert (<= 0 proc__r__contents__position1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((t13b__ref 0))
(((t13b__refqtmk (t13b__content us_rep1)))))
(define-fun t13b__ref_t13b__content__projection ((a t13b__ref)) us_rep1 
  (t13b__content a))

(define-fun dynamic_invariant3 ((temp___expr_183 Int)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)
  (temp___do_typ_inv_182 Bool)) Bool (=>
                                     (or (= temp___is_init_179 true)
                                     (<= 1 10)) (in_range2 temp___expr_183)))

(assert
;; defqtvc
 ;; File "proc.adb", line 19, characters 0-0
  (not
  (let ((proc__p__item__assume (f 3)))
  (=>
  (and (f__function_guard proc__p__item__assume 3) (dynamic_invariant1
  proc__p__item__assume true false true true))
  (forall ((item (Array Int integer)))
  (=> (= item (to_array proc__p__item__assume))
  (=> (= (to_rep item__first) (first1 proc__p__item__assume))
  (=> (= (to_rep item__last) (last1 proc__p__item__assume))
  (=> (dynamic_property 1 10 (to_rep item__first) (to_rep item__last))
  (=>
  (ite (<= (to_rep item__first) (to_rep item__last))
  (and (<= 1 (length (to_rep item__first) (to_rep item__last)))
  (= (- (to_rep item__last) (to_rep item__first)) (- (length
                                                     (to_rep item__first)
                                                     (to_rep item__last)) 1)))
  (< (length (to_rep item__first) (to_rep item__last)) 1))
  (forall ((o Int))
  (=> (= (to_rep item__last) o)
  (forall ((o1 Int))
  (=> (= (to_rep item__first) o1)
  (forall ((o2 Int))
  (=> (= (to_rep item__first) o2)
  (forall ((o3 Int))
  (=> (= (to_rep item__last) o3)
  (forall ((o4 Int))
  (=> (= (to_rep item__first) o4) (in_range2 (length o4 o3))))))))))))))))))))))
(check-sat)
