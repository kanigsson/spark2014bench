;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_string (us_image Int) us_t)

(declare-fun from_string (us_t) us_image)

;; to_string__first
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (= (first1 (to_string x s)) 1) :pattern ((to_string x s)) ))))

;; to_string__length
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (=> (<= 0 s) (<= (length1 (to_string x s)) s)) :pattern ((to_string x s)) ))))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range3
                                    temp___expr_39)))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (character Int (Array Int character) Int
  Int) (Array Int character))

;; concat_singleton_left_def
  (assert
  (forall ((a character))
  (forall ((b (Array Int character)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int character) Int Int
  character) (Array Int character))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((b character))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (character Int
  character) (Array Int character))

;; concat_singletons_def
  (assert
  (forall ((a character) (b character))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(declare-fun lcp (Int Int (Array Int integer)) Int)

(declare-fun lcp__function_guard (Int Int Int (Array Int integer)) Bool)

;; lcp__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((longest_common_prefix__a (Array Int integer)))
  (! (=>
     (and
     (and (dynamic_invariant1 x true true true true) (dynamic_invariant1 y
     true true true true))
     (and (and (<= 1 x) (<= x 1000)) (and (<= 1 y) (<= y 1000))))
     (let ((result (lcp x y longest_common_prefix__a)))
     (=> (lcp__function_guard result x y longest_common_prefix__a)
     (dynamic_invariant result true false true true)))) :pattern ((lcp x y
                                                                  longest_common_prefix__a)) ))))

(declare-const c9b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c14b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c19b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c24b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c29b Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun temp_____aggregate_def_212 (Int Int Int Int Int Int Int Int Int
  Int Int) (Array Int integer))

(declare-fun temp___String_Literal_226 (tuple0) (Array Int character))

;; temp___String_Literal_226__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_226 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_226 us_void_param)) )))

(declare-fun temp___String_Literal_229 (tuple0) (Array Int character))

;; temp___String_Literal_229__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_229 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_229 us_void_param)) )))

(declare-fun temp___String_Literal_232 (tuple0) (Array Int character))

;; temp___String_Literal_232__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 2)) 32))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 3)) 69)
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 4)) 120))
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 5)) 112))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 6)) 101)
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 8)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 9)) 101)
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 11)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 12)) 58)
     (= (to_rep (select (temp___String_Literal_232 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_232 us_void_param)) )))

(declare-fun temp___String_Literal_237 (tuple0) (Array Int character))

;; temp___String_Literal_237__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_237 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_237 us_void_param)) )))

(declare-fun temp___String_Literal_240 (tuple0) (Array Int character))

;; temp___String_Literal_240__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_240 us_void_param)) )))

(declare-fun temp___String_Literal_243 (tuple0) (Array Int character))

;; temp___String_Literal_243__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 2)) 32))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 3)) 69)
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 4)) 120))
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 5)) 112))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 6)) 101)
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 8)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 9)) 101)
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 11)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 12)) 58)
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_243 us_void_param)) )))

(declare-fun temp___String_Literal_248 (tuple0) (Array Int character))

;; temp___String_Literal_248__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_248 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_248 us_void_param)) )))

(declare-fun temp___String_Literal_251 (tuple0) (Array Int character))

;; temp___String_Literal_251__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_251 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_251 us_void_param)) )))

(declare-fun temp___String_Literal_254 (tuple0) (Array Int character))

;; temp___String_Literal_254__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 2)) 32))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 3)) 69)
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 4)) 120))
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 5)) 112))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 6)) 101)
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 8)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 9)) 101)
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 11)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 12)) 58)
     (= (to_rep (select (temp___String_Literal_254 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_254 us_void_param)) )))

(declare-fun temp___String_Literal_259 (tuple0) (Array Int character))

;; temp___String_Literal_259__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_259 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_259 us_void_param)) )))

(declare-fun temp___String_Literal_262 (tuple0) (Array Int character))

;; temp___String_Literal_262__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_262 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_262 us_void_param)) )))

(declare-fun temp___String_Literal_265 (tuple0) (Array Int character))

;; temp___String_Literal_265__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 2)) 32))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 3)) 69)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 4)) 120))
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 5)) 112))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 6)) 101)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 8)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 9)) 101)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 11)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 12)) 58)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_265 us_void_param)) )))

(declare-fun temp___String_Literal_270 (tuple0) (Array Int character))

;; temp___String_Literal_270__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 4)) 115))
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_270 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_270 us_void_param)) )))

(declare-fun temp___String_Literal_273 (tuple0) (Array Int character))

;; temp___String_Literal_273__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 1)) 70)
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 3)) 105)
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 6)) 58)
     (= (to_rep (select (temp___String_Literal_273 us_void_param) 7)) 32)))) :pattern (
  (temp___String_Literal_273 us_void_param)) )))

(declare-fun temp___String_Literal_276 (tuple0) (Array Int character))

;; temp___String_Literal_276__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 1)) 44)
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 2)) 32))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 3)) 69)
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 4)) 120))
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 5)) 112))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 6)) 101)
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 7)) 99))
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 8)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 9)) 101)
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 10)) 100))
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 11)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 12)) 58)
     (= (to_rep (select (temp___String_Literal_276 us_void_param) 13)) 32))))) :pattern (
  (temp___String_Literal_276 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 2))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 3))

(declare-const rliteral3 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral3) 4))

(declare-const rliteral4 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral4) 5))

(declare-const rliteral5 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral5) 0))

;; def_axiom
  (assert
  (forall ((temp___214 Int) (temp___215 Int) (temp___216 Int)
  (temp___217 Int) (temp___218 Int) (temp___219 Int) (temp___220 Int)
  (temp___221 Int) (temp___222 Int) (temp___223 Int) (temp___224 Int))
  (let ((temp___213 (temp_____aggregate_def_212 temp___214 temp___215
                    temp___216 temp___217 temp___218 temp___219 temp___220
                    temp___221 temp___222 temp___223 temp___224)))
  (=>
  (and
  (and (dynamic_invariant2 temp___214 true true true true)
  (dynamic_invariant2 temp___215 true true true true))
  (and
  (and
  (and
  (and (dynamic_invariant2 temp___216 true true true true)
  (dynamic_invariant2 temp___217 true true true true)) (dynamic_invariant2
  temp___218 true true true true))
  (and (dynamic_invariant2 temp___219 true true true true)
  (dynamic_invariant2 temp___220 true true true true)))
  (and
  (and (dynamic_invariant2 temp___221 true true true true)
  (dynamic_invariant2 temp___222 true true true true))
  (and (dynamic_invariant2 temp___223 true true true true)
  (dynamic_invariant2 temp___224 true true true true)))))
  (forall ((temp___225 Int))
  (ite (= temp___225 1) (= (select temp___213 temp___225) rliteral)
  (ite (= temp___225 2) (= (select temp___213 temp___225) rliteral1)
  (ite (= temp___225 3) (= (select temp___213 temp___225) rliteral2)
  (ite (= temp___225 4) (= (select temp___213 temp___225) rliteral3)
  (ite (= temp___225 5) (= (select temp___213 temp___225) rliteral4)
  (ite (= temp___225 6) (= (select temp___213 temp___225) rliteral)
  (ite (= temp___225 7) (= (select temp___213 temp___225) rliteral1)
  (ite (= temp___225 8) (= (select temp___213 temp___225) rliteral2)
  (ite (= temp___225 9) (= (select temp___213 temp___225) rliteral3)
  (ite (= temp___225 10) (= (select temp___213 temp___225) rliteral4)
  (= (select temp___213 temp___225) rliteral5))))))))))))))))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (count count) Bool)

(declare-const dummy5 count)

(declare-datatypes ((count__ref 0))
(((count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant5 ((temp___expr_167 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_167)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant5
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant5
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(assert
;; defqtvc
 ;; File "main.adb", line 4, characters 0-0
  (not
  (forall ((result__ Int) (standard_in us_private) (file_system us_private)
  (standard_out us_private) (standard_err us_private) (current_in us_private)
  (current_out us_private) (current_err us_private) (a (Array Int integer)))
  (=> (dynamic_invariant result__ false false true true)
  (=> (= a (temp_____aggregate_def_212 1 2 3 4 5 1 2 3 4 5 0))
  (let ((main__C9b__assume (lcp 1 6 a)))
  (=>
  (and (lcp__function_guard main__C9b__assume 1 6 a) (dynamic_invariant
  main__C9b__assume true false true true))
  (=> (= main__C9b__assume c9b)
  (=> (dynamic_invariant c9b true false true true)
  (forall ((spark__branch Bool) (standard_in1 us_private)
  (file_system1 us_private) (standard_out1 us_private)
  (standard_err1 us_private) (current_in1 us_private)
  (current_out1 us_private) (current_err1 us_private))
  (=>
  (and (= spark__branch (ite (= 5 c9b) true false))
  (ite (= spark__branch true)
  (let ((temp___228 (to_string (attr__ATTRIBUTE_IMAGE3 c9b) 12)))
  (and (in_range1
  (- (+ 1 (+ (length 1 7) (length (first1 temp___228) (last1 temp___228)))) 1))
  (and
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))))
  (and
  (let ((temp___236 (to_string (attr__ATTRIBUTE_IMAGE3 5) 12)))
  (exists ((temp___235 us_t))
  (and
  (let ((temp___234 (temp___String_Literal_232 Tuple0)))
  (let ((temp___231 (to_string (attr__ATTRIBUTE_IMAGE3 c9b) 12)))
  (let ((o (- (+ 1 (+ (length 1 7) (length (first1 temp___231)
                                   (last1 temp___231)))) 1)))
  (and (in_range1 o)
  (let ((temp___233 (of_array
                    (concat1 (temp___String_Literal_229 Tuple0) 1 7
                    (to_array temp___231) (first1 temp___231)
                    (last1 temp___231)) 1 o)))
  (ite (= (length1 temp___233) 0) (= temp___235 (of_array temp___234 1 13))
  (let ((o1 (- (+ (first1 temp___233) (+ (length (first1 temp___233)
                                         (last1 temp___233)) (length 1 13))) 1)))
  (and (in_range1 o1)
  (= temp___235 (of_array
                (concat1 (to_array temp___233) (first1 temp___233)
                (last1 temp___233) temp___234 1 13) (first1 temp___233) o1))))))))))
  (or (= (length1 temp___235) 0) (in_range1
  (- (+ (first1 temp___235) (+ (length (first1 temp___235)
                               (last1 temp___235)) (length
                                                   (first1 temp___236)
                                                   (last1 temp___236)))) 1))))))
  (and
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))))))
  (let ((main__C14b__assume (lcp 1 4 a)))
  (=>
  (and (lcp__function_guard main__C14b__assume 1 4 a) (dynamic_invariant
  main__C14b__assume true false true true))
  (=> (= main__C14b__assume c14b)
  (=> (dynamic_invariant c14b true false true true)
  (forall ((spark__branch1 Bool))
  (=> (= spark__branch1 (ite (= 0 c14b) true false))
  (=> (not (= spark__branch1 true))
  (let ((temp___242 (to_string (attr__ATTRIBUTE_IMAGE3 c14b) 12)))
  (let ((o (- (+ 1 (+ (length 1 7) (length (first1 temp___242)
                                   (last1 temp___242)))) 1)))
  (=> (in_range1 o)
  (let ((temp___244 (of_array
                    (concat1 (temp___String_Literal_240 Tuple0) 1 7
                    (to_array temp___242) (first1 temp___242)
                    (last1 temp___242)) 1 o)))
  (=> (not (= (length1 temp___244) 0)) (in_range1
  (- (+ (first1 temp___244) (+ (length (first1 temp___244)
                               (last1 temp___244)) (length 1 13))) 1)))))))))))))))))))))))))
(check-sat)
