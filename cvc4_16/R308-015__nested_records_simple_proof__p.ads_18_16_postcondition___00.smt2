(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort type_0 0)

(declare-fun type_0qtint (type_0) Int)

;; type_0'axiom
  (assert
  (forall ((i type_0))
  (and (<= (- 2147483648) (type_0qtint i)) (<= (type_0qtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (type_0 type_0) Bool)

(declare-const dummy type_0)

(declare-datatypes ((type_0__ref 0))
(((type_0__refqtmk (type_0__content type_0)))))
(define-fun type_0__ref_type_0__content__projection ((a type_0__ref)) type_0 
  (type_0__content a))

(define-fun to_rep ((x type_0)) Int (type_0qtint x))

(declare-fun of_rep (Int) type_0)

;; inversion_axiom
  (assert
  (forall ((x type_0)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x type_0)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__p__type_1__field_0 type_0)(rec__p__type_1__field_1 type_0)(rec__p__type_1__field_2 type_0)(rec__p__type_1__field_3 type_0)(rec__p__type_1__field_4 type_0)(rec__p__type_1__field_5 type_0)(rec__p__type_1__field_6 type_0)(rec__p__type_1__field_7 type_0)))))
(define-fun us_split_fields_rec__p__type_1__field_0__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_0 a))

(define-fun us_split_fields_rec__p__type_1__field_1__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_1 a))

(define-fun us_split_fields_rec__p__type_1__field_2__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_2 a))

(define-fun us_split_fields_rec__p__type_1__field_3__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_3 a))

(define-fun us_split_fields_rec__p__type_1__field_4__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_4 a))

(define-fun us_split_fields_rec__p__type_1__field_5__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_5 a))

(define-fun us_split_fields_rec__p__type_1__field_6__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_6 a))

(define-fun us_split_fields_rec__p__type_1__field_7__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_7 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__p__type_1__field_0 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_0 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__p__type_1__field_1 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_1 (us_split_fields1 b)))))
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__p__type_1__field_2 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_2 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__p__type_1__field_3 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_3 (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__p__type_1__field_4 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_4 (us_split_fields1 b)))))
                        (and
                        (and
                        (= (to_rep
                           (rec__p__type_1__field_5 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_5 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__p__type_1__field_6 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_6 (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__p__type_1__field_7 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_7 (us_split_fields1 b)))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const p__type_1__field_0__first__bit Int)

(declare-const p__type_1__field_0__last__bit Int)

(declare-const p__type_1__field_0__position Int)

;; p__type_1__field_0__first__bit_axiom
  (assert (<= 0 p__type_1__field_0__first__bit))

;; p__type_1__field_0__last__bit_axiom
  (assert (< p__type_1__field_0__first__bit p__type_1__field_0__last__bit))

;; p__type_1__field_0__position_axiom
  (assert (<= 0 p__type_1__field_0__position))

(declare-const p__type_1__field_1__first__bit Int)

(declare-const p__type_1__field_1__last__bit Int)

(declare-const p__type_1__field_1__position Int)

;; p__type_1__field_1__first__bit_axiom
  (assert (<= 0 p__type_1__field_1__first__bit))

;; p__type_1__field_1__last__bit_axiom
  (assert (< p__type_1__field_1__first__bit p__type_1__field_1__last__bit))

;; p__type_1__field_1__position_axiom
  (assert (<= 0 p__type_1__field_1__position))

(declare-const p__type_1__field_2__first__bit Int)

(declare-const p__type_1__field_2__last__bit Int)

(declare-const p__type_1__field_2__position Int)

;; p__type_1__field_2__first__bit_axiom
  (assert (<= 0 p__type_1__field_2__first__bit))

;; p__type_1__field_2__last__bit_axiom
  (assert (< p__type_1__field_2__first__bit p__type_1__field_2__last__bit))

;; p__type_1__field_2__position_axiom
  (assert (<= 0 p__type_1__field_2__position))

(declare-const p__type_1__field_3__first__bit Int)

(declare-const p__type_1__field_3__last__bit Int)

(declare-const p__type_1__field_3__position Int)

;; p__type_1__field_3__first__bit_axiom
  (assert (<= 0 p__type_1__field_3__first__bit))

;; p__type_1__field_3__last__bit_axiom
  (assert (< p__type_1__field_3__first__bit p__type_1__field_3__last__bit))

;; p__type_1__field_3__position_axiom
  (assert (<= 0 p__type_1__field_3__position))

(declare-const p__type_1__field_4__first__bit Int)

(declare-const p__type_1__field_4__last__bit Int)

(declare-const p__type_1__field_4__position Int)

;; p__type_1__field_4__first__bit_axiom
  (assert (<= 0 p__type_1__field_4__first__bit))

;; p__type_1__field_4__last__bit_axiom
  (assert (< p__type_1__field_4__first__bit p__type_1__field_4__last__bit))

;; p__type_1__field_4__position_axiom
  (assert (<= 0 p__type_1__field_4__position))

(declare-const p__type_1__field_5__first__bit Int)

(declare-const p__type_1__field_5__last__bit Int)

(declare-const p__type_1__field_5__position Int)

;; p__type_1__field_5__first__bit_axiom
  (assert (<= 0 p__type_1__field_5__first__bit))

;; p__type_1__field_5__last__bit_axiom
  (assert (< p__type_1__field_5__first__bit p__type_1__field_5__last__bit))

;; p__type_1__field_5__position_axiom
  (assert (<= 0 p__type_1__field_5__position))

(declare-const p__type_1__field_6__first__bit Int)

(declare-const p__type_1__field_6__last__bit Int)

(declare-const p__type_1__field_6__position Int)

;; p__type_1__field_6__first__bit_axiom
  (assert (<= 0 p__type_1__field_6__first__bit))

;; p__type_1__field_6__last__bit_axiom
  (assert (< p__type_1__field_6__first__bit p__type_1__field_6__last__bit))

;; p__type_1__field_6__position_axiom
  (assert (<= 0 p__type_1__field_6__position))

(declare-const p__type_1__field_7__first__bit Int)

(declare-const p__type_1__field_7__last__bit Int)

(declare-const p__type_1__field_7__position Int)

;; p__type_1__field_7__first__bit_axiom
  (assert (<= 0 p__type_1__field_7__first__bit))

;; p__type_1__field_7__last__bit_axiom
  (assert (< p__type_1__field_7__first__bit p__type_1__field_7__last__bit))

;; p__type_1__field_7__position_axiom
  (assert (<= 0 p__type_1__field_7__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((type_1__ref 0))
(((type_1__refqtmk (type_1__content us_rep)))))
(define-fun type_1__ref_type_1__content__projection ((a type_1__ref)) us_rep 
  (type_1__content a))

(define-fun dynamic_invariant ((temp___expr_164 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)
  (temp___do_typ_inv_163 Bool)) Bool (=>
                                     (or (= temp___is_init_160 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_164)))

(declare-const rliteral type_0)

;; rliteral_axiom
  (assert (= (type_0qtint rliteral) 0))

(assert
;; defqtvc
 ;; File "p.ads", line 16, characters 0-0
  (not
  (forall ((p__create_type_1__result us_split_fields))
  (=>
  (= p__create_type_1__result (us_split_fieldsqtmk rliteral rliteral 
                              rliteral rliteral rliteral rliteral rliteral
                              rliteral))
  (= (to_rep (rec__p__type_1__field_0 p__create_type_1__result)) 0)))))
(check-sat)
(exit)
