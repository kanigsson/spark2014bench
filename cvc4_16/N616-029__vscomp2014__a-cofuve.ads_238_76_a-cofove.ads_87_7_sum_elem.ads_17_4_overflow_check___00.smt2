;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep 
  (sequence__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant ((temp___expr_291 Int)
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)
  (temp___do_typ_inv_290 Bool)) Bool (=>
                                     (or (= temp___is_init_287 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_291)))

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun last ((container us_rep)) Int (+ (- 1) (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 5))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (index index) Bool)

(declare-const dummy2 index)

(declare-datatypes ((index__ref 0))
(((index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(define-fun to_rep ((x index)) Int (indexqtint x))

(declare-fun of_rep (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__sum_elem__interval__first index)(rec__sum_elem__interval__last index)))))
(define-fun us_split_fields_rec__sum_elem__interval__first__projection ((a us_split_fields)) index 
  (rec__sum_elem__interval__first a))

(define-fun us_split_fields_rec__sum_elem__interval__last__projection ((a us_split_fields)) index 
  (rec__sum_elem__interval__last a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__sum_elem__interval__first
                            (us_split_fields1 a))) (to_rep
                                                   (rec__sum_elem__interval__first
                                                   (us_split_fields1 b))))
                         (= (to_rep
                            (rec__sum_elem__interval__last
                            (us_split_fields1 a))) (to_rep
                                                   (rec__sum_elem__interval__last
                                                   (us_split_fields1 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const sum_elem__interval__first__first__bit Int)

(declare-const sum_elem__interval__first__last__bit Int)

(declare-const sum_elem__interval__first__position Int)

;; sum_elem__interval__first__first__bit_axiom
  (assert (<= 0 sum_elem__interval__first__first__bit))

;; sum_elem__interval__first__last__bit_axiom
  (assert
  (< sum_elem__interval__first__first__bit sum_elem__interval__first__last__bit))

;; sum_elem__interval__first__position_axiom
  (assert (<= 0 sum_elem__interval__first__position))

(declare-const sum_elem__interval__last__first__bit Int)

(declare-const sum_elem__interval__last__last__bit Int)

(declare-const sum_elem__interval__last__position Int)

;; sum_elem__interval__last__first__bit_axiom
  (assert (<= 0 sum_elem__interval__last__first__bit))

;; sum_elem__interval__last__last__bit_axiom
  (assert
  (< sum_elem__interval__last__first__bit sum_elem__interval__last__last__bit))

;; sum_elem__interval__last__position_axiom
  (assert (<= 0 sum_elem__interval__last__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((interval__ref 0))
(((interval__refqtmk (interval__content us_rep1)))))
(define-fun interval__ref_interval__content__projection ((a interval__ref)) us_rep1 
  (interval__content a))

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content us_rep1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) us_rep1 
  (element_type__content a))

(declare-fun get (us_rep Int) us_rep1)

(declare-fun get__function_guard (us_rep1 us_rep Int) Bool)

(define-fun oeq ((left us_rep)
  (right us_rep)) Bool (and (= (length left) (length right)) (ite (forall
                                                                  ((n Int))
                                                                  (=>
                                                                  (and
                                                                  (<= 0 n)
                                                                  (<= n 
                                                                  (last left)))
                                                                  (= 
                                                                  (bool_eq1
                                                                  (get left
                                                                  n)
                                                                  (get right
                                                                  n)) true)))
                                                             true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)) )))

(define-fun default_initial_assumption ((temp___expr_339 us_rep)
  (temp___skip_top_level_340 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_340 true))
                                         (= (length temp___expr_339) 0)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= (+ (- 1) result) 10000) (dynamic_invariant result true false
     true true))) :pattern ((length container)) )))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= (- 1) (extended_indexqtint i)) (<= (extended_indexqtint i) 10000))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 1) x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (extended_index extended_index) Bool)

(declare-const dummy4 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_331 Int)
  (temp___is_init_327 Bool) (temp___skip_constant_328 Bool)
  (temp___do_toplevel_329 Bool)
  (temp___do_typ_inv_330 Bool)) Bool (=>
                                     (or (= temp___is_init_327 true)
                                     (<= (- 1) 10000)) (in_range3
                                     temp___expr_331)))

(declare-const left us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const right us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const fst Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const lst Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const offset Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort tcount_typeB 0)

(declare-fun tcount_typeBqtint (tcount_typeB) Int)

;; tcount_typeB'axiom
  (assert
  (forall ((i tcount_typeB))
  (and (<= (- 2147483648) (tcount_typeBqtint i))
  (<= (tcount_typeBqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (tcount_typeB tcount_typeB) Bool)

(declare-const dummy5 tcount_typeB)

(declare-datatypes ((tcount_typeB__ref 0))
(((tcount_typeB__refqtmk (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref_tcount_typeB__content__projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 0 (index_typeqtint i)) (<= (index_typeqtint i) 10000))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (index_type index_type) Bool)

(declare-const dummy6 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__2__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_315 Int)
  (temp___is_init_311 Bool) (temp___skip_constant_312 Bool)
  (temp___do_toplevel_313 Bool)
  (temp___do_typ_inv_314 Bool)) Bool (=>
                                     (or (= temp___is_init_311 true)
                                     (<= 0 10000)) (in_range5
                                     temp___expr_315)))

(define-fun dynamic_invariant3 ((temp___expr_245 Int)
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)
  (temp___do_typ_inv_244 Bool)) Bool (=>
                                     (or (= temp___is_init_241 true)
                                     (<= 0 5)) (in_range2 temp___expr_245)))

;; get__post_axiom
  (assert true)

(assert
;; defqtvc
 ;; File "a-cofuve.ads", line 217, characters 0-0
  (not
  (forall ((o Bool))
  (=> (dynamic_invariant2 fst true false true true)
  (=> (dynamic_invariant1 lst true false true true)
  (=> (in_range4 offset)
  (=>
  (let ((o1 left))
  (let ((o2 (last o1)))
  (and
  (and (dynamic_invariant1 o2 true false true true)
  (= o2 (+ (- 1) (length o1))))
  (ite (<= lst o2)
  (and (or (not (< offset 0)) (in_range4 (- (- 32768) offset)))
  (= o (ite (< offset 0) (ite (<= (- (- 32768) offset) 0) true false)
       (distinct 1 0))))
  (= o false)))))
  (=> (= o true)
  (=> (<= fst lst)
  (let ((o1 lst))
  (=> (in_range4 o1)
  (let ((o2 (length right)))
  (=>
  (and (dynamic_invariant o2 true false true true) (<= (+ (- 1) o2) 10000))
  (in_range4 (- (+ (- 1) o2) o1)))))))))))))))
(check-sat)
