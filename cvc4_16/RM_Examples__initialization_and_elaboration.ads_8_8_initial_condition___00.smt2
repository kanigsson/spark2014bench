(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun get_it (us_private) Int)

(declare-fun get_it__function_guard (Int us_private) Bool)

;; get_it__post_axiom
  (assert
  (forall
  ((ada___initialization_and_elaboration__private_child__state us_private))
  (! (let ((result (get_it
                   ada___initialization_and_elaboration__private_child__state)))
     (=> (get_it__function_guard result
     ada___initialization_and_elaboration__private_child__state)
     (dynamic_invariant result true false true true))) :pattern ((get_it
                                                                 ada___initialization_and_elaboration__private_child__state)) )))

(declare-fun get_something (us_private) Int)

(declare-fun get_something__function_guard (Int us_private) Bool)

;; get_something__post_axiom
  (assert
  (forall
  ((ada___initialization_and_elaboration__private_child__state us_private))
  (! (let ((result (get_something
                   ada___initialization_and_elaboration__private_child__state)))
     (=> (get_something__function_guard result
     ada___initialization_and_elaboration__private_child__state)
     (dynamic_invariant result true false true true))) :pattern ((get_something
                                                                 ada___initialization_and_elaboration__private_child__state)) )))

(assert
;; defqtvc
 ;; File "initialization_and_elaboration.ads", line 4, characters 0-0
  (not
  (forall ((vp Int) (state us_private) (v Int))
  (=> (dynamic_invariant vp true false true true)
  (=> (= v vp)
  (=> (dynamic_invariant v true false true true)
  (=>
  (forall ((state1 us_private)) (get_something__function_guard
  (get_something state1) state1))
  (=> (= (get_something state) 0)
  (let ((o (get_it state)))
  (=>
  (and (get_it__function_guard o state) (dynamic_invariant o true false true
  true)) (= v vp)))))))))))
(check-sat)
(exit)
