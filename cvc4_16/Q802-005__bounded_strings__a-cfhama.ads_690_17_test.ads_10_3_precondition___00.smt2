;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 32))

(declare-fun user_eq (hash_type hash_type) Bool)

(declare-const dummy hash_type)

(declare-datatypes ((hash_type__ref 0))
(((hash_type__refqtmk (hash_type__content hash_type)))))
(define-fun hash_type__ref_hash_type__content__projection ((a hash_type__ref)) hash_type 
  (hash_type__content a))

(declare-fun to_rep (hash_type) (_ BitVec 32))

(declare-fun of_rep ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep1 ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__test__scales_map__map__capacity count_type)(rec__test__scales_map__map__modulus hash_type)))))
(define-fun us_split_discrs_rec__test__scales_map__map__capacity__projection ((a us_split_discrs)) count_type 
  (rec__test__scales_map__map__capacity a))

(define-fun us_split_discrs_rec__test__scales_map__map__modulus__projection ((a us_split_discrs)) hash_type 
  (rec__test__scales_map__map__modulus a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__test__scales_map__map us_main_type)))))
(define-fun us_split_fields_rec__test__scales_map__map__projection ((a us_split_fields)) us_main_type 
  (rec__test__scales_map__map a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__test__scales_map__map__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__test__scales_map__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__test__scales_map__map__modulus
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__test__scales_map__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__test__scales_map__map (us_split_fields1 a))
                           (rec__test__scales_map__map (us_split_fields1 b))) true))
                   true false))

(define-fun in_range1 ((rec__test__scales_map__map__capacity1 Int)
  (rec__test__scales_map__map__modulus1 (_ BitVec 32))
  (a us_split_discrs)) Bool (and
                            (= rec__test__scales_map__map__capacity1 
                            (to_rep1
                            (rec__test__scales_map__map__capacity a)))
                            (= rec__test__scales_map__map__modulus1 (to_rep
                                                                    (rec__test__scales_map__map__modulus
                                                                    a)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test__scales_map__map__capacity__first__bit Int)

(declare-const test__scales_map__map__capacity__last__bit Int)

(declare-const test__scales_map__map__capacity__position Int)

;; test__scales_map__map__capacity__first__bit_axiom
  (assert (<= 0 test__scales_map__map__capacity__first__bit))

;; test__scales_map__map__capacity__last__bit_axiom
  (assert
  (< test__scales_map__map__capacity__first__bit test__scales_map__map__capacity__last__bit))

;; test__scales_map__map__capacity__position_axiom
  (assert (<= 0 test__scales_map__map__capacity__position))

(declare-const test__scales_map__map__modulus__first__bit Int)

(declare-const test__scales_map__map__modulus__last__bit Int)

(declare-const test__scales_map__map__modulus__position Int)

;; test__scales_map__map__modulus__first__bit_axiom
  (assert (<= 0 test__scales_map__map__modulus__first__bit))

;; test__scales_map__map__modulus__last__bit_axiom
  (assert
  (< test__scales_map__map__modulus__first__bit test__scales_map__map__modulus__last__bit))

;; test__scales_map__map__modulus__position_axiom
  (assert (<= 0 test__scales_map__map__modulus__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep (map__content
                                                                    a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__test__scales_map__cursor__node count_type)))))
(define-fun us_split_fields_rec__test__scales_map__cursor__node__projection ((a us_split_fields2)) count_type 
  (rec__test__scales_map__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep1
                            (rec__test__scales_map__cursor__node
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__test__scales_map__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const test__scales_map__cursor__node__first__bit Int)

(declare-const test__scales_map__cursor__node__last__bit Int)

(declare-const test__scales_map__cursor__node__position Int)

;; test__scales_map__cursor__node__first__bit_axiom
  (assert (<= 0 test__scales_map__cursor__node__first__bit))

;; test__scales_map__cursor__node__last__bit_axiom
  (assert
  (< test__scales_map__cursor__node__first__bit test__scales_map__cursor__node__last__bit))

;; test__scales_map__cursor__node__position_axiom
  (assert (<= 0 test__scales_map__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep1)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep1 
  (cursor__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_331 Int)
  (temp___is_init_327 Bool) (temp___skip_constant_328 Bool)
  (temp___do_toplevel_329 Bool)
  (temp___do_typ_inv_330 Bool)) Bool (=>
                                     (or (= temp___is_init_327 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_331)))

;; length__post_axiom
  (assert
  (forall ((container us_rep)) (! (in_range
  (length container)) :pattern ((length container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 us_rep2)))))
(define-fun map__ref_map__content__2__projection ((a map__ref1)) us_rep2 
  (map__content1 a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep3)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep3 
  (sequence__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq6 (natural natural) Bool)

(declare-const dummy6 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep2 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (positive positive) Bool)

(declare-const dummy7 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep3 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep3 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort character 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (character character) Bool)

(declare-const dummy9 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep4 (character) Int)

(declare-fun of_rep4 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range5
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep4 (select a temp___idx_91)) (to_rep4
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep4 (select a temp___idx_91)) (to_rep4
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep5 ((x integer)) Int (integerqtint x))

(declare-fun of_rep5 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range4 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range4 f)
     (=> (in_range4 l)
     (and (= (to_rep5 (first (mk f l))) f) (= (to_rep5 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range4 low)
                   (and (in_range4 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep5 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep5 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment4))

(define-fun bool_eq5 ((x us_t)
  (y us_t)) Bool (bool_eq4 (elts x) (to_rep5 (first (rt x)))
                 (to_rep5 (last (rt x))) (elts y) (to_rep5 (first (rt y)))
                 (to_rep5 (last (rt y)))))

(declare-fun user_eq10 (us_t us_t) Bool)

(declare-const dummy10 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-datatypes ((t2s__ref 0))
(((t2s__refqtmk (t2s__content us_t)))))
(define-fun t2s__ref_t2s__content__projection ((a t2s__ref)) us_t (t2s__content
                                                                  a))

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length positive)))))
(define-fun us_split_discrs_rec__ada___ada___ada__strings__superbounded__super_string__max_length__projection ((a us_split_discrs2)) positive 
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length natural)(rec__ada___ada___ada__strings__superbounded__super_string__data us_t)))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__projection ((a us_split_fields4)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__projection ((a us_split_fields4)) us_t 
  (rec__ada___ada___ada__strings__superbounded__super_string__data a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk2
  (us_split_discrs3 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__projection ((a us_rep4)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__projection ((a us_rep4)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep3
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs3 a))) (to_rep3
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs3 b))))
                         (and
                         (= (to_rep2
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                                   (us_split_fields5 b))))
                         (= (bool_eq5
                            (rec__ada___ada___ada__strings__superbounded__super_string__data
                            (us_split_fields5 a))
                            (rec__ada___ada___ada__strings__superbounded__super_string__data
                            (us_split_fields5 b))) true)))
                    true false))

(define-fun in_range6 ((rec__ada___ada___ada__strings__superbounded__super_string__max_length1 Int)
  (a us_split_discrs2)) Bool (= rec__ada___ada___ada__strings__superbounded__super_string__max_length1 
  (to_rep3
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length a))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position))

(declare-fun user_eq11 (us_rep4 us_rep4) Bool)

(declare-const dummy11 us_rep4)

(declare-datatypes ((super_string__ref 0))
(((super_string__refqtmk (super_string__content us_rep4)))))
(define-fun super_string__ref_super_string__content__projection ((a super_string__ref)) us_rep4 
  (super_string__content a))

(declare-sort tT92sP1 0)

(declare-fun tT92sP1qtint (tT92sP1) Int)

;; tT92sP1'axiom
  (assert
  (forall ((i tT92sP1))
  (and (<= 1 (tT92sP1qtint i)) (<= (tT92sP1qtint i) 128))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq12 (tT92sP1 tT92sP1) Bool)

(declare-const dummy12 tT92sP1)

(declare-datatypes ((tT92sP1__ref 0))
(((tT92sP1__refqtmk (tT92sP1__content tT92sP1)))))
(define-fun tT92sP1__ref_tT92sP1__content__projection ((a tT92sP1__ref)) tT92sP1 
  (tT92sP1__content a))

(declare-const dummy13 (Array Int character))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-fun user_eq13 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length1 natural)(rec__ada___ada___ada__strings__superbounded__super_string__data1 (Array Int character))))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__3__projection ((a us_split_fields6)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__3__projection ((a us_split_fields6)) (Array Int character) 
  (rec__ada___ada___ada__strings__superbounded__super_string__data1 a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk3
  (us_split_discrs4 us_split_discrs2)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep5)) us_split_discrs2 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep5)) us_split_fields6 
  (us_split_fields7 a))

(define-fun to_base ((a us_rep5)) us_rep4 (us_repqtmk2 (us_split_discrs4 a)
                                          (us_split_fieldsqtmk2
                                          (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                          (us_split_fields7 a))
                                          (of_array
                                          (rec__ada___ada___ada__strings__superbounded__super_string__data1
                                          (us_split_fields7 a)) 1 128))))

(define-fun of_base ((r us_rep4)) us_rep5 (us_repqtmk3 (us_split_discrs3 r)
                                          (us_split_fieldsqtmk3
                                          (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                          (us_split_fields5 r))
                                          (let ((temp___156 (rec__ada___ada___ada__strings__superbounded__super_string__data
                                                            (us_split_fields5
                                                            r))))
                                          (to_array temp___156)))))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep3
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs4 a))) (to_rep3
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs4 b))))
                         (and
                         (= (to_rep2
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                                   (us_split_fields7 b))))
                         (= (bool_eq4
                            (rec__ada___ada___ada__strings__superbounded__super_string__data1
                            (us_split_fields7 a)) 1 128
                            (rec__ada___ada___ada__strings__superbounded__super_string__data1
                            (us_split_fields7 b)) 1 128) true)))
                    true false))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position1))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position1))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position1))

(declare-fun user_eq14 (us_rep5 us_rep5) Bool)

(declare-const dummy14 us_rep5)

(declare-datatypes ((bounded_string__ref 0))
(((bounded_string__refqtmk (bounded_string__content us_rep5)))))
(define-fun bounded_string__ref_bounded_string__content__projection ((a bounded_string__ref)) us_rep5 
  (bounded_string__content a))

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content us_rep5)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref)) us_rep5 
  (key_type__content a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep6 0)

(declare-fun bool_eq8 (us_rep6 us_rep6) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq15 (us_rep6 us_rep6) Bool)

(declare-const dummy15 us_rep6)

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 us_rep6)))))
(define-fun map__ref_map__content__3__projection ((a map__ref3)) us_rep6 
  (map__content3 a))

(declare-fun model1 (us_rep) us_rep2)

(declare-fun model__function_guard (us_rep2 us_rep) Bool)

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(declare-fun oeq (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_370 us_rep2)
  (temp___skip_top_level_371 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_371 true))
                                         (and
                                         (= (is_empty temp___expr_370) true)
                                         (= (length2 temp___expr_370) 0))))

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-datatypes ((key_type__ref1 0))
(((key_type__refqtmk1 (key_type__content1 us_rep5)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref1)) us_rep5 
  (key_type__content1 a))

(declare-fun oeq1 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep5 us_rep5) Bool)

(declare-fun has_key (us_rep2 us_rep5) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep5) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content us_rep5)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref)) us_rep5 
  (element_type__content a))

(declare-fun get (us_rep3 Int) us_rep5)

(declare-fun get__function_guard (us_rep5 us_rep3 Int) Bool)

(define-fun in_range8 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Bool)

(define-fun last2 ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last2
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-fun find (us_rep3 us_rep5) Int)

(declare-fun find__function_guard (Int us_rep3 us_rep5) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq16 (extended_index extended_index) Bool)

(declare-const dummy16 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun length4 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-datatypes ((t90s__ref 0))
(((t90s__refqtmk (t90s__content us_t)))))
(define-fun t90s__ref_t90s__content__projection ((a t90s__ref)) us_t 
  (t90s__content a))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length2 natural)(rec__ada___ada___ada__strings__superbounded__super_string__data2 us_t)))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__2__projection ((a us_split_fields8)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__2__projection ((a us_split_fields8)) us_t 
  (rec__ada___ada___ada__strings__superbounded__super_string__data2 a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep7 0))
(((us_repqtmk4
  (us_split_discrs5 us_split_discrs2)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep7)) us_split_discrs2 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep7)) us_split_fields8 
  (us_split_fields9 a))

(define-fun to_base1 ((a us_rep7)) us_rep4 (us_repqtmk2 (us_split_discrs5 a)
                                           (us_split_fieldsqtmk2
                                           (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
                                           (us_split_fields9 a))
                                           (let ((temp___155 (rec__ada___ada___ada__strings__superbounded__super_string__data2
                                                             (us_split_fields9
                                                             a))))
                                           (of_array (to_array temp___155)
                                           (first1 temp___155)
                                           (last1 temp___155))))))

(define-fun of_base1 ((r us_rep4)) us_rep7 (us_repqtmk4 (us_split_discrs3 r)
                                           (us_split_fieldsqtmk4
                                           (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                           (us_split_fields5 r))
                                           (let ((temp___154 (rec__ada___ada___ada__strings__superbounded__super_string__data
                                                             (us_split_fields5
                                                             r))))
                                           (of_array (to_array temp___154)
                                           (first1 temp___154)
                                           (last1 temp___154))))))

(define-fun bool_eq9 ((a us_rep7)
  (b us_rep7)) Bool (ite (and
                         (= (to_rep3
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs5 a))) (to_rep3
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs5 b))))
                         (and
                         (= (to_rep2
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
                                                   (us_split_fields9 b))))
                         (= (bool_eq5
                            (rec__ada___ada___ada__strings__superbounded__super_string__data2
                            (us_split_fields9 a))
                            (rec__ada___ada___ada__strings__superbounded__super_string__data2
                            (us_split_fields9 b))) true)))
                    true false))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position2 Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit2))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit2 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit2))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position2))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position2 Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit2))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit2 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit2))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position2))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position2 Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit2))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit2 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit2))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position2))

(declare-fun user_eq17 (us_rep7 us_rep7) Bool)

(declare-const dummy17 us_rep7)

(declare-datatypes ((tbounded_stringB__ref 0))
(((tbounded_stringB__refqtmk (tbounded_stringB__content us_rep7)))))
(define-fun tbounded_stringB__ref_tbounded_stringB__content__projection ((a tbounded_stringB__ref)) us_rep7 
  (tbounded_stringB__content a))

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last2 left)))
                                                                (= (bool_eq9
                                                                   (of_base1
                                                                   (to_base
                                                                   (get left
                                                                   n)))
                                                                   (of_base1
                                                                   (to_base
                                                                   (get right
                                                                   n)))) true)))
                                                                true false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq5 a b) (oeq2 a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_457 us_rep3)
  (temp___skip_top_level_458 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_458 true))
                                         (= (length3 temp___expr_457) 0)))

(declare-fun positions (us_rep) us_rep6)

(declare-fun positions__function_guard (us_rep6 us_rep) Bool)

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((key_type__ref2 0))
(((key_type__refqtmk2 (key_type__content2 us_rep1)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref2)) us_rep1 
  (key_type__content2 a))

(declare-fun has_key1 (us_rep6 us_rep1) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep6 us_rep1) Bool)

(declare-fun get1 (us_rep6 us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep6 us_rep1) Bool)

(declare-fun length5 (us_rep6) Int)

(declare-fun length__function_guard3 (Int us_rep6) Bool)

(declare-fun oeq3 (us_rep6 us_rep6) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep6 us_rep6) Bool)

(declare-fun is_empty1 (us_rep6) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep6) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep6) (b us_rep6))
  (! (= (user_eq15 a b) (oeq3 a b)) :pattern ((user_eq15 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_532 us_rep6)
  (temp___skip_top_level_533 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_533 true))
                                         (and
                                         (= (is_empty1 temp___expr_532) true)
                                         (= (length5 temp___expr_532) 0))))

(declare-fun oeq4 (us_rep us_rep) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq4 a b)) :pattern ((user_eq2 a b)) )))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(define-fun key ((container us_rep)
  (position us_rep1)) us_rep5 (of_base
                              (to_base
                              (get (keys container)
                              (get1 (positions container) position)))))

(declare-fun key__function_guard (us_rep5 us_rep us_rep1) Bool)

(declare-const container__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range5 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_284 us_rep4)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)
  (temp___do_typ_inv_283 Bool)) Bool (let ((temp___285 (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                       (us_split_discrs3
                                                       temp___expr_284))))
                                     (and (dynamic_property 1
                                     (to_rep3 temp___285)
                                     (first1
                                     (rec__ada___ada___ada__strings__superbounded__super_string__data
                                     (us_split_fields5 temp___expr_284)))
                                     (last1
                                     (rec__ada___ada___ada__strings__superbounded__super_string__data
                                     (us_split_fields5 temp___expr_284))))
                                     (and
                                     (= (first1
                                        (rec__ada___ada___ada__strings__superbounded__super_string__data
                                        (us_split_fields5 temp___expr_284))) 1)
                                     (= (last1
                                        (rec__ada___ada___ada__strings__superbounded__super_string__data
                                        (us_split_fields5 temp___expr_284))) 
                                     (to_rep3 temp___285))))))

(define-fun dynamic_invariant5 ((temp___expr_308 (_ BitVec 32))
  (temp___is_init_304 Bool) (temp___skip_constant_305 Bool)
  (temp___do_toplevel_306 Bool) (temp___do_typ_inv_307 Bool)) Bool true)

(define-fun dynamic_invariant6 ((temp___expr_291 us_rep5)
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)
  (temp___do_typ_inv_290 Bool)) Bool (=>
                                     (not (= temp___skip_constant_288 true))
                                     (in_range6 128
                                     (us_split_discrs3
                                     (to_base temp___expr_291)))))

(define-fun default_initial_assumption3 ((temp___expr_294 us_rep5)
  (temp___skip_top_level_295 Bool)) Bool (and
                                         (= (to_rep3
                                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                            (us_split_discrs4
                                            temp___expr_294))) 128)
                                         (= (to_rep2
                                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                            (us_split_fields7
                                            temp___expr_294))) 0)))

;; oeq__post_axiom
  (assert true)

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk1 (us_split_fieldsqtmk1 rliteral))))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 us_rep5)) (! (in_range
  (find container key1)) :pattern ((find container key1)) ))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq14 a b) (oeq1 (of_base (to_base a)) (of_base (to_base b)))) :pattern (
  (user_eq14 a b)) )))

(declare-fun witness (us_rep2 us_rep5) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep5) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

(declare-fun get2 (us_rep2 us_rep5) Int)

(declare-fun get__function_guard2 (Int us_rep2 us_rep5) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq18 (element_type element_type) Bool)

(declare-const dummy18 element_type)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type 
  (element_type__content1 a))

(define-fun dynamic_invariant7 ((temp___expr_362 Int)
  (temp___is_init_358 Bool) (temp___skip_constant_359 Bool)
  (temp___do_toplevel_360 Bool)
  (temp___do_typ_inv_361 Bool)) Bool (=>
                                     (or (= temp___is_init_358 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range10 temp___expr_362)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 us_rep5)) (! (in_range10
  (get2 container key1)) :pattern ((get2 container key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (in_range
  (length2 container)) :pattern ((length2 container)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 us_rep5)) (! (in_range
  (witness container key1)) :pattern ((witness container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int)) (! (in_range10
  (w_get container witness1)) :pattern ((w_get container witness1)) ))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq14 a b) (oeq1 (of_base (to_base a)) (of_base (to_base b)))) :pattern (
  (user_eq14 a b)) )))

(define-fun dynamic_invariant8 ((temp___expr_449 Int)
  (temp___is_init_445 Bool) (temp___skip_constant_446 Bool)
  (temp___do_toplevel_447 Bool)
  (temp___do_typ_inv_448 Bool)) Bool (=>
                                     (or (= temp___is_init_445 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_449)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (in_range
  (length3 container)) :pattern ((length3 container)) )))

;; last__post_axiom
  (assert
  (forall ((container us_rep3)) (! (in_range9
  (last2 container)) :pattern ((last2 container)) )))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq14 a b) (oeq1 (of_base (to_base a)) (of_base (to_base b)))) :pattern (
  (user_eq14 a b)) )))

(declare-fun witness1 (us_rep6 us_rep1) Int)

(declare-fun witness__function_guard1 (Int us_rep6 us_rep1) Bool)

(declare-fun w_get1 (us_rep6 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep6 Int) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq19 (element_type1 element_type1) Bool)

(declare-const dummy19 element_type1)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type1)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref2)) element_type1 
  (element_type__content2 a))

(define-fun dynamic_invariant9 ((temp___expr_524 Int)
  (temp___is_init_520 Bool) (temp___skip_constant_521 Bool)
  (temp___do_toplevel_522 Bool)
  (temp___do_typ_inv_523 Bool)) Bool (=>
                                     (or (= temp___is_init_520 true)
                                     (<= 1 2147483647)) (in_range11
                                     temp___expr_524)))

;; get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key1 us_rep1)) (! (in_range11
  (get1 container key1)) :pattern ((get1 container key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep6)) (! (in_range
  (length5 container)) :pattern ((length5 container)) )))

(declare-fun has_witness1 (us_rep6 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep6 Int) Bool)

;; witness__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key1 us_rep1)) (! (in_range
  (witness1 container key1)) :pattern ((witness1 container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((witness2 Int)) (! (in_range11
  (w_get1 container witness2)) :pattern ((w_get1 container witness2)) ))))

(assert
;; defqtvc
 ;; File "a-cfhama.ads", line 671, characters 0-0
  (not true))
(check-sat)
