(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes ((t__ref2 0))
(((t__refqtmk2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr3 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr3 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl3 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left4 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right4 v (bv2nat n)))))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv3 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth3 x (bv2nat i)) (nth_bv3 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv3 x ((_ int2bv 64) i)) (nth3 x i)))))

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv3 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub3 a b (bv2nat i) (bv2nat n)) (eq_sub_bv3 a b i n))))

(declare-datatypes ((t__ref3 0))
(((t__refqtmk3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (u16 u16) Bool)

(declare-const dummy1 u16)

(declare-datatypes ((u16__ref 0))
(((u16__refqtmk (u16__content u16)))))
(define-fun u16__ref_u16__content__projection ((a u16__ref)) u16 (u16__content
                                                                 a))

(declare-fun to_rep (u16) (_ BitVec 16))

(declare-fun of_rep ((_ BitVec 16)) u16)

;; inversion_axiom
  (assert
  (forall ((x u16)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int5 ((x u16)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x u16)) (! (uint_in_range1 (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort u32 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (u32 u32) Bool)

(declare-const dummy2 u32)

(declare-datatypes ((u32__ref 0))
(((u32__refqtmk (u32__content u32)))))
(define-fun u32__ref_u32__content__projection ((a u32__ref)) u32 (u32__content
                                                                 a))

(declare-fun to_rep1 (u32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) u32)

;; inversion_axiom
  (assert
  (forall ((x u32)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int6 ((x u32)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x u32)) (! (uint_in_range2 (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort u64 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (u64 u64) Bool)

(declare-const dummy3 u64)

(declare-datatypes ((u64__ref 0))
(((u64__refqtmk (u64__content u64)))))
(define-fun u64__ref_u64__content__projection ((a u64__ref)) u64 (u64__content
                                                                 a))

(declare-fun to_rep2 (u64) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) u64)

;; inversion_axiom
  (assert
  (forall ((x u64)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int7 ((x u64)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x u64)) (! (uint_in_range3 (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort u7 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x7F)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (u7 u7) Bool)

(declare-const dummy4 u7)

(declare-datatypes ((u7__ref 0))
(((u7__refqtmk (u7__content u7)))))
(define-fun u7__ref_u7__content__projection ((a u7__ref)) u7 (u7__content a))

(declare-fun to_rep3 (u7) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) u7)

;; inversion_axiom
  (assert
  (forall ((x u7)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x u7)) (! (in_range2 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x80)))
     (=> (in_range2 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3
                                                               (of_rep3 x))) )))

(define-fun to_int8 ((x u7)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x u7)) (! (in_range_int (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-sort u6 0)

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x3F)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (u6 u6) Bool)

(declare-const dummy5 u6)

(declare-datatypes ((u6__ref 0))
(((u6__refqtmk (u6__content u6)))))
(define-fun u6__ref_u6__content__projection ((a u6__ref)) u6 (u6__content a))

(declare-fun to_rep4 (u6) (_ BitVec 8))

(declare-fun of_rep4 ((_ BitVec 8)) u6)

;; inversion_axiom
  (assert
  (forall ((x u6)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x u6)) (! (in_range3 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x40)))
     (=> (in_range3 y) (= (to_rep4 (of_rep4 x)) y))) :pattern ((to_rep4
                                                               (of_rep4 x))) )))

(define-fun to_int9 ((x u6)) Int (bv2nat (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x u6)) (! (in_range_int1 (to_int9 x)) :pattern ((to_int9 x)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__skein__tweak_value__byte_count_lsb u64)(rec__skein__tweak_value__byte_count_msb u32)(rec__skein__tweak_value__reserved u16)(rec__skein__tweak_value__tree_level u7)(rec__skein__tweak_value__bit_pad Bool)(rec__skein__tweak_value__field_type u6)(rec__skein__tweak_value__first_block Bool)(rec__skein__tweak_value__final_block Bool)))))
(define-fun us_split_fields_rec__skein__tweak_value__byte_count_lsb__projection ((a us_split_fields)) u64 
  (rec__skein__tweak_value__byte_count_lsb a))

(define-fun us_split_fields_rec__skein__tweak_value__byte_count_msb__projection ((a us_split_fields)) u32 
  (rec__skein__tweak_value__byte_count_msb a))

(define-fun us_split_fields_rec__skein__tweak_value__reserved__projection ((a us_split_fields)) u16 
  (rec__skein__tweak_value__reserved a))

(define-fun us_split_fields_rec__skein__tweak_value__tree_level__projection ((a us_split_fields)) u7 
  (rec__skein__tweak_value__tree_level a))

(define-fun us_split_fields_rec__skein__tweak_value__bit_pad__projection ((a us_split_fields)) Bool 
  (rec__skein__tweak_value__bit_pad a))

(define-fun us_split_fields_rec__skein__tweak_value__field_type__projection ((a us_split_fields)) u6 
  (rec__skein__tweak_value__field_type a))

(define-fun us_split_fields_rec__skein__tweak_value__first_block__projection ((a us_split_fields)) Bool 
  (rec__skein__tweak_value__first_block a))

(define-fun us_split_fields_rec__skein__tweak_value__final_block__projection ((a us_split_fields)) Bool 
  (rec__skein__tweak_value__final_block a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__skein__tweak_value__byte_count_lsb
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__skein__tweak_value__byte_count_lsb
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__skein__tweak_value__byte_count_msb
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__skein__tweak_value__byte_count_msb
                                                  (us_split_fields1 b)))))
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__skein__tweak_value__reserved
                           (us_split_fields1 a))) (to_rep
                                                  (rec__skein__tweak_value__reserved
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__skein__tweak_value__tree_level
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__skein__tweak_value__tree_level
                                                  (us_split_fields1 b)))))
                        (= (ite (rec__skein__tweak_value__bit_pad
                                (us_split_fields1 a)) 1 0) (ite (rec__skein__tweak_value__bit_pad
                                                                (us_split_fields1
                                                                b)) 1 0)))
                        (and
                        (and
                        (= (to_rep4
                           (rec__skein__tweak_value__field_type
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__skein__tweak_value__field_type
                                                  (us_split_fields1 b))))
                        (= (ite (rec__skein__tweak_value__first_block
                                (us_split_fields1 a)) 1 0) (ite (rec__skein__tweak_value__first_block
                                                                (us_split_fields1
                                                                b)) 1 0)))
                        (= (ite (rec__skein__tweak_value__final_block
                                (us_split_fields1 a)) 1 0) (ite (rec__skein__tweak_value__final_block
                                                                (us_split_fields1
                                                                b)) 1 0)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const skein__tweak_value__byte_count_lsb__first__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__last__bit Int)

(declare-const skein__tweak_value__byte_count_lsb__position Int)

;; skein__tweak_value__byte_count_lsb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__first__bit))

;; skein__tweak_value__byte_count_lsb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_lsb__first__bit skein__tweak_value__byte_count_lsb__last__bit))

;; skein__tweak_value__byte_count_lsb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_lsb__position))

(declare-const skein__tweak_value__byte_count_msb__first__bit Int)

(declare-const skein__tweak_value__byte_count_msb__last__bit Int)

(declare-const skein__tweak_value__byte_count_msb__position Int)

;; skein__tweak_value__byte_count_msb__first__bit_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__first__bit))

;; skein__tweak_value__byte_count_msb__last__bit_axiom
  (assert
  (< skein__tweak_value__byte_count_msb__first__bit skein__tweak_value__byte_count_msb__last__bit))

;; skein__tweak_value__byte_count_msb__position_axiom
  (assert (<= 0 skein__tweak_value__byte_count_msb__position))

(declare-const skein__tweak_value__reserved__first__bit Int)

(declare-const skein__tweak_value__reserved__last__bit Int)

(declare-const skein__tweak_value__reserved__position Int)

;; skein__tweak_value__reserved__first__bit_axiom
  (assert (<= 0 skein__tweak_value__reserved__first__bit))

;; skein__tweak_value__reserved__last__bit_axiom
  (assert
  (< skein__tweak_value__reserved__first__bit skein__tweak_value__reserved__last__bit))

;; skein__tweak_value__reserved__position_axiom
  (assert (<= 0 skein__tweak_value__reserved__position))

(declare-const skein__tweak_value__tree_level__first__bit Int)

(declare-const skein__tweak_value__tree_level__last__bit Int)

(declare-const skein__tweak_value__tree_level__position Int)

;; skein__tweak_value__tree_level__first__bit_axiom
  (assert (<= 0 skein__tweak_value__tree_level__first__bit))

;; skein__tweak_value__tree_level__last__bit_axiom
  (assert
  (< skein__tweak_value__tree_level__first__bit skein__tweak_value__tree_level__last__bit))

;; skein__tweak_value__tree_level__position_axiom
  (assert (<= 0 skein__tweak_value__tree_level__position))

(declare-const skein__tweak_value__bit_pad__first__bit Int)

(declare-const skein__tweak_value__bit_pad__last__bit Int)

(declare-const skein__tweak_value__bit_pad__position Int)

;; skein__tweak_value__bit_pad__first__bit_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__first__bit))

;; skein__tweak_value__bit_pad__last__bit_axiom
  (assert
  (< skein__tweak_value__bit_pad__first__bit skein__tweak_value__bit_pad__last__bit))

;; skein__tweak_value__bit_pad__position_axiom
  (assert (<= 0 skein__tweak_value__bit_pad__position))

(declare-const skein__tweak_value__field_type__first__bit Int)

(declare-const skein__tweak_value__field_type__last__bit Int)

(declare-const skein__tweak_value__field_type__position Int)

;; skein__tweak_value__field_type__first__bit_axiom
  (assert (<= 0 skein__tweak_value__field_type__first__bit))

;; skein__tweak_value__field_type__last__bit_axiom
  (assert
  (< skein__tweak_value__field_type__first__bit skein__tweak_value__field_type__last__bit))

;; skein__tweak_value__field_type__position_axiom
  (assert (<= 0 skein__tweak_value__field_type__position))

(declare-const skein__tweak_value__first_block__first__bit Int)

(declare-const skein__tweak_value__first_block__last__bit Int)

(declare-const skein__tweak_value__first_block__position Int)

;; skein__tweak_value__first_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__first_block__first__bit))

;; skein__tweak_value__first_block__last__bit_axiom
  (assert
  (< skein__tweak_value__first_block__first__bit skein__tweak_value__first_block__last__bit))

;; skein__tweak_value__first_block__position_axiom
  (assert (<= 0 skein__tweak_value__first_block__position))

(declare-const skein__tweak_value__final_block__first__bit Int)

(declare-const skein__tweak_value__final_block__last__bit Int)

(declare-const skein__tweak_value__final_block__position Int)

;; skein__tweak_value__final_block__first__bit_axiom
  (assert (<= 0 skein__tweak_value__final_block__first__bit))

;; skein__tweak_value__final_block__last__bit_axiom
  (assert
  (< skein__tweak_value__final_block__first__bit skein__tweak_value__final_block__last__bit))

;; skein__tweak_value__final_block__position_axiom
  (assert (<= 0 skein__tweak_value__final_block__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((tweak_value__ref 0))
(((tweak_value__refqtmk (tweak_value__content us_rep)))))
(define-fun tweak_value__ref_tweak_value__content__projection ((a tweak_value__ref)) us_rep 
  (tweak_value__content a))

(declare-sort hash_bit_length 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(define-fun in_range4 ((x (_ BitVec 64))) Bool (and
                                               (bvule #x0000000000000000 x)
                                               (bvule x #xFFFFFFFFFFFFFFF8)))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x)
                                         (<= x 18446744073709551608)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 64))

(declare-fun user_eq7 (hash_bit_length hash_bit_length) Bool)

(declare-const dummy7 hash_bit_length)

(declare-datatypes ((hash_bit_length__ref 0))
(((hash_bit_length__refqtmk (hash_bit_length__content hash_bit_length)))))
(define-fun hash_bit_length__ref_hash_bit_length__content__projection ((a hash_bit_length__ref)) hash_bit_length 
  (hash_bit_length__content a))

(declare-fun to_rep5 (hash_bit_length) (_ BitVec 64))

(declare-fun of_rep5 ((_ BitVec 64)) hash_bit_length)

;; inversion_axiom
  (assert
  (forall ((x hash_bit_length))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range4
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (=> (in_range4 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(define-fun to_int10 ((x hash_bit_length)) Int (bv2nat (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_bit_length)) (! (in_range_int2
  (to_int10 x)) :pattern ((to_int10 x)) )))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__skein__context_header__tweak_words us_rep)(rec__skein__context_header__hash_bit_len hash_bit_length)(rec__skein__context_header__byte_count u64)))))
(define-fun us_split_fields_rec__skein__context_header__tweak_words__projection ((a us_split_fields2)) us_rep 
  (rec__skein__context_header__tweak_words a))

(define-fun us_split_fields_rec__skein__context_header__hash_bit_len__projection ((a us_split_fields2)) hash_bit_length 
  (rec__skein__context_header__hash_bit_len a))

(define-fun us_split_fields_rec__skein__context_header__byte_count__projection ((a us_split_fields2)) u64 
  (rec__skein__context_header__byte_count a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 a))
                            (rec__skein__context_header__tweak_words
                            (us_split_fields3 b))) true)
                         (= (to_rep5
                            (rec__skein__context_header__hash_bit_len
                            (us_split_fields3 a))) (to_rep5
                                                   (rec__skein__context_header__hash_bit_len
                                                   (us_split_fields3 b)))))
                         (= (to_rep2
                            (rec__skein__context_header__byte_count
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__skein__context_header__byte_count
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const skein__context_header__tweak_words__first__bit Int)

(declare-const skein__context_header__tweak_words__last__bit Int)

(declare-const skein__context_header__tweak_words__position Int)

;; skein__context_header__tweak_words__first__bit_axiom
  (assert (<= 0 skein__context_header__tweak_words__first__bit))

;; skein__context_header__tweak_words__last__bit_axiom
  (assert
  (< skein__context_header__tweak_words__first__bit skein__context_header__tweak_words__last__bit))

;; skein__context_header__tweak_words__position_axiom
  (assert (<= 0 skein__context_header__tweak_words__position))

(declare-const skein__context_header__hash_bit_len__first__bit Int)

(declare-const skein__context_header__hash_bit_len__last__bit Int)

(declare-const skein__context_header__hash_bit_len__position Int)

;; skein__context_header__hash_bit_len__first__bit_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__first__bit))

;; skein__context_header__hash_bit_len__last__bit_axiom
  (assert
  (< skein__context_header__hash_bit_len__first__bit skein__context_header__hash_bit_len__last__bit))

;; skein__context_header__hash_bit_len__position_axiom
  (assert (<= 0 skein__context_header__hash_bit_len__position))

(declare-const skein__context_header__byte_count__first__bit Int)

(declare-const skein__context_header__byte_count__last__bit Int)

(declare-const skein__context_header__byte_count__position Int)

;; skein__context_header__byte_count__first__bit_axiom
  (assert (<= 0 skein__context_header__byte_count__first__bit))

;; skein__context_header__byte_count__last__bit_axiom
  (assert
  (< skein__context_header__byte_count__first__bit skein__context_header__byte_count__last__bit))

;; skein__context_header__byte_count__position_axiom
  (assert (<= 0 skein__context_header__byte_count__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ((context_header__ref 0))
(((context_header__refqtmk (context_header__content us_rep1)))))
(define-fun context_header__ref_context_header__content__projection ((a context_header__ref)) us_rep1 
  (context_header__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 64) u64))))))
(declare-fun slide ((Array (_ BitVec 64) u64) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) u64))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) u64)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array (_ BitVec 64) u64)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) u64))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_155 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_155)
                                     (bvule temp___idx_155 a__last))
                                     (= (to_rep2 (select a temp___idx_155)) 
                                     (to_rep2
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_155)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) u64)) (b (Array (_ BitVec 64) u64)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_155 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last))
  (= (to_rep2 (select a temp___idx_155)) (to_rep2
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_155)))))))))))

(declare-const dummy9 (Array (_ BitVec 64) u64))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq9 ((Array (_ BitVec 64) u64)
  (Array (_ BitVec 64) u64)) Bool)

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 8))

(declare-fun user_eq10 (byte byte) Bool)

(declare-const dummy10 byte)

(declare-datatypes ((byte__ref 0))
(((byte__refqtmk (byte__content byte)))))
(define-fun byte__ref_byte__content__projection ((a byte__ref)) byte 
  (byte__content a))

(declare-fun to_rep6 (byte) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep6 (of_rep6 x)) x) :pattern ((to_rep6 (of_rep6 x))) )))

(define-fun to_int11 ((x byte)) Int (bv2nat (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range
  (to_int11 x)) :pattern ((to_int11 x)) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array (_ BitVec 64) byte))))))
(declare-fun slide1 ((Array (_ BitVec 64) byte) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) byte))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) byte)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array (_ BitVec 64) byte)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) byte))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_154 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_154)
                                     (bvule temp___idx_154 a__last))
                                     (= (to_rep6 (select a temp___idx_154)) 
                                     (to_rep6
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) byte)) (b (Array (_ BitVec 64) byte)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep6 (select a temp___idx_154)) (to_rep6
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-const dummy11 (Array (_ BitVec 64) byte))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq11 ((Array (_ BitVec 64) byte)
  (Array (_ BitVec 64) byte)) Bool)

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__skein__skein_512_context__h us_rep1)(rec__skein__skein_512_context__x (Array (_ BitVec 64) u64))(rec__skein__skein_512_context__b (Array (_ BitVec 64) byte))))))
(define-fun us_split_fields_rec__skein__skein_512_context__h__projection ((a us_split_fields4)) us_rep1 
  (rec__skein__skein_512_context__h a))

(define-fun us_split_fields_rec__skein__skein_512_context__x__projection ((a us_split_fields4)) (Array (_ BitVec 64) u64) 
  (rec__skein__skein_512_context__x a))

(define-fun us_split_fields_rec__skein__skein_512_context__b__projection ((a us_split_fields4)) (Array (_ BitVec 64) byte) 
  (rec__skein__skein_512_context__b a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq1
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 a))
                            (rec__skein__skein_512_context__h
                            (us_split_fields5 b))) true)
                         (= (bool_eq2
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 a)) #x0000000000000000
                            #x0000000000000007
                            (rec__skein__skein_512_context__x
                            (us_split_fields5 b)) #x0000000000000000
                            #x0000000000000007) true))
                         (= (bool_eq3
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 a)) #x0000000000000000
                            #x000000000000003F
                            (rec__skein__skein_512_context__b
                            (us_split_fields5 b)) #x0000000000000000
                            #x000000000000003F) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const skein__skein_512_context__h__first__bit Int)

(declare-const skein__skein_512_context__h__last__bit Int)

(declare-const skein__skein_512_context__h__position Int)

;; skein__skein_512_context__h__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__h__first__bit))

;; skein__skein_512_context__h__last__bit_axiom
  (assert
  (< skein__skein_512_context__h__first__bit skein__skein_512_context__h__last__bit))

;; skein__skein_512_context__h__position_axiom
  (assert (<= 0 skein__skein_512_context__h__position))

(declare-const skein__skein_512_context__x__first__bit Int)

(declare-const skein__skein_512_context__x__last__bit Int)

(declare-const skein__skein_512_context__x__position Int)

;; skein__skein_512_context__x__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__x__first__bit))

;; skein__skein_512_context__x__last__bit_axiom
  (assert
  (< skein__skein_512_context__x__first__bit skein__skein_512_context__x__last__bit))

;; skein__skein_512_context__x__position_axiom
  (assert (<= 0 skein__skein_512_context__x__position))

(declare-const skein__skein_512_context__b__first__bit Int)

(declare-const skein__skein_512_context__b__last__bit Int)

(declare-const skein__skein_512_context__b__position Int)

;; skein__skein_512_context__b__first__bit_axiom
  (assert (<= 0 skein__skein_512_context__b__first__bit))

;; skein__skein_512_context__b__last__bit_axiom
  (assert
  (< skein__skein_512_context__b__first__bit skein__skein_512_context__b__last__bit))

;; skein__skein_512_context__b__position_axiom
  (assert (<= 0 skein__skein_512_context__b__position))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ((skein_512_context__ref 0))
(((skein_512_context__refqtmk (skein_512_context__content us_rep2)))))
(define-fun skein_512_context__ref_skein_512_context__content__projection ((a skein_512_context__ref)) us_rep2 
  (skein_512_context__content a))

(declare-const ctx us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS5 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 64))

(declare-fun user_eq13 (unsigned_64 unsigned_64) Bool)

(declare-const dummy13 unsigned_64)

(declare-datatypes ((unsigned_64__ref 0))
(((unsigned_64__refqtmk (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref_unsigned_64__content__projection ((a unsigned_64__ref)) unsigned_64 
  (unsigned_64__content a))

(declare-const hash__first unsigned_64)

(declare-const hash__last unsigned_64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const r14b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c18b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const c20b (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const c26b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const c28b (Array (_ BitVec 64) u64))

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const c29b (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-fun to_rep7 (unsigned_64) (_ BitVec 64))

(declare-fun of_rep7 ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep7 (of_rep7 x)) x) :pattern ((to_rep7 (of_rep7 x))) )))

(define-fun to_int12 ((x unsigned_64)) Int (bv2nat (to_rep7 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range3
  (to_int12 x)) :pattern ((to_int12 x)) )))

(define-fun dynamic_invariant ((temp___expr_241 (_ BitVec 64))
  (temp___is_init_237 Bool) (temp___skip_constant_238 Bool)
  (temp___do_toplevel_239 Bool) (temp___do_typ_inv_240 Bool)) Bool true)

(declare-sort t 0)

(declare-fun first (t) unsigned_64)

(declare-fun last (t) unsigned_64)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep7 (first (mk f l))) f) (= (to_rep7 (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool true)

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array (_ BitVec 64) byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) byte) (elts a))

(define-fun of_array ((a (Array (_ BitVec 64) byte)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep7 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep7 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2nat (last1 a)) (bv2nat (first1 a))) 1)
                                  0))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size2 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment5))

(define-fun bool_eq5 ((x us_t)
  (y us_t)) Bool (bool_eq3 (elts x) (to_rep7 (first (rt x)))
                 (to_rep7 (last (rt x))) (elts y) (to_rep7 (first (rt y)))
                 (to_rep7 (last (rt y)))))

(declare-fun user_eq14 (us_t us_t) Bool)

(declare-const dummy14 us_t)

(declare-datatypes ((byte_seq__ref 0))
(((byte_seq__refqtmk (byte_seq__content us_t)))))
(define-fun byte_seq__ref_byte_seq__content__projection ((a byte_seq__ref)) us_t 
  (byte_seq__content a))

(declare-sort skein_512_state_words_index 0)

(declare-const attr__ATTRIBUTE_MODULUS6 (_ BitVec 64))

(define-fun in_range5 ((x (_ BitVec 64))) Bool (and
                                               (bvule #x0000000000000000 x)
                                               (bvule x #x0000000000000007)))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) (_ BitVec 64))

(declare-fun user_eq15 (skein_512_state_words_index
  skein_512_state_words_index) Bool)

(declare-const dummy15 skein_512_state_words_index)

(declare-datatypes ((skein_512_state_words_index__ref 0))
(((skein_512_state_words_index__refqtmk
  (skein_512_state_words_index__content skein_512_state_words_index)))))
(define-fun skein_512_state_words_index__ref_skein_512_state_words_index__content__projection ((a skein_512_state_words_index__ref)) skein_512_state_words_index 
  (skein_512_state_words_index__content a))

(declare-sort skein_512_block_bytes_index 0)

(declare-const attr__ATTRIBUTE_MODULUS7 (_ BitVec 64))

(define-fun in_range6 ((x (_ BitVec 64))) Bool (and
                                               (bvule #x0000000000000000 x)
                                               (bvule x #x000000000000003F)))

(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 64))

(declare-fun user_eq16 (skein_512_block_bytes_index
  skein_512_block_bytes_index) Bool)

(declare-const dummy16 skein_512_block_bytes_index)

(declare-datatypes ((skein_512_block_bytes_index__ref 0))
(((skein_512_block_bytes_index__refqtmk
  (skein_512_block_bytes_index__content skein_512_block_bytes_index)))))
(define-fun skein_512_block_bytes_index__ref_skein_512_block_bytes_index__content__projection ((a skein_512_block_bytes_index__ref)) skein_512_block_bytes_index 
  (skein_512_block_bytes_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_530 (_ BitVec 8))
  (temp___is_init_526 Bool) (temp___skip_constant_527 Bool)
  (temp___do_toplevel_528 Bool)
  (temp___do_typ_inv_529 Bool)) Bool (=>
                                     (or (= temp___is_init_526 true)
                                     (bvule #x00 #x3F)) (in_range3
                                     temp___expr_530)))

(declare-sort output_byte_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS8 (_ BitVec 64))

(define-fun in_range7 ((x (_ BitVec 64))) Bool (and
                                               (bvule #x0000000000000001 x)
                                               (bvule x #x1FFFFFFFFFFFFFFF)))

(define-fun in_range_int5 ((x Int)) Bool (and (<= 1 x)
                                         (<= x 2305843009213693951)))

(declare-fun attr__ATTRIBUTE_IMAGE12 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) (_ BitVec 64))

(declare-fun user_eq17 (output_byte_count_t output_byte_count_t) Bool)

(declare-const dummy17 output_byte_count_t)

(declare-datatypes ((output_byte_count_t__ref 0))
(((output_byte_count_t__refqtmk
  (output_byte_count_t__content output_byte_count_t)))))
(define-fun output_byte_count_t__ref_output_byte_count_t__content__projection ((a output_byte_count_t__ref)) output_byte_count_t 
  (output_byte_count_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_672 (_ BitVec 64))
  (temp___is_init_668 Bool) (temp___skip_constant_669 Bool)
  (temp___do_toplevel_670 Bool)
  (temp___do_typ_inv_671 Bool)) Bool (=>
                                     (or (= temp___is_init_668 true)
                                     (bvule #x0000000000000001 #x1FFFFFFFFFFFFFFF))
                                     (in_range7 temp___expr_672)))

(declare-sort output_block_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS9 (_ BitVec 64))

(define-fun in_range8 ((x (_ BitVec 64))) Bool (and
                                               (bvule #x0000000000000000 x)
                                               (bvule x #x0080000000000000)))

(define-fun in_range_int6 ((x Int)) Bool (and (<= 0 x)
                                         (<= x 36028797018963968)))

(declare-fun attr__ATTRIBUTE_IMAGE13 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) (_ BitVec 64))

(declare-fun user_eq18 (output_block_count_t output_block_count_t) Bool)

(declare-const dummy18 output_block_count_t)

(declare-datatypes ((output_block_count_t__ref 0))
(((output_block_count_t__refqtmk
  (output_block_count_t__content output_block_count_t)))))
(define-fun output_block_count_t__ref_output_block_count_t__content__projection ((a output_block_count_t__ref)) output_block_count_t 
  (output_block_count_t__content a))

(define-fun dynamic_invariant3 ((temp___expr_679 (_ BitVec 64))
  (temp___is_init_675 Bool) (temp___skip_constant_676 Bool)
  (temp___do_toplevel_677 Bool)
  (temp___do_typ_inv_678 Bool)) Bool (=>
                                     (or (= temp___is_init_675 true)
                                     (bvule #x0000000000000000 #x0080000000000000))
                                     (in_range8 temp___expr_679)))

(declare-sort positive_output_block_count_t 0)

(declare-const attr__ATTRIBUTE_MODULUS10 (_ BitVec 64))

(define-fun in_range9 ((x (_ BitVec 64))) Bool (and
                                               (bvule #x0000000000000001 x)
                                               (bvule x #x0080000000000000)))

(define-fun in_range_int7 ((x Int)) Bool (and (<= 1 x)
                                         (<= x 36028797018963968)))

(declare-fun attr__ATTRIBUTE_IMAGE14 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) (_ BitVec 64))

(declare-fun user_eq19 (positive_output_block_count_t
  positive_output_block_count_t) Bool)

(declare-const dummy19 positive_output_block_count_t)

(declare-datatypes ((positive_output_block_count_t__ref 0))
(((positive_output_block_count_t__refqtmk
  (positive_output_block_count_t__content positive_output_block_count_t)))))
(define-fun positive_output_block_count_t__ref_positive_output_block_count_t__content__projection ((a positive_output_block_count_t__ref)) positive_output_block_count_t 
  (positive_output_block_count_t__content a))

(define-fun dynamic_invariant4 ((temp___expr_686 (_ BitVec 64))
  (temp___is_init_682 Bool) (temp___skip_constant_683 Bool)
  (temp___do_toplevel_684 Bool)
  (temp___do_typ_inv_685 Bool)) Bool (=>
                                     (or (= temp___is_init_682 true)
                                     (bvule #x0000000000000001 #x0080000000000000))
                                     (in_range9 temp___expr_686)))

(declare-datatypes ((t12b__ref 0))
(((t12b__refqtmk (t12b__content us_t)))))
(define-fun t12b__ref_t12b__content__projection ((a t12b__ref)) us_t 
  (t12b__content a))

(declare-fun temp_____aggregate_def_697 ((_ BitVec 8) (_ BitVec 64)
  (_ BitVec 64)) us_t)

(declare-fun temp_____aggregate_def_718 ((_ BitVec 8)) (Array (_ BitVec 64) byte))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant6 ((temp___expr_199 (_ BitVec 8))
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool) (temp___do_typ_inv_198 Bool)) Bool true)

;; def_axiom
  (assert
  (forall ((temp___699 (_ BitVec 8)))
  (forall ((temp___700 (_ BitVec 64)) (temp___701 (_ BitVec 64)))
  (let ((temp___698 (temp_____aggregate_def_697 temp___699 temp___700
                    temp___701)))
  (=> (dynamic_invariant6 temp___699 true true true true)
  (and
  (=> (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFF temp___700
  temp___701)
  (and (= (first1 temp___698) temp___700) (= (last1 temp___698) temp___701)))
  (forall ((temp___702 (_ BitVec 64)))
  (= (to_rep6 (select (to_array temp___698) temp___702)) temp___699))))))))

;; def_axiom
  (assert
  (forall ((temp___720 (_ BitVec 8)))
  (=> (dynamic_invariant6 temp___720 true true true true)
  (forall ((temp___721 (_ BitVec 64)))
  (= (to_rep6 (select (temp_____aggregate_def_718 temp___720) temp___721)) temp___720)))))

(define-fun dynamic_invariant7 ((temp___expr_213 (_ BitVec 16))
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool) (temp___do_typ_inv_212 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_227 (_ BitVec 32))
  (temp___is_init_223 Bool) (temp___skip_constant_224 Bool)
  (temp___do_toplevel_225 Bool) (temp___do_typ_inv_226 Bool)) Bool true)

(define-fun dynamic_invariant9 ((temp___expr_311 us_t)
  (temp___is_init_307 Bool) (temp___skip_constant_308 Bool)
  (temp___do_toplevel_309 Bool)
  (temp___do_typ_inv_310 Bool)) Bool (=>
                                     (not (= temp___skip_constant_308 true))
                                     (dynamic_property #x0000000000000000
                                     #xFFFFFFFFFFFFFFFF
                                     (first1 temp___expr_311)
                                     (last1 temp___expr_311))))

(define-fun dynamic_invariant10 ((temp___expr_437 (_ BitVec 64))
  (temp___is_init_433 Bool) (temp___skip_constant_434 Bool)
  (temp___do_toplevel_435 Bool)
  (temp___do_typ_inv_436 Bool)) Bool (=>
                                     (or (= temp___is_init_433 true)
                                     (bvule #x0000000000000000 #xFFFFFFFFFFFFFFF8))
                                     (in_range4 temp___expr_437)))

(define-fun dynamic_invariant11 ((temp___expr_451 (_ BitVec 64))
  (temp___is_init_447 Bool) (temp___skip_constant_448 Bool)
  (temp___do_toplevel_449 Bool)
  (temp___do_typ_inv_450 Bool)) Bool (=>
                                     (or (= temp___is_init_447 true)
                                     (bvule #x0000000000000000 #x0000000000000007))
                                     (in_range5 temp___expr_451)))

(define-fun dynamic_invariant12 ((temp___expr_475 (_ BitVec 64))
  (temp___is_init_471 Bool) (temp___skip_constant_472 Bool)
  (temp___do_toplevel_473 Bool)
  (temp___do_typ_inv_474 Bool)) Bool (=>
                                     (or (= temp___is_init_471 true)
                                     (bvule #x0000000000000000 #x000000000000003F))
                                     (in_range6 temp___expr_475)))

(define-fun dynamic_invariant13 ((temp___expr_523 (_ BitVec 8))
  (temp___is_init_519 Bool) (temp___skip_constant_520 Bool)
  (temp___do_toplevel_521 Bool)
  (temp___do_typ_inv_522 Bool)) Bool (=>
                                     (or (= temp___is_init_519 true)
                                     (bvule #x00 #x7F)) (in_range2
                                     temp___expr_523)))

(define-fun dynamic_invariant14 ((temp___expr_234 (_ BitVec 64))
  (temp___is_init_230 Bool) (temp___skip_constant_231 Bool)
  (temp___do_toplevel_232 Bool) (temp___do_typ_inv_233 Bool)) Bool true)

;; c20b__def_axiom
  (assert (= c20b #x3F))

(assert
;; defqtvc
 ;; File "skein.ads", line 131, characters 0-0
  (not
  (forall ((n (_ BitVec 64)) (blocks_done (_ BitVec 64))
  (blocks_required (_ BitVec 64)) (byte_count (_ BitVec 64))
  (local_ctx__split_fields us_split_fields4) (o (_ BitVec 64))
  (o1 (_ BitVec 64)))
  (=> (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFF
  (to_rep7 hash__first) (to_rep7 hash__last))
  (=> (dynamic_invariant n false false true true)
  (=> (dynamic_invariant3 blocks_done false false true true)
  (=> (dynamic_invariant4 blocks_required false false true true)
  (=> (dynamic_invariant2 byte_count false false true true)
  (=> (= local_ctx__split_fields (us_split_fields5 ctx))
  (=> (= (to_rep7 hash__last) o)
  (=> (= (to_rep7 hash__first) o1)
  (let ((temp___703 (temp_____aggregate_def_697 #x00 o1 o)))
  (=> (= (first1 temp___703) (to_rep7 hash__first))
  (=> (= (last1 temp___703) (to_rep7 hash__last))
  (let ((temp___705 (of_array (to_array temp___703) (first1 temp___703)
                    (last1 temp___703))))
  (=>
  (ite (bvule (first1 temp___705) (last1 temp___705))
  (and (bvule (to_rep7 hash__first) (to_rep7 hash__last))
  (= (bvsub (last1 temp___705) (first1 temp___705)) (bvsub (to_rep7
                                                           hash__last) 
  (to_rep7 hash__first))))
  (bvult (to_rep7 hash__last) (to_rep7 hash__first)))
  (forall ((o2 (_ BitVec 64)))
  (=> (= (to_rep7 hash__first) o2)
  (forall ((hash (Array (_ BitVec 64) byte)))
  (=> (= hash (slide1 (to_array temp___705) (first1 temp___705) o2))
  (let ((q_ (us_split_fields3
            (rec__skein__skein_512_context__h local_ctx__split_fields))))
  (let ((q_1 (us_split_fields1
             (rec__skein__context_header__tweak_words
             (us_split_fields3
             (rec__skein__skein_512_context__h local_ctx__split_fields))))))
  (forall ((local_ctx__split_fields1 us_split_fields4))
  (=>
  (= local_ctx__split_fields1 (us_split_fieldsqtmk2
                              (us_repqtmk1
                              (us_split_fieldsqtmk1
                              (us_repqtmk
                              (us_split_fieldsqtmk
                              (rec__skein__tweak_value__byte_count_lsb q_1)
                              (rec__skein__tweak_value__byte_count_msb q_1)
                              (rec__skein__tweak_value__reserved q_1)
                              (rec__skein__tweak_value__tree_level q_1)
                              (rec__skein__tweak_value__bit_pad q_1)
                              (rec__skein__tweak_value__field_type q_1)
                              (rec__skein__tweak_value__first_block q_1)
                              (distinct 1 0)))
                              (rec__skein__context_header__hash_bit_len q_)
                              (rec__skein__context_header__byte_count q_)))
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields)
                              (rec__skein__skein_512_context__b
                              local_ctx__split_fields)))
  (forall ((spark__branch Bool) (local_ctx__split_fields2 us_split_fields4))
  (=>
  (exists ((o3 (_ BitVec 64)))
  (and
  (= (to_rep2
     (rec__skein__context_header__byte_count
     (us_split_fields3
     (rec__skein__skein_512_context__h local_ctx__split_fields1)))) o3)
  (and (= spark__branch (ite (bvult o3 #x0000000000000040) true false))
  (ite (= spark__branch true)
  (exists ((skein__skein_512_final__B13b__L_3__R14b__assume (_ BitVec 64)))
  (and
  (= (to_rep2
     (rec__skein__context_header__byte_count
     (us_split_fields3
     (rec__skein__skein_512_context__h local_ctx__split_fields1)))) skein__skein_512_final__B13b__L_3__R14b__assume)
  (and (= skein__skein_512_final__B13b__L_3__R14b__assume r14b)
  (and (dynamic_invariant r14b true false true true)
  (let ((temp___711 r14b))
  (exists ((i (_ BitVec 64)))
  (and (= i temp___711)
  (ite (= (and (ite (bvule temp___711 i) true false) (ite (bvule i #x000000000000003F)
                                                     true false)) true)
  (exists ((local_ctx__split_fields3 us_split_fields4) (i1 (_ BitVec 64)))
  (and
  (= (and (ite (and
               (and
               (= (rec__skein__skein_512_context__h local_ctx__split_fields3) 
               (rec__skein__skein_512_context__h local_ctx__split_fields1))
               (= (rec__skein__skein_512_context__x local_ctx__split_fields3) 
               (rec__skein__skein_512_context__x local_ctx__split_fields1)))
               (forall ((temp___717 (_ BitVec 64)))
               (=>
               (and (bvule #x0000000000000000 temp___717)
               (bvule temp___717 #x000000000000003F))
               (=>
               (or (bvult #x000000000000003F temp___717)
               (or (bvult temp___717 temp___711) (bvule i1 temp___717)))
               (= (select (rec__skein__skein_512_context__b
                          local_ctx__split_fields3) temp___717) (select 
               (rec__skein__skein_512_context__b local_ctx__split_fields1) temp___717))))))
          true false) (ite (and (bvule r14b i1)
                           (bvule i1 #x000000000000003F))
                      true false)) true)
  (exists ((o4 byte))
  (and (= (to_rep6 o4) #x00)
  (and
  (= local_ctx__split_fields2 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields3)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields3)
                              (store (rec__skein__skein_512_context__b
                                     local_ctx__split_fields3) i1 o4)))
  (= i1 #x000000000000003F))))))
  (= local_ctx__split_fields2 local_ctx__split_fields1)))))))))
  (= local_ctx__split_fields2 local_ctx__split_fields1)))))
  (forall ((o3 (_ BitVec 64)))
  (=>
  (= (to_rep5
     (rec__skein__context_header__hash_bit_len
     (us_split_fields3
     (rec__skein__skein_512_context__h local_ctx__split_fields2)))) o3)
  (let ((o4 (bvudiv (bvadd o3 #x0000000000000007) #x0000000000000008)))
  (=> (in_range7 o4)
  (forall ((byte_count1 (_ BitVec 64)))
  (=> (= byte_count1 o4)
  (forall ((local_ctx__split_fields3 us_split_fields4))
  (=>
  (= local_ctx__split_fields3 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields2)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields2)
                              (temp_____aggregate_def_718 #x00)))
  (forall ((x (Array (_ BitVec 64) u64)))
  (=> (= x (rec__skein__skein_512_context__x local_ctx__split_fields3))
  (forall ((blocks_required1 (_ BitVec 64)))
  (=>
  (= blocks_required1 (bvudiv (bvadd byte_count1 #x000000000000003F) #x0000000000000040))
  (forall ((blocks_done1 (_ BitVec 64)))
  (=> (= blocks_done1 #x0000000000000000)
  (forall ((local_ctx__split_fields4 us_split_fields4) (n1 (_ BitVec 64))
  (blocks_done2 (_ BitVec 64)))
  (=>
  (and
  (and (dynamic_invariant3 blocks_done2 false true true true)
  (and
  (= (rec__skein__context_header__hash_bit_len
     (us_split_fields3
     (rec__skein__skein_512_context__h local_ctx__split_fields4))) (rec__skein__context_header__hash_bit_len
                                                                   (us_split_fields3
                                                                   (rec__skein__skein_512_context__h
                                                                   local_ctx__split_fields3))))
  (forall ((temp___769 (_ BitVec 64)))
  (=>
  (and (bvule #x0000000000000000 temp___769)
  (bvule temp___769 #x000000000000003F))
  (=>
  (and (not (= #x0000000000000001 temp___769))
  (and (not (= #x0000000000000004 temp___769))
  (and (not (= #x0000000000000007 temp___769))
  (and (not (= #x0000000000000000 temp___769))
  (and (not (= #x0000000000000003 temp___769))
  (and (not (= #x0000000000000006 temp___769))
  (and (not (= #x0000000000000002 temp___769))
  (not (= #x0000000000000005 temp___769)))))))))
  (= (select (rec__skein__skein_512_context__b local_ctx__split_fields4) temp___769) (select 
  (rec__skein__skein_512_context__b local_ctx__split_fields3) temp___769)))))))
  (dynamic_invariant n1 false true true true))
  (=> (= blocks_done2 c18b)
  (=> (dynamic_invariant c18b true false true true)
  (forall ((o5 byte))
  (=> (= (to_rep6 o5) ((_ extract 7 0) (bvand c18b #x00000000000000FF)))
  (forall ((local_ctx__split_fields5 us_split_fields4))
  (=>
  (= local_ctx__split_fields5 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields4)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields4)
                              (store (rec__skein__skein_512_context__b
                                     local_ctx__split_fields4) #x0000000000000000 o5)))
  (forall ((o6 byte))
  (=>
  (= (to_rep6 o6) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 8)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields6 us_split_fields4))
  (=>
  (= local_ctx__split_fields6 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields5)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields5)
                              (store (rec__skein__skein_512_context__b
                                     local_ctx__split_fields5) #x0000000000000001 o6)))
  (forall ((o7 byte))
  (=>
  (= (to_rep6 o7) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 16)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields7 us_split_fields4))
  (=>
  (= local_ctx__split_fields7 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields6)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields6)
                              (store (rec__skein__skein_512_context__b
                                     local_ctx__split_fields6) #x0000000000000002 o7)))
  (forall ((o8 byte))
  (=>
  (= (to_rep6 o8) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 24)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields8 us_split_fields4))
  (=>
  (= local_ctx__split_fields8 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields7)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields7)
                              (store (rec__skein__skein_512_context__b
                                     local_ctx__split_fields7) #x0000000000000003 o8)))
  (forall ((o9 byte))
  (=>
  (= (to_rep6 o9) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 32)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields9 us_split_fields4))
  (=>
  (= local_ctx__split_fields9 (us_split_fieldsqtmk2
                              (rec__skein__skein_512_context__h
                              local_ctx__split_fields8)
                              (rec__skein__skein_512_context__x
                              local_ctx__split_fields8)
                              (store (rec__skein__skein_512_context__b
                                     local_ctx__split_fields8) #x0000000000000004 o9)))
  (forall ((o10 byte))
  (=>
  (= (to_rep6 o10) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 40)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields10 us_split_fields4))
  (=>
  (= local_ctx__split_fields10 (us_split_fieldsqtmk2
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields9)
                               (rec__skein__skein_512_context__x
                               local_ctx__split_fields9)
                               (store (rec__skein__skein_512_context__b
                                      local_ctx__split_fields9) #x0000000000000005 o10)))
  (forall ((o11 byte))
  (=>
  (= (to_rep6 o11) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 48)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields11 us_split_fields4))
  (=>
  (= local_ctx__split_fields11 (us_split_fieldsqtmk2
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields10)
                               (rec__skein__skein_512_context__x
                               local_ctx__split_fields10)
                               (store (rec__skein__skein_512_context__b
                                      local_ctx__split_fields10) #x0000000000000006 o11)))
  (forall ((o12 byte))
  (=>
  (= (to_rep6 o12) ((_ extract 7 0) (bvand (bvlshr c18b ((_ int2bv 64) 56)) #x00000000000000FF)))
  (forall ((local_ctx__split_fields12 us_split_fields4))
  (=>
  (= local_ctx__split_fields12 (us_split_fieldsqtmk2
                               (rec__skein__skein_512_context__h
                               local_ctx__split_fields11)
                               (rec__skein__skein_512_context__x
                               local_ctx__split_fields11)
                               (store (rec__skein__skein_512_context__b
                                      local_ctx__split_fields11) #x0000000000000007 o12)))
  (=> (dynamic_invariant1 c20b true false true true)
  (let ((q_2 (us_split_fields3
             (rec__skein__skein_512_context__h local_ctx__split_fields12))))
  (forall ((o13 u6))
  (=> (= (to_rep4 o13) #x3F)
  (forall ((o14 u7))
  (=> (= (to_rep3 o14) #x00)
  (forall ((o15 u16))
  (=> (= (to_rep o15) #x0000)
  (forall ((o16 u32))
  (=> (= (to_rep1 o16) #x00000000)
  (forall ((o17 u64))
  (=> (= (to_rep2 o17) #x0000000000000000)
  (forall ((local_ctx__split_fields13 us_split_fields4))
  (=>
  (= local_ctx__split_fields13 (us_split_fieldsqtmk2
                               (us_repqtmk1
                               (us_split_fieldsqtmk1
                               (us_repqtmk
                               (us_split_fieldsqtmk o17 o16 o15 o14
                               (distinct 0 0) o13 (distinct 1 0)
                               (distinct 1 0)))
                               (rec__skein__context_header__hash_bit_len q_2)
                               (rec__skein__context_header__byte_count q_2)))
                               (rec__skein__skein_512_context__x
                               local_ctx__split_fields12)
                               (rec__skein__skein_512_context__b
                               local_ctx__split_fields12)))
  (let ((q_3 (us_split_fields3
             (rec__skein__skein_512_context__h local_ctx__split_fields13))))
  (forall ((o18 u64))
  (=> (= (to_rep2 o18) #x0000000000000000)
  (forall ((local_ctx__split_fields14 us_split_fields4))
  (=>
  (= local_ctx__split_fields14 (us_split_fieldsqtmk2
                               (us_repqtmk1
                               (us_split_fieldsqtmk1
                               (rec__skein__context_header__tweak_words q_3)
                               (rec__skein__context_header__hash_bit_len q_3)
                               o18))
                               (rec__skein__skein_512_context__x
                               local_ctx__split_fields13)
                               (rec__skein__skein_512_context__b
                               local_ctx__split_fields13)))
  (forall ((n2 (_ BitVec 64)))
  (=> (= n2 (bvsub byte_count1 (bvmul blocks_done2 #x0000000000000040)))
  (forall ((spark__branch1 Bool) (n3 (_ BitVec 64)))
  (=>
  (and (= spark__branch1 (ite (bvuge n2 #x0000000000000040) true false))
  (ite (= spark__branch1 true) (= n3 #x0000000000000040) (= n3 n2)))
  (=> (= (bvmul blocks_done2 #x0000000000000040) c26b)
  (=> (dynamic_invariant c26b true false true true)
  (=> (= (rec__skein__skein_512_context__x local_ctx__split_fields14) 
  c28b)
  (=> (= n3 c29b)
  (=> (dynamic_invariant c29b true false true true)
  (forall ((spark__branch2 Bool))
  (=> (= spark__branch2 (ite (bvuge c29b #x0000000000000001) true false))
  (=> (= spark__branch2 true)
  (forall ((n4 (_ BitVec 64)))
  (=> (= n4 #x0000000000000000)
  (=>
  (= (and (ite (bvule #x0000000000000000 n4) true false) (ite (bvule n4 (bvsub 
                                                         c29b #x0000000000000001))
                                                         true false)) true)
  (forall ((n5 (_ BitVec 64)))
  (=>
  (= (and (ite true true false) (ite (and (bvule #x0000000000000000 n5)
                                     (bvule n5 (bvsub c29b #x0000000000000001)))
                                true false)) true)
  (let ((o19 (bv2nat (bvmul #x0000000000000008 (bvand n5 #x0000000000000007)))))
  (=> (in_range1 o19)
  (let ((temp___757 (bvudiv n5 #x0000000000000008)))
  (=>
  (and (bvule #x0000000000000000 temp___757)
  (bvule temp___757 #x0000000000000007))
  (forall ((o20 (_ BitVec 64)))
  (=>
  (= (to_rep2
     (select (rec__skein__skein_512_context__x local_ctx__split_fields14) temp___757)) o20)
  (bvule ((_ zero_extend 56) #x00) (bvand (bvlshr o20 ((_ int2bv 64) o19)) #x00000000000000FF))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
