;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__inc__increasing_indicator__valid Bool)(rec__inc__increasing_indicator__first integer)(rec__inc__increasing_indicator__second integer)))))
(define-fun us_split_fields_rec__inc__increasing_indicator__valid__projection ((a us_split_fields)) Bool 
  (rec__inc__increasing_indicator__valid a))

(define-fun us_split_fields_rec__inc__increasing_indicator__first__projection ((a us_split_fields)) integer 
  (rec__inc__increasing_indicator__first a))

(define-fun us_split_fields_rec__inc__increasing_indicator__second__projection ((a us_split_fields)) integer 
  (rec__inc__increasing_indicator__second a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (ite (rec__inc__increasing_indicator__valid
                                (us_split_fields1 a)) 1 0) (ite (rec__inc__increasing_indicator__valid
                                                                (us_split_fields1
                                                                b)) 1 0))
                        (= (to_rep
                           (rec__inc__increasing_indicator__first
                           (us_split_fields1 a))) (to_rep
                                                  (rec__inc__increasing_indicator__first
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__inc__increasing_indicator__second
                           (us_split_fields1 a))) (to_rep
                                                  (rec__inc__increasing_indicator__second
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const inc__increasing_indicator__valid__first__bit Int)

(declare-const inc__increasing_indicator__valid__last__bit Int)

(declare-const inc__increasing_indicator__valid__position Int)

;; inc__increasing_indicator__valid__first__bit_axiom
  (assert (<= 0 inc__increasing_indicator__valid__first__bit))

;; inc__increasing_indicator__valid__last__bit_axiom
  (assert
  (< inc__increasing_indicator__valid__first__bit inc__increasing_indicator__valid__last__bit))

;; inc__increasing_indicator__valid__position_axiom
  (assert (<= 0 inc__increasing_indicator__valid__position))

(declare-const inc__increasing_indicator__first__first__bit Int)

(declare-const inc__increasing_indicator__first__last__bit Int)

(declare-const inc__increasing_indicator__first__position Int)

;; inc__increasing_indicator__first__first__bit_axiom
  (assert (<= 0 inc__increasing_indicator__first__first__bit))

;; inc__increasing_indicator__first__last__bit_axiom
  (assert
  (< inc__increasing_indicator__first__first__bit inc__increasing_indicator__first__last__bit))

;; inc__increasing_indicator__first__position_axiom
  (assert (<= 0 inc__increasing_indicator__first__position))

(declare-const inc__increasing_indicator__second__first__bit Int)

(declare-const inc__increasing_indicator__second__last__bit Int)

(declare-const inc__increasing_indicator__second__position Int)

;; inc__increasing_indicator__second__first__bit_axiom
  (assert (<= 0 inc__increasing_indicator__second__first__bit))

;; inc__increasing_indicator__second__last__bit_axiom
  (assert
  (< inc__increasing_indicator__second__first__bit inc__increasing_indicator__second__last__bit))

;; inc__increasing_indicator__second__position_axiom
  (assert (<= 0 inc__increasing_indicator__second__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((increasing_indicator__ref 0))
(((increasing_indicator__refqtmk (increasing_indicator__content us_rep)))))
(define-fun increasing_indicator__ref_increasing_indicator__content__projection ((a increasing_indicator__ref)) us_rep 
  (increasing_indicator__content a))

(declare-fun first (us_rep) Int)

(declare-fun first__function_guard (Int us_rep) Bool)

;; first__post_axiom
  (assert
  (forall ((indicator us_rep))
  (! (let ((result (first indicator)))
     (=> (first__function_guard result indicator) (dynamic_invariant result
     true false true true))) :pattern ((first indicator)) )))

;; first__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (first indicator) (to_rep
                          (rec__inc__increasing_indicator__first
                          (us_split_fields1 indicator)))) :pattern ((first
                                                                    indicator)) )))

(declare-fun second (us_rep) Int)

(declare-fun second__function_guard (Int us_rep) Bool)

;; second__post_axiom
  (assert
  (forall ((indicator us_rep))
  (! (let ((result (second indicator)))
     (=> (second__function_guard result indicator) (dynamic_invariant result
     true false true true))) :pattern ((second indicator)) )))

;; second__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (second indicator) (to_rep
                           (rec__inc__increasing_indicator__second
                           (us_split_fields1 indicator)))) :pattern (
  (second indicator)) )))

(declare-fun is_valid (us_rep) Bool)

(declare-fun is_valid__function_guard (Bool us_rep) Bool)

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (= (is_valid indicator) true)
     (= (rec__inc__increasing_indicator__valid (us_split_fields1 indicator)) true)) :pattern (
  (is_valid indicator)) )))

(declare-fun is_increasing (us_rep) Bool)

(declare-fun is_increasing__function_guard (Bool us_rep) Bool)

;; is_increasing__post_axiom
  (assert
  (forall ((indicator us_rep)) (is_valid__function_guard (is_valid indicator)
  indicator)))

;; is_increasing__def_axiom
  (assert
  (forall ((indicator us_rep))
  (! (= (= (is_increasing indicator) true)
     (< (to_rep
        (rec__inc__increasing_indicator__first (us_split_fields1 indicator))) 
     (to_rep
     (rec__inc__increasing_indicator__second (us_split_fields1 indicator))))) :pattern (
  (is_increasing indicator)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

(assert
;; defqtvc
 ;; File "inc.ads", line 27, characters 0-0
  (not
  (forall ((result____split_fields us_split_fields) (s Int)
  (inc__read__valid Bool) (inc__read__v Int) (o integer)
  (result____split_fields1 us_split_fields)
  (result____split_fields2 us_split_fields)
  (result____split_fields3 us_split_fields))
  (=> (dynamic_invariant s true false true true)
  (=> (dynamic_invariant inc__read__v true true true true)
  (=> (= (to_rep o) inc__read__v)
  (=>
  (= result____split_fields1 (us_split_fieldsqtmk
                             (rec__inc__increasing_indicator__valid
                             result____split_fields) o
                             (rec__inc__increasing_indicator__second
                             result____split_fields)))
  (=>
  (= result____split_fields2 (us_split_fieldsqtmk inc__read__valid
                             (rec__inc__increasing_indicator__first
                             result____split_fields1)
                             (rec__inc__increasing_indicator__second
                             result____split_fields1)))
  (=>
  (exists ((spark__branch Bool))
  (and
  (= spark__branch (rec__inc__increasing_indicator__valid
                   result____split_fields2))
  (ite (= spark__branch true)
  (exists ((o1 Int))
  (and
  (= (to_rep
     (rec__inc__increasing_indicator__second result____split_fields2)) o1)
  (exists ((inc__read__valid1 Bool) (inc__read__v1 Int))
  (and (dynamic_invariant inc__read__v1 true true true true)
  (exists ((o2 integer))
  (and (= (to_rep o2) inc__read__v1)
  (exists ((result____split_fields4 us_split_fields))
  (and
  (= result____split_fields4 (us_split_fieldsqtmk
                             (rec__inc__increasing_indicator__valid
                             result____split_fields2)
                             (rec__inc__increasing_indicator__first
                             result____split_fields2) o2))
  (= result____split_fields3 (us_split_fieldsqtmk inc__read__valid1
                             (rec__inc__increasing_indicator__first
                             result____split_fields4)
                             (rec__inc__increasing_indicator__second
                             result____split_fields4)))))))))))
  (= result____split_fields3 (us_split_fieldsqtmk
                             (rec__inc__increasing_indicator__valid
                             result____split_fields2)
                             (rec__inc__increasing_indicator__first
                             result____split_fields2) rliteral)))))
  (=>
  (forall ((result____split_fields4 us_split_fields))
  (is_valid__function_guard (is_valid (us_repqtmk result____split_fields4))
  (us_repqtmk result____split_fields4)))
  (=> (= (is_valid (us_repqtmk result____split_fields3)) true)
  (=>
  (forall ((result____split_fields4 us_split_fields))
  (is_increasing__function_guard
  (is_increasing (us_repqtmk result____split_fields4))
  (us_repqtmk result____split_fields4)))
  (=> (= (is_increasing (us_repqtmk result____split_fields3)) true)
  (=>
  (forall ((result____split_fields4 us_split_fields)) (first__function_guard
  (first (us_repqtmk result____split_fields4))
  (us_repqtmk result____split_fields4)))
  (=>
  (forall ((result____split_fields4 us_split_fields)) (second__function_guard
  (second (us_repqtmk result____split_fields4))
  (us_repqtmk result____split_fields4)))
  (< (first (us_repqtmk result____split_fields3)) (second
                                                  (us_repqtmk
                                                  result____split_fields3))))))))))))))))))
(check-sat)
