(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-const cpu_id Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort max_lsid_type 0)

(declare-fun max_lsid_typeqtint (max_lsid_type) Int)

;; max_lsid_type'axiom
  (assert
  (forall ((i max_lsid_type))
  (and (<= 0 (max_lsid_typeqtint i)) (<= (max_lsid_typeqtint i) 5))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (max_lsid_type max_lsid_type) Bool)

(declare-const dummy max_lsid_type)

(declare-datatypes ((max_lsid_type__ref 0))
(((max_lsid_type__refqtmk (max_lsid_type__content max_lsid_type)))))
(define-fun max_lsid_type__ref_max_lsid_type__content__projection ((a max_lsid_type__ref)) max_lsid_type 
  (max_lsid_type__content a))

(define-fun to_rep ((x max_lsid_type)) Int (max_lsid_typeqtint x))

(declare-fun of_rep (Int) max_lsid_type)

;; inversion_axiom
  (assert
  (forall ((x max_lsid_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x max_lsid_type)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int max_lsid_type))))))
(declare-fun slide ((Array Int max_lsid_type) Int
  Int) (Array Int max_lsid_type))

;; slide_eq
  (assert
  (forall ((a (Array Int max_lsid_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int max_lsid_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int max_lsid_type)) (a__first Int)
  (a__last Int) (b (Array Int max_lsid_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int max_lsid_type)) (b (Array Int max_lsid_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const cpu_lsid_last (Array Int max_lsid_type))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort tmax_lsid_typeB 0)

(declare-fun tmax_lsid_typeBqtint (tmax_lsid_typeB) Int)

;; tmax_lsid_typeB'axiom
  (assert
  (forall ((i tmax_lsid_typeB))
  (and (<= (- 128) (tmax_lsid_typeBqtint i))
  (<= (tmax_lsid_typeBqtint i) 127))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tmax_lsid_typeB tmax_lsid_typeB) Bool)

(declare-const dummy2 tmax_lsid_typeB)

(declare-datatypes ((tmax_lsid_typeB__ref 0))
(((tmax_lsid_typeB__refqtmk (tmax_lsid_typeB__content tmax_lsid_typeB)))))
(define-fun tmax_lsid_typeB__ref_tmax_lsid_typeB__content__projection ((a tmax_lsid_typeB__ref)) tmax_lsid_typeB 
  (tmax_lsid_typeB__content a))

(define-fun to_rep1 ((x tmax_lsid_typeB)) Int (tmax_lsid_typeBqtint x))

(declare-fun of_rep1 (Int) tmax_lsid_typeB)

;; inversion_axiom
  (assert
  (forall ((x tmax_lsid_typeB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tmax_lsid_typeB)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun to_rep2 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_159 Int))
                           (=>
                           (and (<= a__first temp___idx_159)
                           (<= temp___idx_159 a__last))
                           (= (to_rep2 (select a temp___idx_159)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_159)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_159 Int))
  (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last))
  (= (to_rep2 (select a temp___idx_159)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_159)))))))))))

(declare-sort t 0)

(declare-fun first (t) tmax_lsid_typeB)

(declare-fun last (t) tmax_lsid_typeB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range low) (in_range high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((state_array__ref 0))
(((state_array__refqtmk (state_array__content us_t)))))
(define-fun state_array__ref_state_array__content__projection ((a state_array__ref)) us_t 
  (state_array__content a))

(declare-datatypes ((t9s__ref 0))
(((t9s__refqtmk (t9s__content us_t)))))
(define-fun t9s__ref_t9s__content__projection ((a t9s__ref)) us_t (t9s__content
                                                                  a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__foo__subject_state__max_id max_lsid_type)))))
(define-fun us_split_discrs_rec__foo__subject_state__max_id__projection ((a us_split_discrs)) max_lsid_type 
  (rec__foo__subject_state__max_id a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__foo__subject_state__states us_t)))))
(define-fun us_split_fields_rec__foo__subject_state__states__projection ((a us_split_fields)) us_t 
  (rec__foo__subject_state__states a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__foo__subject_state__max_id
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__foo__subject_state__max_id
                                                  (us_split_discrs1 b))))
                        (= (bool_eq2
                           (rec__foo__subject_state__states
                           (us_split_fields1 a))
                           (rec__foo__subject_state__states
                           (us_split_fields1 b))) true))
                   true false))

(define-fun in_range3 ((rec__foo__subject_state__max_id1 Int)
  (a us_split_discrs)) Bool (= rec__foo__subject_state__max_id1 (to_rep
                                                                (rec__foo__subject_state__max_id
                                                                a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const foo__subject_state__max_id__first__bit Int)

(declare-const foo__subject_state__max_id__last__bit Int)

(declare-const foo__subject_state__max_id__position Int)

;; foo__subject_state__max_id__first__bit_axiom
  (assert (<= 0 foo__subject_state__max_id__first__bit))

;; foo__subject_state__max_id__last__bit_axiom
  (assert
  (< foo__subject_state__max_id__first__bit foo__subject_state__max_id__last__bit))

;; foo__subject_state__max_id__position_axiom
  (assert (<= 0 foo__subject_state__max_id__position))

(declare-const foo__subject_state__states__first__bit Int)

(declare-const foo__subject_state__states__last__bit Int)

(declare-const foo__subject_state__states__position Int)

;; foo__subject_state__states__first__bit_axiom
  (assert (<= 0 foo__subject_state__states__first__bit))

;; foo__subject_state__states__last__bit_axiom
  (assert
  (< foo__subject_state__states__first__bit foo__subject_state__states__last__bit))

;; foo__subject_state__states__position_axiom
  (assert (<= 0 foo__subject_state__states__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((subject_state__ref 0))
(((subject_state__refqtmk (subject_state__content us_rep)))))
(define-fun subject_state__ref_subject_state__content__projection ((a subject_state__ref)) us_rep 
  (subject_state__content a))

(declare-datatypes ((t10s__ref 0))
(((t10s__refqtmk (t10s__content us_t)))))
(define-fun t10s__ref_t10s__content__projection ((a t10s__ref)) us_t 
  (t10s__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__foo__subject_state__states1 us_t)))))
(define-fun us_split_fields_rec__foo__subject_state__states__2__projection ((a us_split_fields2)) us_t 
  (rec__foo__subject_state__states1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (let ((temp___161 (rec__foo__subject_state__states1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array (to_array temp___161)
                                         (first1 temp___161)
                                         (last1 temp___161))))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___160 (rec__foo__subject_state__states
                                                           (us_split_fields1
                                                           r))))
                                         (of_array (to_array temp___160)
                                         (first1 temp___160)
                                         (last1 temp___160))))))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__foo__subject_state__max_id
                            (us_split_discrs2 a))) (to_rep
                                                   (rec__foo__subject_state__max_id
                                                   (us_split_discrs2 b))))
                         (= (bool_eq2
                            (rec__foo__subject_state__states1
                            (us_split_fields3 a))
                            (rec__foo__subject_state__states1
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const foo__subject_state__max_id__first__bit1 Int)

(declare-const foo__subject_state__max_id__last__bit1 Int)

(declare-const foo__subject_state__max_id__position1 Int)

;; foo__subject_state__max_id__first__bit_axiom
  (assert (<= 0 foo__subject_state__max_id__first__bit1))

;; foo__subject_state__max_id__last__bit_axiom
  (assert
  (< foo__subject_state__max_id__first__bit1 foo__subject_state__max_id__last__bit1))

;; foo__subject_state__max_id__position_axiom
  (assert (<= 0 foo__subject_state__max_id__position1))

(declare-const foo__subject_state__states__first__bit1 Int)

(declare-const foo__subject_state__states__last__bit1 Int)

(declare-const foo__subject_state__states__position1 Int)

;; foo__subject_state__states__first__bit_axiom
  (assert (<= 0 foo__subject_state__states__first__bit1))

;; foo__subject_state__states__last__bit_axiom
  (assert
  (< foo__subject_state__states__first__bit1 foo__subject_state__states__last__bit1))

;; foo__subject_state__states__position_axiom
  (assert (<= 0 foo__subject_state__states__position1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((tstatesS__ref 0))
(((tstatesS__refqtmk (tstatesS__content us_rep1)))))
(define-fun tstatesS__ref_tstatesS__content__projection ((a tstatesS__ref)) us_rep1 
  (tstatesS__content a))

(declare-const states__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant ((temp___expr_217 us_rep1)
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)
  (temp___do_typ_inv_216 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_214 true))
                                     (in_range3
                                     (to_rep (select cpu_lsid_last cpu_id))
                                     (us_split_discrs1
                                     (to_base temp___expr_217))))
                                     (and (dynamic_property 0
                                     (to_rep (select cpu_lsid_last cpu_id))
                                     (first1
                                     (rec__foo__subject_state__states1
                                     (us_split_fields3 temp___expr_217)))
                                     (last1
                                     (rec__foo__subject_state__states1
                                     (us_split_fields3 temp___expr_217))))
                                     (and
                                     (= (first1
                                        (rec__foo__subject_state__states1
                                        (us_split_fields3 temp___expr_217))) 0)
                                     (= (last1
                                        (rec__foo__subject_state__states1
                                        (us_split_fields3 temp___expr_217))) 
                                     (to_rep (select cpu_lsid_last cpu_id)))))))

(define-fun default_initial_assumption ((temp___expr_220 us_rep1)
  (temp___skip_top_level_221 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__foo__subject_state__max_id
                                            (us_split_discrs2
                                            temp___expr_220))) (to_rep
                                                               (select 
                                                               cpu_lsid_last 
                                                               cpu_id)))
                                         (and
                                         (= (first1
                                            (rec__foo__subject_state__states1
                                            (us_split_fields3
                                            temp___expr_220))) 0)
                                         (= (last1
                                            (rec__foo__subject_state__states1
                                            (us_split_fields3
                                            temp___expr_220))) (to_rep
                                                               (select 
                                                               cpu_lsid_last 
                                                               cpu_id))))))

(declare-sort cpu_range 0)

(declare-fun cpu_rangeqtint (cpu_range) Int)

;; cpu_range'axiom
  (assert
  (forall ((i cpu_range))
  (and (<= 0 (cpu_rangeqtint i)) (<= (cpu_rangeqtint i) 1))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq6 (cpu_range cpu_range) Bool)

(declare-const dummy6 cpu_range)

(declare-datatypes ((cpu_range__ref 0))
(((cpu_range__refqtmk (cpu_range__content cpu_range)))))
(define-fun cpu_range__ref_cpu_range__content__projection ((a cpu_range__ref)) cpu_range 
  (cpu_range__content a))

(define-fun dynamic_invariant1 ((temp___expr_170 Int)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)
  (temp___do_typ_inv_169 Bool)) Bool (=>
                                     (or (= temp___is_init_166 true)
                                     (<= 0 1)) (in_range4 temp___expr_170)))

(define-fun dynamic_invariant2 ((temp___expr_177 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)
  (temp___do_typ_inv_176 Bool)) Bool (=>
                                     (or (= temp___is_init_173 true)
                                     (<= 0 5)) (in_range temp___expr_177)))

(declare-fun foo__cpu_lsid_last__aggregate_def (Int
  Int) (Array Int max_lsid_type))

;; cpu_lsid_last__def_axiom
  (assert (= cpu_lsid_last (foo__cpu_lsid_last__aggregate_def 3 4)))

(declare-const rliteral max_lsid_type)

;; rliteral_axiom
  (assert (= (max_lsid_typeqtint rliteral) 3))

(declare-const rliteral1 max_lsid_type)

;; rliteral_axiom
  (assert (= (max_lsid_typeqtint rliteral1) 4))

;; def_axiom
  (assert
  (forall ((temp___156 Int) (temp___157 Int))
  (let ((temp___155 (foo__cpu_lsid_last__aggregate_def temp___156 temp___157)))
  (=>
  (and (dynamic_invariant2 temp___156 true true true true)
  (dynamic_invariant2 temp___157 true true true true))
  (and (= (select temp___155 0) rliteral)
  (= (select temp___155 1) rliteral1))))))

(define-fun dynamic_invariant3 ((temp___expr_210 us_rep)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)
  (temp___do_typ_inv_209 Bool)) Bool (let ((temp___211 (rec__foo__subject_state__max_id
                                                       (us_split_discrs1
                                                       temp___expr_210))))
                                     (and (dynamic_property 0
                                     (to_rep temp___211)
                                     (first1
                                     (rec__foo__subject_state__states
                                     (us_split_fields1 temp___expr_210)))
                                     (last1
                                     (rec__foo__subject_state__states
                                     (us_split_fields1 temp___expr_210))))
                                     (and
                                     (= (first1
                                        (rec__foo__subject_state__states
                                        (us_split_fields1 temp___expr_210))) 0)
                                     (= (last1
                                        (rec__foo__subject_state__states
                                        (us_split_fields1 temp___expr_210))) 
                                     (to_rep temp___211))))))

(assert
;; defqtvc
 ;; File "foo.ads", line 1, characters 0-0
  (not
  (forall ((o Int))
  (=> (dynamic_invariant1 cpu_id false false true true)
  (=> (= (foo__cpu_lsid_last__aggregate_def 3 4) cpu_lsid_last)
  (=>
  (exists ((usf Int))
  (and (dynamic_invariant2 usf true true true true)
  (exists ((usf1 us_rep))
  (= (to_rep (rec__foo__subject_state__max_id (us_split_discrs1 usf1))) usf))))
  (=> (= (to_rep (select cpu_lsid_last cpu_id)) o) (in_range o))))))))
(check-sat)
(exit)
