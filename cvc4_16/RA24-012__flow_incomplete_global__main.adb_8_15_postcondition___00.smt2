(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (ite (select a temp___idx_154) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_154)) 1 0)))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (ite (select a temp___idx_154) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_154)) 1 0)))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun get_state ((Array Int Bool)) (Array Int Bool))

(declare-fun get_state__function_guard ((Array Int Bool)
  (Array Int Bool)) Bool)

;; get_state__post_axiom
  (assert true)

;; get_state__def_axiom
  (assert
  (forall ((foo__state_var (Array Int Bool)))
  (! (= (get_state foo__state_var) foo__state_var) :pattern ((get_state
                                                             foo__state_var)) )))

(declare-fun valid ((Array Int Bool) (Array Int Bool)) Bool)

(declare-fun valid__function_guard (Bool (Array Int Bool)
  (Array Int Bool)) Bool)

(declare-fun check__ ((Array Int Bool) (Array Int Bool)) Bool)

(declare-fun check____function_guard (Bool (Array Int Bool)
  (Array Int Bool)) Bool)

;; valid__post_axiom
  (assert true)

;; valid__def_axiom
  (assert
  (forall ((s (Array Int Bool)) (foo__state_var (Array Int Bool)))
  (! (and
     (forall ((s1 (Array Int Bool)) (foo__state_var1 (Array Int Bool)))
     (check____function_guard (check__ s1 foo__state_var1) s1
     foo__state_var1))
     (= (= (valid s foo__state_var) true)
     (= (check__ s foo__state_var) true))) :pattern ((valid s foo__state_var)) )))

;; check____post_axiom
  (assert true)

;; check____def_axiom
  (assert
  (forall ((s (Array Int Bool)) (foo__state_var (Array Int Bool)))
  (! (= (check__ s foo__state_var) true) :pattern ((check__ s foo__state_var)) )))

(assert
;; defqtvc
 ;; File "main.adb", line 5, characters 0-0
  (not
  (forall ((state_var (Array Int Bool)))
  (=>
  (forall ((state_var1 (Array Int Bool))) (get_state__function_guard
  (get_state state_var1) state_var1))
  (=>
  (forall ((state_var1 (Array Int Bool))) (get_state__function_guard
  (get_state state_var1) state_var1))
  (=>
  (forall ((state_var1 (Array Int Bool))) (valid__function_guard
  (valid (get_state state_var1) state_var1) (get_state state_var1)
  state_var1))
  (=> (= (valid (get_state state_var) state_var) true)
  (=>
  (forall ((state_var1 (Array Int Bool))) (get_state__function_guard
  (get_state state_var1) state_var1))
  (=>
  (forall ((state_var1 (Array Int Bool))) (get_state__function_guard
  (get_state state_var1) state_var1))
  (=>
  (forall ((state_var1 (Array Int Bool))) (valid__function_guard
  (valid (get_state state_var1) state_var1) (get_state state_var1)
  state_var1)) (= (valid (get_state state_var) state_var) true)))))))))))
(check-sat)
