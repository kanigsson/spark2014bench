(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__tests__test_15__record_with_mutable_discrs__present Bool)))))
(define-fun us_split_discrs_rec__tests__test_15__record_with_mutable_discrs__present__projection ((a us_split_discrs)) Bool 
  (rec__tests__test_15__record_with_mutable_discrs__present a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__tests__test_15__record_with_mutable_discrs__field natural)))))
(define-fun us_split_fields_rec__tests__test_15__record_with_mutable_discrs__field__projection ((a us_split_fields)) natural 
  (rec__tests__test_15__record_with_mutable_discrs__field a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__7__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__7__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun tests__test_15__record_with_mutable_discrs__field__pred ((a us_rep)) Bool (= (ite 
  (rec__tests__test_15__record_with_mutable_discrs__present
  (us_split_discrs1 a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__tests__test_15__record_with_mutable_discrs__present
                                (us_split_discrs1 a)) 1 0) (ite (rec__tests__test_15__record_with_mutable_discrs__present
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=>
                        (tests__test_15__record_with_mutable_discrs__field__pred
                        a)
                        (= (to_rep
                           (rec__tests__test_15__record_with_mutable_discrs__field
                           (us_split_fields1 a))) (to_rep
                                                  (rec__tests__test_15__record_with_mutable_discrs__field
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const tests__test_15__record_with_mutable_discrs__present__first__bit Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__last__bit Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__position Int)

;; tests__test_15__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__first__bit))

;; tests__test_15__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__present__first__bit 
  tests__test_15__record_with_mutable_discrs__present__last__bit))

;; tests__test_15__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__position))

(declare-const tests__test_15__record_with_mutable_discrs__field__first__bit Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__last__bit Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__position Int)

;; tests__test_15__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__first__bit))

;; tests__test_15__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__field__first__bit tests__test_15__record_with_mutable_discrs__field__last__bit))

;; tests__test_15__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 tests__test_15__record_with_mutable_discrs__field__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((t14b__ref 0))
(((t14b__refqtmk (t14b__content us_rep)))))
(define-fun t14b__ref_t14b__content__projection ((a t14b__ref)) us_rep 
  (t14b__content a))

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1 (rec__tests__test_15__holder__present Bool)))))
(define-fun us_split_discrs_rec__tests__test_15__holder__present__projection ((a us_split_discrs2)) Bool 
  (rec__tests__test_15__holder__present a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__tests__test_15__holder__content us_rep)))))
(define-fun us_split_fields_rec__tests__test_15__holder__content__projection ((a us_split_fields2)) us_rep 
  (rec__tests__test_15__holder__content a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__8__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__8__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (ite (rec__tests__test_15__holder__present
                                 (us_split_discrs3 a)) 1 0) (ite (rec__tests__test_15__holder__present
                                                                 (us_split_discrs3
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__tests__test_15__holder__content
                            (us_split_fields3 a))
                            (rec__tests__test_15__holder__content
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range2 ((rec__tests__test_15__holder__present1 Bool)
  (a us_split_discrs2)) Bool (= rec__tests__test_15__holder__present1 
  (rec__tests__test_15__holder__present a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const tests__test_15__holder__present__first__bit Int)

(declare-const tests__test_15__holder__present__last__bit Int)

(declare-const tests__test_15__holder__present__position Int)

;; tests__test_15__holder__present__first__bit_axiom
  (assert (<= 0 tests__test_15__holder__present__first__bit))

;; tests__test_15__holder__present__last__bit_axiom
  (assert
  (< tests__test_15__holder__present__first__bit tests__test_15__holder__present__last__bit))

;; tests__test_15__holder__present__position_axiom
  (assert (<= 0 tests__test_15__holder__present__position))

(declare-const tests__test_15__holder__content__first__bit Int)

(declare-const tests__test_15__holder__content__last__bit Int)

(declare-const tests__test_15__holder__content__position Int)

;; tests__test_15__holder__content__first__bit_axiom
  (assert (<= 0 tests__test_15__holder__content__first__bit))

;; tests__test_15__holder__content__last__bit_axiom
  (assert
  (< tests__test_15__holder__content__first__bit tests__test_15__holder__content__last__bit))

;; tests__test_15__holder__content__position_axiom
  (assert (<= 0 tests__test_15__holder__content__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((holder__ref 0))
(((holder__refqtmk (holder__content us_rep1)))))
(define-fun holder__ref_holder__content__projection ((a holder__ref)) us_rep1 
  (holder__content a))

(declare-fun id (us_rep1) us_rep1)

(declare-fun id__function_guard (us_rep1 us_rep1) Bool)

(define-fun in_range3 ((rec__tests__test_15__record_with_mutable_discrs__present1 Bool)
  (a us_split_discrs)) Bool (= rec__tests__test_15__record_with_mutable_discrs__present1 
  (rec__tests__test_15__record_with_mutable_discrs__present a)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const tests__test_15__record_with_mutable_discrs__present__first__bit1 Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__last__bit1 Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__position1 Int)

;; tests__test_15__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__first__bit1))

;; tests__test_15__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__present__first__bit1 
  tests__test_15__record_with_mutable_discrs__present__last__bit1))

;; tests__test_15__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__position1))

(declare-const tests__test_15__record_with_mutable_discrs__field__first__bit1 Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__last__bit1 Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__position1 Int)

;; tests__test_15__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__first__bit1))

;; tests__test_15__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__field__first__bit1 tests__test_15__record_with_mutable_discrs__field__last__bit1))

;; tests__test_15__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((record_with_mutable_discrs__ref 0))
(((record_with_mutable_discrs__refqtmk
  (record_with_mutable_discrs__content us_rep)))))
(define-fun record_with_mutable_discrs__ref_record_with_mutable_discrs__content__2__projection ((a record_with_mutable_discrs__ref)) us_rep 
  (record_with_mutable_discrs__content a))

(define-fun dynamic_invariant ((temp___expr_294 us_rep1)
  (temp___is_init_290 Bool) (temp___skip_constant_291 Bool)
  (temp___do_toplevel_292 Bool) (temp___do_typ_inv_293 Bool)) Bool (in_range3
  (rec__tests__test_15__holder__present (us_split_discrs3 temp___expr_294))
  (us_split_discrs1
  (rec__tests__test_15__holder__content (us_split_fields3 temp___expr_294)))))

;; id__post_axiom
  (assert
  (forall ((h us_rep1))
  (! (=> (dynamic_invariant h true true true true)
     (let ((result (id h)))
     (=> (id__function_guard result h) (dynamic_invariant result true false
     true true)))) :pattern ((id h)) )))

;; id__def_axiom
  (assert
  (forall ((h us_rep1))
  (! (=> (dynamic_invariant h true true true true) (= (id h) h)) :pattern (
  (id h)) )))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const tests__test_15__record_with_mutable_discrs__present__first__bit2 Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__last__bit2 Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__position2 Int)

;; tests__test_15__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__first__bit2))

;; tests__test_15__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__present__first__bit2 
  tests__test_15__record_with_mutable_discrs__present__last__bit2))

;; tests__test_15__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__position2))

(declare-const tests__test_15__record_with_mutable_discrs__field__first__bit2 Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__last__bit2 Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__position2 Int)

;; tests__test_15__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__first__bit2))

;; tests__test_15__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__field__first__bit2 tests__test_15__record_with_mutable_discrs__field__last__bit2))

;; tests__test_15__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__position2))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((t15b__ref 0))
(((t15b__refqtmk (t15b__content us_rep)))))
(define-fun t15b__ref_t15b__content__projection ((a t15b__ref)) us_rep 
  (t15b__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__tests__test_15__holder__content1 us_rep)))))
(define-fun us_split_fields_rec__tests__test_15__holder__content__2__projection ((a us_split_fields4)) us_rep 
  (rec__tests__test_15__holder__content1 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__9__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs4 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep2)) us_split_discrs2 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__9__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base ((a us_rep2)) us_rep1 (us_repqtmk1 (us_split_discrs4 a)
                                          (us_split_fieldsqtmk1
                                          (rec__tests__test_15__holder__content1
                                          (us_split_fields5 a)))))

(define-fun of_base ((r us_rep1)) us_rep2 (us_repqtmk2 (us_split_discrs3 r)
                                          (us_split_fieldsqtmk2
                                          (rec__tests__test_15__holder__content
                                          (us_split_fields3 r)))))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (ite (rec__tests__test_15__holder__present
                                 (us_split_discrs4 a)) 1 0) (ite (rec__tests__test_15__holder__present
                                                                 (us_split_discrs4
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__tests__test_15__holder__content1
                            (us_split_fields5 a))
                            (rec__tests__test_15__holder__content1
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const tests__test_15__holder__present__first__bit1 Int)

(declare-const tests__test_15__holder__present__last__bit1 Int)

(declare-const tests__test_15__holder__present__position1 Int)

;; tests__test_15__holder__present__first__bit_axiom
  (assert (<= 0 tests__test_15__holder__present__first__bit1))

;; tests__test_15__holder__present__last__bit_axiom
  (assert
  (< tests__test_15__holder__present__first__bit1 tests__test_15__holder__present__last__bit1))

;; tests__test_15__holder__present__position_axiom
  (assert (<= 0 tests__test_15__holder__present__position1))

(declare-const tests__test_15__holder__content__first__bit1 Int)

(declare-const tests__test_15__holder__content__last__bit1 Int)

(declare-const tests__test_15__holder__content__position1 Int)

;; tests__test_15__holder__content__first__bit_axiom
  (assert (<= 0 tests__test_15__holder__content__first__bit1))

;; tests__test_15__holder__content__last__bit_axiom
  (assert
  (< tests__test_15__holder__content__first__bit1 tests__test_15__holder__content__last__bit1))

;; tests__test_15__holder__content__position_axiom
  (assert (<= 0 tests__test_15__holder__content__position1))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((th1S__ref 0))
(((th1S__refqtmk (th1S__content us_rep2)))))
(define-fun th1S__ref_th1S__content__projection ((a th1S__ref)) us_rep2 
  (th1S__content a))

(declare-const h1__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_301 us_rep2)
  (temp___is_init_297 Bool) (temp___skip_constant_298 Bool)
  (temp___do_toplevel_299 Bool)
  (temp___do_typ_inv_300 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_298 true))
                                     (in_range2 (distinct 0 0)
                                     (us_split_discrs3
                                     (to_base temp___expr_301)))) (in_range3
                                     (distinct 0 0)
                                     (us_split_discrs1
                                     (rec__tests__test_15__holder__content1
                                     (us_split_fields5 temp___expr_301))))))

(define-fun default_initial_assumption ((temp___expr_304 us_rep2)
  (temp___skip_top_level_305 Bool)) Bool (and
                                         (= (rec__tests__test_15__holder__present
                                            (us_split_discrs4
                                            temp___expr_304)) (distinct 0 0))
                                         (= (rec__tests__test_15__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (rec__tests__test_15__holder__content1
                                            (us_split_fields5
                                            temp___expr_304)))) (distinct 0 0))))

(declare-const r17b us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const tests__test_15__record_with_mutable_discrs__present__first__bit3 Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__last__bit3 Int)

(declare-const tests__test_15__record_with_mutable_discrs__present__position3 Int)

;; tests__test_15__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__first__bit3))

;; tests__test_15__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__present__first__bit3 
  tests__test_15__record_with_mutable_discrs__present__last__bit3))

;; tests__test_15__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__present__position3))

(declare-const tests__test_15__record_with_mutable_discrs__field__first__bit3 Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__last__bit3 Int)

(declare-const tests__test_15__record_with_mutable_discrs__field__position3 Int)

;; tests__test_15__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__first__bit3))

;; tests__test_15__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< tests__test_15__record_with_mutable_discrs__field__first__bit3 tests__test_15__record_with_mutable_discrs__field__last__bit3))

;; tests__test_15__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 tests__test_15__record_with_mutable_discrs__field__position3))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((s18b__ref 0))
(((s18b__refqtmk (s18b__content us_rep)))))
(define-fun s18b__ref_s18b__content__projection ((a s18b__ref)) us_rep 
  (s18b__content a))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun default_initial_assumption1 ((temp___expr_286 us_rep)
  (temp___skip_top_level_287 Bool)) Bool (= (rec__tests__test_15__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            temp___expr_286)) (distinct 0 0)))

(define-fun dynamic_invariant3 ((temp___expr_314 us_rep)
  (temp___is_init_310 Bool) (temp___skip_constant_311 Bool)
  (temp___do_toplevel_312 Bool)
  (temp___do_typ_inv_313 Bool)) Bool (=>
                                     (not (= temp___skip_constant_311 true))
                                     (in_range3
                                     (rec__tests__test_15__holder__present
                                     (us_split_discrs3 r17b))
                                     (us_split_discrs1 temp___expr_314))))

(define-fun default_initial_assumption2 ((temp___expr_316 us_rep)
  (temp___skip_top_level_317 Bool)) Bool (= (rec__tests__test_15__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            temp___expr_316)) (rec__tests__test_15__holder__present
                                                              (us_split_discrs3
                                                              r17b))))

(assert
;; defqtvc
 ;; File "tests.adb", line 320, characters 0-0
  (not
  (=>
  (exists ((usf Bool))
  (exists ((usf1 us_rep1))
  (= (rec__tests__test_15__holder__present (us_split_discrs3 usf1)) usf)))
  (in_range 0))))
(check-sat)
