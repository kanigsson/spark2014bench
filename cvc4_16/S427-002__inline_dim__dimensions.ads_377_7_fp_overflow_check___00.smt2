;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float64)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort length 0)

(define-fun in_range1 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000010010 #b1110100001001000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000010010 #b1110100001001000000000000000000000000000000000000000)))))

(declare-fun user_eq (length length) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float64)

(declare-const dummy length)

(declare-datatypes ((length__ref 0))
(((length__refqtmk (length__content length)))))
(define-fun length__ref_length__content__projection ((a length__ref)) length 
  (length__content a))

(declare-fun to_rep (length) Float64)

(declare-fun of_rep (Float64) length)

;; inversion_axiom
  (assert
  (forall ((x length)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x length)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort normal_value 0)

(define-fun in_range2 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq1 (normal_value normal_value) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)

(declare-const dummy1 normal_value)

(declare-datatypes ((normal_value__ref 0))
(((normal_value__refqtmk (normal_value__content normal_value)))))
(define-fun normal_value__ref_normal_value__content__projection ((a normal_value__ref)) normal_value 
  (normal_value__content a))

(declare-fun to_rep1 (normal_value) Float64)

(declare-fun of_rep1 (Float64) normal_value)

;; inversion_axiom
  (assert
  (forall ((x normal_value))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x normal_value)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__dimensions__line_parameter_type__a normal_value)(rec__dimensions__line_parameter_type__b normal_value)(rec__dimensions__line_parameter_type__c length)))))
(define-fun us_split_fields_rec__dimensions__line_parameter_type__a__projection ((a us_split_fields)) normal_value 
  (rec__dimensions__line_parameter_type__a a))

(define-fun us_split_fields_rec__dimensions__line_parameter_type__b__projection ((a us_split_fields)) normal_value 
  (rec__dimensions__line_parameter_type__b a))

(define-fun us_split_fields_rec__dimensions__line_parameter_type__c__projection ((a us_split_fields)) length 
  (rec__dimensions__line_parameter_type__c a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (fp.eq (to_rep1
                               (rec__dimensions__line_parameter_type__a
                               (us_split_fields1 a))) (to_rep1
                                                      (rec__dimensions__line_parameter_type__a
                                                      (us_split_fields1 b))))
                        (fp.eq (to_rep1
                               (rec__dimensions__line_parameter_type__b
                               (us_split_fields1 a))) (to_rep1
                                                      (rec__dimensions__line_parameter_type__b
                                                      (us_split_fields1 b)))))
                        (fp.eq (to_rep
                               (rec__dimensions__line_parameter_type__c
                               (us_split_fields1 a))) (to_rep
                                                      (rec__dimensions__line_parameter_type__c
                                                      (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dimensions__line_parameter_type__a__first__bit Int)

(declare-const dimensions__line_parameter_type__a__last__bit Int)

(declare-const dimensions__line_parameter_type__a__position Int)

;; dimensions__line_parameter_type__a__first__bit_axiom
  (assert (<= 0 dimensions__line_parameter_type__a__first__bit))

;; dimensions__line_parameter_type__a__last__bit_axiom
  (assert
  (< dimensions__line_parameter_type__a__first__bit dimensions__line_parameter_type__a__last__bit))

;; dimensions__line_parameter_type__a__position_axiom
  (assert (<= 0 dimensions__line_parameter_type__a__position))

(declare-const dimensions__line_parameter_type__b__first__bit Int)

(declare-const dimensions__line_parameter_type__b__last__bit Int)

(declare-const dimensions__line_parameter_type__b__position Int)

;; dimensions__line_parameter_type__b__first__bit_axiom
  (assert (<= 0 dimensions__line_parameter_type__b__first__bit))

;; dimensions__line_parameter_type__b__last__bit_axiom
  (assert
  (< dimensions__line_parameter_type__b__first__bit dimensions__line_parameter_type__b__last__bit))

;; dimensions__line_parameter_type__b__position_axiom
  (assert (<= 0 dimensions__line_parameter_type__b__position))

(declare-const dimensions__line_parameter_type__c__first__bit Int)

(declare-const dimensions__line_parameter_type__c__last__bit Int)

(declare-const dimensions__line_parameter_type__c__position Int)

;; dimensions__line_parameter_type__c__first__bit_axiom
  (assert (<= 0 dimensions__line_parameter_type__c__first__bit))

;; dimensions__line_parameter_type__c__last__bit_axiom
  (assert
  (< dimensions__line_parameter_type__c__first__bit dimensions__line_parameter_type__c__last__bit))

;; dimensions__line_parameter_type__c__position_axiom
  (assert (<= 0 dimensions__line_parameter_type__c__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((line_parameter_type__ref 0))
(((line_parameter_type__refqtmk (line_parameter_type__content us_rep)))))
(define-fun line_parameter_type__ref_line_parameter_type__content__projection ((a line_parameter_type__ref)) us_rep 
  (line_parameter_type__content a))

(declare-const i101s us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort tmks_typeB 0)

(declare-fun user_eq3 (tmks_typeB tmks_typeB) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float64)

(declare-const dummy3 tmks_typeB)

(declare-datatypes ((tmks_typeB__ref 0))
(((tmks_typeB__refqtmk (tmks_typeB__content tmks_typeB)))))
(define-fun tmks_typeB__ref_tmks_typeB__content__projection ((a tmks_typeB__ref)) tmks_typeB 
  (tmks_typeB__content a))

(define-fun dynamic_invariant ((temp___expr_639 us_rep)
  (temp___is_init_635 Bool) (temp___skip_constant_636 Bool)
  (temp___do_toplevel_637 Bool)
  (temp___do_typ_inv_638 Bool)) Bool (=> (= temp___do_toplevel_637 true)
                                     (=> (= temp___is_init_635 true)
                                     (and
                                     (or
                                     (not (fp.eq (to_rep1
                                                 (rec__dimensions__line_parameter_type__a
                                                 (us_split_fields1
                                                 temp___expr_639))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
                                     (not (fp.eq (to_rep1
                                                 (rec__dimensions__line_parameter_type__b
                                                 (us_split_fields1
                                                 temp___expr_639))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
                                     (let ((temp___641 (fp.add RNE (fp.mul RNE 
                                     (to_rep1
                                     (rec__dimensions__line_parameter_type__a
                                     (us_split_fields1 temp___expr_639))) 
                                     (to_rep1
                                     (rec__dimensions__line_parameter_type__a
                                     (us_split_fields1 temp___expr_639)))) (fp.mul RNE 
                                     (to_rep1
                                     (rec__dimensions__line_parameter_type__b
                                     (us_split_fields1 temp___expr_639))) 
                                     (to_rep1
                                     (rec__dimensions__line_parameter_type__b
                                     (us_split_fields1 temp___expr_639)))))))
                                     (and
                                     (fp.leq (fp #b0 #b01111111110 #b1100110011001100110011001100110011001100110011001101) temp___641)
                                     (fp.leq temp___641 (fp #b0 #b01111111111 #b0001100110011001100110011001100110011001100110011010))))))))

(define-fun dynamic_predicate ((temp___647 us_rep)) Bool (and
                                                         (or
                                                         (not (fp.eq 
                                                         (to_rep1
                                                         (rec__dimensions__line_parameter_type__a
                                                         (us_split_fields1
                                                         temp___647))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
                                                         (not (fp.eq 
                                                         (to_rep1
                                                         (rec__dimensions__line_parameter_type__b
                                                         (us_split_fields1
                                                         temp___647))) (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))))
                                                         (let ((temp___649 (fp.add RNE (fp.mul RNE 
                                                         (to_rep1
                                                         (rec__dimensions__line_parameter_type__a
                                                         (us_split_fields1
                                                         temp___647))) 
                                                         (to_rep1
                                                         (rec__dimensions__line_parameter_type__a
                                                         (us_split_fields1
                                                         temp___647)))) (fp.mul RNE 
                                                         (to_rep1
                                                         (rec__dimensions__line_parameter_type__b
                                                         (us_split_fields1
                                                         temp___647))) 
                                                         (to_rep1
                                                         (rec__dimensions__line_parameter_type__b
                                                         (us_split_fields1
                                                         temp___647)))))))
                                                         (and
                                                         (fp.leq (fp #b0 #b01111111110 #b1100110011001100110011001100110011001100110011001101) temp___649)
                                                         (fp.leq temp___649 (fp #b0 #b01111111111 #b0001100110011001100110011001100110011001100110011010))))))

(define-fun dynamic_invariant1 ((temp___expr_536 Float64)
  (temp___is_init_532 Bool) (temp___skip_constant_533 Bool)
  (temp___do_toplevel_534 Bool)
  (temp___do_typ_inv_535 Bool)) Bool (=>
                                     (or (= temp___is_init_532 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000010010 #b1110100001001000000000000000000000000000000000000000)) (fp #b0 #b10000010010 #b1110100001001000000000000000000000000000000000000000)))
                                     (in_range1 temp___expr_536)))

(define-fun dynamic_invariant2 ((temp___expr_592 Float64)
  (temp___is_init_588 Bool) (temp___skip_constant_589 Bool)
  (temp___do_toplevel_590 Bool)
  (temp___do_typ_inv_591 Bool)) Bool (=>
                                     (or (= temp___is_init_588 true)
                                     (fp.leq (fp.neg (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)) (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000)))
                                     (in_range2 temp___expr_592)))

(assert
;; defqtvc
 ;; File "dimensions.ads", line 370, characters 0-0
  (not
  (forall ((o Float64) (o1 Float64))
  (=> (dynamic_invariant i101s true false false true)
  (=>
  (= (to_rep1
     (rec__dimensions__line_parameter_type__b (us_split_fields1 i101s))) o)
  (=>
  (= (to_rep1
     (rec__dimensions__line_parameter_type__b (us_split_fields1 i101s))) o1)
  (=> (fp.isFinite64 (fp.mul RNE o1 o))
  (forall ((o2 Float64))
  (=>
  (= (to_rep1
     (rec__dimensions__line_parameter_type__a (us_split_fields1 i101s))) o2)
  (forall ((o3 Float64))
  (=>
  (= (to_rep1
     (rec__dimensions__line_parameter_type__a (us_split_fields1 i101s))) o3)
  (fp.isFinite64 (fp.mul RNE o3 o2)))))))))))))
(check-sat)
