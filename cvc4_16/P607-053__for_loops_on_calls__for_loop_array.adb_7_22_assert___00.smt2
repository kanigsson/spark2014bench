;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const dummy1 (Array Int natural))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq1 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__declare_iterable__container__content (Array Int natural))))))
(define-fun us_split_fields_rec__declare_iterable__container__content__projection ((a us_split_fields)) (Array Int natural) 
  (rec__declare_iterable__container__content a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (= (bool_eq
                           (rec__declare_iterable__container__content
                           (us_split_fields1 a)) 1 100
                           (rec__declare_iterable__container__content
                           (us_split_fields1 b)) 1 100) true)
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const declare_iterable__container__content__first__bit Int)

(declare-const declare_iterable__container__content__last__bit Int)

(declare-const declare_iterable__container__content__position Int)

;; declare_iterable__container__content__first__bit_axiom
  (assert (<= 0 declare_iterable__container__content__first__bit))

;; declare_iterable__container__content__last__bit_axiom
  (assert
  (< declare_iterable__container__content__first__bit declare_iterable__container__content__last__bit))

;; declare_iterable__container__content__position_axiom
  (assert (<= 0 declare_iterable__container__content__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((container__ref 0))
(((container__refqtmk (container__content us_rep)))))
(define-fun container__ref_container__content__projection ((a container__ref)) us_rep 
  (container__content a))

(declare-fun from_nat_array ((Array Int natural)) us_rep)

(declare-fun from_nat_array__function_guard (us_rep
  (Array Int natural)) Bool)

;; from_nat_array__post_axiom
  (assert true)

;; from_nat_array__def_axiom
  (assert
  (forall ((a (Array Int natural)))
  (! (= (from_nat_array a) (us_repqtmk (us_split_fieldsqtmk a))) :pattern (
  (from_nat_array a)) )))

(declare-fun to_nat_array (us_rep) (Array Int natural))

(declare-fun to_nat_array__function_guard ((Array Int natural) us_rep) Bool)

;; to_nat_array__post_axiom
  (assert true)

;; to_nat_array__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (to_nat_array x) (rec__declare_iterable__container__content
                         (us_split_fields1 x))) :pattern ((to_nat_array x)) )))

(declare-const r4b (Array Int natural))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r6b (Array Int natural))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun for_loop_array__a__aggregate_def (Int) (Array Int natural))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___226 Int))
  (=> (dynamic_invariant temp___226 true true true true)
  (forall ((temp___227 Int))
  (= (select (for_loop_array__a__aggregate_def temp___226) temp___227) 
  rliteral)))))

(assert
;; defqtvc
 ;; File "for_loop_array.adb", line 3, characters 0-0
  (not
  (forall ((a (Array Int natural)))
  (=> (= a (for_loop_array__a__aggregate_def 0))
  (let ((o (from_nat_array a)))
  (=>
  (and (from_nat_array__function_guard o a)
  (= o (us_repqtmk (us_split_fieldsqtmk a))))
  (let ((for_loop_array__L_1__R4b__assume (to_nat_array o)))
  (=>
  (and (to_nat_array__function_guard for_loop_array__L_1__R4b__assume o)
  (= for_loop_array__L_1__R4b__assume (rec__declare_iterable__container__content
                                      (us_split_fields1 o))))
  (=> (= for_loop_array__L_1__R4b__assume r4b)
  (forall ((c3b Int))
  (=> (= c3b 1)
  (=>
  (= (and (ite (<= 1 c3b) true false) (ite (<= c3b 100) true false)) true)
  (forall ((c3b1 Int))
  (=> (and (<= 1 c3b1) (<= c3b1 100))
  (let ((o1 (from_nat_array a)))
  (=>
  (and (from_nat_array__function_guard o1 a)
  (= o1 (us_repqtmk (us_split_fieldsqtmk a))))
  (let ((for_loop_array__L_1__R6b__assume (to_nat_array o1)))
  (=>
  (and (to_nat_array__function_guard for_loop_array__L_1__R6b__assume o1)
  (= for_loop_array__L_1__R6b__assume (rec__declare_iterable__container__content
                                      (us_split_fields1 o1))))
  (=> (= for_loop_array__L_1__R6b__assume r6b)
  (= (to_rep (select r6b c3b1)) 0))))))))))))))))))))
(check-sat)
