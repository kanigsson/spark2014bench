;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort type_0 0)

(declare-fun type_0qtint (type_0) Int)

;; type_0'axiom
  (assert
  (forall ((i type_0))
  (and (<= (- 2147483648) (type_0qtint i)) (<= (type_0qtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (type_0 type_0) Bool)

(declare-const dummy type_0)

(declare-datatypes ((type_0__ref 0))
(((type_0__refqtmk (type_0__content type_0)))))
(define-fun type_0__ref_type_0__content__projection ((a type_0__ref)) type_0 
  (type_0__content a))

(define-fun to_rep ((x type_0)) Int (type_0qtint x))

(declare-fun of_rep (Int) type_0)

;; inversion_axiom
  (assert
  (forall ((x type_0)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x type_0)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__p__type_1__field_0 type_0)(rec__p__type_1__field_1 type_0)(rec__p__type_1__field_2 type_0)(rec__p__type_1__field_3 type_0)(rec__p__type_1__field_4 type_0)(rec__p__type_1__field_5 type_0)(rec__p__type_1__field_6 type_0)(rec__p__type_1__field_7 type_0)))))
(define-fun us_split_fields_rec__p__type_1__field_0__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_0 a))

(define-fun us_split_fields_rec__p__type_1__field_1__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_1 a))

(define-fun us_split_fields_rec__p__type_1__field_2__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_2 a))

(define-fun us_split_fields_rec__p__type_1__field_3__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_3 a))

(define-fun us_split_fields_rec__p__type_1__field_4__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_4 a))

(define-fun us_split_fields_rec__p__type_1__field_5__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_5 a))

(define-fun us_split_fields_rec__p__type_1__field_6__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_6 a))

(define-fun us_split_fields_rec__p__type_1__field_7__projection ((a us_split_fields)) type_0 
  (rec__p__type_1__field_7 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__p__type_1__field_0 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_0 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__p__type_1__field_1 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_1 (us_split_fields1 b)))))
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__p__type_1__field_2 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_2 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__p__type_1__field_3 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_3 (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__p__type_1__field_4 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_4 (us_split_fields1 b)))))
                        (and
                        (and
                        (= (to_rep
                           (rec__p__type_1__field_5 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_5 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__p__type_1__field_6 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_6 (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__p__type_1__field_7 (us_split_fields1 a))) 
                        (to_rep
                        (rec__p__type_1__field_7 (us_split_fields1 b)))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const p__type_1__field_0__first__bit Int)

(declare-const p__type_1__field_0__last__bit Int)

(declare-const p__type_1__field_0__position Int)

;; p__type_1__field_0__first__bit_axiom
  (assert (<= 0 p__type_1__field_0__first__bit))

;; p__type_1__field_0__last__bit_axiom
  (assert (< p__type_1__field_0__first__bit p__type_1__field_0__last__bit))

;; p__type_1__field_0__position_axiom
  (assert (<= 0 p__type_1__field_0__position))

(declare-const p__type_1__field_1__first__bit Int)

(declare-const p__type_1__field_1__last__bit Int)

(declare-const p__type_1__field_1__position Int)

;; p__type_1__field_1__first__bit_axiom
  (assert (<= 0 p__type_1__field_1__first__bit))

;; p__type_1__field_1__last__bit_axiom
  (assert (< p__type_1__field_1__first__bit p__type_1__field_1__last__bit))

;; p__type_1__field_1__position_axiom
  (assert (<= 0 p__type_1__field_1__position))

(declare-const p__type_1__field_2__first__bit Int)

(declare-const p__type_1__field_2__last__bit Int)

(declare-const p__type_1__field_2__position Int)

;; p__type_1__field_2__first__bit_axiom
  (assert (<= 0 p__type_1__field_2__first__bit))

;; p__type_1__field_2__last__bit_axiom
  (assert (< p__type_1__field_2__first__bit p__type_1__field_2__last__bit))

;; p__type_1__field_2__position_axiom
  (assert (<= 0 p__type_1__field_2__position))

(declare-const p__type_1__field_3__first__bit Int)

(declare-const p__type_1__field_3__last__bit Int)

(declare-const p__type_1__field_3__position Int)

;; p__type_1__field_3__first__bit_axiom
  (assert (<= 0 p__type_1__field_3__first__bit))

;; p__type_1__field_3__last__bit_axiom
  (assert (< p__type_1__field_3__first__bit p__type_1__field_3__last__bit))

;; p__type_1__field_3__position_axiom
  (assert (<= 0 p__type_1__field_3__position))

(declare-const p__type_1__field_4__first__bit Int)

(declare-const p__type_1__field_4__last__bit Int)

(declare-const p__type_1__field_4__position Int)

;; p__type_1__field_4__first__bit_axiom
  (assert (<= 0 p__type_1__field_4__first__bit))

;; p__type_1__field_4__last__bit_axiom
  (assert (< p__type_1__field_4__first__bit p__type_1__field_4__last__bit))

;; p__type_1__field_4__position_axiom
  (assert (<= 0 p__type_1__field_4__position))

(declare-const p__type_1__field_5__first__bit Int)

(declare-const p__type_1__field_5__last__bit Int)

(declare-const p__type_1__field_5__position Int)

;; p__type_1__field_5__first__bit_axiom
  (assert (<= 0 p__type_1__field_5__first__bit))

;; p__type_1__field_5__last__bit_axiom
  (assert (< p__type_1__field_5__first__bit p__type_1__field_5__last__bit))

;; p__type_1__field_5__position_axiom
  (assert (<= 0 p__type_1__field_5__position))

(declare-const p__type_1__field_6__first__bit Int)

(declare-const p__type_1__field_6__last__bit Int)

(declare-const p__type_1__field_6__position Int)

;; p__type_1__field_6__first__bit_axiom
  (assert (<= 0 p__type_1__field_6__first__bit))

;; p__type_1__field_6__last__bit_axiom
  (assert (< p__type_1__field_6__first__bit p__type_1__field_6__last__bit))

;; p__type_1__field_6__position_axiom
  (assert (<= 0 p__type_1__field_6__position))

(declare-const p__type_1__field_7__first__bit Int)

(declare-const p__type_1__field_7__last__bit Int)

(declare-const p__type_1__field_7__position Int)

;; p__type_1__field_7__first__bit_axiom
  (assert (<= 0 p__type_1__field_7__first__bit))

;; p__type_1__field_7__last__bit_axiom
  (assert (< p__type_1__field_7__first__bit p__type_1__field_7__last__bit))

;; p__type_1__field_7__position_axiom
  (assert (<= 0 p__type_1__field_7__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((type_1__ref 0))
(((type_1__refqtmk (type_1__content us_rep)))))
(define-fun type_1__ref_type_1__content__projection ((a type_1__ref)) us_rep 
  (type_1__content a))

(declare-fun create_type_1 (tuple0) us_rep)

(declare-fun create_type_1__function_guard (us_rep tuple0) Bool)

;; create_type_1__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (create_type_1 us_void_param)))
     (=> (create_type_1__function_guard result us_void_param)
     (and
     (and
     (and
     (and
     (and
     (and
     (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 result))) 0)
     (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 result))) 0))
     (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 result))) 0))
     (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 result))) 0))
     (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 result))) 0))
     (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 result))) 0))
     (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 result))) 0))
     (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 result))) 0)))) :pattern (
  (create_type_1 us_void_param)) )))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__p__type_2__field_0 us_rep)(rec__p__type_2__field_1 us_rep)(rec__p__type_2__field_2 us_rep)(rec__p__type_2__field_3 us_rep)(rec__p__type_2__field_4 us_rep)))))
(define-fun us_split_fields_rec__p__type_2__field_0__projection ((a us_split_fields2)) us_rep 
  (rec__p__type_2__field_0 a))

(define-fun us_split_fields_rec__p__type_2__field_1__projection ((a us_split_fields2)) us_rep 
  (rec__p__type_2__field_1 a))

(define-fun us_split_fields_rec__p__type_2__field_2__projection ((a us_split_fields2)) us_rep 
  (rec__p__type_2__field_2 a))

(define-fun us_split_fields_rec__p__type_2__field_3__projection ((a us_split_fields2)) us_rep 
  (rec__p__type_2__field_3 a))

(define-fun us_split_fields_rec__p__type_2__field_4__projection ((a us_split_fields2)) us_rep 
  (rec__p__type_2__field_4 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq
                            (rec__p__type_2__field_0 (us_split_fields3 a))
                            (rec__p__type_2__field_0 (us_split_fields3 b))) true)
                         (= (bool_eq
                            (rec__p__type_2__field_1 (us_split_fields3 a))
                            (rec__p__type_2__field_1 (us_split_fields3 b))) true))
                         (and
                         (and
                         (= (bool_eq
                            (rec__p__type_2__field_2 (us_split_fields3 a))
                            (rec__p__type_2__field_2 (us_split_fields3 b))) true)
                         (= (bool_eq
                            (rec__p__type_2__field_3 (us_split_fields3 a))
                            (rec__p__type_2__field_3 (us_split_fields3 b))) true))
                         (= (bool_eq
                            (rec__p__type_2__field_4 (us_split_fields3 a))
                            (rec__p__type_2__field_4 (us_split_fields3 b))) true)))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const p__type_2__field_0__first__bit Int)

(declare-const p__type_2__field_0__last__bit Int)

(declare-const p__type_2__field_0__position Int)

;; p__type_2__field_0__first__bit_axiom
  (assert (<= 0 p__type_2__field_0__first__bit))

;; p__type_2__field_0__last__bit_axiom
  (assert (< p__type_2__field_0__first__bit p__type_2__field_0__last__bit))

;; p__type_2__field_0__position_axiom
  (assert (<= 0 p__type_2__field_0__position))

(declare-const p__type_2__field_1__first__bit Int)

(declare-const p__type_2__field_1__last__bit Int)

(declare-const p__type_2__field_1__position Int)

;; p__type_2__field_1__first__bit_axiom
  (assert (<= 0 p__type_2__field_1__first__bit))

;; p__type_2__field_1__last__bit_axiom
  (assert (< p__type_2__field_1__first__bit p__type_2__field_1__last__bit))

;; p__type_2__field_1__position_axiom
  (assert (<= 0 p__type_2__field_1__position))

(declare-const p__type_2__field_2__first__bit Int)

(declare-const p__type_2__field_2__last__bit Int)

(declare-const p__type_2__field_2__position Int)

;; p__type_2__field_2__first__bit_axiom
  (assert (<= 0 p__type_2__field_2__first__bit))

;; p__type_2__field_2__last__bit_axiom
  (assert (< p__type_2__field_2__first__bit p__type_2__field_2__last__bit))

;; p__type_2__field_2__position_axiom
  (assert (<= 0 p__type_2__field_2__position))

(declare-const p__type_2__field_3__first__bit Int)

(declare-const p__type_2__field_3__last__bit Int)

(declare-const p__type_2__field_3__position Int)

;; p__type_2__field_3__first__bit_axiom
  (assert (<= 0 p__type_2__field_3__first__bit))

;; p__type_2__field_3__last__bit_axiom
  (assert (< p__type_2__field_3__first__bit p__type_2__field_3__last__bit))

;; p__type_2__field_3__position_axiom
  (assert (<= 0 p__type_2__field_3__position))

(declare-const p__type_2__field_4__first__bit Int)

(declare-const p__type_2__field_4__last__bit Int)

(declare-const p__type_2__field_4__position Int)

;; p__type_2__field_4__first__bit_axiom
  (assert (<= 0 p__type_2__field_4__first__bit))

;; p__type_2__field_4__last__bit_axiom
  (assert (< p__type_2__field_4__first__bit p__type_2__field_4__last__bit))

;; p__type_2__field_4__position_axiom
  (assert (<= 0 p__type_2__field_4__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((type_2__ref 0))
(((type_2__refqtmk (type_2__content us_rep1)))))
(define-fun type_2__ref_type_2__content__projection ((a type_2__ref)) us_rep1 
  (type_2__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__p__type_4__field_0 us_rep)(rec__p__type_4__field_1 us_rep)(rec__p__type_4__field_2 us_rep1)(rec__p__type_4__field_3 us_rep1)))))
(define-fun us_split_fields_rec__p__type_4__field_0__projection ((a us_split_fields4)) us_rep 
  (rec__p__type_4__field_0 a))

(define-fun us_split_fields_rec__p__type_4__field_1__projection ((a us_split_fields4)) us_rep 
  (rec__p__type_4__field_1 a))

(define-fun us_split_fields_rec__p__type_4__field_2__projection ((a us_split_fields4)) us_rep1 
  (rec__p__type_4__field_2 a))

(define-fun us_split_fields_rec__p__type_4__field_3__projection ((a us_split_fields4)) us_rep1 
  (rec__p__type_4__field_3 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (bool_eq
                            (rec__p__type_4__field_0 (us_split_fields5 a))
                            (rec__p__type_4__field_0 (us_split_fields5 b))) true)
                         (= (bool_eq
                            (rec__p__type_4__field_1 (us_split_fields5 a))
                            (rec__p__type_4__field_1 (us_split_fields5 b))) true))
                         (and
                         (= (bool_eq1
                            (rec__p__type_4__field_2 (us_split_fields5 a))
                            (rec__p__type_4__field_2 (us_split_fields5 b))) true)
                         (= (bool_eq1
                            (rec__p__type_4__field_3 (us_split_fields5 a))
                            (rec__p__type_4__field_3 (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const p__type_4__field_0__first__bit Int)

(declare-const p__type_4__field_0__last__bit Int)

(declare-const p__type_4__field_0__position Int)

;; p__type_4__field_0__first__bit_axiom
  (assert (<= 0 p__type_4__field_0__first__bit))

;; p__type_4__field_0__last__bit_axiom
  (assert (< p__type_4__field_0__first__bit p__type_4__field_0__last__bit))

;; p__type_4__field_0__position_axiom
  (assert (<= 0 p__type_4__field_0__position))

(declare-const p__type_4__field_1__first__bit Int)

(declare-const p__type_4__field_1__last__bit Int)

(declare-const p__type_4__field_1__position Int)

;; p__type_4__field_1__first__bit_axiom
  (assert (<= 0 p__type_4__field_1__first__bit))

;; p__type_4__field_1__last__bit_axiom
  (assert (< p__type_4__field_1__first__bit p__type_4__field_1__last__bit))

;; p__type_4__field_1__position_axiom
  (assert (<= 0 p__type_4__field_1__position))

(declare-const p__type_4__field_2__first__bit Int)

(declare-const p__type_4__field_2__last__bit Int)

(declare-const p__type_4__field_2__position Int)

;; p__type_4__field_2__first__bit_axiom
  (assert (<= 0 p__type_4__field_2__first__bit))

;; p__type_4__field_2__last__bit_axiom
  (assert (< p__type_4__field_2__first__bit p__type_4__field_2__last__bit))

;; p__type_4__field_2__position_axiom
  (assert (<= 0 p__type_4__field_2__position))

(declare-const p__type_4__field_3__first__bit Int)

(declare-const p__type_4__field_3__last__bit Int)

(declare-const p__type_4__field_3__position Int)

;; p__type_4__field_3__first__bit_axiom
  (assert (<= 0 p__type_4__field_3__first__bit))

;; p__type_4__field_3__last__bit_axiom
  (assert (< p__type_4__field_3__first__bit p__type_4__field_3__last__bit))

;; p__type_4__field_3__position_axiom
  (assert (<= 0 p__type_4__field_3__position))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-const dummy3 us_rep2)

(declare-datatypes ((type_4__ref 0))
(((type_4__refqtmk (type_4__content us_rep2)))))
(define-fun type_4__ref_type_4__content__projection ((a type_4__ref)) us_rep2 
  (type_4__content a))

(declare-fun create_type_4 (tuple0) us_rep2)

(declare-fun create_type_4__function_guard (us_rep2 tuple0) Bool)

(declare-fun create_type_2 (tuple0) us_rep1)

(declare-fun create_type_2__function_guard (us_rep1 tuple0) Bool)

;; create_type_4__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (create_type_4 us_void_param)))
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
     (and (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
     (=> (create_type_4__function_guard result us_void_param)
     (and
     (and
     (and
     (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 result))
        (create_type_1 Tuple0)) true)
     (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 result))
        (create_type_1 Tuple0)) true))
     (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 result))
        (create_type_2 Tuple0)) true))
     (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 result))
        (create_type_2 Tuple0)) true)))))))) :pattern ((create_type_4
                                                       us_void_param)) )))

(declare-sort type_3 0)

(declare-fun type_3qtint (type_3) Int)

;; type_3'axiom
  (assert
  (forall ((i type_3))
  (and (<= (- 2147483648) (type_3qtint i)) (<= (type_3qtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq4 (type_3 type_3) Bool)

(declare-const dummy4 type_3)

(declare-datatypes ((type_3__ref 0))
(((type_3__refqtmk (type_3__content type_3)))))
(define-fun type_3__ref_type_3__content__projection ((a type_3__ref)) type_3 
  (type_3__content a))

(define-fun to_rep1 ((x type_3)) Int (type_3qtint x))

(declare-fun of_rep1 (Int) type_3)

;; inversion_axiom
  (assert
  (forall ((x type_3))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x type_3)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__p__type_5__field_0 type_3)(rec__p__type_5__field_1 us_rep2)(rec__p__type_5__field_2 us_rep1)(rec__p__type_5__field_3 us_rep2)(rec__p__type_5__field_4 us_rep2)))))
(define-fun us_split_fields_rec__p__type_5__field_0__projection ((a us_split_fields6)) type_3 
  (rec__p__type_5__field_0 a))

(define-fun us_split_fields_rec__p__type_5__field_1__projection ((a us_split_fields6)) us_rep2 
  (rec__p__type_5__field_1 a))

(define-fun us_split_fields_rec__p__type_5__field_2__projection ((a us_split_fields6)) us_rep1 
  (rec__p__type_5__field_2 a))

(define-fun us_split_fields_rec__p__type_5__field_3__projection ((a us_split_fields6)) us_rep2 
  (rec__p__type_5__field_3 a))

(define-fun us_split_fields_rec__p__type_5__field_4__projection ((a us_split_fields6)) us_rep2 
  (rec__p__type_5__field_4 a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__p__type_5__field_0 (us_split_fields7 a))) 
                         (to_rep1
                         (rec__p__type_5__field_0 (us_split_fields7 b))))
                         (= (bool_eq2
                            (rec__p__type_5__field_1 (us_split_fields7 a))
                            (rec__p__type_5__field_1 (us_split_fields7 b))) true))
                         (and
                         (and
                         (= (bool_eq1
                            (rec__p__type_5__field_2 (us_split_fields7 a))
                            (rec__p__type_5__field_2 (us_split_fields7 b))) true)
                         (= (bool_eq2
                            (rec__p__type_5__field_3 (us_split_fields7 a))
                            (rec__p__type_5__field_3 (us_split_fields7 b))) true))
                         (= (bool_eq2
                            (rec__p__type_5__field_4 (us_split_fields7 a))
                            (rec__p__type_5__field_4 (us_split_fields7 b))) true)))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const p__type_5__field_0__first__bit Int)

(declare-const p__type_5__field_0__last__bit Int)

(declare-const p__type_5__field_0__position Int)

;; p__type_5__field_0__first__bit_axiom
  (assert (<= 0 p__type_5__field_0__first__bit))

;; p__type_5__field_0__last__bit_axiom
  (assert (< p__type_5__field_0__first__bit p__type_5__field_0__last__bit))

;; p__type_5__field_0__position_axiom
  (assert (<= 0 p__type_5__field_0__position))

(declare-const p__type_5__field_1__first__bit Int)

(declare-const p__type_5__field_1__last__bit Int)

(declare-const p__type_5__field_1__position Int)

;; p__type_5__field_1__first__bit_axiom
  (assert (<= 0 p__type_5__field_1__first__bit))

;; p__type_5__field_1__last__bit_axiom
  (assert (< p__type_5__field_1__first__bit p__type_5__field_1__last__bit))

;; p__type_5__field_1__position_axiom
  (assert (<= 0 p__type_5__field_1__position))

(declare-const p__type_5__field_2__first__bit Int)

(declare-const p__type_5__field_2__last__bit Int)

(declare-const p__type_5__field_2__position Int)

;; p__type_5__field_2__first__bit_axiom
  (assert (<= 0 p__type_5__field_2__first__bit))

;; p__type_5__field_2__last__bit_axiom
  (assert (< p__type_5__field_2__first__bit p__type_5__field_2__last__bit))

;; p__type_5__field_2__position_axiom
  (assert (<= 0 p__type_5__field_2__position))

(declare-const p__type_5__field_3__first__bit Int)

(declare-const p__type_5__field_3__last__bit Int)

(declare-const p__type_5__field_3__position Int)

;; p__type_5__field_3__first__bit_axiom
  (assert (<= 0 p__type_5__field_3__first__bit))

;; p__type_5__field_3__last__bit_axiom
  (assert (< p__type_5__field_3__first__bit p__type_5__field_3__last__bit))

;; p__type_5__field_3__position_axiom
  (assert (<= 0 p__type_5__field_3__position))

(declare-const p__type_5__field_4__first__bit Int)

(declare-const p__type_5__field_4__last__bit Int)

(declare-const p__type_5__field_4__position Int)

;; p__type_5__field_4__first__bit_axiom
  (assert (<= 0 p__type_5__field_4__first__bit))

;; p__type_5__field_4__last__bit_axiom
  (assert (< p__type_5__field_4__first__bit p__type_5__field_4__last__bit))

;; p__type_5__field_4__position_axiom
  (assert (<= 0 p__type_5__field_4__position))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((type_5__ref 0))
(((type_5__refqtmk (type_5__content us_rep3)))))
(define-fun type_5__ref_type_5__content__projection ((a type_5__ref)) us_rep3 
  (type_5__content a))

(declare-fun create_type_5 (tuple0) us_rep3)

(declare-fun create_type_5__function_guard (us_rep3 tuple0) Bool)

;; create_type_5__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (create_type_5 us_void_param)))
     (and (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
     (and (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
     (and (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
     (and (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
     (=> (create_type_5__function_guard result us_void_param)
     (and
     (and
     (and
     (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 result))) 0)
     (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 result))
        (create_type_4 Tuple0)) true))
     (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 result))
        (create_type_2 Tuple0)) true))
     (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 result))
        (create_type_4 Tuple0)) true))
     (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 result))
        (create_type_4 Tuple0)) true)))))))) :pattern ((create_type_5
                                                       us_void_param)) )))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4
  (rec__p__type_6__field_0 us_rep)(rec__p__type_6__field_1 us_rep3)(rec__p__type_6__field_2 us_rep1)(rec__p__type_6__field_3 us_rep3)))))
(define-fun us_split_fields_rec__p__type_6__field_0__projection ((a us_split_fields8)) us_rep 
  (rec__p__type_6__field_0 a))

(define-fun us_split_fields_rec__p__type_6__field_1__projection ((a us_split_fields8)) us_rep3 
  (rec__p__type_6__field_1 a))

(define-fun us_split_fields_rec__p__type_6__field_2__projection ((a us_split_fields8)) us_rep1 
  (rec__p__type_6__field_2 a))

(define-fun us_split_fields_rec__p__type_6__field_3__projection ((a us_split_fields8)) us_rep3 
  (rec__p__type_6__field_3 a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun bool_eq4 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (= (bool_eq
                            (rec__p__type_6__field_0 (us_split_fields9 a))
                            (rec__p__type_6__field_0 (us_split_fields9 b))) true)
                         (= (bool_eq3
                            (rec__p__type_6__field_1 (us_split_fields9 a))
                            (rec__p__type_6__field_1 (us_split_fields9 b))) true))
                         (and
                         (= (bool_eq1
                            (rec__p__type_6__field_2 (us_split_fields9 a))
                            (rec__p__type_6__field_2 (us_split_fields9 b))) true)
                         (= (bool_eq3
                            (rec__p__type_6__field_3 (us_split_fields9 a))
                            (rec__p__type_6__field_3 (us_split_fields9 b))) true)))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const p__type_6__field_0__first__bit Int)

(declare-const p__type_6__field_0__last__bit Int)

(declare-const p__type_6__field_0__position Int)

;; p__type_6__field_0__first__bit_axiom
  (assert (<= 0 p__type_6__field_0__first__bit))

;; p__type_6__field_0__last__bit_axiom
  (assert (< p__type_6__field_0__first__bit p__type_6__field_0__last__bit))

;; p__type_6__field_0__position_axiom
  (assert (<= 0 p__type_6__field_0__position))

(declare-const p__type_6__field_1__first__bit Int)

(declare-const p__type_6__field_1__last__bit Int)

(declare-const p__type_6__field_1__position Int)

;; p__type_6__field_1__first__bit_axiom
  (assert (<= 0 p__type_6__field_1__first__bit))

;; p__type_6__field_1__last__bit_axiom
  (assert (< p__type_6__field_1__first__bit p__type_6__field_1__last__bit))

;; p__type_6__field_1__position_axiom
  (assert (<= 0 p__type_6__field_1__position))

(declare-const p__type_6__field_2__first__bit Int)

(declare-const p__type_6__field_2__last__bit Int)

(declare-const p__type_6__field_2__position Int)

;; p__type_6__field_2__first__bit_axiom
  (assert (<= 0 p__type_6__field_2__first__bit))

;; p__type_6__field_2__last__bit_axiom
  (assert (< p__type_6__field_2__first__bit p__type_6__field_2__last__bit))

;; p__type_6__field_2__position_axiom
  (assert (<= 0 p__type_6__field_2__position))

(declare-const p__type_6__field_3__first__bit Int)

(declare-const p__type_6__field_3__last__bit Int)

(declare-const p__type_6__field_3__position Int)

;; p__type_6__field_3__first__bit_axiom
  (assert (<= 0 p__type_6__field_3__first__bit))

;; p__type_6__field_3__last__bit_axiom
  (assert (< p__type_6__field_3__first__bit p__type_6__field_3__last__bit))

;; p__type_6__field_3__position_axiom
  (assert (<= 0 p__type_6__field_3__position))

(declare-fun user_eq6 (us_rep4 us_rep4) Bool)

(declare-const dummy6 us_rep4)

(declare-datatypes ((type_6__ref 0))
(((type_6__refqtmk (type_6__content us_rep4)))))
(define-fun type_6__ref_type_6__content__projection ((a type_6__ref)) us_rep4 
  (type_6__content a))

(declare-fun create_type_6 (tuple0) us_rep4)

(declare-fun create_type_6__function_guard (us_rep4 tuple0) Bool)

;; create_type_6__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (create_type_6 us_void_param)))
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_5__function_guard (create_type_5 Tuple0) Tuple0)
     (and (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
     (and (create_type_5__function_guard (create_type_5 Tuple0) Tuple0)
     (=> (create_type_6__function_guard result us_void_param)
     (and
     (and
     (and
     (= (bool_eq (rec__p__type_6__field_0 (us_split_fields9 result))
        (create_type_1 Tuple0)) true)
     (= (bool_eq3 (rec__p__type_6__field_1 (us_split_fields9 result))
        (create_type_5 Tuple0)) true))
     (= (bool_eq1 (rec__p__type_6__field_2 (us_split_fields9 result))
        (create_type_2 Tuple0)) true))
     (= (bool_eq3 (rec__p__type_6__field_3 (us_split_fields9 result))
        (create_type_5 Tuple0)) true)))))))) :pattern ((create_type_6
                                                       us_void_param)) )))

(declare-sort type_7 0)

(declare-fun type_7qtint (type_7) Int)

;; type_7'axiom
  (assert
  (forall ((i type_7))
  (and (<= (- 2147483648) (type_7qtint i)) (<= (type_7qtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq7 (type_7 type_7) Bool)

(declare-const dummy7 type_7)

(declare-datatypes ((type_7__ref 0))
(((type_7__refqtmk (type_7__content type_7)))))
(define-fun type_7__ref_type_7__content__projection ((a type_7__ref)) type_7 
  (type_7__content a))

(define-fun to_rep2 ((x type_7)) Int (type_7qtint x))

(declare-fun of_rep2 (Int) type_7)

;; inversion_axiom
  (assert
  (forall ((x type_7))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x type_7)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields10 0))
(((us_split_fieldsqtmk5
  (rec__p__type_8__field_0 us_rep2)(rec__p__type_8__field_1 us_rep3)(rec__p__type_8__field_2 us_rep2)(rec__p__type_8__field_3 us_rep4)(rec__p__type_8__field_4 us_rep3)(rec__p__type_8__field_5 type_7)(rec__p__type_8__field_6 us_rep)(rec__p__type_8__field_7 us_rep3)))))
(define-fun us_split_fields_rec__p__type_8__field_0__projection ((a us_split_fields10)) us_rep2 
  (rec__p__type_8__field_0 a))

(define-fun us_split_fields_rec__p__type_8__field_1__projection ((a us_split_fields10)) us_rep3 
  (rec__p__type_8__field_1 a))

(define-fun us_split_fields_rec__p__type_8__field_2__projection ((a us_split_fields10)) us_rep2 
  (rec__p__type_8__field_2 a))

(define-fun us_split_fields_rec__p__type_8__field_3__projection ((a us_split_fields10)) us_rep4 
  (rec__p__type_8__field_3 a))

(define-fun us_split_fields_rec__p__type_8__field_4__projection ((a us_split_fields10)) us_rep3 
  (rec__p__type_8__field_4 a))

(define-fun us_split_fields_rec__p__type_8__field_5__projection ((a us_split_fields10)) type_7 
  (rec__p__type_8__field_5 a))

(define-fun us_split_fields_rec__p__type_8__field_6__projection ((a us_split_fields10)) us_rep 
  (rec__p__type_8__field_6 a))

(define-fun us_split_fields_rec__p__type_8__field_7__projection ((a us_split_fields10)) us_rep3 
  (rec__p__type_8__field_7 a))

(declare-datatypes ((us_split_fields__ref5 0))
(((us_split_fields__refqtmk5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___split_fields__6__projection ((a us_rep5)) us_split_fields10 
  (us_split_fields11 a))

(define-fun bool_eq5 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__p__type_8__field_0 (us_split_fields11 a))
                            (rec__p__type_8__field_0 (us_split_fields11 b))) true)
                         (= (bool_eq3
                            (rec__p__type_8__field_1 (us_split_fields11 a))
                            (rec__p__type_8__field_1 (us_split_fields11 b))) true))
                         (and
                         (and
                         (and
                         (= (bool_eq2
                            (rec__p__type_8__field_2 (us_split_fields11 a))
                            (rec__p__type_8__field_2 (us_split_fields11 b))) true)
                         (= (bool_eq4
                            (rec__p__type_8__field_3 (us_split_fields11 a))
                            (rec__p__type_8__field_3 (us_split_fields11 b))) true))
                         (= (bool_eq3
                            (rec__p__type_8__field_4 (us_split_fields11 a))
                            (rec__p__type_8__field_4 (us_split_fields11 b))) true))
                         (and
                         (and
                         (= (to_rep2
                            (rec__p__type_8__field_5 (us_split_fields11 a))) 
                         (to_rep2
                         (rec__p__type_8__field_5 (us_split_fields11 b))))
                         (= (bool_eq
                            (rec__p__type_8__field_6 (us_split_fields11 a))
                            (rec__p__type_8__field_6 (us_split_fields11 b))) true))
                         (= (bool_eq3
                            (rec__p__type_8__field_7 (us_split_fields11 a))
                            (rec__p__type_8__field_7 (us_split_fields11 b))) true))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const p__type_8__field_0__first__bit Int)

(declare-const p__type_8__field_0__last__bit Int)

(declare-const p__type_8__field_0__position Int)

;; p__type_8__field_0__first__bit_axiom
  (assert (<= 0 p__type_8__field_0__first__bit))

;; p__type_8__field_0__last__bit_axiom
  (assert (< p__type_8__field_0__first__bit p__type_8__field_0__last__bit))

;; p__type_8__field_0__position_axiom
  (assert (<= 0 p__type_8__field_0__position))

(declare-const p__type_8__field_1__first__bit Int)

(declare-const p__type_8__field_1__last__bit Int)

(declare-const p__type_8__field_1__position Int)

;; p__type_8__field_1__first__bit_axiom
  (assert (<= 0 p__type_8__field_1__first__bit))

;; p__type_8__field_1__last__bit_axiom
  (assert (< p__type_8__field_1__first__bit p__type_8__field_1__last__bit))

;; p__type_8__field_1__position_axiom
  (assert (<= 0 p__type_8__field_1__position))

(declare-const p__type_8__field_2__first__bit Int)

(declare-const p__type_8__field_2__last__bit Int)

(declare-const p__type_8__field_2__position Int)

;; p__type_8__field_2__first__bit_axiom
  (assert (<= 0 p__type_8__field_2__first__bit))

;; p__type_8__field_2__last__bit_axiom
  (assert (< p__type_8__field_2__first__bit p__type_8__field_2__last__bit))

;; p__type_8__field_2__position_axiom
  (assert (<= 0 p__type_8__field_2__position))

(declare-const p__type_8__field_3__first__bit Int)

(declare-const p__type_8__field_3__last__bit Int)

(declare-const p__type_8__field_3__position Int)

;; p__type_8__field_3__first__bit_axiom
  (assert (<= 0 p__type_8__field_3__first__bit))

;; p__type_8__field_3__last__bit_axiom
  (assert (< p__type_8__field_3__first__bit p__type_8__field_3__last__bit))

;; p__type_8__field_3__position_axiom
  (assert (<= 0 p__type_8__field_3__position))

(declare-const p__type_8__field_4__first__bit Int)

(declare-const p__type_8__field_4__last__bit Int)

(declare-const p__type_8__field_4__position Int)

;; p__type_8__field_4__first__bit_axiom
  (assert (<= 0 p__type_8__field_4__first__bit))

;; p__type_8__field_4__last__bit_axiom
  (assert (< p__type_8__field_4__first__bit p__type_8__field_4__last__bit))

;; p__type_8__field_4__position_axiom
  (assert (<= 0 p__type_8__field_4__position))

(declare-const p__type_8__field_5__first__bit Int)

(declare-const p__type_8__field_5__last__bit Int)

(declare-const p__type_8__field_5__position Int)

;; p__type_8__field_5__first__bit_axiom
  (assert (<= 0 p__type_8__field_5__first__bit))

;; p__type_8__field_5__last__bit_axiom
  (assert (< p__type_8__field_5__first__bit p__type_8__field_5__last__bit))

;; p__type_8__field_5__position_axiom
  (assert (<= 0 p__type_8__field_5__position))

(declare-const p__type_8__field_6__first__bit Int)

(declare-const p__type_8__field_6__last__bit Int)

(declare-const p__type_8__field_6__position Int)

;; p__type_8__field_6__first__bit_axiom
  (assert (<= 0 p__type_8__field_6__first__bit))

;; p__type_8__field_6__last__bit_axiom
  (assert (< p__type_8__field_6__first__bit p__type_8__field_6__last__bit))

;; p__type_8__field_6__position_axiom
  (assert (<= 0 p__type_8__field_6__position))

(declare-const p__type_8__field_7__first__bit Int)

(declare-const p__type_8__field_7__last__bit Int)

(declare-const p__type_8__field_7__position Int)

;; p__type_8__field_7__first__bit_axiom
  (assert (<= 0 p__type_8__field_7__first__bit))

;; p__type_8__field_7__last__bit_axiom
  (assert (< p__type_8__field_7__first__bit p__type_8__field_7__last__bit))

;; p__type_8__field_7__position_axiom
  (assert (<= 0 p__type_8__field_7__position))

(declare-fun user_eq8 (us_rep5 us_rep5) Bool)

(declare-const dummy8 us_rep5)

(declare-datatypes ((type_8__ref 0))
(((type_8__refqtmk (type_8__content us_rep5)))))
(define-fun type_8__ref_type_8__content__projection ((a type_8__ref)) us_rep5 
  (type_8__content a))

(define-fun dynamic_invariant ((temp___expr_164 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)
  (temp___do_typ_inv_163 Bool)) Bool (=>
                                     (or (= temp___is_init_160 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_164)))

;; create_type_2__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (create_type_2 us_void_param)))
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (and (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
     (=> (create_type_2__function_guard result us_void_param)
     (and
     (and
     (and
     (and
     (= (bool_eq (rec__p__type_2__field_0 (us_split_fields3 result))
        (create_type_1 Tuple0)) true)
     (= (bool_eq (rec__p__type_2__field_1 (us_split_fields3 result))
        (create_type_1 Tuple0)) true))
     (= (bool_eq (rec__p__type_2__field_2 (us_split_fields3 result))
        (create_type_1 Tuple0)) true))
     (= (bool_eq (rec__p__type_2__field_3 (us_split_fields3 result))
        (create_type_1 Tuple0)) true))
     (= (bool_eq (rec__p__type_2__field_4 (us_split_fields3 result))
        (create_type_1 Tuple0)) true))))))))) :pattern ((create_type_2
                                                        us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_268 Int)
  (temp___is_init_264 Bool) (temp___skip_constant_265 Bool)
  (temp___do_toplevel_266 Bool)
  (temp___do_typ_inv_267 Bool)) Bool (=>
                                     (or (= temp___is_init_264 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_268)))

(define-fun dynamic_invariant2 ((temp___expr_1675 Int)
  (temp___is_init_1671 Bool) (temp___skip_constant_1672 Bool)
  (temp___do_toplevel_1673 Bool)
  (temp___do_typ_inv_1674 Bool)) Bool (=>
                                      (or (= temp___is_init_1671 true)
                                      (<= (- 2147483648) 2147483647))
                                      (in_range2 temp___expr_1675)))

(declare-const rliteral type_7)

;; rliteral_axiom
  (assert (= (type_7qtint rliteral) 0))

(assert
;; defqtvc
 ;; File "p.ads", line 102, characters 0-0
  (not
  (let ((o (create_type_5 Tuple0)))
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=>
  (and (create_type_5__function_guard o Tuple0)
  (and
  (and
  (and
  (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o))) 0)
  (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 o))
     (create_type_4 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 o))
     (create_type_2 Tuple0)) true))
  (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 o))
     (create_type_4 Tuple0)) true))
  (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 o))
     (create_type_4 Tuple0)) true)))
  (let ((o1 (create_type_1 Tuple0)))
  (=>
  (and (create_type_1__function_guard o1 Tuple0)
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= (to_rep (rec__p__type_1__field_0 (us_split_fields1 o1))) 0)
  (= (to_rep (rec__p__type_1__field_1 (us_split_fields1 o1))) 0))
  (= (to_rep (rec__p__type_1__field_2 (us_split_fields1 o1))) 0))
  (= (to_rep (rec__p__type_1__field_3 (us_split_fields1 o1))) 0))
  (= (to_rep (rec__p__type_1__field_4 (us_split_fields1 o1))) 0))
  (= (to_rep (rec__p__type_1__field_5 (us_split_fields1 o1))) 0))
  (= (to_rep (rec__p__type_1__field_6 (us_split_fields1 o1))) 0))
  (= (to_rep (rec__p__type_1__field_7 (us_split_fields1 o1))) 0)))
  (let ((o2 (create_type_5 Tuple0)))
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=>
  (and (create_type_5__function_guard o2 Tuple0)
  (and
  (and
  (and
  (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o2))) 0)
  (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 o2))
     (create_type_4 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 o2))
     (create_type_2 Tuple0)) true))
  (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 o2))
     (create_type_4 Tuple0)) true))
  (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 o2))
     (create_type_4 Tuple0)) true)))
  (let ((o3 (create_type_6 Tuple0)))
  (=> (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
  (=> (create_type_5__function_guard (create_type_5 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=> (create_type_5__function_guard (create_type_5 Tuple0) Tuple0)
  (=>
  (and (create_type_6__function_guard o3 Tuple0)
  (and
  (and
  (and
  (= (bool_eq (rec__p__type_6__field_0 (us_split_fields9 o3))
     (create_type_1 Tuple0)) true)
  (= (bool_eq3 (rec__p__type_6__field_1 (us_split_fields9 o3))
     (create_type_5 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_6__field_2 (us_split_fields9 o3))
     (create_type_2 Tuple0)) true))
  (= (bool_eq3 (rec__p__type_6__field_3 (us_split_fields9 o3))
     (create_type_5 Tuple0)) true)))
  (let ((o4 (create_type_4 Tuple0)))
  (=> (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
  (=> (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=>
  (and (create_type_4__function_guard o4 Tuple0)
  (and
  (and
  (and
  (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 o4))
     (create_type_1 Tuple0)) true)
  (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 o4))
     (create_type_1 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 o4))
     (create_type_2 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 o4))
     (create_type_2 Tuple0)) true)))
  (let ((o5 (create_type_5 Tuple0)))
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (=>
  (and (create_type_5__function_guard o5 Tuple0)
  (and
  (and
  (and
  (and (= (to_rep1 (rec__p__type_5__field_0 (us_split_fields7 o5))) 0)
  (= (bool_eq2 (rec__p__type_5__field_1 (us_split_fields7 o5))
     (create_type_4 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_5__field_2 (us_split_fields7 o5))
     (create_type_2 Tuple0)) true))
  (= (bool_eq2 (rec__p__type_5__field_3 (us_split_fields7 o5))
     (create_type_4 Tuple0)) true))
  (= (bool_eq2 (rec__p__type_5__field_4 (us_split_fields7 o5))
     (create_type_4 Tuple0)) true)))
  (let ((o6 (create_type_4 Tuple0)))
  (=> (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
  (=> (create_type_1__function_guard (create_type_1 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=> (create_type_2__function_guard (create_type_2 Tuple0) Tuple0)
  (=>
  (and (create_type_4__function_guard o6 Tuple0)
  (and
  (and
  (and
  (= (bool_eq (rec__p__type_4__field_0 (us_split_fields5 o6))
     (create_type_1 Tuple0)) true)
  (= (bool_eq (rec__p__type_4__field_1 (us_split_fields5 o6))
     (create_type_1 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_4__field_2 (us_split_fields5 o6))
     (create_type_2 Tuple0)) true))
  (= (bool_eq1 (rec__p__type_4__field_3 (us_split_fields5 o6))
     (create_type_2 Tuple0)) true)))
  (forall ((p__create_type_8__result us_split_fields10))
  (=>
  (= p__create_type_8__result (us_split_fieldsqtmk5 o6 o5 o4 o3 o2 rliteral
                              o1 o))
  (=> (create_type_4__function_guard (create_type_4 Tuple0) Tuple0)
  (= (bool_eq2 (rec__p__type_8__field_0 p__create_type_8__result)
     (create_type_4 Tuple0)) true))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
