;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__dic_of_cont__my_dlli__list__capacity count_type)))))
(define-fun us_split_discrs_rec__dic_of_cont__my_dlli__list__capacity__projection ((a us_split_discrs)) count_type 
  (rec__dic_of_cont__my_dlli__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__dic_of_cont__my_dlli__list us_main_type)))))
(define-fun us_split_fields_rec__dic_of_cont__my_dlli__list__projection ((a us_split_fields)) us_main_type 
  (rec__dic_of_cont__my_dlli__list a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__dic_of_cont__my_dlli__list__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__dic_of_cont__my_dlli__list__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__dic_of_cont__my_dlli__list
                           (us_split_fields1 a))
                           (rec__dic_of_cont__my_dlli__list
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dic_of_cont__my_dlli__list__capacity__first__bit Int)

(declare-const dic_of_cont__my_dlli__list__capacity__last__bit Int)

(declare-const dic_of_cont__my_dlli__list__capacity__position Int)

;; dic_of_cont__my_dlli__list__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_dlli__list__capacity__first__bit))

;; dic_of_cont__my_dlli__list__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_dlli__list__capacity__first__bit dic_of_cont__my_dlli__list__capacity__last__bit))

;; dic_of_cont__my_dlli__list__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_dlli__list__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (hash_type hash_type) Bool)

(declare-const dummy2 hash_type)

(declare-datatypes ((hash_type__ref 0))
(((hash_type__refqtmk (hash_type__content hash_type)))))
(define-fun hash_type__ref_hash_type__content__projection ((a hash_type__ref)) hash_type 
  (hash_type__content a))

(declare-fun to_rep1 (hash_type) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__dic_of_cont__my_hama__map__capacity count_type)(rec__dic_of_cont__my_hama__map__modulus hash_type)))))
(define-fun us_split_discrs_rec__dic_of_cont__my_hama__map__capacity__projection ((a us_split_discrs2)) count_type 
  (rec__dic_of_cont__my_hama__map__capacity a))

(define-fun us_split_discrs_rec__dic_of_cont__my_hama__map__modulus__projection ((a us_split_discrs2)) hash_type 
  (rec__dic_of_cont__my_hama__map__modulus a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__dic_of_cont__my_hama__map us_main_type1)))))
(define-fun us_split_fields_rec__dic_of_cont__my_hama__map__projection ((a us_split_fields2)) us_main_type1 
  (rec__dic_of_cont__my_hama__map a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__dic_of_cont__my_hama__map__capacity
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__dic_of_cont__my_hama__map__capacity
                                                   (us_split_discrs3 b))))
                         (= (to_rep1
                            (rec__dic_of_cont__my_hama__map__modulus
                            (us_split_discrs3 a))) (to_rep1
                                                   (rec__dic_of_cont__my_hama__map__modulus
                                                   (us_split_discrs3 b)))))
                         (= (us_main_eq1
                            (rec__dic_of_cont__my_hama__map
                            (us_split_fields3 a))
                            (rec__dic_of_cont__my_hama__map
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const dic_of_cont__my_hama__map__capacity__first__bit Int)

(declare-const dic_of_cont__my_hama__map__capacity__last__bit Int)

(declare-const dic_of_cont__my_hama__map__capacity__position Int)

;; dic_of_cont__my_hama__map__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__capacity__first__bit))

;; dic_of_cont__my_hama__map__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_hama__map__capacity__first__bit dic_of_cont__my_hama__map__capacity__last__bit))

;; dic_of_cont__my_hama__map__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__capacity__position))

(declare-const dic_of_cont__my_hama__map__modulus__first__bit Int)

(declare-const dic_of_cont__my_hama__map__modulus__last__bit Int)

(declare-const dic_of_cont__my_hama__map__modulus__position Int)

;; dic_of_cont__my_hama__map__modulus__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__modulus__first__bit))

;; dic_of_cont__my_hama__map__modulus__last__bit_axiom
  (assert
  (< dic_of_cont__my_hama__map__modulus__first__bit dic_of_cont__my_hama__map__modulus__last__bit))

;; dic_of_cont__my_hama__map__modulus__position_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__modulus__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep1)))))
(define-fun map__ref_map__content__2__projection ((a map__ref)) us_rep1 
  (map__content a))

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(declare-fun oeq1 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true) (= (length1 container) 0)) :pattern (
  (is_empty1 container)) )))

(declare-fun default_modulus (Int) (_ BitVec 32))

(declare-fun default_modulus__function_guard ((_ BitVec 32) Int) Bool)

(define-fun dynamic_invariant ((temp___expr_657 (_ BitVec 32))
  (temp___is_init_653 Bool) (temp___skip_constant_654 Bool)
  (temp___do_toplevel_655 Bool) (temp___do_typ_inv_656 Bool)) Bool true)

(define-fun dynamic_invariant1 ((temp___expr_671 Int)
  (temp___is_init_667 Bool) (temp___skip_constant_668 Bool)
  (temp___do_toplevel_669 Bool)
  (temp___do_typ_inv_670 Bool)) Bool (=>
                                     (or (= temp___is_init_667 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_671)))

;; default_modulus__post_axiom
  (assert
  (forall ((capacity Int))
  (! (=> (dynamic_invariant1 capacity true true true true) (dynamic_invariant
     (default_modulus capacity) true false true true)) :pattern ((default_modulus
                                                                 capacity)) )))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-datatypes ((us_split_discrs4 0))
(((us_split_discrsqtmk2
  (rec__dic_of_cont__my_hase__set__capacity count_type)(rec__dic_of_cont__my_hase__set__modulus hash_type)))))
(define-fun us_split_discrs_rec__dic_of_cont__my_hase__set__capacity__projection ((a us_split_discrs4)) count_type 
  (rec__dic_of_cont__my_hase__set__capacity a))

(define-fun us_split_discrs_rec__dic_of_cont__my_hase__set__modulus__projection ((a us_split_discrs4)) hash_type 
  (rec__dic_of_cont__my_hase__set__modulus a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((us_split_discrs__refqtmk2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__dic_of_cont__my_hase__set us_main_type2)))))
(define-fun us_split_fields_rec__dic_of_cont__my_hase__set__projection ((a us_split_fields4)) us_main_type2 
  (rec__dic_of_cont__my_hase__set a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs5 us_split_discrs4)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs4 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__dic_of_cont__my_hase__set__capacity
                            (us_split_discrs5 a))) (to_rep
                                                   (rec__dic_of_cont__my_hase__set__capacity
                                                   (us_split_discrs5 b))))
                         (= (to_rep1
                            (rec__dic_of_cont__my_hase__set__modulus
                            (us_split_discrs5 a))) (to_rep1
                                                   (rec__dic_of_cont__my_hase__set__modulus
                                                   (us_split_discrs5 b)))))
                         (= (us_main_eq2
                            (rec__dic_of_cont__my_hase__set
                            (us_split_fields5 a))
                            (rec__dic_of_cont__my_hase__set
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const dic_of_cont__my_hase__set__capacity__first__bit Int)

(declare-const dic_of_cont__my_hase__set__capacity__last__bit Int)

(declare-const dic_of_cont__my_hase__set__capacity__position Int)

;; dic_of_cont__my_hase__set__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__capacity__first__bit))

;; dic_of_cont__my_hase__set__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_hase__set__capacity__first__bit dic_of_cont__my_hase__set__capacity__last__bit))

;; dic_of_cont__my_hase__set__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__capacity__position))

(declare-const dic_of_cont__my_hase__set__modulus__first__bit Int)

(declare-const dic_of_cont__my_hase__set__modulus__last__bit Int)

(declare-const dic_of_cont__my_hase__set__modulus__position Int)

;; dic_of_cont__my_hase__set__modulus__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__modulus__first__bit))

;; dic_of_cont__my_hase__set__modulus__last__bit_axiom
  (assert
  (< dic_of_cont__my_hase__set__modulus__first__bit dic_of_cont__my_hase__set__modulus__last__bit))

;; dic_of_cont__my_hase__set__modulus__position_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__modulus__position))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((set__ref 0))
(((set__refqtmk (set__content us_rep2)))))
(define-fun set__ref_set__content__projection ((a set__ref)) us_rep2 
  (set__content a))

(declare-fun is_empty2 (us_rep2) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep2) Bool)

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard2 (Int us_rep2) Bool)

(declare-fun oeq2 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq2 a b)) :pattern ((user_eq4 a b)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty2 container) true) (= (length2 container) 0)) :pattern (
  (is_empty2 container)) )))

(declare-fun default_modulus1 (Int) (_ BitVec 32))

(declare-fun default_modulus__function_guard1 ((_ BitVec 32) Int) Bool)

;; default_modulus__post_axiom
  (assert
  (forall ((capacity Int))
  (! (=> (dynamic_invariant1 capacity true true true true) (dynamic_invariant
     (default_modulus1 capacity) true false true true)) :pattern ((default_modulus1
                                                                  capacity)) )))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-datatypes ((us_split_discrs6 0))
(((us_split_discrsqtmk3
  (rec__dic_of_cont__my_orma__map__capacity count_type)))))
(define-fun us_split_discrs_rec__dic_of_cont__my_orma__map__capacity__projection ((a us_split_discrs6)) count_type 
  (rec__dic_of_cont__my_orma__map__capacity a))

(declare-datatypes ((us_split_discrs__ref3 0))
(((us_split_discrs__refqtmk3 (us_split_discrs__content3 us_split_discrs6)))))
(define-fun us_split_discrs__ref___split_discrs__content__4__projection ((a us_split_discrs__ref3)) us_split_discrs6 
  (us_split_discrs__content3 a))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3 (rec__dic_of_cont__my_orma__map us_main_type3)))))
(define-fun us_split_fields_rec__dic_of_cont__my_orma__map__projection ((a us_split_fields6)) us_main_type3 
  (rec__dic_of_cont__my_orma__map a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__7__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3
  (us_split_discrs7 us_split_discrs6)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep3)) us_split_discrs6 
  (us_split_discrs7 a))

(define-fun us_rep___split_fields__7__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__dic_of_cont__my_orma__map__capacity
                            (us_split_discrs7 a))) (to_rep
                                                   (rec__dic_of_cont__my_orma__map__capacity
                                                   (us_split_discrs7 b))))
                         (= (us_main_eq3
                            (rec__dic_of_cont__my_orma__map
                            (us_split_fields7 a))
                            (rec__dic_of_cont__my_orma__map
                            (us_split_fields7 b))) true))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const dic_of_cont__my_orma__map__capacity__first__bit Int)

(declare-const dic_of_cont__my_orma__map__capacity__last__bit Int)

(declare-const dic_of_cont__my_orma__map__capacity__position Int)

;; dic_of_cont__my_orma__map__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_orma__map__capacity__first__bit))

;; dic_of_cont__my_orma__map__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_orma__map__capacity__first__bit dic_of_cont__my_orma__map__capacity__last__bit))

;; dic_of_cont__my_orma__map__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_orma__map__capacity__position))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 us_rep3)))))
(define-fun map__ref_map__content__6__projection ((a map__ref1)) us_rep3 
  (map__content1 a))

(declare-fun is_empty3 (us_rep3) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep3) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(declare-fun oeq3 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq5 a b) (oeq3 a b)) :pattern ((user_eq5 a b)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (= (is_empty3 container) true) (= (length3 container) 0)) :pattern (
  (is_empty3 container)) )))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-datatypes ((us_split_discrs8 0))
(((us_split_discrsqtmk4
  (rec__dic_of_cont__my_orse__set__capacity count_type)))))
(define-fun us_split_discrs_rec__dic_of_cont__my_orse__set__capacity__projection ((a us_split_discrs8)) count_type 
  (rec__dic_of_cont__my_orse__set__capacity a))

(declare-datatypes ((us_split_discrs__ref4 0))
(((us_split_discrs__refqtmk4 (us_split_discrs__content4 us_split_discrs8)))))
(define-fun us_split_discrs__ref___split_discrs__content__5__projection ((a us_split_discrs__ref4)) us_split_discrs8 
  (us_split_discrs__content4 a))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4 (rec__dic_of_cont__my_orse__set us_main_type4)))))
(define-fun us_split_fields_rec__dic_of_cont__my_orse__set__projection ((a us_split_fields8)) us_main_type4 
  (rec__dic_of_cont__my_orse__set a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__9__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk4
  (us_split_discrs9 us_split_discrs8)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep4)) us_split_discrs8 
  (us_split_discrs9 a))

(define-fun us_rep___split_fields__9__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun bool_eq4 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep
                            (rec__dic_of_cont__my_orse__set__capacity
                            (us_split_discrs9 a))) (to_rep
                                                   (rec__dic_of_cont__my_orse__set__capacity
                                                   (us_split_discrs9 b))))
                         (= (us_main_eq4
                            (rec__dic_of_cont__my_orse__set
                            (us_split_fields9 a))
                            (rec__dic_of_cont__my_orse__set
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const dic_of_cont__my_orse__set__capacity__first__bit Int)

(declare-const dic_of_cont__my_orse__set__capacity__last__bit Int)

(declare-const dic_of_cont__my_orse__set__capacity__position Int)

;; dic_of_cont__my_orse__set__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_orse__set__capacity__first__bit))

;; dic_of_cont__my_orse__set__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_orse__set__capacity__first__bit dic_of_cont__my_orse__set__capacity__last__bit))

;; dic_of_cont__my_orse__set__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_orse__set__capacity__position))

(declare-fun user_eq6 (us_rep4 us_rep4) Bool)

(declare-const dummy6 us_rep4)

(declare-datatypes ((set__ref1 0))
(((set__refqtmk1 (set__content1 us_rep4)))))
(define-fun set__ref_set__content__3__projection ((a set__ref1)) us_rep4 
  (set__content1 a))

(declare-fun is_empty4 (us_rep4) Bool)

(declare-fun is_empty__function_guard4 (Bool us_rep4) Bool)

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard4 (Int us_rep4) Bool)

(declare-fun oeq4 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep4 us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq6 a b) (oeq4 a b)) :pattern ((user_eq6 a b)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty4 container) true) (= (length4 container) 0)) :pattern (
  (is_empty4 container)) )))

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i))
  (<= (capacity_rangeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq7 (capacity_range capacity_range) Bool)

(declare-const dummy7 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep2 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-datatypes ((us_split_discrs10 0))
(((us_split_discrsqtmk5
  (rec__dic_of_cont__my_fove__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__dic_of_cont__my_fove__vector__capacity__projection ((a us_split_discrs10)) capacity_range 
  (rec__dic_of_cont__my_fove__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref5 0))
(((us_split_discrs__refqtmk5 (us_split_discrs__content5 us_split_discrs10)))))
(define-fun us_split_discrs__ref___split_discrs__content__6__projection ((a us_split_discrs__ref5)) us_split_discrs10 
  (us_split_discrs__content5 a))

(declare-datatypes ((us_split_fields10 0))
(((us_split_fieldsqtmk5 (rec__dic_of_cont__my_fove__vector us_main_type5)))))
(define-fun us_split_fields_rec__dic_of_cont__my_fove__vector__projection ((a us_split_fields10)) us_main_type5 
  (rec__dic_of_cont__my_fove__vector a))

(declare-datatypes ((us_split_fields__ref5 0))
(((us_split_fields__refqtmk5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___split_fields__content__11__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk5
  (us_split_discrs11 us_split_discrs10)(us_split_fields11 us_split_fields10)))))
(define-fun us_rep___split_discrs__6__projection ((a us_rep5)) us_split_discrs10 
  (us_split_discrs11 a))

(define-fun us_rep___split_fields__11__projection ((a us_rep5)) us_split_fields10 
  (us_split_fields11 a))

(define-fun bool_eq5 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep2
                            (rec__dic_of_cont__my_fove__vector__capacity
                            (us_split_discrs11 a))) (to_rep2
                                                    (rec__dic_of_cont__my_fove__vector__capacity
                                                    (us_split_discrs11 b))))
                         (= (us_main_eq5
                            (rec__dic_of_cont__my_fove__vector
                            (us_split_fields11 a))
                            (rec__dic_of_cont__my_fove__vector
                            (us_split_fields11 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const dic_of_cont__my_fove__vector__capacity__first__bit Int)

(declare-const dic_of_cont__my_fove__vector__capacity__last__bit Int)

(declare-const dic_of_cont__my_fove__vector__capacity__position Int)

;; dic_of_cont__my_fove__vector__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_fove__vector__capacity__first__bit))

;; dic_of_cont__my_fove__vector__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_fove__vector__capacity__first__bit dic_of_cont__my_fove__vector__capacity__last__bit))

;; dic_of_cont__my_fove__vector__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_fove__vector__capacity__position))

(declare-fun user_eq8 (us_rep5 us_rep5) Bool)

(declare-const dummy8 us_rep5)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep5)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep5 
  (vector__content a))

(declare-fun is_empty5 (us_rep5) Bool)

(declare-fun is_empty__function_guard5 (Bool us_rep5) Bool)

(declare-fun length5 (us_rep5) Int)

(declare-fun length__function_guard5 (Int us_rep5) Bool)

(declare-fun oeq5 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard5 (Bool us_rep5 us_rep5) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq8 a b) (oeq5 a b)) :pattern ((user_eq8 a b)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty5 container) true) (= (length5 container) 0)) :pattern (
  (is_empty5 container)) )))

(declare-const capacity Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range2 ((rec__dic_of_cont__my_dlli__list__capacity1 Int)
  (a us_rep)) Bool (= rec__dic_of_cont__my_dlli__list__capacity1 (to_rep
                                                                 (rec__dic_of_cont__my_dlli__list__capacity
                                                                 (us_split_discrs1
                                                                 a)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const dic_of_cont__my_dlli__list__capacity__first__bit1 Int)

(declare-const dic_of_cont__my_dlli__list__capacity__last__bit1 Int)

(declare-const dic_of_cont__my_dlli__list__capacity__position1 Int)

;; dic_of_cont__my_dlli__list__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_dlli__list__capacity__first__bit1))

;; dic_of_cont__my_dlli__list__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_dlli__list__capacity__first__bit1 dic_of_cont__my_dlli__list__capacity__last__bit1))

;; dic_of_cont__my_dlli__list__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_dlli__list__capacity__position1))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((tdlliS__ref 0))
(((tdlliS__refqtmk (tdlliS__content us_rep)))))
(define-fun tdlliS__ref_tdlliS__content__projection ((a tdlliS__ref)) us_rep 
  (tdlliS__content a))

(declare-const dlli__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq9 a b) (oeq a b)) :pattern ((user_eq9 a b)) )))

(define-fun dynamic_invariant2 ((temp___expr_2544 us_rep)
  (temp___is_init_2540 Bool) (temp___skip_constant_2541 Bool)
  (temp___do_toplevel_2542 Bool)
  (temp___do_typ_inv_2543 Bool)) Bool (=>
                                      (not
                                      (= temp___skip_constant_2541 true))
                                      (in_range2 capacity temp___expr_2544)))

(define-fun default_initial_assumption ((temp___expr_2546 us_rep)
  (temp___skip_top_level_2547 Bool)) Bool (and
                                          (= (to_rep
                                             (rec__dic_of_cont__my_dlli__list__capacity
                                             (us_split_discrs1
                                             temp___expr_2546))) capacity)
                                          (=>
                                          (not
                                          (= temp___skip_top_level_2547 true))
                                          (= (is_empty temp___expr_2546) true))))

(declare-const r2b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun in_range3 ((rec__dic_of_cont__my_hama__map__capacity1 Int)
  (rec__dic_of_cont__my_hama__map__modulus1 (_ BitVec 32))
  (a us_rep1)) Bool (and
                    (= rec__dic_of_cont__my_hama__map__capacity1 (to_rep
                                                                 (rec__dic_of_cont__my_hama__map__capacity
                                                                 (us_split_discrs3
                                                                 a))))
                    (= rec__dic_of_cont__my_hama__map__modulus1 (to_rep1
                                                                (rec__dic_of_cont__my_hama__map__modulus
                                                                (us_split_discrs3
                                                                a))))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const dic_of_cont__my_hama__map__capacity__first__bit1 Int)

(declare-const dic_of_cont__my_hama__map__capacity__last__bit1 Int)

(declare-const dic_of_cont__my_hama__map__capacity__position1 Int)

;; dic_of_cont__my_hama__map__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__capacity__first__bit1))

;; dic_of_cont__my_hama__map__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_hama__map__capacity__first__bit1 dic_of_cont__my_hama__map__capacity__last__bit1))

;; dic_of_cont__my_hama__map__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__capacity__position1))

(declare-const dic_of_cont__my_hama__map__modulus__first__bit1 Int)

(declare-const dic_of_cont__my_hama__map__modulus__last__bit1 Int)

(declare-const dic_of_cont__my_hama__map__modulus__position1 Int)

;; dic_of_cont__my_hama__map__modulus__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__modulus__first__bit1))

;; dic_of_cont__my_hama__map__modulus__last__bit_axiom
  (assert
  (< dic_of_cont__my_hama__map__modulus__first__bit1 dic_of_cont__my_hama__map__modulus__last__bit1))

;; dic_of_cont__my_hama__map__modulus__position_axiom
  (assert (<= 0 dic_of_cont__my_hama__map__modulus__position1))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ((tdhamaS__ref 0))
(((tdhamaS__refqtmk (tdhamaS__content us_rep1)))))
(define-fun tdhamaS__ref_tdhamaS__content__projection ((a tdhamaS__ref)) us_rep1 
  (tdhamaS__content a))

(declare-const dhama__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq10 a b) (oeq1 a b)) :pattern ((user_eq10 a b)) )))

(define-fun dynamic_invariant3 ((temp___expr_2554 us_rep1)
  (temp___is_init_2550 Bool) (temp___skip_constant_2551 Bool)
  (temp___do_toplevel_2552 Bool)
  (temp___do_typ_inv_2553 Bool)) Bool (=>
                                      (not
                                      (= temp___skip_constant_2551 true))
                                      (in_range3 capacity r2b
                                      temp___expr_2554)))

(define-fun default_initial_assumption1 ((temp___expr_2557 us_rep1)
  (temp___skip_top_level_2558 Bool)) Bool (and
                                          (and
                                          (= (to_rep
                                             (rec__dic_of_cont__my_hama__map__capacity
                                             (us_split_discrs3
                                             temp___expr_2557))) capacity)
                                          (= (to_rep1
                                             (rec__dic_of_cont__my_hama__map__modulus
                                             (us_split_discrs3
                                             temp___expr_2557))) r2b))
                                          (=>
                                          (not
                                          (= temp___skip_top_level_2558 true))
                                          (= (is_empty1 temp___expr_2557) true))))

(declare-const r5b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun in_range4 ((rec__dic_of_cont__my_hase__set__capacity1 Int)
  (rec__dic_of_cont__my_hase__set__modulus1 (_ BitVec 32))
  (a us_rep2)) Bool (and
                    (= rec__dic_of_cont__my_hase__set__capacity1 (to_rep
                                                                 (rec__dic_of_cont__my_hase__set__capacity
                                                                 (us_split_discrs5
                                                                 a))))
                    (= rec__dic_of_cont__my_hase__set__modulus1 (to_rep1
                                                                (rec__dic_of_cont__my_hase__set__modulus
                                                                (us_split_discrs5
                                                                a))))))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-const dic_of_cont__my_hase__set__capacity__first__bit1 Int)

(declare-const dic_of_cont__my_hase__set__capacity__last__bit1 Int)

(declare-const dic_of_cont__my_hase__set__capacity__position1 Int)

;; dic_of_cont__my_hase__set__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__capacity__first__bit1))

;; dic_of_cont__my_hase__set__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_hase__set__capacity__first__bit1 dic_of_cont__my_hase__set__capacity__last__bit1))

;; dic_of_cont__my_hase__set__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__capacity__position1))

(declare-const dic_of_cont__my_hase__set__modulus__first__bit1 Int)

(declare-const dic_of_cont__my_hase__set__modulus__last__bit1 Int)

(declare-const dic_of_cont__my_hase__set__modulus__position1 Int)

;; dic_of_cont__my_hase__set__modulus__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__modulus__first__bit1))

;; dic_of_cont__my_hase__set__modulus__last__bit_axiom
  (assert
  (< dic_of_cont__my_hase__set__modulus__first__bit1 dic_of_cont__my_hase__set__modulus__last__bit1))

;; dic_of_cont__my_hase__set__modulus__position_axiom
  (assert (<= 0 dic_of_cont__my_hase__set__modulus__position1))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ((tdhaseS__ref 0))
(((tdhaseS__refqtmk (tdhaseS__content us_rep2)))))
(define-fun tdhaseS__ref_tdhaseS__content__projection ((a tdhaseS__ref)) us_rep2 
  (tdhaseS__content a))

(declare-const dhase__split_discrs us_split_discrs4)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq11 a b) (oeq2 a b)) :pattern ((user_eq11 a b)) )))

(define-fun dynamic_invariant4 ((temp___expr_2566 us_rep2)
  (temp___is_init_2562 Bool) (temp___skip_constant_2563 Bool)
  (temp___do_toplevel_2564 Bool)
  (temp___do_typ_inv_2565 Bool)) Bool (=>
                                      (not
                                      (= temp___skip_constant_2563 true))
                                      (in_range4 capacity r5b
                                      temp___expr_2566)))

(define-fun default_initial_assumption2 ((temp___expr_2569 us_rep2)
  (temp___skip_top_level_2570 Bool)) Bool (and
                                          (and
                                          (= (to_rep
                                             (rec__dic_of_cont__my_hase__set__capacity
                                             (us_split_discrs5
                                             temp___expr_2569))) capacity)
                                          (= (to_rep1
                                             (rec__dic_of_cont__my_hase__set__modulus
                                             (us_split_discrs5
                                             temp___expr_2569))) r5b))
                                          (=>
                                          (not
                                          (= temp___skip_top_level_2570 true))
                                          (= (is_empty2 temp___expr_2569) true))))

(define-fun in_range5 ((rec__dic_of_cont__my_orma__map__capacity1 Int)
  (a us_rep3)) Bool (= rec__dic_of_cont__my_orma__map__capacity1 (to_rep
                                                                 (rec__dic_of_cont__my_orma__map__capacity
                                                                 (us_split_discrs7
                                                                 a)))))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const dic_of_cont__my_orma__map__capacity__first__bit1 Int)

(declare-const dic_of_cont__my_orma__map__capacity__last__bit1 Int)

(declare-const dic_of_cont__my_orma__map__capacity__position1 Int)

;; dic_of_cont__my_orma__map__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_orma__map__capacity__first__bit1))

;; dic_of_cont__my_orma__map__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_orma__map__capacity__first__bit1 dic_of_cont__my_orma__map__capacity__last__bit1))

;; dic_of_cont__my_orma__map__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_orma__map__capacity__position1))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-const dummy12 us_rep3)

(declare-datatypes ((tdormaS__ref 0))
(((tdormaS__refqtmk (tdormaS__content us_rep3)))))
(define-fun tdormaS__ref_tdormaS__content__projection ((a tdormaS__ref)) us_rep3 
  (tdormaS__content a))

(declare-const dorma__split_discrs us_split_discrs6)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq12 a b) (oeq3 a b)) :pattern ((user_eq12 a b)) )))

(define-fun dynamic_invariant5 ((temp___expr_2578 us_rep3)
  (temp___is_init_2574 Bool) (temp___skip_constant_2575 Bool)
  (temp___do_toplevel_2576 Bool)
  (temp___do_typ_inv_2577 Bool)) Bool (=>
                                      (not
                                      (= temp___skip_constant_2575 true))
                                      (in_range5 capacity temp___expr_2578)))

(define-fun default_initial_assumption3 ((temp___expr_2580 us_rep3)
  (temp___skip_top_level_2581 Bool)) Bool (and
                                          (= (to_rep
                                             (rec__dic_of_cont__my_orma__map__capacity
                                             (us_split_discrs7
                                             temp___expr_2580))) capacity)
                                          (=>
                                          (not
                                          (= temp___skip_top_level_2581 true))
                                          (= (is_empty3 temp___expr_2580) true))))

(define-fun in_range6 ((rec__dic_of_cont__my_orse__set__capacity1 Int)
  (a us_rep4)) Bool (= rec__dic_of_cont__my_orse__set__capacity1 (to_rep
                                                                 (rec__dic_of_cont__my_orse__set__capacity
                                                                 (us_split_discrs9
                                                                 a)))))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (<= 0 object__size10))

;; alignment_axiom
  (assert (<= 0 alignment10))

(declare-const dic_of_cont__my_orse__set__capacity__first__bit1 Int)

(declare-const dic_of_cont__my_orse__set__capacity__last__bit1 Int)

(declare-const dic_of_cont__my_orse__set__capacity__position1 Int)

;; dic_of_cont__my_orse__set__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_orse__set__capacity__first__bit1))

;; dic_of_cont__my_orse__set__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_orse__set__capacity__first__bit1 dic_of_cont__my_orse__set__capacity__last__bit1))

;; dic_of_cont__my_orse__set__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_orse__set__capacity__position1))

(declare-fun user_eq13 (us_rep4 us_rep4) Bool)

(declare-const dummy13 us_rep4)

(declare-datatypes ((tdorseS__ref 0))
(((tdorseS__refqtmk (tdorseS__content us_rep4)))))
(define-fun tdorseS__ref_tdorseS__content__projection ((a tdorseS__ref)) us_rep4 
  (tdorseS__content a))

(declare-const dorse__split_discrs us_split_discrs8)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq13 a b) (oeq4 a b)) :pattern ((user_eq13 a b)) )))

(define-fun dynamic_invariant6 ((temp___expr_2588 us_rep4)
  (temp___is_init_2584 Bool) (temp___skip_constant_2585 Bool)
  (temp___do_toplevel_2586 Bool)
  (temp___do_typ_inv_2587 Bool)) Bool (=>
                                      (not
                                      (= temp___skip_constant_2585 true))
                                      (in_range6 capacity temp___expr_2588)))

(define-fun default_initial_assumption4 ((temp___expr_2590 us_rep4)
  (temp___skip_top_level_2591 Bool)) Bool (and
                                          (= (to_rep
                                             (rec__dic_of_cont__my_orse__set__capacity
                                             (us_split_discrs9
                                             temp___expr_2590))) capacity)
                                          (=>
                                          (not
                                          (= temp___skip_top_level_2591 true))
                                          (= (is_empty4 temp___expr_2590) true))))

(define-fun in_range7 ((rec__dic_of_cont__my_fove__vector__capacity1 Int)
  (a us_rep5)) Bool (= rec__dic_of_cont__my_fove__vector__capacity1 (to_rep2
                                                                    (rec__dic_of_cont__my_fove__vector__capacity
                                                                    (us_split_discrs11
                                                                    a)))))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const alignment11 Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (<= 0 object__size11))

;; alignment_axiom
  (assert (<= 0 alignment11))

(declare-const dic_of_cont__my_fove__vector__capacity__first__bit1 Int)

(declare-const dic_of_cont__my_fove__vector__capacity__last__bit1 Int)

(declare-const dic_of_cont__my_fove__vector__capacity__position1 Int)

;; dic_of_cont__my_fove__vector__capacity__first__bit_axiom
  (assert (<= 0 dic_of_cont__my_fove__vector__capacity__first__bit1))

;; dic_of_cont__my_fove__vector__capacity__last__bit_axiom
  (assert
  (< dic_of_cont__my_fove__vector__capacity__first__bit1 dic_of_cont__my_fove__vector__capacity__last__bit1))

;; dic_of_cont__my_fove__vector__capacity__position_axiom
  (assert (<= 0 dic_of_cont__my_fove__vector__capacity__position1))

(declare-fun user_eq14 (us_rep5 us_rep5) Bool)

(declare-const dummy14 us_rep5)

(declare-datatypes ((tdfoveS__ref 0))
(((tdfoveS__refqtmk (tdfoveS__content us_rep5)))))
(define-fun tdfoveS__ref_tdfoveS__content__projection ((a tdfoveS__ref)) us_rep5 
  (tdfoveS__content a))

(declare-const dfove__split_discrs us_split_discrs10)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq14 a b) (oeq5 a b)) :pattern ((user_eq14 a b)) )))

(define-fun dynamic_invariant7 ((temp___expr_2598 us_rep5)
  (temp___is_init_2594 Bool) (temp___skip_constant_2595 Bool)
  (temp___do_toplevel_2596 Bool)
  (temp___do_typ_inv_2597 Bool)) Bool (=>
                                      (not
                                      (= temp___skip_constant_2595 true))
                                      (in_range7 capacity temp___expr_2598)))

(define-fun default_initial_assumption5 ((temp___expr_2600 us_rep5)
  (temp___skip_top_level_2601 Bool)) Bool (and
                                          (= (to_rep2
                                             (rec__dic_of_cont__my_fove__vector__capacity
                                             (us_split_discrs11
                                             temp___expr_2600))) capacity)
                                          (=>
                                          (not
                                          (= temp___skip_top_level_2601 true))
                                          (= (is_empty5 temp___expr_2600) true))))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__dic_of_cont__my_dlli__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant1 result true false true true))) :pattern ((length
                                                                  container)) )))

(declare-sort us_main_type6 0)

(declare-fun us_main_eq6 (us_main_type6 us_main_type6) Bool)

(declare-sort us_rep6 0)

(declare-fun bool_eq6 (us_rep6 us_rep6) Bool)

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const alignment12 Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (<= 0 object__size12))

;; alignment_axiom
  (assert (<= 0 alignment12))

(declare-fun user_eq15 (us_rep6 us_rep6) Bool)

(declare-const dummy15 us_rep6)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep6)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep6 
  (sequence__content a))

(declare-fun length6 (us_rep6) Int)

(declare-fun length__function_guard6 (Int us_rep6) Bool)

(declare-fun model1 (us_rep) us_rep6)

(declare-fun model__function_guard (us_rep6 us_rep) Bool)

(define-fun length7 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range8 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

(define-fun last ((container us_rep6)) Int (+ 0 (length6 container)))

(declare-fun last__function_guard (Int us_rep6) Bool)

(declare-fun get (us_rep6 Int) Int)

(declare-fun get__function_guard (Int us_rep6 Int) Bool)

(define-fun oeq6 ((left us_rep6)
  (right us_rep6)) Bool (and (= (length6 left) (length6 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard6 (Bool us_rep6 us_rep6) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep6) (b us_rep6))
  (! (= (user_eq15 a b) (oeq6 a b)) :pattern ((user_eq15 a b)) )))

(define-fun default_initial_assumption6 ((temp___expr_722 us_rep6)
  (temp___skip_top_level_723 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_723 true))
                                         (= (length6 temp___expr_722) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length6 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq6 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq16 (extended_index extended_index) Bool)

(declare-const dummy16 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant8 ((temp___expr_714 Int)
  (temp___is_init_710 Bool) (temp___skip_constant_711 Bool)
  (temp___do_toplevel_712 Bool)
  (temp___do_typ_inv_713 Bool)) Bool (=>
                                     (or (= temp___is_init_710 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_714)))

;; length__post_axiom
  (assert
  (forall ((container us_rep6))
  (! (let ((result (length6 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true true))) :pattern ((length6 container)) )))

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq17 (element_type element_type) Bool)

(declare-const dummy17 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant9 ((temp___expr_707 Int)
  (temp___is_init_703 Bool) (temp___skip_constant_704 Bool)
  (temp___do_toplevel_705 Bool)
  (temp___do_typ_inv_706 Bool)) Bool (=>
                                     (or (= temp___is_init_703 true)
                                     (<= 0 2147483647)) (in_range10
                                     temp___expr_707)))

;; get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant8 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant9 (get container position) true false true true)) :pattern (
  (get container position)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep
                (rec__dic_of_cont__my_hama__map__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant1 result true false true true))) :pattern ((length1
                                                                  container)) )))

(declare-sort us_main_type7 0)

(declare-fun us_main_eq7 (us_main_type7 us_main_type7) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq7 (us_rep7 us_rep7) Bool)

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const alignment13 Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (<= 0 object__size13))

;; alignment_axiom
  (assert (<= 0 alignment13))

(declare-fun user_eq18 (us_rep7 us_rep7) Bool)

(declare-const dummy18 us_rep7)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 us_rep7)))))
(define-fun map__ref_map__content__3__projection ((a map__ref2)) us_rep7 
  (map__content2 a))

(declare-fun model2 (us_rep1) us_rep7)

(declare-fun model__function_guard1 (us_rep7 us_rep1) Bool)

(declare-fun length8 (us_rep7) Int)

(declare-fun length__function_guard7 (Int us_rep7) Bool)

(declare-fun oeq7 (us_rep7 us_rep7) Bool)

(declare-fun oeq__function_guard7 (Bool us_rep7 us_rep7) Bool)

(declare-fun is_empty6 (us_rep7) Bool)

(declare-fun is_empty__function_guard6 (Bool us_rep7) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep7) (b us_rep7))
  (! (= (user_eq18 a b) (oeq7 a b)) :pattern ((user_eq18 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_1066 us_rep7)
  (temp___skip_top_level_1067 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_1067 true))
                                          (and
                                          (= (is_empty6 temp___expr_1066) true)
                                          (= (length8 temp___expr_1066) 0))))

;; model__post_axiom
  (assert true)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq1 left right) true)
     (= (oeq7 (model2 left) (model2 right)) true)) :pattern ((oeq1 left
                                                             right)) )))

(declare-fun has_key (us_rep7 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep7 Int) Bool)

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= 0 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq19 (key_type key_type) Bool)

(declare-const dummy19 key_type)

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content key_type)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref)) key_type 
  (key_type__content a))

(define-fun dynamic_invariant10 ((temp___expr_1051 Int)
  (temp___is_init_1047 Bool) (temp___skip_constant_1048 Bool)
  (temp___do_toplevel_1049 Bool)
  (temp___do_typ_inv_1050 Bool)) Bool (=>
                                      (or (= temp___is_init_1047 true)
                                      (<= 0 2147483647)) (in_range11
                                      temp___expr_1051)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key Int))
  (! (=> (dynamic_invariant10 key true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k Int))
     (and (and (in_range11 k) (= (has_key container k) true)) (= k key)))
     (= (has_key container key) true)))) :pattern ((has_key container key)) ))))

(declare-fun witness (us_rep7 Int) Int)

(declare-fun witness__function_guard (Int us_rep7 Int) Bool)

(declare-fun w_get (us_rep7 Int) Int)

(declare-fun w_get__function_guard (Int us_rep7 Int) Bool)

(declare-fun get1 (us_rep7 Int) Int)

(declare-fun get__function_guard1 (Int us_rep7 Int) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 0 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq20 (element_type1 element_type1) Bool)

(declare-const dummy20 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant11 ((temp___expr_1058 Int)
  (temp___is_init_1054 Bool) (temp___skip_constant_1055 Bool)
  (temp___do_toplevel_1056 Bool)
  (temp___do_typ_inv_1057 Bool)) Bool (=>
                                      (or (= temp___is_init_1054 true)
                                      (<= 0 2147483647)) (in_range12
                                      temp___expr_1058)))

;; get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant10 key true true true true)
     (= (has_key container key) true))
     (let ((result (get1 container key)))
     (and
     (=> (= (distinct 1 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k Int))
     (=> (and (in_range11 k) (= (has_key container k) true))
     (= (= k key) (= (witness container key) (witness container k)))))))
     (dynamic_invariant11 result true false true true)))) :pattern ((get1
                                                                    container
                                                                    key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep7)) (! (dynamic_invariant1 (length8 container)
  true false true true) :pattern ((length8 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep7) (right us_rep7))
  (! (= (= (oeq7 left right) true)
     (and
     (forall ((key Int))
     (=> (and (in_range11 key) (= (has_key left key) true))
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key Int))
     (=> (and (in_range11 key) (= (has_key right key) true))
     (= (has_key left key) true))))) :pattern ((oeq7 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (= (= (is_empty6 container) true)
     (forall ((key Int))
     (not (and (in_range11 key) (= (has_key container key) true))))) :pattern (
  (is_empty6 container)) )))

(declare-fun has_witness (us_rep7 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep7 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant10 key true true true true)
     (= (has_key container key) true))
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant1 result
     true false true true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant1 witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant11
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length2 container)))
     (and
     (<= result (to_rep
                (rec__dic_of_cont__my_hase__set__capacity
                (us_split_discrs5 container))))
     (dynamic_invariant1 result true false true true))) :pattern ((length2
                                                                  container)) )))

(declare-sort us_main_type8 0)

(declare-fun us_main_eq8 (us_main_type8 us_main_type8) Bool)

(declare-sort us_rep8 0)

(declare-fun bool_eq8 (us_rep8 us_rep8) Bool)

(declare-const value__size14 Int)

(declare-const object__size14 Int)

(declare-const alignment14 Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (<= 0 object__size14))

;; alignment_axiom
  (assert (<= 0 alignment14))

(declare-fun user_eq21 (us_rep8 us_rep8) Bool)

(declare-const dummy21 us_rep8)

(declare-datatypes ((sequence__ref1 0))
(((sequence__refqtmk1 (sequence__content1 us_rep8)))))
(define-fun sequence__ref_sequence__content__3__projection ((a sequence__ref1)) us_rep8 
  (sequence__content1 a))

(declare-fun length9 (us_rep8) Int)

(declare-fun length__function_guard8 (Int us_rep8) Bool)

(declare-fun get2 (us_rep8 Int) Int)

(declare-fun get__function_guard2 (Int us_rep8 Int) Bool)

(declare-fun find (us_rep8 Int) Int)

(declare-fun find__function_guard (Int us_rep8 Int) Bool)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= 0 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq22 (element_type2 element_type2) Bool)

(declare-const dummy22 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_element_type__content__8__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(define-fun dynamic_invariant12 ((temp___expr_1336 Int)
  (temp___is_init_1332 Bool) (temp___skip_constant_1333 Bool)
  (temp___do_toplevel_1334 Bool)
  (temp___do_typ_inv_1335 Bool)) Bool (=>
                                      (or (= temp___is_init_1332 true)
                                      (<= 0 2147483647)) (in_range13
                                      temp___expr_1336)))

(define-fun last1 ((container us_rep8)) Int (+ 0 (length9 container)))

(declare-fun last__function_guard1 (Int us_rep8) Bool)

(define-fun oeq8 ((left us_rep8)
  (right us_rep8)) Bool (and (= (length9 left) (length9 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last1 left)))
                                                                (= (get2 left
                                                                   n) 
                                                                (get2 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard8 (Bool us_rep8 us_rep8) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep8) (b us_rep8))
  (! (= (user_eq21 a b) (oeq8 a b)) :pattern ((user_eq21 a b)) )))

(define-fun default_initial_assumption8 ((temp___expr_1413 us_rep8)
  (temp___skip_top_level_1414 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_1414 true))
                                          (= (length9 temp___expr_1413) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((item Int))
  (! (=> (dynamic_invariant12 item true true true true)
     (let ((result (find container item)))
     (and
     (=> (< 0 result)
     (and (<= result (length9 container)) (= item (get2 container result))))
     (dynamic_invariant1 result true false true true)))) :pattern ((find
                                                                   container
                                                                   item)) ))))

(define-fun e_elements_included ((left us_rep8)
  (right us_rep8)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length9 left)))
                             (and (< 0 (find right (get2 left i)))
                             (= (get2 right (find right (get2 left i))) 
                             (get2 left i)))))
                        true false))

(declare-fun e_elements_included__function_guard (Bool us_rep8 us_rep8) Bool)

(declare-sort us_main_type9 0)

(declare-fun us_main_eq9 (us_main_type9 us_main_type9) Bool)

(declare-sort us_rep9 0)

(declare-fun bool_eq9 (us_rep9 us_rep9) Bool)

(declare-const value__size15 Int)

(declare-const object__size15 Int)

(declare-const alignment15 Int)

;; value__size_axiom
  (assert (<= 0 value__size15))

;; object__size_axiom
  (assert (<= 0 object__size15))

;; alignment_axiom
  (assert (<= 0 alignment15))

(declare-fun user_eq23 (us_rep9 us_rep9) Bool)

(declare-const dummy23 us_rep9)

(declare-datatypes ((set__ref2 0))
(((set__refqtmk2 (set__content2 us_rep9)))))
(define-fun set__ref_set__content__2__projection ((a set__ref2)) us_rep9 
  (set__content2 a))

(declare-fun length10 (us_rep9) Int)

(declare-fun length__function_guard9 (Int us_rep9) Bool)

(declare-fun model3 (us_rep2) us_rep9)

(declare-fun model__function_guard2 (us_rep9 us_rep2) Bool)

(declare-fun oeq9 (us_rep9 us_rep9) Bool)

(declare-fun oeq__function_guard9 (Bool us_rep9 us_rep9) Bool)

(declare-fun is_empty7 (us_rep9) Bool)

(declare-fun is_empty__function_guard7 (Bool us_rep9) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep9) (b us_rep9))
  (! (= (user_eq23 a b) (oeq9 a b)) :pattern ((user_eq23 a b)) )))

(define-fun default_initial_assumption9 ((temp___expr_1377 us_rep9)
  (temp___skip_top_level_1378 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_1378 true))
                                          (= (is_empty7 temp___expr_1377) true)))

;; model__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (length10 (model3 container)) (length2 container)) :pattern (
  (model3 container)) )))

(declare-fun contains (us_rep9 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep9 Int) Bool)

(define-fun iter_has_element ((container us_rep8)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last1
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard (Bool us_rep8 Int) Bool)

(declare-fun elements (us_rep2) us_rep8)

(declare-fun elements__function_guard (us_rep8 us_rep2) Bool)

(declare-sort element_type3 0)

(declare-fun element_typeqtint3 (element_type3) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type3))
  (and (<= 0 (element_typeqtint3 i)) (<= (element_typeqtint3 i) 2147483647))))

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq24 (element_type3 element_type3) Bool)

(declare-const dummy24 element_type3)

(declare-datatypes ((element_type__ref3 0))
(((element_type__refqtmk3 (element_type__content3 element_type3)))))
(define-fun element_type__ref_element_type__content__9__projection ((a element_type__ref3)) element_type3 
  (element_type__content3 a))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i))
  (<= (extended_indexqtint1 i) 2147483647))))

(define-fun in_range15 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq25 (extended_index1 extended_index1) Bool)

(declare-const dummy25 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__3__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

;; elements__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (elements container)))
     (and
     (and
     (and
     (and (= (length9 result) (length2 container))
     (forall ((temp___1490 Int))
     (=>
     (and (in_range15 temp___1490)
     (= (iter_has_element result temp___1490) true))
     (= (contains (model3 container) (get2 result temp___1490)) true))))
     (forall ((item Int))
     (=> (and (in_range14 item) (= (contains (model3 container) item) true))
     (and (< 0 (find result item)) (= (get2 result (find result item)) item)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length2 container)))
     (= (find result (get2 result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length2 container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length2 container)))
     (=> (= (get2 result i) (get2 result j)) (= i j)))))))) :pattern (
  (elements container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (let ((result (oeq2 left right)))
     (and
     (= (= result true)
     (and (= (length2 left) (length2 right))
     (= (e_elements_included (elements left) (elements right)) true)))
     (= (= result true)
     (and (= (e_elements_included (elements left) (elements right)) true)
     (= (e_elements_included (elements right) (elements left)) true))))) :pattern (
  (oeq2 left right)) )))

(define-fun dynamic_invariant13 ((temp___expr_1369 Int)
  (temp___is_init_1365 Bool) (temp___skip_constant_1366 Bool)
  (temp___do_toplevel_1367 Bool)
  (temp___do_typ_inv_1368 Bool)) Bool (=>
                                      (or (= temp___is_init_1365 true)
                                      (<= 0 2147483647)) (in_range14
                                      temp___expr_1369)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep9))
  (forall ((item Int))
  (! (=> (dynamic_invariant13 item true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((e Int))
     (and (and (in_range14 e) (= (contains container e) true)) (= e item)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep9)) (! (dynamic_invariant1 (length10 container)
  true false true true) :pattern ((length10 container)) )))

(declare-fun ole (us_rep9 us_rep9) Bool)

(declare-fun ole__function_guard (Bool us_rep9 us_rep9) Bool)

;; ole__post_axiom
  (assert
  (forall ((left us_rep9) (right us_rep9))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range14 item) (= (contains left item) true))
     (= (contains right item) true)))) :pattern ((ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep9) (right us_rep9))
  (! (= (= (oeq9 left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq9 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep9))
  (! (let ((result (is_empty7 container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range14 item) (= (contains container item) true)))))
     (= (= result true) (= (length10 container) 0)))) :pattern ((is_empty7
                                                                container)) )))

(define-fun dynamic_invariant14 ((temp___expr_1405 Int)
  (temp___is_init_1401 Bool) (temp___skip_constant_1402 Bool)
  (temp___do_toplevel_1403 Bool)
  (temp___do_typ_inv_1404 Bool)) Bool (=>
                                      (or (= temp___is_init_1401 true)
                                      (<= 0 2147483647)) (in_range15
                                      temp___expr_1405)))

;; length__post_axiom
  (assert
  (forall ((container us_rep8))
  (! (let ((result (length9 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true true))) :pattern ((length9 container)) )))

(declare-sort element_type4 0)

(declare-fun element_typeqtint4 (element_type4) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type4))
  (and (<= 0 (element_typeqtint4 i)) (<= (element_typeqtint4 i) 2147483647))))

(define-fun in_range16 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq26 (element_type4 element_type4) Bool)

(declare-const dummy26 element_type4)

(declare-datatypes ((element_type__ref4 0))
(((element_type__refqtmk4 (element_type__content4 element_type4)))))
(define-fun element_type__ref_element_type__content__10__projection ((a element_type__ref4)) element_type4 
  (element_type__content4 a))

(define-fun dynamic_invariant15 ((temp___expr_1398 Int)
  (temp___is_init_1394 Bool) (temp___skip_constant_1395 Bool)
  (temp___do_toplevel_1396 Bool)
  (temp___do_typ_inv_1397 Bool)) Bool (=>
                                      (or (= temp___is_init_1394 true)
                                      (<= 0 2147483647)) (in_range16
                                      temp___expr_1398)))

;; get__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant14 position true true true true)
     (and (<= 1 position) (<= position (last1 container))))
     (dynamic_invariant15 (get2 container position) true false true true)) :pattern (
  (get2 container position)) ))))

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and
     (<= result (to_rep
                (rec__dic_of_cont__my_orma__map__capacity
                (us_split_discrs7 container))))
     (dynamic_invariant1 result true false true true))) :pattern ((length3
                                                                  container)) )))

(declare-sort us_main_type10 0)

(declare-fun us_main_eq10 (us_main_type10 us_main_type10) Bool)

(declare-sort us_rep10 0)

(declare-fun bool_eq10 (us_rep10 us_rep10) Bool)

(declare-const value__size16 Int)

(declare-const object__size16 Int)

(declare-const alignment16 Int)

;; value__size_axiom
  (assert (<= 0 value__size16))

;; object__size_axiom
  (assert (<= 0 object__size16))

;; alignment_axiom
  (assert (<= 0 alignment16))

(declare-fun user_eq27 (us_rep10 us_rep10) Bool)

(declare-const dummy27 us_rep10)

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 us_rep10)))))
(define-fun map__ref_map__content__7__projection ((a map__ref3)) us_rep10 
  (map__content3 a))

(declare-fun model4 (us_rep3) us_rep10)

(declare-fun model__function_guard3 (us_rep10 us_rep3) Bool)

(declare-fun length11 (us_rep10) Int)

(declare-fun length__function_guard10 (Int us_rep10) Bool)

(declare-fun oeq10 (us_rep10 us_rep10) Bool)

(declare-fun oeq__function_guard10 (Bool us_rep10 us_rep10) Bool)

(declare-fun is_empty8 (us_rep10) Bool)

(declare-fun is_empty__function_guard8 (Bool us_rep10) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep10) (b us_rep10))
  (! (= (user_eq27 a b) (oeq10 a b)) :pattern ((user_eq27 a b)) )))

(define-fun default_initial_assumption10 ((temp___expr_1795 us_rep10)
  (temp___skip_top_level_1796 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_1796 true))
                                          (and
                                          (= (is_empty8 temp___expr_1795) true)
                                          (= (length11 temp___expr_1795) 0))))

;; model__post_axiom
  (assert true)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq3 left right) true)
     (= (oeq10 (model4 left) (model4 right)) true)) :pattern ((oeq3 left
                                                              right)) )))

(declare-fun has_key1 (us_rep10 Int) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep10 Int) Bool)

(declare-sort key_type1 0)

(declare-fun key_typeqtint1 (key_type1) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type1))
  (and (<= 0 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 2147483647))))

(define-fun in_range17 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq28 (key_type1 key_type1) Bool)

(declare-const dummy28 key_type1)

(declare-datatypes ((key_type__ref1 0))
(((key_type__refqtmk1 (key_type__content1 key_type1)))))
(define-fun key_type__ref_key_type__content__7__projection ((a key_type__ref1)) key_type1 
  (key_type__content1 a))

(define-fun dynamic_invariant16 ((temp___expr_1780 Int)
  (temp___is_init_1776 Bool) (temp___skip_constant_1777 Bool)
  (temp___do_toplevel_1778 Bool)
  (temp___do_typ_inv_1779 Bool)) Bool (=>
                                      (or (= temp___is_init_1776 true)
                                      (<= 0 2147483647)) (in_range17
                                      temp___expr_1780)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep10))
  (forall ((key Int))
  (! (=> (dynamic_invariant16 key true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k Int))
     (and (and (in_range17 k) (= (has_key1 container k) true))
     (= (equivalent_keys k key) true))) (= (has_key1 container key) true)))) :pattern (
  (has_key1 container key)) ))))

(declare-fun witness1 (us_rep10 Int) Int)

(declare-fun witness__function_guard1 (Int us_rep10 Int) Bool)

(declare-fun w_get1 (us_rep10 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep10 Int) Bool)

(declare-fun get3 (us_rep10 Int) Int)

(declare-fun get__function_guard3 (Int us_rep10 Int) Bool)

(declare-sort element_type5 0)

(declare-fun element_typeqtint5 (element_type5) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type5))
  (and (<= 0 (element_typeqtint5 i)) (<= (element_typeqtint5 i) 2147483647))))

(define-fun in_range18 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq29 (element_type5 element_type5) Bool)

(declare-const dummy29 element_type5)

(declare-datatypes ((element_type__ref5 0))
(((element_type__refqtmk5 (element_type__content5 element_type5)))))
(define-fun element_type__ref_element_type__content__13__projection ((a element_type__ref5)) element_type5 
  (element_type__content5 a))

(define-fun dynamic_invariant17 ((temp___expr_1787 Int)
  (temp___is_init_1783 Bool) (temp___skip_constant_1784 Bool)
  (temp___do_toplevel_1785 Bool)
  (temp___do_typ_inv_1786 Bool)) Bool (=>
                                      (or (= temp___is_init_1783 true)
                                      (<= 0 2147483647)) (in_range18
                                      temp___expr_1787)))

;; get__post_axiom
  (assert
  (forall ((container us_rep10))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant16 key true true true true)
     (= (has_key1 container key) true))
     (let ((result (get3 container key)))
     (and
     (=> (= (distinct 1 0) true)
     (and (= result (w_get1 container (witness1 container key)))
     (forall ((k Int))
     (=> (and (in_range17 k) (= (has_key1 container k) true))
     (= (= (equivalent_keys k key) true)
     (= (witness1 container key) (witness1 container k)))))))
     (dynamic_invariant17 result true false true true)))) :pattern ((get3
                                                                    container
                                                                    key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep10)) (! (dynamic_invariant1 (length11 container)
  true false true true) :pattern ((length11 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep10) (right us_rep10))
  (! (= (= (oeq10 left right) true)
     (and
     (forall ((key Int))
     (=> (and (in_range17 key) (= (has_key1 left key) true))
     (and (= (has_key1 right key) true) (= (get3 right key) (get3 left key)))))
     (forall ((key Int))
     (=> (and (in_range17 key) (= (has_key1 right key) true))
     (= (has_key1 left key) true))))) :pattern ((oeq10 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep10))
  (! (= (= (is_empty8 container) true)
     (forall ((key Int))
     (not (and (in_range17 key) (= (has_key1 container key) true))))) :pattern (
  (is_empty8 container)) )))

(declare-fun has_witness1 (us_rep10 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep10 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep10))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant16 key true true true true)
     (= (has_key1 container key) true))
     (let ((result (witness1 container key)))
     (and (= (has_witness1 container result) true) (dynamic_invariant1 result
     true false true true)))) :pattern ((witness1 container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep10))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant1 witness2 true true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant17
     (w_get1 container witness2) true false true true)) :pattern ((w_get1
                                                                  container
                                                                  witness2)) ))))

(define-fun equivalent_elements ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length4 container)))
     (and
     (<= result (to_rep
                (rec__dic_of_cont__my_orse__set__capacity
                (us_split_discrs9 container))))
     (dynamic_invariant1 result true false true true))) :pattern ((length4
                                                                  container)) )))

(declare-sort us_main_type11 0)

(declare-fun us_main_eq11 (us_main_type11 us_main_type11) Bool)

(declare-sort us_rep11 0)

(declare-fun bool_eq11 (us_rep11 us_rep11) Bool)

(declare-const value__size17 Int)

(declare-const object__size17 Int)

(declare-const alignment17 Int)

;; value__size_axiom
  (assert (<= 0 value__size17))

;; object__size_axiom
  (assert (<= 0 object__size17))

;; alignment_axiom
  (assert (<= 0 alignment17))

(declare-fun user_eq30 (us_rep11 us_rep11) Bool)

(declare-const dummy30 us_rep11)

(declare-datatypes ((sequence__ref2 0))
(((sequence__refqtmk2 (sequence__content2 us_rep11)))))
(define-fun sequence__ref_sequence__content__5__projection ((a sequence__ref2)) us_rep11 
  (sequence__content2 a))

(declare-fun length12 (us_rep11) Int)

(declare-fun length__function_guard11 (Int us_rep11) Bool)

(declare-fun get4 (us_rep11 Int) Int)

(declare-fun get__function_guard4 (Int us_rep11 Int) Bool)

(define-fun e_bigger_than_range ((container us_rep11) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< (get4 container i) item)))
                   true false))

(declare-fun e_bigger_than_range__function_guard (Bool us_rep11 Int Int
  Int) Bool)

(define-fun e_smaller_than_range ((container us_rep11) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< item (get4 container i))))
                   true false))

(declare-fun e_smaller_than_range__function_guard (Bool us_rep11 Int Int
  Int) Bool)

(define-fun e_is_find ((container us_rep11) (item Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range container 1 (- position 1)
                            item) (distinct 1 0)) (ite (< position (length12
                                                                   container))
                                                  (e_smaller_than_range
                                                  container (+ position 1)
                                                  (length12 container) item)
                                                  (distinct 1 0))))

(declare-fun e_is_find__function_guard (Bool us_rep11 Int Int) Bool)

(declare-fun find1 (us_rep11 Int) Int)

(declare-fun find__function_guard1 (Int us_rep11 Int) Bool)

(declare-sort element_type6 0)

(declare-fun element_typeqtint6 (element_type6) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type6))
  (and (<= 0 (element_typeqtint6 i)) (<= (element_typeqtint6 i) 2147483647))))

(define-fun in_range19 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq31 (element_type6 element_type6) Bool)

(declare-const dummy31 element_type6)

(declare-datatypes ((element_type__ref6 0))
(((element_type__refqtmk6 (element_type__content6 element_type6)))))
(define-fun element_type__ref_element_type__content__16__projection ((a element_type__ref6)) element_type6 
  (element_type__content6 a))

(define-fun dynamic_invariant18 ((temp___expr_2049 Int)
  (temp___is_init_2045 Bool) (temp___skip_constant_2046 Bool)
  (temp___do_toplevel_2047 Bool)
  (temp___do_typ_inv_2048 Bool)) Bool (=>
                                      (or (= temp___is_init_2045 true)
                                      (<= 0 2147483647)) (in_range19
                                      temp___expr_2049)))

(define-fun last2 ((container us_rep11)) Int (+ 0 (length12 container)))

(declare-fun last__function_guard2 (Int us_rep11) Bool)

(define-fun oeq11 ((left us_rep11)
  (right us_rep11)) Bool (and (= (length12 left) (length12 right)) (ite 
                                                                   (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last2
                                                                   left)))
                                                                   (= 
                                                                   (get4 left
                                                                   n) 
                                                                   (get4
                                                                   right n))))
                                                                   true
                                                                   false)))

(declare-fun oeq__function_guard11 (Bool us_rep11 us_rep11) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep11) (b us_rep11))
  (! (= (user_eq30 a b) (oeq11 a b)) :pattern ((user_eq30 a b)) )))

(define-fun default_initial_assumption11 ((temp___expr_2123 us_rep11)
  (temp___skip_top_level_2124 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_2124 true))
                                          (= (length12 temp___expr_2123) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep11))
  (forall ((item Int))
  (! (=> (dynamic_invariant18 item true true true true)
     (let ((result (find1 container item)))
     (and
     (=> (< 0 result)
     (and (<= result (length12 container))
     (= (equivalent_elements item (get4 container result)) true)))
     (dynamic_invariant1 result true false true true)))) :pattern ((find1
                                                                   container
                                                                   item)) ))))

(define-fun e_elements_included1 ((left us_rep11)
  (right us_rep11)) Bool (ite (forall ((i Int))
                              (=> (and (<= 1 i) (<= i (length12 left)))
                              (and (< 0 (find1 right (get4 left i)))
                              (= (get4 right (find1 right (get4 left i))) 
                              (get4 left i)))))
                         true false))

(declare-fun e_elements_included__function_guard1 (Bool us_rep11
  us_rep11) Bool)

(declare-sort us_main_type12 0)

(declare-fun us_main_eq12 (us_main_type12 us_main_type12) Bool)

(declare-sort us_rep12 0)

(declare-fun bool_eq12 (us_rep12 us_rep12) Bool)

(declare-const value__size18 Int)

(declare-const object__size18 Int)

(declare-const alignment18 Int)

;; value__size_axiom
  (assert (<= 0 value__size18))

;; object__size_axiom
  (assert (<= 0 object__size18))

;; alignment_axiom
  (assert (<= 0 alignment18))

(declare-fun user_eq32 (us_rep12 us_rep12) Bool)

(declare-const dummy32 us_rep12)

(declare-datatypes ((set__ref3 0))
(((set__refqtmk3 (set__content3 us_rep12)))))
(define-fun set__ref_set__content__4__projection ((a set__ref3)) us_rep12 
  (set__content3 a))

(declare-fun length13 (us_rep12) Int)

(declare-fun length__function_guard12 (Int us_rep12) Bool)

(declare-fun model5 (us_rep4) us_rep12)

(declare-fun model__function_guard4 (us_rep12 us_rep4) Bool)

(declare-fun oeq12 (us_rep12 us_rep12) Bool)

(declare-fun oeq__function_guard12 (Bool us_rep12 us_rep12) Bool)

(declare-fun is_empty9 (us_rep12) Bool)

(declare-fun is_empty__function_guard9 (Bool us_rep12) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep12) (b us_rep12))
  (! (= (user_eq32 a b) (oeq12 a b)) :pattern ((user_eq32 a b)) )))

(define-fun default_initial_assumption12 ((temp___expr_2087 us_rep12)
  (temp___skip_top_level_2088 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_2088 true))
                                          (= (is_empty9 temp___expr_2087) true)))

;; model__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (length13 (model5 container)) (length4 container)) :pattern (
  (model5 container)) )))

(declare-fun contains1 (us_rep12 Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep12 Int) Bool)

(define-fun iter_has_element1 ((container us_rep11)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last2
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard1 (Bool us_rep11 Int) Bool)

(declare-fun elements1 (us_rep4) us_rep11)

(declare-fun elements__function_guard1 (us_rep11 us_rep4) Bool)

(declare-sort element_type7 0)

(declare-fun element_typeqtint7 (element_type7) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type7))
  (and (<= 0 (element_typeqtint7 i)) (<= (element_typeqtint7 i) 2147483647))))

(define-fun in_range20 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq33 (element_type7 element_type7) Bool)

(declare-const dummy33 element_type7)

(declare-datatypes ((element_type__ref7 0))
(((element_type__refqtmk7 (element_type__content7 element_type7)))))
(define-fun element_type__ref_element_type__content__17__projection ((a element_type__ref7)) element_type7 
  (element_type__content7 a))

(declare-sort extended_index2 0)

(declare-fun extended_indexqtint2 (extended_index2) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index2))
  (and (<= 0 (extended_indexqtint2 i))
  (<= (extended_indexqtint2 i) 2147483647))))

(define-fun in_range21 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq34 (extended_index2 extended_index2) Bool)

(declare-const dummy34 extended_index2)

(declare-datatypes ((extended_index__ref2 0))
(((extended_index__refqtmk2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref_extended_index__content__5__projection ((a extended_index__ref2)) extended_index2 
  (extended_index__content2 a))

;; elements__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (elements1 container)))
     (and
     (and
     (and (= (length12 result) (length4 container))
     (forall ((temp___2197 Int))
     (=>
     (and (in_range21 temp___2197)
     (= (iter_has_element1 result temp___2197) true))
     (= (contains1 (model5 container) (get4 result temp___2197)) true))))
     (forall ((item Int))
     (=> (and (in_range20 item) (= (contains1 (model5 container) item) true))
     (and (< 0 (find1 result item))
     (= (equivalent_elements (get4 result (find1 result item)) item) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length4 container)))
     (and (= (find1 result (get4 result i)) i)
     (= (e_is_find result (get4 result i) i) true)))))) :pattern ((elements1
                                                                  container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (ite (= (oeq4 left right) true)
     (= (oeq11 (elements1 left) (elements1 right)) true)
     (or
     (not (= (e_elements_included1 (elements1 left) (elements1 right)) true))
     (not (= (e_elements_included1 (elements1 right) (elements1 left)) true)))) :pattern (
  (oeq4 left right)) )))

(define-fun dynamic_invariant19 ((temp___expr_2079 Int)
  (temp___is_init_2075 Bool) (temp___skip_constant_2076 Bool)
  (temp___do_toplevel_2077 Bool)
  (temp___do_typ_inv_2078 Bool)) Bool (=>
                                      (or (= temp___is_init_2075 true)
                                      (<= 0 2147483647)) (in_range20
                                      temp___expr_2079)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep12))
  (forall ((item Int))
  (! (=> (dynamic_invariant19 item true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((e Int))
     (and (and (in_range20 e) (= (contains1 container e) true))
     (= (equivalent_elements e item) true)))
     (= (contains1 container item) true)))) :pattern ((contains1 container
                                                      item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep12)) (! (dynamic_invariant1 (length13 container)
  true false true true) :pattern ((length13 container)) )))

(declare-fun ole1 (us_rep12 us_rep12) Bool)

(declare-fun ole__function_guard1 (Bool us_rep12 us_rep12) Bool)

;; ole__post_axiom
  (assert
  (forall ((left us_rep12) (right us_rep12))
  (! (= (= (ole1 left right) true)
     (forall ((item Int))
     (=> (and (in_range20 item) (= (contains1 left item) true))
     (= (contains1 right item) true)))) :pattern ((ole1 left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep12) (right us_rep12))
  (! (= (= (oeq12 left right) true)
     (and (= (ole1 left right) true) (= (ole1 right left) true))) :pattern (
  (oeq12 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep12))
  (! (let ((result (is_empty9 container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range20 item) (= (contains1 container item) true)))))
     (= (= result true) (= (length13 container) 0)))) :pattern ((is_empty9
                                                                container)) )))

(define-fun dynamic_invariant20 ((temp___expr_2115 Int)
  (temp___is_init_2111 Bool) (temp___skip_constant_2112 Bool)
  (temp___do_toplevel_2113 Bool)
  (temp___do_typ_inv_2114 Bool)) Bool (=>
                                      (or (= temp___is_init_2111 true)
                                      (<= 0 2147483647)) (in_range21
                                      temp___expr_2115)))

;; length__post_axiom
  (assert
  (forall ((container us_rep11))
  (! (let ((result (length12 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true true))) :pattern ((length12 container)) )))

(declare-sort element_type8 0)

(declare-fun element_typeqtint8 (element_type8) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type8))
  (and (<= 0 (element_typeqtint8 i)) (<= (element_typeqtint8 i) 2147483647))))

(define-fun in_range22 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)

(declare-fun user_eq35 (element_type8 element_type8) Bool)

(declare-const dummy35 element_type8)

(declare-datatypes ((element_type__ref8 0))
(((element_type__refqtmk8 (element_type__content8 element_type8)))))
(define-fun element_type__ref_element_type__content__18__projection ((a element_type__ref8)) element_type8 
  (element_type__content8 a))

(define-fun dynamic_invariant21 ((temp___expr_2108 Int)
  (temp___is_init_2104 Bool) (temp___skip_constant_2105 Bool)
  (temp___do_toplevel_2106 Bool)
  (temp___do_typ_inv_2107 Bool)) Bool (=>
                                      (or (= temp___is_init_2104 true)
                                      (<= 0 2147483647)) (in_range22
                                      temp___expr_2108)))

;; get__post_axiom
  (assert
  (forall ((container us_rep11))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant20 position true true true true)
     (and (<= 1 position) (<= position (last2 container))))
     (dynamic_invariant21 (get4 container position) true false true true)) :pattern (
  (get4 container position)) ))))

(define-fun dynamic_invariant22 ((temp___expr_2408 Int)
  (temp___is_init_2404 Bool) (temp___skip_constant_2405 Bool)
  (temp___do_toplevel_2406 Bool)
  (temp___do_typ_inv_2407 Bool)) Bool (=>
                                      (or (= temp___is_init_2404 true)
                                      (<= 0 2147483647)) (in_range1
                                      temp___expr_2408)))

(define-fun capacity1 ((container us_rep5)) Int (to_rep2
                                                (rec__dic_of_cont__my_fove__vector__capacity
                                                (us_split_discrs11 container))))

(declare-fun capacity__function_guard (Int us_rep5) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (length5 container)))
     (and (<= result (capacity1 container)) (dynamic_invariant22 result true
     false true true))) :pattern ((length5 container)) )))

(declare-sort us_main_type13 0)

(declare-fun us_main_eq13 (us_main_type13 us_main_type13) Bool)

(declare-sort us_rep13 0)

(declare-fun bool_eq13 (us_rep13 us_rep13) Bool)

(declare-const value__size19 Int)

(declare-const object__size19 Int)

(declare-const alignment19 Int)

;; value__size_axiom
  (assert (<= 0 value__size19))

;; object__size_axiom
  (assert (<= 0 object__size19))

;; alignment_axiom
  (assert (<= 0 alignment19))

(declare-fun user_eq36 (us_rep13 us_rep13) Bool)

(declare-const dummy36 us_rep13)

(declare-datatypes ((sequence__ref3 0))
(((sequence__refqtmk3 (sequence__content3 us_rep13)))))
(define-fun sequence__ref_sequence__content__6__projection ((a sequence__ref3)) us_rep13 
  (sequence__content3 a))

(declare-fun length14 (us_rep13) Int)

(declare-fun length__function_guard13 (Int us_rep13) Bool)

(declare-fun model6 (us_rep5) us_rep13)

(declare-fun model__function_guard5 (us_rep13 us_rep5) Bool)

(define-fun last3 ((container us_rep13)) Int (+ 0 (length14 container)))

(declare-fun last__function_guard3 (Int us_rep13) Bool)

(declare-fun get5 (us_rep13 Int) Int)

(declare-fun get__function_guard5 (Int us_rep13 Int) Bool)

(define-fun oeq13 ((left us_rep13)
  (right us_rep13)) Bool (and (= (length14 left) (length14 right)) (ite 
                                                                   (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last3
                                                                   left)))
                                                                   (= 
                                                                   (get5 left
                                                                   n) 
                                                                   (get5
                                                                   right n))))
                                                                   true
                                                                   false)))

(declare-fun oeq__function_guard13 (Bool us_rep13 us_rep13) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep13) (b us_rep13))
  (! (= (user_eq36 a b) (oeq13 a b)) :pattern ((user_eq36 a b)) )))

(define-fun default_initial_assumption13 ((temp___expr_2447 us_rep13)
  (temp___skip_top_level_2448 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_2448 true))
                                          (= (length14 temp___expr_2447) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (length14 (model6 container)) (length5 container)) :pattern (
  (model6 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq5 left right) true)
     (= (oeq13 (model6 left) (model6 right)) true)) :pattern ((oeq5 left
                                                              right)) )))

(declare-sort extended_index3 0)

(declare-fun extended_indexqtint3 (extended_index3) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index3))
  (and (<= 0 (extended_indexqtint3 i))
  (<= (extended_indexqtint3 i) 2147483647))))

(define-fun in_range23 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)

(declare-fun user_eq37 (extended_index3 extended_index3) Bool)

(declare-const dummy37 extended_index3)

(declare-datatypes ((extended_index__ref3 0))
(((extended_index__refqtmk3 (extended_index__content3 extended_index3)))))
(define-fun extended_index__ref_extended_index__content__7__projection ((a extended_index__ref3)) extended_index3 
  (extended_index__content3 a))

(define-fun dynamic_invariant23 ((temp___expr_2439 Int)
  (temp___is_init_2435 Bool) (temp___skip_constant_2436 Bool)
  (temp___do_toplevel_2437 Bool)
  (temp___do_typ_inv_2438 Bool)) Bool (=>
                                      (or (= temp___is_init_2435 true)
                                      (<= 0 2147483647)) (in_range23
                                      temp___expr_2439)))

;; length__post_axiom
  (assert
  (forall ((container us_rep13))
  (! (let ((result (length14 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant1 result true false
     true true))) :pattern ((length14 container)) )))

(declare-sort element_type9 0)

(declare-fun element_typeqtint9 (element_type9) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type9))
  (and (<= 0 (element_typeqtint9 i)) (<= (element_typeqtint9 i) 2147483647))))

(define-fun in_range24 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE19 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check19 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE19 (us_image) Int)

(declare-fun user_eq38 (element_type9 element_type9) Bool)

(declare-const dummy38 element_type9)

(declare-datatypes ((element_type__ref9 0))
(((element_type__refqtmk9 (element_type__content9 element_type9)))))
(define-fun element_type__ref_element_type__content__21__projection ((a element_type__ref9)) element_type9 
  (element_type__content9 a))

(define-fun dynamic_invariant24 ((temp___expr_2432 Int)
  (temp___is_init_2428 Bool) (temp___skip_constant_2429 Bool)
  (temp___do_toplevel_2430 Bool)
  (temp___do_typ_inv_2431 Bool)) Bool (=>
                                      (or (= temp___is_init_2428 true)
                                      (<= 0 2147483647)) (in_range24
                                      temp___expr_2432)))

;; get__post_axiom
  (assert
  (forall ((container us_rep13))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant23 position true true true true)
     (and (<= 1 position) (<= position (last3 container))))
     (dynamic_invariant24 (get5 container position) true false true true)) :pattern (
  (get5 container position)) ))))

;; r2b__def_axiom
  (assert (= r2b (default_modulus capacity)))

;; r5b__def_axiom
  (assert (= r5b (default_modulus1 capacity)))

(assert
;; defqtvc
 ;; File "dic_of_cont.ads", line 31, characters 0-0
  (not
  (forall ((dlli__split_fields us_main_type)
  (dhama__split_fields us_main_type1) (dhase__split_fields us_main_type2)
  (dorma__split_fields us_main_type3) (dorse__split_fields us_main_type4)
  (dfove__split_fields us_main_type5))
  (=> (dynamic_invariant1 capacity true false true true)
  (=> (in_range capacity)
  (=> (default_initial_assumption
  (us_repqtmk dlli__split_discrs (us_split_fieldsqtmk dlli__split_fields))
  false)
  (=> (dynamic_invariant2
  (us_repqtmk dlli__split_discrs (us_split_fieldsqtmk dlli__split_fields))
  false false true true)
  (let ((dic_of_cont__main__R2b__assume (default_modulus capacity)))
  (=> (dynamic_invariant dic_of_cont__main__R2b__assume true false true true)
  (=> (= dic_of_cont__main__R2b__assume r2b)
  (=> (dynamic_invariant r2b true false true true)
  (=> (in_range capacity)
  (=> (default_initial_assumption1
  (us_repqtmk1 dhama__split_discrs
  (us_split_fieldsqtmk1 dhama__split_fields)) false)
  (=> (dynamic_invariant3
  (us_repqtmk1 dhama__split_discrs
  (us_split_fieldsqtmk1 dhama__split_fields)) false false true true)
  (let ((dic_of_cont__main__R5b__assume (default_modulus1 capacity)))
  (=> (dynamic_invariant dic_of_cont__main__R5b__assume true false true true)
  (=> (= dic_of_cont__main__R5b__assume r5b)
  (=> (dynamic_invariant r5b true false true true)
  (=> (in_range capacity)
  (=> (default_initial_assumption2
  (us_repqtmk2 dhase__split_discrs
  (us_split_fieldsqtmk2 dhase__split_fields)) false)
  (=> (dynamic_invariant4
  (us_repqtmk2 dhase__split_discrs
  (us_split_fieldsqtmk2 dhase__split_fields)) false false true true)
  (=> (in_range capacity)
  (=> (default_initial_assumption3
  (us_repqtmk3 dorma__split_discrs
  (us_split_fieldsqtmk3 dorma__split_fields)) false)
  (=> (dynamic_invariant5
  (us_repqtmk3 dorma__split_discrs
  (us_split_fieldsqtmk3 dorma__split_fields)) false false true true)
  (=> (in_range capacity)
  (=> (default_initial_assumption4
  (us_repqtmk4 dorse__split_discrs
  (us_split_fieldsqtmk4 dorse__split_fields)) false)
  (=> (dynamic_invariant6
  (us_repqtmk4 dorse__split_discrs
  (us_split_fieldsqtmk4 dorse__split_fields)) false false true true)
  (=> (in_range1 capacity)
  (=> (default_initial_assumption5
  (us_repqtmk5 dfove__split_discrs
  (us_split_fieldsqtmk5 dfove__split_fields)) false)
  (=> (dynamic_invariant7
  (us_repqtmk5 dfove__split_discrs
  (us_split_fieldsqtmk5 dfove__split_fields)) false false true true)
  (= (is_empty
     (us_repqtmk dlli__split_discrs (us_split_fieldsqtmk dlli__split_fields))) true)))))))))))))))))))))))))))))))
(check-sat)
