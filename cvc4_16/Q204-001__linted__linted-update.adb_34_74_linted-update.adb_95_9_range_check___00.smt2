(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv1 x ((_ int2bv 32) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort int__ 0)

(declare-fun int__qtint (int__) Int)

;; int__'axiom
  (assert
  (forall ((i int__))
  (and (<= (- 2147483648) (int__qtint i)) (<= (int__qtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (int__ int__) Bool)

(declare-const dummy int__)

(declare-datatypes ((int____ref 0))
(((int____refqtmk (int____content int__)))))
(define-fun int____ref_int____content__projection ((a int____ref)) int__ 
  (int____content a))

(define-fun to_rep ((x int__)) Int (int__qtint x))

(declare-fun of_rep (Int) int__)

;; inversion_axiom
  (assert
  (forall ((x int__)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x int__)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort nat 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (nat nat) Bool)

(declare-const dummy1 nat)

(declare-datatypes ((nat__ref 0))
(((nat__refqtmk (nat__content nat)))))
(define-fun nat__ref_nat__content__projection ((a nat__ref)) nat (nat__content
                                                                 a))

(declare-fun to_rep1 (nat) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) nat)

;; inversion_axiom
  (assert
  (forall ((x nat)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x nat)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x nat)) (! (uint_in_range1 (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__ada___linted__update__packet__x_position int__)(rec__ada___linted__update__packet__y_position int__)(rec__ada___linted__update__packet__z_position int__)(rec__ada___linted__update__packet__mx_position int__)(rec__ada___linted__update__packet__my_position int__)(rec__ada___linted__update__packet__mz_position int__)(rec__ada___linted__update__packet__z_rotation nat)(rec__ada___linted__update__packet__x_rotation nat)))))
(define-fun us_split_fields_rec__ada___linted__update__packet__x_position__projection ((a us_split_fields)) int__ 
  (rec__ada___linted__update__packet__x_position a))

(define-fun us_split_fields_rec__ada___linted__update__packet__y_position__projection ((a us_split_fields)) int__ 
  (rec__ada___linted__update__packet__y_position a))

(define-fun us_split_fields_rec__ada___linted__update__packet__z_position__projection ((a us_split_fields)) int__ 
  (rec__ada___linted__update__packet__z_position a))

(define-fun us_split_fields_rec__ada___linted__update__packet__mx_position__projection ((a us_split_fields)) int__ 
  (rec__ada___linted__update__packet__mx_position a))

(define-fun us_split_fields_rec__ada___linted__update__packet__my_position__projection ((a us_split_fields)) int__ 
  (rec__ada___linted__update__packet__my_position a))

(define-fun us_split_fields_rec__ada___linted__update__packet__mz_position__projection ((a us_split_fields)) int__ 
  (rec__ada___linted__update__packet__mz_position a))

(define-fun us_split_fields_rec__ada___linted__update__packet__z_rotation__projection ((a us_split_fields)) nat 
  (rec__ada___linted__update__packet__z_rotation a))

(define-fun us_split_fields_rec__ada___linted__update__packet__x_rotation__projection ((a us_split_fields)) nat 
  (rec__ada___linted__update__packet__x_rotation a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__ada___linted__update__packet__x_position
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___linted__update__packet__x_position
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__ada___linted__update__packet__y_position
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___linted__update__packet__y_position
                                                  (us_split_fields1 b)))))
                        (and
                        (and
                        (and
                        (= (to_rep
                           (rec__ada___linted__update__packet__z_position
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___linted__update__packet__z_position
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__ada___linted__update__packet__mx_position
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___linted__update__packet__mx_position
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__ada___linted__update__packet__my_position
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___linted__update__packet__my_position
                                                  (us_split_fields1 b)))))
                        (and
                        (and
                        (= (to_rep
                           (rec__ada___linted__update__packet__mz_position
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___linted__update__packet__mz_position
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ada___linted__update__packet__z_rotation
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___linted__update__packet__z_rotation
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__ada___linted__update__packet__x_rotation
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___linted__update__packet__x_rotation
                                                  (us_split_fields1 b)))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const ada___linted__update__packet__x_position__first__bit Int)

(declare-const ada___linted__update__packet__x_position__last__bit Int)

(declare-const ada___linted__update__packet__x_position__position Int)

;; ada___linted__update__packet__x_position__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__x_position__first__bit))

;; ada___linted__update__packet__x_position__last__bit_axiom
  (assert
  (< ada___linted__update__packet__x_position__first__bit ada___linted__update__packet__x_position__last__bit))

;; ada___linted__update__packet__x_position__position_axiom
  (assert (<= 0 ada___linted__update__packet__x_position__position))

(declare-const ada___linted__update__packet__y_position__first__bit Int)

(declare-const ada___linted__update__packet__y_position__last__bit Int)

(declare-const ada___linted__update__packet__y_position__position Int)

;; ada___linted__update__packet__y_position__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__y_position__first__bit))

;; ada___linted__update__packet__y_position__last__bit_axiom
  (assert
  (< ada___linted__update__packet__y_position__first__bit ada___linted__update__packet__y_position__last__bit))

;; ada___linted__update__packet__y_position__position_axiom
  (assert (<= 0 ada___linted__update__packet__y_position__position))

(declare-const ada___linted__update__packet__z_position__first__bit Int)

(declare-const ada___linted__update__packet__z_position__last__bit Int)

(declare-const ada___linted__update__packet__z_position__position Int)

;; ada___linted__update__packet__z_position__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__z_position__first__bit))

;; ada___linted__update__packet__z_position__last__bit_axiom
  (assert
  (< ada___linted__update__packet__z_position__first__bit ada___linted__update__packet__z_position__last__bit))

;; ada___linted__update__packet__z_position__position_axiom
  (assert (<= 0 ada___linted__update__packet__z_position__position))

(declare-const ada___linted__update__packet__mx_position__first__bit Int)

(declare-const ada___linted__update__packet__mx_position__last__bit Int)

(declare-const ada___linted__update__packet__mx_position__position Int)

;; ada___linted__update__packet__mx_position__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__mx_position__first__bit))

;; ada___linted__update__packet__mx_position__last__bit_axiom
  (assert
  (< ada___linted__update__packet__mx_position__first__bit ada___linted__update__packet__mx_position__last__bit))

;; ada___linted__update__packet__mx_position__position_axiom
  (assert (<= 0 ada___linted__update__packet__mx_position__position))

(declare-const ada___linted__update__packet__my_position__first__bit Int)

(declare-const ada___linted__update__packet__my_position__last__bit Int)

(declare-const ada___linted__update__packet__my_position__position Int)

;; ada___linted__update__packet__my_position__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__my_position__first__bit))

;; ada___linted__update__packet__my_position__last__bit_axiom
  (assert
  (< ada___linted__update__packet__my_position__first__bit ada___linted__update__packet__my_position__last__bit))

;; ada___linted__update__packet__my_position__position_axiom
  (assert (<= 0 ada___linted__update__packet__my_position__position))

(declare-const ada___linted__update__packet__mz_position__first__bit Int)

(declare-const ada___linted__update__packet__mz_position__last__bit Int)

(declare-const ada___linted__update__packet__mz_position__position Int)

;; ada___linted__update__packet__mz_position__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__mz_position__first__bit))

;; ada___linted__update__packet__mz_position__last__bit_axiom
  (assert
  (< ada___linted__update__packet__mz_position__first__bit ada___linted__update__packet__mz_position__last__bit))

;; ada___linted__update__packet__mz_position__position_axiom
  (assert (<= 0 ada___linted__update__packet__mz_position__position))

(declare-const ada___linted__update__packet__z_rotation__first__bit Int)

(declare-const ada___linted__update__packet__z_rotation__last__bit Int)

(declare-const ada___linted__update__packet__z_rotation__position Int)

;; ada___linted__update__packet__z_rotation__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__z_rotation__first__bit))

;; ada___linted__update__packet__z_rotation__last__bit_axiom
  (assert
  (< ada___linted__update__packet__z_rotation__first__bit ada___linted__update__packet__z_rotation__last__bit))

;; ada___linted__update__packet__z_rotation__position_axiom
  (assert (<= 0 ada___linted__update__packet__z_rotation__position))

(declare-const ada___linted__update__packet__x_rotation__first__bit Int)

(declare-const ada___linted__update__packet__x_rotation__last__bit Int)

(declare-const ada___linted__update__packet__x_rotation__position Int)

;; ada___linted__update__packet__x_rotation__first__bit_axiom
  (assert (<= 0 ada___linted__update__packet__x_rotation__first__bit))

;; ada___linted__update__packet__x_rotation__last__bit_axiom
  (assert
  (< ada___linted__update__packet__x_rotation__first__bit ada___linted__update__packet__x_rotation__last__bit))

;; ada___linted__update__packet__x_rotation__position_axiom
  (assert (<= 0 ada___linted__update__packet__x_rotation__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((packet__ref 0))
(((packet__refqtmk (packet__content us_rep)))))
(define-fun packet__ref_packet__content__projection ((a packet__ref)) us_rep 
  (packet__content a))

(declare-const u us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort storage_element 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (storage_element storage_element) Bool)

(declare-const dummy3 storage_element)

(declare-datatypes ((storage_element__ref 0))
(((storage_element__refqtmk (storage_element__content storage_element)))))
(define-fun storage_element__ref_storage_element__content__projection ((a storage_element__ref)) storage_element 
  (storage_element__content a))

(declare-fun to_rep2 (storage_element) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) storage_element)

;; inversion_axiom
  (assert
  (forall ((x storage_element))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int4 ((x storage_element)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x storage_element)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int storage_element))))))
(declare-fun slide ((Array Int storage_element) Int
  Int) (Array Int storage_element))

;; slide_eq
  (assert
  (forall ((a (Array Int storage_element)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int storage_element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int storage_element)) (a__first Int)
  (a__last Int) (b (Array Int storage_element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_197 us_rep)
  (temp___skip_top_level_198 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__ada___linted__update__packet__x_position
                                            (us_split_fields1
                                            temp___expr_197))) 0)
                                         (= (to_rep
                                            (rec__ada___linted__update__packet__y_position
                                            (us_split_fields1
                                            temp___expr_197))) 0))
                                         (and
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__ada___linted__update__packet__z_position
                                            (us_split_fields1
                                            temp___expr_197))) 0)
                                         (= (to_rep
                                            (rec__ada___linted__update__packet__mx_position
                                            (us_split_fields1
                                            temp___expr_197))) 0))
                                         (= (to_rep
                                            (rec__ada___linted__update__packet__my_position
                                            (us_split_fields1
                                            temp___expr_197))) 0))
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__ada___linted__update__packet__mz_position
                                            (us_split_fields1
                                            temp___expr_197))) 0)
                                         (= (to_rep1
                                            (rec__ada___linted__update__packet__z_rotation
                                            (us_split_fields1
                                            temp___expr_197))) #x00000000))
                                         (= (to_rep1
                                            (rec__ada___linted__update__packet__x_rotation
                                            (us_split_fields1
                                            temp___expr_197))) #x00000000)))))

(declare-const c206b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c210b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const c216b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const c220b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const c226b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const c230b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const c236b Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const c240b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-const c246b Int)

(declare-const attr__ATTRIBUTE_ADDRESS22 Int)

(declare-const attr__ATTRIBUTE_ADDRESS23 Int)

(declare-const attr__ATTRIBUTE_ADDRESS24 Int)

(declare-const c250b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS25 Int)

(declare-const attr__ATTRIBUTE_ADDRESS26 Int)

(declare-const c256b Int)

(declare-const attr__ATTRIBUTE_ADDRESS27 Int)

(declare-const attr__ATTRIBUTE_ADDRESS28 Int)

(declare-const attr__ATTRIBUTE_ADDRESS29 Int)

(declare-const c260b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS30 Int)

(declare-const attr__ATTRIBUTE_ADDRESS31 Int)

(declare-const c266b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS32 Int)

(declare-const attr__ATTRIBUTE_ADDRESS33 Int)

(declare-const c272b (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS34 Int)

(declare-const attr__ATTRIBUTE_ADDRESS35 Int)

(declare-sort tintB 0)

(declare-fun tintBqtint (tintB) Int)

;; tintB'axiom
  (assert
  (forall ((i tintB))
  (and (<= (- 2147483648) (tintBqtint i)) (<= (tintBqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (tintB tintB) Bool)

(declare-const dummy4 tintB)

(declare-datatypes ((tintB__ref 0))
(((tintB__refqtmk (tintB__content tintB)))))
(define-fun tintB__ref_tintB__content__projection ((a tintB__ref)) tintB 
  (tintB__content a))

(define-fun dynamic_invariant ((temp___expr_182 Int)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_182)))

(define-fun dynamic_invariant1 ((temp___expr_189 (_ BitVec 32))
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool) (temp___do_typ_inv_188 Bool)) Bool true)

(declare-sort storage_offset 0)

(declare-fun storage_offsetqtint (storage_offset) Int)

;; storage_offset'axiom
  (assert
  (forall ((i storage_offset))
  (and (<= (- 9223372036854775808) (storage_offsetqtint i))
  (<= (storage_offsetqtint i) 9223372036854775807))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (storage_offset storage_offset) Bool)

(declare-const dummy5 storage_offset)

(declare-datatypes ((storage_offset__ref 0))
(((storage_offset__refqtmk (storage_offset__content storage_offset)))))
(define-fun storage_offset__ref_storage_offset__content__projection ((a storage_offset__ref)) storage_offset 
  (storage_offset__content a))

(declare-fun concat1 ((Array Int storage_element) Int Int
  (Array Int storage_element) Int Int) (Array Int storage_element))

;; concat_def
  (assert
  (forall ((a (Array Int storage_element)) (b (Array Int storage_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (storage_element Int
  (Array Int storage_element) Int Int) (Array Int storage_element))

;; concat_singleton_left_def
  (assert
  (forall ((a storage_element))
  (forall ((b (Array Int storage_element)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int storage_element) Int Int
  storage_element) (Array Int storage_element))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int storage_element)))
  (forall ((b storage_element))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (storage_element Int
  storage_element) (Array Int storage_element))

;; concat_singletons_def
  (assert
  (forall ((a storage_element) (b storage_element))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (storage_element Int) (Array Int storage_element))

;; singleton_def
  (assert
  (forall ((v storage_element))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-sort tstorage_offsetB 0)

(declare-fun tstorage_offsetBqtint (tstorage_offsetB) Int)

;; tstorage_offsetB'axiom
  (assert
  (forall ((i tstorage_offsetB))
  (and (<= (- 9223372036854775808) (tstorage_offsetBqtint i))
  (<= (tstorage_offsetBqtint i) 9223372036854775807))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (tstorage_offsetB tstorage_offsetB) Bool)

(declare-const dummy6 tstorage_offsetB)

(declare-datatypes ((tstorage_offsetB__ref 0))
(((tstorage_offsetB__refqtmk (tstorage_offsetB__content tstorage_offsetB)))))
(define-fun tstorage_offsetB__ref_tstorage_offsetB__content__projection ((a tstorage_offsetB__ref)) tstorage_offsetB 
  (tstorage_offsetB__content a))

(define-fun to_rep3 ((x tstorage_offsetB)) Int (tstorage_offsetBqtint x))

(declare-fun of_rep3 (Int) tstorage_offsetB)

;; inversion_axiom
  (assert
  (forall ((x tstorage_offsetB))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x tstorage_offsetB)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort t 0)

(declare-fun first (t) tstorage_offsetB)

(declare-fun last (t) tstorage_offsetB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep3 (first (mk f l))) f) (= (to_rep3 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int storage_element))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int storage_element) (elts a))

(define-fun of_array ((a (Array Int storage_element)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep3 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep3 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep3 (first (rt x)))
                 (to_rep3 (last (rt x))) (elts y) (to_rep3 (first (rt y)))
                 (to_rep3 (last (rt y)))))

(declare-fun user_eq7 (us_t us_t) Bool)

(declare-const dummy7 us_t)

(declare-datatypes ((storage_array__ref 0))
(((storage_array__refqtmk (storage_array__content us_t)))))
(define-fun storage_array__ref_storage_array__content__projection ((a storage_array__ref)) us_t 
  (storage_array__content a))

(declare-sort tstorageP1 0)

(declare-fun tstorageP1qtint (tstorageP1) Int)

;; tstorageP1'axiom
  (assert
  (forall ((i tstorageP1))
  (and (<= 1 (tstorageP1qtint i)) (<= (tstorageP1qtint i) 32))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 32)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (tstorageP1 tstorageP1) Bool)

(declare-const dummy8 tstorageP1)

(declare-datatypes ((tstorageP1__ref 0))
(((tstorageP1__refqtmk (tstorageP1__content tstorageP1)))))
(define-fun tstorageP1__ref_tstorageP1__content__projection ((a tstorageP1__ref)) tstorageP1 
  (tstorageP1__content a))

(declare-sort ttupleP1 0)

(declare-fun ttupleP1qtint (ttupleP1) Int)

;; ttupleP1'axiom
  (assert
  (forall ((i ttupleP1))
  (and (<= 1 (ttupleP1qtint i)) (<= (ttupleP1qtint i) 4))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (ttupleP1 ttupleP1) Bool)

(declare-const dummy9 ttupleP1)

(declare-datatypes ((ttupleP1__ref 0))
(((ttupleP1__refqtmk (ttupleP1__content ttupleP1)))))
(define-fun ttupleP1__ref_ttupleP1__content__projection ((a ttupleP1__ref)) ttupleP1 
  (ttupleP1__content a))

(declare-fun temp_____aggregate_def_249 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_256 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_263 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_270 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_277 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_284 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_291 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(declare-fun temp_____aggregate_def_298 ((_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8) (_ BitVec 8)) (Array Int storage_element))

(define-fun dynamic_invariant2 ((temp___expr_203 Int)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)
  (temp___do_typ_inv_202 Bool)) Bool (=>
                                     (or (= temp___is_init_199 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range2 temp___expr_203)))

(define-fun dynamic_invariant3 ((temp___expr_210 (_ BitVec 8))
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool) (temp___do_typ_inv_209 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_217 us_t)
  (temp___is_init_213 Bool) (temp___skip_constant_214 Bool)
  (temp___do_toplevel_215 Bool)
  (temp___do_typ_inv_216 Bool)) Bool (=>
                                     (not (= temp___skip_constant_214 true))
                                     (dynamic_property
                                     (- 9223372036854775808)
                                     9223372036854775807
                                     (first1 temp___expr_217)
                                     (last1 temp___expr_217))))

;; c206b__def_axiom
  (assert
  (= c206b (to_rep
           (rec__ada___linted__update__packet__x_position
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___251 (_ BitVec 8)) (temp___252 (_ BitVec 8))
  (temp___253 (_ BitVec 8)) (temp___254 (_ BitVec 8)))
  (let ((temp___250 (temp_____aggregate_def_249 temp___251 temp___252
                    temp___253 temp___254)))
  (=>
  (and
  (and (dynamic_invariant3 temp___251 true true true true)
  (dynamic_invariant3 temp___252 true true true true))
  (and (dynamic_invariant3 temp___253 true true true true)
  (dynamic_invariant3 temp___254 true true true true)))
  (and
  (and (= (to_rep2 (select temp___250 1)) temp___251)
  (= (to_rep2 (select temp___250 2)) temp___252))
  (and (= (to_rep2 (select temp___250 3)) temp___253)
  (= (to_rep2 (select temp___250 4)) temp___254)))))))

;; c216b__def_axiom
  (assert
  (= c216b (to_rep
           (rec__ada___linted__update__packet__y_position
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___258 (_ BitVec 8)) (temp___259 (_ BitVec 8))
  (temp___260 (_ BitVec 8)) (temp___261 (_ BitVec 8)))
  (let ((temp___257 (temp_____aggregate_def_256 temp___258 temp___259
                    temp___260 temp___261)))
  (=>
  (and
  (and (dynamic_invariant3 temp___258 true true true true)
  (dynamic_invariant3 temp___259 true true true true))
  (and (dynamic_invariant3 temp___260 true true true true)
  (dynamic_invariant3 temp___261 true true true true)))
  (and
  (and (= (to_rep2 (select temp___257 1)) temp___258)
  (= (to_rep2 (select temp___257 2)) temp___259))
  (and (= (to_rep2 (select temp___257 3)) temp___260)
  (= (to_rep2 (select temp___257 4)) temp___261)))))))

;; c226b__def_axiom
  (assert
  (= c226b (to_rep
           (rec__ada___linted__update__packet__z_position
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___265 (_ BitVec 8)) (temp___266 (_ BitVec 8))
  (temp___267 (_ BitVec 8)) (temp___268 (_ BitVec 8)))
  (let ((temp___264 (temp_____aggregate_def_263 temp___265 temp___266
                    temp___267 temp___268)))
  (=>
  (and
  (and (dynamic_invariant3 temp___265 true true true true)
  (dynamic_invariant3 temp___266 true true true true))
  (and (dynamic_invariant3 temp___267 true true true true)
  (dynamic_invariant3 temp___268 true true true true)))
  (and
  (and (= (to_rep2 (select temp___264 1)) temp___265)
  (= (to_rep2 (select temp___264 2)) temp___266))
  (and (= (to_rep2 (select temp___264 3)) temp___267)
  (= (to_rep2 (select temp___264 4)) temp___268)))))))

;; c236b__def_axiom
  (assert
  (= c236b (to_rep
           (rec__ada___linted__update__packet__mx_position
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___272 (_ BitVec 8)) (temp___273 (_ BitVec 8))
  (temp___274 (_ BitVec 8)) (temp___275 (_ BitVec 8)))
  (let ((temp___271 (temp_____aggregate_def_270 temp___272 temp___273
                    temp___274 temp___275)))
  (=>
  (and
  (and (dynamic_invariant3 temp___272 true true true true)
  (dynamic_invariant3 temp___273 true true true true))
  (and (dynamic_invariant3 temp___274 true true true true)
  (dynamic_invariant3 temp___275 true true true true)))
  (and
  (and (= (to_rep2 (select temp___271 1)) temp___272)
  (= (to_rep2 (select temp___271 2)) temp___273))
  (and (= (to_rep2 (select temp___271 3)) temp___274)
  (= (to_rep2 (select temp___271 4)) temp___275)))))))

;; c246b__def_axiom
  (assert
  (= c246b (to_rep
           (rec__ada___linted__update__packet__my_position
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___279 (_ BitVec 8)) (temp___280 (_ BitVec 8))
  (temp___281 (_ BitVec 8)) (temp___282 (_ BitVec 8)))
  (let ((temp___278 (temp_____aggregate_def_277 temp___279 temp___280
                    temp___281 temp___282)))
  (=>
  (and
  (and (dynamic_invariant3 temp___279 true true true true)
  (dynamic_invariant3 temp___280 true true true true))
  (and (dynamic_invariant3 temp___281 true true true true)
  (dynamic_invariant3 temp___282 true true true true)))
  (and
  (and (= (to_rep2 (select temp___278 1)) temp___279)
  (= (to_rep2 (select temp___278 2)) temp___280))
  (and (= (to_rep2 (select temp___278 3)) temp___281)
  (= (to_rep2 (select temp___278 4)) temp___282)))))))

;; c256b__def_axiom
  (assert
  (= c256b (to_rep
           (rec__ada___linted__update__packet__mz_position
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___286 (_ BitVec 8)) (temp___287 (_ BitVec 8))
  (temp___288 (_ BitVec 8)) (temp___289 (_ BitVec 8)))
  (let ((temp___285 (temp_____aggregate_def_284 temp___286 temp___287
                    temp___288 temp___289)))
  (=>
  (and
  (and (dynamic_invariant3 temp___286 true true true true)
  (dynamic_invariant3 temp___287 true true true true))
  (and (dynamic_invariant3 temp___288 true true true true)
  (dynamic_invariant3 temp___289 true true true true)))
  (and
  (and (= (to_rep2 (select temp___285 1)) temp___286)
  (= (to_rep2 (select temp___285 2)) temp___287))
  (and (= (to_rep2 (select temp___285 3)) temp___288)
  (= (to_rep2 (select temp___285 4)) temp___289)))))))

;; c266b__def_axiom
  (assert
  (= c266b (to_rep1
           (rec__ada___linted__update__packet__z_rotation
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___293 (_ BitVec 8)) (temp___294 (_ BitVec 8))
  (temp___295 (_ BitVec 8)) (temp___296 (_ BitVec 8)))
  (let ((temp___292 (temp_____aggregate_def_291 temp___293 temp___294
                    temp___295 temp___296)))
  (=>
  (and
  (and (dynamic_invariant3 temp___293 true true true true)
  (dynamic_invariant3 temp___294 true true true true))
  (and (dynamic_invariant3 temp___295 true true true true)
  (dynamic_invariant3 temp___296 true true true true)))
  (and
  (and (= (to_rep2 (select temp___292 1)) temp___293)
  (= (to_rep2 (select temp___292 2)) temp___294))
  (and (= (to_rep2 (select temp___292 3)) temp___295)
  (= (to_rep2 (select temp___292 4)) temp___296)))))))

;; c272b__def_axiom
  (assert
  (= c272b (to_rep1
           (rec__ada___linted__update__packet__x_rotation
           (us_split_fields1 u)))))

;; def_axiom
  (assert
  (forall ((temp___300 (_ BitVec 8)) (temp___301 (_ BitVec 8))
  (temp___302 (_ BitVec 8)) (temp___303 (_ BitVec 8)))
  (let ((temp___299 (temp_____aggregate_def_298 temp___300 temp___301
                    temp___302 temp___303)))
  (=>
  (and
  (and (dynamic_invariant3 temp___300 true true true true)
  (dynamic_invariant3 temp___301 true true true true))
  (and (dynamic_invariant3 temp___302 true true true true)
  (dynamic_invariant3 temp___303 true true true true)))
  (and
  (and (= (to_rep2 (select temp___299 1)) temp___300)
  (= (to_rep2 (select temp___299 2)) temp___301))
  (and (= (to_rep2 (select temp___299 3)) temp___302)
  (= (to_rep2 (select temp___299 4)) temp___303)))))))

(assert
;; defqtvc
 ;; File "linted-update.ads", line 40, characters 0-0
  (not
  (forall ((c207b (_ BitVec 32)) (y (_ BitVec 32)) (c217b (_ BitVec 32))
  (y1 (_ BitVec 32)) (ada___linted__update__to_storage__C206b__assume Int)
  (spark__branch Bool) (y2 (_ BitVec 32)) (c207b1 (_ BitVec 32)))
  (=>
  (= (to_rep
     (rec__ada___linted__update__packet__x_position (us_split_fields1 u))) ada___linted__update__to_storage__C206b__assume)
  (=> (= ada___linted__update__to_storage__C206b__assume c206b)
  (=> (dynamic_invariant c206b true false true true)
  (=> (dynamic_invariant1 c207b false false true true)
  (=> (dynamic_invariant1 y false false true true)
  (=> (= spark__branch (ite (< c206b 0) true false))
  (=>
  (ite (= spark__branch true)
  (let ((o (- c206b (- 2147483648))))
  (and (in_range1 o)
  (and (uint_in_range1 o) (= y2 (bvsub ((_ int2bv 32) o) #x80000000)))))
  (let ((o c206b)) (and (uint_in_range1 o) (= y2 ((_ int2bv 32) o)))))
  (=> (= c207b1 y2)
  (=> (= c207b1 c210b)
  (=> (dynamic_invariant1 c210b true false true true)
  (forall ((c211b (Array Int storage_element)))
  (=>
  (= c211b (temp_____aggregate_def_249
           ((_ extract 7 0) (bvand (bvlshr c210b ((_ int2bv 32) 24)) #x000000FF))
           ((_ extract 7 0) (bvand (bvlshr c210b ((_ int2bv 32) 16)) #x000000FF))
           ((_ extract 7 0) (bvand (bvlshr c210b ((_ int2bv 32) 8)) #x000000FF))
           ((_ extract 7 0) (bvand c210b #x000000FF))))
  (forall ((ada___linted__update__to_storage__C216b__assume Int))
  (=>
  (= (to_rep
     (rec__ada___linted__update__packet__y_position (us_split_fields1 u))) ada___linted__update__to_storage__C216b__assume)
  (=> (= ada___linted__update__to_storage__C216b__assume c216b)
  (=> (dynamic_invariant c216b true false true true)
  (=> (dynamic_invariant1 c217b false false true true)
  (=> (dynamic_invariant1 y1 false false true true)
  (forall ((spark__branch1 Bool) (y3 (_ BitVec 32)))
  (=>
  (and (= spark__branch1 (ite (< c216b 0) true false))
  (ite (= spark__branch1 true)
  (let ((o (- c216b (- 2147483648))))
  (and (in_range1 o)
  (and (uint_in_range1 o) (= y3 (bvsub ((_ int2bv 32) o) #x80000000)))))
  (let ((o c216b)) (and (uint_in_range1 o) (= y3 ((_ int2bv 32) o))))))
  (forall ((c217b1 (_ BitVec 32)))
  (=> (= c217b1 y3)
  (=> (= c217b1 c220b)
  (=> (dynamic_invariant1 c220b true false true true)
  (bvule ((_ zero_extend 24) #x00) (bvand (bvlshr c220b ((_ int2bv 32) 24)) #x000000FF)))))))))))))))))))))))))))))
(check-sat)
(exit)
