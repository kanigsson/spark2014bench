;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (hash_type hash_type) Bool)

(declare-const dummy1 hash_type)

(declare-datatypes ((hash_type__ref 0))
(((hash_type__refqtmk (hash_type__content hash_type)))))
(define-fun hash_type__ref_hash_type__content__projection ((a hash_type__ref)) hash_type 
  (hash_type__content a))

(declare-fun to_rep1 (hash_type) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__prim_eq_vect__int_vect_map__map__capacity count_type)(rec__prim_eq_vect__int_vect_map__map__modulus hash_type)))))
(define-fun us_split_discrs_rec__prim_eq_vect__int_vect_map__map__capacity__projection ((a us_split_discrs)) count_type 
  (rec__prim_eq_vect__int_vect_map__map__capacity a))

(define-fun us_split_discrs_rec__prim_eq_vect__int_vect_map__map__modulus__projection ((a us_split_discrs)) hash_type 
  (rec__prim_eq_vect__int_vect_map__map__modulus a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__prim_eq_vect__int_vect_map__map us_main_type)))))
(define-fun us_split_fields_rec__prim_eq_vect__int_vect_map__map__projection ((a us_split_fields)) us_main_type 
  (rec__prim_eq_vect__int_vect_map__map a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__prim_eq_vect__int_vect_map__map__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__prim_eq_vect__int_vect_map__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep1
                           (rec__prim_eq_vect__int_vect_map__map__modulus
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__prim_eq_vect__int_vect_map__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__prim_eq_vect__int_vect_map__map
                           (us_split_fields1 a))
                           (rec__prim_eq_vect__int_vect_map__map
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const prim_eq_vect__int_vect_map__map__capacity__first__bit Int)

(declare-const prim_eq_vect__int_vect_map__map__capacity__last__bit Int)

(declare-const prim_eq_vect__int_vect_map__map__capacity__position Int)

;; prim_eq_vect__int_vect_map__map__capacity__first__bit_axiom
  (assert (<= 0 prim_eq_vect__int_vect_map__map__capacity__first__bit))

;; prim_eq_vect__int_vect_map__map__capacity__last__bit_axiom
  (assert
  (< prim_eq_vect__int_vect_map__map__capacity__first__bit prim_eq_vect__int_vect_map__map__capacity__last__bit))

;; prim_eq_vect__int_vect_map__map__capacity__position_axiom
  (assert (<= 0 prim_eq_vect__int_vect_map__map__capacity__position))

(declare-const prim_eq_vect__int_vect_map__map__modulus__first__bit Int)

(declare-const prim_eq_vect__int_vect_map__map__modulus__last__bit Int)

(declare-const prim_eq_vect__int_vect_map__map__modulus__position Int)

;; prim_eq_vect__int_vect_map__map__modulus__first__bit_axiom
  (assert (<= 0 prim_eq_vect__int_vect_map__map__modulus__first__bit))

;; prim_eq_vect__int_vect_map__map__modulus__last__bit_axiom
  (assert
  (< prim_eq_vect__int_vect_map__map__modulus__first__bit prim_eq_vect__int_vect_map__map__modulus__last__bit))

;; prim_eq_vect__int_vect_map__map__modulus__position_axiom
  (assert (<= 0 prim_eq_vect__int_vect_map__map__modulus__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep (map__content
                                                                    a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__prim_eq_vect__int_vect_map__cursor__node count_type)))))
(define-fun us_split_fields_rec__prim_eq_vect__int_vect_map__cursor__node__projection ((a us_split_fields2)) count_type 
  (rec__prim_eq_vect__int_vect_map__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep
                            (rec__prim_eq_vect__int_vect_map__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__prim_eq_vect__int_vect_map__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const prim_eq_vect__int_vect_map__cursor__node__first__bit Int)

(declare-const prim_eq_vect__int_vect_map__cursor__node__last__bit Int)

(declare-const prim_eq_vect__int_vect_map__cursor__node__position Int)

;; prim_eq_vect__int_vect_map__cursor__node__first__bit_axiom
  (assert (<= 0 prim_eq_vect__int_vect_map__cursor__node__first__bit))

;; prim_eq_vect__int_vect_map__cursor__node__last__bit_axiom
  (assert
  (< prim_eq_vect__int_vect_map__cursor__node__first__bit prim_eq_vect__int_vect_map__cursor__node__last__bit))

;; prim_eq_vect__int_vect_map__cursor__node__position_axiom
  (assert (<= 0 prim_eq_vect__int_vect_map__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep1)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep1 
  (cursor__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun dynamic_invariant ((temp___expr_335 Int)
  (temp___is_init_331 Bool) (temp___skip_constant_332 Bool)
  (temp___do_toplevel_333 Bool)
  (temp___do_typ_inv_334 Bool)) Bool (=>
                                     (or (= temp___is_init_331 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_335)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__prim_eq_vect__int_vect_map__map__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true true))) :pattern ((length
                                                                 container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 us_rep2)))))
(define-fun map__ref_map__content__2__projection ((a map__ref1)) us_rep2 
  (map__content1 a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep3)))))
(define-fun sequence__ref_sequence__content__2__projection ((a sequence__ref)) us_rep3 
  (sequence__content a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq6 (us_rep4 us_rep4) Bool)

(declare-const dummy6 us_rep4)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 us_rep4)))))
(define-fun map__ref_map__content__3__projection ((a map__ref2)) us_rep4 
  (map__content2 a))

(declare-fun model1 (us_rep) us_rep2)

(declare-fun model__function_guard (us_rep2 us_rep) Bool)

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_483 us_rep2)
  (temp___skip_top_level_484 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_484 true))
                                         (and
                                         (= (is_empty temp___expr_483) true)
                                         (= (length1 temp___expr_483) 0))))

;; model__post_axiom
  (assert true)

(declare-fun keys (us_rep) us_rep3)

(declare-fun keys__function_guard (us_rep3 us_rep) Bool)

(declare-fun has_key (us_rep2 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 Int) Bool)

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-fun get (us_rep3 Int) Int)

(declare-fun get__function_guard (Int us_rep3 Int) Bool)

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= (- 2147483648) (key_typeqtint i))
  (<= (key_typeqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (key_type key_type) Bool)

(declare-const dummy7 key_type)

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content key_type)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref)) key_type 
  (key_type__content a))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-const dummy8 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__3__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun length3 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length2 left) (length2 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq5 a b) (oeq2 a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_547 us_rep3)
  (temp___skip_top_level_548 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_548 true))
                                         (= (length2 temp___expr_547) 0)))

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and
     (and (= (length2 result) (length container))
     (forall ((temp___614 Int))
     (=>
     (and (in_range3 temp___614)
     (= (iter_has_element result temp___614) true))
     (= (has_key (model1 container) (get result temp___614)) true))))
     (forall ((key Int))
     (=> (and (in_range2 key) (= (has_key (model1 container) key) true))
     (and (< 0 (find result key)) (= (get result (find result key)) key)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (= (find result (get result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length container)))
     (=> (= (get result i) (get result j)) (= i j)))))))) :pattern ((keys
                                                                    container)) )))

(declare-fun positions (us_rep) us_rep4)

(declare-fun positions__function_guard (us_rep4 us_rep) Bool)

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((key_type__ref1 0))
(((key_type__refqtmk1 (key_type__content1 us_rep1)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref1)) us_rep1 
  (key_type__content1 a))

(declare-fun has_key1 (us_rep4 us_rep1) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep4 us_rep1) Bool)

(declare-fun get1 (us_rep4 us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep4 us_rep1) Bool)

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun oeq3 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)

(declare-fun is_empty1 (us_rep4) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq6 a b) (oeq3 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_570 us_rep4)
  (temp___skip_top_level_571 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_571 true))
                                         (and
                                         (= (is_empty1 temp___expr_570) true)
                                         (= (length4 temp___expr_570) 0))))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key1 result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key1 result i) true)
     (and
     (and (<= 1 (get1 result i)) (<= (get1 result i) (length container)))
     (forall ((j us_rep1))
     (=> (= (has_key1 result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key1 (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(define-fun key ((container us_rep)
  (position us_rep1)) Int (get (keys container)
                          (get1 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep1) Bool)

(declare-sort key_type1 0)

(declare-fun key_typeqtint1 (key_type1) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type1))
  (and (<= (- 2147483648) (key_typeqtint1 i))
  (<= (key_typeqtint1 i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (key_type1 key_type1) Bool)

(declare-const dummy9 key_type1)

(declare-datatypes ((key_type__ref2 0))
(((key_type__refqtmk2 (key_type__content2 key_type1)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref2)) key_type1 
  (key_type__content2 a))

(define-fun dynamic_invariant1 ((temp___expr_416 Int)
  (temp___is_init_412 Bool) (temp___skip_constant_413 Bool)
  (temp___do_toplevel_414 Bool)
  (temp___do_typ_inv_415 Bool)) Bool (=>
                                     (or (= temp___is_init_412 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range4 temp___expr_416)))

(declare-const container__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i))
  (<= (capacity_rangeqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (capacity_range capacity_range) Bool)

(declare-const dummy10 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep2 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__prim_eq_vect__int_vect__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__prim_eq_vect__int_vect__vector__capacity__projection ((a us_split_discrs2)) capacity_range 
  (rec__prim_eq_vect__int_vect__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__prim_eq_vect__int_vect__vector us_main_type4)))))
(define-fun us_split_fields_rec__prim_eq_vect__int_vect__vector__projection ((a us_split_fields4)) us_main_type4 
  (rec__prim_eq_vect__int_vect__vector a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk2
  (us_split_discrs3 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__projection ((a us_rep5)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__projection ((a us_rep5)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq5 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep2
                            (rec__prim_eq_vect__int_vect__vector__capacity
                            (us_split_discrs3 a))) (to_rep2
                                                   (rec__prim_eq_vect__int_vect__vector__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq4
                            (rec__prim_eq_vect__int_vect__vector
                            (us_split_fields5 a))
                            (rec__prim_eq_vect__int_vect__vector
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const prim_eq_vect__int_vect__vector__capacity__first__bit Int)

(declare-const prim_eq_vect__int_vect__vector__capacity__last__bit Int)

(declare-const prim_eq_vect__int_vect__vector__capacity__position Int)

;; prim_eq_vect__int_vect__vector__capacity__first__bit_axiom
  (assert (<= 0 prim_eq_vect__int_vect__vector__capacity__first__bit))

;; prim_eq_vect__int_vect__vector__capacity__last__bit_axiom
  (assert
  (< prim_eq_vect__int_vect__vector__capacity__first__bit prim_eq_vect__int_vect__vector__capacity__last__bit))

;; prim_eq_vect__int_vect__vector__capacity__position_axiom
  (assert (<= 0 prim_eq_vect__int_vect__vector__capacity__position))

(declare-fun user_eq11 (us_rep5 us_rep5) Bool)

(declare-const dummy11 us_rep5)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep5)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep5 
  (vector__content a))

(declare-fun oeq4 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard4 (Bool us_rep5 us_rep5) Bool)

(declare-fun is_empty2 (us_rep5) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep5) Bool)

(define-fun in_range6 ((rec__prim_eq_vect__int_vect__vector__capacity1 Int)
  (a us_rep5)) Bool (= rec__prim_eq_vect__int_vect__vector__capacity1 
  (to_rep2
  (rec__prim_eq_vect__int_vect__vector__capacity (us_split_discrs3 a)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const prim_eq_vect__int_vect__vector__capacity__first__bit1 Int)

(declare-const prim_eq_vect__int_vect__vector__capacity__last__bit1 Int)

(declare-const prim_eq_vect__int_vect__vector__capacity__position1 Int)

;; prim_eq_vect__int_vect__vector__capacity__first__bit_axiom
  (assert (<= 0 prim_eq_vect__int_vect__vector__capacity__first__bit1))

;; prim_eq_vect__int_vect__vector__capacity__last__bit_axiom
  (assert
  (< prim_eq_vect__int_vect__vector__capacity__first__bit1 prim_eq_vect__int_vect__vector__capacity__last__bit1))

;; prim_eq_vect__int_vect__vector__capacity__position_axiom
  (assert (<= 0 prim_eq_vect__int_vect__vector__capacity__position1))

(declare-fun user_eq12 (us_rep5 us_rep5) Bool)

(declare-const dummy12 us_rep5)

(declare-datatypes ((my_vect__ref 0))
(((my_vect__refqtmk (my_vect__content us_rep5)))))
(define-fun my_vect__ref_my_vect__content__projection ((a my_vect__ref)) us_rep5 
  (my_vect__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq12 a b) (oeq4 a b)) :pattern ((user_eq12 a b)) )))

(define-fun dynamic_invariant2 ((temp___expr_384 us_rep5)
  (temp___is_init_380 Bool) (temp___skip_constant_381 Bool)
  (temp___do_toplevel_382 Bool)
  (temp___do_typ_inv_383 Bool)) Bool (=>
                                     (not (= temp___skip_constant_381 true))
                                     (in_range6 200 temp___expr_384)))

(define-fun default_initial_assumption3 ((temp___expr_386 us_rep5)
  (temp___skip_top_level_387 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__prim_eq_vect__int_vect__vector__capacity
                                            (us_split_discrs3
                                            temp___expr_386))) 200)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_387 true))
                                         (= (is_empty2 temp___expr_386) true))))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__prim_eq_vect__two_vects__f us_rep5)(rec__prim_eq_vect__two_vects__g us_rep5)))))
(define-fun us_split_fields_rec__prim_eq_vect__two_vects__f__projection ((a us_split_fields6)) us_rep5 
  (rec__prim_eq_vect__two_vects__f a))

(define-fun us_split_fields_rec__prim_eq_vect__two_vects__g__projection ((a us_split_fields6)) us_rep5 
  (rec__prim_eq_vect__two_vects__g a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep6 0))
(((us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep6)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq6 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (user_eq12
                            (rec__prim_eq_vect__two_vects__f
                            (us_split_fields7 a))
                            (rec__prim_eq_vect__two_vects__f
                            (us_split_fields7 b))) true)
                         (= (user_eq12
                            (rec__prim_eq_vect__two_vects__g
                            (us_split_fields7 a))
                            (rec__prim_eq_vect__two_vects__g
                            (us_split_fields7 b))) true))
                    true false))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const prim_eq_vect__two_vects__f__first__bit Int)

(declare-const prim_eq_vect__two_vects__f__last__bit Int)

(declare-const prim_eq_vect__two_vects__f__position Int)

;; prim_eq_vect__two_vects__f__first__bit_axiom
  (assert (<= 0 prim_eq_vect__two_vects__f__first__bit))

;; prim_eq_vect__two_vects__f__last__bit_axiom
  (assert
  (< prim_eq_vect__two_vects__f__first__bit prim_eq_vect__two_vects__f__last__bit))

;; prim_eq_vect__two_vects__f__position_axiom
  (assert (<= 0 prim_eq_vect__two_vects__f__position))

(declare-const prim_eq_vect__two_vects__g__first__bit Int)

(declare-const prim_eq_vect__two_vects__g__last__bit Int)

(declare-const prim_eq_vect__two_vects__g__position Int)

;; prim_eq_vect__two_vects__g__first__bit_axiom
  (assert (<= 0 prim_eq_vect__two_vects__g__first__bit))

;; prim_eq_vect__two_vects__g__last__bit_axiom
  (assert
  (< prim_eq_vect__two_vects__g__first__bit prim_eq_vect__two_vects__g__last__bit))

;; prim_eq_vect__two_vects__g__position_axiom
  (assert (<= 0 prim_eq_vect__two_vects__g__position))

(declare-fun user_eq13 (us_rep6 us_rep6) Bool)

(declare-const dummy13 us_rep6)

(declare-datatypes ((two_vects__ref 0))
(((two_vects__refqtmk (two_vects__content us_rep6)))))
(define-fun two_vects__ref_two_vects__content__projection ((a two_vects__ref)) us_rep6 
  (two_vects__content a))

(define-fun dynamic_invariant3 ((temp___expr_394 us_rep6)
  (temp___is_init_390 Bool) (temp___skip_constant_391 Bool)
  (temp___do_toplevel_392 Bool)
  (temp___do_typ_inv_393 Bool)) Bool (and (in_range6 200
                                     (rec__prim_eq_vect__two_vects__f
                                     (us_split_fields7 temp___expr_394)))
                                     (in_range6 200
                                     (rec__prim_eq_vect__two_vects__g
                                     (us_split_fields7 temp___expr_394)))))

(define-fun default_initial_assumption4 ((temp___expr_397 us_rep6)
  (temp___skip_top_level_398 Bool)) Bool (and
                                         (and
                                         (= (to_rep2
                                            (rec__prim_eq_vect__int_vect__vector__capacity
                                            (us_split_discrs3
                                            (rec__prim_eq_vect__two_vects__f
                                            (us_split_fields7
                                            temp___expr_397))))) 200)
                                         (= (is_empty2
                                            (rec__prim_eq_vect__two_vects__f
                                            (us_split_fields7
                                            temp___expr_397))) true))
                                         (and
                                         (= (to_rep2
                                            (rec__prim_eq_vect__int_vect__vector__capacity
                                            (us_split_discrs3
                                            (rec__prim_eq_vect__two_vects__g
                                            (us_split_fields7
                                            temp___expr_397))))) 200)
                                         (= (is_empty2
                                            (rec__prim_eq_vect__two_vects__g
                                            (us_split_fields7
                                            temp___expr_397))) true))))

(define-fun dynamic_invariant4 ((temp___expr_409 (_ BitVec 32))
  (temp___is_init_405 Bool) (temp___skip_constant_406 Bool)
  (temp___do_toplevel_407 Bool) (temp___do_typ_inv_408 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_342 Int)
  (temp___is_init_338 Bool) (temp___skip_constant_339 Bool)
  (temp___do_toplevel_340 Bool)
  (temp___do_typ_inv_341 Bool)) Bool (=>
                                     (or (= temp___is_init_338 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_342)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq11 a b) (oeq4 a b)) :pattern ((user_eq11 a b)) )))

(define-fun capacity ((container us_rep5)) Int (to_rep2
                                               (rec__prim_eq_vect__int_vect__vector__capacity
                                               (us_split_discrs3 container))))

(declare-fun capacity__function_guard (Int us_rep5) Bool)

(declare-fun length5 (us_rep5) Int)

(declare-fun length__function_guard4 (Int us_rep5) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (length5 container)))
     (and (<= result (capacity container)) (dynamic_invariant5 result true
     false true true))) :pattern ((length5 container)) )))

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq7 (us_rep7 us_rep7) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq14 (us_rep7 us_rep7) Bool)

(declare-const dummy14 us_rep7)

(declare-datatypes ((sequence__ref1 0))
(((sequence__refqtmk1 (sequence__content1 us_rep7)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref1)) us_rep7 
  (sequence__content1 a))

(declare-fun length6 (us_rep7) Int)

(declare-fun length__function_guard5 (Int us_rep7) Bool)

(declare-fun model2 (us_rep5) us_rep7)

(declare-fun model__function_guard1 (us_rep7 us_rep5) Bool)

(define-fun last1 ((container us_rep7)) Int (+ 0 (length6 container)))

(declare-fun last__function_guard1 (Int us_rep7) Bool)

(declare-fun get2 (us_rep7 Int) Int)

(declare-fun get__function_guard2 (Int us_rep7 Int) Bool)

(define-fun oeq5 ((left us_rep7)
  (right us_rep7)) Bool (and (= (length6 left) (length6 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last1 left)))
                                                                (= (get2 left
                                                                   n) 
                                                                (get2 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard5 (Bool us_rep7 us_rep7) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep7) (b us_rep7))
  (! (= (user_eq14 a b) (oeq5 a b)) :pattern ((user_eq14 a b)) )))

(define-fun default_initial_assumption5 ((temp___expr_377 us_rep7)
  (temp___skip_top_level_378 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_378 true))
                                         (= (length6 temp___expr_377) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (length6 (model2 container)) (length5 container)) :pattern ((model2
                                                                    container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq4 left right) true)
     (= (oeq5 (model2 left) (model2 right)) true)) :pattern ((oeq4 left
                                                             right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty2 container) true) (= (length5 container) 0)) :pattern (
  (is_empty2 container)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i))
  (<= (extended_indexqtint1 i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq15 (extended_index1 extended_index1) Bool)

(declare-const dummy15 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant6 ((temp___expr_369 Int)
  (temp___is_init_365 Bool) (temp___skip_constant_366 Bool)
  (temp___do_toplevel_367 Bool)
  (temp___do_typ_inv_368 Bool)) Bool (=>
                                     (or (= temp___is_init_365 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_369)))

;; length__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (let ((result (length6 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true true))) :pattern ((length6 container)) )))

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq16 (element_type element_type) Bool)

(declare-const dummy16 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant7 ((temp___expr_362 Int)
  (temp___is_init_358 Bool) (temp___skip_constant_359 Bool)
  (temp___do_toplevel_360 Bool)
  (temp___do_typ_inv_361 Bool)) Bool (=>
                                     (or (= temp___is_init_358 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range8 temp___expr_362)))

;; get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant6 position true true true true)
     (and (<= 1 position) (<= position (last1 container))))
     (dynamic_invariant7 (get2 container position) true false true true)) :pattern (
  (get2 container position)) ))))

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk1 (us_split_fieldsqtmk1 rliteral))))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant1 key1 true true true true)
     (let ((result (find container key1)))
     (and
     (=> (< 0 result)
     (and (<= result (length2 container)) (= key1 (get container result))))
     (dynamic_invariant result true false true true)))) :pattern ((find
                                                                  container
                                                                  key1)) ))))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

(define-fun dynamic_invariant8 ((temp___expr_460 Int)
  (temp___is_init_456 Bool) (temp___skip_constant_457 Bool)
  (temp___do_toplevel_458 Bool)
  (temp___do_typ_inv_459 Bool)) Bool (=>
                                     (or (= temp___is_init_456 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_460)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant8 key1 true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k Int))
     (and (and (in_range2 k) (= (has_key container k) true)) (= k key1)))
     (= (has_key container key1) true)))) :pattern ((has_key container key1)) ))))

(declare-fun witness (us_rep2 Int) Int)

(declare-fun witness__function_guard (Int us_rep2 Int) Bool)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 us_rep6)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref1)) us_rep6 
  (element_type__content1 a))

(declare-fun w_get (us_rep2 Int) us_rep6)

(declare-fun w_get__function_guard (us_rep6 us_rep2 Int) Bool)

(declare-fun get3 (us_rep2 Int) us_rep6)

(declare-fun get__function_guard3 (us_rep6 us_rep2 Int) Bool)

(define-fun dynamic_invariant9 ((temp___expr_467 us_rep6)
  (temp___is_init_463 Bool) (temp___skip_constant_464 Bool)
  (temp___do_toplevel_465 Bool)
  (temp___do_typ_inv_466 Bool)) Bool (and (in_range6 200
                                     (rec__prim_eq_vect__two_vects__f
                                     (us_split_fields7 temp___expr_467)))
                                     (in_range6 200
                                     (rec__prim_eq_vect__two_vects__g
                                     (us_split_fields7 temp___expr_467)))))

(define-fun default_initial_assumption6 ((temp___expr_470 us_rep6)
  (temp___skip_top_level_471 Bool)) Bool (and
                                         (and
                                         (= (to_rep2
                                            (rec__prim_eq_vect__int_vect__vector__capacity
                                            (us_split_discrs3
                                            (rec__prim_eq_vect__two_vects__f
                                            (us_split_fields7
                                            temp___expr_470))))) 200)
                                         (= (is_empty2
                                            (rec__prim_eq_vect__two_vects__f
                                            (us_split_fields7
                                            temp___expr_470))) true))
                                         (and
                                         (= (to_rep2
                                            (rec__prim_eq_vect__int_vect__vector__capacity
                                            (us_split_discrs3
                                            (rec__prim_eq_vect__two_vects__g
                                            (us_split_fields7
                                            temp___expr_470))))) 200)
                                         (= (is_empty2
                                            (rec__prim_eq_vect__two_vects__g
                                            (us_split_fields7
                                            temp___expr_470))) true))))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant8 key1 true true true true)
     (= (has_key container key1) true))
     (let ((result (get3 container key1)))
     (and
     (=> (= (distinct 1 0) true)
     (and
     (= (bool_eq6 result (w_get container (witness container key1))) true)
     (forall ((k Int))
     (=> (and (in_range2 k) (= (has_key container k) true))
     (= (= k key1) (= (witness container key1) (witness container k)))))))
     (dynamic_invariant9 result true false true true)))) :pattern ((get3
                                                                   container
                                                                   key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length1 container)
  true false true true) :pattern ((length1 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key1 Int))
     (=> (and (in_range2 key1) (= (has_key left key1) true))
     (and (= (has_key right key1) true)
     (= (bool_eq6 (get3 right key1) (get3 left key1)) true))))
     (forall ((key1 Int))
     (=> (and (in_range2 key1) (= (has_key right key1) true))
     (= (has_key left key1) true))))) :pattern ((oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key1 Int))
     (not (and (in_range2 key1) (= (has_key container key1) true))))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant8 key1 true true true true)
     (= (has_key container key1) true))
     (let ((result (witness container key1)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true true)))) :pattern ((witness container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant9
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

(define-fun dynamic_invariant10 ((temp___expr_539 Int)
  (temp___is_init_535 Bool) (temp___skip_constant_536 Bool)
  (temp___do_toplevel_537 Bool)
  (temp___do_typ_inv_538 Bool)) Bool (=>
                                     (or (= temp___is_init_535 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_539)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true true))) :pattern ((length2 container)) )))

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= (- 2147483648) (element_typeqtint1 i))
  (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq17 (element_type1 element_type1) Bool)

(declare-const dummy17 element_type1)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type1)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref2)) element_type1 
  (element_type__content2 a))

(define-fun dynamic_invariant11 ((temp___expr_532 Int)
  (temp___is_init_528 Bool) (temp___skip_constant_529 Bool)
  (temp___do_toplevel_530 Bool)
  (temp___do_typ_inv_531 Bool)) Bool (=>
                                     (or (= temp___is_init_528 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range9 temp___expr_532)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant10 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant11 (get container position) true false true true)) :pattern (
  (get container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 us_rep1))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k us_rep1))
     (and (= (has_key1 container k) true) (= (bool_eq1 k key1) true)))
     (= (has_key1 container key1) true))) :pattern ((has_key1 container key1)) ))))

(declare-fun witness1 (us_rep4 us_rep1) Int)

(declare-fun witness__function_guard1 (Int us_rep4 us_rep1) Bool)

(declare-fun w_get1 (us_rep4 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep4 Int) Bool)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq18 (element_type2 element_type2) Bool)

(declare-const dummy18 element_type2)

(declare-datatypes ((element_type__ref3 0))
(((element_type__refqtmk3 (element_type__content3 element_type2)))))
(define-fun element_type__ref_element_type__content__6__projection ((a element_type__ref3)) element_type2 
  (element_type__content3 a))

(define-fun dynamic_invariant12 ((temp___expr_562 Int)
  (temp___is_init_558 Bool) (temp___skip_constant_559 Bool)
  (temp___do_toplevel_560 Bool)
  (temp___do_typ_inv_561 Bool)) Bool (=>
                                     (or (= temp___is_init_558 true)
                                     (<= 1 2147483647)) (in_range10
                                     temp___expr_562)))

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 us_rep1))
  (! (=> (= (has_key1 container key1) true)
     (let ((result (get1 container key1)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get1 container (witness1 container key1)))
     (forall ((k us_rep1))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq1 k key1) true)
     (= (witness1 container key1) (witness1 container k)))))))
     (dynamic_invariant12 result true false true true)))) :pattern ((get1
                                                                    container
                                                                    key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant (length4 container)
  true false true true) :pattern ((length4 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq3 left right) true)
     (and
     (forall ((key1 us_rep1))
     (=> (= (has_key1 left key1) true)
     (and (= (has_key1 right key1) true)
     (= (get1 right key1) (get1 left key1)))))
     (forall ((key1 us_rep1))
     (=> (= (has_key1 right key1) true) (= (has_key1 left key1) true))))) :pattern (
  (oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty1 container) true)
     (forall ((key1 us_rep1)) (not (= (has_key1 container key1) true)))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness1 (us_rep4 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep4 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 us_rep1))
  (! (=> (= (has_key1 container key1) true)
     (let ((result (witness1 container key1)))
     (and (= (has_witness1 container result) true) (dynamic_invariant result
     true false true true)))) :pattern ((witness1 container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant12
     (w_get1 container witness2) true false true true)) :pattern ((w_get1
                                                                  container
                                                                  witness2)) ))))

(assert
;; defqtvc
 ;; File "a-cfhama.ads", line 671, characters 0-0
  (not true))
(check-sat)
