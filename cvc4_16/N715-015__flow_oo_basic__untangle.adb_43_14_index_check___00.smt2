;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun wibble (Int Bool) Int)

(declare-fun wibble__function_guard (Int Int Bool) Bool)

;; wibble__post_axiom
  (assert
  (forall ((n Int))
  (forall ((untangle__g Bool))
  (! (=> (and (dynamic_invariant n true true true true) (= untangle__g true))
     (let ((result (wibble n untangle__g)))
     (=> (wibble__function_guard result n untangle__g) (dynamic_invariant
     result true false true true)))) :pattern ((wibble n untangle__g)) ))))

;; wibble__def_axiom
  (assert
  (forall ((n Int))
  (forall ((untangle__g Bool))
  (! (=> (dynamic_invariant n true true true true)
     (= (wibble n untangle__g) n)) :pattern ((wibble n untangle__g)) ))))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (byte byte) Bool)

(declare-const dummy1 byte)

(declare-datatypes ((byte__ref 0))
(((byte__refqtmk (byte__content byte)))))
(define-fun byte__ref_byte__content__projection ((a byte__ref)) byte 
  (byte__content a))

(declare-fun to_rep (byte) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x byte)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__untangle__word_a__lo byte)(rec__untangle__word_a__hi byte)))))
(define-fun us_split_fields_rec__untangle__word_a__lo__projection ((a us_split_fields)) byte 
  (rec__untangle__word_a__lo a))

(define-fun us_split_fields_rec__untangle__word_a__hi__projection ((a us_split_fields)) byte 
  (rec__untangle__word_a__hi a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__untangle__word_a__lo (us_split_fields1 a))) 
                        (to_rep
                        (rec__untangle__word_a__lo (us_split_fields1 b))))
                        (= (to_rep
                           (rec__untangle__word_a__hi (us_split_fields1 a))) 
                        (to_rep
                        (rec__untangle__word_a__hi (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const untangle__word_a__lo__first__bit Int)

(declare-const untangle__word_a__lo__last__bit Int)

(declare-const untangle__word_a__lo__position Int)

;; untangle__word_a__lo__first__bit_axiom
  (assert (<= 0 untangle__word_a__lo__first__bit))

;; untangle__word_a__lo__last__bit_axiom
  (assert
  (< untangle__word_a__lo__first__bit untangle__word_a__lo__last__bit))

;; untangle__word_a__lo__position_axiom
  (assert (<= 0 untangle__word_a__lo__position))

(declare-const untangle__word_a__hi__first__bit Int)

(declare-const untangle__word_a__hi__last__bit Int)

(declare-const untangle__word_a__hi__position Int)

;; untangle__word_a__hi__first__bit_axiom
  (assert (<= 0 untangle__word_a__hi__first__bit))

;; untangle__word_a__hi__last__bit_axiom
  (assert
  (< untangle__word_a__hi__first__bit untangle__word_a__hi__last__bit))

;; untangle__word_a__hi__position_axiom
  (assert (<= 0 untangle__word_a__hi__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((word_a__ref 0))
(((word_a__refqtmk (word_a__content us_rep)))))
(define-fun word_a__ref_word_a__content__projection ((a word_a__ref)) us_rep 
  (word_a__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy3 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__untangle__thing__a Bool)(rec__untangle__thing__b (Array Int us_rep))(rec__untangle__thing__c Bool)))))
(define-fun us_split_fields_rec__untangle__thing__a__projection ((a us_split_fields2)) Bool 
  (rec__untangle__thing__a a))

(define-fun us_split_fields_rec__untangle__thing__b__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__untangle__thing__b a))

(define-fun us_split_fields_rec__untangle__thing__c__projection ((a us_split_fields2)) Bool 
  (rec__untangle__thing__c a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (ite (rec__untangle__thing__a
                                 (us_split_fields3 a)) 1 0) (ite (rec__untangle__thing__a
                                                                 (us_split_fields3
                                                                 b)) 1 0))
                         (= (bool_eq1
                            (rec__untangle__thing__b (us_split_fields3 a)) 1
                            10 (rec__untangle__thing__b (us_split_fields3 b))
                            1 10) true))
                         (= (ite (rec__untangle__thing__c
                                 (us_split_fields3 a)) 1 0) (ite (rec__untangle__thing__c
                                                                 (us_split_fields3
                                                                 b)) 1 0)))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const untangle__thing__a__first__bit Int)

(declare-const untangle__thing__a__last__bit Int)

(declare-const untangle__thing__a__position Int)

;; untangle__thing__a__first__bit_axiom
  (assert (<= 0 untangle__thing__a__first__bit))

;; untangle__thing__a__last__bit_axiom
  (assert (< untangle__thing__a__first__bit untangle__thing__a__last__bit))

;; untangle__thing__a__position_axiom
  (assert (<= 0 untangle__thing__a__position))

(declare-const untangle__thing__b__first__bit Int)

(declare-const untangle__thing__b__last__bit Int)

(declare-const untangle__thing__b__position Int)

;; untangle__thing__b__first__bit_axiom
  (assert (<= 0 untangle__thing__b__first__bit))

;; untangle__thing__b__last__bit_axiom
  (assert (< untangle__thing__b__first__bit untangle__thing__b__last__bit))

;; untangle__thing__b__position_axiom
  (assert (<= 0 untangle__thing__b__position))

(declare-const untangle__thing__c__first__bit Int)

(declare-const untangle__thing__c__last__bit Int)

(declare-const untangle__thing__c__position Int)

;; untangle__thing__c__first__bit_axiom
  (assert (<= 0 untangle__thing__c__first__bit))

;; untangle__thing__c__last__bit_axiom
  (assert (< untangle__thing__c__first__bit untangle__thing__c__last__bit))

;; untangle__thing__c__position_axiom
  (assert (<= 0 untangle__thing__c__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((thing__ref 0))
(((thing__refqtmk (thing__content us_rep1)))))
(define-fun thing__ref_thing__content__projection ((a thing__ref)) us_rep1 
  (thing__content a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__untangle__optional_thing__exists Bool)))))
(define-fun us_split_discrs_rec__untangle__optional_thing__exists__projection ((a us_split_discrs)) Bool 
  (rec__untangle__optional_thing__exists a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__untangle__optional_thing__t us_rep1)))))
(define-fun us_split_fields_rec__untangle__optional_thing__t__projection ((a us_split_fields4)) us_rep1 
  (rec__untangle__optional_thing__t a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun untangle__optional_thing__t__pred ((a us_rep2)) Bool (= (ite 
  (rec__untangle__optional_thing__exists (us_split_discrs1 a)) 1 0) 1))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (ite (rec__untangle__optional_thing__exists
                                 (us_split_discrs1 a)) 1 0) (ite (rec__untangle__optional_thing__exists
                                                                 (us_split_discrs1
                                                                 b)) 1 0))
                         (=> (untangle__optional_thing__t__pred a)
                         (= (bool_eq2
                            (rec__untangle__optional_thing__t
                            (us_split_fields5 a))
                            (rec__untangle__optional_thing__t
                            (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const untangle__optional_thing__exists__first__bit Int)

(declare-const untangle__optional_thing__exists__last__bit Int)

(declare-const untangle__optional_thing__exists__position Int)

;; untangle__optional_thing__exists__first__bit_axiom
  (assert (<= 0 untangle__optional_thing__exists__first__bit))

;; untangle__optional_thing__exists__last__bit_axiom
  (assert
  (< untangle__optional_thing__exists__first__bit untangle__optional_thing__exists__last__bit))

;; untangle__optional_thing__exists__position_axiom
  (assert (<= 0 untangle__optional_thing__exists__position))

(declare-const untangle__optional_thing__t__first__bit Int)

(declare-const untangle__optional_thing__t__last__bit Int)

(declare-const untangle__optional_thing__t__position Int)

;; untangle__optional_thing__t__first__bit_axiom
  (assert (<= 0 untangle__optional_thing__t__first__bit))

;; untangle__optional_thing__t__last__bit_axiom
  (assert
  (< untangle__optional_thing__t__first__bit untangle__optional_thing__t__last__bit))

;; untangle__optional_thing__t__position_axiom
  (assert (<= 0 untangle__optional_thing__t__position))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((optional_thing__ref 0))
(((optional_thing__refqtmk (optional_thing__content us_rep2)))))
(define-fun optional_thing__ref_optional_thing__content__projection ((a optional_thing__ref)) us_rep2 
  (optional_thing__content a))

(declare-const x__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_213 us_rep2)
  (temp___skip_top_level_214 Bool)) Bool (= (rec__untangle__optional_thing__exists
                                            (us_split_discrs1
                                            temp___expr_213)) (distinct 0 0)))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort tword_arrayD1 0)

(declare-fun tword_arrayD1qtint (tword_arrayD1) Int)

;; tword_arrayD1'axiom
  (assert
  (forall ((i tword_arrayD1))
  (and (<= 1 (tword_arrayD1qtint i)) (<= (tword_arrayD1qtint i) 10))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq6 (tword_arrayD1 tword_arrayD1) Bool)

(declare-const dummy6 tword_arrayD1)

(declare-datatypes ((tword_arrayD1__ref 0))
(((tword_arrayD1__refqtmk (tword_arrayD1__content tword_arrayD1)))))
(define-fun tword_arrayD1__ref_tword_arrayD1__content__projection ((a tword_arrayD1__ref)) tword_arrayD1 
  (tword_arrayD1__content a))

(define-fun dynamic_invariant1 ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool) (temp___do_typ_inv_159 Bool)) Bool true)

(assert
;; defqtvc
 ;; File "untangle.adb", line 38, characters 0-0
  (not
  (forall ((g Bool) (o byte))
  (=> (dynamic_invariant n true false true true)
  (=> (= (to_rep o) #x00)
  (let ((o1 n))
  (let ((temp___231 (wibble o1 g)))
  (=>
  (and (wibble__function_guard temp___231 o1 g)
  (and (dynamic_invariant temp___231 true false true true) (= temp___231 o1)))
  (<= 1 temp___231)))))))))
(check-sat)
