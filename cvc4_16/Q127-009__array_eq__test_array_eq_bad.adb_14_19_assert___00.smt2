;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__test_array_eq_bad__my_rec__f1 integer)(rec__test_array_eq_bad__my_rec__f2 integer)))))
(define-fun us_split_fields_rec__test_array_eq_bad__my_rec__f1__projection ((a us_split_fields)) integer 
  (rec__test_array_eq_bad__my_rec__f1 a))

(define-fun us_split_fields_rec__test_array_eq_bad__my_rec__f2__projection ((a us_split_fields)) integer 
  (rec__test_array_eq_bad__my_rec__f2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__test_array_eq_bad__my_rec__f1
                           (us_split_fields1 a))) (to_rep
                                                  (rec__test_array_eq_bad__my_rec__f1
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__test_array_eq_bad__my_rec__f2
                           (us_split_fields1 a))) (to_rep
                                                  (rec__test_array_eq_bad__my_rec__f2
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test_array_eq_bad__my_rec__f1__first__bit Int)

(declare-const test_array_eq_bad__my_rec__f1__last__bit Int)

(declare-const test_array_eq_bad__my_rec__f1__position Int)

;; test_array_eq_bad__my_rec__f1__first__bit_axiom
  (assert (<= 0 test_array_eq_bad__my_rec__f1__first__bit))

;; test_array_eq_bad__my_rec__f1__last__bit_axiom
  (assert
  (< test_array_eq_bad__my_rec__f1__first__bit test_array_eq_bad__my_rec__f1__last__bit))

;; test_array_eq_bad__my_rec__f1__position_axiom
  (assert (<= 0 test_array_eq_bad__my_rec__f1__position))

(declare-const test_array_eq_bad__my_rec__f2__first__bit Int)

(declare-const test_array_eq_bad__my_rec__f2__last__bit Int)

(declare-const test_array_eq_bad__my_rec__f2__position Int)

;; test_array_eq_bad__my_rec__f2__first__bit_axiom
  (assert (<= 0 test_array_eq_bad__my_rec__f2__first__bit))

;; test_array_eq_bad__my_rec__f2__last__bit_axiom
  (assert
  (< test_array_eq_bad__my_rec__f2__first__bit test_array_eq_bad__my_rec__f2__last__bit))

;; test_array_eq_bad__my_rec__f2__position_axiom
  (assert (<= 0 test_array_eq_bad__my_rec__f2__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((my_rec__ref 0))
(((my_rec__refqtmk (my_rec__content us_rep)))))
(define-fun my_rec__ref_my_rec__content__projection ((a my_rec__ref)) us_rep 
  (my_rec__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (user_eq1 (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (user_eq1 (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tmy_arrayD1 0)

(declare-fun tmy_arrayD1qtint (tmy_arrayD1) Int)

;; tmy_arrayD1'axiom
  (assert
  (forall ((i tmy_arrayD1))
  (and (<= 1 (tmy_arrayD1qtint i)) (<= (tmy_arrayD1qtint i) 2))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (tmy_arrayD1 tmy_arrayD1) Bool)

(declare-const dummy2 tmy_arrayD1)

(declare-datatypes ((tmy_arrayD1__ref 0))
(((tmy_arrayD1__refqtmk (tmy_arrayD1__content tmy_arrayD1)))))
(define-fun tmy_arrayD1__ref_tmy_arrayD1__content__projection ((a tmy_arrayD1__ref)) tmy_arrayD1 
  (tmy_arrayD1__content a))

(declare-fun test_array_eq_bad__a__aggregate_def (us_rep
  us_rep) (Array Int us_rep))

(declare-fun test_array_eq_bad__b__aggregate_def (us_rep
  us_rep) (Array Int us_rep))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (and
     (forall ((a1 us_rep) (b1 us_rep)) (oeq__function_guard (oeq a1 b1) a1
     b1)) (= (user_eq1 a b) (oeq a b))) :pattern ((user_eq1 a b)) )))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (= (= (oeq x y) true)
     (= (to_rep (rec__test_array_eq_bad__my_rec__f1 (us_split_fields1 x))) 
     (to_rep (rec__test_array_eq_bad__my_rec__f1 (us_split_fields1 y))))) :pattern (
  (oeq x y)) )))

;; def_axiom
  (assert
  (forall ((temp___201 us_rep) (temp___202 us_rep))
  (let ((temp___200 (test_array_eq_bad__a__aggregate_def temp___201
                    temp___202)))
  (and (= (select temp___200 1) temp___201)
  (= (select temp___200 2) temp___202)))))

;; def_axiom
  (assert
  (forall ((temp___205 us_rep) (temp___206 us_rep))
  (let ((temp___204 (test_array_eq_bad__b__aggregate_def temp___205
                    temp___206)))
  (and (= (select temp___204 1) temp___205)
  (= (select temp___204 2) temp___206)))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 2))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 3))

(declare-const rliteral3 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral3) 4))

(assert
;; defqtvc
 ;; File "test_array_eq_bad.adb", line 1, characters 0-0
  (not
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (=>
  (= a (test_array_eq_bad__a__aggregate_def
       (us_repqtmk (us_split_fieldsqtmk rliteral rliteral1))
       (us_repqtmk (us_split_fieldsqtmk rliteral2 rliteral3))))
  (=>
  (= b (test_array_eq_bad__b__aggregate_def
       (us_repqtmk (us_split_fieldsqtmk rliteral rliteral))
       (us_repqtmk (us_split_fieldsqtmk rliteral2 rliteral2))))
  (not (= (bool_eq1 a 1 2 b 1 2) true)))))))
(check-sat)
