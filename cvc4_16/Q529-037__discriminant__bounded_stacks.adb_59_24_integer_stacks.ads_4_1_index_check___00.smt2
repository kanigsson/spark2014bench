(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep1 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep2 ((x integer)) Int (integerqtint x))

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort element 0)

(declare-fun elementqtint (element) Int)

;; element'axiom
  (assert
  (forall ((i element))
  (and (<= (- 2147483648) (elementqtint i)) (<= (elementqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (element element) Bool)

(declare-const dummy3 element)

(declare-datatypes ((element__ref 0))
(((element__refqtmk (element__content element)))))
(define-fun element__ref_element__content__projection ((a element__ref)) element 
  (element__content a))

(define-fun to_rep3 ((x element)) Int (elementqtint x))

(declare-fun of_rep3 (Int) element)

;; inversion_axiom
  (assert
  (forall ((x element))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x element)) (! (in_range3 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int element))))))
(declare-fun slide ((Array Int element) Int Int) (Array Int element))

;; slide_eq
  (assert
  (forall ((a (Array Int element)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int element)) (a__first Int) (a__last Int)
  (b (Array Int element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep3 (select a temp___idx_154)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep3 (select a temp___idx_154)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int element))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int element) (elts a))

(define-fun of_array ((a (Array Int element)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((contents__ref 0))
(((contents__refqtmk (contents__content us_t)))))
(define-fun contents__ref_contents__content__projection ((a contents__ref)) us_t 
  (contents__content a))

(declare-datatypes ((t10s__ref 0))
(((t10s__refqtmk (t10s__content us_t)))))
(define-fun t10s__ref_t10s__content__projection ((a t10s__ref)) us_t 
  (t10s__content a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__integer_stacks__stack__capacity positive)))))
(define-fun us_split_discrs_rec__integer_stacks__stack__capacity__projection ((a us_split_discrs)) positive 
  (rec__integer_stacks__stack__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__integer_stacks__stack__values us_t)(rec__integer_stacks__stack__top natural)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__integer_stacks__stack__values__projection ((a us_split_fields)) us_t 
  (rec__integer_stacks__stack__values a))

(define-fun us_split_fields_rec__integer_stacks__stack__top__projection ((a us_split_fields)) natural 
  (rec__integer_stacks__stack__top a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__integer_stacks__stack__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__integer_stacks__stack__capacity
                                                  (us_split_discrs1 b))))
                        (and
                        (= (bool_eq1
                           (rec__integer_stacks__stack__values
                           (us_split_fields1 a))
                           (rec__integer_stacks__stack__values
                           (us_split_fields1 b))) true)
                        (= (to_rep
                           (rec__integer_stacks__stack__top
                           (us_split_fields1 a))) (to_rep
                                                  (rec__integer_stacks__stack__top
                                                  (us_split_fields1 b))))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(define-fun in_range4 ((rec__integer_stacks__stack__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__integer_stacks__stack__capacity1 
  (to_rep1 (rec__integer_stacks__stack__capacity a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const integer_stacks__stack__capacity__first__bit Int)

(declare-const integer_stacks__stack__capacity__last__bit Int)

(declare-const integer_stacks__stack__capacity__position Int)

;; integer_stacks__stack__capacity__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__capacity__first__bit))

;; integer_stacks__stack__capacity__last__bit_axiom
  (assert
  (< integer_stacks__stack__capacity__first__bit integer_stacks__stack__capacity__last__bit))

;; integer_stacks__stack__capacity__position_axiom
  (assert (<= 0 integer_stacks__stack__capacity__position))

(declare-const integer_stacks__stack__values__first__bit Int)

(declare-const integer_stacks__stack__values__last__bit Int)

(declare-const integer_stacks__stack__values__position Int)

;; integer_stacks__stack__values__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__values__first__bit))

;; integer_stacks__stack__values__last__bit_axiom
  (assert
  (< integer_stacks__stack__values__first__bit integer_stacks__stack__values__last__bit))

;; integer_stacks__stack__values__position_axiom
  (assert (<= 0 integer_stacks__stack__values__position))

(declare-const integer_stacks__stack__top__first__bit Int)

(declare-const integer_stacks__stack__top__last__bit Int)

(declare-const integer_stacks__stack__top__position Int)

;; integer_stacks__stack__top__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__top__first__bit))

;; integer_stacks__stack__top__last__bit_axiom
  (assert
  (< integer_stacks__stack__top__first__bit integer_stacks__stack__top__last__bit))

;; integer_stacks__stack__top__position_axiom
  (assert (<= 0 integer_stacks__stack__top__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ((stack__ref 0))
(((stack__refqtmk (stack__content us_rep)))))
(define-fun stack__ref_stack__content__projection ((a stack__ref)) us_rep 
  (stack__content a))

(declare-fun extent (us_rep) Int)

(declare-fun extent__function_guard (Int us_rep) Bool)

(declare-fun extent1 (Int us_rep) Int)

(declare-fun extent__function_guard1 (Int Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_185 us_rep)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)
  (temp___do_typ_inv_184 Bool)) Bool (let ((temp___186 (rec__integer_stacks__stack__capacity
                                                       (us_split_discrs1
                                                       temp___expr_185))))
                                     (and (dynamic_property 1
                                     (to_rep1 temp___186)
                                     (first1
                                     (rec__integer_stacks__stack__values
                                     (us_split_fields1 temp___expr_185)))
                                     (last1
                                     (rec__integer_stacks__stack__values
                                     (us_split_fields1 temp___expr_185))))
                                     (and
                                     (= (first1
                                        (rec__integer_stacks__stack__values
                                        (us_split_fields1 temp___expr_185))) 1)
                                     (= (last1
                                        (rec__integer_stacks__stack__values
                                        (us_split_fields1 temp___expr_185))) 
                                     (to_rep1 temp___186))))))

(declare-const this us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(define-fun in_range5 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq1 (Int us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool Int us_rep us_rep) Bool)

(declare-datatypes ((t21b__ref 0))
(((t21b__refqtmk (t21b__content us_t)))))
(define-fun t21b__ref_t21b__content__projection ((a t21b__ref)) us_t 
  (t21b__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__integer_stacks__stack__values1 us_t)(rec__integer_stacks__stack__top1 natural)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__integer_stacks__stack__values__2__projection ((a us_split_fields2)) us_t 
  (rec__integer_stacks__stack__values1 a))

(define-fun us_split_fields_rec__integer_stacks__stack__top__2__projection ((a us_split_fields2)) natural 
  (rec__integer_stacks__stack__top1 a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (us_private) us_private)

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (let ((temp___161 (rec__integer_stacks__stack__values1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array (to_array temp___161)
                                         (first1 temp___161)
                                         (last1 temp___161)))
                                         (rec__integer_stacks__stack__top1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___160 (rec__integer_stacks__stack__values
                                                           (us_split_fields1
                                                           r))))
                                         (of_array (to_array temp___160)
                                         (first1 temp___160)
                                         (last1 temp___160)))
                                         (rec__integer_stacks__stack__top
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__integer_stacks__stack__capacity
                            (us_split_discrs2 a))) (to_rep1
                                                   (rec__integer_stacks__stack__capacity
                                                   (us_split_discrs2 b))))
                         (and
                         (= (bool_eq1
                            (rec__integer_stacks__stack__values1
                            (us_split_fields3 a))
                            (rec__integer_stacks__stack__values1
                            (us_split_fields3 b))) true)
                         (= (to_rep
                            (rec__integer_stacks__stack__top1
                            (us_split_fields3 a))) (to_rep
                                                   (rec__integer_stacks__stack__top1
                                                   (us_split_fields3 b))))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const integer_stacks__stack__capacity__first__bit1 Int)

(declare-const integer_stacks__stack__capacity__last__bit1 Int)

(declare-const integer_stacks__stack__capacity__position1 Int)

;; integer_stacks__stack__capacity__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__capacity__first__bit1))

;; integer_stacks__stack__capacity__last__bit_axiom
  (assert
  (< integer_stacks__stack__capacity__first__bit1 integer_stacks__stack__capacity__last__bit1))

;; integer_stacks__stack__capacity__position_axiom
  (assert (<= 0 integer_stacks__stack__capacity__position1))

(declare-const integer_stacks__stack__values__first__bit1 Int)

(declare-const integer_stacks__stack__values__last__bit1 Int)

(declare-const integer_stacks__stack__values__position1 Int)

;; integer_stacks__stack__values__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__values__first__bit1))

;; integer_stacks__stack__values__last__bit_axiom
  (assert
  (< integer_stacks__stack__values__first__bit1 integer_stacks__stack__values__last__bit1))

;; integer_stacks__stack__values__position_axiom
  (assert (<= 0 integer_stacks__stack__values__position1))

(declare-const integer_stacks__stack__top__first__bit1 Int)

(declare-const integer_stacks__stack__top__last__bit1 Int)

(declare-const integer_stacks__stack__top__position1 Int)

;; integer_stacks__stack__top__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__top__first__bit1))

;; integer_stacks__stack__top__last__bit_axiom
  (assert
  (< integer_stacks__stack__top__first__bit1 integer_stacks__stack__top__last__bit1))

;; integer_stacks__stack__top__position_axiom
  (assert (<= 0 integer_stacks__stack__top__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((t19b__ref 0))
(((t19b__refqtmk (t19b__content us_rep1)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) us_rep1 
  (t19b__content a))

(declare-datatypes ((t18b__ref 0))
(((t18b__refqtmk (t18b__content us_t)))))
(define-fun t18b__ref_t18b__content__projection ((a t18b__ref)) us_t 
  (t18b__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__integer_stacks__stack__values2 us_t)(rec__integer_stacks__stack__top2 natural)(rec__ext__2 us_private)))))
(define-fun us_split_fields_rec__integer_stacks__stack__values__3__projection ((a us_split_fields4)) us_t 
  (rec__integer_stacks__stack__values2 a))

(define-fun us_split_fields_rec__integer_stacks__stack__top__3__projection ((a us_split_fields4)) natural 
  (rec__integer_stacks__stack__top2 a))

(define-fun us_split_fields_rec__ext____3__projection ((a us_split_fields4)) us_private 
  (rec__ext__2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)(attr__tag2 Int)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun us_rep_attr__tag__3__projection ((a us_rep2)) Int (attr__tag2 a))

(declare-fun hide_ext__1 (us_private) us_private)

(declare-fun extract__ext__1 (us_private) us_private)

(define-fun to_base1 ((a us_rep2)) us_rep (us_repqtmk (us_split_discrs3 a)
                                          (us_split_fieldsqtmk
                                          (let ((temp___163 (rec__integer_stacks__stack__values2
                                                            (us_split_fields5
                                                            a))))
                                          (of_array (to_array temp___163)
                                          (first1 temp___163)
                                          (last1 temp___163)))
                                          (rec__integer_stacks__stack__top2
                                          (us_split_fields5 a))
                                          (hide_ext__1
                                          (rec__ext__2 (us_split_fields5 a))))
                                          (attr__tag2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (us_repqtmk2 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk2
                                          (let ((temp___162 (rec__integer_stacks__stack__values
                                                            (us_split_fields1
                                                            r))))
                                          (of_array (to_array temp___162)
                                          (first1 temp___162)
                                          (last1 temp___162)))
                                          (rec__integer_stacks__stack__top
                                          (us_split_fields1 r))
                                          (extract__ext__1
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep1
                            (rec__integer_stacks__stack__capacity
                            (us_split_discrs3 a))) (to_rep1
                                                   (rec__integer_stacks__stack__capacity
                                                   (us_split_discrs3 b))))
                         (and
                         (= (bool_eq1
                            (rec__integer_stacks__stack__values2
                            (us_split_fields5 a))
                            (rec__integer_stacks__stack__values2
                            (us_split_fields5 b))) true)
                         (= (to_rep
                            (rec__integer_stacks__stack__top2
                            (us_split_fields5 a))) (to_rep
                                                   (rec__integer_stacks__stack__top2
                                                   (us_split_fields5 b))))))
                    true false))

(declare-const us_tag2 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const integer_stacks__stack__capacity__first__bit2 Int)

(declare-const integer_stacks__stack__capacity__last__bit2 Int)

(declare-const integer_stacks__stack__capacity__position2 Int)

;; integer_stacks__stack__capacity__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__capacity__first__bit2))

;; integer_stacks__stack__capacity__last__bit_axiom
  (assert
  (< integer_stacks__stack__capacity__first__bit2 integer_stacks__stack__capacity__last__bit2))

;; integer_stacks__stack__capacity__position_axiom
  (assert (<= 0 integer_stacks__stack__capacity__position2))

(declare-const integer_stacks__stack__values__first__bit2 Int)

(declare-const integer_stacks__stack__values__last__bit2 Int)

(declare-const integer_stacks__stack__values__position2 Int)

;; integer_stacks__stack__values__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__values__first__bit2))

;; integer_stacks__stack__values__last__bit_axiom
  (assert
  (< integer_stacks__stack__values__first__bit2 integer_stacks__stack__values__last__bit2))

;; integer_stacks__stack__values__position_axiom
  (assert (<= 0 integer_stacks__stack__values__position2))

(declare-const integer_stacks__stack__top__first__bit2 Int)

(declare-const integer_stacks__stack__top__last__bit2 Int)

(declare-const integer_stacks__stack__top__position2 Int)

;; integer_stacks__stack__top__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__top__first__bit2))

;; integer_stacks__stack__top__last__bit_axiom
  (assert
  (< integer_stacks__stack__top__first__bit2 integer_stacks__stack__top__last__bit2))

;; integer_stacks__stack__top__position_axiom
  (assert (<= 0 integer_stacks__stack__top__position2))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ((s16b__ref 0))
(((s16b__refqtmk (s16b__content us_rep2)))))
(define-fun s16b__ref_s16b__content__projection ((a s16b__ref)) us_rep2 
  (s16b__content a))

(declare-datatypes ((t28b__ref 0))
(((t28b__refqtmk (t28b__content us_t)))))
(define-fun t28b__ref_t28b__content__projection ((a t28b__ref)) us_t 
  (t28b__content a))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__integer_stacks__stack__values3 us_t)(rec__integer_stacks__stack__top3 natural)(rec__ext__3 us_private)))))
(define-fun us_split_fields_rec__integer_stacks__stack__values__4__projection ((a us_split_fields6)) us_t 
  (rec__integer_stacks__stack__values3 a))

(define-fun us_split_fields_rec__integer_stacks__stack__top__4__projection ((a us_split_fields6)) natural 
  (rec__integer_stacks__stack__top3 a))

(define-fun us_split_fields_rec__ext____4__projection ((a us_split_fields6)) us_private 
  (rec__ext__3 a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3
  (us_split_discrs4 us_split_discrs)(us_split_fields7 us_split_fields6)(attr__tag3 Int)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep3)) us_split_discrs 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun us_rep_attr__tag__4__projection ((a us_rep3)) Int (attr__tag3 a))

(declare-fun hide_ext__2 (us_private) us_private)

(declare-fun extract__ext__2 (us_private) us_private)

(define-fun to_base2 ((a us_rep3)) us_rep (us_repqtmk (us_split_discrs4 a)
                                          (us_split_fieldsqtmk
                                          (let ((temp___165 (rec__integer_stacks__stack__values3
                                                            (us_split_fields7
                                                            a))))
                                          (of_array (to_array temp___165)
                                          (first1 temp___165)
                                          (last1 temp___165)))
                                          (rec__integer_stacks__stack__top3
                                          (us_split_fields7 a))
                                          (hide_ext__2
                                          (rec__ext__3 (us_split_fields7 a))))
                                          (attr__tag3 a)))

(define-fun of_base2 ((r us_rep)) us_rep3 (us_repqtmk3 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk3
                                          (let ((temp___164 (rec__integer_stacks__stack__values
                                                            (us_split_fields1
                                                            r))))
                                          (of_array (to_array temp___164)
                                          (first1 temp___164)
                                          (last1 temp___164)))
                                          (rec__integer_stacks__stack__top
                                          (us_split_fields1 r))
                                          (extract__ext__2
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep1
                            (rec__integer_stacks__stack__capacity
                            (us_split_discrs4 a))) (to_rep1
                                                   (rec__integer_stacks__stack__capacity
                                                   (us_split_discrs4 b))))
                         (and
                         (= (bool_eq1
                            (rec__integer_stacks__stack__values3
                            (us_split_fields7 a))
                            (rec__integer_stacks__stack__values3
                            (us_split_fields7 b))) true)
                         (= (to_rep
                            (rec__integer_stacks__stack__top3
                            (us_split_fields7 a))) (to_rep
                                                   (rec__integer_stacks__stack__top3
                                                   (us_split_fields7 b))))))
                    true false))

(declare-const us_tag3 Int)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const integer_stacks__stack__capacity__first__bit3 Int)

(declare-const integer_stacks__stack__capacity__last__bit3 Int)

(declare-const integer_stacks__stack__capacity__position3 Int)

;; integer_stacks__stack__capacity__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__capacity__first__bit3))

;; integer_stacks__stack__capacity__last__bit_axiom
  (assert
  (< integer_stacks__stack__capacity__first__bit3 integer_stacks__stack__capacity__last__bit3))

;; integer_stacks__stack__capacity__position_axiom
  (assert (<= 0 integer_stacks__stack__capacity__position3))

(declare-const integer_stacks__stack__values__first__bit3 Int)

(declare-const integer_stacks__stack__values__last__bit3 Int)

(declare-const integer_stacks__stack__values__position3 Int)

;; integer_stacks__stack__values__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__values__first__bit3))

;; integer_stacks__stack__values__last__bit_axiom
  (assert
  (< integer_stacks__stack__values__first__bit3 integer_stacks__stack__values__last__bit3))

;; integer_stacks__stack__values__position_axiom
  (assert (<= 0 integer_stacks__stack__values__position3))

(declare-const integer_stacks__stack__top__first__bit3 Int)

(declare-const integer_stacks__stack__top__last__bit3 Int)

(declare-const integer_stacks__stack__top__position3 Int)

;; integer_stacks__stack__top__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__top__first__bit3))

;; integer_stacks__stack__top__last__bit_axiom
  (assert
  (< integer_stacks__stack__top__first__bit3 integer_stacks__stack__top__last__bit3))

;; integer_stacks__stack__top__position_axiom
  (assert (<= 0 integer_stacks__stack__top__position3))

(declare-fun user_eq8 (us_rep3 us_rep3) Bool)

(declare-const dummy8 us_rep3)

(declare-datatypes ((s27b__ref 0))
(((s27b__refqtmk (s27b__content us_rep3)))))
(define-fun s27b__ref_s27b__content__projection ((a s27b__ref)) us_rep3 
  (s27b__content a))

(declare-datatypes ((t26b__ref 0))
(((t26b__refqtmk (t26b__content us_t)))))
(define-fun t26b__ref_t26b__content__projection ((a t26b__ref)) us_t 
  (t26b__content a))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4
  (rec__integer_stacks__stack__values4 us_t)(rec__integer_stacks__stack__top4 natural)(rec__ext__4 us_private)))))
(define-fun us_split_fields_rec__integer_stacks__stack__values__5__projection ((a us_split_fields8)) us_t 
  (rec__integer_stacks__stack__values4 a))

(define-fun us_split_fields_rec__integer_stacks__stack__top__5__projection ((a us_split_fields8)) natural 
  (rec__integer_stacks__stack__top4 a))

(define-fun us_split_fields_rec__ext____5__projection ((a us_split_fields8)) us_private 
  (rec__ext__4 a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk4
  (us_split_discrs5 us_split_discrs)(us_split_fields9 us_split_fields8)(attr__tag4 Int)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep4)) us_split_discrs 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun us_rep_attr__tag__5__projection ((a us_rep4)) Int (attr__tag4 a))

(declare-fun hide_ext__3 (us_private) us_private)

(declare-fun extract__ext__3 (us_private) us_private)

(define-fun to_base3 ((a us_rep4)) us_rep (us_repqtmk (us_split_discrs5 a)
                                          (us_split_fieldsqtmk
                                          (let ((temp___167 (rec__integer_stacks__stack__values4
                                                            (us_split_fields9
                                                            a))))
                                          (of_array (to_array temp___167)
                                          (first1 temp___167)
                                          (last1 temp___167)))
                                          (rec__integer_stacks__stack__top4
                                          (us_split_fields9 a))
                                          (hide_ext__3
                                          (rec__ext__4 (us_split_fields9 a))))
                                          (attr__tag4 a)))

(define-fun of_base3 ((r us_rep)) us_rep4 (us_repqtmk4 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk4
                                          (let ((temp___166 (rec__integer_stacks__stack__values
                                                            (us_split_fields1
                                                            r))))
                                          (of_array (to_array temp___166)
                                          (first1 temp___166)
                                          (last1 temp___166)))
                                          (rec__integer_stacks__stack__top
                                          (us_split_fields1 r))
                                          (extract__ext__3
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep1
                            (rec__integer_stacks__stack__capacity
                            (us_split_discrs5 a))) (to_rep1
                                                   (rec__integer_stacks__stack__capacity
                                                   (us_split_discrs5 b))))
                         (and
                         (= (bool_eq1
                            (rec__integer_stacks__stack__values4
                            (us_split_fields9 a))
                            (rec__integer_stacks__stack__values4
                            (us_split_fields9 b))) true)
                         (= (to_rep
                            (rec__integer_stacks__stack__top4
                            (us_split_fields9 a))) (to_rep
                                                   (rec__integer_stacks__stack__top4
                                                   (us_split_fields9 b))))))
                    true false))

(declare-const us_tag4 Int)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const integer_stacks__stack__capacity__first__bit4 Int)

(declare-const integer_stacks__stack__capacity__last__bit4 Int)

(declare-const integer_stacks__stack__capacity__position4 Int)

;; integer_stacks__stack__capacity__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__capacity__first__bit4))

;; integer_stacks__stack__capacity__last__bit_axiom
  (assert
  (< integer_stacks__stack__capacity__first__bit4 integer_stacks__stack__capacity__last__bit4))

;; integer_stacks__stack__capacity__position_axiom
  (assert (<= 0 integer_stacks__stack__capacity__position4))

(declare-const integer_stacks__stack__values__first__bit4 Int)

(declare-const integer_stacks__stack__values__last__bit4 Int)

(declare-const integer_stacks__stack__values__position4 Int)

;; integer_stacks__stack__values__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__values__first__bit4))

;; integer_stacks__stack__values__last__bit_axiom
  (assert
  (< integer_stacks__stack__values__first__bit4 integer_stacks__stack__values__last__bit4))

;; integer_stacks__stack__values__position_axiom
  (assert (<= 0 integer_stacks__stack__values__position4))

(declare-const integer_stacks__stack__top__first__bit4 Int)

(declare-const integer_stacks__stack__top__last__bit4 Int)

(declare-const integer_stacks__stack__top__position4 Int)

;; integer_stacks__stack__top__first__bit_axiom
  (assert (<= 0 integer_stacks__stack__top__first__bit4))

;; integer_stacks__stack__top__last__bit_axiom
  (assert
  (< integer_stacks__stack__top__first__bit4 integer_stacks__stack__top__last__bit4))

;; integer_stacks__stack__top__position_axiom
  (assert (<= 0 integer_stacks__stack__top__position4))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-const dummy9 us_rep4)

(declare-datatypes ((s25b__ref 0))
(((s25b__refqtmk (s25b__content us_rep4)))))
(define-fun s25b__ref_s25b__content__projection ((a s25b__ref)) us_rep4 
  (s25b__content a))

;; oeq__post_axiom
  (assert true)

;; oeq__post__dispatch_axiom
  (assert true)

;; integer_stacks__stack__compat_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (oeq__function_guard1 (oeq1 us_tag left right) us_tag left right)
     (and
     (forall ((left1 us_rep) (right1 us_rep)) (oeq__function_guard
     (oeq left1 right1) left1 right1))
     (= (ite (oeq left right) 1 0) (ite (oeq1 us_tag left right) 1 0)))) :pattern (
  (oeq1 us_tag left right)) )))

;; integer_stacks__reset__S16b__compat_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (oeq__function_guard1 (oeq1 us_tag2 left right) us_tag2 left right)
     (and
     (forall ((left1 us_rep) (right1 us_rep)) (oeq__function_guard
     (oeq left1 right1) left1 right1))
     (= (ite (oeq left right) 1 0) (ite (oeq1 us_tag2 left right) 1 0)))) :pattern (
  (oeq1 us_tag2 left right)) )))

;; integer_stacks__reset__T19b__compat_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (oeq__function_guard1 (oeq1 us_tag1 left right) us_tag1 left right)
     (and
     (forall ((left1 us_rep) (right1 us_rep)) (oeq__function_guard
     (oeq left1 right1) left1 right1))
     (= (ite (oeq left right) 1 0) (ite (oeq1 us_tag1 left right) 1 0)))) :pattern (
  (oeq1 us_tag1 left right)) )))

;; integer_stacks__Oeq__S25b__compat_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (oeq__function_guard1 (oeq1 us_tag4 left right) us_tag4 left right)
     (and
     (forall ((left1 us_rep) (right1 us_rep)) (oeq__function_guard
     (oeq left1 right1) left1 right1))
     (= (ite (oeq left right) 1 0) (ite (oeq1 us_tag4 left right) 1 0)))) :pattern (
  (oeq1 us_tag4 left right)) )))

;; integer_stacks__Oeq__S27b__compat_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (=> (oeq__function_guard1 (oeq1 us_tag3 left right) us_tag3 left right)
     (and
     (forall ((left1 us_rep) (right1 us_rep)) (oeq__function_guard
     (oeq left1 right1) left1 right1))
     (= (ite (oeq left right) 1 0) (ite (oeq1 us_tag3 left right) 1 0)))) :pattern (
  (oeq1 us_tag3 left right)) )))

;; extent__post_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (dynamic_invariant this1 true true true true)
     (let ((result (extent this1)))
     (=> (extent__function_guard result this1) (dynamic_invariant1 result
     true false true true)))) :pattern ((extent this1)) )))

;; extent__post__dispatch_axiom
  (assert
  (forall ((attr__tag5 Int))
  (forall ((this1 us_rep))
  (! (=> (dynamic_invariant this1 true true true true)
     (let ((result (extent1 attr__tag5 this1)))
     (=> (extent__function_guard1 result attr__tag5 this1)
     (dynamic_invariant1 result true false true true)))) :pattern ((extent1
                                                                   attr__tag5
                                                                   this1)) ))))

;; integer_stacks__stack__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (extent__function_guard1 (extent1 us_tag this1) us_tag this1)
     (and
     (forall ((this2 us_rep)) (extent__function_guard (extent this2) this2))
     (= (extent this1) (extent1 us_tag this1)))) :pattern ((extent1 us_tag
                                                           this1)) )))

;; integer_stacks__reset__S16b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (extent__function_guard1 (extent1 us_tag2 this1) us_tag2 this1)
     (and
     (forall ((this2 us_rep)) (extent__function_guard (extent this2) this2))
     (= (extent this1) (extent1 us_tag2 this1)))) :pattern ((extent1 
                                                            us_tag2 this1)) )))

;; integer_stacks__reset__T19b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (extent__function_guard1 (extent1 us_tag1 this1) us_tag1 this1)
     (and
     (forall ((this2 us_rep)) (extent__function_guard (extent this2) this2))
     (= (extent this1) (extent1 us_tag1 this1)))) :pattern ((extent1 
                                                            us_tag1 this1)) )))

;; integer_stacks__Oeq__S25b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (extent__function_guard1 (extent1 us_tag4 this1) us_tag4 this1)
     (and
     (forall ((this2 us_rep)) (extent__function_guard (extent this2) this2))
     (= (extent this1) (extent1 us_tag4 this1)))) :pattern ((extent1 
                                                            us_tag4 this1)) )))

;; integer_stacks__Oeq__S27b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (extent__function_guard1 (extent1 us_tag3 this1) us_tag3 this1)
     (and
     (forall ((this2 us_rep)) (extent__function_guard (extent this2) this2))
     (= (extent this1) (extent1 us_tag3 this1)))) :pattern ((extent1 
                                                            us_tag3 this1)) )))

;; extent__def_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (dynamic_invariant this1 true true true true)
     (= (extent this1) (to_rep
                       (rec__integer_stacks__stack__top
                       (us_split_fields1 this1))))) :pattern ((extent this1)) )))

(declare-fun empty (us_rep) Bool)

(declare-fun empty__function_guard (Bool us_rep) Bool)

(declare-fun empty1 (Int us_rep) Bool)

(declare-fun empty__function_guard1 (Bool Int us_rep) Bool)

;; empty__post_axiom
  (assert true)

;; empty__post__dispatch_axiom
  (assert true)

;; integer_stacks__stack__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (empty__function_guard1 (empty1 us_tag this1) us_tag this1)
     (and
     (forall ((this2 us_rep)) (empty__function_guard (empty this2) this2))
     (= (ite (empty this1) 1 0) (ite (empty1 us_tag this1) 1 0)))) :pattern (
  (empty1 us_tag this1)) )))

;; integer_stacks__reset__S16b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (empty__function_guard1 (empty1 us_tag2 this1) us_tag2 this1)
     (and
     (forall ((this2 us_rep)) (empty__function_guard (empty this2) this2))
     (= (ite (empty this1) 1 0) (ite (empty1 us_tag2 this1) 1 0)))) :pattern (
  (empty1 us_tag2 this1)) )))

;; integer_stacks__reset__T19b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (empty__function_guard1 (empty1 us_tag1 this1) us_tag1 this1)
     (and
     (forall ((this2 us_rep)) (empty__function_guard (empty this2) this2))
     (= (ite (empty this1) 1 0) (ite (empty1 us_tag1 this1) 1 0)))) :pattern (
  (empty1 us_tag1 this1)) )))

;; integer_stacks__Oeq__S25b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (empty__function_guard1 (empty1 us_tag4 this1) us_tag4 this1)
     (and
     (forall ((this2 us_rep)) (empty__function_guard (empty this2) this2))
     (= (ite (empty this1) 1 0) (ite (empty1 us_tag4 this1) 1 0)))) :pattern (
  (empty1 us_tag4 this1)) )))

;; integer_stacks__Oeq__S27b__compat_axiom
  (assert
  (forall ((this1 us_rep))
  (! (=> (empty__function_guard1 (empty1 us_tag3 this1) us_tag3 this1)
     (and
     (forall ((this2 us_rep)) (empty__function_guard (empty this2) this2))
     (= (ite (empty this1) 1 0) (ite (empty1 us_tag3 this1) 1 0)))) :pattern (
  (empty1 us_tag3 this1)) )))

;; empty__def_axiom
  (assert
  (forall ((this1 us_rep))
  (! (= (= (empty this1) true)
     (= (to_rep (rec__integer_stacks__stack__top (us_split_fields1 this1))) 0)) :pattern (
  (empty this1)) )))

(define-fun dynamic_invariant4 ((temp___expr_179 us_t)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (=>
                                     (not (= temp___skip_constant_176 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_179)
                                     (last1 temp___expr_179))))

(define-fun dynamic_invariant5 ((temp___expr_172 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_172)))

(declare-datatypes ((t12s__ref 0))
(((t12s__refqtmk (t12s__content us_t)))))
(define-fun t12s__ref_t12s__content__projection ((a t12s__ref)) us_t 
  (t12s__content a))

(declare-fun temp_____aggregate_def_352 (Int Int Int) us_t)

(declare-const rliteral element)

;; rliteral_axiom
  (assert (= (elementqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___354 Int) (temp___355 Int) (temp___356 Int))
  (let ((temp___353 (temp_____aggregate_def_352 temp___354 temp___355
                    temp___356)))
  (=> (dynamic_invariant5 temp___354 true true true true)
  (and
  (=> (dynamic_property 1 2147483647 temp___355 temp___356)
  (and (= (first1 temp___353) temp___355) (= (last1 temp___353) temp___356)))
  (forall ((temp___357 Int))
  (= (select (to_array temp___353) temp___357) rliteral)))))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (and
     (forall ((a1 us_rep2) (b1 us_rep2)) (oeq__function_guard
     (oeq (to_base1 a1) (to_base1 b1)) (to_base1 a1) (to_base1 b1)))
     (= (user_eq7 a b) (oeq (to_base1 a) (to_base1 b)))) :pattern ((user_eq7
                                                                   a b)) )))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (and
     (forall ((a1 us_rep1) (b1 us_rep1)) (oeq__function_guard
     (oeq (to_base a1) (to_base b1)) (to_base a1) (to_base b1)))
     (= (user_eq6 a b) (oeq (to_base a) (to_base b)))) :pattern ((user_eq6 a
                                                                 b)) )))

(declare-const left us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (and
     (forall ((a1 us_rep4) (b1 us_rep4)) (oeq__function_guard
     (oeq (to_base3 a1) (to_base3 b1)) (to_base3 a1) (to_base3 b1)))
     (= (user_eq9 a b) (oeq (to_base3 a) (to_base3 b)))) :pattern ((user_eq9
                                                                   a b)) )))

(define-fun dynamic_invariant6 ((temp___expr_366 us_rep4)
  (temp___is_init_362 Bool) (temp___skip_constant_363 Bool)
  (temp___do_toplevel_364 Bool)
  (temp___do_typ_inv_365 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_363 true))
                                     (in_range4
                                     (to_rep1
                                     (rec__integer_stacks__stack__capacity
                                     (us_split_discrs1 left)))
                                     (us_split_discrs1
                                     (to_base3 temp___expr_366))))
                                     (and (dynamic_property 1
                                     (to_rep1
                                     (rec__integer_stacks__stack__capacity
                                     (us_split_discrs1 left)))
                                     (first1
                                     (rec__integer_stacks__stack__values4
                                     (us_split_fields9 temp___expr_366)))
                                     (last1
                                     (rec__integer_stacks__stack__values4
                                     (us_split_fields9 temp___expr_366))))
                                     (and
                                     (= (first1
                                        (rec__integer_stacks__stack__values4
                                        (us_split_fields9 temp___expr_366))) 1)
                                     (= (last1
                                        (rec__integer_stacks__stack__values4
                                        (us_split_fields9 temp___expr_366))) 
                                     (to_rep1
                                     (rec__integer_stacks__stack__capacity
                                     (us_split_discrs1 left))))))))

;; temp___result_374'def
  (assert
  (forall ((temp___373 us_rep4)) (empty__function_guard
  (empty (to_base3 temp___373)) (to_base3 temp___373))))

(define-fun default_initial_assumption ((temp___expr_369 us_rep4)
  (temp___skip_top_level_370 Bool)) Bool (and
                                         (and
                                         (= (attr__tag4 temp___expr_369) 
                                         us_tag4)
                                         (and
                                         (= (to_rep1
                                            (rec__integer_stacks__stack__capacity
                                            (us_split_discrs5
                                            temp___expr_369))) (to_rep1
                                                               (rec__integer_stacks__stack__capacity
                                                               (us_split_discrs1
                                                               left))))
                                         (and
                                         (= (rec__integer_stacks__stack__values4
                                            (us_split_fields9
                                            temp___expr_369)) (let ((temp___372 
                                                              (temp_____aggregate_def_352
                                                              0 1
                                                              (to_rep1
                                                              (rec__integer_stacks__stack__capacity
                                                              (us_split_discrs5
                                                              temp___expr_369))))))
                                                              (of_array
                                                              (to_array
                                                              temp___372)
                                                              (first1
                                                              temp___372)
                                                              (last1
                                                              temp___372))))
                                         (= (to_rep
                                            (rec__integer_stacks__stack__top4
                                            (us_split_fields9
                                            temp___expr_369))) 0))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_370 true))
                                         (= (empty
                                            (to_base3 temp___expr_369)) true))))

(declare-const right us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (and
     (forall ((a1 us_rep3) (b1 us_rep3)) (oeq__function_guard
     (oeq (to_base2 a1) (to_base2 b1)) (to_base2 a1) (to_base2 b1)))
     (= (user_eq8 a b) (oeq (to_base2 a) (to_base2 b)))) :pattern ((user_eq8
                                                                   a b)) )))

(define-fun dynamic_invariant7 ((temp___expr_346 us_rep3)
  (temp___is_init_342 Bool) (temp___skip_constant_343 Bool)
  (temp___do_toplevel_344 Bool)
  (temp___do_typ_inv_345 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_343 true))
                                     (in_range4
                                     (to_rep1
                                     (rec__integer_stacks__stack__capacity
                                     (us_split_discrs1 right)))
                                     (us_split_discrs1
                                     (to_base2 temp___expr_346))))
                                     (and (dynamic_property 1
                                     (to_rep1
                                     (rec__integer_stacks__stack__capacity
                                     (us_split_discrs1 right)))
                                     (first1
                                     (rec__integer_stacks__stack__values3
                                     (us_split_fields7 temp___expr_346)))
                                     (last1
                                     (rec__integer_stacks__stack__values3
                                     (us_split_fields7 temp___expr_346))))
                                     (and
                                     (= (first1
                                        (rec__integer_stacks__stack__values3
                                        (us_split_fields7 temp___expr_346))) 1)
                                     (= (last1
                                        (rec__integer_stacks__stack__values3
                                        (us_split_fields7 temp___expr_346))) 
                                     (to_rep1
                                     (rec__integer_stacks__stack__capacity
                                     (us_split_discrs1 right))))))))

;; temp___result_360'def
  (assert
  (forall ((temp___359 us_rep3)) (empty__function_guard
  (empty (to_base2 temp___359)) (to_base2 temp___359))))

(define-fun default_initial_assumption1 ((temp___expr_349 us_rep3)
  (temp___skip_top_level_350 Bool)) Bool (and
                                         (and
                                         (= (attr__tag3 temp___expr_349) 
                                         us_tag3)
                                         (and
                                         (= (to_rep1
                                            (rec__integer_stacks__stack__capacity
                                            (us_split_discrs4
                                            temp___expr_349))) (to_rep1
                                                               (rec__integer_stacks__stack__capacity
                                                               (us_split_discrs1
                                                               right))))
                                         (and
                                         (= (rec__integer_stacks__stack__values3
                                            (us_split_fields7
                                            temp___expr_349)) (let ((temp___358 
                                                              (temp_____aggregate_def_352
                                                              0 1
                                                              (to_rep1
                                                              (rec__integer_stacks__stack__capacity
                                                              (us_split_discrs4
                                                              temp___expr_349))))))
                                                              (of_array
                                                              (to_array
                                                              temp___358)
                                                              (first1
                                                              temp___358)
                                                              (last1
                                                              temp___358))))
                                         (= (to_rep
                                            (rec__integer_stacks__stack__top3
                                            (us_split_fields7
                                            temp___expr_349))) 0))))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_350 true))
                                         (= (empty
                                            (to_base2 temp___expr_349)) true))))

(assert
;; defqtvc
 ;; File "bounded_stacks.ads", line 38, characters 0-0
  (not
  (=> (dynamic_invariant this true false true true)
  (=> (extent__function_guard (extent this) this)
  (=>
  (let ((temp___463 (extent this)))
  (and (<= 1 temp___463)
  (<= temp___463 (to_rep1
                 (rec__integer_stacks__stack__capacity
                 (us_split_discrs1 this))))))
  (forall ((temp___459 Int))
  (=>
  (= (to_rep (rec__integer_stacks__stack__top (us_split_fields1 this))) temp___459)
  (<= (first1 (rec__integer_stacks__stack__values (us_split_fields1 this))) temp___459))))))))
(check-sat)
(exit)
