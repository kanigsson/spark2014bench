;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__test_dic__nested__p3__x Bool)))))
(define-fun us_split_discrs_rec__test_dic__nested__p3__x__projection ((a us_split_discrs)) Bool 
  (rec__test_dic__nested__p3__x a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__test_dic__nested__p3__c integer)))))
(define-fun us_split_fields_rec__test_dic__nested__p3__c__projection ((a us_split_fields)) integer 
  (rec__test_dic__nested__p3__c a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__test_dic__nested__p3__x
                                (us_split_discrs1 a)) 1 0) (ite (rec__test_dic__nested__p3__x
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (= (to_rep
                           (rec__test_dic__nested__p3__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__test_dic__nested__p3__c
                                                  (us_split_fields1 b)))))
                   true false))

(define-fun in_range2 ((rec__test_dic__nested__p3__x1 Bool)
  (a us_split_discrs)) Bool (= rec__test_dic__nested__p3__x1 (rec__test_dic__nested__p3__x
                                                             a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test_dic__nested__p3__x__first__bit Int)

(declare-const test_dic__nested__p3__x__last__bit Int)

(declare-const test_dic__nested__p3__x__position Int)

;; test_dic__nested__p3__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p3__x__first__bit))

;; test_dic__nested__p3__x__last__bit_axiom
  (assert
  (< test_dic__nested__p3__x__first__bit test_dic__nested__p3__x__last__bit))

;; test_dic__nested__p3__x__position_axiom
  (assert (<= 0 test_dic__nested__p3__x__position))

(declare-const test_dic__nested__p3__c__first__bit Int)

(declare-const test_dic__nested__p3__c__last__bit Int)

(declare-const test_dic__nested__p3__c__position Int)

;; test_dic__nested__p3__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p3__c__first__bit))

;; test_dic__nested__p3__c__last__bit_axiom
  (assert
  (< test_dic__nested__p3__c__first__bit test_dic__nested__p3__c__last__bit))

;; test_dic__nested__p3__c__position_axiom
  (assert (<= 0 test_dic__nested__p3__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((p3__ref 0))
(((p3__refqtmk (p3__content us_rep)))))
(define-fun p3__ref_p3__content__projection ((a p3__ref)) us_rep (p3__content
                                                                 a))

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1 (rec__test_dic__nested__p4__x Bool)))))
(define-fun us_split_discrs_rec__test_dic__nested__p4__x__projection ((a us_split_discrs2)) Bool 
  (rec__test_dic__nested__p4__x a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__4__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__test_dic__nested__p4__c integer)))))
(define-fun us_split_fields_rec__test_dic__nested__p4__c__projection ((a us_split_fields2)) integer 
  (rec__test_dic__nested__p4__c a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (ite (rec__test_dic__nested__p4__x
                                 (us_split_discrs3 a)) 1 0) (ite (rec__test_dic__nested__p4__x
                                                                 (us_split_discrs3
                                                                 b)) 1 0))
                         (= (to_rep
                            (rec__test_dic__nested__p4__c
                            (us_split_fields3 a))) (to_rep
                                                   (rec__test_dic__nested__p4__c
                                                   (us_split_fields3 b)))))
                    true false))

(define-fun in_range3 ((rec__test_dic__nested__p4__x1 Bool)
  (a us_split_discrs2)) Bool (= rec__test_dic__nested__p4__x1 (rec__test_dic__nested__p4__x
                                                              a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const test_dic__nested__p4__x__first__bit Int)

(declare-const test_dic__nested__p4__x__last__bit Int)

(declare-const test_dic__nested__p4__x__position Int)

;; test_dic__nested__p4__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p4__x__first__bit))

;; test_dic__nested__p4__x__last__bit_axiom
  (assert
  (< test_dic__nested__p4__x__first__bit test_dic__nested__p4__x__last__bit))

;; test_dic__nested__p4__x__position_axiom
  (assert (<= 0 test_dic__nested__p4__x__position))

(declare-const test_dic__nested__p4__c__first__bit Int)

(declare-const test_dic__nested__p4__c__last__bit Int)

(declare-const test_dic__nested__p4__c__position Int)

;; test_dic__nested__p4__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p4__c__first__bit))

;; test_dic__nested__p4__c__last__bit_axiom
  (assert
  (< test_dic__nested__p4__c__first__bit test_dic__nested__p4__c__last__bit))

;; test_dic__nested__p4__c__position_axiom
  (assert (<= 0 test_dic__nested__p4__c__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((p4__ref 0))
(((p4__refqtmk (p4__content us_rep1)))))
(define-fun p4__ref_p4__content__projection ((a p4__ref)) us_rep1 (p4__content
                                                                  a))

(declare-datatypes ((us_split_discrs4 0))
(((us_split_discrsqtmk2 (rec__test_dic__nested__p5__x Bool)))))
(define-fun us_split_discrs_rec__test_dic__nested__p5__x__projection ((a us_split_discrs4)) Bool 
  (rec__test_dic__nested__p5__x a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((us_split_discrs__refqtmk2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___split_discrs__content__5__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__test_dic__nested__p5__c integer)))))
(define-fun us_split_fields_rec__test_dic__nested__p5__c__projection ((a us_split_fields4)) integer 
  (rec__test_dic__nested__p5__c a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs5 us_split_discrs4)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep2)) us_split_discrs4 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (ite (rec__test_dic__nested__p5__x
                                 (us_split_discrs5 a)) 1 0) (ite (rec__test_dic__nested__p5__x
                                                                 (us_split_discrs5
                                                                 b)) 1 0))
                         (= (to_rep
                            (rec__test_dic__nested__p5__c
                            (us_split_fields5 a))) (to_rep
                                                   (rec__test_dic__nested__p5__c
                                                   (us_split_fields5 b)))))
                    true false))

(define-fun in_range4 ((rec__test_dic__nested__p5__x1 Bool)
  (a us_split_discrs4)) Bool (= rec__test_dic__nested__p5__x1 (rec__test_dic__nested__p5__x
                                                              a)))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const test_dic__nested__p5__x__first__bit Int)

(declare-const test_dic__nested__p5__x__last__bit Int)

(declare-const test_dic__nested__p5__x__position Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit test_dic__nested__p5__x__last__bit))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position))

(declare-const test_dic__nested__p5__c__first__bit Int)

(declare-const test_dic__nested__p5__c__last__bit Int)

(declare-const test_dic__nested__p5__c__position Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit test_dic__nested__p5__c__last__bit))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-const dummy3 us_rep2)

(declare-datatypes ((p5__ref 0))
(((p5__refqtmk (p5__content us_rep2)))))
(define-fun p5__ref_p5__content__projection ((a p5__ref)) us_rep2 (p5__content
                                                                  a))

(declare-fun id (us_rep2) us_rep2)

(declare-fun id__function_guard (us_rep2 us_rep2) Bool)

(declare-datatypes ((us_split_discrs6 0))
(((us_split_discrsqtmk3 (rec__test_dic__nested__p1__x Bool)))))
(define-fun us_split_discrs_rec__test_dic__nested__p1__x__projection ((a us_split_discrs6)) Bool 
  (rec__test_dic__nested__p1__x a))

(declare-datatypes ((us_split_discrs__ref3 0))
(((us_split_discrs__refqtmk3 (us_split_discrs__content3 us_split_discrs6)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref3)) us_split_discrs6 
  (us_split_discrs__content3 a))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3 (rec__test_dic__nested__p1__c integer)))))
(define-fun us_split_fields_rec__test_dic__nested__p1__c__projection ((a us_split_fields6)) integer 
  (rec__test_dic__nested__p1__c a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk3
  (us_split_discrs7 us_split_discrs6)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_discrs__projection ((a us_rep3)) us_split_discrs6 
  (us_split_discrs7 a))

(define-fun us_rep___split_fields__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (ite (rec__test_dic__nested__p1__x
                                 (us_split_discrs7 a)) 1 0) (ite (rec__test_dic__nested__p1__x
                                                                 (us_split_discrs7
                                                                 b)) 1 0))
                         (= (to_rep
                            (rec__test_dic__nested__p1__c
                            (us_split_fields7 a))) (to_rep
                                                   (rec__test_dic__nested__p1__c
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const test_dic__nested__p1__x__first__bit Int)

(declare-const test_dic__nested__p1__x__last__bit Int)

(declare-const test_dic__nested__p1__x__position Int)

;; test_dic__nested__p1__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p1__x__first__bit))

;; test_dic__nested__p1__x__last__bit_axiom
  (assert
  (< test_dic__nested__p1__x__first__bit test_dic__nested__p1__x__last__bit))

;; test_dic__nested__p1__x__position_axiom
  (assert (<= 0 test_dic__nested__p1__x__position))

(declare-const test_dic__nested__p1__c__first__bit Int)

(declare-const test_dic__nested__p1__c__last__bit Int)

(declare-const test_dic__nested__p1__c__position Int)

;; test_dic__nested__p1__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p1__c__first__bit))

;; test_dic__nested__p1__c__last__bit_axiom
  (assert
  (< test_dic__nested__p1__c__first__bit test_dic__nested__p1__c__last__bit))

;; test_dic__nested__p1__c__position_axiom
  (assert (<= 0 test_dic__nested__p1__c__position))

(declare-fun user_eq4 (us_rep3 us_rep3) Bool)

(declare-const dummy4 us_rep3)

(declare-datatypes ((tx1S__ref 0))
(((tx1S__refqtmk (tx1S__content us_rep3)))))
(define-fun tx1S__ref_tx1S__content__projection ((a tx1S__ref)) us_rep3 
  (tx1S__content a))

(define-fun in_range5 ((rec__test_dic__nested__p1__x1 Bool)
  (a us_split_discrs6)) Bool (= rec__test_dic__nested__p1__x1 (rec__test_dic__nested__p1__x
                                                              a)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const test_dic__nested__p1__x__first__bit1 Int)

(declare-const test_dic__nested__p1__x__last__bit1 Int)

(declare-const test_dic__nested__p1__x__position1 Int)

;; test_dic__nested__p1__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p1__x__first__bit1))

;; test_dic__nested__p1__x__last__bit_axiom
  (assert
  (< test_dic__nested__p1__x__first__bit1 test_dic__nested__p1__x__last__bit1))

;; test_dic__nested__p1__x__position_axiom
  (assert (<= 0 test_dic__nested__p1__x__position1))

(declare-const test_dic__nested__p1__c__first__bit1 Int)

(declare-const test_dic__nested__p1__c__last__bit1 Int)

(declare-const test_dic__nested__p1__c__position1 Int)

;; test_dic__nested__p1__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p1__c__first__bit1))

;; test_dic__nested__p1__c__last__bit_axiom
  (assert
  (< test_dic__nested__p1__c__first__bit1 test_dic__nested__p1__c__last__bit1))

;; test_dic__nested__p1__c__position_axiom
  (assert (<= 0 test_dic__nested__p1__c__position1))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes ((p1__ref 0))
(((p1__refqtmk (p1__content us_rep3)))))
(define-fun p1__ref_p1__content__projection ((a p1__ref)) us_rep3 (p1__content
                                                                  a))

(declare-const x1__split_discrs us_split_discrs6)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((us_split_discrs8 0))
(((us_split_discrsqtmk4 (rec__test_dic__nested__p2__x Bool)))))
(define-fun us_split_discrs_rec__test_dic__nested__p2__x__projection ((a us_split_discrs8)) Bool 
  (rec__test_dic__nested__p2__x a))

(declare-datatypes ((us_split_discrs__ref4 0))
(((us_split_discrs__refqtmk4 (us_split_discrs__content4 us_split_discrs8)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref4)) us_split_discrs8 
  (us_split_discrs__content4 a))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4 (rec__test_dic__nested__p2__c integer)))))
(define-fun us_split_fields_rec__test_dic__nested__p2__c__projection ((a us_split_fields8)) integer 
  (rec__test_dic__nested__p2__c a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk4
  (us_split_discrs9 us_split_discrs8)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep4)) us_split_discrs8 
  (us_split_discrs9 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun bool_eq4 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (ite (rec__test_dic__nested__p2__x
                                 (us_split_discrs9 a)) 1 0) (ite (rec__test_dic__nested__p2__x
                                                                 (us_split_discrs9
                                                                 b)) 1 0))
                         (= (to_rep
                            (rec__test_dic__nested__p2__c
                            (us_split_fields9 a))) (to_rep
                                                   (rec__test_dic__nested__p2__c
                                                   (us_split_fields9 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const test_dic__nested__p2__x__first__bit Int)

(declare-const test_dic__nested__p2__x__last__bit Int)

(declare-const test_dic__nested__p2__x__position Int)

;; test_dic__nested__p2__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p2__x__first__bit))

;; test_dic__nested__p2__x__last__bit_axiom
  (assert
  (< test_dic__nested__p2__x__first__bit test_dic__nested__p2__x__last__bit))

;; test_dic__nested__p2__x__position_axiom
  (assert (<= 0 test_dic__nested__p2__x__position))

(declare-const test_dic__nested__p2__c__first__bit Int)

(declare-const test_dic__nested__p2__c__last__bit Int)

(declare-const test_dic__nested__p2__c__position Int)

;; test_dic__nested__p2__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p2__c__first__bit))

;; test_dic__nested__p2__c__last__bit_axiom
  (assert
  (< test_dic__nested__p2__c__first__bit test_dic__nested__p2__c__last__bit))

;; test_dic__nested__p2__c__position_axiom
  (assert (<= 0 test_dic__nested__p2__c__position))

(declare-fun user_eq6 (us_rep4 us_rep4) Bool)

(declare-const dummy6 us_rep4)

(declare-datatypes ((tx2S__ref 0))
(((tx2S__refqtmk (tx2S__content us_rep4)))))
(define-fun tx2S__ref_tx2S__content__projection ((a tx2S__ref)) us_rep4 
  (tx2S__content a))

(define-fun in_range6 ((rec__test_dic__nested__p2__x1 Bool)
  (a us_split_discrs8)) Bool (= rec__test_dic__nested__p2__x1 (rec__test_dic__nested__p2__x
                                                              a)))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const test_dic__nested__p2__x__first__bit1 Int)

(declare-const test_dic__nested__p2__x__last__bit1 Int)

(declare-const test_dic__nested__p2__x__position1 Int)

;; test_dic__nested__p2__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p2__x__first__bit1))

;; test_dic__nested__p2__x__last__bit_axiom
  (assert
  (< test_dic__nested__p2__x__first__bit1 test_dic__nested__p2__x__last__bit1))

;; test_dic__nested__p2__x__position_axiom
  (assert (<= 0 test_dic__nested__p2__x__position1))

(declare-const test_dic__nested__p2__c__first__bit1 Int)

(declare-const test_dic__nested__p2__c__last__bit1 Int)

(declare-const test_dic__nested__p2__c__position1 Int)

;; test_dic__nested__p2__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p2__c__first__bit1))

;; test_dic__nested__p2__c__last__bit_axiom
  (assert
  (< test_dic__nested__p2__c__first__bit1 test_dic__nested__p2__c__last__bit1))

;; test_dic__nested__p2__c__position_axiom
  (assert (<= 0 test_dic__nested__p2__c__position1))

(declare-fun user_eq7 (us_rep4 us_rep4) Bool)

(declare-const dummy7 us_rep4)

(declare-datatypes ((p2__ref 0))
(((p2__refqtmk (p2__content us_rep4)))))
(define-fun p2__ref_p2__content__projection ((a p2__ref)) us_rep4 (p2__content
                                                                  a))

(declare-const x2__split_discrs us_split_discrs8)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const test_dic__nested__p3__x__first__bit1 Int)

(declare-const test_dic__nested__p3__x__last__bit1 Int)

(declare-const test_dic__nested__p3__x__position1 Int)

;; test_dic__nested__p3__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p3__x__first__bit1))

;; test_dic__nested__p3__x__last__bit_axiom
  (assert
  (< test_dic__nested__p3__x__first__bit1 test_dic__nested__p3__x__last__bit1))

;; test_dic__nested__p3__x__position_axiom
  (assert (<= 0 test_dic__nested__p3__x__position1))

(declare-const test_dic__nested__p3__c__first__bit1 Int)

(declare-const test_dic__nested__p3__c__last__bit1 Int)

(declare-const test_dic__nested__p3__c__position1 Int)

;; test_dic__nested__p3__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p3__c__first__bit1))

;; test_dic__nested__p3__c__last__bit_axiom
  (assert
  (< test_dic__nested__p3__c__first__bit1 test_dic__nested__p3__c__last__bit1))

;; test_dic__nested__p3__c__position_axiom
  (assert (<= 0 test_dic__nested__p3__c__position1))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((tx3S__ref 0))
(((tx3S__refqtmk (tx3S__content us_rep)))))
(define-fun tx3S__ref_tx3S__content__projection ((a tx3S__ref)) us_rep 
  (tx3S__content a))

(declare-const x3__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-const test_dic__nested__p4__x__first__bit1 Int)

(declare-const test_dic__nested__p4__x__last__bit1 Int)

(declare-const test_dic__nested__p4__x__position1 Int)

;; test_dic__nested__p4__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p4__x__first__bit1))

;; test_dic__nested__p4__x__last__bit_axiom
  (assert
  (< test_dic__nested__p4__x__first__bit1 test_dic__nested__p4__x__last__bit1))

;; test_dic__nested__p4__x__position_axiom
  (assert (<= 0 test_dic__nested__p4__x__position1))

(declare-const test_dic__nested__p4__c__first__bit1 Int)

(declare-const test_dic__nested__p4__c__last__bit1 Int)

(declare-const test_dic__nested__p4__c__position1 Int)

;; test_dic__nested__p4__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p4__c__first__bit1))

;; test_dic__nested__p4__c__last__bit_axiom
  (assert
  (< test_dic__nested__p4__c__first__bit1 test_dic__nested__p4__c__last__bit1))

;; test_dic__nested__p4__c__position_axiom
  (assert (<= 0 test_dic__nested__p4__c__position1))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((tx4S__ref 0))
(((tx4S__refqtmk (tx4S__content us_rep1)))))
(define-fun tx4S__ref_tx4S__content__projection ((a tx4S__ref)) us_rep1 
  (tx4S__content a))

(declare-const x4__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const test_dic__nested__p5__x__first__bit1 Int)

(declare-const test_dic__nested__p5__x__last__bit1 Int)

(declare-const test_dic__nested__p5__x__position1 Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit1))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit1 test_dic__nested__p5__x__last__bit1))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position1))

(declare-const test_dic__nested__p5__c__first__bit1 Int)

(declare-const test_dic__nested__p5__c__last__bit1 Int)

(declare-const test_dic__nested__p5__c__position1 Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit1))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit1 test_dic__nested__p5__c__last__bit1))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position1))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((tx5S__ref 0))
(((tx5S__refqtmk (tx5S__content us_rep2)))))
(define-fun tx5S__ref_tx5S__content__projection ((a tx5S__ref)) us_rep2 
  (tx5S__content a))

(declare-const x5__split_discrs us_split_discrs4)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-datatypes ((s4__ref 0))
(((s4__refqtmk (s4__content us_rep1)))))
(define-fun s4__ref_s4__content__projection ((a s4__ref)) us_rep1 (s4__content
                                                                  a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-fun f4 (us_rep1) Bool)

(declare-fun f4__function_guard (Bool us_rep1) Bool)

;; f4__post_axiom
  (assert true)

;; f4__def_axiom
  (assert
  (forall ((x us_rep1))
  (! (= (= (f4 x) true)
     (= (to_rep (rec__test_dic__nested__p4__c (us_split_fields3 x))) 0)) :pattern (
  (f4 x)) )))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (<= 0 object__size10))

;; alignment_axiom
  (assert (<= 0 alignment10))

(declare-const test_dic__nested__p5__x__first__bit2 Int)

(declare-const test_dic__nested__p5__x__last__bit2 Int)

(declare-const test_dic__nested__p5__x__position2 Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit2))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit2 test_dic__nested__p5__x__last__bit2))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position2))

(declare-const test_dic__nested__p5__c__first__bit2 Int)

(declare-const test_dic__nested__p5__c__last__bit2 Int)

(declare-const test_dic__nested__p5__c__position2 Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit2))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit2 test_dic__nested__p5__c__last__bit2))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position2))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ((t4b__ref 0))
(((t4b__refqtmk (t4b__content us_rep2)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_rep2 
  (t4b__content a))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const alignment11 Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (<= 0 object__size11))

;; alignment_axiom
  (assert (<= 0 alignment11))

(declare-const test_dic__nested__p5__x__first__bit3 Int)

(declare-const test_dic__nested__p5__x__last__bit3 Int)

(declare-const test_dic__nested__p5__x__position3 Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit3))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit3 test_dic__nested__p5__x__last__bit3))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position3))

(declare-const test_dic__nested__p5__c__first__bit3 Int)

(declare-const test_dic__nested__p5__c__last__bit3 Int)

(declare-const test_dic__nested__p5__c__position3 Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit3))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit3 test_dic__nested__p5__c__last__bit3))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position3))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ((t5b__ref 0))
(((t5b__refqtmk (t5b__content us_rep2)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) us_rep2 
  (t5b__content a))

;; id__post_axiom
  (assert true)

;; id__def_axiom
  (assert
  (forall ((x us_rep2))
  (! (= (id x) (ite (and
                    (= (rec__test_dic__nested__p5__x (us_split_discrs5 x)) true)
                    (= (to_rep
                       (rec__test_dic__nested__p5__c (us_split_fields5 x))) 0))
               (us_repqtmk2 (us_split_discrsqtmk2 (distinct 1 0))
               (us_split_fieldsqtmk2
               (rec__test_dic__nested__p5__c (us_split_fields5 x))))
               (us_repqtmk2 (us_split_discrsqtmk2 (distinct 0 0))
               (us_split_fieldsqtmk2
               (rec__test_dic__nested__p5__c (us_split_fields5 x)))))) :pattern (
  (id x)) )))

;; temp___result_209'def
  (assert
  (forall ((temp___208 us_rep1)) (f4__function_guard (f4 temp___208)
  temp___208)))

(define-fun dynamic_predicate ((temp___207 us_rep1)) Bool (= (f4 temp___207) true))

(assert
;; defqtvc
 ;; File "test_dic.adb", line 1, characters 0-0
  (not
  (forall ((x1__split_fields integer) (x2__split_fields integer)
  (x3__split_fields integer) (x4__split_fields integer))
  (=> (= (rec__test_dic__nested__p1__x x1__split_discrs) (distinct 1 0))
  (=> (= (to_rep x1__split_fields) 0)
  (=> (= (rec__test_dic__nested__p1__x x1__split_discrs) true)
  (=> (in_range5 (distinct 1 0)
  (us_split_discrs7
  (us_repqtmk3 x1__split_discrs (us_split_fieldsqtmk3 x1__split_fields))))
  (=> (= (rec__test_dic__nested__p2__x x2__split_discrs) (distinct 1 0))
  (=> (= (to_rep x2__split_fields) 0)
  (=> (= (rec__test_dic__nested__p2__x x2__split_discrs) true)
  (=> (in_range6 (distinct 1 0)
  (us_split_discrs9
  (us_repqtmk4 x2__split_discrs (us_split_fieldsqtmk4 x2__split_fields))))
  (=> (= (rec__test_dic__nested__p3__x x3__split_discrs) (distinct 1 0))
  (=> (= (to_rep x3__split_fields) 0)
  (=> (= (rec__test_dic__nested__p3__x x3__split_discrs) true)
  (=> (in_range2 (distinct 1 0)
  (us_split_discrs1
  (us_repqtmk x3__split_discrs (us_split_fieldsqtmk x3__split_fields))))
  (=> (= (rec__test_dic__nested__p4__x x4__split_discrs) (distinct 1 0))
  (=> (= (to_rep x4__split_fields) 0)
  (=>
  (= (rec__test_dic__nested__p4__x
     (us_split_discrs3
     (us_repqtmk1 x4__split_discrs (us_split_fieldsqtmk1 x4__split_fields)))) true)
  (=> (in_range3 (distinct 1 0)
  (us_split_discrs3
  (us_repqtmk1 x4__split_discrs (us_split_fieldsqtmk1 x4__split_fields))))
  (in_range 1))))))))))))))))))))
(check-sat)
