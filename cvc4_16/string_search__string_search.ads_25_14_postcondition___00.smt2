(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-datatypes ((text__ref 0))
(((text__refqtmk (text__content us_t)))))
(define-fun text__ref_text__content__projection ((a text__ref)) us_t 
  (text__content a))

(declare-fun partial_match_at (us_t us_t Int Int) Bool)

(declare-fun partial_match_at__function_guard (Bool us_t us_t Int Int) Bool)

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant2 ((temp___expr_165 us_t)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_162 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_165)
                                     (last1 temp___expr_165)))
                                     (=> (= temp___do_toplevel_163 true)
                                     (=> (= temp___is_init_161 true)
                                     (= (first1 temp___expr_165) 1)))))

(define-fun dynamic_predicate ((temp___168 us_t)) Bool (= (first1 temp___168) 1))

;; partial_match_at__post_axiom
  (assert true)

;; partial_match_at__def_axiom
  (assert
  (forall ((needle us_t) (haystack us_t))
  (forall ((loc Int) (len Int))
  (! (= (= (partial_match_at needle haystack loc len) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i len))
     (= (to_rep (select (to_array needle) i)) (to_rep
                                              (select (to_array haystack) (+ loc (- i 1)))))))) :pattern (
  (partial_match_at needle haystack loc len)) ))))

(declare-fun match_at (us_t us_t Int) Bool)

(declare-fun match_at__function_guard (Bool us_t us_t Int) Bool)

;; match_at__post_axiom
  (assert true)

;; match_at__def_axiom
  (assert
  (forall ((needle us_t) (haystack us_t))
  (forall ((loc Int))
  (! (and
     (forall ((needle1 us_t) (haystack1 us_t) (loc1 Int))
     (partial_match_at__function_guard
     (partial_match_at needle1 haystack1 loc1 (length needle1)) needle1
     haystack1 loc1 (length needle1)))
     (= (= (match_at needle haystack loc) true)
     (and (<= (- loc 1) (- (length haystack) (length needle)))
     (= (partial_match_at needle haystack loc (length needle)) true)))) :pattern (
  (match_at needle haystack loc)) ))))

(declare-const needle us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const haystack us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes ((t3b__ref 0))
(((t3b__refqtmk (t3b__content integer)))))
(define-fun t3b__ref_t3b__content__projection ((a t3b__ref)) integer 
  (t3b__content a))

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (integer integer) Bool)

(declare-const dummy6 integer)

(declare-datatypes ((t4b__ref 0))
(((t4b__refqtmk (t4b__content integer)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) integer 
  (t4b__content a))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(assert
;; defqtvc
 ;; File "string_search.ads", line 23, characters 0-0
  (not
  (forall ((string_search__brute_force__result Int)
  (string_search__brute_force__result1 Int))
  (=> (dynamic_invariant2 needle true false true true)
  (=> (dynamic_invariant2 haystack true false true true)
  (=>
  (let ((temp___341 (length needle)))
  (and (<= 1 temp___341) (<= temp___341 (length haystack))))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((k Int)) (match_at__function_guard (match_at needle haystack k)
  needle haystack k))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((k Int)) (match_at__function_guard (match_at needle haystack k)
  needle haystack k))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((i Int) (j Int)) (partial_match_at__function_guard
  (partial_match_at needle haystack i j) needle haystack i j))
  (=>
  (forall ((k Int)) (match_at__function_guard (match_at needle haystack k)
  needle haystack k))
  (=>
  (or
  (let ((o (length needle)))
  (and (in_range1 o)
  (let ((o1 (length haystack)))
  (and (in_range1 o1)
  (let ((o2 (- o1 o)))
  (and (in_range1 o2)
  (let ((o3 (+ o2 1)))
  (and (in_range1 o3)
  (exists ((i Int))
  (and (= i 1)
  (and (= (and (ite (<= 1 i) true false) (ite (<= i o3) true false)) true)
  (exists ((diff Bool))
  (and (= diff (distinct 0 0))
  (exists ((diff1 Bool) (j Int))
  (and
  (let ((temp___323 (first1 needle)))
  (let ((temp___324 (last1 needle)))
  (exists ((j1 Int))
  (and (= j1 temp___323)
  (ite (= (and (ite (<= temp___323 j1) true false) (ite (<= j1 temp___324)
                                                   true false)) true)
  (let ((o4 (+ j1 (- i 1))))
  (and (in_range1 o4)
  (and (and (<= (first1 haystack) o4) (<= o4 (last1 haystack)))
  (exists ((o5 Int))
  (and (= (to_rep (select (to_array haystack) o4)) o5)
  (exists ((o6 Int))
  (and (= (to_rep (select (to_array needle) j1)) o6)
  (exists ((diff2 Bool))
  (and (= diff2 (ite (= o6 o5) false true))
  (ite (= diff2 true) (and (= diff1 diff2) (= j j1))
  (and (in_range2 j1)
  (let ((o7 haystack))
  (let ((o8 needle))
  (let ((temp___inv_330 (partial_match_at o8 o7 i j1)))
  (and
  (and (partial_match_at__function_guard temp___inv_330 o8 o7 i j1)
  (= (= temp___inv_330 true)
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 j1))
  (= (to_rep (select (to_array o8) i1)) (to_rep
                                        (select (to_array o7) (+ i (- i1 1)))))))))
  (exists ((diff3 Bool) (j2 Int))
  (and
  (and (= (partial_match_at needle haystack i j2) true)
  (= (= diff3 true)
  (not
  (= (to_rep (select (to_array needle) j2)) (to_rep
                                            (select (to_array haystack) (+ j2 (- i 1))))))))
  (and
  (= (and (ite (dynamic_property2 (first1 needle) (last1 needle) j2) true
          false) (ite (and (<= (first1 needle) j2) (<= j2 (last1 needle)))
                 true false)) true)
  (ite (= j2 temp___324) (and (= diff1 diff3) (= j j2))
  (and (= j (+ j2 1))
  (let ((o9 (+ j (- i 1))))
  (and (in_range1 o9)
  (and (and (<= (first1 haystack) o9) (<= o9 (last1 haystack)))
  (exists ((o10 Int))
  (and (= (to_rep (select (to_array haystack) o9)) o10)
  (exists ((o11 Int))
  (and (= (to_rep (select (to_array needle) j)) o11)
  (and (= diff1 (ite (= o11 o10) false true)) (= diff1 true)))))))))))))))))))))))))))))
  (and (= diff1 diff) (= j j1)))))))
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= diff1 true) false true))
  (ite (= spark__branch true) (= string_search__brute_force__result1 i)
  (exists ((i1 Int))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i1)) (not (= (match_at needle haystack k) true))))
  (and
  (= (and (ite (dynamic_property1 1
          (+ (- (length haystack) (length needle)) 1) i1) true false) 
  (ite (and (<= 1 i1) (<= i1 (+ (- (length haystack) (length needle)) 1)))
  true false)) true)
  (and (not (= i1 o3))
  (exists ((i2 Int))
  (and (= i2 (+ i1 1))
  (exists ((diff2 Bool))
  (and (= diff2 (distinct 0 0))
  (exists ((diff3 Bool))
  (and
  (let ((temp___323 (first1 needle)))
  (let ((temp___324 (last1 needle)))
  (exists ((j1 Int))
  (and (= j1 temp___323)
  (ite (= (and (ite (<= temp___323 j1) true false) (ite (<= j1 temp___324)
                                                   true false)) true)
  (let ((o4 (+ j1 (- i2 1))))
  (and (in_range1 o4)
  (and (and (<= (first1 haystack) o4) (<= o4 (last1 haystack)))
  (exists ((o5 Int))
  (and (= (to_rep (select (to_array haystack) o4)) o5)
  (exists ((o6 Int))
  (and (= (to_rep (select (to_array needle) j1)) o6)
  (exists ((diff4 Bool))
  (and (= diff4 (ite (= o6 o5) false true))
  (ite (= diff4 true) (= diff3 diff4)
  (and (in_range2 j1)
  (let ((o7 haystack))
  (let ((o8 needle))
  (let ((temp___inv_330 (partial_match_at o8 o7 i2 j1)))
  (and
  (and (partial_match_at__function_guard temp___inv_330 o8 o7 i2 j1)
  (= (= temp___inv_330 true)
  (forall ((i3 Int))
  (=> (and (<= 1 i3) (<= i3 j1))
  (= (to_rep (select (to_array o8) i3)) (to_rep
                                        (select (to_array o7) (+ i2 (- i3 1)))))))))
  (exists ((diff5 Bool) (j2 Int))
  (and
  (and (= (partial_match_at needle haystack i2 j2) true)
  (= (= diff5 true)
  (not
  (= (to_rep (select (to_array needle) j2)) (to_rep
                                            (select (to_array haystack) (+ j2 (- i2 1))))))))
  (and
  (= (and (ite (dynamic_property2 (first1 needle) (last1 needle) j2) true
          false) (ite (and (<= (first1 needle) j2) (<= j2 (last1 needle)))
                 true false)) true)
  (ite (= j2 temp___324) (= diff3 diff5)
  (exists ((j3 Int))
  (and (= j3 (+ j2 1))
  (let ((o9 (+ j3 (- i2 1))))
  (and (in_range1 o9)
  (and (and (<= (first1 haystack) o9) (<= o9 (last1 haystack)))
  (exists ((o10 Int))
  (and (= (to_rep (select (to_array haystack) o9)) o10)
  (exists ((o11 Int))
  (and (= (to_rep (select (to_array needle) j3)) o11)
  (and (= diff3 (ite (= o11 o10) false true)) (= diff3 true))))))))))))))))))))))))))))))
  (= diff3 diff2))))))
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (= diff3 true) false true))
  (and (= spark__branch1 true) (= string_search__brute_force__result1 i2))))))))))))))))))))))))))))))))
  (exists ((string_search__brute_force__result2 Int))
  (and
  (let ((o (length needle)))
  (and (in_range1 o)
  (let ((o1 (length haystack)))
  (and (in_range1 o1)
  (let ((o2 (- o1 o)))
  (and (in_range1 o2)
  (let ((o3 (+ o2 1)))
  (and (in_range1 o3)
  (exists ((i Int))
  (and (= i 1)
  (ite (= (and (ite (<= 1 i) true false) (ite (<= i o3) true false)) true)
  (exists ((diff Bool))
  (and (= diff (distinct 0 0))
  (exists ((diff1 Bool) (j Int))
  (and
  (let ((temp___323 (first1 needle)))
  (let ((temp___324 (last1 needle)))
  (exists ((j1 Int))
  (and (= j1 temp___323)
  (ite (= (and (ite (<= temp___323 j1) true false) (ite (<= j1 temp___324)
                                                   true false)) true)
  (let ((o4 (+ j1 (- i 1))))
  (and (in_range1 o4)
  (and (and (<= (first1 haystack) o4) (<= o4 (last1 haystack)))
  (exists ((o5 Int))
  (and (= (to_rep (select (to_array haystack) o4)) o5)
  (exists ((o6 Int))
  (and (= (to_rep (select (to_array needle) j1)) o6)
  (exists ((diff2 Bool))
  (and (= diff2 (ite (= o6 o5) false true))
  (ite (= diff2 true) (and (= diff1 diff2) (= j j1))
  (and (in_range2 j1)
  (let ((o7 haystack))
  (let ((o8 needle))
  (let ((temp___inv_330 (partial_match_at o8 o7 i j1)))
  (and
  (and (partial_match_at__function_guard temp___inv_330 o8 o7 i j1)
  (= (= temp___inv_330 true)
  (forall ((i1 Int))
  (=> (and (<= 1 i1) (<= i1 j1))
  (= (to_rep (select (to_array o8) i1)) (to_rep
                                        (select (to_array o7) (+ i (- i1 1)))))))))
  (exists ((diff3 Bool) (j2 Int))
  (and
  (and (= (partial_match_at needle haystack i j2) true)
  (= (= diff3 true)
  (not
  (= (to_rep (select (to_array needle) j2)) (to_rep
                                            (select (to_array haystack) (+ j2 (- i 1))))))))
  (and
  (= (and (ite (dynamic_property2 (first1 needle) (last1 needle) j2) true
          false) (ite (and (<= (first1 needle) j2) (<= j2 (last1 needle)))
                 true false)) true)
  (ite (= j2 temp___324) (and (= diff1 diff3) (= j j2))
  (and (= j (+ j2 1))
  (let ((o9 (+ j (- i 1))))
  (and (in_range1 o9)
  (and (and (<= (first1 haystack) o9) (<= o9 (last1 haystack)))
  (exists ((o10 Int))
  (and (= (to_rep (select (to_array haystack) o9)) o10)
  (exists ((o11 Int))
  (and (= (to_rep (select (to_array needle) j)) o11)
  (and (= diff1 (ite (= o11 o10) false true)) (= diff1 true)))))))))))))))))))))))))))))
  (and (= diff1 diff) (= j j1)))))))
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= diff1 true) false true))
  (and (not (= spark__branch true))
  (exists ((i1 Int))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k i1)) (not (= (match_at needle haystack k) true))))
  (and
  (= (and (ite (dynamic_property1 1
          (+ (- (length haystack) (length needle)) 1) i1) true false) 
  (ite (and (<= 1 i1) (<= i1 (+ (- (length haystack) (length needle)) 1)))
  true false)) true) (= i1 o3)))))))))))
  (= string_search__brute_force__result2 string_search__brute_force__result))))))))))))
  (= string_search__brute_force__result1 0))))
  (<= 0 string_search__brute_force__result1)))))))))))))))))))
(check-sat)
