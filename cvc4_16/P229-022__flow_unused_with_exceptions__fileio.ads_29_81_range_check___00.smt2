(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range
                                    temp___expr_46)))

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (character character) Bool)

(declare-const dummy1 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(declare-sort file_descr 0)

(declare-fun file_descrqtint (file_descr) Int)

;; file_descr'axiom
  (assert
  (forall ((i file_descr))
  (and (<= (- 2147483648) (file_descrqtint i))
  (<= (file_descrqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (file_descr file_descr) Bool)

(declare-const dummy2 file_descr)

(declare-datatypes ((file_descr__ref 0))
(((file_descr__refqtmk (file_descr__content file_descr)))))
(define-fun file_descr__ref_file_descr__content__projection ((a file_descr__ref)) file_descr 
  (file_descr__content a))

(define-fun to_rep1 ((x file_descr)) Int (file_descrqtint x))

(declare-fun of_rep1 (Int) file_descr)

;; inversion_axiom
  (assert
  (forall ((x file_descr))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x file_descr)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__fileio__file_type__descr file_descr)(rec__fileio__file_type__before_lm Bool)(rec__fileio__file_type__before_lm_pm Bool)(rec__fileio__file_type__is_regular_file Bool)))))
(define-fun us_split_fields_rec__fileio__file_type__descr__projection ((a us_split_fields)) file_descr 
  (rec__fileio__file_type__descr a))

(define-fun us_split_fields_rec__fileio__file_type__before_lm__projection ((a us_split_fields)) Bool 
  (rec__fileio__file_type__before_lm a))

(define-fun us_split_fields_rec__fileio__file_type__before_lm_pm__projection ((a us_split_fields)) Bool 
  (rec__fileio__file_type__before_lm_pm a))

(define-fun us_split_fields_rec__fileio__file_type__is_regular_file__projection ((a us_split_fields)) Bool 
  (rec__fileio__file_type__is_regular_file a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__fileio__file_type__descr
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__fileio__file_type__descr
                                                  (us_split_fields1 b))))
                        (= (ite (rec__fileio__file_type__before_lm
                                (us_split_fields1 a)) 1 0) (ite (rec__fileio__file_type__before_lm
                                                                (us_split_fields1
                                                                b)) 1 0)))
                        (and
                        (= (ite (rec__fileio__file_type__before_lm_pm
                                (us_split_fields1 a)) 1 0) (ite (rec__fileio__file_type__before_lm_pm
                                                                (us_split_fields1
                                                                b)) 1 0))
                        (= (ite (rec__fileio__file_type__is_regular_file
                                (us_split_fields1 a)) 1 0) (ite (rec__fileio__file_type__is_regular_file
                                                                (us_split_fields1
                                                                b)) 1 0))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const fileio__file_type__descr__first__bit Int)

(declare-const fileio__file_type__descr__last__bit Int)

(declare-const fileio__file_type__descr__position Int)

;; fileio__file_type__descr__first__bit_axiom
  (assert (<= 0 fileio__file_type__descr__first__bit))

;; fileio__file_type__descr__last__bit_axiom
  (assert
  (< fileio__file_type__descr__first__bit fileio__file_type__descr__last__bit))

;; fileio__file_type__descr__position_axiom
  (assert (<= 0 fileio__file_type__descr__position))

(declare-const fileio__file_type__before_lm__first__bit Int)

(declare-const fileio__file_type__before_lm__last__bit Int)

(declare-const fileio__file_type__before_lm__position Int)

;; fileio__file_type__before_lm__first__bit_axiom
  (assert (<= 0 fileio__file_type__before_lm__first__bit))

;; fileio__file_type__before_lm__last__bit_axiom
  (assert
  (< fileio__file_type__before_lm__first__bit fileio__file_type__before_lm__last__bit))

;; fileio__file_type__before_lm__position_axiom
  (assert (<= 0 fileio__file_type__before_lm__position))

(declare-const fileio__file_type__before_lm_pm__first__bit Int)

(declare-const fileio__file_type__before_lm_pm__last__bit Int)

(declare-const fileio__file_type__before_lm_pm__position Int)

;; fileio__file_type__before_lm_pm__first__bit_axiom
  (assert (<= 0 fileio__file_type__before_lm_pm__first__bit))

;; fileio__file_type__before_lm_pm__last__bit_axiom
  (assert
  (< fileio__file_type__before_lm_pm__first__bit fileio__file_type__before_lm_pm__last__bit))

;; fileio__file_type__before_lm_pm__position_axiom
  (assert (<= 0 fileio__file_type__before_lm_pm__position))

(declare-const fileio__file_type__is_regular_file__first__bit Int)

(declare-const fileio__file_type__is_regular_file__last__bit Int)

(declare-const fileio__file_type__is_regular_file__position Int)

;; fileio__file_type__is_regular_file__first__bit_axiom
  (assert (<= 0 fileio__file_type__is_regular_file__first__bit))

;; fileio__file_type__is_regular_file__last__bit_axiom
  (assert
  (< fileio__file_type__is_regular_file__first__bit fileio__file_type__is_regular_file__last__bit))

;; fileio__file_type__is_regular_file__position_axiom
  (assert (<= 0 fileio__file_type__is_regular_file__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((file_type__ref 0))
(((file_type__refqtmk (file_type__content us_rep)))))
(define-fun file_type__ref_file_type__content__projection ((a file_type__ref)) us_rep 
  (file_type__content a))

(declare-const eof Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const ch Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const file us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort int__ 0)

(declare-fun int__qtint (int__) Int)

;; int__'axiom
  (assert
  (forall ((i int__))
  (and (<= (- 2147483648) (int__qtint i)) (<= (int__qtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (int__ int__) Bool)

(declare-const dummy4 int__)

(declare-datatypes ((int____ref 0))
(((int____refqtmk (int____content int__)))))
(define-fun int____ref_int____content__2__projection ((a int____ref)) int__ 
  (int____content a))

(define-fun dynamic_invariant1 ((temp___expr_184 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)
  (temp___do_typ_inv_183 Bool)) Bool (=>
                                     (or (= temp___is_init_180 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range4 temp___expr_184)))

(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range1 temp___expr_74)))

(define-fun dynamic_invariant3 ((temp___expr_159 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)
  (temp___do_typ_inv_158 Bool)) Bool (=>
                                     (or (= temp___is_init_155 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_159)))

(assert
;; defqtvc
 ;; File "fileio.ads", line 27, characters 0-0
  (not
  (forall ((the_file (Array Int character)) (cur_position Int) (result__ Int)
  (the_file1 (Array Int character)) (cur_position1 Int))
  (=> (dynamic_invariant1 ch true false true true)
  (=> (dynamic_invariant1 eof true false true true)
  (=> (dynamic_invariant cur_position true false true true)
  (=> (dynamic_invariant1 result__ false false true true)
  (=>
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= ch eof) false true))
  (ite (= spark__branch true)
  (and
  (exists ((o Int))
  (= (to_rep1 (rec__fileio__file_type__descr (us_split_fields1 file))) o))
  (exists ((the_file2 (Array Int character)))
  (and (= the_file2 the_file)
  (exists ((cur_position2 Int))
  (and (= cur_position2 cur_position)
  (exists ((result__1 Int))
  (and
  (and
  (=> (not (= result__1 eof))
  (and (= cur_position1 (- cur_position2 1))
  (forall ((temp___index_202 Int))
  (=> (and (<= 1 temp___index_202) (<= temp___index_202 2147483647))
  (= (to_rep (select the_file1 temp___index_202)) (ite (= temp___index_202 cur_position1)
                                                  ch
                                                  (to_rep
                                                  (select the_file2 temp___index_202))))))))
  (and (dynamic_invariant1 result__1 true true true true) (dynamic_invariant
  cur_position1 true true true true)))
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (= result__1 eof) true false))
  (not (= spark__branch1 true)))))))))))
  (and (= the_file1 the_file) (= cur_position1 cur_position))))) (in_range1
  ch)))))))))
(check-sat)
(exit)
