(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun read_variable (us_private) Bool)

(declare-fun read_variable__function_guard (Bool us_private) Bool)

;; read_variable__post_axiom
  (assert true)

(declare-const variable_constant Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun simply_true (tuple0) Bool)

(declare-fun simply_true__function_guard (Bool tuple0) Bool)

;; simply_true__post_axiom
  (assert true)

(declare-const ordinary_constant Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun both_are_true (tuple0) Bool)

(declare-fun both_are_true__function_guard (Bool tuple0) Bool)

;; both_are_true__post_axiom
  (assert true)

;; both_are_true__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (= (both_are_true us_void_param) true)
     (and (= variable_constant true) (= ordinary_constant true))) :pattern (
  (both_are_true us_void_param)) )))

;; ordinary_constant__def_axiom
  (assert
  (and (simply_true__function_guard (simply_true Tuple0) Tuple0)
  (= ordinary_constant (simply_true Tuple0))))

(assert
;; defqtvc
 ;; File "main.ads", line 1, characters 0-0
  (not
  (forall ((var us_private))
  (let ((main__variable_constant__assume (read_variable var)))
  (=> (read_variable__function_guard main__variable_constant__assume var)
  (=> (= main__variable_constant__assume variable_constant)
  (let ((main__ordinary_constant__assume (simply_true Tuple0)))
  (=> (simply_true__function_guard main__ordinary_constant__assume Tuple0)
  (=> (= main__ordinary_constant__assume ordinary_constant)
  (=> (both_are_true__function_guard (both_are_true Tuple0) Tuple0)
  (= (both_are_true Tuple0) true)))))))))))
(check-sat)
