(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__linked_list__mylists__cursor__node count_type)))))
(define-fun us_split_fields_rec__linked_list__mylists__cursor__node__projection ((a us_split_fields)) count_type 
  (rec__linked_list__mylists__cursor__node a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__linked_list__mylists__cursor__node
                           (us_split_fields1 a))) (to_rep
                                                  (rec__linked_list__mylists__cursor__node
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const linked_list__mylists__cursor__node__first__bit Int)

(declare-const linked_list__mylists__cursor__node__last__bit Int)

(declare-const linked_list__mylists__cursor__node__position Int)

;; linked_list__mylists__cursor__node__first__bit_axiom
  (assert (<= 0 linked_list__mylists__cursor__node__first__bit))

;; linked_list__mylists__cursor__node__last__bit_axiom
  (assert
  (< linked_list__mylists__cursor__node__first__bit linked_list__mylists__cursor__node__last__bit))

;; linked_list__mylists__cursor__node__position_axiom
  (assert (<= 0 linked_list__mylists__cursor__node__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep 
  (cursor__content a))

(declare-const no_element us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (element_type element_type) Bool)

(declare-const dummy3 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant ((temp___expr_272 Int)
  (temp___is_init_268 Bool) (temp___skip_constant_269 Bool)
  (temp___do_toplevel_270 Bool)
  (temp___do_typ_inv_271 Bool)) Bool (=>
                                     (or (= temp___is_init_268 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_272)))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (extended_index extended_index) Bool)

(declare-const dummy4 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_279 Int)
  (temp___is_init_275 Bool) (temp___skip_constant_276 Bool)
  (temp___do_toplevel_277 Bool)
  (temp___do_typ_inv_278 Bool)) Bool (=>
                                     (or (= temp___is_init_275 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_279)))

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun oeq ((left us_rep1)
  (right us_rep1)) Bool (and (= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun default_initial_assumption ((temp___expr_287 us_rep1)
  (temp___skip_top_level_288 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_288 true))
                                         (= (length temp___expr_287) 0)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant1 position true true true true)
     (and (<= 1 position) (<= position (last container)))) (dynamic_invariant
     (get container position) true false true true)) :pattern ((get container
                                                               position)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep2)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep2 
  (map__content a))

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content us_rep)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref)) us_rep 
  (key_type__content a))

(declare-fun get1 (us_rep2 us_rep) Int)

(declare-fun get__function_guard1 (Int us_rep2 us_rep) Bool)

(declare-fun has_key (us_rep2 us_rep) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep) Bool)

(declare-fun witness (us_rep2 us_rep) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (element_type1 element_type1) Bool)

(declare-const dummy6 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_301 Int)
  (temp___is_init_297 Bool) (temp___skip_constant_298 Bool)
  (temp___do_toplevel_299 Bool)
  (temp___do_typ_inv_300 Bool)) Bool (=>
                                     (or (= temp___is_init_297 true)
                                     (<= 1 2147483647)) (in_range4
                                     temp___expr_301)))

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq5 a b) (oeq1 a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_309 us_rep2)
  (temp___skip_top_level_310 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_310 true))
                                         (and
                                         (= (is_empty temp___expr_309) true)
                                         (= (length2 temp___expr_309) 0))))

(define-fun default_initial_assumption2 ((temp___expr_295 us_rep)
  (temp___skip_top_level_296 Bool)) Bool (= (to_rep
                                            (rec__linked_list__mylists__cursor__node
                                            (us_split_fields1
                                            temp___expr_295))) 0))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep))
     (=> (= (has_key container k) true)
     (= (= (bool_eq k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant2 result true false true true)))) :pattern ((get1
                                                                   container
                                                                   key)) ))))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__linked_list__mylists__list__capacity count_type)))))
(define-fun us_split_discrs_rec__linked_list__mylists__list__capacity__projection ((a us_split_discrs)) count_type 
  (rec__linked_list__mylists__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__linked_list__mylists__list us_main_type2)))))
(define-fun us_split_fields_rec__linked_list__mylists__list__projection ((a us_split_fields2)) us_main_type2 
  (rec__linked_list__mylists__list a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__projection ((a us_rep3)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep3)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep
                            (rec__linked_list__mylists__list__capacity
                            (us_split_discrs1 a))) (to_rep
                                                   (rec__linked_list__mylists__list__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq2
                            (rec__linked_list__mylists__list
                            (us_split_fields3 a))
                            (rec__linked_list__mylists__list
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range5 ((rec__linked_list__mylists__list__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__linked_list__mylists__list__capacity1 
  (to_rep (rec__linked_list__mylists__list__capacity a))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const linked_list__mylists__list__capacity__first__bit Int)

(declare-const linked_list__mylists__list__capacity__last__bit Int)

(declare-const linked_list__mylists__list__capacity__position Int)

;; linked_list__mylists__list__capacity__first__bit_axiom
  (assert (<= 0 linked_list__mylists__list__capacity__first__bit))

;; linked_list__mylists__list__capacity__last__bit_axiom
  (assert
  (< linked_list__mylists__list__capacity__first__bit linked_list__mylists__list__capacity__last__bit))

;; linked_list__mylists__list__capacity__position_axiom
  (assert (<= 0 linked_list__mylists__list__capacity__position))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep3)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep3 
  (list__content a))

(declare-fun model1 (us_rep3) us_rep1)

(declare-fun model__function_guard (us_rep1 us_rep3) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-fun oeq2 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq7 a b) (oeq2 a b)) :pattern ((user_eq7 a b)) )))

;; model__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (length (model1 container)) (length3 container)) :pattern ((model1
                                                                   container)) )))

(declare-fun positions (us_rep3) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep3) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep))
     (=> (= (has_key result i) true)
     (and
     (let ((temp___361 (get1 result i)))
     (and (<= 1 temp___361) (<= temp___361 (length3 container))))
     (forall ((j us_rep))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep3)
  (position us_rep)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep3 us_rep) Bool)

(define-fun element ((container us_rep3)
  (position us_rep)) Int (get (model1 container)
                         (get1 (positions container) position)))

(declare-fun element__function_guard (Int us_rep3 us_rep) Bool)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= (- 2147483648) (element_typeqtint2 i))
  (<= (element_typeqtint2 i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (element_type2 element_type2) Bool)

(declare-const dummy8 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(define-fun dynamic_invariant3 ((temp___expr_229 Int)
  (temp___is_init_225 Bool) (temp___skip_constant_226 Bool)
  (temp___do_toplevel_227 Bool)
  (temp___do_typ_inv_228 Bool)) Bool (=>
                                     (or (= temp___is_init_225 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range6 temp___expr_229)))

(define-fun default_initial_assumption3 ((temp___expr_250 us_rep)
  (temp___skip_top_level_251 Bool)) Bool (= (to_rep
                                            (rec__linked_list__mylists__cursor__node
                                            (us_split_fields1
                                            temp___expr_250))) 0))

(declare-fun first (us_rep3) us_rep)

(declare-fun first__function_guard (us_rep us_rep3) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (first container)))
     (ite (= (length3 container) 0) (= (bool_eq result no_element) true)
     (and (= (has_element container result) true)
     (= (get1 (positions container) result) 1)))) :pattern ((first container)) )))

(declare-fun contains (us_rep3 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep3 Int) Bool)

(define-fun contains1 ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (exists ((i Int))
                        (and (and (<= fst i) (<= i lst))
                        (= (get container i) item)))
                   true false))

(declare-fun contains__function_guard1 (Bool us_rep1 Int Int Int) Bool)

;; contains__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((item Int))
  (! (=> (dynamic_invariant3 item true true true true)
     (= (= (contains container item) true)
     (= (contains1 (model1 container) 1 (length3 container) item) true))) :pattern (
  (contains container item)) ))))

(declare-const l us_rep3)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant4 ((temp___expr_236 Int)
  (temp___is_init_232 Bool) (temp___skip_constant_233 Bool)
  (temp___do_toplevel_234 Bool)
  (temp___do_typ_inv_235 Bool)) Bool (=>
                                     (or (= temp___is_init_232 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_236)))

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk (us_split_fieldsqtmk rliteral))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and
     (<= result (to_rep
                (rec__linked_list__mylists__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant4 result true false true true))) :pattern ((length3
                                                                  container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq2 left right) true)
     (= (oeq (model1 left) (model1 right)) true)) :pattern ((oeq2 left right)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant4 result true false
     true true))) :pattern ((length container)) )))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k us_rep))
     (and (= (has_key container k) true) (= (bool_eq k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant4 (length2 container)
  true false true true) :pattern ((length2 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key us_rep))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key us_rep))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key us_rep)) (not (= (has_key container key) true)))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant4 result
     true false true true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant4 witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant2
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

(assert
;; defqtvc
 ;; File "linked_list.ads", line 9, characters 0-0
  (not
  (forall ((linked_list__search__result count_type) (o Bool))
  (=> (= (us_repqtmk (us_split_fieldsqtmk rliteral)) no_element)
  (=>
  (let ((o1 l))
  (let ((linked_list__search__cu__assume (first o1)))
  (and
  (ite (= (= (length3 o1) 0) true)
  (= (bool_eq linked_list__search__cu__assume no_element) true)
  (and (= (has_element o1 linked_list__search__cu__assume) true)
  (= (get1 (positions o1) linked_list__search__cu__assume) 1)))
  (exists ((cu__split_fields count_type))
  (and
  (= (us_split_fieldsqtmk cu__split_fields) (us_split_fields1
                                            linked_list__search__cu__assume))
  (or
  (and
  (not
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk cu__split_fields)) no_element) true))
  (and
  (let ((o2 (us_repqtmk (us_split_fieldsqtmk cu__split_fields))))
  (let ((o3 l))
  (let ((o4 (has_element o3 o2)))
  (and (= (= o4 true) (= (has_key (positions o3) o2) true))
  (or (not (= o4 true))
  (let ((o5 (us_repqtmk (us_split_fieldsqtmk cu__split_fields))))
  (let ((o6 l))
  (let ((o7 (positions o6)))
  (and
  (and (not (= (has_key o7 no_element) true))
  (forall ((i us_rep))
  (=> (= (has_key o7 i) true)
  (and
  (let ((temp___357 (get1 o7 i)))
  (and (<= 1 temp___357) (<= temp___357 (length3 o6))))
  (forall ((j us_rep))
  (=> (= (has_key o7 j) true)
  (=> (= (get1 o7 i) (get1 o7 j)) (= (bool_eq i j) true))))))))
  (let ((o8 (get1 o7 o5)))
  (and (dynamic_invariant2 o8 true false true true)
  (=> (= (distinct 0 0) true)
  (and (= o8 (w_get o7 (witness o7 o5)))
  (forall ((k us_rep))
  (=> (= (has_key o7 k) true)
  (= (= (bool_eq k o5) true) (= (witness o7 o5) (witness o7 k))))))))))))))))))
  (exists ((cu__split_fields1 count_type))
  (and
  (and
  (= (has_element l (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))) true)
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (- (get1 (positions l)
           (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))) 1)))
  (not (= (get (model1 l) i) 0)))))
  (and
  (= (and (ite true true false) (ite (not
                                     (= (bool_eq
                                        (us_repqtmk
                                        (us_split_fieldsqtmk
                                        cu__split_fields1)) no_element) true))
                                true false)) true)
  (let ((o2 (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))))
  (let ((o3 l))
  (let ((o4 (element o3 o2)))
  (and
  (and (dynamic_invariant3 o4 true false true true)
  (= o4 (get (model1 o3) (get1 (positions o3) o2))))
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o4 0) true false))
  (and (= spark__branch true)
  (= linked_list__search__result cu__split_fields1)))))))))))))
  (and
  (or
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk cu__split_fields)) no_element) true)
  (and
  (let ((o2 (us_repqtmk (us_split_fieldsqtmk cu__split_fields))))
  (let ((o3 l))
  (let ((o4 (has_element o3 o2)))
  (and (= (= o4 true) (= (has_key (positions o3) o2) true))
  (or (not (= o4 true))
  (let ((o5 (us_repqtmk (us_split_fieldsqtmk cu__split_fields))))
  (let ((o6 l))
  (let ((o7 (positions o6)))
  (and
  (and (not (= (has_key o7 no_element) true))
  (forall ((i us_rep))
  (=> (= (has_key o7 i) true)
  (and
  (let ((temp___357 (get1 o7 i)))
  (and (<= 1 temp___357) (<= temp___357 (length3 o6))))
  (forall ((j us_rep))
  (=> (= (has_key o7 j) true)
  (=> (= (get1 o7 i) (get1 o7 j)) (= (bool_eq i j) true))))))))
  (let ((o8 (get1 o7 o5)))
  (and (dynamic_invariant2 o8 true false true true)
  (=> (= (distinct 0 0) true)
  (and (= o8 (w_get o7 (witness o7 o5)))
  (forall ((k us_rep))
  (=> (= (has_key o7 k) true)
  (= (= (bool_eq k o5) true) (= (witness o7 o5) (witness o7 k))))))))))))))))))
  (exists ((cu__split_fields1 count_type))
  (and
  (and
  (= (has_element l (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))) true)
  (forall ((i Int))
  (=>
  (and (<= 1 i)
  (<= i (- (get1 (positions l)
           (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))) 1)))
  (not (= (get (model1 l) i) 0)))))
  (and
  (= (and (ite true true false) (ite (not
                                     (= (bool_eq
                                        (us_repqtmk
                                        (us_split_fieldsqtmk
                                        cu__split_fields1)) no_element) true))
                                true false)) true)
  (let ((o2 (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))))
  (let ((o3 l))
  (let ((o4 (element o3 o2)))
  (and
  (and (dynamic_invariant3 o4 true false true true)
  (= o4 (get (model1 o3) (get1 (positions o3) o2))))
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o4 0) true false))
  (and (not (= spark__branch true))
  (let ((o5 l))
  (exists ((cu__split_fields2 count_type))
  (and
  (ite (= (or (bool_eq (us_repqtmk (us_split_fieldsqtmk cu__split_fields1))
              no_element) (= (get1 (positions o5)
                             (us_repqtmk
                             (us_split_fieldsqtmk cu__split_fields1))) 
  (length3 o5))) true)
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk cu__split_fields2))
     no_element) true)
  (and
  (= (has_element o5 (us_repqtmk (us_split_fieldsqtmk cu__split_fields2))) true)
  (= (get1 (positions o5)
     (us_repqtmk (us_split_fieldsqtmk cu__split_fields2))) (+ (get1
                                                              (positions o5)
                                                              (us_repqtmk
                                                              (us_split_fieldsqtmk
                                                              cu__split_fields1))) 1))))
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk cu__split_fields2))
     no_element) true))))))))))))))))
  (= (us_repqtmk (us_split_fieldsqtmk linked_list__search__result)) no_element))))))))
  (=>
  (ite (= (bool_eq
          (us_repqtmk (us_split_fieldsqtmk linked_list__search__result))
          no_element) true)
  (let ((o1 l))
  (let ((o2 (contains o1 0)))
  (and (= (= o2 true) (= (contains1 (model1 o1) 1 (length3 o1) 0) true))
  (= o (ite (= o2 true) false true))))) (= o false))
  (=> (not (= o true))
  (let ((o1 (us_repqtmk (us_split_fieldsqtmk linked_list__search__result))))
  (let ((o2 l))
  (let ((o3 (has_element o2 o1)))
  (=> (= (= o3 true) (= (has_key (positions o2) o1) true))
  (=>
  (or (not (= o3 true))
  (let ((o4 (us_repqtmk (us_split_fieldsqtmk linked_list__search__result))))
  (let ((o5 l))
  (let ((o6 (element o5 o4)))
  (and (dynamic_invariant3 o6 true false true true)
  (= o6 (get (model1 o5) (get1 (positions o5) o4))))))))
  (=>
  (and (= o3 true)
  (= (element l
     (us_repqtmk (us_split_fieldsqtmk linked_list__search__result))) 0))
  (forall ((usf Int))
  (let ((o4 (us_repqtmk (us_split_fieldsqtmk linked_list__search__result))))
  (let ((o5 l))
  (let ((o6 (positions o5)))
  (=>
  (and (not (= (has_key o6 no_element) true))
  (forall ((i us_rep))
  (=> (= (has_key o6 i) true)
  (and
  (let ((temp___357 (get1 o6 i)))
  (and (<= 1 temp___357) (<= temp___357 (length3 o5))))
  (forall ((j us_rep))
  (=> (= (has_key o6 j) true)
  (=> (= (get1 o6 i) (get1 o6 j)) (= (bool_eq i j) true))))))))
  (let ((o7 (get1 o6 o4)))
  (=>
  (and (dynamic_invariant2 o7 true false true true)
  (=> (= (distinct 0 0) true)
  (and (= o7 (w_get o6 (witness o6 o4)))
  (forall ((k us_rep))
  (=> (= (has_key o6 k) true)
  (= (= (bool_eq k o4) true) (= (witness o6 o4) (witness o6 k))))))))
  (=>
  (= (and (ite (<= 1 usf) true false) (ite (<= usf (- o7 1)) true false)) true)
  (let ((o8 l)) (=> (= (length (model1 o8)) (length3 o8)) (<= 1 usf))))))))))))))))))))))))
(check-sat)
(exit)
