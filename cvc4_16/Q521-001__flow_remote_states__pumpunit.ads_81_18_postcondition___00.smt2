(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun is_waiting (Int) Bool)

(declare-fun is_waiting__function_guard (Bool Int) Bool)

(declare-sort internal_state 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (internal_state internal_state) Bool)

(declare-const dummy internal_state)

(declare-datatypes ((internal_state__ref 0))
(((internal_state__refqtmk (internal_state__content internal_state)))))
(define-fun internal_state__ref_internal_state__content__projection ((a internal_state__ref)) internal_state 
  (internal_state__content a))

(define-fun dynamic_invariant ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 0 3)) (in_range temp___expr_171)))

;; is_waiting__post_axiom
  (assert true)

;; is_waiting__def_axiom
  (assert
  (forall ((pumpunit__cur_state Int))
  (! (= (= (is_waiting pumpunit__cur_state) true) (= pumpunit__cur_state 2)) :pattern (
  (is_waiting pumpunit__cur_state)) )))

(declare-fun is_ready (Int) Bool)

(declare-fun is_ready__function_guard (Bool Int) Bool)

;; is_ready__post_axiom
  (assert true)

;; is_ready__def_axiom
  (assert
  (forall ((pumpunit__cur_state Int))
  (! (= (= (is_ready pumpunit__cur_state) true) (= pumpunit__cur_state 1)) :pattern (
  (is_ready pumpunit__cur_state)) )))

(assert
;; defqtvc
 ;; File "pumpunit.ads", line 77, characters 0-0
  (not
  (forall ((cur_state Int) (cur_state1 Int))
  (=> (dynamic_invariant cur_state true false true true)
  (=>
  (forall ((cur_state2 Int)) (is_ready__function_guard (is_ready cur_state2)
  cur_state2))
  (=> (= (is_ready cur_state) true)
  (=>
  (let ((o (is_ready cur_state)))
  (and
  (and (is_ready__function_guard o cur_state) (= (= o true) (= cur_state 1)))
  (exists ((spark__branch Bool))
  (and (= spark__branch o)
  (ite (= spark__branch true) (= cur_state1 2) (= cur_state1 cur_state))))))
  (=>
  (forall ((cur_state2 Int)) (is_waiting__function_guard
  (is_waiting cur_state2) cur_state2)) (= (is_waiting cur_state1) true)))))))))
(check-sat)
