;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const last Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((empty__ref 0))
(((empty__refqtmk (empty__content integer)))))
(define-fun empty__ref_empty__content__projection ((a empty__ref)) integer 
  (empty__content a))

(declare-datatypes ((empty__init_wrapper 0))
(((empty__init_wrapperqtmk (rec__value integer)(attr__init Bool)))))
(define-fun empty__init_wrapper_rec__value__projection ((a empty__init_wrapper)) integer 
  (rec__value a))

(define-fun empty__init_wrapper_attr__init__projection ((a empty__init_wrapper)) Bool 
  (attr__init a))

(declare-sort my_nat 0)

(declare-fun my_natqtint (my_nat) Int)

;; my_nat'axiom
  (assert
  (forall ((i my_nat))
  (and (<= 0 (my_natqtint i)) (<= (my_natqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (my_nat my_nat) Bool)

(declare-const dummy3 my_nat)

(declare-datatypes ((my_nat__ref 0))
(((my_nat__refqtmk (my_nat__content my_nat)))))
(define-fun my_nat__ref_my_nat__content__projection ((a my_nat__ref)) my_nat 
  (my_nat__content a))

(declare-datatypes ((my_nat__init_wrapper 0))
(((my_nat__init_wrapperqtmk (rec__value1 my_nat)(attr__init1 Bool)))))
(define-fun my_nat__init_wrapper_rec__value__projection ((a my_nat__init_wrapper)) my_nat 
  (rec__value1 a))

(define-fun my_nat__init_wrapper_attr__init__projection ((a my_nat__init_wrapper)) Bool 
  (attr__init1 a))

(define-fun to_rep1 ((x my_nat)) Int (my_natqtint x))

(declare-fun of_rep1 (Int) my_nat)

;; inversion_axiom
  (assert
  (forall ((x my_nat))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x my_nat)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__empty_type__rec__f empty__init_wrapper)(rec__empty_type__rec__g my_nat__init_wrapper)))))
(define-fun us_split_fields_rec__empty_type__rec__f__projection ((a us_split_fields)) empty__init_wrapper 
  (rec__empty_type__rec__f a))

(define-fun us_split_fields_rec__empty_type__rec__g__projection ((a us_split_fields)) my_nat__init_wrapper 
  (rec__empty_type__rec__g a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__value
                           (rec__empty_type__rec__f (us_split_fields1 a)))) 
                        (to_rep
                        (rec__value
                        (rec__empty_type__rec__f (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__value1
                           (rec__empty_type__rec__g (us_split_fields1 a)))) 
                        (to_rep1
                        (rec__value1
                        (rec__empty_type__rec__g (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const empty_type__rec__f__first__bit Int)

(declare-const empty_type__rec__f__last__bit Int)

(declare-const empty_type__rec__f__position Int)

;; empty_type__rec__f__first__bit_axiom
  (assert (<= 0 empty_type__rec__f__first__bit))

;; empty_type__rec__f__last__bit_axiom
  (assert (< empty_type__rec__f__first__bit empty_type__rec__f__last__bit))

;; empty_type__rec__f__position_axiom
  (assert (<= 0 empty_type__rec__f__position))

(declare-const empty_type__rec__g__first__bit Int)

(declare-const empty_type__rec__g__last__bit Int)

(declare-const empty_type__rec__g__position Int)

;; empty_type__rec__g__first__bit_axiom
  (assert (<= 0 empty_type__rec__g__first__bit))

;; empty_type__rec__g__last__bit_axiom
  (assert (< empty_type__rec__g__first__bit empty_type__rec__g__last__bit))

;; empty_type__rec__g__position_axiom
  (assert (<= 0 empty_type__rec__g__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((rec____ref 0))
(((rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__projection ((a rec____ref)) us_rep 
  (rec____content a))

(define-fun dynamic_invariant1 ((temp___expr_172 us_rep)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or
                                     (= (attr__init
                                        (rec__empty_type__rec__f
                                        (us_split_fields1 temp___expr_172))) true)
                                     (<= 1 last)) (dynamic_property 1 
                                     last
                                     (to_rep
                                     (rec__value
                                     (rec__empty_type__rec__f
                                     (us_split_fields1 temp___expr_172)))))))

(define-fun default_initial_assumption ((temp___expr_173 us_rep)
  (temp___skip_top_level_174 Bool)) Bool (and
                                         (= (attr__init
                                            (rec__empty_type__rec__f
                                            (us_split_fields1
                                            temp___expr_173))) false)
                                         (= (attr__init1
                                            (rec__empty_type__rec__g
                                            (us_split_fields1
                                            temp___expr_173))) false)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_158 Int)
  (temp___is_init_154 Bool) (temp___skip_constant_155 Bool)
  (temp___do_toplevel_156 Bool)
  (temp___do_typ_inv_157 Bool)) Bool (=>
                                     (or (= temp___is_init_154 true)
                                     (<= 1 last)) (dynamic_property 1 
                                     last temp___expr_158)))

;; last__def_axiom
  (assert (= last c))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant4 ((temp___expr_165 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (=>
                                     (or (= temp___is_init_161 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_165)))

(declare-const rliteral my_nat)

;; rliteral_axiom
  (assert (= (my_natqtint rliteral) 3))

(assert
;; defqtvc
 ;; File "empty_type.adb", line 1, characters 0-0
  (not
  (forall ((y Int) (x__split_fields us_split_fields) (y__attr__init Bool)
  (x__split_fields1 us_split_fields))
  (=> (dynamic_invariant c true false true true)
  (=> (= y__attr__init false)
  (=> (dynamic_invariant2 y y__attr__init false true true)
  (=> (default_initial_assumption (us_repqtmk x__split_fields) false)
  (=> (dynamic_invariant1 (us_repqtmk x__split_fields) false false true true)
  (=>
  (= x__split_fields1 (us_split_fieldsqtmk
                      (rec__empty_type__rec__f x__split_fields)
                      (my_nat__init_wrapperqtmk rliteral true)))
  (= (attr__init1 (rec__empty_type__rec__g x__split_fields1)) true))))))))))
(check-sat)
