(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const op Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun size (Int) Int)

(declare-fun size__function_guard (Int Int) Bool)

(declare-sort tlastS 0)

(declare-fun tlastSqtint (tlastS) Int)

;; tlastS'axiom
  (assert
  (forall ((i tlastS)) (and (<= 0 (tlastSqtint i)) (<= (tlastSqtint i) 200))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 200)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tlastS tlastS) Bool)

(declare-const dummy1 tlastS)

(declare-datatypes ((tlastS__ref 0))
(((tlastS__refqtmk (tlastS__content tlastS)))))
(define-fun tlastS__ref_tlastS__content__projection ((a tlastS__ref)) tlastS 
  (tlastS__content a))

(define-fun dynamic_invariant1 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 0 200)) (in_range2 temp___expr_171)))

;; size__post_axiom
  (assert
  (forall ((stack__last Int))
  (! (=> (dynamic_invariant1 stack__last true true true true)
     (let ((result (size stack__last)))
     (=> (size__function_guard result stack__last) (dynamic_invariant result
     true false true true)))) :pattern ((size stack__last)) )))

;; size__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (=> (dynamic_invariant1 stack__last true true true true)
     (= (size stack__last) stack__last)) :pattern ((size stack__last)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__types__value__e integer)))))
(define-fun us_split_fields_rec__types__value__e__projection ((a us_split_fields)) integer 
  (rec__types__value__e a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__types__value__e (us_split_fields1 a))) 
                   (to_rep (rec__types__value__e (us_split_fields1 b)))) true
                   false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const types__value__e__first__bit Int)

(declare-const types__value__e__last__bit Int)

(declare-const types__value__e__position Int)

;; types__value__e__first__bit_axiom
  (assert (<= 0 types__value__e__first__bit))

;; types__value__e__last__bit_axiom
  (assert (< types__value__e__first__bit types__value__e__last__bit))

;; types__value__e__position_axiom
  (assert (<= 0 types__value__e__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((value__ref 0))
(((value__refqtmk (value__content us_rep)))))
(define-fun value__ref_value__content__projection ((a value__ref)) us_rep 
  (value__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun empty (Int) Bool)

(declare-fun empty__function_guard (Bool Int) Bool)

(declare-fun full (Int) Bool)

(declare-fun full__function_guard (Bool Int) Bool)

(declare-sort operation 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (operation operation) Bool)

(declare-const dummy3 operation)

(declare-datatypes ((operation__ref 0))
(((operation__refqtmk (operation__content operation)))))
(define-fun operation__ref_operation__content__projection ((a operation__ref)) operation 
  (operation__content a))

(define-fun dynamic_invariant2 ((temp___expr_162 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)
  (temp___do_typ_inv_161 Bool)) Bool (=>
                                     (or (= temp___is_init_158 true)
                                     (<= 0 3)) (in_range3 temp___expr_162)))

;; empty__post_axiom
  (assert true)

;; empty__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (= (= (empty stack__last) true) (< stack__last 1)) :pattern ((empty
                                                                  stack__last)) )))

;; full__post_axiom
  (assert true)

;; full__def_axiom
  (assert
  (forall ((stack__last Int))
  (! (= (= (full stack__last) true) (<= 200 stack__last)) :pattern ((full
                                                                    stack__last)) )))

(assert
;; defqtvc
 ;; File "values-operations.ads", line 16, characters 0-0
  (not
  (forall ((last Int) (result__ Int) (last1 Int) (last2 Int)
  (v2__split_fields integer) (last3 Int) (last4 Int)
  (v1__split_fields integer) (spark__branch Bool) (spark__branch1 Bool)
  (spark__branch2 Bool) (o Int) (o1 Int))
  (=> (dynamic_invariant2 op true false true true)
  (=> (dynamic_invariant1 last true false true true)
  (=> (forall ((last5 Int)) (size__function_guard (size last5) last5))
  (=> (<= 2 (size last))
  (=> (= last1 last)
  (=> (dynamic_invariant result__ false false true true)
  (=> (forall ((last5 Int)) (size__function_guard (size last5) last5))
  (=> (forall ((last5 Int)) (size__function_guard (size last5) last5))
  (=> (= (size last2) (- (size last1) 1))
  (=> (dynamic_invariant1 last2 true true true true)
  (=> (= last3 last2)
  (=> (forall ((last5 Int)) (size__function_guard (size last5) last5))
  (=> (forall ((last5 Int)) (size__function_guard (size last5) last5))
  (=> (= (size last4) (- (size last3) 1))
  (=> (dynamic_invariant1 last4 true true true true)
  (=>
  (exists ((o2 Bool))
  (and
  (exists ((o3 Bool))
  (and (ite (= op 0) (= o3 true) (not (= o3 true)))
  (ite (= o3 true) (= o2 true) (ite (= op 3) (= o2 true) (not (= o2 true))))))
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 o2)
  (ite (= spark__branch3 true)
  (exists ((temp___220 Int))
  (and (= (to_rep v1__split_fields) temp___220)
  (exists ((spark__branch4 Bool))
  (and
  (= spark__branch4 (ite (= (and (ite (<= (- 1073741823) temp___220) true
                                 false) (ite (<= temp___220 1073741822) true
                                        false)) true)
                    false true))
  (and (not (= spark__branch4 true))
  (exists ((temp___221 Int))
  (and (= (to_rep v2__split_fields) temp___221)
  (and
  (= spark__branch (ite (= (and (ite (<= (- 1073741823) temp___221) true
                                false) (ite (<= temp___221 1073741822) true
                                       false)) true)
                   false true))
  (not (= spark__branch true))))))))))
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (= op 1) true false))
  (ite (= spark__branch4 true)
  (exists ((o3 Int))
  (and (= (to_rep v2__split_fields) o3)
  (and (= spark__branch (ite (= o3 0) true false))
  (not (= spark__branch true))))) (= spark__branch spark__branch4)))))))))
  (=> (= spark__branch1 (ite (= op 0) true false))
  (=> (not (= spark__branch1 true))
  (=> (= spark__branch2 (ite (= op 1) true false))
  (=> (= spark__branch2 true)
  (=> (= (to_rep v2__split_fields) o)
  (=> (= (to_rep v1__split_fields) o1) (in_range1 (div1 o1 o)))))))))))))))))))))))))))
(check-sat)
