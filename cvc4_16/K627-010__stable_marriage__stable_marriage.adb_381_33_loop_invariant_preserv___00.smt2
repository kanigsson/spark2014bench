(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort group1_id 0)

(declare-fun group1_idqtint (group1_id) Int)

;; group1_id'axiom
  (assert
  (forall ((i group1_id))
  (and (<= 1 (group1_idqtint i)) (<= (group1_idqtint i) 64))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (group1_id group1_id) Bool)

(declare-const dummy group1_id)

(declare-datatypes ((group1_id__ref 0))
(((group1_id__refqtmk (group1_id__content group1_id)))))
(define-fun group1_id__ref_group1_id__content__projection ((a group1_id__ref)) group1_id 
  (group1_id__content a))

(define-fun to_rep ((x group1_id)) Int (group1_idqtint x))

(declare-fun of_rep (Int) group1_id)

;; inversion_axiom
  (assert
  (forall ((x group1_id))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x group1_id)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int group1_id))))))
(declare-fun slide ((Array Int group1_id) Int Int) (Array Int group1_id))

;; slide_eq
  (assert
  (forall ((a (Array Int group1_id)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int group1_id)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int group1_id)) (a__first Int) (a__last Int)
  (b (Array Int group1_id)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int group1_id)) (b (Array Int group1_id)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-fun is_permutation_1 ((Array Int group1_id)) Bool)

(declare-fun is_permutation_1__function_guard (Bool
  (Array Int group1_id)) Bool)

;; is_permutation_1__post_axiom
  (assert
  (forall ((r1 (Array Int group1_id)))
  (! (let ((result (is_permutation_1 r1)))
     (=> (is_permutation_1__function_guard result r1)
     (= (= result true)
     (forall ((g1 Int))
     (=> (and (<= 1 g1) (<= g1 64))
     (exists ((rank Int))
     (and (and (<= 1 rank) (<= rank 64)) (= (to_rep (select r1 rank)) g1)))))))) :pattern (
  (is_permutation_1 r1)) )))

(declare-sort group2_id 0)

(declare-fun group2_idqtint (group2_id) Int)

;; group2_id'axiom
  (assert
  (forall ((i group2_id))
  (and (<= 1 (group2_idqtint i)) (<= (group2_idqtint i) 64))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (group2_id group2_id) Bool)

(declare-const dummy1 group2_id)

(declare-datatypes ((group2_id__ref 0))
(((group2_id__refqtmk (group2_id__content group2_id)))))
(define-fun group2_id__ref_group2_id__content__projection ((a group2_id__ref)) group2_id 
  (group2_id__content a))

(define-fun to_rep1 ((x group2_id)) Int (group2_idqtint x))

(declare-fun of_rep1 (Int) group2_id)

;; inversion_axiom
  (assert
  (forall ((x group2_id))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x group2_id)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int group2_id))))))
(declare-fun slide1 ((Array Int group2_id) Int Int) (Array Int group2_id))

;; slide_eq
  (assert
  (forall ((a (Array Int group2_id)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int group2_id)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int group2_id)) (a__first Int) (a__last Int)
  (b (Array Int group2_id)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep1 (select a temp___idx_155)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int group2_id)) (b (Array Int group2_id)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep1 (select a temp___idx_155)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-fun is_permutation_2 ((Array Int group2_id)) Bool)

(declare-fun is_permutation_2__function_guard (Bool
  (Array Int group2_id)) Bool)

;; is_permutation_2__post_axiom
  (assert
  (forall ((r2 (Array Int group2_id)))
  (! (let ((result (is_permutation_2 r2)))
     (=> (is_permutation_2__function_guard result r2)
     (= (= result true)
     (forall ((g2 Int))
     (=> (and (<= 1 g2) (<= g2 64))
     (exists ((rank Int))
     (and (and (<= 1 rank) (<= rank 64)) (= (to_rep1 (select r2 rank)) g2)))))))) :pattern (
  (is_permutation_2 r2)) )))

(declare-fun invert_map ((Array Int group1_id)) (Array Int group2_id))

(declare-fun invert_map__function_guard ((Array Int group2_id)
  (Array Int group1_id)) Bool)

;; invert_map__post_axiom
  (assert
  (forall ((g2_to_g1 (Array Int group1_id)))
  (! (=>
     (forall ((g1 Int))
     (=> (and (<= 1 g1) (<= g1 64))
     (exists ((g2 Int))
     (and (and (<= 1 g2) (<= g2 64)) (= (to_rep (select g2_to_g1 g2)) g1)))))
     (let ((result (invert_map g2_to_g1)))
     (=> (invert_map__function_guard result g2_to_g1)
     (and
     (forall ((g1 Int))
     (=> (and (<= 1 g1) (<= g1 64))
     (= (to_rep (select g2_to_g1 (to_rep1 (select result g1)))) g1)))
     (forall ((g2 Int))
     (=> (and (<= 1 g2) (<= g2 64))
     (= (to_rep1 (select result (to_rep (select g2_to_g1 g2)))) g2))))))) :pattern (
  (invert_map g2_to_g1)) )))

(declare-fun is_preferred_1 (Int Int (Array Int group1_id)) Bool)

(declare-fun is_preferred_1__function_guard (Bool Int Int
  (Array Int group1_id)) Bool)

(declare-sort ranking 0)

(declare-fun rankingqtint (ranking) Int)

;; ranking'axiom
  (assert
  (forall ((i ranking))
  (and (<= 1 (rankingqtint i)) (<= (rankingqtint i) 64))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (ranking ranking) Bool)

(declare-const dummy2 ranking)

(declare-datatypes ((ranking__ref 0))
(((ranking__refqtmk (ranking__content ranking)))))
(define-fun ranking__ref_ranking__content__projection ((a ranking__ref)) ranking 
  (ranking__content a))

(define-fun to_rep2 ((x ranking)) Int (rankingqtint x))

(declare-fun of_rep2 (Int) ranking)

;; inversion_axiom
  (assert
  (forall ((x ranking))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x ranking)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int ranking))))))
(declare-fun slide2 ((Array Int ranking) Int Int) (Array Int ranking))

;; slide_eq
  (assert
  (forall ((a (Array Int ranking)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int ranking)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int ranking)) (a__first Int) (a__last Int)
  (b (Array Int ranking)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_160 Int))
                           (=>
                           (and (<= a__first temp___idx_160)
                           (<= temp___idx_160 a__last))
                           (= (to_rep2 (select a temp___idx_160)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_160)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int ranking)) (b (Array Int ranking)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_160 Int))
  (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last))
  (= (to_rep2 (select a temp___idx_160)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_160)))))))))))

(declare-fun invert_1 ((Array Int group1_id)) (Array Int ranking))

(declare-fun invert_1__function_guard ((Array Int ranking)
  (Array Int group1_id)) Bool)

(define-fun dynamic_invariant ((temp___expr_177 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)
  (temp___do_typ_inv_176 Bool)) Bool (=>
                                     (or (= temp___is_init_173 true)
                                     (<= 1 64)) (in_range1 temp___expr_177)))

;; is_preferred_1__post_axiom
  (assert
  (forall ((g1_a Int) (g1_b Int))
  (forall ((r1 (Array Int group1_id)))
  (! (and
     (forall ((r11 (Array Int group1_id))) (is_permutation_1__function_guard
     (is_permutation_1 r11) r11))
     (=>
     (and
     (and (dynamic_invariant g1_a true true true true) (dynamic_invariant
     g1_b true true true true)) (= (is_permutation_1 r1) true))
     (let ((result (is_preferred_1 g1_a g1_b r1)))
     (and
     (forall ((r11 (Array Int group1_id))) (invert_1__function_guard
     (invert_1 r11) r11))
     (and
     (forall ((r11 (Array Int group1_id))) (invert_1__function_guard
     (invert_1 r11) r11))
     (=> (is_preferred_1__function_guard result g1_a g1_b r1)
     (= (= result true)
     (<= (to_rep2
         (let ((temp___313 (invert_1 r1))) (select temp___313 g1_a))) 
     (to_rep2 (let ((temp___315 (invert_1 r1))) (select temp___315 g1_b))))))))))) :pattern (
  (is_preferred_1 g1_a g1_b r1)) ))))

(declare-fun is_preferred_2 (Int Int (Array Int group2_id)) Bool)

(declare-fun is_preferred_2__function_guard (Bool Int Int
  (Array Int group2_id)) Bool)

(declare-fun invert_2 ((Array Int group2_id)) (Array Int ranking))

(declare-fun invert_2__function_guard ((Array Int ranking)
  (Array Int group2_id)) Bool)

(define-fun dynamic_invariant1 ((temp___expr_184 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)
  (temp___do_typ_inv_183 Bool)) Bool (=>
                                     (or (= temp___is_init_180 true)
                                     (<= 1 64)) (in_range2 temp___expr_184)))

;; is_preferred_2__post_axiom
  (assert
  (forall ((g2_a Int) (g2_b Int))
  (forall ((r2 (Array Int group2_id)))
  (! (and
     (forall ((r21 (Array Int group2_id))) (is_permutation_2__function_guard
     (is_permutation_2 r21) r21))
     (=>
     (and
     (and (dynamic_invariant1 g2_a true true true true) (dynamic_invariant1
     g2_b true true true true)) (= (is_permutation_2 r2) true))
     (let ((result (is_preferred_2 g2_a g2_b r2)))
     (and
     (forall ((r21 (Array Int group2_id))) (invert_2__function_guard
     (invert_2 r21) r21))
     (and
     (forall ((r21 (Array Int group2_id))) (invert_2__function_guard
     (invert_2 r21) r21))
     (=> (is_preferred_2__function_guard result g2_a g2_b r2)
     (= (= result true)
     (<= (to_rep2
         (let ((temp___325 (invert_2 r2))) (select temp___325 g2_a))) 
     (to_rep2 (let ((temp___327 (invert_2 r2))) (select temp___327 g2_b))))))))))) :pattern (
  (is_preferred_2 g2_a g2_b r2)) ))))

(declare-const dummy3 (Array Int group2_id))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq3 ((Array Int group2_id) (Array Int group2_id)) Bool)

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 (Array Int (Array Int group2_id)))))))
(declare-fun slide3 ((Array Int (Array Int group2_id)) Int
  Int) (Array Int (Array Int group2_id)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int group2_id))))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int group2_id))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int (Array Int group2_id))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int group2_id))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq1 (select a temp___idx_156) 1 64
                              (select b (+ (- b__first a__first) temp___idx_156))
                              1 64) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int group2_id)))
  (b (Array Int (Array Int group2_id))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq1 (select a temp___idx_156) 1 64
     (select b (+ (- b__first a__first) temp___idx_156)) 1 64) true))))))))

(declare-const ranking_1 (Array Int (Array Int group2_id)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const dummy4 (Array Int group1_id))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 ((Array Int group1_id) (Array Int group1_id)) Bool)

(declare-datatypes ((map__ref4 0))
(((map__refqtmk4 (map__content4 (Array Int (Array Int group1_id)))))))
(declare-fun slide4 ((Array Int (Array Int group1_id)) Int
  Int) (Array Int (Array Int group1_id)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int group1_id))))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int group1_id))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int (Array Int group1_id))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int group1_id))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (bool_eq (select a temp___idx_157) 1 64
                              (select b (+ (- b__first a__first) temp___idx_157))
                              1 64) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int group1_id)))
  (b (Array Int (Array Int group1_id))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (bool_eq (select a temp___idx_157) 1 64
     (select b (+ (- b__first a__first) temp___idx_157)) 1 64) true))))))))

(declare-const ranking_2 (Array Int (Array Int group1_id)))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const dummy5 (Array Int ranking))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq5 ((Array Int ranking) (Array Int ranking)) Bool)

(declare-datatypes ((map__ref5 0))
(((map__refqtmk5 (map__content5 (Array Int (Array Int ranking)))))))
(declare-fun slide5 ((Array Int (Array Int ranking)) Int
  Int) (Array Int (Array Int ranking)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int ranking))))
  (forall ((first Int))
  (! (= (slide5 a first first) a) :pattern ((slide5 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int ranking))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide5 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide5 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int (Array Int ranking))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int ranking))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_168 Int))
                           (=>
                           (and (<= a__first temp___idx_168)
                           (<= temp___idx_168 a__last))
                           (= (bool_eq2 (select a temp___idx_168) 1 64
                              (select b (+ (- b__first a__first) temp___idx_168))
                              1 64) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int ranking)))
  (b (Array Int (Array Int ranking))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_168 Int))
  (=> (and (<= a__first temp___idx_168) (<= temp___idx_168 a__last))
  (= (bool_eq2 (select a temp___idx_168) 1 64
     (select b (+ (- b__first a__first) temp___idx_168)) 1 64) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count)) (and (<= 0 (countqtint i)) (<= (countqtint i) 64))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (count count) Bool)

(declare-const dummy6 count)

(declare-datatypes ((count__ref 0))
(((count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun to_rep3 ((x count)) Int (countqtint x))

(declare-fun of_rep3 (Int) count)

;; inversion_axiom
  (assert
  (forall ((x count))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x count)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((map__ref6 0))
(((map__refqtmk6 (map__content6 (Array Int count))))))
(declare-fun slide6 ((Array Int count) Int Int) (Array Int count))

;; slide_eq
  (assert
  (forall ((a (Array Int count)))
  (forall ((first Int))
  (! (= (slide6 a first first) a) :pattern ((slide6 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int count)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide6 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide6 a old_first new_first) i)) ))))))

(define-fun bool_eq6 ((a (Array Int count)) (a__first Int) (a__last Int)
  (b (Array Int count)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_169 Int))
                           (=>
                           (and (<= a__first temp___idx_169)
                           (<= temp___idx_169 a__last))
                           (= (to_rep3 (select a temp___idx_169)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_169)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int count)) (b (Array Int count)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_169 Int))
  (=> (and (<= a__first temp___idx_169) (<= temp___idx_169 a__last))
  (= (to_rep3 (select a temp___idx_169)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_169)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const dummy7 (Array Int group1_id))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq7 ((Array Int group1_id) (Array Int group1_id)) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__stable_marriage__matching__group1_set__elements (Array Int group1_id))(rec__stable_marriage__matching__group1_set__cardinality count)))))
(define-fun us_split_fields_rec__stable_marriage__matching__group1_set__elements__projection ((a us_split_fields)) (Array Int group1_id) 
  (rec__stable_marriage__matching__group1_set__elements a))

(define-fun us_split_fields_rec__stable_marriage__matching__group1_set__cardinality__projection ((a us_split_fields)) count 
  (rec__stable_marriage__matching__group1_set__cardinality a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq7 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__stable_marriage__matching__group1_set__elements
                           (us_split_fields1 a)) 1 64
                           (rec__stable_marriage__matching__group1_set__elements
                           (us_split_fields1 b)) 1 64) true)
                        (= (to_rep3
                           (rec__stable_marriage__matching__group1_set__cardinality
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__stable_marriage__matching__group1_set__cardinality
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const stable_marriage__matching__group1_set__elements__first__bit Int)

(declare-const stable_marriage__matching__group1_set__elements__last__bit Int)

(declare-const stable_marriage__matching__group1_set__elements__position Int)

;; stable_marriage__matching__group1_set__elements__first__bit_axiom
  (assert (<= 0 stable_marriage__matching__group1_set__elements__first__bit))

;; stable_marriage__matching__group1_set__elements__last__bit_axiom
  (assert
  (< stable_marriage__matching__group1_set__elements__first__bit stable_marriage__matching__group1_set__elements__last__bit))

;; stable_marriage__matching__group1_set__elements__position_axiom
  (assert (<= 0 stable_marriage__matching__group1_set__elements__position))

(declare-const stable_marriage__matching__group1_set__cardinality__first__bit Int)

(declare-const stable_marriage__matching__group1_set__cardinality__last__bit Int)

(declare-const stable_marriage__matching__group1_set__cardinality__position Int)

;; stable_marriage__matching__group1_set__cardinality__first__bit_axiom
  (assert
  (<= 0 stable_marriage__matching__group1_set__cardinality__first__bit))

;; stable_marriage__matching__group1_set__cardinality__last__bit_axiom
  (assert
  (< stable_marriage__matching__group1_set__cardinality__first__bit stable_marriage__matching__group1_set__cardinality__last__bit))

;; stable_marriage__matching__group1_set__cardinality__position_axiom
  (assert
  (<= 0 stable_marriage__matching__group1_set__cardinality__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((group1_set__ref 0))
(((group1_set__refqtmk (group1_set__content us_rep)))))
(define-fun group1_set__ref_group1_set__content__projection ((a group1_set__ref)) us_rep 
  (group1_set__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-datatypes ((map__ref7 0))
(((map__refqtmk7 (map__content7 (Array Int Bool))))))
(declare-fun slide7 ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide7 a first first) a) :pattern ((slide7 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide7 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide7 a old_first new_first) i)) ))))))

(define-fun bool_eq8 ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_167 Int))
                           (=>
                           (and (<= a__first temp___idx_167)
                           (<= temp___idx_167 a__last))
                           (= (ite (select a temp___idx_167) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_167)) 1 0)))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_167 Int))
  (=> (and (<= a__first temp___idx_167) (<= temp___idx_167 a__last))
  (= (ite (select a temp___idx_167) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_167)) 1 0)))))))))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun invert ((Array Int (Array Int group1_id))) (Array Int (Array Int ranking)))

(declare-fun invert__function_guard ((Array Int (Array Int ranking))
  (Array Int (Array Int group1_id))) Bool)

;; invert__post_axiom
  (assert
  (forall ((r2 (Array Int (Array Int group1_id))))
  (! (and
     (forall ((r21 (Array Int (Array Int group1_id))) (g2 Int))
     (is_permutation_1__function_guard (is_permutation_1 (select r21 g2))
     (select r21 g2)))
     (=>
     (forall ((g2 Int))
     (=> (and (<= 1 g2) (<= g2 64))
     (= (is_permutation_1 (select r2 g2)) true)))
     (let ((result (invert r2)))
     (and
     (forall ((r21 (Array Int (Array Int group1_id))) (g2 Int))
     (invert_1__function_guard (invert_1 (select r21 g2)) (select r21 g2)))
     (=> (invert__function_guard result r2)
     (forall ((g2 Int))
     (=> (and (<= 1 g2) (<= g2 64))
     (= (let ((temp___440 (invert_1 (select r2 g2))))
        (let ((temp___439 (select result g2)))
        (bool_eq2 temp___439 1 64 temp___440 1 64))) true)))))))) :pattern (
  (invert r2)) )))

(declare-fun all_unmatched_g1_set_elements_distinct (us_split_fields) Bool)

(declare-fun all_unmatched_g1_set_elements_distinct__function_guard (Bool
  us_split_fields) Bool)

;; all_unmatched_g1_set_elements_distinct__post_axiom
  (assert true)

;; all_unmatched_g1_set_elements_distinct__def_axiom
  (assert
  (forall
  ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields))
  (! (=
     (= (all_unmatched_g1_set_elements_distinct
        stable_marriage__matching__unmatched_g1_set__fields) true)
     (forall ((idx_1 Int))
     (=>
     (and (<= 1 idx_1)
     (<= idx_1 (to_rep3
               (rec__stable_marriage__matching__group1_set__cardinality
               (us_split_fields1
               (us_repqtmk
               stable_marriage__matching__unmatched_g1_set__fields))))))
     (forall ((idx_2 Int))
     (=>
     (and (<= 1 idx_2)
     (<= idx_2 (to_rep3
               (rec__stable_marriage__matching__group1_set__cardinality
               (us_split_fields1
               (us_repqtmk
               stable_marriage__matching__unmatched_g1_set__fields))))))
     (=> (not (= idx_1 idx_2))
     (not
     (= (to_rep
        (let ((temp___445 (rec__stable_marriage__matching__group1_set__elements
                          (us_split_fields1
                          (us_repqtmk
                          stable_marriage__matching__unmatched_g1_set__fields)))))
        (select temp___445 idx_1))) (to_rep
                                    (let ((temp___446 (rec__stable_marriage__matching__group1_set__elements
                                                      (us_split_fields1
                                                      (us_repqtmk
                                                      stable_marriage__matching__unmatched_g1_set__fields)))))
                                    (select temp___446 idx_2))))))))))) :pattern (
  (all_unmatched_g1_set_elements_distinct
  stable_marriage__matching__unmatched_g1_set__fields)) )))

(declare-fun invariant_holds (us_split_fields (Array Int Bool)
  (Array Int group1_id) (Array Int count)) Bool)

(declare-fun invariant_holds__function_guard (Bool us_split_fields
  (Array Int Bool) (Array Int group1_id) (Array Int count)) Bool)

;; invariant_holds__post_axiom
  (assert true)

;; invariant_holds__def_axiom
  (assert
  (forall
  ((stable_marriage__matching__unmatched_g1_set__fields us_split_fields))
  (forall ((stable_marriage__matching__unmatched_g2_set (Array Int Bool)))
  (forall ((stable_marriage__matching__result (Array Int group1_id)))
  (forall ((stable_marriage__matching__proposals_made (Array Int count)))
  (! (and
     (forall ((g2 Int)) (is_permutation_1__function_guard
     (is_permutation_1 (select ranking_2 g2)) (select ranking_2 g2)))
     (and
     (forall
     ((stable_marriage__matching__unmatched_g1_set__fields1 us_split_fields))
     (all_unmatched_g1_set_elements_distinct__function_guard
     (all_unmatched_g1_set_elements_distinct
     stable_marriage__matching__unmatched_g1_set__fields1)
     stable_marriage__matching__unmatched_g1_set__fields1))
     (and
     (forall ((stable_marriage__matching__result1 (Array Int group1_id))
     (g1_id Int) (rank Int)) (is_preferred_1__function_guard
     (is_preferred_1 g1_id
     (to_rep
     (select stable_marriage__matching__result1 (to_rep1
                                                (let ((temp___470 (select 
                                                ranking_1 g1_id)))
                                                (select temp___470 rank)))))
     (select ranking_2 (to_rep1
                       (let ((temp___471 (select ranking_1 g1_id)))
                       (select temp___471 rank)))))
     g1_id
     (to_rep
     (select stable_marriage__matching__result1 (to_rep1
                                                (let ((temp___470 (select 
                                                ranking_1 g1_id)))
                                                (select temp___470 rank)))))
     (select ranking_2 (to_rep1
                       (let ((temp___471 (select ranking_1 g1_id)))
                       (select temp___471 rank))))))
     (=
     (= (invariant_holds stable_marriage__matching__unmatched_g1_set__fields
        stable_marriage__matching__unmatched_g2_set
        stable_marriage__matching__result
        stable_marriage__matching__proposals_made) true)
     (and
     (forall ((g2 Int))
     (=> (and (<= 1 g2) (<= g2 64))
     (= (is_permutation_1 (select ranking_2 g2)) true)))
     (and
     (and
     (and
     (and
     (and
     (= (all_unmatched_g1_set_elements_distinct
        stable_marriage__matching__unmatched_g1_set__fields) true)
     (forall ((g2_id Int))
     (=> (and (<= 1 g2_id) (<= g2_id 64))
     (=>
     (not
     (= (select stable_marriage__matching__unmatched_g2_set g2_id) true))
     (forall ((idx Int))
     (=>
     (and (<= 1 idx)
     (<= idx (to_rep3
             (rec__stable_marriage__matching__group1_set__cardinality
             (us_split_fields1
             (us_repqtmk stable_marriage__matching__unmatched_g1_set__fields))))))
     (not
     (= (to_rep
        (let ((temp___468 (rec__stable_marriage__matching__group1_set__elements
                          (us_split_fields1
                          (us_repqtmk
                          stable_marriage__matching__unmatched_g1_set__fields)))))
        (select temp___468 idx))) (to_rep
                                  (select stable_marriage__matching__result g2_id))))))))))
     (forall ((g21_id Int))
     (=> (and (<= 1 g21_id) (<= g21_id 64))
     (forall ((g22_id Int))
     (=> (and (<= 1 g22_id) (<= g22_id 64))
     (=>
     (and
     (and
     (not
     (= (select stable_marriage__matching__unmatched_g2_set g21_id) true))
     (not
     (= (select stable_marriage__matching__unmatched_g2_set g22_id) true)))
     (not (= g21_id g22_id)))
     (not
     (= (to_rep (select stable_marriage__matching__result g21_id)) (to_rep
                                                                   (select stable_marriage__matching__result g22_id))))))))))
     (forall ((g1_id Int))
     (=> (and (<= 1 g1_id) (<= g1_id 64))
     (forall ((rank Int))
     (=>
     (and (<= 1 rank)
     (<= rank (to_rep3
              (select stable_marriage__matching__proposals_made g1_id))))
     (and
     (not
     (= (select stable_marriage__matching__unmatched_g2_set (to_rep1
                                                            (let ((temp___469 (select 
                                                            ranking_1 g1_id)))
                                                            (select temp___469 rank)))) true))
     (=>
     (not
     (= (to_rep
        (select stable_marriage__matching__result (to_rep1
                                                  (let ((temp___473 (select 
                                                  ranking_1 g1_id)))
                                                  (select temp___473 rank))))) g1_id))
     (not
     (= (is_preferred_1 g1_id
        (to_rep
        (select stable_marriage__matching__result (to_rep1
                                                  (let ((temp___470 (select 
                                                  ranking_1 g1_id)))
                                                  (select temp___470 rank)))))
        (select ranking_2 (to_rep1
                          (let ((temp___471 (select ranking_1 g1_id)))
                          (select temp___471 rank))))) true)))))))))
     (forall ((g1_id Int))
     (=> (and (<= 1 g1_id) (<= g1_id 64))
     (=>
     (= (to_rep3 (select stable_marriage__matching__proposals_made g1_id)) 0)
     (exists ((idx Int))
     (and
     (and (<= 1 idx)
     (<= idx (to_rep3
             (rec__stable_marriage__matching__group1_set__cardinality
             (us_split_fields1
             (us_repqtmk stable_marriage__matching__unmatched_g1_set__fields))))))
     (= (to_rep
        (let ((temp___474 (rec__stable_marriage__matching__group1_set__elements
                          (us_split_fields1
                          (us_repqtmk
                          stable_marriage__matching__unmatched_g1_set__fields)))))
        (select temp___474 idx))) g1_id)))))))
     (forall ((g1_id Int))
     (=> (and (<= 1 g1_id) (<= g1_id 64))
     (=>
     (forall ((idx Int))
     (=>
     (and (<= 1 idx)
     (<= idx (to_rep3
             (rec__stable_marriage__matching__group1_set__cardinality
             (us_split_fields1
             (us_repqtmk stable_marriage__matching__unmatched_g1_set__fields))))))
     (not
     (= (to_rep
        (let ((temp___476 (rec__stable_marriage__matching__group1_set__elements
                          (us_split_fields1
                          (us_repqtmk
                          stable_marriage__matching__unmatched_g1_set__fields)))))
        (select temp___476 idx))) g1_id))))
     (and
     (< 0 (to_rep3 (select stable_marriage__matching__proposals_made g1_id)))
     (= (to_rep
        (select stable_marriage__matching__result (to_rep1
                                                  (let ((temp___475 (select 
                                                  ranking_1 g1_id)))
                                                  (select temp___475 
                                                  (to_rep3
                                                  (select stable_marriage__matching__proposals_made g1_id))))))) g1_id))))))))))) :pattern (
  (invariant_holds stable_marriage__matching__unmatched_g1_set__fields
  stable_marriage__matching__unmatched_g2_set
  stable_marriage__matching__result
  stable_marriage__matching__proposals_made)) ))))))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const c172b Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 1 (indexqtint i)) (<= (indexqtint i) 64))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (index index) Bool)

(declare-const dummy9 index)

(declare-datatypes ((index__ref 0))
(((index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(declare-fun stable_marriage__matching__proposals_made__aggregate_def (Int) (Array Int count))

(declare-fun temp_____aggregate_def_611 (Int) (Array Int group1_id))

(declare-fun stable_marriage__matching__unmatched_g2_set__aggregate_def (Bool) (Array Int Bool))

(declare-fun stable_marriage__matching__result__aggregate_def (Int) (Array Int group1_id))

(define-fun dynamic_invariant2 ((temp___expr_377 Int)
  (temp___is_init_373 Bool) (temp___skip_constant_374 Bool)
  (temp___do_toplevel_375 Bool)
  (temp___do_typ_inv_376 Bool)) Bool (=>
                                     (or (= temp___is_init_373 true)
                                     (<= 0 64)) (in_range4 temp___expr_377)))

(define-fun dynamic_invariant3 ((temp___expr_384 Int)
  (temp___is_init_380 Bool) (temp___skip_constant_381 Bool)
  (temp___do_toplevel_382 Bool)
  (temp___do_typ_inv_383 Bool)) Bool (=>
                                     (or (= temp___is_init_380 true)
                                     (<= 1 64)) (in_range5 temp___expr_384)))

(declare-const rliteral count)

;; rliteral_axiom
  (assert (= (countqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___609 Int))
  (=> (dynamic_invariant2 temp___609 true true true true)
  (forall ((temp___610 Int))
  (= (select (stable_marriage__matching__proposals_made__aggregate_def
             temp___609) temp___610) rliteral)))))

(declare-const rliteral1 group1_id)

;; rliteral_axiom
  (assert (= (group1_idqtint rliteral1) 64))

;; def_axiom
  (assert
  (forall ((temp___613 Int))
  (=> (dynamic_invariant temp___613 true true true true)
  (forall ((temp___614 Int))
  (= (select (temp_____aggregate_def_611 temp___613) temp___614) rliteral1)))))

;; def_axiom
  (assert
  (forall ((temp___616 Bool))
  (forall ((temp___617 Int))
  (= (select (stable_marriage__matching__unmatched_g2_set__aggregate_def
             temp___616) temp___617) temp___616))))

;; def_axiom
  (assert
  (forall ((temp___619 Int))
  (=> (dynamic_invariant temp___619 true true true true)
  (forall ((temp___620 Int))
  (= (select (stable_marriage__matching__result__aggregate_def temp___619) temp___620) 
  rliteral1)))))

(define-fun dynamic_invariant4 ((temp___expr_191 Int)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)
  (temp___do_typ_inv_190 Bool)) Bool (=>
                                     (or (= temp___is_init_187 true)
                                     (<= 1 64)) (in_range3 temp___expr_191)))

;; invert_1__post_axiom
  (assert
  (forall ((r1 (Array Int group1_id)))
  (! (and
     (forall ((r11 (Array Int group1_id))) (is_permutation_1__function_guard
     (is_permutation_1 r11) r11))
     (=> (= (is_permutation_1 r1) true)
     (let ((result (invert_1 r1)))
     (=> (invert_1__function_guard result r1)
     (and
     (forall ((rank Int))
     (=> (and (<= 1 rank) (<= rank 64))
     (= (to_rep2 (select result (to_rep (select r1 rank)))) rank)))
     (forall ((g1 Int))
     (=> (and (<= 1 g1) (<= g1 64))
     (= (to_rep (select r1 (to_rep2 (select result g1)))) g1)))))))) :pattern (
  (invert_1 r1)) )))

;; invert_2__post_axiom
  (assert
  (forall ((r2 (Array Int group2_id)))
  (! (and
     (forall ((r21 (Array Int group2_id))) (is_permutation_2__function_guard
     (is_permutation_2 r21) r21))
     (=> (= (is_permutation_2 r2) true)
     (let ((result (invert_2 r2)))
     (=> (invert_2__function_guard result r2)
     (and
     (forall ((rank Int))
     (=> (and (<= 1 rank) (<= rank 64))
     (= (to_rep2 (select result (to_rep1 (select r2 rank)))) rank)))
     (forall ((g2 Int))
     (=> (and (<= 1 g2) (<= g2 64))
     (= (to_rep1 (select r2 (to_rep2 (select result g2)))) g2)))))))) :pattern (
  (invert_2 r2)) )))

(assert
;; defqtvc
 ;; File "stable_marriage.ads", line 88, characters 0-0
  (not
  (forall ((proposals_made (Array Int count))
  (unmatched_g1_set__split_fields us_split_fields)
  (unmatched_g2_set (Array Int Bool)) (result__ (Array Int group1_id)))
  (=>
  (forall ((g1 Int)) (is_permutation_2__function_guard
  (is_permutation_2 (select ranking_1 g1)) (select ranking_1 g1)))
  (=>
  (forall ((g1 Int))
  (=> (and (<= 1 g1) (<= g1 64))
  (= (is_permutation_2 (select ranking_1 g1)) true)))
  (=>
  (forall ((g2 Int)) (is_permutation_1__function_guard
  (is_permutation_1 (select ranking_2 g2)) (select ranking_2 g2)))
  (=>
  (forall ((g2 Int))
  (=> (and (<= 1 g2) (<= g2 64))
  (= (is_permutation_1 (select ranking_2 g2)) true)))
  (=>
  (= proposals_made (stable_marriage__matching__proposals_made__aggregate_def
                    0))
  (=>
  (= unmatched_g1_set__split_fields (us_split_fieldsqtmk
                                    (temp_____aggregate_def_611 64) rliteral))
  (=>
  (= unmatched_g2_set (stable_marriage__matching__unmatched_g2_set__aggregate_def
                      (distinct 1 0)))
  (=> (= result__ (stable_marriage__matching__result__aggregate_def 64))
  (let ((o ranking_2))
  (let ((o1 (invert o)))
  (=>
  (forall ((o2 (Array Int (Array Int group1_id))) (g2 Int))
  (invert_1__function_guard (invert_1 (select o2 g2)) (select o2 g2)))
  (=>
  (and (invert__function_guard o1 o)
  (forall ((g2 Int))
  (=> (and (<= 1 g2) (<= g2 64))
  (= (bool_eq2 (select o1 g2) 1 64 (invert_1 (select o g2)) 1 64) true))))
  (forall ((ranking_2_inverted (Array Int (Array Int ranking))))
  (=> (= ranking_2_inverted o1)
  (forall ((g1 Int))
  (=> (= g1 1)
  (=> (= (and (ite (<= 1 g1) true false) (ite (<= g1 64) true false)) true)
  (forall ((o2 Int))
  (=>
  (= (to_rep3
     (rec__stable_marriage__matching__group1_set__cardinality
     unmatched_g1_set__split_fields)) o2)
  (forall ((unmatched_g1_set__split_fields1 us_split_fields) (g11 Int))
  (=>
  (forall ((unmatched_g1_set__split_fields2 us_split_fields))
  (all_unmatched_g1_set_elements_distinct__function_guard
  (all_unmatched_g1_set_elements_distinct unmatched_g1_set__split_fields2)
  unmatched_g1_set__split_fields2))
  (=>
  (and
  (= (to_rep3
     (rec__stable_marriage__matching__group1_set__cardinality
     unmatched_g1_set__split_fields1)) (- g11 1))
  (and
  (= (all_unmatched_g1_set_elements_distinct unmatched_g1_set__split_fields1) true)
  (forall ((prev Int))
  (=> (and (<= 1 prev) (<= prev (- g11 1)))
  (= (to_rep
     (select (rec__stable_marriage__matching__group1_set__elements
             unmatched_g1_set__split_fields1) prev)) prev)))))
  (=>
  (= (and (ite (in_range1 g11) true false) (ite (and (<= 1 g11) (<= g11 64))
                                           true false)) true)
  (=> (= g11 c172b)
  (=> (dynamic_invariant c172b true false true true)
  (forall ((o3 Int))
  (=>
  (= (to_rep3
     (rec__stable_marriage__matching__group1_set__cardinality
     unmatched_g1_set__split_fields1)) o3)
  (let ((o4 (+ o3 1)))
  (=> (in_range4 o4)
  (forall ((o5 count))
  (=> (= (to_rep3 o5) o4)
  (forall ((unmatched_g1_set__split_fields2 us_split_fields))
  (=>
  (= unmatched_g1_set__split_fields2 (us_split_fieldsqtmk
                                     (rec__stable_marriage__matching__group1_set__elements
                                     unmatched_g1_set__split_fields1) o5))
  (forall ((o6 group1_id))
  (=> (= (to_rep o6) c172b)
  (forall ((temp___626 Int))
  (=>
  (= (to_rep3
     (rec__stable_marriage__matching__group1_set__cardinality
     unmatched_g1_set__split_fields2)) temp___626)
  (=> (and (<= 1 temp___626) (<= temp___626 64))
  (forall ((unmatched_g1_set__split_fields3 us_split_fields))
  (=>
  (= unmatched_g1_set__split_fields3 (us_split_fieldsqtmk
                                     (store (rec__stable_marriage__matching__group1_set__elements
                                            unmatched_g1_set__split_fields2) temp___626 o6)
                                     (rec__stable_marriage__matching__group1_set__cardinality
                                     unmatched_g1_set__split_fields2)))
  (=> (not (= g11 64))
  (forall ((g12 Int))
  (=> (= g12 (+ g11 1))
  (forall ((o7 Int))
  (=>
  (= (to_rep3
     (rec__stable_marriage__matching__group1_set__cardinality
     unmatched_g1_set__split_fields3)) o7)
  (=>
  (= (to_rep3
     (rec__stable_marriage__matching__group1_set__cardinality
     unmatched_g1_set__split_fields3)) (- g12 1))
  (=>
  (forall ((unmatched_g1_set__split_fields4 us_split_fields))
  (all_unmatched_g1_set_elements_distinct__function_guard
  (all_unmatched_g1_set_elements_distinct unmatched_g1_set__split_fields4)
  unmatched_g1_set__split_fields4))
  (= (all_unmatched_g1_set_elements_distinct unmatched_g1_set__split_fields3) true)))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
