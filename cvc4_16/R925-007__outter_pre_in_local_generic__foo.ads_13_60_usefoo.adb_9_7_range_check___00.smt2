(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const b__first integer)

(declare-const b__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const pos Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const r59b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r60b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort natural_without_last 0)

(declare-fun natural_without_lastqtint (natural_without_last) Int)

;; natural_without_last'axiom
  (assert
  (forall ((i natural_without_last))
  (and (<= 1 (natural_without_lastqtint i))
  (<= (natural_without_lastqtint i) 2147483646))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483646)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (natural_without_last natural_without_last) Bool)

(declare-const dummy2 natural_without_last)

(declare-datatypes ((natural_without_last__ref 0))
(((natural_without_last__refqtmk
  (natural_without_last__content natural_without_last)))))
(define-fun natural_without_last__ref_natural_without_last__content__projection ((a natural_without_last__ref)) natural_without_last 
  (natural_without_last__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((buffer__ref 0))
(((buffer__refqtmk (buffer__content us_t)))))
(define-fun buffer__ref_buffer__content__projection ((a buffer__ref)) us_t 
  (buffer__content a))

(declare-datatypes ((t56b__ref 0))
(((t56b__refqtmk (t56b__content us_t)))))
(define-fun t56b__ref_t56b__content__projection ((a t56b__ref)) us_t 
  (t56b__content a))

(declare-datatypes ((t57b__ref 0))
(((t57b__refqtmk (t57b__content us_t)))))
(define-fun t57b__ref_t57b__content__projection ((a t57b__ref)) us_t 
  (t57b__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes ((t51b__ref 0))
(((t51b__refqtmk (t51b__content integer)))))
(define-fun t51b__ref_t51b__content__projection ((a t51b__ref)) integer 
  (t51b__content a))

(declare-datatypes ((t52b__ref 0))
(((t52b__refqtmk (t52b__content us_t)))))
(define-fun t52b__ref_t52b__content__projection ((a t52b__ref)) us_t 
  (t52b__content a))

(declare-datatypes ((t64b__ref 0))
(((t64b__refqtmk (t64b__content us_t)))))
(define-fun t64b__ref_t64b__content__projection ((a t64b__ref)) us_t 
  (t64b__content a))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)
  (temp___do_typ_inv_163 Bool)) Bool (=>
                                     (or (= temp___is_init_160 true)
                                     (<= 1 2147483646)) (in_range3
                                     temp___expr_164)))

(define-fun dynamic_invariant3 ((temp___expr_171 us_t)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (not (= temp___skip_constant_168 true))
                                     (dynamic_property 1 2147483646
                                     (first1 temp___expr_171)
                                     (last1 temp___expr_171))))

(assert
;; defqtvc
 ;; File "foo.ads", line 7, characters 0-0
  (not
  (forall ((b (Array Int integer)) (o Int) (o1 Int))
  (=> (dynamic_property 1 2147483646 (to_rep b__first) (to_rep b__last))
  (=> (dynamic_invariant pos true false true true)
  (=> (= (to_rep b__last) o)
  (=> (= (to_rep b__first) o1)
  (let ((o2 (length o1 o)))
  (=> (in_range1 o2)
  (forall ((o3 Int))
  (=> (= (to_rep b__first) o3)
  (let ((o4 (+ o3 (div1 o2 2))))
  (=> (in_range1 o4)
  (let ((o5 (- o4 1)))
  (=> (in_range1 o5)
  (forall ((temp___204 Int))
  (=> (= (to_rep b__first) temp___204)
  (=>
  (=> (<= temp___204 o5)
  (and
  (and (<= (to_rep b__first) temp___204) (<= temp___204 (to_rep b__last)))
  (and (<= (to_rep b__first) o5) (<= o5 (to_rep b__last)))))
  (=> (= (first1 (of_array b temp___204 o5)) r59b)
  (=> (dynamic_invariant1 r59b true false true true)
  (forall ((o6 Int))
  (=> (= (to_rep b__last) o6)
  (forall ((o7 Int))
  (=> (= (to_rep b__first) o7)
  (let ((o8 (length o7 o6)))
  (=> (in_range1 o8)
  (forall ((o9 Int))
  (=> (= (to_rep b__first) o9)
  (let ((o10 (+ o9 (div1 o8 2))))
  (=> (in_range1 o10)
  (let ((o11 (- o10 1)))
  (=> (in_range1 o11)
  (forall ((temp___206 Int))
  (=> (= (to_rep b__first) temp___206)
  (=>
  (=> (<= temp___206 o11)
  (and
  (and (<= (to_rep b__first) temp___206) (<= temp___206 (to_rep b__last)))
  (and (<= (to_rep b__first) o11) (<= o11 (to_rep b__last)))))
  (=> (= (last1 (of_array b temp___206 o11)) r60b)
  (=> (dynamic_invariant1 r60b true false true true)
  (forall ((o12 Int))
  (=> (= (to_rep b__last) o12)
  (forall ((o13 Int))
  (=> (= (to_rep b__first) o13)
  (let ((o14 (length o13 o12)))
  (=> (in_range1 o14)
  (forall ((o15 Int))
  (=> (= (to_rep b__first) o15)
  (let ((o16 (+ o15 (div1 o14 2))))
  (=> (in_range1 o16)
  (let ((o17 (- o16 1)))
  (=> (in_range1 o17)
  (forall ((temp___208 Int))
  (=> (= (to_rep b__first) temp___208)
  (=>
  (=> (<= temp___208 o17)
  (and
  (and (<= (to_rep b__first) temp___208) (<= temp___208 (to_rep b__last)))
  (and (<= (to_rep b__first) o17) (<= o17 (to_rep b__last)))))
  (=>
  (not
  (= (and (ite (<= r59b pos) true false) (ite (<= pos r60b) true false)) true))
  (forall ((o18 Int))
  (=> (= (to_rep b__last) o18)
  (forall ((o19 Int))
  (=> (= (to_rep b__first) o19)
  (let ((o20 (length o19 o18)))
  (=> (in_range1 o20)
  (forall ((o21 Int))
  (=> (= (to_rep b__first) o21)
  (let ((o22 (+ o21 (div1 o20 2))))
  (=> (in_range1 o22)
  (let ((o23 (- o22 1)))
  (=> (in_range1 o23)
  (forall ((temp___211 Int))
  (=> (= (to_rep b__first) temp___211)
  (=>
  (=> (<= temp___211 o23)
  (and
  (and (<= (to_rep b__first) temp___211) (<= temp___211 (to_rep b__last)))
  (and (<= (to_rep b__first) o23) (<= o23 (to_rep b__last)))))
  (forall ((o24 Int))
  (=> (= (to_rep b__last) o24)
  (forall ((o25 Int))
  (=> (= (to_rep b__first) o25)
  (forall ((o26 Int))
  (=> (= (to_rep b__first) o26)
  (forall ((o27 Int))
  (=> (= (to_rep b__first) o27) (dynamic_property1 o27
  (- (+ o26 (div1 (length o25 o24) 2)) 1)
  (first1 (of_array b temp___211 o23)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
