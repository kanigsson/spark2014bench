;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const x Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort t_acc 0)

(define-fun in_range1 ((x1 Float32)) Bool (and (fp.isFinite32 x1)
                                          (and
                                          (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x1)
                                          (fp.leq x1 (fp #b0 #b10000011 #b00000000000000000000000)))))

(declare-fun user_eq (t_acc t_acc) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy t_acc)

(declare-datatypes ((t_acc__ref 0))
(((t_acc__refqtmk (t_acc__content t_acc)))))
(define-fun t_acc__ref_t_acc__content__projection ((a t_acc__ref)) t_acc 
  (t_acc__content a))

(define-fun dynamic_invariant ((temp___expr_192 Float32)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)
  (temp___do_typ_inv_191 Bool)) Bool (=>
                                     (or (= temp___is_init_188 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                     (in_range1 temp___expr_192)))

(declare-sort t_acc_lifted 0)

(define-fun in_range2 ((x1 Float32)) Bool (and (fp.isFinite32 x1)
                                          (and
                                          (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) x1)
                                          (fp.leq x1 (fp #b0 #b10000011 #b00000000000000000000000)))))

(declare-fun user_eq1 (t_acc_lifted t_acc_lifted) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy1 t_acc_lifted)

(declare-datatypes ((t_acc_lifted__ref 0))
(((t_acc_lifted__refqtmk (t_acc_lifted__content t_acc_lifted)))))
(define-fun t_acc_lifted__ref_t_acc_lifted__content__projection ((a t_acc_lifted__ref)) t_acc_lifted 
  (t_acc_lifted__content a))

(define-fun dynamic_invariant1 ((temp___expr_199 Float32)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_195 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000011 #b00000000000000000000000)) (fp #b0 #b10000011 #b00000000000000000000000)))
                                     (in_range2 temp___expr_199))
                                     (=> (= temp___do_toplevel_197 true)
                                     (=> (= temp___is_init_195 true)
                                     (or
                                     (or
                                     (fp.eq temp___expr_199 (fp #b0 #b00000000 #b00000000000000000000000))
                                     (fp.leq temp___expr_199 (fp.neg (fp #b0 #b00110101 #b00000000000000000000000))))
                                     (fp.leq (fp #b0 #b00110101 #b00000000000000000000000) temp___expr_199))))))

(define-fun dynamic_predicate ((temp___203 Float32)) Bool (or
                                                          (or
                                                          (fp.eq temp___203 (fp #b0 #b00000000 #b00000000000000000000000))
                                                          (fp.leq temp___203 (fp.neg (fp #b0 #b00110101 #b00000000000000000000000))))
                                                          (fp.leq (fp #b0 #b00110101 #b00000000000000000000000) temp___203)))

(assert
;; defqtvc
 ;; File "safety_pack.ads", line 58, characters 0-0
  (not
  (forall ((res Float32))
  (=> (dynamic_invariant x true false true true)
  (=> (dynamic_invariant1 res false false true true)
  (forall ((spark__branch Bool))
  (=>
  (= spark__branch (ite (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))
                   true false))
  (=> (not (= spark__branch true))
  (forall ((spark__branch1 Bool))
  (=>
  (= spark__branch1 (and (ite (fp.leq (fp.neg (fp #b0 #b00110101 #b00000000000000000000000)) 
                         x) true false) (ite (fp.leq x (fp #b0 #b00000000 #b00000000000000000000000))
                                        true false)))
  (=> (not (= spark__branch1 true))
  (forall ((spark__branch2 Bool))
  (=>
  (= spark__branch2 (and (ite (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) 
                         x) true false) (ite (fp.leq x (fp #b0 #b00110101 #b00000000000000000000000))
                                        true false)))
  (=> (= spark__branch2 true)
  (or
  (or
  (fp.eq (fp #b0 #b00110101 #b00000000000000000000000) (fp #b0 #b00000000 #b00000000000000000000000))
  (fp.leq (fp #b0 #b00110101 #b00000000000000000000000) (fp.neg (fp #b0 #b00110101 #b00000000000000000000000))))
  (fp.leq (fp #b0 #b00110101 #b00000000000000000000000) (fp #b0 #b00110101 #b00000000000000000000000)))))))))))))))))
(check-sat)
