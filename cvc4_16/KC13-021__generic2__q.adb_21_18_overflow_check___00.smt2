;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(declare-sort t1 0)

(declare-fun t1qtint (t1) Int)

;; t1'axiom
  (assert
  (forall ((i t1))
  (and (<= (- 2147483648) (t1qtint i)) (<= (t1qtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (t1 t1) Bool)

(declare-const dummy2 t1)

(declare-datatypes ((t1__ref 0))
(((t1__refqtmk (t1__content t1)))))
(define-fun t1__ref_t1__content__projection ((a t1__ref)) t1 (t1__content a))

(define-fun to_rep1 ((x t1)) Int (t1qtint x))

(declare-fun of_rep1 (Int) t1)

;; inversion_axiom
  (assert
  (forall ((x t1)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x t1)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t3 0)

(declare-fun t3qtint (t3) Int)

;; t3'axiom
  (assert
  (forall ((i t3)) (and (<= 0 (t3qtint i)) (<= (t3qtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (t3 t3) Bool)

(declare-const dummy3 t3)

(declare-datatypes ((t3__ref 0))
(((t3__refqtmk (t3__content t3)))))
(define-fun t3__ref_t3__content__projection ((a t3__ref)) t3 (t3__content a))

(define-fun to_rep2 ((x t3)) Int (t3qtint x))

(declare-fun of_rep2 (Int) t3)

;; inversion_axiom
  (assert
  (forall ((x t3)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x t3)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__q__p1__r__a t1)(rec__q__p1__r__b Bool)(rec__q__p1__r__c t3)(rec__q__p1__r__d integer)))))
(define-fun us_split_fields_rec__q__p1__r__a__projection ((a us_split_fields)) t1 
  (rec__q__p1__r__a a))

(define-fun us_split_fields_rec__q__p1__r__b__projection ((a us_split_fields)) Bool 
  (rec__q__p1__r__b a))

(define-fun us_split_fields_rec__q__p1__r__c__projection ((a us_split_fields)) t3 
  (rec__q__p1__r__c a))

(define-fun us_split_fields_rec__q__p1__r__d__projection ((a us_split_fields)) integer 
  (rec__q__p1__r__d a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1 (rec__q__p1__r__a (us_split_fields1 a))) 
                        (to_rep1 (rec__q__p1__r__a (us_split_fields1 b))))
                        (= (ite (rec__q__p1__r__b (us_split_fields1 a)) 1 0) (ite 
                        (rec__q__p1__r__b (us_split_fields1 b)) 1 0)))
                        (and
                        (= (to_rep2 (rec__q__p1__r__c (us_split_fields1 a))) 
                        (to_rep2 (rec__q__p1__r__c (us_split_fields1 b))))
                        (= (to_rep (rec__q__p1__r__d (us_split_fields1 a))) 
                        (to_rep (rec__q__p1__r__d (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const q__p1__r__a__first__bit Int)

(declare-const q__p1__r__a__last__bit Int)

(declare-const q__p1__r__a__position Int)

;; q__p1__r__a__first__bit_axiom
  (assert (<= 0 q__p1__r__a__first__bit))

;; q__p1__r__a__last__bit_axiom
  (assert (< q__p1__r__a__first__bit q__p1__r__a__last__bit))

;; q__p1__r__a__position_axiom
  (assert (<= 0 q__p1__r__a__position))

(declare-const q__p1__r__b__first__bit Int)

(declare-const q__p1__r__b__last__bit Int)

(declare-const q__p1__r__b__position Int)

;; q__p1__r__b__first__bit_axiom
  (assert (<= 0 q__p1__r__b__first__bit))

;; q__p1__r__b__last__bit_axiom
  (assert (< q__p1__r__b__first__bit q__p1__r__b__last__bit))

;; q__p1__r__b__position_axiom
  (assert (<= 0 q__p1__r__b__position))

(declare-const q__p1__r__c__first__bit Int)

(declare-const q__p1__r__c__last__bit Int)

(declare-const q__p1__r__c__position Int)

;; q__p1__r__c__first__bit_axiom
  (assert (<= 0 q__p1__r__c__first__bit))

;; q__p1__r__c__last__bit_axiom
  (assert (< q__p1__r__c__first__bit q__p1__r__c__last__bit))

;; q__p1__r__c__position_axiom
  (assert (<= 0 q__p1__r__c__position))

(declare-const q__p1__r__d__first__bit Int)

(declare-const q__p1__r__d__last__bit Int)

(declare-const q__p1__r__d__position Int)

;; q__p1__r__d__first__bit_axiom
  (assert (<= 0 q__p1__r__d__first__bit))

;; q__p1__r__d__last__bit_axiom
  (assert (< q__p1__r__d__first__bit q__p1__r__d__last__bit))

;; q__p1__r__d__position_axiom
  (assert (<= 0 q__p1__r__d__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((r__ref 0))
(((r__refqtmk (r__content us_rep)))))
(define-fun r__ref_r__content__projection ((a r__ref)) us_rep (r__content a))

(declare-fun pack (Int Bool Int) us_rep)

(declare-fun pack__function_guard (us_rep Int Bool Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_161 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)
  (temp___do_typ_inv_160 Bool)) Bool (=>
                                     (or (= temp___is_init_157 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range3 temp___expr_161)))

(define-fun dynamic_invariant3 ((temp___expr_168 Int)
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool)
  (temp___do_typ_inv_167 Bool)) Bool (=>
                                     (or (= temp___is_init_164 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_168)))

;; pack__post_axiom
  (assert true)

(declare-const x1 Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const x2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort t2 0)

(declare-fun t2qtint (t2) Int)

;; t2'axiom
  (assert
  (forall ((i t2))
  (and (<= (- 2147483648) (t2qtint i)) (<= (t2qtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (t2 t2) Bool)

(declare-const dummy5 t2)

(declare-datatypes ((t2__ref 0))
(((t2__refqtmk (t2__content t2)))))
(define-fun t2__ref_t2__content__projection ((a t2__ref)) t2 (t2__content a))

(define-fun to_rep3 ((x t2)) Int (t2qtint x))

(declare-fun of_rep3 (Int) t2)

;; inversion_axiom
  (assert
  (forall ((x t2)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x t2)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort t31 0)

(declare-fun t3qtint1 (t31) Int)

;; t3'axiom
  (assert
  (forall ((i t31)) (and (<= 0 (t3qtint1 i)) (<= (t3qtint1 i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (t31 t31) Bool)

(declare-const dummy6 t31)

(declare-datatypes ((t3__ref1 0))
(((t3__refqtmk1 (t3__content1 t31)))))
(define-fun t3__ref_t3__content__2__projection ((a t3__ref1)) t31 (t3__content1
                                                                  a))

(define-fun to_rep4 ((x t31)) Int (t3qtint1 x))

(declare-fun of_rep4 (Int) t31)

;; inversion_axiom
  (assert
  (forall ((x t31)) (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x t31)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__q__p2__r__a Bool)(rec__q__p2__r__b t2)(rec__q__p2__r__c t31)(rec__q__p2__r__d integer)))))
(define-fun us_split_fields_rec__q__p2__r__a__projection ((a us_split_fields2)) Bool 
  (rec__q__p2__r__a a))

(define-fun us_split_fields_rec__q__p2__r__b__projection ((a us_split_fields2)) t2 
  (rec__q__p2__r__b a))

(define-fun us_split_fields_rec__q__p2__r__c__projection ((a us_split_fields2)) t31 
  (rec__q__p2__r__c a))

(define-fun us_split_fields_rec__q__p2__r__d__projection ((a us_split_fields2)) integer 
  (rec__q__p2__r__d a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (ite (rec__q__p2__r__a (us_split_fields3 a)) 1 0) (ite 
                         (rec__q__p2__r__a (us_split_fields3 b)) 1 0))
                         (= (to_rep3 (rec__q__p2__r__b (us_split_fields3 a))) 
                         (to_rep3 (rec__q__p2__r__b (us_split_fields3 b)))))
                         (and
                         (= (to_rep4 (rec__q__p2__r__c (us_split_fields3 a))) 
                         (to_rep4 (rec__q__p2__r__c (us_split_fields3 b))))
                         (= (to_rep (rec__q__p2__r__d (us_split_fields3 a))) 
                         (to_rep (rec__q__p2__r__d (us_split_fields3 b))))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const q__p2__r__a__first__bit Int)

(declare-const q__p2__r__a__last__bit Int)

(declare-const q__p2__r__a__position Int)

;; q__p2__r__a__first__bit_axiom
  (assert (<= 0 q__p2__r__a__first__bit))

;; q__p2__r__a__last__bit_axiom
  (assert (< q__p2__r__a__first__bit q__p2__r__a__last__bit))

;; q__p2__r__a__position_axiom
  (assert (<= 0 q__p2__r__a__position))

(declare-const q__p2__r__b__first__bit Int)

(declare-const q__p2__r__b__last__bit Int)

(declare-const q__p2__r__b__position Int)

;; q__p2__r__b__first__bit_axiom
  (assert (<= 0 q__p2__r__b__first__bit))

;; q__p2__r__b__last__bit_axiom
  (assert (< q__p2__r__b__first__bit q__p2__r__b__last__bit))

;; q__p2__r__b__position_axiom
  (assert (<= 0 q__p2__r__b__position))

(declare-const q__p2__r__c__first__bit Int)

(declare-const q__p2__r__c__last__bit Int)

(declare-const q__p2__r__c__position Int)

;; q__p2__r__c__first__bit_axiom
  (assert (<= 0 q__p2__r__c__first__bit))

;; q__p2__r__c__last__bit_axiom
  (assert (< q__p2__r__c__first__bit q__p2__r__c__last__bit))

;; q__p2__r__c__position_axiom
  (assert (<= 0 q__p2__r__c__position))

(declare-const q__p2__r__d__first__bit Int)

(declare-const q__p2__r__d__last__bit Int)

(declare-const q__p2__r__d__position Int)

;; q__p2__r__d__first__bit_axiom
  (assert (<= 0 q__p2__r__d__first__bit))

;; q__p2__r__d__last__bit_axiom
  (assert (< q__p2__r__d__first__bit q__p2__r__d__last__bit))

;; q__p2__r__d__position_axiom
  (assert (<= 0 q__p2__r__d__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((r__ref1 0))
(((r__refqtmk1 (r__content1 us_rep1)))))
(define-fun r__ref_r__content__2__projection ((a r__ref1)) us_rep1 (r__content1
                                                                   a))

(declare-fun pack1 (Bool Int Int) us_rep1)

(declare-fun pack__function_guard1 (us_rep1 Bool Int Int) Bool)

(define-fun dynamic_invariant4 ((temp___expr_186 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=>
                                     (or (= temp___is_init_182 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_186)))

(define-fun dynamic_invariant5 ((temp___expr_193 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)
  (temp___do_typ_inv_192 Bool)) Bool (=>
                                     (or (= temp___is_init_189 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_193)))

;; pack__post_axiom
  (assert true)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(assert
;; defqtvc
 ;; File "q.ads", line 11, characters 0-0
  (not
  (forall ((x4 Int))
  (=> (dynamic_invariant x2 true false true true)
  (=> (dynamic_invariant1 x3 true false true true)
  (=> (dynamic_invariant x4 false false true true)
  (let ((o x3))
  (let ((o1 x1))
  (let ((o2 x2))
  (let ((temp___215 (pack o2 o1 o)))
  (=> (pack__function_guard temp___215 o2 o1 o)
  (forall ((r1__split_fields us_split_fields))
  (=> (= r1__split_fields (us_split_fields1 temp___215))
  (let ((o3 x3))
  (let ((o4 x2))
  (let ((o5 x1))
  (let ((temp___216 (pack1 o5 o4 o3)))
  (=> (pack__function_guard1 temp___216 o5 o4 o3)
  (forall ((r2__split_fields us_split_fields2))
  (=> (= r2__split_fields (us_split_fields3 temp___216))
  (forall ((o6 Int))
  (=> (= (to_rep (rec__q__p2__r__d r2__split_fields)) o6)
  (forall ((o7 Int))
  (=> (= (to_rep (rec__q__p1__r__d r1__split_fields)) o7) (in_range
  (+ o7 o6))))))))))))))))))))))))))
(check-sat)
