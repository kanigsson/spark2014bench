;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun f1 (Int) Bool)

(declare-fun f1__function_guard (Bool Int) Bool)

;; f1__post_axiom
  (assert true)

;; f1__def_axiom
  (assert
  (forall ((foo__c Int))
  (! (= (= (f1 foo__c) true) (< 0 foo__c)) :pattern ((f1 foo__c)) )))

(declare-fun f3 (Int) Bool)

(declare-fun f3__function_guard (Bool Int) Bool)

;; f3__post_axiom
  (assert true)

;; f3__def_axiom
  (assert
  (forall ((foo__c Int))
  (! (= (= (f3 foo__c) true) (< 0 foo__c)) :pattern ((f3 foo__c)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun get_a (Int) Int)

(declare-fun get_a__function_guard (Int Int) Bool)

;; get_a__post_axiom
  (assert
  (forall ((foo__a Int))
  (! (=> (dynamic_invariant foo__a true true true true)
     (let ((result (get_a foo__a)))
     (=> (get_a__function_guard result foo__a) (dynamic_invariant result true
     false true true)))) :pattern ((get_a foo__a)) )))

;; get_a__def_axiom
  (assert
  (forall ((foo__a Int))
  (! (=> (dynamic_invariant foo__a true true true true)
     (= (get_a foo__a) foo__a)) :pattern ((get_a foo__a)) )))

(declare-fun f4 (Int Int) Bool)

(declare-fun f4__function_guard (Bool Int Int) Bool)

;; f4__post_axiom
  (assert true)

;; f4__def_axiom
  (assert
  (forall ((foo__a Int) (foo__c Int))
  (! (and
     (forall ((foo__a1 Int)) (get_a__function_guard (get_a foo__a1) foo__a1))
     (= (= (f4 foo__a foo__c) true) (= foo__c (get_a foo__a)))) :pattern (
  (f4 foo__a foo__c)) )))

(declare-fun get_c (Int) Int)

(declare-fun get_c__function_guard (Int Int) Bool)

;; get_c__post_axiom
  (assert
  (forall ((foo__c Int))
  (! (=> (dynamic_invariant foo__c true true true true)
     (let ((result (get_c foo__c)))
     (=> (get_c__function_guard result foo__c) (dynamic_invariant result true
     false true true)))) :pattern ((get_c foo__c)) )))

;; get_c__def_axiom
  (assert
  (forall ((foo__c Int))
  (! (=> (dynamic_invariant foo__c true true true true)
     (= (get_c foo__c) foo__c)) :pattern ((get_c foo__c)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(assert
;; defqtvc
 ;; File "foo.ads", line 1, characters 0-0
  (not
  (forall ((c Int) (a Int) (b Int) (a1 Int) (c1 Int))
  (=> (dynamic_invariant c false false true true)
  (=> (dynamic_invariant a false false true true)
  (=> (dynamic_invariant b false false true true)
  (=> (= a1 1)
  (=> (= c1 3)
  (let ((o (get_c c1)))
  (=>
  (and (get_c__function_guard o c1)
  (and (dynamic_invariant o true false true true) (= o c1)))
  (let ((o1 (get_a a1)))
  (=>
  (and (get_a__function_guard o1 a1)
  (and (dynamic_invariant o1 true false true true) (= o1 a1)))
  (let ((o2 (f4 a1 c1)))
  (=> (forall ((a2 Int)) (get_a__function_guard (get_a a2) a2))
  (=> (and (f4__function_guard o2 a1 c1) (= (= o2 true) (= c1 (get_a a1))))
  (let ((o3 (f3 c1)))
  (=> (and (f3__function_guard o3 c1) (= (= o3 true) (< 0 c1)))
  (let ((o4 (f1 c1)))
  (=> (and (f1__function_guard o4 c1) (= (= o4 true) (< 0 c1)))
  (=> (forall ((c2 Int)) (f1__function_guard (f1 c2) c2)) (= (f1 c1) true)))))))))))))))))))))
(check-sat)
