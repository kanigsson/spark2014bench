(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep ((x positive)) Int (positiveqtint x))

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep1 ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__partition_refinement__partitioning_sets__cursor__node count_type)))))
(define-fun us_split_fields_rec__partition_refinement__partitioning_sets__cursor__node__projection ((a us_split_fields)) count_type 
  (rec__partition_refinement__partitioning_sets__cursor__node a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep1
                           (rec__partition_refinement__partitioning_sets__cursor__node
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__partition_refinement__partitioning_sets__cursor__node
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const partition_refinement__partitioning_sets__cursor__node__first__bit Int)

(declare-const partition_refinement__partitioning_sets__cursor__node__last__bit Int)

(declare-const partition_refinement__partitioning_sets__cursor__node__position Int)

;; partition_refinement__partitioning_sets__cursor__node__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__cursor__node__first__bit))

;; partition_refinement__partitioning_sets__cursor__node__last__bit_axiom
  (assert
  (< partition_refinement__partitioning_sets__cursor__node__first__bit 
  partition_refinement__partitioning_sets__cursor__node__last__bit))

;; partition_refinement__partitioning_sets__cursor__node__position_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__cursor__node__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep 
  (cursor__content a))

(declare-const no_element us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__partition_refinement__partitioning_sets__list__capacity count_type)))))
(define-fun us_split_discrs_rec__partition_refinement__partitioning_sets__list__capacity__projection ((a us_split_discrs)) count_type 
  (rec__partition_refinement__partitioning_sets__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__partition_refinement__partitioning_sets__list us_main_type)))))
(define-fun us_split_fields_rec__partition_refinement__partitioning_sets__list__projection ((a us_split_fields2)) us_main_type 
  (rec__partition_refinement__partitioning_sets__list a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__partition_refinement__partitioning_sets__list__capacity
                            (us_split_discrs1 a))) (to_rep1
                                                   (rec__partition_refinement__partitioning_sets__list__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__partition_refinement__partitioning_sets__list
                            (us_split_fields3 a))
                            (rec__partition_refinement__partitioning_sets__list
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range3 ((rec__partition_refinement__partitioning_sets__list__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__partition_refinement__partitioning_sets__list__capacity1 
  (to_rep1 (rec__partition_refinement__partitioning_sets__list__capacity a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const partition_refinement__partitioning_sets__list__capacity__first__bit Int)

(declare-const partition_refinement__partitioning_sets__list__capacity__last__bit Int)

(declare-const partition_refinement__partitioning_sets__list__capacity__position Int)

;; partition_refinement__partitioning_sets__list__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__first__bit))

;; partition_refinement__partitioning_sets__list__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitioning_sets__list__capacity__first__bit 
  partition_refinement__partitioning_sets__list__capacity__last__bit))

;; partition_refinement__partitioning_sets__list__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep1)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep1 
  (list__content a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq3 a b) (oeq a b)) :pattern ((user_eq3 a b)) )))

(define-fun dynamic_invariant ((temp___expr_447 Int)
  (temp___is_init_443 Bool) (temp___skip_constant_444 Bool)
  (temp___do_toplevel_445 Bool)
  (temp___do_typ_inv_446 Bool)) Bool (=>
                                     (or (= temp___is_init_443 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_447)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep1
                (rec__partition_refinement__partitioning_sets__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true true))) :pattern ((length
                                                                 container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep2)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep2 
  (map__content a))

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content us_rep)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref)) us_rep 
  (key_type__content a))

(declare-fun get (us_rep2 us_rep) Int)

(declare-fun get__function_guard (Int us_rep2 us_rep) Bool)

(declare-fun has_key (us_rep2 us_rep) Bool)

(declare-fun has_key__function_guard (Bool us_rep2 us_rep) Bool)

(declare-fun witness (us_rep2 us_rep) Int)

(declare-fun witness__function_guard (Int us_rep2 us_rep) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-const dummy5 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_512 Int)
  (temp___is_init_508 Bool) (temp___skip_constant_509 Bool)
  (temp___do_toplevel_510 Bool)
  (temp___do_typ_inv_511 Bool)) Bool (=>
                                     (or (= temp___is_init_508 true)
                                     (<= 1 2147483647)) (in_range4
                                     temp___expr_512)))

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_520 us_rep2)
  (temp___skip_top_level_521 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_521 true))
                                         (and
                                         (= (is_empty temp___expr_520) true)
                                         (= (length1 temp___expr_520) 0))))

(define-fun default_initial_assumption1 ((temp___expr_506 us_rep)
  (temp___skip_top_level_507 Bool)) Bool (= (to_rep1
                                            (rec__partition_refinement__partitioning_sets__cursor__node
                                            (us_split_fields1
                                            temp___expr_506))) 0))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key us_rep))
  (! (=> (= (has_key container key) true)
     (let ((result (get container key)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep))
     (=> (= (has_key container k) true)
     (= (= (bool_eq k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant1 result true false true true)))) :pattern ((get
                                                                   container
                                                                   key)) ))))

(declare-fun positions (us_rep1) us_rep2)

(declare-fun positions__function_guard (us_rep2 us_rep1) Bool)

;; positions__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep))
     (=> (= (has_key result i) true)
     (and
     (let ((temp___572 (get result i)))
     (and (<= 1 temp___572) (<= temp___572 (length container))))
     (forall ((j us_rep))
     (=> (= (has_key result j) true)
     (=> (= (get result i) (get result j)) (= (bool_eq i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep1)
  (position us_rep)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep1 us_rep) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq6 (us_rep3 us_rep3) Bool)

(declare-const dummy6 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep3)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep3 
  (sequence__content a))

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(declare-fun model1 (us_rep1) us_rep3)

(declare-fun model__function_guard (us_rep3 us_rep1) Bool)

(define-fun element ((container us_rep1)
  (position us_rep)) Int (get1 (model1 container)
                         (get (positions container) position)))

(declare-fun element__function_guard (Int us_rep1 us_rep) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (element_type1 element_type1) Bool)

(declare-const dummy7 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_440 Int)
  (temp___is_init_436 Bool) (temp___skip_constant_437 Bool)
  (temp___do_toplevel_438 Bool)
  (temp___do_typ_inv_439 Bool)) Bool (=>
                                     (or (= temp___is_init_436 true)
                                     (<= 1 2147483647)) (in_range5
                                     temp___expr_440)))

(define-fun default_initial_assumption2 ((temp___expr_461 us_rep)
  (temp___skip_top_level_462 Bool)) Bool (= (to_rep1
                                            (rec__partition_refinement__partitioning_sets__cursor__node
                                            (us_split_fields1
                                            temp___expr_461))) 0))

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun first (us_rep1) us_rep)

(declare-fun first__function_guard (us_rep us_rep1) Bool)

;; first__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (first container)))
     (ite (= (length container) 0) (= (bool_eq result no_element) true)
     (and (= (has_element container result) true)
     (= (get (positions container) result) 1)))) :pattern ((first container)) )))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__partition_refinement__inverse_sets__cursor__node count_type)))))
(define-fun us_split_fields_rec__partition_refinement__inverse_sets__cursor__node__projection ((a us_split_fields4)) count_type 
  (rec__partition_refinement__inverse_sets__cursor__node a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep4)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep4)
  (b us_rep4)) Bool (ite (= (to_rep1
                            (rec__partition_refinement__inverse_sets__cursor__node
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__partition_refinement__inverse_sets__cursor__node
                                                   (us_split_fields5 b))))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const partition_refinement__inverse_sets__cursor__node__first__bit Int)

(declare-const partition_refinement__inverse_sets__cursor__node__last__bit Int)

(declare-const partition_refinement__inverse_sets__cursor__node__position Int)

;; partition_refinement__inverse_sets__cursor__node__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__cursor__node__first__bit))

;; partition_refinement__inverse_sets__cursor__node__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__cursor__node__first__bit partition_refinement__inverse_sets__cursor__node__last__bit))

;; partition_refinement__inverse_sets__cursor__node__position_axiom
  (assert (<= 0 partition_refinement__inverse_sets__cursor__node__position))

(declare-fun user_eq8 (us_rep4 us_rep4) Bool)

(declare-const dummy8 us_rep4)

(declare-datatypes ((cursor__ref1 0))
(((cursor__refqtmk1 (cursor__content1 us_rep4)))))
(define-fun cursor__ref_cursor__content__2__projection ((a cursor__ref1)) us_rep4 
  (cursor__content1 a))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__partition_refinement__inverse_sets__map__capacity count_type)))))
(define-fun us_split_discrs_rec__partition_refinement__inverse_sets__map__capacity__projection ((a us_split_discrs2)) count_type 
  (rec__partition_refinement__inverse_sets__map__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__partition_refinement__inverse_sets__map us_main_type3)))))
(define-fun us_split_fields_rec__partition_refinement__inverse_sets__map__projection ((a us_split_fields6)) us_main_type3 
  (rec__partition_refinement__inverse_sets__map a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk3
  (us_split_discrs3 us_split_discrs2)(us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep5)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep5)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq5 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep1
                            (rec__partition_refinement__inverse_sets__map__capacity
                            (us_split_discrs3 a))) (to_rep1
                                                   (rec__partition_refinement__inverse_sets__map__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq3
                            (rec__partition_refinement__inverse_sets__map
                            (us_split_fields7 a))
                            (rec__partition_refinement__inverse_sets__map
                            (us_split_fields7 b))) true))
                    true false))

(define-fun in_range6 ((rec__partition_refinement__inverse_sets__map__capacity1 Int)
  (a us_split_discrs2)) Bool (= rec__partition_refinement__inverse_sets__map__capacity1 
  (to_rep1 (rec__partition_refinement__inverse_sets__map__capacity a))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const partition_refinement__inverse_sets__map__capacity__first__bit Int)

(declare-const partition_refinement__inverse_sets__map__capacity__last__bit Int)

(declare-const partition_refinement__inverse_sets__map__capacity__position Int)

;; partition_refinement__inverse_sets__map__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit))

;; partition_refinement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__map__capacity__first__bit partition_refinement__inverse_sets__map__capacity__last__bit))

;; partition_refinement__inverse_sets__map__capacity__position_axiom
  (assert (<= 0 partition_refinement__inverse_sets__map__capacity__position))

(declare-fun user_eq9 (us_rep5 us_rep5) Bool)

(declare-const dummy9 us_rep5)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 us_rep5)))))
(define-fun map__ref_map__content__2__projection ((a map__ref1)) us_rep5 
  (map__content1 a))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-sort us_rep6 0)

(declare-fun bool_eq6 (us_rep6 us_rep6) Bool)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-fun user_eq10 (us_rep6 us_rep6) Bool)

(declare-const dummy10 us_rep6)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 us_rep6)))))
(define-fun map__ref_map__content__4__projection ((a map__ref2)) us_rep6 
  (map__content2 a))

(declare-datatypes ((key_type__ref1 0))
(((key_type__refqtmk1 (key_type__content1 us_rep4)))))
(define-fun key_type__ref_key_type__content__4__projection ((a key_type__ref1)) us_rep4 
  (key_type__content1 a))

(declare-fun has_key1 (us_rep6 us_rep4) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep6 us_rep4) Bool)

(declare-fun positions1 (us_rep5) us_rep6)

(declare-fun positions__function_guard1 (us_rep6 us_rep5) Bool)

(define-fun has_element1 ((container us_rep5)
  (position us_rep4)) Bool (has_key1 (positions1 container) position))

(declare-fun has_element__function_guard1 (Bool us_rep5 us_rep4) Bool)

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-sort us_rep7 0)

(declare-fun bool_eq7 (us_rep7 us_rep7) Bool)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-fun user_eq11 (us_rep7 us_rep7) Bool)

(declare-const dummy11 us_rep7)

(declare-datatypes ((sequence__ref1 0))
(((sequence__refqtmk1 (sequence__content1 us_rep7)))))
(define-fun sequence__ref_sequence__content__2__projection ((a sequence__ref1)) us_rep7 
  (sequence__content1 a))

(declare-fun get2 (us_rep7 Int) Int)

(declare-fun get__function_guard2 (Int us_rep7 Int) Bool)

(declare-fun get3 (us_rep6 us_rep4) Int)

(declare-fun get__function_guard3 (Int us_rep6 us_rep4) Bool)

(declare-fun keys (us_rep5) us_rep7)

(declare-fun keys__function_guard (us_rep7 us_rep5) Bool)

(define-fun key ((container us_rep5)
  (position us_rep4)) Int (get2 (keys container)
                          (get3 (positions1 container) position)))

(declare-fun key__function_guard (Int us_rep5 us_rep4) Bool)

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq12 (key_type key_type) Bool)

(declare-const dummy12 key_type)

(declare-datatypes ((key_type__ref2 0))
(((key_type__refqtmk2 (key_type__content2 key_type)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref2)) key_type 
  (key_type__content2 a))

(define-fun dynamic_invariant3 ((temp___expr_800 Int)
  (temp___is_init_796 Bool) (temp___skip_constant_797 Bool)
  (temp___do_toplevel_798 Bool)
  (temp___do_typ_inv_799 Bool)) Bool (=>
                                     (or (= temp___is_init_796 true)
                                     (<= 1 2147483647)) (in_range7
                                     temp___expr_800)))

(declare-sort us_main_type6 0)

(declare-fun us_main_eq6 (us_main_type6 us_main_type6) Bool)

(declare-sort us_rep8 0)

(declare-fun bool_eq8 (us_rep8 us_rep8) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq13 (us_rep8 us_rep8) Bool)

(declare-const dummy13 us_rep8)

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 us_rep8)))))
(define-fun map__ref_map__content__3__projection ((a map__ref3)) us_rep8 
  (map__content3 a))

(declare-fun get4 (us_rep8 Int) Int)

(declare-fun get__function_guard4 (Int us_rep8 Int) Bool)

(declare-fun model2 (us_rep5) us_rep8)

(declare-fun model__function_guard1 (us_rep8 us_rep5) Bool)

(define-fun element1 ((container us_rep5)
  (position us_rep4)) Int (get4 (model2 container) (key container position)))

(declare-fun element__function_guard1 (Int us_rep5 us_rep4) Bool)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= 0 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 5))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq14 (element_type2 element_type2) Bool)

(declare-const dummy14 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(define-fun dynamic_invariant4 ((temp___expr_807 Int)
  (temp___is_init_803 Bool) (temp___skip_constant_804 Bool)
  (temp___do_toplevel_805 Bool)
  (temp___do_typ_inv_806 Bool)) Bool (=>
                                     (or (= temp___is_init_803 true)
                                     (<= 0 5)) (in_range8 temp___expr_807)))

(declare-fun has_key2 (us_rep8 Int) Bool)

(declare-fun has_key__function_guard2 (Bool us_rep8 Int) Bool)

(define-fun contains ((container us_rep5)
  (key1 Int)) Bool (has_key2 (model2 container) key1))

(declare-fun contains__function_guard (Bool us_rep5 Int) Bool)

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 10001))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 10001)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq15 (capacity_range capacity_range) Bool)

(declare-const dummy15 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep2 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep2 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range9
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range9 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort us_main_type7 0)

(declare-fun us_main_eq7 (us_main_type7 us_main_type7) Bool)

(declare-datatypes ((us_split_discrs4 0))
(((us_split_discrsqtmk2
  (rec__partition_refinement__partitions__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__partition_refinement__partitions__vector__capacity__projection ((a us_split_discrs4)) capacity_range 
  (rec__partition_refinement__partitions__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((us_split_discrs__refqtmk2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields8 0))
(((us_split_fieldsqtmk4
  (rec__partition_refinement__partitions__vector us_main_type7)))))
(define-fun us_split_fields_rec__partition_refinement__partitions__vector__projection ((a us_split_fields8)) us_main_type7 
  (rec__partition_refinement__partitions__vector a))

(declare-datatypes ((us_split_fields__ref4 0))
(((us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ((us_rep9 0))
(((us_repqtmk4
  (us_split_discrs5 us_split_discrs4)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep9)) us_split_discrs4 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__6__projection ((a us_rep9)) us_split_fields8 
  (us_split_fields9 a))

(define-fun bool_eq9 ((a us_rep9)
  (b us_rep9)) Bool (ite (and
                         (= (to_rep2
                            (rec__partition_refinement__partitions__vector__capacity
                            (us_split_discrs5 a))) (to_rep2
                                                   (rec__partition_refinement__partitions__vector__capacity
                                                   (us_split_discrs5 b))))
                         (= (us_main_eq7
                            (rec__partition_refinement__partitions__vector
                            (us_split_fields9 a))
                            (rec__partition_refinement__partitions__vector
                            (us_split_fields9 b))) true))
                    true false))

(define-fun in_range10 ((rec__partition_refinement__partitions__vector__capacity1 Int)
  (a us_split_discrs4)) Bool (= rec__partition_refinement__partitions__vector__capacity1 
  (to_rep2 (rec__partition_refinement__partitions__vector__capacity a))))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const partition_refinement__partitions__vector__capacity__first__bit Int)

(declare-const partition_refinement__partitions__vector__capacity__last__bit Int)

(declare-const partition_refinement__partitions__vector__capacity__position Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit partition_refinement__partitions__vector__capacity__last__bit))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position))

(declare-fun user_eq16 (us_rep9 us_rep9) Bool)

(declare-const dummy16 us_rep9)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep9)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep9 
  (vector__content a))

(define-fun capacity ((container us_rep9)) Int (to_rep2
                                               (rec__partition_refinement__partitions__vector__capacity
                                               (us_split_discrs5 container))))

(declare-fun capacity__function_guard (Int us_rep9) Bool)

(define-fun dynamic_invariant5 ((temp___expr_1157 Int)
  (temp___is_init_1153 Bool) (temp___skip_constant_1154 Bool)
  (temp___do_toplevel_1155 Bool)
  (temp___do_typ_inv_1156 Bool)) Bool (=>
                                      (or (= temp___is_init_1153 true)
                                      (<= 0 10001)) (in_range9
                                      temp___expr_1157)))

(declare-fun length3 (us_rep9) Int)

(declare-fun length__function_guard2 (Int us_rep9) Bool)

(declare-fun oeq2 (us_rep9 us_rep9) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep9 us_rep9) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep9) (b us_rep9))
  (! (= (user_eq16 a b) (oeq2 a b)) :pattern ((user_eq16 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep9))
  (! (let ((result (length3 container)))
     (and (<= result (capacity container)) (dynamic_invariant5 result true
     false true true))) :pattern ((length3 container)) )))

(declare-sort index_count 0)

(declare-fun index_countqtint (index_count) Int)

;; index_count'axiom
  (assert
  (forall ((i index_count))
  (and (<= 0 (index_countqtint i)) (<= (index_countqtint i) 6))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq17 (index_count index_count) Bool)

(declare-const dummy17 index_count)

(declare-datatypes ((index_count__ref 0))
(((index_count__refqtmk (index_count__content index_count)))))
(define-fun index_count__ref_index_count__content__projection ((a index_count__ref)) index_count 
  (index_count__content a))

(define-fun to_rep3 ((x index_count)) Int (index_countqtint x))

(declare-fun of_rep3 (Int) index_count)

;; inversion_axiom
  (assert
  (forall ((x index_count))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x index_count)) (! (in_range11
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range11 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                               (of_rep3 x))) )))

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 5))))

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq18 (index index) Bool)

(declare-const dummy18 index)

(declare-datatypes ((index__ref 0))
(((index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(define-fun to_rep4 ((x index)) Int (indexqtint x))

(declare-fun of_rep4 (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range12 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range12 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                               (of_rep4 x))) )))

(declare-datatypes ((us_split_fields10 0))
(((us_split_fieldsqtmk5
  (rec__partition_refinement__interval__first index)(rec__partition_refinement__interval__last index)(rec__partition_refinement__interval__count index_count)))))
(define-fun us_split_fields_rec__partition_refinement__interval__first__projection ((a us_split_fields10)) index 
  (rec__partition_refinement__interval__first a))

(define-fun us_split_fields_rec__partition_refinement__interval__last__projection ((a us_split_fields10)) index 
  (rec__partition_refinement__interval__last a))

(define-fun us_split_fields_rec__partition_refinement__interval__count__projection ((a us_split_fields10)) index_count 
  (rec__partition_refinement__interval__count a))

(declare-datatypes ((us_split_fields__ref5 0))
(((us_split_fields__refqtmk5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ((us_rep10 0))
(((us_repqtmk5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep10)) us_split_fields10 
  (us_split_fields11 a))

(define-fun bool_eq10 ((a us_rep10)
  (b us_rep10)) Bool (ite (and
                          (and
                          (= (to_rep4
                             (rec__partition_refinement__interval__first
                             (us_split_fields11 a))) (to_rep4
                                                     (rec__partition_refinement__interval__first
                                                     (us_split_fields11 b))))
                          (= (to_rep4
                             (rec__partition_refinement__interval__last
                             (us_split_fields11 a))) (to_rep4
                                                     (rec__partition_refinement__interval__last
                                                     (us_split_fields11 b)))))
                          (= (to_rep3
                             (rec__partition_refinement__interval__count
                             (us_split_fields11 a))) (to_rep3
                                                     (rec__partition_refinement__interval__count
                                                     (us_split_fields11 b)))))
                     true false))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (<= 0 object__size10))

;; alignment_axiom
  (assert (<= 0 alignment10))

(declare-const partition_refinement__interval__first__first__bit Int)

(declare-const partition_refinement__interval__first__last__bit Int)

(declare-const partition_refinement__interval__first__position Int)

;; partition_refinement__interval__first__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__first__first__bit))

;; partition_refinement__interval__first__last__bit_axiom
  (assert
  (< partition_refinement__interval__first__first__bit partition_refinement__interval__first__last__bit))

;; partition_refinement__interval__first__position_axiom
  (assert (<= 0 partition_refinement__interval__first__position))

(declare-const partition_refinement__interval__last__first__bit Int)

(declare-const partition_refinement__interval__last__last__bit Int)

(declare-const partition_refinement__interval__last__position Int)

;; partition_refinement__interval__last__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__last__first__bit))

;; partition_refinement__interval__last__last__bit_axiom
  (assert
  (< partition_refinement__interval__last__first__bit partition_refinement__interval__last__last__bit))

;; partition_refinement__interval__last__position_axiom
  (assert (<= 0 partition_refinement__interval__last__position))

(declare-const partition_refinement__interval__count__first__bit Int)

(declare-const partition_refinement__interval__count__last__bit Int)

(declare-const partition_refinement__interval__count__position Int)

;; partition_refinement__interval__count__first__bit_axiom
  (assert (<= 0 partition_refinement__interval__count__first__bit))

;; partition_refinement__interval__count__last__bit_axiom
  (assert
  (< partition_refinement__interval__count__first__bit partition_refinement__interval__count__last__bit))

;; partition_refinement__interval__count__position_axiom
  (assert (<= 0 partition_refinement__interval__count__position))

(declare-fun user_eq19 (us_rep10 us_rep10) Bool)

(declare-const dummy19 us_rep10)

(declare-datatypes ((interval__ref 0))
(((interval__refqtmk (interval__content us_rep10)))))
(define-fun interval__ref_interval__content__projection ((a interval__ref)) us_rep10 
  (interval__content a))

(declare-datatypes ((element_type__ref3 0))
(((element_type__refqtmk3 (element_type__content3 us_rep10)))))
(define-fun element_type__ref_element_type__content__8__projection ((a element_type__ref3)) us_rep10 
  (element_type__content3 a))

(declare-sort us_main_type8 0)

(declare-fun us_main_eq8 (us_main_type8 us_main_type8) Bool)

(declare-sort us_rep11 0)

(declare-fun bool_eq11 (us_rep11 us_rep11) Bool)

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const alignment11 Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (<= 0 object__size11))

;; alignment_axiom
  (assert (<= 0 alignment11))

(declare-fun user_eq20 (us_rep11 us_rep11) Bool)

(declare-const dummy20 us_rep11)

(declare-datatypes ((sequence__ref2 0))
(((sequence__refqtmk2 (sequence__content2 us_rep11)))))
(define-fun sequence__ref_sequence__content__3__projection ((a sequence__ref2)) us_rep11 
  (sequence__content2 a))

(declare-datatypes ((element_type__ref4 0))
(((element_type__refqtmk4 (element_type__content4 us_rep10)))))
(define-fun element_type__ref_element_type__content__9__projection ((a element_type__ref4)) us_rep10 
  (element_type__content4 a))

(declare-fun get5 (us_rep11 Int) us_rep10)

(declare-fun get__function_guard5 (us_rep10 us_rep11 Int) Bool)

(declare-fun model3 (us_rep9) us_rep11)

(declare-fun model__function_guard2 (us_rep11 us_rep9) Bool)

(define-fun element2 ((container us_rep9)
  (index1 Int)) us_rep10 (get5 (model3 container) index1))

(declare-fun element__function_guard2 (us_rep10 us_rep9 Int) Bool)

(declare-fun length4 (us_rep11) Int)

(declare-fun length__function_guard3 (Int us_rep11) Bool)

(define-fun last ((container us_rep11)) Int (+ (- 1) (length4 container)))

(declare-fun last__function_guard (Int us_rep11) Bool)

(define-fun last_index ((container us_rep9)) Int (last (model3 container)))

(declare-fun last_index__function_guard (Int us_rep9) Bool)

(declare-fun first_index__function_guard (Int us_rep9) Bool)

(declare-datatypes ((map__ref4 0))
(((map__refqtmk4 (map__content4 (Array Int positive))))))
(declare-fun slide ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first1 Int))
  (! (= (slide a first1 first1) a) :pattern ((slide a first1 first1)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq12 ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq12 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const alignment12 Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (<= 0 object__size12))

;; alignment_axiom
  (assert (<= 0 alignment12))

(declare-const partition_refinement__inverse_sets__map__capacity__first__bit1 Int)

(declare-const partition_refinement__inverse_sets__map__capacity__last__bit1 Int)

(declare-const partition_refinement__inverse_sets__map__capacity__position1 Int)

;; partition_refinement__inverse_sets__map__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__first__bit1))

;; partition_refinement__inverse_sets__map__capacity__last__bit_axiom
  (assert
  (< partition_refinement__inverse_sets__map__capacity__first__bit1 partition_refinement__inverse_sets__map__capacity__last__bit1))

;; partition_refinement__inverse_sets__map__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__inverse_sets__map__capacity__position1))

(declare-fun user_eq21 (us_rep5 us_rep5) Bool)

(declare-const dummy21 us_rep5)

(declare-datatypes ((inverse_set__ref 0))
(((inverse_set__refqtmk (inverse_set__content us_rep5)))))
(define-fun inverse_set__ref_inverse_set__content__projection ((a inverse_set__ref)) us_rep5 
  (inverse_set__content a))

(declare-const d__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun oeq3 (us_rep5 us_rep5) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep5 us_rep5) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq21 a b) (oeq3 a b)) :pattern ((user_eq21 a b)) )))

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const alignment13 Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (<= 0 object__size13))

;; alignment_axiom
  (assert (<= 0 alignment13))

(declare-const partition_refinement__partitions__vector__capacity__first__bit1 Int)

(declare-const partition_refinement__partitions__vector__capacity__last__bit1 Int)

(declare-const partition_refinement__partitions__vector__capacity__position1 Int)

;; partition_refinement__partitions__vector__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__first__bit1))

;; partition_refinement__partitions__vector__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitions__vector__capacity__first__bit1 
  partition_refinement__partitions__vector__capacity__last__bit1))

;; partition_refinement__partitions__vector__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitions__vector__capacity__position1))

(declare-fun user_eq22 (us_rep9 us_rep9) Bool)

(declare-const dummy22 us_rep9)

(declare-datatypes ((partition__ref 0))
(((partition__refqtmk (partition__content us_rep9)))))
(define-fun partition__ref_partition__content__projection ((a partition__ref)) us_rep9 
  (partition__content a))

(declare-const p__split_discrs us_split_discrs4)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep9) (b us_rep9))
  (! (= (user_eq22 a b) (oeq2 a b)) :pattern ((user_eq22 a b)) )))

(declare-sort partition_index 0)

(declare-fun partition_indexqtint (partition_index) Int)

;; partition_index'axiom
  (assert
  (forall ((i partition_index))
  (and (<= 0 (partition_indexqtint i)) (<= (partition_indexqtint i) 10000))))

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq23 (partition_index partition_index) Bool)

(declare-const dummy23 partition_index)

(declare-datatypes ((partition_index__ref 0))
(((partition_index__refqtmk (partition_index__content partition_index)))))
(define-fun partition_index__ref_partition_index__content__projection ((a partition_index__ref)) partition_index 
  (partition_index__content a))

(define-fun to_rep5 ((x partition_index)) Int (partition_indexqtint x))

(declare-fun of_rep5 (Int) partition_index)

;; inversion_axiom
  (assert
  (forall ((x partition_index))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x partition_index)) (! (in_range13
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range13 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(declare-datatypes ((map__ref5 0))
(((map__refqtmk5 (map__content5 (Array Int partition_index))))))
(declare-fun slide1 ((Array Int partition_index) Int
  Int) (Array Int partition_index))

;; slide_eq
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((first1 Int))
  (! (= (slide1 a first1 first1) a) :pattern ((slide1 a first1 first1)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int partition_index)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq13 ((a (Array Int partition_index)) (a__first Int)
  (a__last Int) (b (Array Int partition_index)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_403 Int))
                           (=>
                           (and (<= a__first temp___idx_403)
                           (<= temp___idx_403 a__last))
                           (= (to_rep5 (select a temp___idx_403)) (to_rep5
                                                                  (select b (+ (- b__first a__first) temp___idx_403)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int partition_index)) (b (Array Int partition_index)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq13 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_403 Int))
  (=> (and (<= a__first temp___idx_403) (<= temp___idx_403 a__last))
  (= (to_rep5 (select a temp___idx_403)) (to_rep5
                                         (select b (+ (- b__first a__first) temp___idx_403)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const value__size14 Int)

(declare-const object__size14 Int)

(declare-const alignment14 Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (<= 0 object__size14))

;; alignment_axiom
  (assert (<= 0 alignment14))

(declare-const partition_refinement__partitioning_sets__list__capacity__first__bit1 Int)

(declare-const partition_refinement__partitioning_sets__list__capacity__last__bit1 Int)

(declare-const partition_refinement__partitioning_sets__list__capacity__position1 Int)

;; partition_refinement__partitioning_sets__list__capacity__first__bit_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__first__bit1))

;; partition_refinement__partitioning_sets__list__capacity__last__bit_axiom
  (assert
  (< partition_refinement__partitioning_sets__list__capacity__first__bit1 
  partition_refinement__partitioning_sets__list__capacity__last__bit1))

;; partition_refinement__partitioning_sets__list__capacity__position_axiom
  (assert
  (<= 0 partition_refinement__partitioning_sets__list__capacity__position1))

(declare-fun user_eq24 (us_rep1 us_rep1) Bool)

(declare-const dummy24 us_rep1)

(declare-datatypes ((partitioning_set__ref 0))
(((partitioning_set__refqtmk (partitioning_set__content us_rep1)))))
(define-fun partitioning_set__ref_partitioning_set__content__projection ((a partitioning_set__ref)) us_rep1 
  (partitioning_set__content a))

(declare-const x us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun length5 (us_rep7) Int)

(declare-fun length__function_guard4 (Int us_rep7) Bool)

(define-fun last1 ((container us_rep7)) Int (+ 0 (length5 container)))

(declare-fun last__function_guard1 (Int us_rep7) Bool)

(define-fun oeq4 ((left us_rep7)
  (right us_rep7)) Bool (and (= (length5 left) (length5 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last1 left)))
                                                                (= (get2 left
                                                                   n) 
                                                                (get2 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard4 (Bool us_rep7 us_rep7) Bool)

(define-fun element3 ((container us_rep5)
  (key1 Int)) Int (get4 (model2 container) key1))

(declare-fun element__function_guard3 (Int us_rep5 Int) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const d_old us_rep5)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort tcount_typeB 0)

(declare-fun tcount_typeBqtint (tcount_typeB) Int)

;; tcount_typeB'axiom
  (assert
  (forall ((i tcount_typeB))
  (and (<= (- 2147483648) (tcount_typeBqtint i))
  (<= (tcount_typeBqtint i) 2147483647))))

(define-fun in_range14 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                       (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq25 (tcount_typeB tcount_typeB) Bool)

(declare-const dummy25 tcount_typeB)

(declare-datatypes ((tcount_typeB__ref 0))
(((tcount_typeB__refqtmk (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref_tcount_typeB__content__projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq24 a b) (oeq a b)) :pattern ((user_eq24 a b)) )))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 0 (index_typeqtint i)) (<= (index_typeqtint i) 10000))))

(define-fun in_range15 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq26 (index_type index_type) Bool)

(declare-const dummy26 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__3__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant6 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant7 ((temp___expr_416 Int)
  (temp___is_init_412 Bool) (temp___skip_constant_413 Bool)
  (temp___do_toplevel_414 Bool)
  (temp___do_typ_inv_415 Bool)) Bool (=>
                                     (or (= temp___is_init_412 true)
                                     (<= 0 6)) (in_range11 temp___expr_416)))

(define-fun dynamic_invariant8 ((temp___expr_423 Int)
  (temp___is_init_419 Bool) (temp___skip_constant_420 Bool)
  (temp___do_toplevel_421 Bool)
  (temp___do_typ_inv_422 Bool)) Bool (=>
                                     (or (= temp___is_init_419 true)
                                     (<= 0 5)) (in_range12 temp___expr_423)))

(define-fun dynamic_invariant9 ((temp___expr_1126 Int)
  (temp___is_init_1122 Bool) (temp___skip_constant_1123 Bool)
  (temp___do_toplevel_1124 Bool)
  (temp___do_typ_inv_1125 Bool)) Bool (=>
                                      (or (= temp___is_init_1122 true)
                                      (<= 0 10000)) (in_range13
                                      temp___expr_1126)))

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk (us_split_fieldsqtmk rliteral))))

(declare-fun length6 (us_rep3) Int)

(declare-fun length__function_guard5 (Int us_rep3) Bool)

(define-fun last2 ((container us_rep3)) Int (+ 0 (length6 container)))

(declare-fun last__function_guard2 (Int us_rep3) Bool)

(define-fun oeq5 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length6 left) (length6 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last2 left)))
                                                                (= (get1 left
                                                                   n) 
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard5 (Bool us_rep3 us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq6 a b) (oeq5 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption3 ((temp___expr_498 us_rep3)
  (temp___skip_top_level_499 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_499 true))
                                         (= (length6 temp___expr_498) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length6 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq left right) true)
     (= (oeq5 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range16 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq27 (extended_index extended_index) Bool)

(declare-const dummy27 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant10 ((temp___expr_490 Int)
  (temp___is_init_486 Bool) (temp___skip_constant_487 Bool)
  (temp___do_toplevel_488 Bool)
  (temp___do_typ_inv_489 Bool)) Bool (=>
                                     (or (= temp___is_init_486 true)
                                     (<= 0 2147483647)) (in_range16
                                     temp___expr_490)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length6 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true true))) :pattern ((length6 container)) )))

(declare-sort element_type3 0)

(declare-fun element_typeqtint3 (element_type3) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type3))
  (and (<= 1 (element_typeqtint3 i)) (<= (element_typeqtint3 i) 2147483647))))

(define-fun in_range17 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq28 (element_type3 element_type3) Bool)

(declare-const dummy28 element_type3)

(declare-datatypes ((element_type__ref5 0))
(((element_type__refqtmk5 (element_type__content5 element_type3)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref5)) element_type3 
  (element_type__content5 a))

(define-fun dynamic_invariant11 ((temp___expr_483 Int)
  (temp___is_init_479 Bool) (temp___skip_constant_480 Bool)
  (temp___do_toplevel_481 Bool)
  (temp___do_typ_inv_482 Bool)) Bool (=>
                                     (or (= temp___is_init_479 true)
                                     (<= 1 2147483647)) (in_range17
                                     temp___expr_483)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant10 position true true true true)
     (and (<= 1 position) (<= position (last2 container))))
     (dynamic_invariant11 (get1 container position) true false true true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 us_rep))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k us_rep))
     (and (= (has_key container k) true) (= (bool_eq k key1) true)))
     (= (has_key container key1) true))) :pattern ((has_key container key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length1 container)
  true false true true) :pattern ((length1 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key1 us_rep))
     (=> (= (has_key left key1) true)
     (and (= (has_key right key1) true) (= (get right key1) (get left key1)))))
     (forall ((key1 us_rep))
     (=> (= (has_key right key1) true) (= (has_key left key1) true))))) :pattern (
  (oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty container) true)
     (forall ((key1 us_rep)) (not (= (has_key container key1) true)))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 us_rep))
  (! (=> (= (has_key container key1) true)
     (let ((result (witness container key1)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true true)))) :pattern ((witness container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant1
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep5) (b us_rep5))
  (! (= (user_eq9 a b) (oeq3 a b)) :pattern ((user_eq9 a b)) )))

(declare-const no_element1 us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

;; no_element__def_axiom
  (assert (= no_element1 (us_repqtmk2 (us_split_fieldsqtmk2 rliteral))))

(declare-fun length7 (us_rep5) Int)

(declare-fun length__function_guard6 (Int us_rep5) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (length7 container)))
     (and
     (<= result (to_rep1
                (rec__partition_refinement__inverse_sets__map__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant result true false true true))) :pattern ((length7
                                                                 container)) )))

(define-fun k_bigger_than_range ((container us_rep7) (fst Int) (lst Int)
  (key1 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< (get2 container i) key1)))
                   true false))

(declare-fun k_bigger_than_range__function_guard (Bool us_rep7 Int Int
  Int) Bool)

(define-fun k_smaller_than_range ((container us_rep7) (fst Int) (lst Int)
  (key1 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (< key1 (get2 container i))))
                   true false))

(declare-fun k_smaller_than_range__function_guard (Bool us_rep7 Int Int
  Int) Bool)

(define-fun k_is_find ((container us_rep7) (key1 Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (k_bigger_than_range container 1 (- position 1)
                            key1) (distinct 1 0)) (ite (< position (length5
                                                                   container))
                                                  (k_smaller_than_range
                                                  container (+ position 1)
                                                  (length5 container) key1)
                                                  (distinct 1 0))))

(declare-fun k_is_find__function_guard (Bool us_rep7 Int Int) Bool)

(declare-fun find (us_rep7 Int) Int)

(declare-fun find__function_guard (Int us_rep7 Int) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep7) (b us_rep7))
  (! (= (user_eq11 a b) (oeq4 a b)) :pattern ((user_eq11 a b)) )))

(define-fun default_initial_assumption4 ((temp___expr_888 us_rep7)
  (temp___skip_top_level_889 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_889 true))
                                         (= (length5 temp___expr_888) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant3 key1 true true true true)
     (let ((result (find container key1)))
     (and
     (=> (< 0 result)
     (and (<= result (length5 container))
     (= (equivalent_keys key1 (get2 container result)) true)))
     (dynamic_invariant result true false true true)))) :pattern ((find
                                                                  container
                                                                  key1)) ))))

(declare-fun length8 (us_rep8) Int)

(declare-fun length__function_guard7 (Int us_rep8) Bool)

(declare-fun oeq6 (us_rep8 us_rep8) Bool)

(declare-fun oeq__function_guard6 (Bool us_rep8 us_rep8) Bool)

(declare-fun is_empty1 (us_rep8) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep8) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep8) (b us_rep8))
  (! (= (user_eq13 a b) (oeq6 a b)) :pattern ((user_eq13 a b)) )))

(define-fun default_initial_assumption5 ((temp___expr_852 us_rep8)
  (temp___skip_top_level_853 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_853 true))
                                         (and
                                         (= (is_empty1 temp___expr_852) true)
                                         (= (length8 temp___expr_852) 0))))

;; model__post_axiom
  (assert true)

(define-fun iter_has_element ((container us_rep7)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last1
                                                             container)) true
                                                             false)))

(declare-fun iter_has_element__function_guard (Bool us_rep7 Int) Bool)

(declare-sort key_type1 0)

(declare-fun key_typeqtint1 (key_type1) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type1))
  (and (<= 1 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 2147483647))))

(define-fun in_range18 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE15 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check15 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE15 (us_image) Int)

(declare-fun user_eq29 (key_type1 key_type1) Bool)

(declare-const dummy29 key_type1)

(declare-datatypes ((key_type__ref3 0))
(((key_type__refqtmk3 (key_type__content3 key_type1)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref3)) key_type1 
  (key_type__content3 a))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i))
  (<= (extended_indexqtint1 i) 2147483647))))

(define-fun in_range19 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE16 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check16 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE16 (us_image) Int)

(declare-fun user_eq30 (extended_index1 extended_index1) Bool)

(declare-const dummy30 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

;; keys__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (keys container)))
     (and
     (and
     (and (= (length5 result) (length7 container))
     (forall ((temp___960 Int))
     (=>
     (and (in_range19 temp___960)
     (= (iter_has_element result temp___960) true))
     (= (has_key2 (model2 container) (get2 result temp___960)) true))))
     (forall ((key1 Int))
     (=> (and (in_range18 key1) (= (has_key2 (model2 container) key1) true))
     (and (< 0 (find result key1))
     (= (equivalent_keys (get2 result (find result key1)) key1) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length7 container)))
     (and (= (find result (get2 result i)) i)
     (= (k_is_find result (get2 result i) i) true)))))) :pattern ((keys
                                                                  container)) )))

(declare-fun length9 (us_rep6) Int)

(declare-fun length__function_guard8 (Int us_rep6) Bool)

(declare-fun oeq7 (us_rep6 us_rep6) Bool)

(declare-fun oeq__function_guard7 (Bool us_rep6 us_rep6) Bool)

(declare-fun is_empty2 (us_rep6) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep6) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep6) (b us_rep6))
  (! (= (user_eq10 a b) (oeq7 a b)) :pattern ((user_eq10 a b)) )))

(define-fun default_initial_assumption6 ((temp___expr_911 us_rep6)
  (temp___skip_top_level_912 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_912 true))
                                         (and
                                         (= (is_empty2 temp___expr_911) true)
                                         (= (length9 temp___expr_911) 0))))

;; positions__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (let ((result (positions1 container)))
     (and (not (= (has_key1 result no_element1) true))
     (forall ((i us_rep4))
     (=> (= (has_key1 result i) true)
     (and
     (let ((temp___967 (get3 result i)))
     (and (<= 1 temp___967) (<= temp___967 (length7 container))))
     (forall ((j us_rep4))
     (=> (= (has_key1 result j) true)
     (=> (= (get3 result i) (get3 result j)) (= (bool_eq4 i j) true))))))))) :pattern (
  (positions1 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep5) (right us_rep5))
  (! (= (= (oeq3 left right) true)
     (= (oeq6 (model2 left) (model2 right)) true)) :pattern ((oeq3 left
                                                             right)) )))

(define-fun dynamic_invariant12 ((temp___expr_837 Int)
  (temp___is_init_833 Bool) (temp___skip_constant_834 Bool)
  (temp___do_toplevel_835 Bool)
  (temp___do_typ_inv_836 Bool)) Bool (=>
                                     (or (= temp___is_init_833 true)
                                     (<= 1 2147483647)) (in_range18
                                     temp___expr_837)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant12 key1 true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k Int))
     (and (and (in_range18 k) (= (has_key2 container k) true))
     (= (equivalent_keys k key1) true))) (= (has_key2 container key1) true)))) :pattern (
  (has_key2 container key1)) ))))

(declare-fun witness1 (us_rep8 Int) Int)

(declare-fun witness__function_guard1 (Int us_rep8 Int) Bool)

(declare-fun w_get1 (us_rep8 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep8 Int) Bool)

(declare-sort element_type4 0)

(declare-fun element_typeqtint4 (element_type4) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type4))
  (and (<= 0 (element_typeqtint4 i)) (<= (element_typeqtint4 i) 5))))

(define-fun in_range20 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 5)))

(declare-fun attr__ATTRIBUTE_IMAGE17 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check17 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE17 (us_image) Int)

(declare-fun user_eq31 (element_type4 element_type4) Bool)

(declare-const dummy31 element_type4)

(declare-datatypes ((element_type__ref6 0))
(((element_type__refqtmk6 (element_type__content6 element_type4)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref6)) element_type4 
  (element_type__content6 a))

(define-fun dynamic_invariant13 ((temp___expr_844 Int)
  (temp___is_init_840 Bool) (temp___skip_constant_841 Bool)
  (temp___do_toplevel_842 Bool)
  (temp___do_typ_inv_843 Bool)) Bool (=>
                                     (or (= temp___is_init_840 true)
                                     (<= 0 5)) (in_range20 temp___expr_844)))

;; get__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant12 key1 true true true true)
     (= (has_key2 container key1) true))
     (let ((result (get4 container key1)))
     (and
     (=> (= (distinct 1 0) true)
     (and (= result (w_get1 container (witness1 container key1)))
     (forall ((k Int))
     (=> (and (in_range18 k) (= (has_key2 container k) true))
     (= (= (equivalent_keys k key1) true)
     (= (witness1 container key1) (witness1 container k)))))))
     (dynamic_invariant13 result true false true true)))) :pattern ((get4
                                                                    container
                                                                    key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep8)) (! (dynamic_invariant (length8 container)
  true false true true) :pattern ((length8 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep8) (right us_rep8))
  (! (= (= (oeq6 left right) true)
     (and
     (forall ((key1 Int))
     (=> (and (in_range18 key1) (= (has_key2 left key1) true))
     (and (= (has_key2 right key1) true)
     (= (get4 right key1) (get4 left key1)))))
     (forall ((key1 Int))
     (=> (and (in_range18 key1) (= (has_key2 right key1) true))
     (= (has_key2 left key1) true))))) :pattern ((oeq6 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep8))
  (! (= (= (is_empty1 container) true)
     (forall ((key1 Int))
     (not (and (in_range18 key1) (= (has_key2 container key1) true))))) :pattern (
  (is_empty1 container)) )))

(declare-fun has_witness1 (us_rep8 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep8 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant12 key1 true true true true)
     (= (has_key2 container key1) true))
     (let ((result (witness1 container key1)))
     (and (= (has_witness1 container result) true) (dynamic_invariant result
     true false true true)))) :pattern ((witness1 container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep8))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant witness2 true true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant13
     (w_get1 container witness2) true false true true)) :pattern ((w_get1
                                                                  container
                                                                  witness2)) ))))

(define-fun dynamic_invariant14 ((temp___expr_880 Int)
  (temp___is_init_876 Bool) (temp___skip_constant_877 Bool)
  (temp___do_toplevel_878 Bool)
  (temp___do_typ_inv_879 Bool)) Bool (=>
                                     (or (= temp___is_init_876 true)
                                     (<= 0 2147483647)) (in_range19
                                     temp___expr_880)))

;; length__post_axiom
  (assert
  (forall ((container us_rep7))
  (! (let ((result (length5 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true true))) :pattern ((length5 container)) )))

(declare-sort element_type5 0)

(declare-fun element_typeqtint5 (element_type5) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type5))
  (and (<= 1 (element_typeqtint5 i)) (<= (element_typeqtint5 i) 2147483647))))

(define-fun in_range21 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE18 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check18 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE18 (us_image) Int)

(declare-fun user_eq32 (element_type5 element_type5) Bool)

(declare-const dummy32 element_type5)

(declare-datatypes ((element_type__ref7 0))
(((element_type__refqtmk7 (element_type__content7 element_type5)))))
(define-fun element_type__ref_element_type__content__6__projection ((a element_type__ref7)) element_type5 
  (element_type__content7 a))

(define-fun dynamic_invariant15 ((temp___expr_873 Int)
  (temp___is_init_869 Bool) (temp___skip_constant_870 Bool)
  (temp___do_toplevel_871 Bool)
  (temp___do_typ_inv_872 Bool)) Bool (=>
                                     (or (= temp___is_init_869 true)
                                     (<= 1 2147483647)) (in_range21
                                     temp___expr_873)))

;; get__post_axiom
  (assert
  (forall ((container us_rep7))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant14 position true true true true)
     (and (<= 1 position) (<= position (last1 container))))
     (dynamic_invariant15 (get2 container position) true false true true)) :pattern (
  (get2 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key1 us_rep4))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k us_rep4))
     (and (= (has_key1 container k) true) (= (bool_eq4 k key1) true)))
     (= (has_key1 container key1) true))) :pattern ((has_key1 container key1)) ))))

(declare-fun witness2 (us_rep6 us_rep4) Int)

(declare-fun witness__function_guard2 (Int us_rep6 us_rep4) Bool)

(declare-fun w_get2 (us_rep6 Int) Int)

(declare-fun w_get__function_guard2 (Int us_rep6 Int) Bool)

(declare-sort element_type6 0)

(declare-fun element_typeqtint6 (element_type6) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type6))
  (and (<= 1 (element_typeqtint6 i)) (<= (element_typeqtint6 i) 2147483647))))

(define-fun in_range22 ((x1 Int)) Bool (and (<= 1 x1) (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE19 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check19 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE19 (us_image) Int)

(declare-fun user_eq33 (element_type6 element_type6) Bool)

(declare-const dummy33 element_type6)

(declare-datatypes ((element_type__ref8 0))
(((element_type__refqtmk8 (element_type__content8 element_type6)))))
(define-fun element_type__ref_element_type__content__7__projection ((a element_type__ref8)) element_type6 
  (element_type__content8 a))

(define-fun dynamic_invariant16 ((temp___expr_903 Int)
  (temp___is_init_899 Bool) (temp___skip_constant_900 Bool)
  (temp___do_toplevel_901 Bool)
  (temp___do_typ_inv_902 Bool)) Bool (=>
                                     (or (= temp___is_init_899 true)
                                     (<= 1 2147483647)) (in_range22
                                     temp___expr_903)))

;; get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key1 us_rep4))
  (! (=> (= (has_key1 container key1) true)
     (let ((result (get3 container key1)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get2 container (witness2 container key1)))
     (forall ((k us_rep4))
     (=> (= (has_key1 container k) true)
     (= (= (bool_eq4 k key1) true)
     (= (witness2 container key1) (witness2 container k)))))))
     (dynamic_invariant16 result true false true true)))) :pattern ((get3
                                                                    container
                                                                    key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep6)) (! (dynamic_invariant (length9 container)
  true false true true) :pattern ((length9 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep6) (right us_rep6))
  (! (= (= (oeq7 left right) true)
     (and
     (forall ((key1 us_rep4))
     (=> (= (has_key1 left key1) true)
     (and (= (has_key1 right key1) true)
     (= (get3 right key1) (get3 left key1)))))
     (forall ((key1 us_rep4))
     (=> (= (has_key1 right key1) true) (= (has_key1 left key1) true))))) :pattern (
  (oeq7 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep6))
  (! (= (= (is_empty2 container) true)
     (forall ((key1 us_rep4)) (not (= (has_key1 container key1) true)))) :pattern (
  (is_empty2 container)) )))

(declare-fun has_witness2 (us_rep6 Int) Bool)

(declare-fun has_witness__function_guard2 (Bool us_rep6 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((key1 us_rep4))
  (! (=> (= (has_key1 container key1) true)
     (let ((result (witness2 container key1)))
     (and (= (has_witness2 container result) true) (dynamic_invariant result
     true false true true)))) :pattern ((witness2 container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep6))
  (forall ((witness3 Int))
  (! (=>
     (and (dynamic_invariant witness3 true true true true)
     (= (has_witness2 container witness3) true)) (dynamic_invariant16
     (w_get2 container witness3) true false true true)) :pattern ((w_get2
                                                                  container
                                                                  witness3)) ))))

(declare-sort extended_index2 0)

(declare-fun extended_indexqtint2 (extended_index2) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index2))
  (and (<= (- 1) (extended_indexqtint2 i))
  (<= (extended_indexqtint2 i) 10001))))

(define-fun in_range23 ((x1 Int)) Bool (and (<= (- 1) x1) (<= x1 10001)))

(declare-fun attr__ATTRIBUTE_IMAGE20 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check20 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE20 (us_image) Int)

(declare-fun user_eq34 (extended_index2 extended_index2) Bool)

(declare-const dummy34 extended_index2)

(declare-datatypes ((extended_index__ref2 0))
(((extended_index__refqtmk2 (extended_index__content2 extended_index2)))))
(define-fun extended_index__ref_extended_index__content__3__projection ((a extended_index__ref2)) extended_index2 
  (extended_index__content2 a))

(define-fun dynamic_invariant17 ((temp___expr_1150 Int)
  (temp___is_init_1146 Bool) (temp___skip_constant_1147 Bool)
  (temp___do_toplevel_1148 Bool)
  (temp___do_typ_inv_1149 Bool)) Bool (=>
                                      (or (= temp___is_init_1146 true)
                                      (<= (- 1) 10001)) (in_range23
                                      temp___expr_1150)))

(define-fun oeq8 ((left us_rep11)
  (right us_rep11)) Bool (and (= (length4 left) (length4 right)) (ite 
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 0 n)
                                                                 (<= n 
                                                                 (last left)))
                                                                 (= (bool_eq10
                                                                    (get5
                                                                    left n)
                                                                    (get5
                                                                    right n)) true)))
                                                                 true false)))

(declare-fun oeq__function_guard8 (Bool us_rep11 us_rep11) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep11) (b us_rep11))
  (! (= (user_eq20 a b) (oeq8 a b)) :pattern ((user_eq20 a b)) )))

(define-fun default_initial_assumption7 ((temp___expr_1199 us_rep11)
  (temp___skip_top_level_1200 Bool)) Bool (=>
                                          (not
                                          (= temp___skip_top_level_1200 true))
                                          (= (length4 temp___expr_1199) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep9))
  (! (= (length4 (model3 container)) (length3 container)) :pattern ((model3
                                                                    container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep9) (right us_rep9))
  (! (= (= (oeq2 left right) true)
     (= (oeq8 (model3 left) (model3 right)) true)) :pattern ((oeq2 left
                                                             right)) )))

(define-fun dynamic_invariant18 ((temp___expr_1133 Int)
  (temp___is_init_1129 Bool) (temp___skip_constant_1130 Bool)
  (temp___do_toplevel_1131 Bool)
  (temp___do_typ_inv_1132 Bool)) Bool (=>
                                      (or (= temp___is_init_1129 true)
                                      (<= 0 10000)) (in_range15
                                      temp___expr_1133)))

(declare-sort extended_index3 0)

(declare-fun extended_indexqtint3 (extended_index3) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index3))
  (and (<= (- 1) (extended_indexqtint3 i))
  (<= (extended_indexqtint3 i) 10000))))

(define-fun in_range24 ((x1 Int)) Bool (and (<= (- 1) x1) (<= x1 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE21 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check21 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE21 (us_image) Int)

(declare-fun user_eq35 (extended_index3 extended_index3) Bool)

(declare-const dummy35 extended_index3)

(declare-datatypes ((extended_index__ref3 0))
(((extended_index__refqtmk3 (extended_index__content3 extended_index3)))))
(define-fun extended_index__ref_extended_index__content__4__projection ((a extended_index__ref3)) extended_index3 
  (extended_index__content3 a))

(define-fun dynamic_invariant19 ((temp___expr_1191 Int)
  (temp___is_init_1187 Bool) (temp___skip_constant_1188 Bool)
  (temp___do_toplevel_1189 Bool)
  (temp___do_typ_inv_1190 Bool)) Bool (=>
                                      (or (= temp___is_init_1187 true)
                                      (<= (- 1) 10000)) (in_range24
                                      temp___expr_1191)))

;; length__post_axiom
  (assert
  (forall ((container us_rep11))
  (! (let ((result (length4 container)))
     (and (<= (+ (- 1) result) 10000) (dynamic_invariant result true false
     true true))) :pattern ((length4 container)) )))

;; get__post_axiom
  (assert true)

(assert
;; defqtvc
 ;; File "partition_refinement.ads", line 40, characters 0-0
  (not
  (forall ((a (Array Int positive)) (d__split_fields us_main_type3)
  (p__split_fields us_main_type7) (f (Array Int partition_index)))
  (=> (= (us_repqtmk (us_split_fieldsqtmk rliteral)) no_element)
  (=>
  (<= (* 2 (length3
           (us_repqtmk4 p__split_discrs
           (us_split_fieldsqtmk4 p__split_fields)))) (capacity
                                                     (us_repqtmk4
                                                     p__split_discrs
                                                     (us_split_fieldsqtmk4
                                                     p__split_fields))))
  (=>
  (<= (length3
      (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields))) 5000)
  (=>
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (contains
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields))
     (to_rep (select a j))) true)))
  (=>
  (forall ((c us_rep4))
  (=>
  (= (has_element1
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields)) c) true)
  (= (to_rep
     (select a (element1
               (us_repqtmk3 d__split_discrs
               (us_split_fieldsqtmk3 d__split_fields)) c))) (key
                                                            (us_repqtmk3
                                                            d__split_discrs
                                                            (us_split_fieldsqtmk3
                                                            d__split_fields))
                                                            c))))
  (=>
  (forall ((c us_rep))
  (=> (= (has_element x c) true)
  (= (contains
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields))
     (element x c)) true)))
  (=>
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (let ((temp___2189 (to_rep5 (select f j))))
  (and (<= 0 temp___2189)
  (<= temp___2189 (- (length3
                     (us_repqtmk4 p__split_discrs
                     (us_split_fieldsqtmk4 p__split_fields))) 1))))))
  (=>
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (and
  (<= (to_rep4
      (rec__partition_refinement__interval__first
      (us_split_fields11
      (element2
      (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields))
      (to_rep5 (select f j)))))) j)
  (<= j (to_rep4
        (rec__partition_refinement__interval__last
        (us_split_fields11
        (element2
        (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields))
        (to_rep5 (select f j))))))))))
  (=>
  (forall ((j Int))
  (=>
  (and (<= 0 j)
  (<= j (- (length3
           (us_repqtmk4 p__split_discrs
           (us_split_fieldsqtmk4 p__split_fields))) 1)))
  (= (to_rep3
     (rec__partition_refinement__interval__count
     (us_split_fields11
     (element2
     (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields)) j)))) 0)))
  (let ((o x))
  (let ((partition_refinement__refine__c__assume (first o)))
  (=>
  (ite (= (= (length o) 0) true)
  (= (bool_eq partition_refinement__refine__c__assume no_element) true)
  (and (= (has_element o partition_refinement__refine__c__assume) true)
  (= (get (positions o) partition_refinement__refine__c__assume) 1)))
  (forall ((c__split_fields count_type))
  (=>
  (= (us_split_fieldsqtmk c__split_fields) (us_split_fields1
                                           partition_refinement__refine__c__assume))
  (=>
  (= (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields)) 
  d_old)
  (let ((o1 (us_repqtmk (us_split_fieldsqtmk c__split_fields))))
  (let ((o2 x))
  (let ((o3 (has_element o2 o1)))
  (=> (= (= o3 true) (= (has_key (positions o2) o1) true))
  (=> (= o3 true)
  (let ((usf (length3
             (us_repqtmk4 p__split_discrs
             (us_split_fieldsqtmk4 p__split_fields)))))
  (let ((usf1 (capacity
              (us_repqtmk4 p__split_discrs
              (us_split_fieldsqtmk4 p__split_fields)))))
  (=>
  (= (contains
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields))
     (element x (us_repqtmk (us_split_fieldsqtmk c__split_fields)))) true)
  (let ((o4 (us_repqtmk (us_split_fieldsqtmk c__split_fields))))
  (let ((o5 x))
  (let ((o6 (element o5 o4)))
  (=>
  (and (dynamic_invariant2 o6 true false true true)
  (= o6 (get1 (model1 o5) (get (positions o5) o4))))
  (let ((o7 p__split_discrs))
  (let ((o8 d__split_discrs))
  (forall ((a1 (Array Int positive)) (d__split_fields1 us_main_type3)
  (p__split_fields1 us_main_type7))
  (=>
  (and
  (and
  (and
  (and
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 5))
  (= (to_rep (select a1 k)) (ite (= k (element3
                                      (us_repqtmk3 o8
                                      (us_split_fieldsqtmk3 d__split_fields))
                                      o6))
                            (to_rep
                            (select a (+ (to_rep4
                                         (rec__partition_refinement__interval__first
                                         (us_split_fields11
                                         (element2
                                         (us_repqtmk4 o7
                                         (us_split_fieldsqtmk4
                                         p__split_fields))
                                         (to_rep5
                                         (select f (element3
                                                   (us_repqtmk3 o8
                                                   (us_split_fieldsqtmk3
                                                   d__split_fields)) o6))))))) 
                            (to_rep3
                            (rec__partition_refinement__interval__count
                            (us_split_fields11
                            (element2
                            (us_repqtmk4 o7
                            (us_split_fieldsqtmk4 p__split_fields))
                            (to_rep5
                            (select f (element3
                                      (us_repqtmk3 o8
                                      (us_split_fieldsqtmk3 d__split_fields))
                                      o6))))))))))
                            (ite (= k (+ (to_rep4
                                         (rec__partition_refinement__interval__first
                                         (us_split_fields11
                                         (element2
                                         (us_repqtmk4 o7
                                         (us_split_fieldsqtmk4
                                         p__split_fields))
                                         (to_rep5
                                         (select f (element3
                                                   (us_repqtmk3 o8
                                                   (us_split_fieldsqtmk3
                                                   d__split_fields)) o6))))))) 
                            (to_rep3
                            (rec__partition_refinement__interval__count
                            (us_split_fields11
                            (element2
                            (us_repqtmk4 o7
                            (us_split_fieldsqtmk4 p__split_fields))
                            (to_rep5
                            (select f (element3
                                      (us_repqtmk3 o8
                                      (us_split_fieldsqtmk3 d__split_fields))
                                      o6)))))))))
                            (to_rep
                            (select a (element3
                                      (us_repqtmk3 o8
                                      (us_split_fieldsqtmk3 d__split_fields))
                                      o6)))
                            (to_rep (select a k)))))))
  (= (capacity (us_repqtmk4 o7 (us_split_fieldsqtmk4 p__split_fields1))) 
  (capacity (us_repqtmk4 o7 (us_split_fieldsqtmk4 p__split_fields)))))
  (= (length3 (us_repqtmk4 o7 (us_split_fieldsqtmk4 p__split_fields1))) 
  (length3 (us_repqtmk4 o7 (us_split_fieldsqtmk4 p__split_fields)))))
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (contains (us_repqtmk3 o8 (us_split_fieldsqtmk3 d__split_fields1))
     (to_rep (select a1 j))) true))))
  (forall ((c us_rep4))
  (=>
  (= (has_element1 (us_repqtmk3 o8 (us_split_fieldsqtmk3 d__split_fields1))
     c) true)
  (= (to_rep
     (select a1 (element1
                (us_repqtmk3 o8 (us_split_fieldsqtmk3 d__split_fields1)) c))) 
  (key (us_repqtmk3 o8 (us_split_fieldsqtmk3 d__split_fields1)) c)))))
  (= (oeq4 (keys (us_repqtmk3 o8 (us_split_fieldsqtmk3 d__split_fields)))
     (keys (us_repqtmk3 o8 (us_split_fieldsqtmk3 d__split_fields1)))) true))
  (let ((o9 x))
  (forall ((c__split_fields1 count_type))
  (=>
  (ite (= (or (bool_eq (us_repqtmk (us_split_fieldsqtmk c__split_fields))
              no_element) (= (get (positions o9)
                             (us_repqtmk
                             (us_split_fieldsqtmk c__split_fields))) 
  (length o9))) true)
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk c__split_fields1)) no_element) true)
  (and
  (= (has_element o9 (us_repqtmk (us_split_fieldsqtmk c__split_fields1))) true)
  (= (get (positions o9) (us_repqtmk (us_split_fieldsqtmk c__split_fields1))) (+ 
  (get (positions o9) (us_repqtmk (us_split_fieldsqtmk c__split_fields))) 1))))
  (let ((o10 (capacity
             (us_repqtmk4 p__split_discrs
             (us_split_fieldsqtmk4 p__split_fields1)))))
  (=>
  (and (dynamic_invariant5 o10 true false true true)
  (= o10 (to_rep2
         (rec__partition_refinement__partitions__vector__capacity
         p__split_discrs))))
  (forall ((a2 (Array Int positive)) (d__split_fields2 us_main_type3)
  (p__split_fields2 us_main_type7) (c__split_fields2 count_type))
  (=>
  (and
  (= (capacity
     (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields2))) usf1)
  (and
  (= (length3
     (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields2))) usf)
  (and
  (forall ((c us_rep4))
  (=>
  (= (has_element1
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields2)) c) true)
  (= (to_rep
     (select a2 (element1
                (us_repqtmk3 d__split_discrs
                (us_split_fieldsqtmk3 d__split_fields2)) c))) (key
                                                              (us_repqtmk3
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk3
                                                              d__split_fields2))
                                                              c))))
  (and
  (forall ((c us_rep))
  (=> (= (has_element x c) true)
  (= (contains
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields2))
     (element x c)) true)))
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (contains
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields2))
     (to_rep (select a2 j))) true)))))))
  (forall ((o11 Int))
  (=>
  (and
  (not
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk c__split_fields2)) no_element) true))
  (= o11 (- (get (positions x)
            (us_repqtmk (us_split_fieldsqtmk c__split_fields2))) 1)))
  (forall ((temp___2164 Int))
  (=> (= temp___2164 o11)
  (let ((o12 (us_repqtmk (us_split_fieldsqtmk c__split_fields2))))
  (let ((o13 x))
  (let ((o14 (has_element o13 o12)))
  (=> (= (= o14 true) (= (has_key (positions o13) o12) true))
  (=> (= o14 true)
  (=>
  (= (contains
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields2))
     (element x (us_repqtmk (us_split_fieldsqtmk c__split_fields2)))) true)
  (let ((o15 (us_repqtmk (us_split_fieldsqtmk c__split_fields2))))
  (let ((o16 x))
  (let ((o17 (element o16 o15)))
  (=>
  (and (dynamic_invariant2 o17 true false true true)
  (= o17 (get1 (model1 o16) (get (positions o16) o15))))
  (let ((o18 p__split_discrs))
  (let ((o19 d__split_discrs))
  (forall ((a3 (Array Int positive)) (d__split_fields3 us_main_type3)
  (p__split_fields3 us_main_type7))
  (=>
  (and
  (and
  (and
  (and
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 5))
  (= (to_rep (select a3 k)) (ite (= k (element3
                                      (us_repqtmk3 o19
                                      (us_split_fieldsqtmk3 d__split_fields2))
                                      o17))
                            (to_rep
                            (select a2 (+ (to_rep4
                                          (rec__partition_refinement__interval__first
                                          (us_split_fields11
                                          (element2
                                          (us_repqtmk4 o18
                                          (us_split_fieldsqtmk4
                                          p__split_fields2))
                                          (to_rep5
                                          (select f (element3
                                                    (us_repqtmk3 o19
                                                    (us_split_fieldsqtmk3
                                                    d__split_fields2)) o17))))))) 
                            (to_rep3
                            (rec__partition_refinement__interval__count
                            (us_split_fields11
                            (element2
                            (us_repqtmk4 o18
                            (us_split_fieldsqtmk4 p__split_fields2))
                            (to_rep5
                            (select f (element3
                                      (us_repqtmk3 o19
                                      (us_split_fieldsqtmk3 d__split_fields2))
                                      o17))))))))))
                            (ite (= k (+ (to_rep4
                                         (rec__partition_refinement__interval__first
                                         (us_split_fields11
                                         (element2
                                         (us_repqtmk4 o18
                                         (us_split_fieldsqtmk4
                                         p__split_fields2))
                                         (to_rep5
                                         (select f (element3
                                                   (us_repqtmk3 o19
                                                   (us_split_fieldsqtmk3
                                                   d__split_fields2)) o17))))))) 
                            (to_rep3
                            (rec__partition_refinement__interval__count
                            (us_split_fields11
                            (element2
                            (us_repqtmk4 o18
                            (us_split_fieldsqtmk4 p__split_fields2))
                            (to_rep5
                            (select f (element3
                                      (us_repqtmk3 o19
                                      (us_split_fieldsqtmk3 d__split_fields2))
                                      o17)))))))))
                            (to_rep
                            (select a2 (element3
                                       (us_repqtmk3 o19
                                       (us_split_fieldsqtmk3
                                       d__split_fields2)) o17)))
                            (to_rep (select a2 k)))))))
  (= (capacity (us_repqtmk4 o18 (us_split_fieldsqtmk4 p__split_fields3))) 
  (capacity (us_repqtmk4 o18 (us_split_fieldsqtmk4 p__split_fields2)))))
  (= (length3 (us_repqtmk4 o18 (us_split_fieldsqtmk4 p__split_fields3))) 
  (length3 (us_repqtmk4 o18 (us_split_fieldsqtmk4 p__split_fields2)))))
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 5))
  (= (contains (us_repqtmk3 o19 (us_split_fieldsqtmk3 d__split_fields3))
     (to_rep (select a3 j))) true))))
  (forall ((c us_rep4))
  (=>
  (= (has_element1 (us_repqtmk3 o19 (us_split_fieldsqtmk3 d__split_fields3))
     c) true)
  (= (to_rep
     (select a3 (element1
                (us_repqtmk3 o19 (us_split_fieldsqtmk3 d__split_fields3)) c))) 
  (key (us_repqtmk3 o19 (us_split_fieldsqtmk3 d__split_fields3)) c)))))
  (= (oeq4 (keys (us_repqtmk3 o19 (us_split_fieldsqtmk3 d__split_fields2)))
     (keys (us_repqtmk3 o19 (us_split_fieldsqtmk3 d__split_fields3)))) true))
  (let ((o20 x))
  (forall ((c__split_fields3 count_type))
  (=>
  (ite (= (or (bool_eq (us_repqtmk (us_split_fieldsqtmk c__split_fields2))
              no_element) (= (get (positions o20)
                             (us_repqtmk
                             (us_split_fieldsqtmk c__split_fields2))) 
  (length o20))) true)
  (= (bool_eq (us_repqtmk (us_split_fieldsqtmk c__split_fields3)) no_element) true)
  (and
  (= (has_element o20 (us_repqtmk (us_split_fieldsqtmk c__split_fields3))) true)
  (= (get (positions o20)
     (us_repqtmk (us_split_fieldsqtmk c__split_fields3))) (+ (get
                                                             (positions o20)
                                                             (us_repqtmk
                                                             (us_split_fieldsqtmk
                                                             c__split_fields2))) 1))))
  (let ((o21 (capacity
             (us_repqtmk4 p__split_discrs
             (us_split_fieldsqtmk4 p__split_fields3)))))
  (=>
  (and (dynamic_invariant5 o21 true false true true)
  (= o21 (to_rep2
         (rec__partition_refinement__partitions__vector__capacity
         p__split_discrs))))
  (=>
  (= (capacity
     (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields3))) usf1)
  (=>
  (= (length3
     (us_repqtmk4 p__split_discrs (us_split_fieldsqtmk4 p__split_fields3))) usf)
  (forall ((c us_rep4))
  (=>
  (= (has_element1
     (us_repqtmk3 d__split_discrs (us_split_fieldsqtmk3 d__split_fields3)) c) true)
  (= (to_rep
     (select a3 (element1
                (us_repqtmk3 d__split_discrs
                (us_split_fieldsqtmk3 d__split_fields3)) c))) (key
                                                              (us_repqtmk3
                                                              d__split_discrs
                                                              (us_split_fieldsqtmk3
                                                              d__split_fields3))
                                                              c))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
