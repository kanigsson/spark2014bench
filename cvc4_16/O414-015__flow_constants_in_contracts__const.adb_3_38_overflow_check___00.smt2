(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun gimme_c (tuple0) Int)

(declare-fun gimme_c__function_guard (Int tuple0) Bool)

(declare-const d Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const c1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun identity (Int) Int)

(declare-fun identity__function_guard (Int Int) Bool)

(declare-const e Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun gimme_zero (tuple0) Int)

(declare-fun gimme_zero__function_guard (Int tuple0) Bool)

(declare-const g Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

;; c__def_axiom
  (assert (= c b))

;; d__def_axiom
  (assert
  (and (gimme_c__function_guard (gimme_c Tuple0) Tuple0)
  (= d (gimme_c Tuple0))))

;; e__def_axiom
  (assert
  (and (identity__function_guard (identity c1) c1)
  (and (identity__function_guard (identity c1) c1)
  (and (identity__function_guard (identity (identity c1)) (identity c1))
  (= e (identity (identity c1)))))))

;; g__def_axiom
  (assert
  (and (gimme_zero__function_guard (gimme_zero Tuple0) Tuple0)
  (= g (gimme_zero Tuple0))))

;; i__def_axiom
  (assert (and (identity__function_guard (identity 0) 0) (= i (identity 0))))

;; gimme_c__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (gimme_c us_void_param)))
     (=> (gimme_c__function_guard result us_void_param) (dynamic_invariant
     result true false true true))) :pattern ((gimme_c us_void_param)) )))

;; gimme_zero__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (gimme_zero us_void_param)))
     (=> (gimme_zero__function_guard result us_void_param) (dynamic_invariant
     result true false true true))) :pattern ((gimme_zero us_void_param)) )))

;; identity__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (identity x)))
     (=> (identity__function_guard result x)
     (and (= result x) (dynamic_invariant result true false true true))))) :pattern (
  (identity x)) )))

(assert
;; defqtvc
 ;; File "const.ads", line 19, characters 0-0
  (not
  (=> (dynamic_invariant g true false true true)
  (=> (= (gimme_zero Tuple0) g)
  (=> (dynamic_invariant i true false true true)
  (=> (= (identity 0) i)
  (=> (dynamic_invariant c1 true false true true)
  (=> (dynamic_invariant a true false true true)
  (=> (dynamic_invariant b true false true true)
  (=> (dynamic_invariant c true false true true)
  (=> (= b c)
  (=> (dynamic_invariant d true false true true)
  (=> (= (gimme_c Tuple0) d)
  (=> (dynamic_invariant e true false true true)
  (=> (= (identity (identity c1)) e)
  (let ((o (+ a b)))
  (=> (in_range o)
  (let ((o1 (+ o c)))
  (=> (in_range o1)
  (let ((o2 (+ o1 d)))
  (=> (in_range o2)
  (let ((o3 (+ o2 e)))
  (=> (in_range o3)
  (let ((o4 (+ o3 0)))
  (=> (in_range o4)
  (let ((o5 (+ o4 g)))
  (=> (in_range o5)
  (let ((o6 (+ o5 0))) (=> (in_range o6) (in_range (+ o6 i)))))))))))))))))))))))))))))))
(check-sat)
(exit)
