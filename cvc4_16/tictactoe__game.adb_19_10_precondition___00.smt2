(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort slot 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (slot slot) Bool)

(declare-const dummy4 slot)

(declare-datatypes ((slot__ref 0))
(((slot__refqtmk (slot__content slot)))))
(define-fun slot__ref_slot__content__projection ((a slot__ref)) slot 
  (slot__content a))

(declare-fun to_rep2 (slot) Int)

(declare-fun of_rep2 (Int) slot)

;; inversion_axiom
  (assert
  (forall ((x slot)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x slot)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int slot))))))
(declare-fun slide1 ((Array Int slot) Int Int) (Array Int slot))

;; slide_eq
  (assert
  (forall ((a (Array Int slot)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int slot)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int slot)) (a__first Int) (a__last Int)
  (b (Array Int slot)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep2 (select a temp___idx_156)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep2 (select a temp___idx_156)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-const dummy5 (Array Int slot))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq5 ((Array Int slot) (Array Int slot)) Bool)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int (Array Int slot)))))))
(declare-fun slide2 ((Array Int (Array Int slot)) Int
  Int) (Array Int (Array Int slot)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int (Array Int slot))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int slot))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (bool_eq2 (select a temp___idx_157) 1 3
                              (select b (+ (- b__first a__first) temp___idx_157))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (bool_eq2 (select a temp___idx_157) 1 3
     (select b (+ (- b__first a__first) temp___idx_157)) 1 3) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)

(declare-fun num_free_slots__function_guard (Int
  (Array Int (Array Int slot))) Bool)

(declare-fun is_full ((Array Int (Array Int slot))) Bool)

(declare-fun is_full__function_guard (Bool
  (Array Int (Array Int slot))) Bool)

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (num_free_slots__function_guard (num_free_slots tictactoe__my_board1)
     tictactoe__my_board1))
     (= (= (is_full tictactoe__my_board) true)
     (= (num_free_slots tictactoe__my_board) 0))) :pattern ((is_full
                                                            tictactoe__my_board)) )))

(declare-fun won ((Array Int (Array Int slot)) us_private) Int)

(declare-fun won__function_guard (Int (Array Int (Array Int slot))
  us_private) Bool)

(define-fun dynamic_invariant ((temp___expr_206 Int)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)
  (temp___do_typ_inv_205 Bool)) Bool (=>
                                     (or (= temp___is_init_202 true)
                                     (<= 0 2)) (in_range4 temp___expr_206)))

;; won__post_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (forall ((tictactoe__all_solutions us_private))
  (! (let ((result (won tictactoe__my_board tictactoe__all_solutions)))
     (=> (won__function_guard result tictactoe__my_board
     tictactoe__all_solutions) (dynamic_invariant result true false true
     true))) :pattern ((won tictactoe__my_board tictactoe__all_solutions)) ))))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun temp___String_Literal_300 (tuple0) (Array Int character))

;; temp___String_Literal_300__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_300 us_void_param) 1)) 80)
     (= (to_rep (select (temp___String_Literal_300 us_void_param) 2)) 108))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_300 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_300 us_void_param) 4)) 121))
     (and
     (= (to_rep (select (temp___String_Literal_300 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_300 us_void_param) 6)) 114)))) :pattern (
  (temp___String_Literal_300 us_void_param)) )))

(declare-fun temp___String_Literal_301 (tuple0) (Array Int character))

;; temp___String_Literal_301__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 2)) 111))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 3)) 109)
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 4)) 112))
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 5)) 117))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 6)) 116)
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 7)) 101))
     (= (to_rep (select (temp___String_Literal_301 us_void_param) 8)) 114)))) :pattern (
  (temp___String_Literal_301 us_void_param)) )))

(declare-fun temp___String_Literal_306 (tuple0) (Array Int character))

;; temp___String_Literal_306__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 1)) 82)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 2)) 101))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 4)) 108))
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 5)) 108))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 6)) 121)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 7)) 44)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 8)) 32)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 9)) 108))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 10)) 111)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 11)) 115))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 12)) 105)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 13)) 110))
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 14)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 15)) 32)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 16)) 97)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 17)) 103)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 18)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 19)) 105)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 20)) 110)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 21)) 115)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 22)) 116))
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 23)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 24)) 116)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 25)) 105)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 26)) 99)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 27)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 28)) 116)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 29)) 97))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 30)) 99)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 31)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 32)) 116)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 33)) 111)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 34)) 101)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 35)) 63))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 36)) 63)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 37)) 63))))))) :pattern (
  (temp___String_Literal_306 us_void_param)) )))

(declare-fun temp___String_Literal_307 (tuple0) (Array Int character))

;; temp___String_Literal_307__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 2)) 105))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 3)) 108)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 4)) 108))
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 5)) 32)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 6)) 116)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 7)) 114)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 8)) 121))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 9)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 10)) 117)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 11)) 115))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 12)) 105))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 13)) 110)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 14)) 103))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 15)) 32))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 16)) 97)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 17)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 18)) 100)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 19)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 20)) 101)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 21)) 112))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 22)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 23)) 108)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 24)) 101))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 25)) 97))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 26)) 114)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 27)) 110))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 28)) 105)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 29)) 110)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 30)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 31)) 32)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 32)) 97)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 33)) 108)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 34)) 103))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 35)) 111)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 36)) 114)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 37)) 105))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 38)) 116))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 39)) 104)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 40)) 109))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 41)) 32))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 42)) 110)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 43)) 101))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 44)) 120))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 45)) 116)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 46)) 32))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 47)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 48)) 105)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 49)) 109))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 50)) 101))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 51)) 46)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 52)) 46))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 53)) 46))))))) :pattern (
  (temp___String_Literal_307 us_void_param)) )))

(declare-fun temp___String_Literal_308 (tuple0) (Array Int character))

;; temp___String_Literal_308__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 1)) 87)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 2)) 104))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 5)) 39))
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 6)) 115)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 7)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 8)) 116)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 9)) 104))
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 10)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 11)) 32)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 12)) 111))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 13)) 116)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 14)) 104))
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 15)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 16)) 114)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 17)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 18)) 107)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 19)) 105))
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 20)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 21)) 100)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 22)) 63)))))) :pattern (
  (temp___String_Literal_308 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (natural natural) Bool)

(declare-const dummy6 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range5
                                    temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant5 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-sort pos 0)

(declare-fun posqtint (pos) Int)

;; pos'axiom
  (assert (forall ((i pos)) (and (<= 1 (posqtint i)) (<= (posqtint i) 3))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (pos pos) Bool)

(declare-const dummy7 pos)

(declare-datatypes ((pos__ref 0))
(((pos__refqtmk (pos__content pos)))))
(define-fun pos__ref_pos__content__projection ((a pos__ref)) pos (pos__content
                                                                 a))

(define-fun dynamic_invariant6 ((temp___expr_199 Int)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (=>
                                     (or (= temp___is_init_195 true)
                                     (<= 1 3)) (in_range6 temp___expr_199)))

(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)

(declare-fun one_free_slot__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; one_free_slot__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (let ((result (one_free_slot x y tictactoe__my_board)))
     (=> (one_free_slot__function_guard result x y tictactoe__my_board)
     (dynamic_invariant1 result true false true true)))) :pattern ((one_free_slot
                                                                   x y
                                                                   tictactoe__my_board)) ))))

;; one_free_slot__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep2
                                                        (let ((temp___237 (select tictactoe__my_board x)))
                                                        (select temp___237 y))) 0)
                                                1 0))) :pattern ((one_free_slot
                                                                 x y
                                                                 tictactoe__my_board)) ))))

(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)

(declare-fun count_free_slots__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; count_free_slots__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (let ((result (count_free_slots x y tictactoe__my_board)))
     (=> (count_free_slots__function_guard result x y tictactoe__my_board)
     (dynamic_invariant1 result true false true true)))) :pattern ((count_free_slots
                                                                   x y
                                                                   tictactoe__my_board)) ))))

;; count_free_slots__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 1 tictactoe__my_board1)
     1 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 2 tictactoe__my_board1)
     1 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 3 tictactoe__my_board1)
     1 3 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 1 tictactoe__my_board1)
     2 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 2 tictactoe__my_board1)
     2 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 3 tictactoe__my_board1)
     2 3 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 1 tictactoe__my_board1)
     3 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 2 tictactoe__my_board1)
     3 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 3 tictactoe__my_board1)
     3 3 tictactoe__my_board1))
     (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot
                                                               1 1
                                                               tictactoe__my_board) 
     (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y)
                                                               (one_free_slot
                                                               1 3
                                                               tictactoe__my_board)
                                                               0)) (ite (<= 2 x)
                                                                   (+ (+ 
                                                                   (one_free_slot
                                                                   2 1
                                                                   tictactoe__my_board) 
                                                                   (ite (<= 2 y)
                                                                   (one_free_slot
                                                                   2 2
                                                                   tictactoe__my_board)
                                                                   0)) 
                                                                   (ite (<= 3 y)
                                                                   (one_free_slot
                                                                   2 3
                                                                   tictactoe__my_board)
                                                                   0)) 0)) 
     (ite (<= 3 x)
     (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y)
                                                   (one_free_slot 3 2
                                                   tictactoe__my_board) 0)) 
     (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0))))))))))))) :pattern (
  (count_free_slots x y tictactoe__my_board)) ))))

;; num_free_slots__post_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (let ((result (num_free_slots tictactoe__my_board)))
     (=> (num_free_slots__function_guard result tictactoe__my_board)
     (dynamic_invariant2 result true false true true))) :pattern ((num_free_slots
                                                                  tictactoe__my_board)) )))

;; num_free_slots__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (count_free_slots__function_guard
     (count_free_slots 3 3 tictactoe__my_board1) 3 3 tictactoe__my_board1))
     (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3
                                             tictactoe__my_board))) :pattern (
  (num_free_slots tictactoe__my_board)) )))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (count count) Bool)

(declare-const dummy8 count)

(declare-datatypes ((count__ref 0))
(((count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant7 ((temp___expr_167 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_167)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(assert
;; defqtvc
 ;; File "game.adb", line 4, characters 0-0
  (not
  (forall ((all_solutions us_private)
  (my_board (Array Int (Array Int slot))))
  (=>
  (forall ((my_board1 (Array Int (Array Int slot))))
  (num_free_slots__function_guard (num_free_slots my_board1) my_board1))
  (=> (= (num_free_slots my_board) 9)
  (let ((o (is_full my_board)))
  (=>
  (forall ((my_board1 (Array Int (Array Int slot))))
  (num_free_slots__function_guard (num_free_slots my_board1) my_board1))
  (=>
  (and (is_full__function_guard o my_board)
  (= (= o true) (= (num_free_slots my_board) 0)))
  (=>
  (or (= o true)
  (let ((o1 (won my_board all_solutions)))
  (and (won__function_guard o1 my_board all_solutions) (dynamic_invariant o1
  true false true true))))
  (=> (and (not (= o true)) (= (won my_board all_solutions) 0))
  (forall ((player_turn Bool) (my_board1 (Array Int (Array Int slot)))
  (standard_in us_private) (file_system us_private) (standard_out us_private)
  (standard_err us_private) (current_in us_private) (current_out us_private)
  (current_err us_private))
  (=>
  (forall ((my_board2 (Array Int (Array Int slot)))) (is_full__function_guard
  (is_full my_board2) my_board2))
  (=>
  (forall ((all_solutions1 us_private)
  (my_board2 (Array Int (Array Int slot)))) (won__function_guard
  (won my_board2 all_solutions1) my_board2 all_solutions1))
  (=>
  (= (and (ite true true false) (ite (and (not (= (is_full my_board1) true))
                                     (= (won my_board1 all_solutions) 0))
                                true false)) true)
  (forall ((spark__branch Bool))
  (=> (= spark__branch player_turn)
  (=> (not (= spark__branch true))
  (forall ((standard_in1 us_private) (file_system1 us_private)
  (standard_out1 us_private) (standard_err1 us_private)
  (current_in1 us_private) (current_out1 us_private)
  (current_err1 us_private))
  (=>
  (and
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))
  (=>
  (forall ((my_board2 (Array Int (Array Int slot)))) (is_full__function_guard
  (is_full my_board2) my_board2)) (not (= (is_full my_board1) true))))))))))))))))))))))
(check-sat)
(exit)
