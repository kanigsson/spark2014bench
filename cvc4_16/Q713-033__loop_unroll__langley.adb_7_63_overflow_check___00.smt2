(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer_32 0)

(declare-fun integer_32qtint (integer_32) Int)

;; integer_32'axiom
  (assert
  (forall ((i integer_32))
  (and (<= (- 2147483648) (integer_32qtint i))
  (<= (integer_32qtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer_32 integer_32) Bool)

(declare-const dummy integer_32)

(declare-datatypes ((integer_32__ref 0))
(((integer_32__refqtmk (integer_32__content integer_32)))))
(define-fun integer_32__ref_integer_32__content__2__projection ((a integer_32__ref)) integer_32 
  (integer_32__content a))

(define-fun to_rep ((x integer_32)) Int (integer_32qtint x))

(declare-fun of_rep (Int) integer_32)

;; inversion_axiom
  (assert
  (forall ((x integer_32))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer_32)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer_32))))))
(declare-fun slide ((Array Int integer_32) Int Int) (Array Int integer_32))

;; slide_eq
  (assert
  (forall ((a (Array Int integer_32)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer_32)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer_32)) (a__first Int) (a__last Int)
  (b (Array Int integer_32)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer_32)) (b (Array Int integer_32)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const x (Array Int integer_32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const y (Array Int integer_32))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort tinteger_32B 0)

(declare-fun tinteger_32Bqtint (tinteger_32B) Int)

;; tinteger_32B'axiom
  (assert
  (forall ((i tinteger_32B))
  (and (<= (- 2147483648) (tinteger_32Bqtint i))
  (<= (tinteger_32Bqtint i) 2147483647))))

(define-fun in_range2 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                      (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tinteger_32B tinteger_32B) Bool)

(declare-const dummy1 tinteger_32B)

(declare-datatypes ((tinteger_32B__ref 0))
(((tinteger_32B__refqtmk (tinteger_32B__content tinteger_32B)))))
(define-fun tinteger_32B__ref_tinteger_32B__content__projection ((a tinteger_32B__ref)) tinteger_32B 
  (tinteger_32B__content a))

(define-fun dynamic_invariant ((temp___expr_181 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_181)))

(assert
;; defqtvc
 ;; File "langley.adb", line 5, characters 0-0
  (not
  (forall ((sum (Array Int integer_32)) (i Int) (o Int) (o1 Int))
  (=>
  (forall ((i1 Int))
  (=> (and (<= 0 i1) (<= i1 9))
  (and
  (and
  (and (< (to_rep (select x i1)) 1073741824)
  (< (- 1073741824) (to_rep (select x i1))))
  (< (to_rep (select y i1)) 1073741824))
  (< (- 1073741824) (to_rep (select y i1))))))
  (=> (= i 0)
  (=> (= (to_rep (select y i)) o)
  (=> (= (to_rep (select x i)) o1)
  (let ((o2 (+ o1 o)))
  (=> (in_range2 o2)
  (forall ((o3 integer_32))
  (=> (= (to_rep o3) o2)
  (forall ((sum1 (Array Int integer_32)))
  (=> (= sum1 (store sum i o3))
  (forall ((i1 Int))
  (=> (= i1 1)
  (forall ((o4 Int))
  (=> (= (to_rep (select y i1)) o4)
  (forall ((o5 Int))
  (=> (= (to_rep (select x i1)) o5)
  (let ((o6 (+ o5 o4)))
  (=> (in_range2 o6)
  (forall ((o7 integer_32))
  (=> (= (to_rep o7) o6)
  (forall ((sum2 (Array Int integer_32)))
  (=> (= sum2 (store sum1 i1 o7))
  (forall ((i2 Int))
  (=> (= i2 2)
  (forall ((o8 Int))
  (=> (= (to_rep (select y i2)) o8)
  (forall ((o9 Int))
  (=> (= (to_rep (select x i2)) o9)
  (let ((o10 (+ o9 o8)))
  (=> (in_range2 o10)
  (forall ((o11 integer_32))
  (=> (= (to_rep o11) o10)
  (forall ((sum3 (Array Int integer_32)))
  (=> (= sum3 (store sum2 i2 o11))
  (forall ((i3 Int))
  (=> (= i3 3)
  (forall ((o12 Int))
  (=> (= (to_rep (select y i3)) o12)
  (forall ((o13 Int))
  (=> (= (to_rep (select x i3)) o13)
  (let ((o14 (+ o13 o12)))
  (=> (in_range2 o14)
  (forall ((o15 integer_32))
  (=> (= (to_rep o15) o14)
  (forall ((sum4 (Array Int integer_32)))
  (=> (= sum4 (store sum3 i3 o15))
  (forall ((i4 Int))
  (=> (= i4 4)
  (forall ((o16 Int))
  (=> (= (to_rep (select y i4)) o16)
  (forall ((o17 Int))
  (=> (= (to_rep (select x i4)) o17)
  (let ((o18 (+ o17 o16)))
  (=> (in_range2 o18)
  (forall ((o19 integer_32))
  (=> (= (to_rep o19) o18)
  (forall ((sum5 (Array Int integer_32)))
  (=> (= sum5 (store sum4 i4 o19))
  (forall ((i5 Int))
  (=> (= i5 5)
  (forall ((o20 Int))
  (=> (= (to_rep (select y i5)) o20)
  (forall ((o21 Int))
  (=> (= (to_rep (select x i5)) o21)
  (let ((o22 (+ o21 o20)))
  (=> (in_range2 o22)
  (forall ((o23 integer_32))
  (=> (= (to_rep o23) o22)
  (forall ((sum6 (Array Int integer_32)))
  (=> (= sum6 (store sum5 i5 o23))
  (forall ((i6 Int))
  (=> (= i6 6)
  (forall ((o24 Int))
  (=> (= (to_rep (select y i6)) o24)
  (forall ((o25 Int))
  (=> (= (to_rep (select x i6)) o25)
  (let ((o26 (+ o25 o24)))
  (=> (in_range2 o26)
  (forall ((o27 integer_32))
  (=> (= (to_rep o27) o26)
  (forall ((sum7 (Array Int integer_32)))
  (=> (= sum7 (store sum6 i6 o27))
  (forall ((i7 Int))
  (=> (= i7 7)
  (forall ((o28 Int))
  (=> (= (to_rep (select y i7)) o28)
  (forall ((o29 Int))
  (=> (= (to_rep (select x i7)) o29)
  (let ((o30 (+ o29 o28)))
  (=> (in_range2 o30)
  (forall ((o31 integer_32))
  (=> (= (to_rep o31) o30)
  (forall ((sum8 (Array Int integer_32)))
  (=> (= sum8 (store sum7 i7 o31))
  (forall ((i8 Int))
  (=> (= i8 8)
  (forall ((o32 Int))
  (=> (= (to_rep (select y i8)) o32)
  (forall ((o33 Int))
  (=> (= (to_rep (select x i8)) o33)
  (let ((o34 (+ o33 o32)))
  (=> (in_range2 o34)
  (forall ((o35 integer_32))
  (=> (= (to_rep o35) o34)
  (forall ((sum9 (Array Int integer_32)))
  (=> (= sum9 (store sum8 i8 o35))
  (forall ((i9 Int))
  (=> (= i9 9)
  (forall ((o36 Int))
  (=> (= (to_rep (select y i9)) o36)
  (forall ((o37 Int))
  (=> (= (to_rep (select x i9)) o37)
  (let ((o38 (+ o37 o36)))
  (=> (in_range2 o38)
  (forall ((o39 integer_32))
  (=> (= (to_rep o39) o38)
  (forall ((sum10 (Array Int integer_32)))
  (=> (= sum10 (store sum9 i9 o39))
  (forall ((langley__add__result (Array Int integer_32)))
  (=> (= langley__add__result sum10)
  (forall ((usf Int))
  (=> (= (and (ite (<= 0 usf) true false) (ite (<= usf 9) true false)) true)
  (forall ((o40 Int))
  (=> (= (to_rep (select y usf)) o40)
  (forall ((o41 Int))
  (=> (= (to_rep (select x usf)) o41) (in_range2 (+ o41 o40)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
