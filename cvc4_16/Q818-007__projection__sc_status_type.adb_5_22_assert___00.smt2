(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__sc_status_type__bit_pattern_type__x_1 Bool)(rec__sc_status_type__bit_pattern_type__x_12 Bool)))))
(define-fun us_split_fields_rec__sc_status_type__bit_pattern_type__x_1__projection ((a us_split_fields)) Bool 
  (rec__sc_status_type__bit_pattern_type__x_1 a))

(define-fun us_split_fields_rec__sc_status_type__bit_pattern_type__x_12__projection ((a us_split_fields)) Bool 
  (rec__sc_status_type__bit_pattern_type__x_12 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__sc_status_type__bit_pattern_type__x_1
                                (us_split_fields1 a)) 1 0) (ite (rec__sc_status_type__bit_pattern_type__x_1
                                                                (us_split_fields1
                                                                b)) 1 0))
                        (= (ite (rec__sc_status_type__bit_pattern_type__x_12
                                (us_split_fields1 a)) 1 0) (ite (rec__sc_status_type__bit_pattern_type__x_12
                                                                (us_split_fields1
                                                                b)) 1 0)))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const sc_status_type__bit_pattern_type__x_1__first__bit Int)

(declare-const sc_status_type__bit_pattern_type__x_1__last__bit Int)

(declare-const sc_status_type__bit_pattern_type__x_1__position Int)

;; sc_status_type__bit_pattern_type__x_1__first__bit_axiom
  (assert (<= 0 sc_status_type__bit_pattern_type__x_1__first__bit))

;; sc_status_type__bit_pattern_type__x_1__last__bit_axiom
  (assert
  (< sc_status_type__bit_pattern_type__x_1__first__bit sc_status_type__bit_pattern_type__x_1__last__bit))

;; sc_status_type__bit_pattern_type__x_1__position_axiom
  (assert (<= 0 sc_status_type__bit_pattern_type__x_1__position))

(declare-const sc_status_type__bit_pattern_type__x_12__first__bit Int)

(declare-const sc_status_type__bit_pattern_type__x_12__last__bit Int)

(declare-const sc_status_type__bit_pattern_type__x_12__position Int)

;; sc_status_type__bit_pattern_type__x_12__first__bit_axiom
  (assert (<= 0 sc_status_type__bit_pattern_type__x_12__first__bit))

;; sc_status_type__bit_pattern_type__x_12__last__bit_axiom
  (assert
  (< sc_status_type__bit_pattern_type__x_12__first__bit sc_status_type__bit_pattern_type__x_12__last__bit))

;; sc_status_type__bit_pattern_type__x_12__position_axiom
  (assert (<= 0 sc_status_type__bit_pattern_type__x_12__position))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((bit_pattern_type__ref 0))
(((bit_pattern_type__refqtmk (bit_pattern_type__content us_rep)))))
(define-fun bit_pattern_type__ref_bit_pattern_type__content__projection ((a bit_pattern_type__ref)) us_rep 
  (bit_pattern_type__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__sc_status_type__duplicate_status_type__prime us_rep)(rec__sc_status_type__duplicate_status_type__shadow us_rep)))))
(define-fun us_split_fields_rec__sc_status_type__duplicate_status_type__prime__projection ((a us_split_fields2)) us_rep 
  (rec__sc_status_type__duplicate_status_type__prime a))

(define-fun us_split_fields_rec__sc_status_type__duplicate_status_type__shadow__projection ((a us_split_fields2)) us_rep 
  (rec__sc_status_type__duplicate_status_type__shadow a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq
                            (rec__sc_status_type__duplicate_status_type__prime
                            (us_split_fields3 a))
                            (rec__sc_status_type__duplicate_status_type__prime
                            (us_split_fields3 b))) true)
                         (= (bool_eq
                            (rec__sc_status_type__duplicate_status_type__shadow
                            (us_split_fields3 a))
                            (rec__sc_status_type__duplicate_status_type__shadow
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const sc_status_type__duplicate_status_type__prime__first__bit Int)

(declare-const sc_status_type__duplicate_status_type__prime__last__bit Int)

(declare-const sc_status_type__duplicate_status_type__prime__position Int)

;; sc_status_type__duplicate_status_type__prime__first__bit_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__prime__first__bit))

;; sc_status_type__duplicate_status_type__prime__last__bit_axiom
  (assert
  (< sc_status_type__duplicate_status_type__prime__first__bit sc_status_type__duplicate_status_type__prime__last__bit))

;; sc_status_type__duplicate_status_type__prime__position_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__prime__position))

(declare-const sc_status_type__duplicate_status_type__shadow__first__bit Int)

(declare-const sc_status_type__duplicate_status_type__shadow__last__bit Int)

(declare-const sc_status_type__duplicate_status_type__shadow__position Int)

;; sc_status_type__duplicate_status_type__shadow__first__bit_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__shadow__first__bit))

;; sc_status_type__duplicate_status_type__shadow__last__bit_axiom
  (assert
  (< sc_status_type__duplicate_status_type__shadow__first__bit sc_status_type__duplicate_status_type__shadow__last__bit))

;; sc_status_type__duplicate_status_type__shadow__position_axiom
  (assert (<= 0 sc_status_type__duplicate_status_type__shadow__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ((duplicate_status_type__ref 0))
(((duplicate_status_type__refqtmk (duplicate_status_type__content us_rep1)))))
(define-fun duplicate_status_type__ref_duplicate_status_type__content__projection ((a duplicate_status_type__ref)) us_rep1 
  (duplicate_status_type__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__sc_status_type__object_type__sc_state us_rep1)))))
(define-fun us_split_fields_rec__sc_status_type__object_type__sc_state__projection ((a us_split_fields4)) us_rep1 
  (rec__sc_status_type__object_type__sc_state a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (bool_eq1
                            (rec__sc_status_type__object_type__sc_state
                            (us_split_fields5 a))
                            (rec__sc_status_type__object_type__sc_state
                            (us_split_fields5 b))) true)
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const sc_status_type__object_type__sc_state__first__bit Int)

(declare-const sc_status_type__object_type__sc_state__last__bit Int)

(declare-const sc_status_type__object_type__sc_state__position Int)

;; sc_status_type__object_type__sc_state__first__bit_axiom
  (assert (<= 0 sc_status_type__object_type__sc_state__first__bit))

;; sc_status_type__object_type__sc_state__last__bit_axiom
  (assert
  (< sc_status_type__object_type__sc_state__first__bit sc_status_type__object_type__sc_state__last__bit))

;; sc_status_type__object_type__sc_state__position_axiom
  (assert (<= 0 sc_status_type__object_type__sc_state__position))

(declare-fun user_eq2 (us_rep2 us_rep2) Bool)

(declare-const dummy2 us_rep2)

(declare-datatypes ((object_type__ref 0))
(((object_type__refqtmk (object_type__content us_rep2)))))
(define-fun object_type__ref_object_type__content__projection ((a object_type__ref)) us_rep2 
  (object_type__content a))

(declare-const this us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(assert
;; defqtvc
 ;; File "sc_status_type.ads", line 21, characters 0-0
  (not
  (= (bool_eq
     (rec__sc_status_type__duplicate_status_type__prime
     (us_split_fields3
     (rec__sc_status_type__object_type__sc_state (us_split_fields5 this))))
     (rec__sc_status_type__duplicate_status_type__shadow
     (us_split_fields3
     (rec__sc_status_type__object_type__sc_state (us_split_fields5 this))))) true)))
(check-sat)
(exit)
