(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort scalar_with_default 0)

(declare-fun scalar_with_defaultqtint (scalar_with_default) Int)

;; scalar_with_default'axiom
  (assert
  (forall ((i scalar_with_default))
  (and (<= 0 (scalar_with_defaultqtint i))
  (<= (scalar_with_defaultqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (scalar_with_default scalar_with_default) Bool)

(declare-const dummy1 scalar_with_default)

(declare-datatypes ((scalar_with_default__ref 0))
(((scalar_with_default__refqtmk
  (scalar_with_default__content scalar_with_default)))))
(define-fun scalar_with_default__ref_scalar_with_default__content__5__projection ((a scalar_with_default__ref)) scalar_with_default 
  (scalar_with_default__content a))

(define-fun to_rep ((x scalar_with_default)) Int (scalar_with_defaultqtint x))

(declare-fun of_rep (Int) scalar_with_default)

;; inversion_axiom
  (assert
  (forall ((x scalar_with_default))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x scalar_with_default)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-const first Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ((scalar_no_default__ref 0))
(((scalar_no_default__refqtmk (scalar_no_default__content integer)))))
(define-fun scalar_no_default__ref_scalar_no_default__content__4__projection ((a scalar_no_default__ref)) integer 
  (scalar_no_default__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__with_default__bad_record1__simple_rec__f1 scalar_with_default)(rec__with_default__bad_record1__simple_rec__f2 integer)))))
(define-fun us_split_fields_rec__with_default__bad_record1__simple_rec__f1__projection ((a us_split_fields)) scalar_with_default 
  (rec__with_default__bad_record1__simple_rec__f1 a))

(define-fun us_split_fields_rec__with_default__bad_record1__simple_rec__f2__projection ((a us_split_fields)) integer 
  (rec__with_default__bad_record1__simple_rec__f2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__with_default__bad_record1__simple_rec__f1
                           (us_split_fields1 a))) (to_rep
                                                  (rec__with_default__bad_record1__simple_rec__f1
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__with_default__bad_record1__simple_rec__f2
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__with_default__bad_record1__simple_rec__f2
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const with_default__bad_record1__simple_rec__f1__first__bit Int)

(declare-const with_default__bad_record1__simple_rec__f1__last__bit Int)

(declare-const with_default__bad_record1__simple_rec__f1__position Int)

;; with_default__bad_record1__simple_rec__f1__first__bit_axiom
  (assert (<= 0 with_default__bad_record1__simple_rec__f1__first__bit))

;; with_default__bad_record1__simple_rec__f1__last__bit_axiom
  (assert
  (< with_default__bad_record1__simple_rec__f1__first__bit with_default__bad_record1__simple_rec__f1__last__bit))

;; with_default__bad_record1__simple_rec__f1__position_axiom
  (assert (<= 0 with_default__bad_record1__simple_rec__f1__position))

(declare-const with_default__bad_record1__simple_rec__f2__first__bit Int)

(declare-const with_default__bad_record1__simple_rec__f2__last__bit Int)

(declare-const with_default__bad_record1__simple_rec__f2__position Int)

;; with_default__bad_record1__simple_rec__f2__first__bit_axiom
  (assert (<= 0 with_default__bad_record1__simple_rec__f2__first__bit))

;; with_default__bad_record1__simple_rec__f2__last__bit_axiom
  (assert
  (< with_default__bad_record1__simple_rec__f2__first__bit with_default__bad_record1__simple_rec__f2__last__bit))

;; with_default__bad_record1__simple_rec__f2__position_axiom
  (assert (<= 0 with_default__bad_record1__simple_rec__f2__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((simple_rec__ref 0))
(((simple_rec__refqtmk (simple_rec__content us_rep)))))
(define-fun simple_rec__ref_simple_rec__content__projection ((a simple_rec__ref)) us_rep 
  (simple_rec__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_383 us_rep)
  (temp___is_init_379 Bool) (temp___skip_constant_380 Bool)
  (temp___do_toplevel_381 Bool)
  (temp___do_typ_inv_382 Bool)) Bool (=>
                                     (or (= temp___is_init_379 true)
                                     (<= first 2147483647)) (dynamic_property
                                     first 2147483647
                                     (to_rep1
                                     (rec__with_default__bad_record1__simple_rec__f2
                                     (us_split_fields1 temp___expr_383))))))

(define-fun default_initial_assumption ((temp___expr_384 us_rep)
  (temp___skip_top_level_385 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__with_default__bad_record1__simple_rec__f1
                                            (us_split_fields1
                                            temp___expr_384))) 0)
                                         (= (to_rep1
                                            (rec__with_default__bad_record1__simple_rec__f2
                                            (us_split_fields1
                                            temp___expr_384))) 0)))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(define-fun dynamic_invariant3 ((temp___expr_369 Int)
  (temp___is_init_365 Bool) (temp___skip_constant_366 Bool)
  (temp___do_toplevel_367 Bool)
  (temp___do_typ_inv_368 Bool)) Bool (=>
                                     (or (= temp___is_init_365 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_369)))

(define-fun dynamic_invariant4 ((temp___expr_376 Int)
  (temp___is_init_372 Bool) (temp___skip_constant_373 Bool)
  (temp___do_toplevel_374 Bool)
  (temp___do_typ_inv_375 Bool)) Bool (=>
                                     (or (= temp___is_init_372 true)
                                     (<= first 2147483647)) (dynamic_property
                                     first 2147483647 temp___expr_376)))

;; first__def_axiom
  (assert (= first c))

(assert
;; defqtvc
 ;; File "with_default.ads", line 16, characters 0-0
  (not (=> (dynamic_invariant c true false true true) (in_range1 0))))
(check-sat)
