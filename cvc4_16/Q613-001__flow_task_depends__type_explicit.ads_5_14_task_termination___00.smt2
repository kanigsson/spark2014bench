(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort message_index_type 0)

(declare-fun message_index_typeqtint (message_index_type) Int)

;; message_index_type'axiom
  (assert
  (forall ((i message_index_type))
  (and (<= 1 (message_index_typeqtint i))
  (<= (message_index_typeqtint i) 64))))

(define-fun in_range ((x Int)) Bool (and (<= 1 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (message_index_type message_index_type) Bool)

(declare-const dummy message_index_type)

(declare-datatypes ((message_index_type__ref 0))
(((message_index_type__refqtmk
  (message_index_type__content message_index_type)))))
(define-fun message_index_type__ref_message_index_type__content__projection ((a message_index_type__ref)) message_index_type 
  (message_index_type__content a))

(declare-sort message_count_type 0)

(declare-fun message_count_typeqtint (message_count_type) Int)

;; message_count_type'axiom
  (assert
  (forall ((i message_count_type))
  (and (<= 0 (message_count_typeqtint i))
  (<= (message_count_typeqtint i) 64))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 64)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (message_count_type message_count_type) Bool)

(declare-const dummy1 message_count_type)

(declare-datatypes ((message_count_type__ref 0))
(((message_count_type__refqtmk
  (message_count_type__content message_count_type)))))
(define-fun message_count_type__ref_message_count_type__content__projection ((a message_count_type__ref)) message_count_type 
  (message_count_type__content a))

(declare-sort message_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (message_type message_type) Bool)

(declare-const dummy2 message_type)

(declare-datatypes ((message_type__ref 0))
(((message_type__refqtmk (message_type__content message_type)))))
(define-fun message_type__ref_message_type__content__projection ((a message_type__ref)) message_type 
  (message_type__content a))

(declare-fun to_rep (message_type) Int)

(declare-fun of_rep (Int) message_type)

;; inversion_axiom
  (assert
  (forall ((x message_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x message_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int message_type))))))
(declare-fun slide ((Array Int message_type) Int
  Int) (Array Int message_type))

;; slide_eq
  (assert
  (forall ((a (Array Int message_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int message_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int message_type)) (a__first Int)
  (a__last Int) (b (Array Int message_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int message_type)) (b (Array Int message_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__tasking__mailboxT__next_in message_index_type)(rec__tasking__mailboxT__next_out message_index_type)(rec__tasking__mailboxT__count message_count_type)(rec__tasking__mailboxT__non_empty Bool)(rec__tasking__mailboxT__message_array (Array Int message_type))))))
(define-fun us_split_fields_rec__tasking__mailboxT__next_in__projection ((a us_split_fields)) message_index_type 
  (rec__tasking__mailboxT__next_in a))

(define-fun us_split_fields_rec__tasking__mailboxT__next_out__projection ((a us_split_fields)) message_index_type 
  (rec__tasking__mailboxT__next_out a))

(define-fun us_split_fields_rec__tasking__mailboxT__count__projection ((a us_split_fields)) message_count_type 
  (rec__tasking__mailboxT__count a))

(define-fun us_split_fields_rec__tasking__mailboxT__non_empty__projection ((a us_split_fields)) Bool 
  (rec__tasking__mailboxT__non_empty a))

(define-fun us_split_fields_rec__tasking__mailboxT__message_array__projection ((a us_split_fields)) (Array Int message_type) 
  (rec__tasking__mailboxT__message_array a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const tasking__mailboxT__next_in__first__bit Int)

(declare-const tasking__mailboxT__next_in__last__bit Int)

(declare-const tasking__mailboxT__next_in__position Int)

;; tasking__mailboxT__next_in__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__next_in__first__bit))

;; tasking__mailboxT__next_in__last__bit_axiom
  (assert
  (< tasking__mailboxT__next_in__first__bit tasking__mailboxT__next_in__last__bit))

;; tasking__mailboxT__next_in__position_axiom
  (assert (<= 0 tasking__mailboxT__next_in__position))

(declare-const tasking__mailboxT__next_out__first__bit Int)

(declare-const tasking__mailboxT__next_out__last__bit Int)

(declare-const tasking__mailboxT__next_out__position Int)

;; tasking__mailboxT__next_out__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__next_out__first__bit))

;; tasking__mailboxT__next_out__last__bit_axiom
  (assert
  (< tasking__mailboxT__next_out__first__bit tasking__mailboxT__next_out__last__bit))

;; tasking__mailboxT__next_out__position_axiom
  (assert (<= 0 tasking__mailboxT__next_out__position))

(declare-const tasking__mailboxT__count__first__bit Int)

(declare-const tasking__mailboxT__count__last__bit Int)

(declare-const tasking__mailboxT__count__position Int)

;; tasking__mailboxT__count__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__count__first__bit))

;; tasking__mailboxT__count__last__bit_axiom
  (assert
  (< tasking__mailboxT__count__first__bit tasking__mailboxT__count__last__bit))

;; tasking__mailboxT__count__position_axiom
  (assert (<= 0 tasking__mailboxT__count__position))

(declare-const tasking__mailboxT__non_empty__first__bit Int)

(declare-const tasking__mailboxT__non_empty__last__bit Int)

(declare-const tasking__mailboxT__non_empty__position Int)

;; tasking__mailboxT__non_empty__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__non_empty__first__bit))

;; tasking__mailboxT__non_empty__last__bit_axiom
  (assert
  (< tasking__mailboxT__non_empty__first__bit tasking__mailboxT__non_empty__last__bit))

;; tasking__mailboxT__non_empty__position_axiom
  (assert (<= 0 tasking__mailboxT__non_empty__position))

(declare-const tasking__mailboxT__message_array__first__bit Int)

(declare-const tasking__mailboxT__message_array__last__bit Int)

(declare-const tasking__mailboxT__message_array__position Int)

;; tasking__mailboxT__message_array__first__bit_axiom
  (assert (<= 0 tasking__mailboxT__message_array__first__bit))

;; tasking__mailboxT__message_array__last__bit_axiom
  (assert
  (< tasking__mailboxT__message_array__first__bit tasking__mailboxT__message_array__last__bit))

;; tasking__mailboxT__message_array__position_axiom
  (assert (<= 0 tasking__mailboxT__message_array__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-datatypes ((mailboxT__ref 0))
(((mailboxT__refqtmk (mailboxT__content us_rep)))))
(define-fun mailboxT__ref_mailboxT__content__projection ((a mailboxT__ref)) us_rep 
  (mailboxT__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun in_range3 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

(define-fun to_rep1 ((x message_index_type)) Int (message_index_typeqtint x))

(declare-fun of_rep1 (Int) message_index_type)

;; inversion_axiom
  (assert
  (forall ((x message_index_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x message_index_type)) (! (in_range
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(define-fun to_rep2 ((x message_count_type)) Int (message_count_typeqtint x))

(declare-fun of_rep2 (Int) message_count_type)

;; inversion_axiom
  (assert
  (forall ((x message_count_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x message_count_type)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-fun temp_____aggregate_def_222 (Int) (Array Int message_type))

(define-fun default_initial_assumption ((temp___expr_220 us_rep)
  (temp___skip_top_level_221 Bool)) Bool (and
                                         (and
                                         (= (to_rep1
                                            (rec__tasking__mailboxT__next_in
                                            (us_split_fields1
                                            temp___expr_220))) 1)
                                         (= (to_rep1
                                            (rec__tasking__mailboxT__next_out
                                            (us_split_fields1
                                            temp___expr_220))) 1))
                                         (and
                                         (and
                                         (= (to_rep2
                                            (rec__tasking__mailboxT__count
                                            (us_split_fields1
                                            temp___expr_220))) 0)
                                         (= (rec__tasking__mailboxT__non_empty
                                            (us_split_fields1
                                            temp___expr_220)) (distinct 0 0)))
                                         (= (rec__tasking__mailboxT__message_array
                                            (us_split_fields1
                                            temp___expr_220)) (temp_____aggregate_def_222
                                                              1)))))

(define-fun dynamic_invariant ((temp___expr_187 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)
  (temp___do_typ_inv_186 Bool)) Bool (=>
                                     (or (= temp___is_init_183 true)
                                     (<= 0 1)) (in_range2 temp___expr_187)))

(declare-sort priority 0)

(declare-fun priorityqtint (priority) Int)

;; priority'axiom
  (assert
  (forall ((i priority))
  (and (<= 0 (priorityqtint i)) (<= (priorityqtint i) 97))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 97)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (priority priority) Bool)

(declare-const dummy3 priority)

(declare-datatypes ((priority__ref 0))
(((priority__refqtmk (priority__content priority)))))
(define-fun priority__ref_priority__content__projection ((a priority__ref)) priority 
  (priority__content a))

(define-fun dynamic_invariant1 ((temp___expr_194 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)
  (temp___do_typ_inv_193 Bool)) Bool (=>
                                     (or (= temp___is_init_190 true)
                                     (<= 1 64)) (in_range temp___expr_194)))

(define-fun dynamic_invariant2 ((temp___expr_201 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)
  (temp___do_typ_inv_200 Bool)) Bool (=>
                                     (or (= temp___is_init_197 true)
                                     (<= 0 64)) (in_range1 temp___expr_201)))

;; def_axiom
  (assert
  (forall ((temp___224 Int))
  (=> (dynamic_invariant temp___224 true true true true)
  (forall ((temp___225 Int))
  (= (to_rep (select (temp_____aggregate_def_222 temp___224) temp___225)) temp___224)))))

(define-fun dynamic_invariant3 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 0 97)) (in_range4 temp___expr_166)))

(assert
;; defqtvc
 ;; File "type_explicit.ads", line 5, characters 0-0
  (not true))
(check-sat)
