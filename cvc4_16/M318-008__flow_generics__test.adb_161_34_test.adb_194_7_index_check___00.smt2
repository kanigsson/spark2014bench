;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun found_none (Int) Bool)

(declare-fun found_none__function_guard (Bool Int) Bool)

(declare-sort fruits 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (fruits fruits) Bool)

(declare-const dummy2 fruits)

(declare-datatypes ((fruits__ref 0))
(((fruits__refqtmk (fruits__content fruits)))))
(define-fun fruits__ref_fruits__content__projection ((a fruits__ref)) fruits 
  (fruits__content a))

(define-fun dynamic_invariant ((temp___expr_266 Int)
  (temp___is_init_262 Bool) (temp___skip_constant_263 Bool)
  (temp___do_toplevel_264 Bool)
  (temp___do_typ_inv_265 Bool)) Bool (=>
                                     (or (= temp___is_init_262 true)
                                     (<= 0 9)) (in_range3 temp___expr_266)))

;; found_none__post_axiom
  (assert true)

;; found_none__def_axiom
  (assert
  (forall ((fruit Int))
  (! (= (= (found_none fruit) true) (= fruit 0)) :pattern ((found_none fruit)) )))

(declare-fun fruits_to_fruits_and_weapons (Int) Int)

(declare-fun fruits_to_fruits_and_weapons__function_guard (Int Int) Bool)

(declare-sort fruits_and_weapons 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (fruits_and_weapons fruits_and_weapons) Bool)

(declare-const dummy3 fruits_and_weapons)

(declare-datatypes ((fruits_and_weapons__ref 0))
(((fruits_and_weapons__refqtmk
  (fruits_and_weapons__content fruits_and_weapons)))))
(define-fun fruits_and_weapons__ref_fruits_and_weapons__content__projection ((a fruits_and_weapons__ref)) fruits_and_weapons 
  (fruits_and_weapons__content a))

(define-fun dynamic_invariant1 ((temp___expr_259 Int)
  (temp___is_init_255 Bool) (temp___skip_constant_256 Bool)
  (temp___do_toplevel_257 Bool)
  (temp___do_typ_inv_258 Bool)) Bool (=>
                                     (or (= temp___is_init_255 true)
                                     (<= 0 12)) (in_range4 temp___expr_259)))

;; fruits_to_fruits_and_weapons__post_axiom
  (assert
  (forall ((fruit Int))
  (! (=> (dynamic_invariant fruit true true true true)
     (let ((result (fruits_to_fruits_and_weapons fruit)))
     (=> (fruits_to_fruits_and_weapons__function_guard result fruit)
     (dynamic_invariant1 result true false true true)))) :pattern ((fruits_to_fruits_and_weapons
                                                                   fruit)) )))

;; fruits_to_fruits_and_weapons__def_axiom
  (assert
  (forall ((fruit Int))
  (! (=> (dynamic_invariant fruit true true true true)
     (= (fruits_to_fruits_and_weapons fruit) fruit)) :pattern ((fruits_to_fruits_and_weapons
                                                               fruit)) )))

(declare-fun to_rep1 (fruits) Int)

(declare-fun of_rep1 (Int) fruits)

;; inversion_axiom
  (assert
  (forall ((x fruits))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x fruits)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int fruits))))))
(declare-fun slide ((Array Int fruits) Int Int) (Array Int fruits))

;; slide_eq
  (assert
  (forall ((a (Array Int fruits)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int fruits)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int fruits)) (a__first Int) (a__last Int)
  (b (Array Int fruits)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_158 Int))
                           (=>
                           (and (<= a__first temp___idx_158)
                           (<= temp___idx_158 a__last))
                           (= (to_rep1 (select a temp___idx_158)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_158)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int fruits)) (b (Array Int fruits)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_158 Int))
  (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last))
  (= (to_rep1 (select a temp___idx_158)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_158)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int fruits))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int fruits) (elts a))

(define-fun of_array ((a (Array Int fruits)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((fruit_crate__ref 0))
(((fruit_crate__refqtmk (fruit_crate__content us_t)))))
(define-fun fruit_crate__ref_fruit_crate__content__projection ((a fruit_crate__ref)) us_t 
  (fruit_crate__content a))

(declare-datatypes ((inventory_t__ref 0))
(((inventory_t__refqtmk (inventory_t__content us_t)))))
(define-fun inventory_t__ref_inventory_t__content__projection ((a inventory_t__ref)) us_t 
  (inventory_t__content a))

(declare-const old_inventory us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun to_rep2 (fruits_and_weapons) Int)

(declare-fun of_rep2 (Int) fruits_and_weapons)

;; inversion_axiom
  (assert
  (forall ((x fruits_and_weapons))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x fruits_and_weapons)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int fruits_and_weapons))))))
(declare-fun slide1 ((Array Int fruits_and_weapons) Int
  Int) (Array Int fruits_and_weapons))

;; slide_eq
  (assert
  (forall ((a (Array Int fruits_and_weapons)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int fruits_and_weapons)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int fruits_and_weapons)) (a__first Int)
  (a__last Int) (b (Array Int fruits_and_weapons)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_159 Int))
                           (=>
                           (and (<= a__first temp___idx_159)
                           (<= temp___idx_159 a__last))
                           (= (to_rep2 (select a temp___idx_159)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_159)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int fruits_and_weapons))
  (b (Array Int fruits_and_weapons)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_159 Int))
  (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last))
  (= (to_rep2 (select a temp___idx_159)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_159)))))))))))

(declare-const new_inventory__first integer)

(declare-const new_inventory__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const new_content Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort new_item_t 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (new_item_t new_item_t) Bool)

(declare-const dummy5 new_item_t)

(declare-datatypes ((new_item_t__ref 0))
(((new_item_t__refqtmk (new_item_t__content new_item_t)))))
(define-fun new_item_t__ref_new_item_t__content__projection ((a new_item_t__ref)) new_item_t 
  (new_item_t__content a))

(define-fun dynamic_invariant2 ((temp___expr_403 Int)
  (temp___is_init_399 Bool) (temp___skip_constant_400 Bool)
  (temp___do_toplevel_401 Bool)
  (temp___do_typ_inv_402 Bool)) Bool (=>
                                     (or (= temp___is_init_399 true)
                                     (<= 0 12)) (in_range5 temp___expr_403)))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first2 (mk1 f l))) f) (= (to_rep (last2 (mk1 f l))) l)))) :pattern (
  (mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t1 0))
(((us_tqtmk1 (elts1 (Array Int fruits_and_weapons))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int fruits_and_weapons) (elts1 a))

(define-fun of_array1 ((a (Array Int fruits_and_weapons)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last2 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last2 (rt1 y)))))

(declare-fun user_eq6 (us_t1 us_t1) Bool)

(declare-const dummy6 us_t1)

(declare-datatypes ((fruit_and_weapons_crate__ref 0))
(((fruit_and_weapons_crate__refqtmk (fruit_and_weapons_crate__content us_t1)))))
(define-fun fruit_and_weapons_crate__ref_fruit_and_weapons_crate__content__projection ((a fruit_and_weapons_crate__ref)) us_t1 
  (fruit_and_weapons_crate__content a))

(declare-datatypes ((new_inventory_t__ref 0))
(((new_inventory_t__refqtmk (new_inventory_t__content us_t1)))))
(define-fun new_inventory_t__ref_new_inventory_t__content__projection ((a new_inventory_t__ref)) us_t1 
  (new_inventory_t__content a))

(define-fun dynamic_invariant3 ((temp___expr_363 us_t)
  (temp___is_init_359 Bool) (temp___skip_constant_360 Bool)
  (temp___do_toplevel_361 Bool)
  (temp___do_typ_inv_362 Bool)) Bool (=>
                                     (not (= temp___skip_constant_360 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_363)
                                     (last1 temp___expr_363))))

(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant5 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(define-fun dynamic_invariant6 ((temp___expr_410 us_t1)
  (temp___is_init_406 Bool) (temp___skip_constant_407 Bool)
  (temp___do_toplevel_408 Bool)
  (temp___do_typ_inv_409 Bool)) Bool (=>
                                     (not (= temp___skip_constant_407 true))
                                     (dynamic_property1 1 2147483647
                                     (first3 temp___expr_410)
                                     (last3 temp___expr_410))))

(assert
;; defqtvc
 ;; File "test.ads", line 72, characters 0-0
  (not
  (forall ((new_inventory (Array Int fruits_and_weapons)))
  (=> (dynamic_invariant3 old_inventory true false true true)
  (=> (dynamic_property1 1 2147483647 (to_rep new_inventory__first)
  (to_rep new_inventory__last))
  (=> (dynamic_invariant2 new_content true false true true)
  (=> (= (first1 old_inventory) (to_rep new_inventory__first))
  (=> (= (last1 old_inventory) (to_rep new_inventory__last))
  (let ((temp___500 (first1 old_inventory)))
  (let ((temp___501 (last1 old_inventory)))
  (forall ((i Int))
  (=> (= i temp___500)
  (=>
  (= (and (ite (<= temp___500 i) true false) (ite (<= i temp___501) true
                                             false)) true)
  (forall ((new_inventory1 (Array Int fruits_and_weapons)) (i1 Int))
  (=>
  (= (and (ite (forall ((temp___504 Int))
               (=>
               (and (<= (to_rep new_inventory__first) temp___504)
               (<= temp___504 (to_rep new_inventory__last)))
               (=>
               (or (< temp___501 temp___504)
               (or (< temp___504 temp___500) (<= i1 temp___504)))
               (= (select new_inventory1 temp___504) (select new_inventory temp___504)))))
          true false) (ite (and (<= (first1 old_inventory) i1)
                           (<= i1 (last1 old_inventory)))
                      true false)) true)
  (forall ((o Int))
  (=> (= (to_rep1 (select (to_array old_inventory) i1)) o)
  (let ((o1 (found_none o)))
  (=> (and (found_none__function_guard o1 o) (= (= o1 true) (= o 0)))
  (forall ((spark__branch Bool))
  (=> (= spark__branch o1)
  (=> (= spark__branch true)
  (forall ((o2 fruits_and_weapons))
  (=> (= (to_rep2 o2) new_content) (<= (to_rep new_inventory__first) i1)))))))))))))))))))))))))
(check-sat)
