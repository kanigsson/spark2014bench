(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-fun f_rec (Int) Int)

(declare-fun f_rec__function_guard (Int Int) Bool)

(declare-fun f_while (Int) Int)

(declare-fun f_while__function_guard (Int Int) Bool)

;; f_while__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (f_while x)))
     (=> (f_while__function_guard result x) (dynamic_invariant result true
     false true true)))) :pattern ((f_while x)) )))

(declare-fun f_not_spark (Int) Int)

(declare-fun f_not_spark__function_guard (Int Int) Bool)

;; f_not_spark__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (f_not_spark x)))
     (=> (f_not_spark__function_guard result x) (dynamic_invariant result
     true false true true)))) :pattern ((f_not_spark x)) )))

(declare-fun f_call (Int) Int)

(declare-fun f_call__function_guard (Int Int) Bool)

;; f_call__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (f_call x)))
     (=> (f_call__function_guard result x) (dynamic_invariant result true
     false true true)))) :pattern ((f_call x)) )))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; f_rec__post_axiom
  (assert
  (forall ((x1 Int))
  (! (=> (dynamic_invariant x1 true true true true)
     (let ((result (f_rec x1)))
     (=> (f_rec__function_guard result x1) (dynamic_invariant result true
     false true true)))) :pattern ((f_rec x1)) )))

(assert
;; defqtvc
 ;; File "terminating_annotations.ads", line 16, characters 0-0
  (not
  (forall ((y Int))
  (=> (dynamic_invariant x true false true true)
  (=> (= y x)
  (=> (dynamic_invariant y true false true true)
  (let ((o (f_rec y)))
  (=>
  (and (f_rec__function_guard o y) (dynamic_invariant o true false true
  true))
  (forall ((y1 Int))
  (=> (= y1 o)
  (let ((o1 (f_while y1)))
  (=>
  (and (f_while__function_guard o1 y1) (dynamic_invariant o1 true false true
  true))
  (forall ((y2 Int))
  (=> (= y2 o1)
  (let ((o2 (f_not_spark y2)))
  (=>
  (and (f_not_spark__function_guard o2 y2) (dynamic_invariant o2 true false
  true true))
  (forall ((y3 Int))
  (=> (= y3 o2)
  (let ((o3 (f_call y3)))
  (=>
  (and (f_call__function_guard o3 y3) (dynamic_invariant o3 true false true
  true))
  (forall ((y4 Int))
  (=> (= y4 o3)
  (=> (< 0 y4)
  (forall ((y5 Int))
  (=>
  (= (and (ite (dynamic_invariant y5 true true true true) true false) 
  (ite (< 0 y5) true false)) true)
  (forall ((temp___161 Int)) (=> (= temp___161 y5) (in_range1 (- y5 1)))))))))))))))))))))))))))))
(check-sat)
(exit)
