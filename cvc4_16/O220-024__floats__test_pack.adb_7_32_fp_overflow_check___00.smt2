;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float32)))))
(declare-sort float__ 0)

(declare-fun user_eq (float__ float__) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy float__)

(declare-datatypes ((float____ref 0))
(((float____refqtmk (float____content float__)))))
(define-fun float____ref_float____content__projection ((a float____ref)) float__ 
  (float____content a))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-fun to_rep (float__) Float32)

(declare-fun of_rep (Float32) float__)

;; inversion_axiom
  (assert
  (forall ((x float__)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x float__))
  (! (fp.isFinite32 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (fp.isFinite32 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                                (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__test_pack__pid_obj__desired float__)(rec__test_pack__pid_obj__error float__)))))
(define-fun us_split_fields_rec__test_pack__pid_obj__desired__projection ((a us_split_fields)) float__ 
  (rec__test_pack__pid_obj__desired a))

(define-fun us_split_fields_rec__test_pack__pid_obj__error__projection ((a us_split_fields)) float__ 
  (rec__test_pack__pid_obj__error a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (fp.eq (to_rep
                               (rec__test_pack__pid_obj__desired
                               (us_split_fields1 a))) (to_rep
                                                      (rec__test_pack__pid_obj__desired
                                                      (us_split_fields1 b))))
                        (fp.eq (to_rep
                               (rec__test_pack__pid_obj__error
                               (us_split_fields1 a))) (to_rep
                                                      (rec__test_pack__pid_obj__error
                                                      (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test_pack__pid_obj__desired__first__bit Int)

(declare-const test_pack__pid_obj__desired__last__bit Int)

(declare-const test_pack__pid_obj__desired__position Int)

;; test_pack__pid_obj__desired__first__bit_axiom
  (assert (<= 0 test_pack__pid_obj__desired__first__bit))

;; test_pack__pid_obj__desired__last__bit_axiom
  (assert
  (< test_pack__pid_obj__desired__first__bit test_pack__pid_obj__desired__last__bit))

;; test_pack__pid_obj__desired__position_axiom
  (assert (<= 0 test_pack__pid_obj__desired__position))

(declare-const test_pack__pid_obj__error__first__bit Int)

(declare-const test_pack__pid_obj__error__last__bit Int)

(declare-const test_pack__pid_obj__error__position Int)

;; test_pack__pid_obj__error__first__bit_axiom
  (assert (<= 0 test_pack__pid_obj__error__first__bit))

;; test_pack__pid_obj__error__last__bit_axiom
  (assert
  (< test_pack__pid_obj__error__first__bit test_pack__pid_obj__error__last__bit))

;; test_pack__pid_obj__error__position_axiom
  (assert (<= 0 test_pack__pid_obj__error__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((pid_obj__ref 0))
(((pid_obj__refqtmk (pid_obj__content us_rep)))))
(define-fun pid_obj__ref_pid_obj__content__projection ((a pid_obj__ref)) us_rep 
  (pid_obj__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_159 us_rep)
  (temp___skip_top_level_160 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__test_pack__pid_obj__desired
                                            (us_split_fields1
                                            temp___expr_159))) (fp #b0 #b00000000 #b00000000000000000000000))
                                         (= (to_rep
                                            (rec__test_pack__pid_obj__error
                                            (us_split_fields1
                                            temp___expr_159))) (fp #b0 #b00000000 #b00000000000000000000000))))

(declare-const measured Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(assert
;; defqtvc
 ;; File "test_pack.ads", line 9, characters 0-0
  (not
  (forall ((pid__split_fields us_split_fields) (o Float32))
  (=> (dynamic_invariant measured true false true true)
  (=>
  (ite (fp.lt (fp #b0 #b00000000 #b00000000000000000000000) measured)
  (fp.leq (fp.add RNE (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) 
  measured) (to_rep (rec__test_pack__pid_obj__desired pid__split_fields)))
  (fp.leq (to_rep (rec__test_pack__pid_obj__desired pid__split_fields)) (fp.add RNE (fp #b0 #b11111110 #b11111111111111111111111) 
  measured)))
  (=> (= (to_rep (rec__test_pack__pid_obj__desired pid__split_fields)) o)
  (fp.isFinite32 (fp.sub RNE o measured))))))))
(check-sat)
