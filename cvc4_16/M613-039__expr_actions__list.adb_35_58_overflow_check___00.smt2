;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 100))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (capacity_range capacity_range) Bool)

(declare-const dummy1 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep1 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep1 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__list__my_lists__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__list__my_lists__vector__capacity__projection ((a us_split_discrs)) capacity_range 
  (rec__list__my_lists__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__list__my_lists__vector us_main_type)))))
(define-fun us_split_fields_rec__list__my_lists__vector__projection ((a us_split_fields)) us_main_type 
  (rec__list__my_lists__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__list__my_lists__vector__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__list__my_lists__vector__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__list__my_lists__vector (us_split_fields1 a))
                           (rec__list__my_lists__vector (us_split_fields1 b))) true))
                   true false))

(define-fun in_range3 ((rec__list__my_lists__vector__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__list__my_lists__vector__capacity1 
  (to_rep1 (rec__list__my_lists__vector__capacity a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const list__my_lists__vector__capacity__first__bit Int)

(declare-const list__my_lists__vector__capacity__last__bit Int)

(declare-const list__my_lists__vector__capacity__position Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit list__my_lists__vector__capacity__last__bit))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep 
  (vector__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun model1 (us_rep) us_rep1)

(declare-fun model__function_guard (us_rep1 us_rep) Bool)

(define-fun last_index ((container us_rep)) Int (last (model1 container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 101))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 101)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (extended_index extended_index) Bool)

(declare-const dummy4 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_233 Int)
  (temp___is_init_229 Bool) (temp___skip_constant_230 Bool)
  (temp___do_toplevel_231 Bool)
  (temp___do_typ_inv_232 Bool)) Bool (=>
                                     (or (= temp___is_init_229 true)
                                     (<= 0 101)) (in_range4 temp___expr_233)))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (index_type index_type) Bool)

(declare-const dummy5 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_219 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)
  (temp___do_typ_inv_218 Bool)) Bool (=>
                                     (or (= temp___is_init_215 true)
                                     (<= 1 100)) (in_range5 temp___expr_219)))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun element ((container us_rep)
  (index Int)) Int (get (model1 container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (element_type element_type) Bool)

(declare-const dummy6 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_226 Int)
  (temp___is_init_222 Bool) (temp___skip_constant_223 Bool)
  (temp___do_toplevel_224 Bool)
  (temp___do_typ_inv_225 Bool)) Bool (=>
                                     (or (= temp___is_init_222 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range6 temp___expr_226)))

(define-fun capacity ((container us_rep)) Int (to_rep1
                                              (rec__list__my_lists__vector__capacity
                                              (us_split_discrs1 container))))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard1 (Int us_rep) Bool)

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun olt ((left us_rep1)
  (right us_rep1)) Bool (and (< (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const list__my_lists__vector__capacity__first__bit1 Int)

(declare-const list__my_lists__vector__capacity__last__bit1 Int)

(declare-const list__my_lists__vector__capacity__position1 Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit1))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit1 list__my_lists__vector__capacity__last__bit1))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position1))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-const l us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort r1 0)

(declare-fun r1qtint (r1) Int)

;; r1'axiom
  (assert (forall ((i r1)) (and (<= 0 (r1qtint i)) (<= (r1qtint i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (r1 r1) Bool)

(declare-const dummy8 r1)

(declare-datatypes ((r1__ref 0))
(((r1__refqtmk (r1__content r1)))))
(define-fun r1__ref_r1__content__projection ((a r1__ref)) r1 (r1__content a))

(define-fun to_rep2 ((x r1)) Int (r1qtint x))

(declare-fun of_rep2 (Int) r1)

;; inversion_axiom
  (assert
  (forall ((x r1)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x r1)) (! (in_range7 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_201 Int))
                           (=>
                           (and (<= a__first temp___idx_201)
                           (<= temp___idx_201 a__last))
                           (= (to_rep (select a temp___idx_201)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_201)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_201 Int))
  (=> (and (<= a__first temp___idx_201) (<= temp___idx_201 a__last))
  (= (to_rep (select a temp___idx_201)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_201)))))))))))

(declare-const dummy9 (Array Int integer))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq9 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__stack__stack__top r1)(rec__stack__stack__content (Array Int integer))))))
(define-fun us_split_fields_rec__stack__stack__top__projection ((a us_split_fields2)) r1 
  (rec__stack__stack__top a))

(define-fun us_split_fields_rec__stack__stack__content__projection ((a us_split_fields2)) (Array Int integer) 
  (rec__stack__stack__content a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__stack__stack__top (us_split_fields3 a))) 
                         (to_rep2
                         (rec__stack__stack__top (us_split_fields3 b))))
                         (= (bool_eq2
                            (rec__stack__stack__content (us_split_fields3 a))
                            1 100
                            (rec__stack__stack__content (us_split_fields3 b))
                            1 100) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const stack__stack__top__first__bit Int)

(declare-const stack__stack__top__last__bit Int)

(declare-const stack__stack__top__position Int)

;; stack__stack__top__first__bit_axiom
  (assert (<= 0 stack__stack__top__first__bit))

;; stack__stack__top__last__bit_axiom
  (assert (< stack__stack__top__first__bit stack__stack__top__last__bit))

;; stack__stack__top__position_axiom
  (assert (<= 0 stack__stack__top__position))

(declare-const stack__stack__content__first__bit Int)

(declare-const stack__stack__content__last__bit Int)

(declare-const stack__stack__content__position Int)

;; stack__stack__content__first__bit_axiom
  (assert (<= 0 stack__stack__content__first__bit))

;; stack__stack__content__last__bit_axiom
  (assert
  (< stack__stack__content__first__bit stack__stack__content__last__bit))

;; stack__stack__content__position_axiom
  (assert (<= 0 stack__stack__content__position))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((stack__ref 0))
(((stack__refqtmk (stack__content us_rep2)))))
(define-fun stack__ref_stack__content__projection ((a stack__ref)) us_rep2 
  (stack__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun temp_____aggregate_def_422 (Int) (Array Int integer))

(define-fun default_initial_assumption ((temp___expr_420 us_rep2)
  (temp___skip_top_level_421 Bool)) Bool (and
                                         (= (to_rep2
                                            (rec__stack__stack__top
                                            (us_split_fields3
                                            temp___expr_420))) 0)
                                         (= (rec__stack__stack__content
                                            (us_split_fields3
                                            temp___expr_420)) (temp_____aggregate_def_422
                                                              0))))

(declare-const first Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const last1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const res__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq7 a b) (oeq a b)) :pattern ((user_eq7 a b)) )))

(define-fun dynamic_invariant4 ((temp___expr_384 us_rep)
  (temp___is_init_380 Bool) (temp___skip_constant_381 Bool)
  (temp___do_toplevel_382 Bool)
  (temp___do_typ_inv_383 Bool)) Bool (=>
                                     (not (= temp___skip_constant_381 true))
                                     (in_range3 100
                                     (us_split_discrs1 temp___expr_384))))

(define-fun default_initial_assumption1 ((temp___expr_386 us_rep)
  (temp___skip_top_level_387 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__list__my_lists__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_386))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_387 true))
                                         (= (is_empty temp___expr_386) true))))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun is_empty1 (us_rep2) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)

(declare-fun top (us_rep2) Int)

(declare-fun top__function_guard (Int us_rep2) Bool)

;; top__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (and
     (forall ((s1 us_rep2)) (is_empty__function_guard1 (is_empty1 s1) s1))
     (=> (not (= (is_empty1 s) true))
     (let ((result (top s)))
     (=> (top__function_guard result s) (dynamic_invariant result true false
     true true))))) :pattern ((top s)) )))

;; top__def_axiom
  (assert
  (forall ((s us_rep2))
  (! (= (top s) (to_rep2 (rec__stack__stack__top (us_split_fields3 s)))) :pattern (
  (top s)) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (positive positive) Bool)

(declare-const dummy11 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort t 0)

(declare-fun first1 (t) integer)

(declare-fun last2 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l1 Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l1)
     (and (= (to_rep (first1 (mk f l1))) f)
     (= (to_rep (last2 (mk f l1))) l1)))) :pattern ((mk f l1)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range8 low) (in_range8 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l1 Int)) us_t (us_tqtmk a (mk f l1)))

(define-fun first2 ((a us_t)) Int (to_rep (first1 (rt a))))

(define-fun last3 ((a us_t)) Int (to_rep (last2 (rt a))))

(define-fun length3 ((a us_t)) Int (ite (<= (first2 a) (last3 a))
                                   (+ (- (last3 a) (first2 a)) 1) 0))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size1 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment5))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first1 (rt x)))
                 (to_rep (last2 (rt x))) (elts y) (to_rep (first1 (rt y)))
                 (to_rep (last2 (rt y)))))

(declare-fun user_eq12 (us_t us_t) Bool)

(declare-const dummy12 us_t)

(declare-datatypes ((m__ref 0))
(((m__refqtmk (m__content us_t)))))
(define-fun m__ref_m__content__projection ((a m__ref)) us_t (m__content a))

(declare-fun to__ (us_rep2) us_t)

(declare-fun to____function_guard (us_t us_rep2) Bool)

(define-fun dynamic_invariant5 ((temp___expr_438 us_t)
  (temp___is_init_434 Bool) (temp___skip_constant_435 Bool)
  (temp___do_toplevel_436 Bool)
  (temp___do_typ_inv_437 Bool)) Bool (=>
                                     (not (= temp___skip_constant_435 true))
                                     (dynamic_property 1 2147483647
                                     (first2 temp___expr_438)
                                     (last3 temp___expr_438))))

;; to____post_axiom
  (assert
  (forall ((s us_rep2))
  (! (let ((result (to__ s)))
     (=> (to____function_guard result s) (dynamic_invariant5 result true
     false true true))) :pattern ((to__ s)) )))

(declare-fun is_full (us_rep2) Bool)

(declare-fun is_full__function_guard (Bool us_rep2) Bool)

(declare-fun to_but_top (us_rep2) us_t)

(declare-fun to_but_top__function_guard (us_t us_rep2) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (integer integer) Bool)

(declare-const dummy13 integer)

(declare-datatypes ((t2b__ref 0))
(((t2b__refqtmk (t2b__content integer)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) integer 
  (t2b__content a))

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (integer integer) Bool)

(declare-const dummy14 integer)

(declare-datatypes ((t7b__ref 0))
(((t7b__refqtmk (t7b__content integer)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) integer 
  (t7b__content a))

(declare-datatypes ((t19b__ref 0))
(((t19b__refqtmk (t19b__content us_t)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) us_t 
  (t19b__content a))

(declare-datatypes ((t23b__ref 0))
(((t23b__refqtmk (t23b__content us_t)))))
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) us_t 
  (t23b__content a))

(define-fun dynamic_invariant6 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range8
                                    temp___expr_46)))

;; first__def_axiom
  (assert (= first 1))

;; last__def_axiom
  (assert (= last1 (last_index l)))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq15 (count_type count_type) Bool)

(declare-const dummy15 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant7 ((temp___expr_240 Int)
  (temp___is_init_236 Bool) (temp___skip_constant_237 Bool)
  (temp___do_toplevel_238 Bool)
  (temp___do_typ_inv_239 Bool)) Bool (=>
                                     (or (= temp___is_init_236 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_240)))

;; to_but_top__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (let ((result (to_but_top s)))
     (=> (to_but_top__function_guard result s) (dynamic_invariant5 result
     true false true true))) :pattern ((to_but_top s)) )))

;; is_full__post_axiom
  (assert true)

;; is_empty__post_axiom
  (assert true)

(define-fun dynamic_invariant8 ((temp___expr_398 Int)
  (temp___is_init_394 Bool) (temp___skip_constant_395 Bool)
  (temp___do_toplevel_396 Bool)
  (temp___do_typ_inv_397 Bool)) Bool (=>
                                     (or (= temp___is_init_394 true)
                                     (<= 0 100)) (in_range7 temp___expr_398)))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___424 Int))
  (=> (dynamic_invariant temp___424 true true true true)
  (forall ((temp___425 Int))
  (= (select (temp_____aggregate_def_422 temp___424) temp___425) rliteral)))))

(define-fun dynamic_invariant9 ((temp___expr_247 Int)
  (temp___is_init_243 Bool) (temp___skip_constant_244 Bool)
  (temp___do_toplevel_245 Bool)
  (temp___do_typ_inv_246 Bool)) Bool (=>
                                     (or (= temp___is_init_243 true)
                                     (<= 0 100)) (in_range2 temp___expr_247)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length1 container)))
     (and (<= result (capacity container)) (dynamic_invariant9 result true
     false true true))) :pattern ((length1 container)) )))

(define-fun oeq1 ((left us_rep1)
  (right us_rep1)) Bool (and (= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_286 us_rep1)
  (temp___skip_top_level_287 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_287 true))
                                         (= (length temp___expr_286) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length (model1 container)) (length1 container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 100))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq16 (extended_index1 extended_index1) Bool)

(declare-const dummy16 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant10 ((temp___expr_278 Int)
  (temp___is_init_274 Bool) (temp___skip_constant_275 Bool)
  (temp___do_toplevel_276 Bool)
  (temp___do_typ_inv_277 Bool)) Bool (=>
                                     (or (= temp___is_init_274 true)
                                     (<= 0 100)) (in_range10
                                     temp___expr_278)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and (<= (+ 0 result) 100) (dynamic_invariant7 result true false true
     true))) :pattern ((length container)) )))

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= (- 2147483648) (element_typeqtint1 i))
  (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range11 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq17 (element_type1 element_type1) Bool)

(declare-const dummy17 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant11 ((temp___expr_271 Int)
  (temp___is_init_267 Bool) (temp___skip_constant_268 Bool)
  (temp___do_toplevel_269 Bool)
  (temp___do_typ_inv_270 Bool)) Bool (=>
                                     (or (= temp___is_init_267 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range11 temp___expr_271)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant10 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant11 (get container position) true false true true)) :pattern (
  (get container position)) ))))

(assert
;; defqtvc
 ;; File "list.ads", line 13, characters 0-0
  (not
  (forall ((s__split_fields us_split_fields2)
  (res__split_fields us_main_type))
  (=> (dynamic_invariant4 l true false true true)
  (=> (default_initial_assumption (us_repqtmk1 s__split_fields) false)
  (=> (and (dynamic_invariant2 1 true false true true) (= 1 1))
  (=> (= 1 first)
  (=> (dynamic_invariant first true false true true)
  (let ((o l))
  (let ((list__reverse_list__last__assume (last_index o)))
  (=>
  (and (dynamic_invariant1 list__reverse_list__last__assume true false true
  true) (= list__reverse_list__last__assume (last (model1 o))))
  (=> (= list__reverse_list__last__assume last1)
  (=> (dynamic_invariant last1 true false true true)
  (=> (default_initial_assumption1
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))
  false)
  (=> (dynamic_invariant4
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))
  false false true true)
  (forall ((s__split_fields1 us_split_fields2))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (top__function_guard
  (top (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to_but_top__function_guard
  (to_but_top (us_repqtmk1 s__split_fields2))
  (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (top__function_guard
  (top (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to_but_top__function_guard
  (to_but_top (us_repqtmk1 s__split_fields2))
  (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2)))
  (=>
  (let ((temp___584 first))
  (let ((temp___585 last1))
  (exists ((i Int))
  (and (= i temp___584)
  (ite (= (and (ite (<= temp___584 i) true false) (ite (<= i temp___585) true
                                                  false)) true)
  (and (in_range5 i)
  (let ((o1 l))
  (let ((o2 (element o1 i)))
  (and
  (and (dynamic_invariant3 o2 true false true true)
  (= o2 (get (model1 o1) i)))
  (exists ((s__split_fields2 us_split_fields2))
  (and
  (and (= (top (us_repqtmk1 s__split_fields2)) o2)
  (= (let ((temp___455 (to__ (us_repqtmk1 s__split_fields))))
     (let ((temp___454 (to_but_top (us_repqtmk1 s__split_fields2))))
     (bool_eq2 (to_array temp___454) (first2 temp___454) (last3 temp___454)
     (to_array temp___455) (first2 temp___455) (last3 temp___455)))) true))
  (and
  (let ((o3 (- i first)))
  (and (in_range1 o3)
  (and (in_range1 (+ o3 1))
  (let ((o4 (us_repqtmk1 s__split_fields2)))
  (let ((o5 (to__ o4)))
  (and (to____function_guard o5 o4) (dynamic_invariant5 o5 true false true
  true)))))))
  (exists ((i1 Int))
  (and
  (and (= (last3 (to__ (us_repqtmk1 s__split_fields1))) (+ (- i1 first) 1))
  (forall ((j Int))
  (=> (and (<= first j) (<= j i1))
  (= (to_rep (select (to_array (to__ (us_repqtmk1 s__split_fields1))) j)) 
  (element l j)))))
  (and
  (= (and (ite (dynamic_property1 first last1 i1) true false) (ite (and
                                                                   (<= 
                                                                   first i1)
                                                                   (<= i1 
                                                                   last1))
                                                              true false)) true)
  (= i1 temp___585))))))))))) (= s__split_fields1 s__split_fields))))))
  (let ((temp___595 first))
  (forall ((i Int))
  (=> (= i temp___595)
  (=>
  (= (and (ite (<= temp___595 i) true false) (ite (<= i last1) true false)) true)
  (forall ((temp___loop_entry_608 us_split_fields2))
  (let ((temp___loop_entry_6081 (us_repqtmk1 temp___loop_entry_608)))
  (=> (= temp___loop_entry_608 s__split_fields1)
  (let ((o1 (us_repqtmk1 s__split_fields1)))
  (let ((o2 (top o1)))
  (=>
  (and (top__function_guard o2 o1)
  (and (dynamic_invariant o2 true false true true)
  (= o2 (to_rep2 (rec__stack__stack__top s__split_fields1)))))
  (let ((o3 res__split_discrs))
  (forall ((list__my_lists__append__2__container__fields us_main_type))
  (=>
  (and
  (and
  (= (length1
     (us_repqtmk o3
     (us_split_fieldsqtmk list__my_lists__append__2__container__fields))) (+ 
  (length1 (us_repqtmk o3 (us_split_fieldsqtmk res__split_fields))) 1))
  (= (olt (model1 (us_repqtmk o3 (us_split_fieldsqtmk res__split_fields)))
     (model1
     (us_repqtmk o3
     (us_split_fieldsqtmk list__my_lists__append__2__container__fields)))) true))
  (= (get
     (model1
     (us_repqtmk o3
     (us_split_fieldsqtmk list__my_lists__append__2__container__fields)))
     (+ (last_index (us_repqtmk o3 (us_split_fieldsqtmk res__split_fields))) 1)) o2))
  (forall ((res__split_fields1 us_main_type))
  (=> (= res__split_fields1 list__my_lists__append__2__container__fields)
  (forall ((s__split_fields2 us_split_fields2))
  (=>
  (forall ((s__split_fields3 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields3)) (us_repqtmk1 s__split_fields3)))
  (=>
  (forall ((s__split_fields3 us_split_fields2)) (to_but_top__function_guard
  (to_but_top (us_repqtmk1 s__split_fields3))
  (us_repqtmk1 s__split_fields3)))
  (=>
  (= (let ((temp___464 (to__ (us_repqtmk1 s__split_fields2))))
     (let ((temp___463 (to_but_top (us_repqtmk1 s__split_fields1))))
     (bool_eq2 (to_array temp___463) (first2 temp___463) (last3 temp___463)
     (to_array temp___464) (first2 temp___464) (last3 temp___464)))) true)
  (let ((o4 (- last1 i)))
  (=> (in_range1 o4)
  (let ((o5 (us_repqtmk1 s__split_fields2)))
  (let ((o6 (to__ o5)))
  (=>
  (and (to____function_guard o6 o5) (dynamic_invariant5 o6 true false true
  true))
  (=> (= (last3 o6) o4)
  (let ((list__reverse_list__L_2__R20b (to__ temp___loop_entry_6081)))
  (=>
  (and (to____function_guard list__reverse_list__L_2__R20b
  temp___loop_entry_6081) (dynamic_invariant5 list__reverse_list__L_2__R20b
  true false true true))
  (let ((o7 (us_repqtmk1 s__split_fields2)))
  (let ((list__reverse_list__L_2__R16b (to__ o7)))
  (=>
  (and (to____function_guard list__reverse_list__L_2__R16b o7)
  (dynamic_invariant5 list__reverse_list__L_2__R16b true false true true))
  (in_range1 (- last1 i)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
