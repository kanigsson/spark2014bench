(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(declare-fun id (Int) Int)

(declare-fun id__function_guard (Int Int) Bool)

;; id__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (id x)))
     (=> (id__function_guard result x) (dynamic_invariant result true false
     true true)))) :pattern ((id x)) )))

;; id__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true) (= (id x) x)) :pattern (
  (id x)) )))

(define-fun to_rep ((x positive)) Int (positiveqtint x))

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__private_types__p3__t__d Bool)))))
(define-fun us_split_discrs_rec__private_types__p3__t__d__projection ((a us_split_discrs)) Bool 
  (rec__private_types__p3__t__d a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__private_types__p3__t__f positive)))))
(define-fun us_split_fields_rec__private_types__p3__t__f__projection ((a us_split_fields)) positive 
  (rec__private_types__p3__t__f a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun private_types__p3__t__f__pred ((a us_rep)) Bool (= (ite (rec__private_types__p3__t__d
                                                                    (us_split_discrs1
                                                                    a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__private_types__p3__t__d
                                (us_split_discrs1 a)) 1 0) (ite (rec__private_types__p3__t__d
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=> (private_types__p3__t__f__pred a)
                        (= (to_rep
                           (rec__private_types__p3__t__f
                           (us_split_fields1 a))) (to_rep
                                                  (rec__private_types__p3__t__f
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const private_types__p3__t__d__first__bit Int)

(declare-const private_types__p3__t__d__last__bit Int)

(declare-const private_types__p3__t__d__position Int)

;; private_types__p3__t__d__first__bit_axiom
  (assert (<= 0 private_types__p3__t__d__first__bit))

;; private_types__p3__t__d__last__bit_axiom
  (assert
  (< private_types__p3__t__d__first__bit private_types__p3__t__d__last__bit))

;; private_types__p3__t__d__position_axiom
  (assert (<= 0 private_types__p3__t__d__position))

(declare-const private_types__p3__t__f__first__bit Int)

(declare-const private_types__p3__t__f__last__bit Int)

(declare-const private_types__p3__t__f__position Int)

;; private_types__p3__t__f__first__bit_axiom
  (assert (<= 0 private_types__p3__t__f__first__bit))

;; private_types__p3__t__f__last__bit_axiom
  (assert
  (< private_types__p3__t__f__first__bit private_types__p3__t__f__last__bit))

;; private_types__p3__t__f__position_axiom
  (assert (<= 0 private_types__p3__t__f__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((txS__ref 0))
(((txS__refqtmk (txS__content us_rep)))))
(define-fun txS__ref_txS__content__2__projection ((a txS__ref)) us_rep 
  (txS__content a))

(define-fun in_range3 ((rec__private_types__p3__t__d1 Bool)
  (a us_split_discrs)) Bool (= rec__private_types__p3__t__d1 (rec__private_types__p3__t__d
                                                             a)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const private_types__p3__t__d__first__bit1 Int)

(declare-const private_types__p3__t__d__last__bit1 Int)

(declare-const private_types__p3__t__d__position1 Int)

;; private_types__p3__t__d__first__bit_axiom
  (assert (<= 0 private_types__p3__t__d__first__bit1))

;; private_types__p3__t__d__last__bit_axiom
  (assert
  (< private_types__p3__t__d__first__bit1 private_types__p3__t__d__last__bit1))

;; private_types__p3__t__d__position_axiom
  (assert (<= 0 private_types__p3__t__d__position1))

(declare-const private_types__p3__t__f__first__bit1 Int)

(declare-const private_types__p3__t__f__last__bit1 Int)

(declare-const private_types__p3__t__f__position1 Int)

;; private_types__p3__t__f__first__bit_axiom
  (assert (<= 0 private_types__p3__t__f__first__bit1))

;; private_types__p3__t__f__last__bit_axiom
  (assert
  (< private_types__p3__t__f__first__bit1 private_types__p3__t__f__last__bit1))

;; private_types__p3__t__f__position_axiom
  (assert (<= 0 private_types__p3__t__f__position1))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__3__projection ((a t__ref)) us_rep (t__content
                                                                 a))

(declare-const x__split_discrs us_split_discrs)

(declare-const x__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant1 ((temp___expr_205 us_rep)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)
  (temp___do_typ_inv_204 Bool)) Bool (=>
                                     (not (= temp___skip_constant_202 true))
                                     (in_range3 (distinct 1 0)
                                     (us_split_discrs1 temp___expr_205))))

;; temp___result_210'def
  (assert (id__function_guard (id 0) 0))

(define-fun default_initial_assumption ((temp___expr_207 us_rep)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (rec__private_types__p3__t__d
                                            (us_split_discrs1
                                            temp___expr_207)) (distinct 1 0))
                                         (=> (private_types__p3__t__f__pred
                                         temp___expr_207)
                                         (= (to_rep
                                            (rec__private_types__p3__t__f
                                            (us_split_fields1
                                            temp___expr_207))) (id 0)))))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

;; temp___result_200'def
  (assert (id__function_guard (id 0) 0))

(define-fun default_initial_assumption1 ((temp___expr_197 us_rep)
  (temp___skip_top_level_198 Bool)) Bool (and
                                         (= (rec__private_types__p3__t__d
                                            (us_split_discrs1
                                            temp___expr_197)) (distinct 0 0))
                                         (=> (private_types__p3__t__f__pred
                                         temp___expr_197)
                                         (= (to_rep
                                            (rec__private_types__p3__t__f
                                            (us_split_fields1
                                            temp___expr_197))) (id 0)))))

(assert
;; defqtvc
 ;; File "private_types.ads", line 34, characters 0-0
  (not (in_range 1)))
(check-sat)
