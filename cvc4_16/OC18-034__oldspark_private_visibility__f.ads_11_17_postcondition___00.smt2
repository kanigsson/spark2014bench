(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort myp 0)

(declare-fun mypqtint (myp) Int)

;; myp'axiom
  (assert (forall ((i myp)) (and (<= 1 (mypqtint i)) (<= (mypqtint i) 10))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (myp myp) Bool)

(declare-const dummy myp)

(declare-datatypes ((myp__ref 0))
(((myp__refqtmk (myp__content myp)))))
(define-fun myp__ref_myp__content__projection ((a myp__ref)) myp (myp__content
                                                                 a))

(define-fun to_rep ((x myp)) Int (mypqtint x))

(declare-fun of_rep (Int) myp)

;; inversion_axiom
  (assert
  (forall ((x myp)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x myp)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__ada___bt__o__t__f1 myp)(rec__ada___bt__o__t__f2 myp)))))
(define-fun us_split_fields_rec__ada___bt__o__t__f1__projection ((a us_split_fields)) myp 
  (rec__ada___bt__o__t__f1 a))

(define-fun us_split_fields_rec__ada___bt__o__t__f2__projection ((a us_split_fields)) myp 
  (rec__ada___bt__o__t__f2 a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__ada___bt__o__t__f1 (us_split_fields1 a))) 
                        (to_rep
                        (rec__ada___bt__o__t__f1 (us_split_fields1 b))))
                        (= (to_rep
                           (rec__ada___bt__o__t__f2 (us_split_fields1 a))) 
                        (to_rep
                        (rec__ada___bt__o__t__f2 (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const ada___bt__o__t__f1__first__bit Int)

(declare-const ada___bt__o__t__f1__last__bit Int)

(declare-const ada___bt__o__t__f1__position Int)

;; ada___bt__o__t__f1__first__bit_axiom
  (assert (<= 0 ada___bt__o__t__f1__first__bit))

;; ada___bt__o__t__f1__last__bit_axiom
  (assert (< ada___bt__o__t__f1__first__bit ada___bt__o__t__f1__last__bit))

;; ada___bt__o__t__f1__position_axiom
  (assert (<= 0 ada___bt__o__t__f1__position))

(declare-const ada___bt__o__t__f2__first__bit Int)

(declare-const ada___bt__o__t__f2__last__bit Int)

(declare-const ada___bt__o__t__f2__position Int)

;; ada___bt__o__t__f2__first__bit_axiom
  (assert (<= 0 ada___bt__o__t__f2__first__bit))

;; ada___bt__o__t__f2__last__bit_axiom
  (assert (< ada___bt__o__t__f2__first__bit ada___bt__o__t__f2__last__bit))

;; ada___bt__o__t__f2__position_axiom
  (assert (<= 0 ada___bt__o__t__f2__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-datatypes ((os__ref 0))
(((os__refqtmk (os__content us_rep)))))
(define-fun os__ref_os__content__projection ((a os__ref)) us_rep (os__content
                                                                 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__f__r1__f1 us_rep)))))
(define-fun us_split_fields_rec__f__r1__f1__projection ((a us_split_fields2)) us_rep 
  (rec__f__r1__f1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (bool_eq (rec__f__r1__f1 (us_split_fields3 a))
                            (rec__f__r1__f1 (us_split_fields3 b))) true)
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const f__r1__f1__first__bit Int)

(declare-const f__r1__f1__last__bit Int)

(declare-const f__r1__f1__position Int)

;; f__r1__f1__first__bit_axiom
  (assert (<= 0 f__r1__f1__first__bit))

;; f__r1__f1__last__bit_axiom
  (assert (< f__r1__f1__first__bit f__r1__f1__last__bit))

;; f__r1__f1__position_axiom
  (assert (<= 0 f__r1__f1__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((r1__ref 0))
(((r1__refqtmk (r1__content us_rep1)))))
(define-fun r1__ref_r1__content__projection ((a r1__ref)) us_rep1 (r1__content
                                                                  a))

(declare-const x us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun sf (us_rep) Int)

(declare-fun sf__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_160 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (<= 1 10)) (in_range1 temp___expr_160)))

;; sf__post_axiom
  (assert
  (forall ((s us_rep))
  (! (let ((result (sf s)))
     (=> (sf__function_guard result s) (dynamic_invariant result true false
     true true))) :pattern ((sf s)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(assert
;; defqtvc
 ;; File "f.ads", line 10, characters 0-0
  (not
  (forall ((y Int))
  (=> (dynamic_invariant y false false true true)
  (let ((o (rec__f__r1__f1 (us_split_fields3 x))))
  (let ((o1 (sf o)))
  (=>
  (and (sf__function_guard o1 o) (dynamic_invariant o1 true false true true))
  (forall ((y1 Int))
  (=> (= y1 o1)
  (forall ((f__v__result Bool))
  (=> (= f__v__result (ite (= y1 2) true false))
  (=> (= f__v__result true)
  (=> (sf__function_guard (sf (rec__f__r1__f1 (us_split_fields3 x)))
  (rec__f__r1__f1 (us_split_fields3 x)))
  (= (sf (rec__f__r1__f1 (us_split_fields3 x))) 2))))))))))))))
(check-sat)
(exit)
