(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__c392004_1__vehicle__engine_on Bool)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__c392004_1__vehicle__engine_on__projection ((a us_split_fields)) Bool 
  (rec__c392004_1__vehicle__engine_on a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (= (ite (rec__c392004_1__vehicle__engine_on
                                (us_split_fields1 a)) 1 0) (ite (rec__c392004_1__vehicle__engine_on
                                                                (us_split_fields1
                                                                b)) 1 0))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const c392004_1__vehicle__engine_on__first__bit Int)

(declare-const c392004_1__vehicle__engine_on__last__bit Int)

(declare-const c392004_1__vehicle__engine_on__position Int)

;; c392004_1__vehicle__engine_on__first__bit_axiom
  (assert (<= 0 c392004_1__vehicle__engine_on__first__bit))

;; c392004_1__vehicle__engine_on__last__bit_axiom
  (assert
  (< c392004_1__vehicle__engine_on__first__bit c392004_1__vehicle__engine_on__last__bit))

;; c392004_1__vehicle__engine_on__position_axiom
  (assert (<= 0 c392004_1__vehicle__engine_on__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ((vehicle__ref 0))
(((vehicle__refqtmk (vehicle__content us_rep)))))
(define-fun vehicle__ref_vehicle__content__projection ((a vehicle__ref)) us_rep 
  (vehicle__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__c392004_1__vehicle__engine_on1 Bool)(rec__c392004_2__car__convertible Bool)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__c392004_1__vehicle__engine_on__2__projection ((a us_split_fields2)) Bool 
  (rec__c392004_1__vehicle__engine_on1 a))

(define-fun us_split_fields_rec__c392004_2__car__convertible__projection ((a us_split_fields2)) Bool 
  (rec__c392004_2__car__convertible a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (Bool us_private) us_private)

(declare-fun extract__c392004_2__car__convertible (us_private) Bool)

;; extract__c392004_2__car__convertible__conv
  (assert
  (forall ((c392004_2__car__convertible Bool))
  (forall ((rec__ext__2 us_private))
  (= (ite (extract__c392004_2__car__convertible
          (hide_ext__ c392004_2__car__convertible rec__ext__2)) 1 0) (ite c392004_2__car__convertible 1 0)))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (rec__c392004_1__vehicle__engine_on1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__c392004_2__car__convertible
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (rec__c392004_1__vehicle__engine_on
                                         (us_split_fields1 r))
                                         (extract__c392004_2__car__convertible
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (ite (rec__c392004_1__vehicle__engine_on1
                                 (us_split_fields3 a)) 1 0) (ite (rec__c392004_1__vehicle__engine_on1
                                                                 (us_split_fields3
                                                                 b)) 1 0))
                         (= (ite (rec__c392004_2__car__convertible
                                 (us_split_fields3 a)) 1 0) (ite (rec__c392004_2__car__convertible
                                                                 (us_split_fields3
                                                                 b)) 1 0)))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const c392004_1__vehicle__engine_on__first__bit1 Int)

(declare-const c392004_1__vehicle__engine_on__last__bit1 Int)

(declare-const c392004_1__vehicle__engine_on__position1 Int)

;; c392004_1__vehicle__engine_on__first__bit_axiom
  (assert (<= 0 c392004_1__vehicle__engine_on__first__bit1))

;; c392004_1__vehicle__engine_on__last__bit_axiom
  (assert
  (< c392004_1__vehicle__engine_on__first__bit1 c392004_1__vehicle__engine_on__last__bit1))

;; c392004_1__vehicle__engine_on__position_axiom
  (assert (<= 0 c392004_1__vehicle__engine_on__position1))

(declare-const c392004_2__car__convertible__first__bit Int)

(declare-const c392004_2__car__convertible__last__bit Int)

(declare-const c392004_2__car__convertible__position Int)

;; c392004_2__car__convertible__first__bit_axiom
  (assert (<= 0 c392004_2__car__convertible__first__bit))

;; c392004_2__car__convertible__last__bit_axiom
  (assert
  (< c392004_2__car__convertible__first__bit c392004_2__car__convertible__last__bit))

;; c392004_2__car__convertible__position_axiom
  (assert (<= 0 c392004_2__car__convertible__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((car__ref 0))
(((car__refqtmk (car__content us_rep1)))))
(define-fun car__ref_car__content__projection ((a car__ref)) us_rep1 
  (car__content a))

(declare-const my_car__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_198 us_rep1)
  (temp___skip_top_level_199 Bool)) Bool (= (attr__tag1 temp___expr_198) 
  us_tag1))

(declare-const us_tag2 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const c392004_1__vehicle__engine_on__first__bit2 Int)

(declare-const c392004_1__vehicle__engine_on__last__bit2 Int)

(declare-const c392004_1__vehicle__engine_on__position2 Int)

;; c392004_1__vehicle__engine_on__first__bit_axiom
  (assert (<= 0 c392004_1__vehicle__engine_on__first__bit2))

;; c392004_1__vehicle__engine_on__last__bit_axiom
  (assert
  (< c392004_1__vehicle__engine_on__first__bit2 c392004_1__vehicle__engine_on__last__bit2))

;; c392004_1__vehicle__engine_on__position_axiom
  (assert (<= 0 c392004_1__vehicle__engine_on__position2))

(declare-const c392004_2__car__convertible__first__bit1 Int)

(declare-const c392004_2__car__convertible__last__bit1 Int)

(declare-const c392004_2__car__convertible__position1 Int)

;; c392004_2__car__convertible__first__bit_axiom
  (assert (<= 0 c392004_2__car__convertible__first__bit1))

;; c392004_2__car__convertible__last__bit_axiom
  (assert
  (< c392004_2__car__convertible__first__bit1 c392004_2__car__convertible__last__bit1))

;; c392004_2__car__convertible__position_axiom
  (assert (<= 0 c392004_2__car__convertible__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ((limo__ref 0))
(((limo__refqtmk (limo__content us_rep1)))))
(define-fun limo__ref_limo__content__projection ((a limo__ref)) us_rep1 
  (limo__content a))

(declare-const your_car__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption1 ((temp___expr_207 us_rep1)
  (temp___skip_top_level_208 Bool)) Bool (= (attr__tag1 temp___expr_207) 
  us_tag2))

(define-fun default_initial_assumption2 ((temp___expr_190 us_rep)
  (temp___skip_top_level_191 Bool)) Bool (= (attr__tag temp___expr_190) 
  us_tag))

(declare-fun create__specific_post (Int us_split_fields Int Int
  us_split_fields) Bool)

;; c392004_1__vehicle__compat_axiom
  (assert true)

;; c392004_2__car__compat_axiom
  (assert true)

;; c392004_2__limo__compat_axiom
  (assert true)

(declare-const c5b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const c6b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun create__specific_post1 (Int us_split_fields2 Int Int
  us_split_fields2) Bool)

;; c392004_2__limo__compat_axiom
  (assert true)

(declare-const c9b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c10b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c13b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const c14b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun create__specific_post2 (Int us_split_fields2 Int Int
  us_split_fields2) Bool)

;; c392004_2__car__compat_axiom
  (assert true)

;; c392004_2__limo__compat_axiom
  (assert true)

(declare-const c17b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const c18b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun start__specific_post (Int us_split_fields Int
  us_split_fields) Bool)

;; c392004_1__vehicle__compat_axiom
  (assert true)

;; c392004_2__car__compat_axiom
  (assert true)

;; c392004_2__limo__compat_axiom
  (assert true)

(declare-const c21b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const c22b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const c25b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const c26b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const c29b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const c30b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const c33b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const c34b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const c37b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const c38b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-const c41b Bool)

(declare-const attr__ATTRIBUTE_ADDRESS20 Int)

(declare-const c42b (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS21 Int)

(declare-fun temp___String_Literal_154 (tuple0) (Array Int character))

;; temp___String_Literal_154__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 9)) 100)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 10)) 101)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 11)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 12)) 99)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 13)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 14)) 110)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 16)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 18)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 20)) 99)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 21)) 111)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 23)) 112)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 24)) 111)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 25)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 26)) 101)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 27)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 28)) 116)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 30)) 49)))))) :pattern (
  (temp___String_Literal_154 us_void_param)) )))

(declare-fun temp___String_Literal_155 (tuple0) (Array Int character))

;; temp___String_Literal_155__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 1)) 68)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 2)) 105))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 3)) 100)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 4)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 5)) 110)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 6)) 111)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 7)) 116)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 8)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 9)) 115)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 10)) 101))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 11)) 116)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 12)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 13)) 105)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 14)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 15)) 104)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 16)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 17)) 114)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 18)) 105)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 19)) 116)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 20)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 21)) 100)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 22)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 23)) 99)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 24)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 25)) 109)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 26)) 112))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 27)) 111)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 28)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 29)) 101)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 30)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 31)) 116)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 33)) 50)))))) :pattern (
  (temp___String_Literal_155 us_void_param)) )))

(declare-fun temp___String_Literal_156 (tuple0) (Array Int character))

;; temp___String_Literal_156__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 9)) 100)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 10)) 101)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 11)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 12)) 99)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 13)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 14)) 110)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 16)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 18)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 20)) 99)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 21)) 111)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 23)) 112)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 24)) 111)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 25)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 26)) 101)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 27)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 28)) 116)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 30)) 51)))))) :pattern (
  (temp___String_Literal_156 us_void_param)) )))

(declare-fun temp___String_Literal_157 (tuple0) (Array Int character))

;; temp___String_Literal_157__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 1)) 68)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 2)) 105))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 3)) 100)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 4)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 5)) 110)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 6)) 111)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 7)) 116)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 8)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 9)) 115)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 10)) 101))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 11)) 116)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 12)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 13)) 101)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 14)) 120)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 15)) 116)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 16)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 18)) 100)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 19)) 105)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 20)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 21)) 103)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 22)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 23)) 99)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 24)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 25)) 109)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 26)) 112))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 27)) 111)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 28)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 29)) 101)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 30)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 31)) 116)
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 32)) 32))
     (= (to_rep (select (temp___String_Literal_157 us_void_param) 33)) 52)))))) :pattern (
  (temp___String_Literal_157 us_void_param)) )))

(declare-fun temp___String_Literal_158 (tuple0) (Array Int character))

;; temp___String_Literal_158__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 9)) 100)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 10)) 101)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 11)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 12)) 99)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 13)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 14)) 110)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 16)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 18)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 20)) 99)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 21)) 111)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 23)) 112)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 24)) 111)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 25)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 26)) 101)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 27)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 28)) 116)
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_158 us_void_param) 30)) 53)))))) :pattern (
  (temp___String_Literal_158 us_void_param)) )))

(declare-fun temp___String_Literal_159 (tuple0) (Array Int character))

;; temp___String_Literal_159__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 8)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 9)) 117)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 10)) 110))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 11)) 114)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 12)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 13)) 102)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 14)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 15)) 114)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 17)) 110))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 18)) 99)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 19)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 20)) 100)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 21)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 22)) 99)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 23)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 24)) 109)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 25)) 112))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 26)) 111)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 27)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 28)) 101)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 29)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 30)) 116)
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_159 us_void_param) 32)) 54)))))) :pattern (
  (temp___String_Literal_159 us_void_param)) )))

(declare-fun temp___String_Literal_160 (tuple0) (Array Int character))

;; temp___String_Literal_160__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 9)) 100)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 10)) 101)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 11)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 12)) 99)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 13)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 14)) 110)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 16)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 18)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 20)) 99)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 21)) 111)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 23)) 112)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 24)) 111)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 25)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 26)) 101)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 27)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 28)) 116)
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_160 us_void_param) 30)) 55)))))) :pattern (
  (temp___String_Literal_160 us_void_param)) )))

(declare-fun temp___String_Literal_161 (tuple0) (Array Int character))

;; temp___String_Literal_161__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 8)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 9)) 117)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 10)) 110))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 11)) 114)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 12)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 13)) 102)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 14)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 15)) 114)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 16)) 101))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 17)) 110))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 18)) 99)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 19)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 20)) 100)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 21)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 22)) 99)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 23)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 24)) 109)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 25)) 112))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 26)) 111)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 27)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 28)) 101)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 29)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 30)) 116)
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 31)) 32))
     (= (to_rep (select (temp___String_Literal_161 us_void_param) 32)) 56)))))) :pattern (
  (temp___String_Literal_161 us_void_param)) )))

(declare-fun temp___String_Literal_162 (tuple0) (Array Int character))

;; temp___String_Literal_162__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 8)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 9)) 100)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 10)) 101)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 11)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 12)) 99)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 13)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 14)) 110)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 15)) 100))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 16)) 101))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 18)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 20)) 99)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 21)) 111)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 22)) 109))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 23)) 112)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 24)) 111)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 25)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 26)) 101)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 27)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 28)) 116)
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 29)) 32))
     (= (to_rep (select (temp___String_Literal_162 us_void_param) 30)) 57)))))) :pattern (
  (temp___String_Literal_162 us_void_param)) )))

(declare-fun temp___String_Literal_163 (tuple0) (Array Int character))

;; temp___String_Literal_163__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 2)) 108))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 4)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 5)) 114)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 7)) 100)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 8)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 9)) 117)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 10)) 110))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 11)) 114)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 12)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 13)) 102)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 14)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 15)) 114)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 16)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 18)) 99)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 19)) 101)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 20)) 100))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 21)) 32)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 22)) 99)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 23)) 111)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 24)) 109))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 25)) 112)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 26)) 111))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 27)) 110)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 28)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 29)) 110)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 30)) 116)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 31)) 32)
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 32)) 49))
     (= (to_rep (select (temp___String_Literal_163 us_void_param) 33)) 48)))))) :pattern (
  (temp___String_Literal_163 us_void_param)) )))

(declare-fun temp___String_Literal_235 (tuple0) (Array Int character))

;; temp___String_Literal_235__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 2)) 51))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 3)) 57)
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 4)) 50))
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 5)) 48))
     (and
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 6)) 48)
     (= (to_rep (select (temp___String_Literal_235 us_void_param) 7)) 52)))) :pattern (
  (temp___String_Literal_235 us_void_param)) )))

(declare-fun temp___String_Literal_236 (tuple0) (Array Int character))

;; temp___String_Literal_236__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 2)) 104))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 3)) 101)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 4)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 5)) 107)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 6)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 7)) 115)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 8)) 117))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 9)) 98)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 10)) 112))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 11)) 114)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 12)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 13)) 103)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 14)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 15)) 97)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 16)) 109))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 17)) 32)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 18)) 105)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 19)) 110)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 20)) 104))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 21)) 101)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 22)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 23)) 105)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 24)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 25)) 97)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 26)) 110))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 27)) 99)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 28)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 29)) 32)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 30)) 38)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 31)) 32)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 32)) 118))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 33)) 105)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 34)) 115))))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 35)) 105)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 36)) 98))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 37)) 105)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 38)) 108)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 39)) 105)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 40)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 41)) 121)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 42)) 32))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 43)) 102)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 44)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 45)) 114)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 46)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 47)) 100)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 48)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 49)) 114)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 50)) 105)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 51)) 118)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 52)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 53)) 100)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 54)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 55)) 116)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 56)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 57)) 103)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 58)) 103))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 59)) 101)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 60)) 100))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 61)) 32)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 62)) 116)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 63)) 121)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 64)) 112))
     (and
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 65)) 101)
     (= (to_rep (select (temp___String_Literal_236 us_void_param) 66)) 115)))))))) :pattern (
  (temp___String_Literal_236 us_void_param)) )))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant2 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

;; c6b__def_axiom
  (assert (= c6b (temp___String_Literal_154 Tuple0)))

;; c10b__def_axiom
  (assert (= c10b (temp___String_Literal_155 Tuple0)))

;; c14b__def_axiom
  (assert (= c14b (temp___String_Literal_156 Tuple0)))

;; c18b__def_axiom
  (assert (= c18b (temp___String_Literal_157 Tuple0)))

;; c22b__def_axiom
  (assert (= c22b (temp___String_Literal_158 Tuple0)))

;; c26b__def_axiom
  (assert (= c26b (temp___String_Literal_159 Tuple0)))

;; c30b__def_axiom
  (assert (= c30b (temp___String_Literal_160 Tuple0)))

;; c34b__def_axiom
  (assert (= c34b (temp___String_Literal_161 Tuple0)))

;; c38b__def_axiom
  (assert (= c38b (temp___String_Literal_162 Tuple0)))

;; c42b__def_axiom
  (assert (= c42b (temp___String_Literal_163 Tuple0)))

(assert
;; defqtvc
 ;; File "c392004.adb", line 7, characters 0-0
  (not
  (forall ((my_car__split_fields us_split_fields2)
  (your_car__split_fields us_split_fields2)
  (my_car__split_fields1 us_split_fields2))
  (=> (default_initial_assumption
  (us_repqtmk1 my_car__split_fields my_car__attr__tag) false)
  (=> (default_initial_assumption1
  (us_repqtmk1 your_car__split_fields your_car__attr__tag) false)
  (=>
  (= my_car__split_fields1 (us_split_fieldsqtmk1
                           (rec__c392004_1__vehicle__engine_on1
                           my_car__split_fields) (distinct 0 0)
                           (rec__ext__1 my_car__split_fields)))
  (forall ((c392004_1__create__the_vehicle__fields us_split_fields))
  (forall ((my_car__split_fields2 us_split_fields2))
  (=>
  (= my_car__split_fields2 (us_split_fields3
                           (of_base
                           (us_repqtmk c392004_1__create__the_vehicle__fields
                           (attr__tag
                           (to_base
                           (us_repqtmk1 my_car__split_fields1
                           my_car__attr__tag)))))))
  (=>
  (= (ite (= (rec__c392004_2__car__convertible my_car__split_fields2) true)
     false true) c5b)
  (forall ((spark__branch Bool))
  (=> (= spark__branch (ite (= c5b true) false true))
  (forall ((your_car__split_fields1 us_split_fields2))
  (=> (= (rec__c392004_2__car__convertible your_car__split_fields1) c9b)
  (forall ((spark__branch1 Bool))
  (=> (= spark__branch1 (ite (= c9b true) false true))
  (forall ((my_car__split_fields3 us_split_fields2))
  (=>
  (= my_car__split_fields3 (us_split_fieldsqtmk1
                           (rec__c392004_1__vehicle__engine_on1
                           my_car__split_fields2) (distinct 1 0)
                           (rec__ext__1 my_car__split_fields2)))
  (forall ((c392004_1__create__the_vehicle__fields1 us_split_fields))
  (forall ((my_car__split_fields4 us_split_fields2))
  (=>
  (= my_car__split_fields4 (us_split_fields3
                           (of_base
                           (us_repqtmk
                           c392004_1__create__the_vehicle__fields1
                           (attr__tag
                           (to_base
                           (us_repqtmk1 my_car__split_fields3
                           my_car__attr__tag)))))))
  (=> (= (rec__c392004_2__car__convertible my_car__split_fields4) c13b)
  (forall ((spark__branch2 Bool))
  (=> (= spark__branch2 (ite (= c13b true) false true))
  (forall ((my_car__split_fields5 us_split_fields2))
  (=>
  (= (ite (= (rec__c392004_2__car__convertible my_car__split_fields5) true)
     false true) c17b)
  (forall ((spark__branch3 Bool))
  (=> (= spark__branch3 (ite (= c17b true) false true))
  (forall ((my_car__split_fields6 us_split_fields2))
  (=>
  (= my_car__split_fields6 (us_split_fieldsqtmk1
                           (rec__c392004_1__vehicle__engine_on1
                           my_car__split_fields5) (distinct 0 0)
                           (rec__ext__1 my_car__split_fields5)))
  (forall ((c392004_1__start__the_vehicle__fields us_split_fields))
  (forall ((my_car__split_fields7 us_split_fields2))
  (=>
  (= my_car__split_fields7 (us_split_fields3
                           (of_base
                           (us_repqtmk c392004_1__start__the_vehicle__fields
                           (attr__tag
                           (to_base
                           (us_repqtmk1 my_car__split_fields6
                           my_car__attr__tag)))))))
  (=>
  (= (ite (= (rec__c392004_2__car__convertible my_car__split_fields7) true)
     false true) c21b)
  (forall ((spark__branch4 Bool))
  (=> (= spark__branch4 (ite (= c21b true) false true))
  (forall ((c392004_1__start__the_vehicle__fields1 us_split_fields))
  (forall ((my_car__split_fields8 us_split_fields2))
  (=>
  (= my_car__split_fields8 (us_split_fields3
                           (of_base
                           (us_repqtmk c392004_1__start__the_vehicle__fields1
                           (attr__tag
                           (to_base
                           (us_repqtmk1 my_car__split_fields7
                           my_car__attr__tag)))))))
  (=>
  (= (ite (= (rec__c392004_2__car__convertible my_car__split_fields8) true)
     false true) c25b)
  (forall ((spark__branch5 Bool))
  (=> (= spark__branch5 (ite (= c25b true) false true))
  (not (= spark__branch5 true))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
