;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-const ci Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const xi Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort enum_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (enum_type enum_type) Bool)

(declare-const dummy1 enum_type)

(declare-datatypes ((enum_type__ref 0))
(((enum_type__refqtmk (enum_type__content enum_type)))))
(define-fun enum_type__ref_enum_type__content__projection ((a enum_type__ref)) enum_type 
  (enum_type__content a))

(declare-fun to_rep1 (enum_type) Int)

(declare-fun of_rep1 (Int) enum_type)

;; inversion_axiom
  (assert
  (forall ((x enum_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x enum_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__my_package__variant_type__m_v enum_type)))))
(define-fun us_split_discrs_rec__my_package__variant_type__m_v__projection ((a us_split_discrs)) enum_type 
  (rec__my_package__variant_type__m_v a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__my_package__variant_type__m_c integer)(rec__my_package__variant_type__m_a integer)(rec__my_package__variant_type__m_b integer)))))
(define-fun us_split_fields_rec__my_package__variant_type__m_c__projection ((a us_split_fields)) integer 
  (rec__my_package__variant_type__m_c a))

(define-fun us_split_fields_rec__my_package__variant_type__m_a__projection ((a us_split_fields)) integer 
  (rec__my_package__variant_type__m_a a))

(define-fun us_split_fields_rec__my_package__variant_type__m_b__projection ((a us_split_fields)) integer 
  (rec__my_package__variant_type__m_b a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun my_package__variant_type__m_a__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__my_package__variant_type__m_v (us_split_discrs1 a))) 0))

(define-fun my_package__variant_type__m_b__pred ((a us_rep)) Bool (= 
  (to_rep1 (rec__my_package__variant_type__m_v (us_split_discrs1 a))) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__my_package__variant_type__m_v
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__my_package__variant_type__m_v
                                                  (us_split_discrs1 b))))
                        (and
                        (and
                        (= (to_rep
                           (rec__my_package__variant_type__m_c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_package__variant_type__m_c
                                                  (us_split_fields1 b))))
                        (=> (my_package__variant_type__m_a__pred a)
                        (= (to_rep
                           (rec__my_package__variant_type__m_a
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_package__variant_type__m_a
                                                  (us_split_fields1 b))))))
                        (=> (my_package__variant_type__m_b__pred a)
                        (= (to_rep
                           (rec__my_package__variant_type__m_b
                           (us_split_fields1 a))) (to_rep
                                                  (rec__my_package__variant_type__m_b
                                                  (us_split_fields1 b)))))))
                   true false))

(define-fun in_range2 ((rec__my_package__variant_type__m_v1 Int)
  (a us_split_discrs)) Bool (= rec__my_package__variant_type__m_v1 (to_rep1
                                                                   (rec__my_package__variant_type__m_v
                                                                   a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const my_package__variant_type__m_v__first__bit Int)

(declare-const my_package__variant_type__m_v__last__bit Int)

(declare-const my_package__variant_type__m_v__position Int)

;; my_package__variant_type__m_v__first__bit_axiom
  (assert (<= 0 my_package__variant_type__m_v__first__bit))

;; my_package__variant_type__m_v__last__bit_axiom
  (assert
  (< my_package__variant_type__m_v__first__bit my_package__variant_type__m_v__last__bit))

;; my_package__variant_type__m_v__position_axiom
  (assert (<= 0 my_package__variant_type__m_v__position))

(declare-const my_package__variant_type__m_c__first__bit Int)

(declare-const my_package__variant_type__m_c__last__bit Int)

(declare-const my_package__variant_type__m_c__position Int)

;; my_package__variant_type__m_c__first__bit_axiom
  (assert (<= 0 my_package__variant_type__m_c__first__bit))

;; my_package__variant_type__m_c__last__bit_axiom
  (assert
  (< my_package__variant_type__m_c__first__bit my_package__variant_type__m_c__last__bit))

;; my_package__variant_type__m_c__position_axiom
  (assert (<= 0 my_package__variant_type__m_c__position))

(declare-const my_package__variant_type__m_a__first__bit Int)

(declare-const my_package__variant_type__m_a__last__bit Int)

(declare-const my_package__variant_type__m_a__position Int)

;; my_package__variant_type__m_a__first__bit_axiom
  (assert (<= 0 my_package__variant_type__m_a__first__bit))

;; my_package__variant_type__m_a__last__bit_axiom
  (assert
  (< my_package__variant_type__m_a__first__bit my_package__variant_type__m_a__last__bit))

;; my_package__variant_type__m_a__position_axiom
  (assert (<= 0 my_package__variant_type__m_a__position))

(declare-const my_package__variant_type__m_b__first__bit Int)

(declare-const my_package__variant_type__m_b__last__bit Int)

(declare-const my_package__variant_type__m_b__position Int)

;; my_package__variant_type__m_b__first__bit_axiom
  (assert (<= 0 my_package__variant_type__m_b__first__bit))

;; my_package__variant_type__m_b__last__bit_axiom
  (assert
  (< my_package__variant_type__m_b__first__bit my_package__variant_type__m_b__last__bit))

;; my_package__variant_type__m_b__position_axiom
  (assert (<= 0 my_package__variant_type__m_b__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((variant_type__ref 0))
(((variant_type__refqtmk (variant_type__content us_rep)))))
(define-fun variant_type__ref_variant_type__content__projection ((a variant_type__ref)) us_rep 
  (variant_type__content a))

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_158 Int)
  (temp___is_init_154 Bool) (temp___skip_constant_155 Bool)
  (temp___do_toplevel_156 Bool)
  (temp___do_typ_inv_157 Bool)) Bool (=>
                                     (or (= temp___is_init_154 true)
                                     (<= 0 1)) (in_range1 temp___expr_158)))

(assert
;; defqtvc
 ;; File "my_package.ads", line 18, characters 0-0
  (not
  (forall ((v__split_fields us_split_fields) (o integer)
  (v__split_fields1 us_split_fields) (o1 Int) (spark__branch Bool))
  (=> (dynamic_invariant ci true false true true)
  (=> (dynamic_invariant xi true false true true)
  (=> (not (= ci 0))
  (=> (= (to_rep o) ci)
  (=>
  (= v__split_fields1 (us_split_fieldsqtmk o
                      (rec__my_package__variant_type__m_a v__split_fields)
                      (rec__my_package__variant_type__m_b v__split_fields)))
  (=> (= (to_rep1 (rec__my_package__variant_type__m_v v__split_discrs)) o1)
  (=> (= spark__branch (ite (= o1 0) true false))
  (=> (not (= spark__branch true)) (my_package__variant_type__m_b__pred
  (us_repqtmk v__split_discrs v__split_fields1)))))))))))))
(check-sat)
