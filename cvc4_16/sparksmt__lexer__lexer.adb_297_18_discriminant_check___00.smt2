;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep2 ((x integer)) Int (integerqtint x))

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(define-fun dynamic_invariant1 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-fun invariant__ (us_private) Bool)

(declare-fun invariant____function_guard (Bool us_private) Bool)

;; invariant____post_axiom
  (assert true)

(declare-sort token_kind 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (token_kind token_kind) Bool)

(declare-const dummy5 token_kind)

(declare-datatypes ((token_kind__ref 0))
(((token_kind__refqtmk (token_kind__content token_kind)))))
(define-fun token_kind__ref_token_kind__content__projection ((a token_kind__ref)) token_kind 
  (token_kind__content a))

(declare-fun to_rep3 (token_kind) Int)

(declare-fun of_rep3 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort name_id 0)

(declare-fun name_idqtint (name_id) Int)

;; name_id'axiom
  (assert
  (forall ((i name_id))
  (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (name_id name_id) Bool)

(declare-const dummy6 name_id)

(declare-datatypes ((name_id__ref 0))
(((name_id__refqtmk (name_id__content name_id)))))
(define-fun name_id__ref_name_id__content__projection ((a name_id__ref)) name_id 
  (name_id__content a))

(define-fun to_rep4 ((x name_id)) Int (name_idqtint x))

(declare-fun of_rep4 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs_rec__lexer__token__kind__projection ((a us_split_discrs)) token_kind 
  (rec__lexer__token__kind a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__lexer__token__line natural)(rec__lexer__token__col natural)(rec__lexer__token__length natural)(rec__lexer__token__value name_id)))))
(define-fun us_split_fields_rec__lexer__token__line__projection ((a us_split_fields)) natural 
  (rec__lexer__token__line a))

(define-fun us_split_fields_rec__lexer__token__col__projection ((a us_split_fields)) natural 
  (rec__lexer__token__col a))

(define-fun us_split_fields_rec__lexer__token__length__projection ((a us_split_fields)) natural 
  (rec__lexer__token__length a))

(define-fun us_split_fields_rec__lexer__token__value__projection ((a us_split_fields)) name_id 
  (rec__lexer__token__value a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun lexer__token__value__pred ((a us_rep)) Bool (and
                                                        (<= 3 (to_rep3
                                                              (rec__lexer__token__kind
                                                              (us_split_discrs1
                                                              a))))
                                                        (<= (to_rep3
                                                            (rec__lexer__token__kind
                                                            (us_split_discrs1
                                                            a))) 8)))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep3
                           (rec__lexer__token__kind (us_split_discrs1 a))) 
                        (to_rep3
                        (rec__lexer__token__kind (us_split_discrs1 b))))
                        (and
                        (and
                        (= (to_rep
                           (rec__lexer__token__line (us_split_fields1 a))) 
                        (to_rep
                        (rec__lexer__token__line (us_split_fields1 b))))
                        (= (to_rep
                           (rec__lexer__token__col (us_split_fields1 a))) 
                        (to_rep
                        (rec__lexer__token__col (us_split_fields1 b)))))
                        (and
                        (= (to_rep
                           (rec__lexer__token__length (us_split_fields1 a))) 
                        (to_rep
                        (rec__lexer__token__length (us_split_fields1 b))))
                        (=> (lexer__token__value__pred a)
                        (= (to_rep4
                           (rec__lexer__token__value (us_split_fields1 a))) 
                        (to_rep4
                        (rec__lexer__token__value (us_split_fields1 b))))))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const lexer__token__kind__first__bit Int)

(declare-const lexer__token__kind__last__bit Int)

(declare-const lexer__token__kind__position Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position))

(declare-const lexer__token__line__first__bit Int)

(declare-const lexer__token__line__last__bit Int)

(declare-const lexer__token__line__position Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit lexer__token__line__last__bit))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position))

(declare-const lexer__token__col__first__bit Int)

(declare-const lexer__token__col__last__bit Int)

(declare-const lexer__token__col__position Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit lexer__token__col__last__bit))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position))

(declare-const lexer__token__length__first__bit Int)

(declare-const lexer__token__length__last__bit Int)

(declare-const lexer__token__length__position Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit lexer__token__length__last__bit))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position))

(declare-const lexer__token__value__first__bit Int)

(declare-const lexer__token__value__last__bit Int)

(declare-const lexer__token__value__position Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit))

;; lexer__token__value__last__bit_axiom
  (assert (< lexer__token__value__first__bit lexer__token__value__last__bit))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ((token__ref 0))
(((token__refqtmk (token__content us_rep)))))
(define-fun token__ref_token__content__projection ((a token__ref)) us_rep 
  (token__content a))

(declare-const t__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_195 us_rep)
  (temp___skip_top_level_196 Bool)) Bool (= (to_rep3
                                            (rec__lexer__token__kind
                                            (us_split_discrs1
                                            temp___expr_195))) 0))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_186 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=>
                                     (or (= temp___is_init_182 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_186)))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const kind Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const value us_t)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const t_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r28b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const r31b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const r34b Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const r37b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const r40b Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const r43b Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(define-fun dynamic_invariant3 ((temp___expr_172 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (<= 0 8)) (in_range5 temp___expr_172)))

(declare-sort valued_tokens 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 3 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (valued_tokens valued_tokens) Bool)

(declare-const dummy8 valued_tokens)

(declare-datatypes ((valued_tokens__ref 0))
(((valued_tokens__refqtmk (valued_tokens__content valued_tokens)))))
(define-fun valued_tokens__ref_valued_tokens__content__projection ((a valued_tokens__ref)) valued_tokens 
  (valued_tokens__content a))

(define-fun dynamic_invariant4 ((temp___expr_179 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (=>
                                     (or (= temp___is_init_175 true)
                                     (<= 3 8)) (in_range7 temp___expr_179)))

(define-fun in_range8 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep3
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const lexer__token__kind__first__bit1 Int)

(declare-const lexer__token__kind__last__bit1 Int)

(declare-const lexer__token__kind__position1 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit1))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position1))

(declare-const lexer__token__line__first__bit1 Int)

(declare-const lexer__token__line__last__bit1 Int)

(declare-const lexer__token__line__position1 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit1))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position1))

(declare-const lexer__token__col__first__bit1 Int)

(declare-const lexer__token__col__last__bit1 Int)

(declare-const lexer__token__col__position1 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit1))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position1))

(declare-const lexer__token__length__first__bit1 Int)

(declare-const lexer__token__length__last__bit1 Int)

(declare-const lexer__token__length__position1 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit1))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position1))

(declare-const lexer__token__value__first__bit1 Int)

(declare-const lexer__token__value__last__bit1 Int)

(declare-const lexer__token__value__position1 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit1))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position1))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes ((t29b__ref 0))
(((t29b__refqtmk (t29b__content us_rep)))))
(define-fun t29b__ref_t29b__content__projection ((a t29b__ref)) us_rep 
  (t29b__content a))

(define-fun in_range9 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep3
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const lexer__token__kind__first__bit2 Int)

(declare-const lexer__token__kind__last__bit2 Int)

(declare-const lexer__token__kind__position2 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit2))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit2 lexer__token__kind__last__bit2))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position2))

(declare-const lexer__token__line__first__bit2 Int)

(declare-const lexer__token__line__last__bit2 Int)

(declare-const lexer__token__line__position2 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit2))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit2 lexer__token__line__last__bit2))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position2))

(declare-const lexer__token__col__first__bit2 Int)

(declare-const lexer__token__col__last__bit2 Int)

(declare-const lexer__token__col__position2 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit2))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit2 lexer__token__col__last__bit2))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position2))

(declare-const lexer__token__length__first__bit2 Int)

(declare-const lexer__token__length__last__bit2 Int)

(declare-const lexer__token__length__position2 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit2))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit2 lexer__token__length__last__bit2))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position2))

(declare-const lexer__token__value__first__bit2 Int)

(declare-const lexer__token__value__last__bit2 Int)

(declare-const lexer__token__value__position2 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit2))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit2 lexer__token__value__last__bit2))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position2))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((t32b__ref 0))
(((t32b__refqtmk (t32b__content us_rep)))))
(define-fun t32b__ref_t32b__content__projection ((a t32b__ref)) us_rep 
  (t32b__content a))

(define-fun in_range10 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep3
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const lexer__token__kind__first__bit3 Int)

(declare-const lexer__token__kind__last__bit3 Int)

(declare-const lexer__token__kind__position3 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit3))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit3 lexer__token__kind__last__bit3))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position3))

(declare-const lexer__token__line__first__bit3 Int)

(declare-const lexer__token__line__last__bit3 Int)

(declare-const lexer__token__line__position3 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit3))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit3 lexer__token__line__last__bit3))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position3))

(declare-const lexer__token__col__first__bit3 Int)

(declare-const lexer__token__col__last__bit3 Int)

(declare-const lexer__token__col__position3 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit3))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit3 lexer__token__col__last__bit3))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position3))

(declare-const lexer__token__length__first__bit3 Int)

(declare-const lexer__token__length__last__bit3 Int)

(declare-const lexer__token__length__position3 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit3))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit3 lexer__token__length__last__bit3))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position3))

(declare-const lexer__token__value__first__bit3 Int)

(declare-const lexer__token__value__last__bit3 Int)

(declare-const lexer__token__value__position3 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit3))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit3 lexer__token__value__last__bit3))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position3))

(declare-fun user_eq11 (us_rep us_rep) Bool)

(declare-const dummy11 us_rep)

(declare-datatypes ((t35b__ref 0))
(((t35b__refqtmk (t35b__content us_rep)))))
(define-fun t35b__ref_t35b__content__projection ((a t35b__ref)) us_rep 
  (t35b__content a))

(define-fun in_range11 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep3
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const lexer__token__kind__first__bit4 Int)

(declare-const lexer__token__kind__last__bit4 Int)

(declare-const lexer__token__kind__position4 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit4))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit4 lexer__token__kind__last__bit4))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position4))

(declare-const lexer__token__line__first__bit4 Int)

(declare-const lexer__token__line__last__bit4 Int)

(declare-const lexer__token__line__position4 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit4))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit4 lexer__token__line__last__bit4))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position4))

(declare-const lexer__token__col__first__bit4 Int)

(declare-const lexer__token__col__last__bit4 Int)

(declare-const lexer__token__col__position4 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit4))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit4 lexer__token__col__last__bit4))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position4))

(declare-const lexer__token__length__first__bit4 Int)

(declare-const lexer__token__length__last__bit4 Int)

(declare-const lexer__token__length__position4 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit4))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit4 lexer__token__length__last__bit4))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position4))

(declare-const lexer__token__value__first__bit4 Int)

(declare-const lexer__token__value__last__bit4 Int)

(declare-const lexer__token__value__position4 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit4))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit4 lexer__token__value__last__bit4))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position4))

(declare-fun user_eq12 (us_rep us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes ((t38b__ref 0))
(((t38b__refqtmk (t38b__content us_rep)))))
(define-fun t38b__ref_t38b__content__projection ((a t38b__ref)) us_rep 
  (t38b__content a))

(define-fun in_range12 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep3
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const lexer__token__kind__first__bit5 Int)

(declare-const lexer__token__kind__last__bit5 Int)

(declare-const lexer__token__kind__position5 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit5))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit5 lexer__token__kind__last__bit5))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position5))

(declare-const lexer__token__line__first__bit5 Int)

(declare-const lexer__token__line__last__bit5 Int)

(declare-const lexer__token__line__position5 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit5))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit5 lexer__token__line__last__bit5))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position5))

(declare-const lexer__token__col__first__bit5 Int)

(declare-const lexer__token__col__last__bit5 Int)

(declare-const lexer__token__col__position5 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit5))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit5 lexer__token__col__last__bit5))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position5))

(declare-const lexer__token__length__first__bit5 Int)

(declare-const lexer__token__length__last__bit5 Int)

(declare-const lexer__token__length__position5 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit5))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit5 lexer__token__length__last__bit5))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position5))

(declare-const lexer__token__value__first__bit5 Int)

(declare-const lexer__token__value__last__bit5 Int)

(declare-const lexer__token__value__position5 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit5))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit5 lexer__token__value__last__bit5))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position5))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ((t41b__ref 0))
(((t41b__refqtmk (t41b__content us_rep)))))
(define-fun t41b__ref_t41b__content__projection ((a t41b__ref)) us_rep 
  (t41b__content a))

(define-fun in_range13 ((rec__lexer__token__kind1 Int)
  (a us_rep)) Bool (= rec__lexer__token__kind1 (to_rep3
                                               (rec__lexer__token__kind
                                               (us_split_discrs1 a)))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const lexer__token__kind__first__bit6 Int)

(declare-const lexer__token__kind__last__bit6 Int)

(declare-const lexer__token__kind__position6 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit6))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit6 lexer__token__kind__last__bit6))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position6))

(declare-const lexer__token__line__first__bit6 Int)

(declare-const lexer__token__line__last__bit6 Int)

(declare-const lexer__token__line__position6 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit6))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit6 lexer__token__line__last__bit6))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position6))

(declare-const lexer__token__col__first__bit6 Int)

(declare-const lexer__token__col__last__bit6 Int)

(declare-const lexer__token__col__position6 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit6))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit6 lexer__token__col__last__bit6))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position6))

(declare-const lexer__token__length__first__bit6 Int)

(declare-const lexer__token__length__last__bit6 Int)

(declare-const lexer__token__length__position6 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit6))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit6 lexer__token__length__last__bit6))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position6))

(declare-const lexer__token__value__first__bit6 Int)

(declare-const lexer__token__value__last__bit6 Int)

(declare-const lexer__token__value__position6 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit6))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit6 lexer__token__value__last__bit6))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position6))

(declare-fun user_eq14 (us_rep us_rep) Bool)

(declare-const dummy14 us_rep)

(declare-datatypes ((t44b__ref 0))
(((t44b__refqtmk (t44b__content us_rep)))))
(define-fun t44b__ref_t44b__content__projection ((a t44b__ref)) us_rep 
  (t44b__content a))

(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(define-fun dynamic_invariant7 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(assert
;; defqtvc
 ;; File "lexer.adb", line 274, characters 0-0
  (not
  (forall ((name_table us_private) (t__split_discrs token_kind)
  (current_pos Int) (first_line Int) (first_col Int) (first_pos Int) (n Int))
  (=> (dynamic_invariant current_pos true false true true)
  (=> (dynamic_invariant first_line true false true true)
  (=> (dynamic_invariant first_col true false true true)
  (=> (dynamic_invariant first_pos true false true true)
  (=> (dynamic_invariant4 kind true false true true)
  (=> (dynamic_invariant1 value true false true true)
  (=> (not (= t__attr__constrained true))
  (=>
  (forall ((name_table1 us_private)) (invariant____function_guard
  (invariant__ name_table1) name_table1))
  (=> (= (invariant__ name_table) true)
  (=> (<= first_pos current_pos)
  (let ((o (- current_pos first_pos)))
  (=> (in_range1 o)
  (=> (in_range2 o)
  (=> (= o t_length)
  (=> (dynamic_invariant t_length true false true true)
  (=> (dynamic_invariant2 n false false true true)
  (forall ((name_table1 us_private) (n1 Int))
  (=>
  (forall ((name_table2 us_private)) (invariant____function_guard
  (invariant__ name_table2) name_table2))
  (=>
  (and (= (invariant__ name_table1) true) (dynamic_invariant2 n1 true true
  true true))
  (forall ((spark__branch Bool))
  (=> (= spark__branch (ite (= kind 3) true false))
  (=> (= spark__branch true)
  (forall ((lexer__read_token__new_token__2__R28b__assume Int))
  (=>
  (= (to_rep3 t__split_discrs) lexer__read_token__new_token__2__R28b__assume)
  (=> (= lexer__read_token__new_token__2__R28b__assume r28b)
  (=> (dynamic_invariant3 r28b true false true true)
  (forall ((o1 name_id))
  (=> (= (to_rep4 o1) n1)
  (forall ((o2 natural))
  (=> (= (to_rep o2) t_length)
  (forall ((o3 natural))
  (=> (= (to_rep o3) first_col)
  (forall ((o4 natural))
  (=> (= (to_rep o4) first_line)
  (forall ((o5 token_kind))
  (=> (= (to_rep3 o5) 3)
  (=> (= t__attr__constrained true) (= o5 t__split_discrs)))))))))))))))))))))))))))))))))))))))))
(check-sat)
