;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const j Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i1 index)) (and (<= 1 (indexqtint i1)) (<= (indexqtint i1) 100))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (index index) Bool)

(declare-const dummy index)

(declare-datatypes ((index__ref 0))
(((index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(define-fun to_rep ((x index)) Int (indexqtint x))

(declare-fun of_rep (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__lists__cell__is_set Bool)))))
(define-fun us_split_discrs_rec__lists__cell__is_set__projection ((a us_split_discrs)) Bool 
  (rec__lists__cell__is_set a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__lists__cell__next index)))))
(define-fun us_split_fields_rec__lists__cell__next__projection ((a us_split_fields)) index 
  (rec__lists__cell__next a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun lists__cell__next__pred ((a us_rep)) Bool (= (ite (rec__lists__cell__is_set
                                                              (us_split_discrs1
                                                              a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__lists__cell__is_set
                                (us_split_discrs1 a)) 1 0) (ite (rec__lists__cell__is_set
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=> (lists__cell__next__pred a)
                        (= (to_rep
                           (rec__lists__cell__next (us_split_fields1 a))) 
                        (to_rep
                        (rec__lists__cell__next (us_split_fields1 b))))))
                   true false))

(define-fun in_range2 ((rec__lists__cell__is_set1 Bool)
  (a us_split_discrs)) Bool (= rec__lists__cell__is_set1 (rec__lists__cell__is_set
                                                         a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const lists__cell__is_set__first__bit Int)

(declare-const lists__cell__is_set__last__bit Int)

(declare-const lists__cell__is_set__position Int)

;; lists__cell__is_set__first__bit_axiom
  (assert (<= 0 lists__cell__is_set__first__bit))

;; lists__cell__is_set__last__bit_axiom
  (assert (< lists__cell__is_set__first__bit lists__cell__is_set__last__bit))

;; lists__cell__is_set__position_axiom
  (assert (<= 0 lists__cell__is_set__position))

(declare-const lists__cell__next__first__bit Int)

(declare-const lists__cell__next__last__bit Int)

(declare-const lists__cell__next__position Int)

;; lists__cell__next__first__bit_axiom
  (assert (<= 0 lists__cell__next__first__bit))

;; lists__cell__next__last__bit_axiom
  (assert (< lists__cell__next__first__bit lists__cell__next__last__bit))

;; lists__cell__next__position_axiom
  (assert (<= 0 lists__cell__next__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((cell__ref 0))
(((cell__refqtmk (cell__content us_rep)))))
(define-fun cell__ref_cell__content__projection ((a cell__ref)) us_rep 
  (cell__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i1 Int))
  (! (= (select (slide a old_first new_first) i1) (select a (- i1 (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i1)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant ((temp___expr_161 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)
  (temp___do_typ_inv_160 Bool)) Bool (=>
                                     (or (= temp___is_init_157 true)
                                     (<= 1 100)) (in_range1 temp___expr_161)))

(define-fun default_initial_assumption ((temp___expr_185 (Array Int us_rep))
  (temp___skip_top_level_186 Bool)) Bool (forall ((temp___187 Int))
                                         (=>
                                         (and (<= 1 temp___187)
                                         (<= temp___187 100))
                                         (= (rec__lists__cell__is_set
                                            (us_split_discrs1
                                            (select temp___expr_185 temp___187))) (distinct 1 0)))))

(define-fun default_initial_assumption1 ((temp___expr_174 us_rep)
  (temp___skip_top_level_175 Bool)) Bool (= (rec__lists__cell__is_set
                                            (us_split_discrs1
                                            temp___expr_174)) (distinct 1 0)))

(assert
;; defqtvc
 ;; File "lists.ads", line 5, characters 0-0
  (not
  (forall ((memory1 (Array Int us_rep)) (spark__branch Bool))
  (=> (dynamic_invariant i true false true true)
  (=> (dynamic_invariant j true false true true)
  (=>
  (= spark__branch (rec__lists__cell__is_set
                   (us_split_discrs1 (select memory1 i))))
  (=> (= spark__branch true) (lists__cell__next__pred (select memory1 i)))))))))
(check-sat)
