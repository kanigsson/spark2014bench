(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun is_valid (Int) Bool)

(declare-fun is_valid__function_guard (Bool Int) Bool)

;; temp___result_158'def
  (assert
  (forall ((temp___157 Int)) (is_valid__function_guard (is_valid temp___157)
  temp___157)))

(define-fun type_invariant ((temp___156 Int)) Bool (= (is_valid temp___156) true))

(declare-sort t 0)

(declare-fun tqtint (t) Int)

;; t'axiom
  (assert (forall ((i t)) (and (<= 0 (tqtint i)) (<= (tqtint i) 10000))))

(define-fun in_range1 ((x1 Int)) Bool (and (<= 0 x1) (<= x1 10000)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (t t) Bool)

(declare-const dummy1 t)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content t)))))
(define-fun t__ref_t__content__projection ((a t__ref)) t (t__content a))

(define-fun dynamic_invariant1 ((temp___expr_163 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)
  (temp___do_typ_inv_162 Bool)) Bool (=>
                                     (or (= temp___is_init_159 true)
                                     (<= 0 10000)) (in_range1
                                     temp___expr_163)))

(define-fun abs1 ((x1 Int)) Int (ite (<= 0 x1) x1 (- x1)))

;; Abs_le
  (assert
  (forall ((x1 Int) (y Int))
  (= (<= (abs1 x1) y) (and (<= (- y) x1) (<= x1 y)))))

;; Abs_pos
  (assert (forall ((x1 Int)) (<= 0 (abs1 x1))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x1 Int) (y Int))
  (=> (not (= y 0)) (= x1 (+ (* y (div1 x1 y)) (mod1 x1 y))))))

;; Div_bound
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (< 0 y)) (and (<= 0 (div1 x1 y)) (<= (div1 x1 y) x1)))))

;; Mod_bound
  (assert
  (forall ((x1 Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x1 y)) (< (mod1 x1 y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= 0 x1) (< 0 y)) (<= 0 (div1 x1 y)))))

;; Div_sign_neg
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= x1 0) (< 0 y)) (<= (div1 x1 y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (not (= y 0))) (<= 0 (mod1 x1 y)))))

;; Mod_sign_neg
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= x1 0) (not (= y 0))) (<= (mod1 x1 y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x1 Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x1 y) y)) (abs1 x1)))))

;; Div_1
  (assert (forall ((x1 Int)) (= (div1 x1 1) x1)))

;; Mod_1
  (assert (forall ((x1 Int)) (= (mod1 x1 1) 0)))

;; Div_inf
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= 0 x1) (< x1 y)) (= (div1 x1 y) 0))))

;; Mod_inf
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (< x1 y)) (= (mod1 x1 y) x1))))

;; Div_mult
  (assert
  (forall ((x1 Int) (y Int) (z Int))
  (! (=> (and (< 0 x1) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x1 y) z) x1) (+ y (div1 z x1)))) :pattern ((div1
                                                               (+ (* x1 y) z)
                                                               x1)) )))

;; Mod_mult
  (assert
  (forall ((x1 Int) (y Int) (z Int))
  (! (=> (and (< 0 x1) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x1 y) z) x1) (mod1 z x1))) :pattern ((mod1 (+ (* x1 y) z)
                                                         x1)) )))

;; Div_unique
  (assert
  (forall ((x1 Int) (y Int) (q Int))
  (=> (< 0 y)
  (=> (and (<= (* q y) x1) (< x1 (+ (* q y) y))) (= (div x1 y) q)))))

;; Div_bound
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (<= 0 x1) (< 0 y)) (and (<= 0 (div x1 y)) (<= (div x1 y) x1)))))

;; Div_inf
  (assert
  (forall ((x1 Int) (y Int)) (=> (and (<= 0 x1) (< x1 y)) (= (div x1 y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x1 Int) (y Int))
  (=> (and (< 0 x1) (<= x1 y)) (= (div (- x1) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x1 Int) (y Int) (z Int))
  (! (=> (< 0 x1) (= (div (+ (* x1 y) z) x1) (+ y (div z x1)))) :pattern ((div (+ (* x1 y) z) x1)) )))

;; Mod_mult
  (assert
  (forall ((x1 Int) (y Int) (z Int))
  (! (=> (< 0 x1) (= (mod (+ (* x1 y) z) x1) (mod z x1))) :pattern ((mod (+ (* x1 y) z) x1)) )))

(define-fun mod2 ((x1 Int)
  (y Int)) Int (ite (< 0 y) (mod x1 y) (+ (mod x1 y) y)))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((x1 Int))
  (! (= (= (is_valid x1) true) (= (mod2 x1 2) 0)) :pattern ((is_valid x1)) )))

(assert
;; defqtvc
 ;; File "typeinv.ads", line 4, characters 0-0
  (not (=> (dynamic_invariant x true false true true) (in_range1 x))))
(check-sat)
