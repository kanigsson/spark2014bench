;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i))
  (<= (capacity_rangeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (capacity_range capacity_range) Bool)

(declare-const dummy capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__common_formal_containers__int64_vects__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__common_formal_containers__int64_vects__vector__capacity__projection ((a us_split_discrs)) capacity_range 
  (rec__common_formal_containers__int64_vects__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__common_formal_containers__int64_vects__vector us_main_type)))))
(define-fun us_split_fields_rec__common_formal_containers__int64_vects__vector__projection ((a us_split_fields)) us_main_type 
  (rec__common_formal_containers__int64_vects__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__common_formal_containers__int64_vects__vector__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__common_formal_containers__int64_vects__vector__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__common_formal_containers__int64_vects__vector
                           (us_split_fields1 a))
                           (rec__common_formal_containers__int64_vects__vector
                           (us_split_fields1 b))) true))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const common_formal_containers__int64_vects__vector__capacity__first__bit Int)

(declare-const common_formal_containers__int64_vects__vector__capacity__last__bit Int)

(declare-const common_formal_containers__int64_vects__vector__capacity__position Int)

;; common_formal_containers__int64_vects__vector__capacity__first__bit_axiom
  (assert
  (<= 0 common_formal_containers__int64_vects__vector__capacity__first__bit))

;; common_formal_containers__int64_vects__vector__capacity__last__bit_axiom
  (assert
  (< common_formal_containers__int64_vects__vector__capacity__first__bit 
  common_formal_containers__int64_vects__vector__capacity__last__bit))

;; common_formal_containers__int64_vects__vector__capacity__position_axiom
  (assert
  (<= 0 common_formal_containers__int64_vects__vector__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep 
  (vector__content a))

(define-fun in_range2 ((rec__common_formal_containers__int64_vects__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__common_formal_containers__int64_vects__vector__capacity1 
  (to_rep
  (rec__common_formal_containers__int64_vects__vector__capacity
  (us_split_discrs1 a)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const common_formal_containers__int64_vects__vector__capacity__first__bit1 Int)

(declare-const common_formal_containers__int64_vects__vector__capacity__last__bit1 Int)

(declare-const common_formal_containers__int64_vects__vector__capacity__position1 Int)

;; common_formal_containers__int64_vects__vector__capacity__first__bit_axiom
  (assert
  (<= 0 common_formal_containers__int64_vects__vector__capacity__first__bit1))

;; common_formal_containers__int64_vects__vector__capacity__last__bit_axiom
  (assert
  (< common_formal_containers__int64_vects__vector__capacity__first__bit1 
  common_formal_containers__int64_vects__vector__capacity__last__bit1))

;; common_formal_containers__int64_vects__vector__capacity__position_axiom
  (assert
  (<= 0 common_formal_containers__int64_vects__vector__capacity__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((int64_vect__ref 0))
(((int64_vect__refqtmk (int64_vect__content us_rep)))))
(define-fun int64_vect__ref_int64_vect__content__projection ((a int64_vect__ref)) us_rep 
  (int64_vect__content a))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (count_type count_type) Bool)

(declare-const dummy3 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep1 ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1
  (rec__common_formal_containers__int64_sets__set__capacity count_type)))))
(define-fun us_split_discrs_rec__common_formal_containers__int64_sets__set__capacity__projection ((a us_split_discrs2)) count_type 
  (rec__common_formal_containers__int64_sets__set__capacity a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__common_formal_containers__int64_sets__set us_main_type1)))))
(define-fun us_split_fields_rec__common_formal_containers__int64_sets__set__projection ((a us_split_fields2)) us_main_type1 
  (rec__common_formal_containers__int64_sets__set a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__common_formal_containers__int64_sets__set__capacity
                            (us_split_discrs3 a))) (to_rep1
                                                   (rec__common_formal_containers__int64_sets__set__capacity
                                                   (us_split_discrs3 b))))
                         (= (us_main_eq1
                            (rec__common_formal_containers__int64_sets__set
                            (us_split_fields3 a))
                            (rec__common_formal_containers__int64_sets__set
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const common_formal_containers__int64_sets__set__capacity__first__bit Int)

(declare-const common_formal_containers__int64_sets__set__capacity__last__bit Int)

(declare-const common_formal_containers__int64_sets__set__capacity__position Int)

;; common_formal_containers__int64_sets__set__capacity__first__bit_axiom
  (assert
  (<= 0 common_formal_containers__int64_sets__set__capacity__first__bit))

;; common_formal_containers__int64_sets__set__capacity__last__bit_axiom
  (assert
  (< common_formal_containers__int64_sets__set__capacity__first__bit 
  common_formal_containers__int64_sets__set__capacity__last__bit))

;; common_formal_containers__int64_sets__set__capacity__position_axiom
  (assert
  (<= 0 common_formal_containers__int64_sets__set__capacity__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ((set__ref 0))
(((set__refqtmk (set__content us_rep1)))))
(define-fun set__ref_set__content__projection ((a set__ref)) us_rep1 
  (set__content a))

(define-fun in_range4 ((rec__common_formal_containers__int64_sets__set__capacity1 Int)
  (a us_rep1)) Bool (= rec__common_formal_containers__int64_sets__set__capacity1 
  (to_rep1
  (rec__common_formal_containers__int64_sets__set__capacity
  (us_split_discrs3 a)))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const common_formal_containers__int64_sets__set__capacity__first__bit1 Int)

(declare-const common_formal_containers__int64_sets__set__capacity__last__bit1 Int)

(declare-const common_formal_containers__int64_sets__set__capacity__position1 Int)

;; common_formal_containers__int64_sets__set__capacity__first__bit_axiom
  (assert
  (<= 0 common_formal_containers__int64_sets__set__capacity__first__bit1))

;; common_formal_containers__int64_sets__set__capacity__last__bit_axiom
  (assert
  (< common_formal_containers__int64_sets__set__capacity__first__bit1 
  common_formal_containers__int64_sets__set__capacity__last__bit1))

;; common_formal_containers__int64_sets__set__capacity__position_axiom
  (assert
  (<= 0 common_formal_containers__int64_sets__set__capacity__position1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((int64_set__ref 0))
(((int64_set__refqtmk (int64_set__content us_rep1)))))
(define-fun int64_set__ref_int64_set__content__projection ((a int64_set__ref)) us_rep1 
  (int64_set__content a))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-const dummy6 us_rep2)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep2)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep2 
  (sequence__content a))

(declare-fun length (us_rep2) Int)

(declare-fun length__function_guard (Int us_rep2) Bool)

(define-fun last ((container us_rep2)) Int (+ (- 1) (length container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(declare-fun model1 (us_rep) us_rep2)

(declare-fun model__function_guard (us_rep2 us_rep) Bool)

(define-fun last_index ((container us_rep)) Int (last (model1 container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(define-fun element ((container us_rep)
  (index Int)) Int (get (model1 container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ((set__ref1 0))
(((set__refqtmk1 (set__content1 us_rep3)))))
(define-fun set__ref_set__content__2__projection ((a set__ref1)) us_rep3 
  (set__content1 a))

(declare-fun model2 (us_rep1) us_rep3)

(declare-fun model__function_guard1 (us_rep3 us_rep1) Bool)

(declare-fun contains (us_rep3 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep3 Int) Bool)

(define-fun contains1 ((container us_rep1)
  (item Int)) Bool (contains (model2 container) item))

(declare-fun contains__function_guard1 (Bool us_rep1 Int) Bool)

(declare-fun all_elements_in (us_rep us_rep1) Bool)

(declare-fun all_elements_in__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun dynamic_invariant ((temp___expr_229 us_rep)
  (temp___is_init_225 Bool) (temp___skip_constant_226 Bool)
  (temp___do_toplevel_227 Bool)
  (temp___do_typ_inv_228 Bool)) Bool (=>
                                     (not (= temp___skip_constant_226 true))
                                     (in_range2 200 temp___expr_229)))

(define-fun default_initial_assumption ((temp___expr_231 us_rep)
  (temp___skip_top_level_232 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_231))) 200)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_232 true))
                                         (= (is_empty temp___expr_231) true))))

(declare-fun is_empty1 (us_rep1) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep1) Bool)

(define-fun dynamic_invariant1 ((temp___expr_245 us_rep1)
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)
  (temp___do_typ_inv_244 Bool)) Bool (=>
                                     (not (= temp___skip_constant_242 true))
                                     (in_range4 200 temp___expr_245)))

(define-fun default_initial_assumption1 ((temp___expr_247 us_rep1)
  (temp___skip_top_level_248 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__common_formal_containers__int64_sets__set__capacity
                                            (us_split_discrs3
                                            temp___expr_247))) 200)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_248 true))
                                         (= (is_empty1 temp___expr_247) true))))

;; all_elements_in__post_axiom
  (assert true)

;; all_elements_in__def_axiom
  (assert
  (forall ((v us_rep))
  (forall ((s us_rep1))
  (! (= (= (all_elements_in v s) true)
     (forall ((j Int))
     (=> (and (<= 0 j) (<= j (last_index v)))
     (= (contains1 s (element v j)) true)))) :pattern ((all_elements_in v s)) ))))

(declare-const operating_region Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv x ((_ int2bv 32) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq8 (hash_type hash_type) Bool)

(declare-const dummy8 hash_type)

(declare-datatypes ((hash_type__ref 0))
(((hash_type__refqtmk (hash_type__content hash_type)))))
(define-fun hash_type__ref_hash_type__content__projection ((a hash_type__ref)) hash_type 
  (hash_type__content a))

(declare-fun to_rep2 (hash_type) (_ BitVec 32))

(declare-fun of_rep2 ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int2 ((x hash_type)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-datatypes ((us_split_discrs4 0))
(((us_split_discrsqtmk2
  (rec__automation_request_validation__int64_operating_region_maps__map__capacity count_type)(rec__automation_request_validation__int64_operating_region_maps__map__modulus hash_type)))))
(define-fun us_split_discrs_rec__automation_request_validation__int64_operating_region_maps__map__capacity__projection ((a us_split_discrs4)) count_type 
  (rec__automation_request_validation__int64_operating_region_maps__map__capacity
  a))

(define-fun us_split_discrs_rec__automation_request_validation__int64_operating_region_maps__map__modulus__projection ((a us_split_discrs4)) hash_type 
  (rec__automation_request_validation__int64_operating_region_maps__map__modulus
  a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((us_split_discrs__refqtmk2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__automation_request_validation__int64_operating_region_maps__map us_main_type4)))))
(define-fun us_split_fields_rec__automation_request_validation__int64_operating_region_maps__map__projection ((a us_split_fields4)) us_main_type4 
  (rec__automation_request_validation__int64_operating_region_maps__map a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk2
  (us_split_discrs5 us_split_discrs4)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep4)) us_split_discrs4 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep4)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__automation_request_validation__int64_operating_region_maps__map__capacity
                            (us_split_discrs5 a))) (to_rep1
                                                   (rec__automation_request_validation__int64_operating_region_maps__map__capacity
                                                   (us_split_discrs5 b))))
                         (= (to_rep2
                            (rec__automation_request_validation__int64_operating_region_maps__map__modulus
                            (us_split_discrs5 a))) (to_rep2
                                                   (rec__automation_request_validation__int64_operating_region_maps__map__modulus
                                                   (us_split_discrs5 b)))))
                         (= (us_main_eq4
                            (rec__automation_request_validation__int64_operating_region_maps__map
                            (us_split_fields5 a))
                            (rec__automation_request_validation__int64_operating_region_maps__map
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const automation_request_validation__int64_operating_region_maps__map__capacity__first__bit Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__capacity__last__bit Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__capacity__position Int)

;; automation_request_validation__int64_operating_region_maps__map__capacity__first__bit_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__capacity__first__bit))

;; automation_request_validation__int64_operating_region_maps__map__capacity__last__bit_axiom
  (assert
  (< automation_request_validation__int64_operating_region_maps__map__capacity__first__bit 
  automation_request_validation__int64_operating_region_maps__map__capacity__last__bit))

;; automation_request_validation__int64_operating_region_maps__map__capacity__position_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__capacity__position))

(declare-const automation_request_validation__int64_operating_region_maps__map__modulus__first__bit Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__modulus__last__bit Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__modulus__position Int)

;; automation_request_validation__int64_operating_region_maps__map__modulus__first__bit_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__modulus__first__bit))

;; automation_request_validation__int64_operating_region_maps__map__modulus__last__bit_axiom
  (assert
  (< automation_request_validation__int64_operating_region_maps__map__modulus__first__bit 
  automation_request_validation__int64_operating_region_maps__map__modulus__last__bit))

;; automation_request_validation__int64_operating_region_maps__map__modulus__position_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__modulus__position))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-const dummy9 us_rep4)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep4)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep4 
  (map__content a))

(define-fun in_range5 ((rec__automation_request_validation__int64_operating_region_maps__map__capacity1 Int)
  (rec__automation_request_validation__int64_operating_region_maps__map__modulus1 (_ BitVec 32))
  (a us_rep4)) Bool (and
                    (= rec__automation_request_validation__int64_operating_region_maps__map__capacity1 
                    (to_rep1
                    (rec__automation_request_validation__int64_operating_region_maps__map__capacity
                    (us_split_discrs5 a))))
                    (= rec__automation_request_validation__int64_operating_region_maps__map__modulus1 
                    (to_rep2
                    (rec__automation_request_validation__int64_operating_region_maps__map__modulus
                    (us_split_discrs5 a))))))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const automation_request_validation__int64_operating_region_maps__map__capacity__first__bit1 Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__capacity__last__bit1 Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__capacity__position1 Int)

;; automation_request_validation__int64_operating_region_maps__map__capacity__first__bit_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__capacity__first__bit1))

;; automation_request_validation__int64_operating_region_maps__map__capacity__last__bit_axiom
  (assert
  (< automation_request_validation__int64_operating_region_maps__map__capacity__first__bit1 
  automation_request_validation__int64_operating_region_maps__map__capacity__last__bit1))

;; automation_request_validation__int64_operating_region_maps__map__capacity__position_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__capacity__position1))

(declare-const automation_request_validation__int64_operating_region_maps__map__modulus__first__bit1 Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__modulus__last__bit1 Int)

(declare-const automation_request_validation__int64_operating_region_maps__map__modulus__position1 Int)

;; automation_request_validation__int64_operating_region_maps__map__modulus__first__bit_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__modulus__first__bit1))

;; automation_request_validation__int64_operating_region_maps__map__modulus__last__bit_axiom
  (assert
  (< automation_request_validation__int64_operating_region_maps__map__modulus__first__bit1 
  automation_request_validation__int64_operating_region_maps__map__modulus__last__bit1))

;; automation_request_validation__int64_operating_region_maps__map__modulus__position_axiom
  (assert
  (<= 0 automation_request_validation__int64_operating_region_maps__map__modulus__position1))

(declare-fun user_eq10 (us_rep4 us_rep4) Bool)

(declare-const dummy10 us_rep4)

(declare-datatypes ((operating_region_maps__ref 0))
(((operating_region_maps__refqtmk (operating_region_maps__content us_rep4)))))
(define-fun operating_region_maps__ref_operating_region_maps__content__projection ((a operating_region_maps__ref)) us_rep4 
  (operating_region_maps__content a))

(declare-const operating_regions us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const keepin_zones_ids us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const keepout_zones_ids us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-sort us_rep5 0)

(declare-fun bool_eq5 (us_rep5 us_rep5) Bool)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq11 (us_rep5 us_rep5) Bool)

(declare-const dummy11 us_rep5)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 us_rep5)))))
(define-fun map__ref_map__content__2__projection ((a map__ref1)) us_rep5 
  (map__content1 a))

(declare-fun model3 (us_rep4) us_rep5)

(declare-fun model__function_guard2 (us_rep5 us_rep4) Bool)

(declare-fun has_key (us_rep5 Int) Bool)

(declare-fun has_key__function_guard (Bool us_rep5 Int) Bool)

(define-fun contains2 ((container us_rep4)
  (key Int)) Bool (has_key (model3 container) key))

(declare-fun contains__function_guard2 (Bool us_rep4 Int) Bool)

(declare-datatypes ((us_split_fields6 0))
(((us_split_fieldsqtmk3
  (rec__spark_boundary__operatingregionareas__keepinareas us_rep)(rec__spark_boundary__operatingregionareas__keepoutareas us_rep)))))
(define-fun us_split_fields_rec__spark_boundary__operatingregionareas__keepinareas__projection ((a us_split_fields6)) us_rep 
  (rec__spark_boundary__operatingregionareas__keepinareas a))

(define-fun us_split_fields_rec__spark_boundary__operatingregionareas__keepoutareas__projection ((a us_split_fields6)) us_rep 
  (rec__spark_boundary__operatingregionareas__keepoutareas a))

(declare-datatypes ((us_split_fields__ref3 0))
(((us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ((us_rep6 0))
(((us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep6)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq6 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (user_eq2
                            (rec__spark_boundary__operatingregionareas__keepinareas
                            (us_split_fields7 a))
                            (rec__spark_boundary__operatingregionareas__keepinareas
                            (us_split_fields7 b))) true)
                         (= (user_eq2
                            (rec__spark_boundary__operatingregionareas__keepoutareas
                            (us_split_fields7 a))
                            (rec__spark_boundary__operatingregionareas__keepoutareas
                            (us_split_fields7 b))) true))
                    true false))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const spark_boundary__operatingregionareas__keepinareas__first__bit Int)

(declare-const spark_boundary__operatingregionareas__keepinareas__last__bit Int)

(declare-const spark_boundary__operatingregionareas__keepinareas__position Int)

;; spark_boundary__operatingregionareas__keepinareas__first__bit_axiom
  (assert
  (<= 0 spark_boundary__operatingregionareas__keepinareas__first__bit))

;; spark_boundary__operatingregionareas__keepinareas__last__bit_axiom
  (assert
  (< spark_boundary__operatingregionareas__keepinareas__first__bit spark_boundary__operatingregionareas__keepinareas__last__bit))

;; spark_boundary__operatingregionareas__keepinareas__position_axiom
  (assert (<= 0 spark_boundary__operatingregionareas__keepinareas__position))

(declare-const spark_boundary__operatingregionareas__keepoutareas__first__bit Int)

(declare-const spark_boundary__operatingregionareas__keepoutareas__last__bit Int)

(declare-const spark_boundary__operatingregionareas__keepoutareas__position Int)

;; spark_boundary__operatingregionareas__keepoutareas__first__bit_axiom
  (assert
  (<= 0 spark_boundary__operatingregionareas__keepoutareas__first__bit))

;; spark_boundary__operatingregionareas__keepoutareas__last__bit_axiom
  (assert
  (< spark_boundary__operatingregionareas__keepoutareas__first__bit spark_boundary__operatingregionareas__keepoutareas__last__bit))

;; spark_boundary__operatingregionareas__keepoutareas__position_axiom
  (assert
  (<= 0 spark_boundary__operatingregionareas__keepoutareas__position))

(declare-fun user_eq12 (us_rep6 us_rep6) Bool)

(declare-const dummy12 us_rep6)

(declare-datatypes ((operatingregionareas__ref 0))
(((operatingregionareas__refqtmk (operatingregionareas__content us_rep6)))))
(define-fun operatingregionareas__ref_operatingregionareas__content__projection ((a operatingregionareas__ref)) us_rep6 
  (operatingregionareas__content a))

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content us_rep6)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref)) us_rep6 
  (element_type__content a))

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 us_rep6)))))
(define-fun element_type__ref_element_type__content__6__projection ((a element_type__ref1)) us_rep6 
  (element_type__content1 a))

(declare-fun get1 (us_rep5 Int) us_rep6)

(declare-fun get__function_guard1 (us_rep6 us_rep5 Int) Bool)

(define-fun element1 ((container us_rep4)
  (key Int)) us_rep6 (get1 (model3 container) key))

(declare-fun element__function_guard1 (us_rep6 us_rep4 Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_445 us_rep6)
  (temp___is_init_441 Bool) (temp___skip_constant_442 Bool)
  (temp___do_toplevel_443 Bool)
  (temp___do_typ_inv_444 Bool)) Bool (and (in_range2 200
                                     (rec__spark_boundary__operatingregionareas__keepinareas
                                     (us_split_fields7 temp___expr_445)))
                                     (in_range2 200
                                     (rec__spark_boundary__operatingregionareas__keepoutareas
                                     (us_split_fields7 temp___expr_445)))))

(define-fun default_initial_assumption2 ((temp___expr_448 us_rep6)
  (temp___skip_top_level_449 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            (rec__spark_boundary__operatingregionareas__keepinareas
                                            (us_split_fields7
                                            temp___expr_448))))) 200)
                                         (= (is_empty
                                            (rec__spark_boundary__operatingregionareas__keepinareas
                                            (us_split_fields7
                                            temp___expr_448))) true))
                                         (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            (rec__spark_boundary__operatingregionareas__keepoutareas
                                            (us_split_fields7
                                            temp___expr_448))))) 200)
                                         (= (is_empty
                                            (rec__spark_boundary__operatingregionareas__keepoutareas
                                            (us_split_fields7
                                            temp___expr_448))) true))))

(declare-sort int64 0)

(declare-fun int64qtint (int64) Int)

;; int64'axiom
  (assert
  (forall ((i int64))
  (and (<= (- 9223372036854775808) (int64qtint i))
  (<= (int64qtint i) 9223372036854775807))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq13 (int64 int64) Bool)

(declare-const dummy13 int64)

(declare-datatypes ((int64__ref 0))
(((int64__refqtmk (int64__content int64)))))
(define-fun int64__ref_int64__content__projection ((a int64__ref)) int64 
  (int64__content a))

(define-fun dynamic_invariant3 ((temp___expr_297 Int)
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool)
  (temp___do_typ_inv_296 Bool)) Bool (=>
                                     (or (= temp___is_init_293 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range6 temp___expr_297)))

(declare-const r250s (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun is_empty2 (us_rep4) Bool)

(declare-fun is_empty__function_guard2 (Bool us_rep4) Bool)

(define-fun dynamic_invariant4 ((temp___expr_377 us_rep4)
  (temp___is_init_373 Bool) (temp___skip_constant_374 Bool)
  (temp___do_toplevel_375 Bool)
  (temp___do_typ_inv_376 Bool)) Bool (=>
                                     (not (= temp___skip_constant_374 true))
                                     (in_range5 200 r250s temp___expr_377)))

(define-fun default_initial_assumption3 ((temp___expr_380 us_rep4)
  (temp___skip_top_level_381 Bool)) Bool (and
                                         (and
                                         (= (to_rep1
                                            (rec__automation_request_validation__int64_operating_region_maps__map__capacity
                                            (us_split_discrs5
                                            temp___expr_380))) 200)
                                         (= (to_rep2
                                            (rec__automation_request_validation__int64_operating_region_maps__map__modulus
                                            (us_split_discrs5
                                            temp___expr_380))) r250s))
                                         (=>
                                         (not
                                         (= temp___skip_top_level_381 true))
                                         (= (is_empty2 temp___expr_380) true))))

(define-fun dynamic_invariant5 ((temp___expr_363 (_ BitVec 32))
  (temp___is_init_359 Bool) (temp___skip_constant_360 Bool)
  (temp___do_toplevel_361 Bool) (temp___do_typ_inv_362 Bool)) Bool true)

(define-fun dynamic_invariant6 ((temp___expr_209 Int)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)
  (temp___do_typ_inv_208 Bool)) Bool (=>
                                     (or (= temp___is_init_205 true)
                                     (<= 0 2147483647)) (in_range3
                                     temp___expr_209)))

(define-fun dynamic_invariant7 ((temp___expr_430 us_rep6)
  (temp___is_init_426 Bool) (temp___skip_constant_427 Bool)
  (temp___do_toplevel_428 Bool)
  (temp___do_typ_inv_429 Bool)) Bool (and (in_range2 200
                                     (rec__spark_boundary__operatingregionareas__keepinareas
                                     (us_split_fields7 temp___expr_430)))
                                     (in_range2 200
                                     (rec__spark_boundary__operatingregionareas__keepoutareas
                                     (us_split_fields7 temp___expr_430)))))

(define-fun default_initial_assumption4 ((temp___expr_433 us_rep6)
  (temp___skip_top_level_434 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            (rec__spark_boundary__operatingregionareas__keepinareas
                                            (us_split_fields7
                                            temp___expr_433))))) 200)
                                         (= (is_empty
                                            (rec__spark_boundary__operatingregionareas__keepinareas
                                            (us_split_fields7
                                            temp___expr_433))) true))
                                         (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            (rec__spark_boundary__operatingregionareas__keepoutareas
                                            (us_split_fields7
                                            temp___expr_433))))) 200)
                                         (= (is_empty
                                            (rec__spark_boundary__operatingregionareas__keepoutareas
                                            (us_split_fields7
                                            temp___expr_433))) true))))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= (- 1) (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq14 (extended_index extended_index) Bool)

(declare-const dummy14 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant8 ((temp___expr_264 Int)
  (temp___is_init_260 Bool) (temp___skip_constant_261 Bool)
  (temp___do_toplevel_262 Bool)
  (temp___do_typ_inv_263 Bool)) Bool (=>
                                     (or (= temp___is_init_260 true)
                                     (<= (- 1) 2147483647)) (in_range7
                                     temp___expr_264)))

(define-fun dynamic_invariant9 ((temp___expr_216 Int)
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool)
  (temp___do_typ_inv_215 Bool)) Bool (=>
                                     (or (= temp___is_init_212 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_216)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

(define-fun capacity ((container us_rep)) Int (to_rep
                                              (rec__common_formal_containers__int64_vects__vector__capacity
                                              (us_split_discrs1 container))))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard1 (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length1 container)))
     (and (<= result (capacity container)) (dynamic_invariant9 result true
     false true true))) :pattern ((length1 container)) )))

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun oeq1 ((left us_rep2)
  (right us_rep2)) Bool (and (= (length left) (length right)) (ite (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 0 n)
                                                                   (<= n 
                                                                   (last
                                                                   left)))
                                                                   (= 
                                                                   (get left
                                                                   n) 
                                                                   (get right
                                                                   n))))
                                                              true false)))

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq6 a b) (oeq1 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption5 ((temp___expr_279 us_rep2)
  (temp___skip_top_level_280 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_280 true))
                                         (= (length temp___expr_279) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length (model1 container)) (length1 container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length1 container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 9223372036854775808) (element_typeqtint i))
  (<= (element_typeqtint i) 9223372036854775807))))

(define-fun in_range8 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq15 (element_type element_type) Bool)

(declare-const dummy15 element_type)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref2)) element_type 
  (element_type__content2 a))

(define-fun dynamic_invariant10 ((temp___expr_304 Int)
  (temp___is_init_300 Bool) (temp___skip_constant_301 Bool)
  (temp___do_toplevel_302 Bool)
  (temp___do_typ_inv_303 Bool)) Bool (=>
                                     (or (= temp___is_init_300 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range8 temp___expr_304)))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 0 (index_typeqtint i)) (<= (index_typeqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq16 (index_type index_type) Bool)

(declare-const dummy16 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant11 ((temp___expr_255 Int)
  (temp___is_init_251 Bool) (temp___skip_constant_252 Bool)
  (temp___do_toplevel_253 Bool)
  (temp___do_typ_inv_254 Bool)) Bool (=>
                                     (or (= temp___is_init_251 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_255)))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= (- 1) (extended_indexqtint1 i))
  (<= (extended_indexqtint1 i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= (- 1) x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq17 (extended_index1 extended_index1) Bool)

(declare-const dummy17 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant12 ((temp___expr_271 Int)
  (temp___is_init_267 Bool) (temp___skip_constant_268 Bool)
  (temp___do_toplevel_269 Bool)
  (temp___do_typ_inv_270 Bool)) Bool (=>
                                     (or (= temp___is_init_267 true)
                                     (<= (- 1) 2147483647)) (in_range10
                                     temp___expr_271)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length container)))
     (and (<= (+ (- 1) result) 2147483647) (dynamic_invariant6 result true
     false true true))) :pattern ((length container)) )))

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= (- 9223372036854775808) (element_typeqtint1 i))
  (<= (element_typeqtint1 i) 9223372036854775807))))

(define-fun in_range11 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                      (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq18 (element_type1 element_type1) Bool)

(declare-const dummy18 element_type1)

(declare-datatypes ((element_type__ref3 0))
(((element_type__refqtmk3 (element_type__content3 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref3)) element_type1 
  (element_type__content3 a))

(define-fun dynamic_invariant13 ((temp___expr_311 Int)
  (temp___is_init_307 Bool) (temp___skip_constant_308 Bool)
  (temp___do_toplevel_309 Bool)
  (temp___do_typ_inv_310 Bool)) Bool (=>
                                     (or (= temp___is_init_307 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range11 temp___expr_311)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant12 position true true true true)
     (and (<= 0 position) (<= position (last container))))
     (dynamic_invariant13 (get container position) true false true true)) :pattern (
  (get container position)) ))))

(define-fun equivalent_elements ((left Int)
  (right Int)) Bool (and (not (< left right)) (not (< right left))))

(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)

(declare-fun length3 (us_rep1) Int)

(declare-fun length__function_guard2 (Int us_rep1) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length3 container)))
     (and
     (<= result (to_rep1
                (rec__common_formal_containers__int64_sets__set__capacity
                (us_split_discrs3 container))))
     (dynamic_invariant6 result true false true true))) :pattern ((length3
                                                                  container)) )))

(declare-fun length4 (us_rep3) Int)

(declare-fun length__function_guard3 (Int us_rep3) Bool)

(declare-fun is_empty3 (us_rep3) Bool)

(declare-fun is_empty__function_guard3 (Bool us_rep3) Bool)

(define-fun default_initial_assumption6 ((temp___expr_332 us_rep3)
  (temp___skip_top_level_333 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_333 true))
                                         (= (is_empty3 temp___expr_332) true)))

;; model__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length4 (model2 container)) (length3 container)) :pattern ((model2
                                                                    container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty1 container) true) (= (length3 container) 0)) :pattern (
  (is_empty1 container)) )))

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= (- 9223372036854775808) (element_typeqtint2 i))
  (<= (element_typeqtint2 i) 9223372036854775807))))

(define-fun in_range12 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                      (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq19 (element_type2 element_type2) Bool)

(declare-const dummy19 element_type2)

(declare-datatypes ((element_type__ref4 0))
(((element_type__refqtmk4 (element_type__content4 element_type2)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref4)) element_type2 
  (element_type__content4 a))

(define-fun dynamic_invariant14 ((temp___expr_343 Int)
  (temp___is_init_339 Bool) (temp___skip_constant_340 Bool)
  (temp___do_toplevel_341 Bool)
  (temp___do_typ_inv_342 Bool)) Bool (=>
                                     (or (= temp___is_init_339 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range12 temp___expr_343)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((item Int))
  (! (=> (dynamic_invariant14 item true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((e Int))
     (and (and (in_range12 e) (= (contains container e) true))
     (= (equivalent_elements e item) true)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (dynamic_invariant6 (length4 container)
  true false true true) :pattern ((length4 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (is_empty3 container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range12 item) (= (contains container item) true)))))
     (= (= result true) (= (length4 container) 0)))) :pattern ((is_empty3
                                                               container)) )))

(declare-fun length5 (us_rep4) Int)

(declare-fun length__function_guard4 (Int us_rep4) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length5 container)))
     (and
     (<= result (to_rep1
                (rec__automation_request_validation__int64_operating_region_maps__map__capacity
                (us_split_discrs5 container))))
     (dynamic_invariant6 result true false true true))) :pattern ((length5
                                                                  container)) )))

(declare-fun is_empty4 (us_rep5) Bool)

(declare-fun is_empty__function_guard4 (Bool us_rep5) Bool)

(declare-fun length6 (us_rep5) Int)

(declare-fun length__function_guard5 (Int us_rep5) Bool)

(define-fun default_initial_assumption7 ((temp___expr_397 us_rep5)
  (temp___skip_top_level_398 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_398 true))
                                         (and
                                         (= (is_empty4 temp___expr_397) true)
                                         (= (length6 temp___expr_397) 0))))

;; model__post_axiom
  (assert true)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (= (= (is_empty2 container) true) (= (length5 container) 0)) :pattern (
  (is_empty2 container)) )))

(declare-fun default_modulus (Int) (_ BitVec 32))

(declare-fun default_modulus__function_guard ((_ BitVec 32) Int) Bool)

;; default_modulus__post_axiom
  (assert
  (forall ((capacity1 Int))
  (! (=> (dynamic_invariant6 capacity1 true true true true)
     (dynamic_invariant5 (default_modulus capacity1) true false true true)) :pattern (
  (default_modulus capacity1)) )))

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= (- 9223372036854775808) (key_typeqtint i))
  (<= (key_typeqtint i) 9223372036854775807))))

(define-fun in_range13 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                      (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq20 (key_type key_type) Bool)

(declare-const dummy20 key_type)

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content key_type)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref)) key_type 
  (key_type__content a))

(define-fun dynamic_invariant15 ((temp___expr_408 Int)
  (temp___is_init_404 Bool) (temp___skip_constant_405 Bool)
  (temp___do_toplevel_406 Bool)
  (temp___do_typ_inv_407 Bool)) Bool (=>
                                     (or (= temp___is_init_404 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range13 temp___expr_408)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key Int))
  (! (=> (dynamic_invariant15 key true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k Int))
     (and (and (in_range13 k) (= (has_key container k) true)) (= k key)))
     (= (has_key container key) true)))) :pattern ((has_key container key)) ))))

(declare-fun witness (us_rep5 Int) Int)

(declare-fun witness__function_guard (Int us_rep5 Int) Bool)

(declare-fun w_get (us_rep5 Int) us_rep6)

(declare-fun w_get__function_guard (us_rep6 us_rep5 Int) Bool)

(define-fun dynamic_invariant16 ((temp___expr_468 us_rep6)
  (temp___is_init_464 Bool) (temp___skip_constant_465 Bool)
  (temp___do_toplevel_466 Bool)
  (temp___do_typ_inv_467 Bool)) Bool (and (in_range2 200
                                     (rec__spark_boundary__operatingregionareas__keepinareas
                                     (us_split_fields7 temp___expr_468)))
                                     (in_range2 200
                                     (rec__spark_boundary__operatingregionareas__keepoutareas
                                     (us_split_fields7 temp___expr_468)))))

(define-fun default_initial_assumption8 ((temp___expr_471 us_rep6)
  (temp___skip_top_level_472 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            (rec__spark_boundary__operatingregionareas__keepinareas
                                            (us_split_fields7
                                            temp___expr_471))))) 200)
                                         (= (is_empty
                                            (rec__spark_boundary__operatingregionareas__keepinareas
                                            (us_split_fields7
                                            temp___expr_471))) true))
                                         (and
                                         (= (to_rep
                                            (rec__common_formal_containers__int64_vects__vector__capacity
                                            (us_split_discrs1
                                            (rec__spark_boundary__operatingregionareas__keepoutareas
                                            (us_split_fields7
                                            temp___expr_471))))) 200)
                                         (= (is_empty
                                            (rec__spark_boundary__operatingregionareas__keepoutareas
                                            (us_split_fields7
                                            temp___expr_471))) true))))

;; get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant15 key true true true true)
     (= (has_key container key) true))
     (let ((result (get1 container key)))
     (and
     (=> (= (distinct 1 0) true)
     (and
     (= (bool_eq6 result (w_get container (witness container key))) true)
     (forall ((k Int))
     (=> (and (in_range13 k) (= (has_key container k) true))
     (= (= k key) (= (witness container key) (witness container k)))))))
     (dynamic_invariant16 result true false true true)))) :pattern ((get1
                                                                    container
                                                                    key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep5)) (! (dynamic_invariant6 (length6 container)
  true false true true) :pattern ((length6 container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep5))
  (! (= (= (is_empty4 container) true)
     (forall ((key Int))
     (not (and (in_range13 key) (= (has_key container key) true))))) :pattern (
  (is_empty4 container)) )))

(declare-fun has_witness (us_rep5 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep5 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((key Int))
  (! (=>
     (and (dynamic_invariant15 key true true true true)
     (= (has_key container key) true))
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant6 result
     true false true true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep5))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant6 witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant16
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

;; r250s__def_axiom
  (assert (= r250s (default_modulus 200)))

(assert
;; defqtvc
 ;; File "automation_request_validation-spark.ads", line 14, characters 0-0
  (not
  (=> (dynamic_invariant3 operating_region true false true true)
  (=> (dynamic_invariant4 operating_regions true false true true)
  (=> (dynamic_invariant1 keepin_zones_ids true false true true)
  (=> (dynamic_invariant1 keepout_zones_ids true false true true)
  (=> (not (= operating_region 0))
  (let ((o operating_region))
  (let ((o1 operating_regions))
  (let ((o2 (contains2 o1 o)))
  (=> (= (= o2 true) (= (has_key (model3 o1) o) true))
  (=>
  (or (not (= o2 true))
  (let ((o3 operating_region))
  (let ((o4 operating_regions))
  (let ((o5 (element1 o4 o3)))
  (and (dynamic_invariant2 o5 true false true true)
  (= (bool_eq6 o5 (get1 (model3 o4) o3)) true))))))
  (let ((o3 (ite (= o2 true)
            (all_elements_in
            (rec__spark_boundary__operatingregionareas__keepinareas
            (us_split_fields7 (element1 operating_regions operating_region)))
            keepin_zones_ids) false)))
  (=>
  (or (not (= o2 true))
  (let ((o4 keepin_zones_ids))
  (let ((o5 (rec__spark_boundary__operatingregionareas__keepinareas
            (us_split_fields7 (element1 operating_regions operating_region)))))
  (and (all_elements_in__function_guard o3 o5 o4)
  (= (= o3 true)
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j (last_index o5)))
  (= (contains1 o4 (element o5 j)) true))))))))
  (=> (= o3 true) (= (contains2 operating_regions operating_region) true))))))))))))))))
(check-sat)
