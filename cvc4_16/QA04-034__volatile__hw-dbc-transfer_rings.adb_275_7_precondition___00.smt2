(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2nat x)
                                            (- (- 18446744073709551616 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvshl v (bvurem n (_ bv64 64))) (bvlshr v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 64)) (n (_ BitVec 64)))
  (= (bvor (bvlshr v (bvurem n (_ bv64 64))) (bvshl v (bvsub (_ bv64 64) (bvurem n (_ bv64 64))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (= (nth_bv1 x i) true)
  (not (= (bvand (bvlshr x i) #x0000000000000001) #x0000000000000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 64)) (i (_ BitVec 64)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 64)) (i Int))
  (=> (and (<= 0 i) (< i 18446744073709551616))
  (= (nth_bv1 x ((_ int2bv 64) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (let ((mask (bvshl (bvsub (bvshl #x0000000000000001 n) #x0000000000000001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 64)) (b (_ BitVec 64)) (i (_ BitVec 64))
  (n (_ BitVec 64)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2nat x)
                                            (- (- 4294967296 (bv2nat x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvlshr x n) (lsr2 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvashr x n) (asr2 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvshl x n) (lsl2 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvshl v (bvurem n (_ bv32 32))) (bvlshr v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_left3 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 32)) (n (_ BitVec 32)))
  (= (bvor (bvlshr v (bvurem n (_ bv32 32))) (bvshl v (bvsub (_ bv32 32) (bvurem n (_ bv32 32))))) 
  (rotate_right3 v (bv2nat n)))))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (= (nth_bv2 x i) true)
  (not (= (bvand (bvlshr x i) #x00000001) #x00000000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 32)) (i (_ BitVec 32)))
  (= (nth2 x (bv2nat i)) (nth_bv2 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 32)) (i Int))
  (=> (and (<= 0 i) (< i 4294967296))
  (= (nth_bv2 x ((_ int2bv 32) i)) (nth2 x i)))))

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (let ((mask (bvshl (bvsub (bvshl #x00000001 n) #x00000001) i)))
  (= (eq_sub_bv2 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 32)) (b (_ BitVec 32)) (i (_ BitVec 32))
  (n (_ BitVec 32)))
  (= (eq_sub2 a b (bv2nat i) (bv2nat n)) (eq_sub_bv2 a b i n))))

(declare-datatypes ((t__ref2 0))
(((t__refqtmk2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort word64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (word64 word64) Bool)

(declare-const dummy1 word64)

(declare-datatypes ((word64__ref 0))
(((word64__refqtmk (word64__content word64)))))
(define-fun word64__ref_word64__content__projection ((a word64__ref)) word64 
  (word64__content a))

(declare-fun to_rep (word64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) word64)

;; inversion_axiom
  (assert
  (forall ((x word64)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x word64)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x word64)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (word32 word32) Bool)

(declare-const dummy2 word32)

(declare-datatypes ((word32__ref 0))
(((word32__refqtmk (word32__content word32)))))
(define-fun word32__ref_word32__content__projection ((a word32__ref)) word32 
  (word32__content a))

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int5 ((x word32)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range2
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__ada___ada___hw__dbc__trbs__t__parameter word64)(rec__ada___ada___hw__dbc__trbs__t__status word32)(rec__ada___ada___hw__dbc__trbs__t__control word32)))))
(define-fun us_split_fields_rec__ada___ada___hw__dbc__trbs__t__parameter__projection ((a us_split_fields)) word64 
  (rec__ada___ada___hw__dbc__trbs__t__parameter a))

(define-fun us_split_fields_rec__ada___ada___hw__dbc__trbs__t__status__projection ((a us_split_fields)) word32 
  (rec__ada___ada___hw__dbc__trbs__t__status a))

(define-fun us_split_fields_rec__ada___ada___hw__dbc__trbs__t__control__projection ((a us_split_fields)) word32 
  (rec__ada___ada___hw__dbc__trbs__t__control a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__ada___ada___hw__dbc__trbs__t__parameter
                           (us_split_fields1 a))) (to_rep
                                                  (rec__ada___ada___hw__dbc__trbs__t__parameter
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ada___ada___hw__dbc__trbs__t__status
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___ada___hw__dbc__trbs__t__status
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__ada___ada___hw__dbc__trbs__t__control
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___ada___hw__dbc__trbs__t__control
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const ada___ada___hw__dbc__trbs__t__parameter__first__bit Int)

(declare-const ada___ada___hw__dbc__trbs__t__parameter__last__bit Int)

(declare-const ada___ada___hw__dbc__trbs__t__parameter__position Int)

;; ada___ada___hw__dbc__trbs__t__parameter__first__bit_axiom
  (assert (<= 0 ada___ada___hw__dbc__trbs__t__parameter__first__bit))

;; ada___ada___hw__dbc__trbs__t__parameter__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__trbs__t__parameter__first__bit ada___ada___hw__dbc__trbs__t__parameter__last__bit))

;; ada___ada___hw__dbc__trbs__t__parameter__position_axiom
  (assert (<= 0 ada___ada___hw__dbc__trbs__t__parameter__position))

(declare-const ada___ada___hw__dbc__trbs__t__status__first__bit Int)

(declare-const ada___ada___hw__dbc__trbs__t__status__last__bit Int)

(declare-const ada___ada___hw__dbc__trbs__t__status__position Int)

;; ada___ada___hw__dbc__trbs__t__status__first__bit_axiom
  (assert (<= 0 ada___ada___hw__dbc__trbs__t__status__first__bit))

;; ada___ada___hw__dbc__trbs__t__status__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__trbs__t__status__first__bit ada___ada___hw__dbc__trbs__t__status__last__bit))

;; ada___ada___hw__dbc__trbs__t__status__position_axiom
  (assert (<= 0 ada___ada___hw__dbc__trbs__t__status__position))

(declare-const ada___ada___hw__dbc__trbs__t__control__first__bit Int)

(declare-const ada___ada___hw__dbc__trbs__t__control__last__bit Int)

(declare-const ada___ada___hw__dbc__trbs__t__control__position Int)

;; ada___ada___hw__dbc__trbs__t__control__first__bit_axiom
  (assert (<= 0 ada___ada___hw__dbc__trbs__t__control__first__bit))

;; ada___ada___hw__dbc__trbs__t__control__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__trbs__t__control__first__bit ada___ada___hw__dbc__trbs__t__control__last__bit))

;; ada___ada___hw__dbc__trbs__t__control__position_axiom
  (assert (<= 0 ada___ada___hw__dbc__trbs__t__control__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t__ref3 0))
(((t__refqtmk3 (t__content3 us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref3)) us_rep (t__content3
                                                               a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_157 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_157)
                                    (bvule temp___idx_157 a__last))
                                    (= (bool_eq (select a temp___idx_157)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_157))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_157 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_157) (bvule temp___idx_157 a__last))
  (= (bool_eq (select a temp___idx_157)
     (select b (bvadd (bvsub b__first a__first) temp___idx_157))) true))))))))

(declare-const dummy4 (Array (_ BitVec 8) us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 ((Array (_ BitVec 8) us_rep)
  (Array (_ BitVec 8) us_rep)) Bool)

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int (Array (_ BitVec 8) us_rep)))))))
(declare-fun slide1 ((Array Int (Array (_ BitVec 8) us_rep)) Int
  Int) (Array Int (Array (_ BitVec 8) us_rep)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array (_ BitVec 8) us_rep))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array (_ BitVec 8) us_rep))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int (Array (_ BitVec 8) us_rep)))
  (a__first Int) (a__last Int) (b (Array Int (Array (_ BitVec 8) us_rep)))
  (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_158 Int))
                           (=>
                           (and (<= a__first temp___idx_158)
                           (<= temp___idx_158 a__last))
                           (= (bool_eq1 (select a temp___idx_158) #x00 #x3F
                              (select b (+ (- b__first a__first) temp___idx_158))
                              #x00 #x3F) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array (_ BitVec 8) us_rep)))
  (b (Array Int (Array (_ BitVec 8) us_rep))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_158 Int))
  (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last))
  (= (bool_eq1 (select a temp___idx_158) #x00 #x3F
     (select b (+ (- b__first a__first) temp___idx_158)) #x00 #x3F) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort bit 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x01)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq5 (bit bit) Bool)

(declare-const dummy5 bit)

(declare-datatypes ((bit__ref 0))
(((bit__refqtmk (bit__content bit)))))
(define-fun bit__ref_bit__content__projection ((a bit__ref)) bit (bit__content
                                                                 a))

(declare-fun to_rep2 (bit) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) bit)

;; inversion_axiom
  (assert
  (forall ((x bit)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x bit)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x02)))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int6 ((x bit)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x bit)) (! (in_range_int (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int bit))))))
(declare-fun slide2 ((Array Int bit) Int Int) (Array Int bit))

;; slide_eq
  (assert
  (forall ((a (Array Int bit)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bit)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int bit)) (a__first Int) (a__last Int)
  (b (Array Int bit)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_160 Int))
                           (=>
                           (and (<= a__first temp___idx_160)
                           (<= temp___idx_160 a__last))
                           (= (to_rep2 (select a temp___idx_160)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_160)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bit)) (b (Array Int bit)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_160 Int))
  (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last))
  (= (to_rep2 (select a temp___idx_160)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_160)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort ring_range 0)

(define-fun in_range3 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x3F)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 63)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq6 (ring_range ring_range) Bool)

(declare-const dummy6 ring_range)

(declare-datatypes ((ring_range__ref 0))
(((ring_range__refqtmk (ring_range__content ring_range)))))
(define-fun ring_range__ref_ring_range__content__projection ((a ring_range__ref)) ring_range 
  (ring_range__content a))

(declare-fun to_rep3 (ring_range) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) ring_range)

;; inversion_axiom
  (assert
  (forall ((x ring_range))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x ring_range)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x40)))
     (=> (in_range3 y) (= (to_rep3 (of_rep3 x)) y))) :pattern ((to_rep3
                                                               (of_rep3 x))) )))

(define-fun to_int7 ((x ring_range)) Int (bv2nat (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x ring_range)) (! (in_range_int1
  (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue ring_range)(rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue ring_range)(rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__full Bool)(rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle ring_range)(rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun Bool)))))
(define-fun us_split_fields_rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__projection ((a us_split_fields2)) ring_range 
  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue a))

(define-fun us_split_fields_rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__projection ((a us_split_fields2)) ring_range 
  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue a))

(define-fun us_split_fields_rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__projection ((a us_split_fields2)) Bool 
  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__full a))

(define-fun us_split_fields_rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__projection ((a us_split_fields2)) ring_range 
  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle a))

(define-fun us_split_fields_rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__projection ((a us_split_fields2)) Bool 
  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep3
                            (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue
                                                   (us_split_fields3 b))))
                         (= (to_rep3
                            (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue
                                                   (us_split_fields3 b)))))
                         (and
                         (and
                         (= (ite (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__full
                                 (us_split_fields3 a)) 1 0) (ite (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__full
                                                                 (us_split_fields3
                                                                 b)) 1 0))
                         (= (to_rep3
                            (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle
                                                   (us_split_fields3 b)))))
                         (= (ite (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun
                                 (us_split_fields3 a)) 1 0) (ite (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun
                                                                 (us_split_fields3
                                                                 b)) 1 0))))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__last__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__position Int)

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__first__bit 
  ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__last__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__position_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue__position))

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__last__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__position Int)

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__first__bit 
  ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__last__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__position_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue__position))

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__first__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__last__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__position Int)

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__first__bit_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__first__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__first__bit 
  ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__last__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__position_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__full__position))

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__last__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__position Int)

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__first__bit 
  ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__last__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__position_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle__position))

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__last__bit Int)

(declare-const ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__position Int)

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__last__bit_axiom
  (assert
  (< ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__first__bit 
  ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__last__bit))

;; ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__position_axiom
  (assert
  (<= 0 ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ((transfer_pointers__ref 0))
(((transfer_pointers__refqtmk (transfer_pointers__content us_rep1)))))
(define-fun transfer_pointers__ref_transfer_pointers__content__projection ((a transfer_pointers__ref)) us_rep1 
  (transfer_pointers__content a))

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 (Array Int us_rep1))))))
(declare-fun slide3 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_161 Int))
                           (=>
                           (and (<= a__first temp___idx_161)
                           (<= temp___idx_161 a__last))
                           (= (bool_eq4 (select a temp___idx_161)
                              (select b (+ (- b__first a__first) temp___idx_161))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_161 Int))
  (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last))
  (= (bool_eq4 (select a temp___idx_161)
     (select b (+ (- b__first a__first) temp___idx_161))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const ep Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const length Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const buf_addr (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const c65b (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant1 ((temp___expr_174 (_ BitVec 64))
  (temp___is_init_170 Bool) (temp___skip_constant_171 Bool)
  (temp___do_toplevel_172 Bool) (temp___do_typ_inv_173 Bool)) Bool true)

(declare-sort endpoint_range 0)

(declare-fun endpoint_rangeqtint (endpoint_range) Int)

;; endpoint_range'axiom
  (assert
  (forall ((i endpoint_range))
  (and (<= 2 (endpoint_rangeqtint i)) (<= (endpoint_rangeqtint i) 3))))

(define-fun in_range4 ((x Int)) Bool (and (<= 2 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (endpoint_range endpoint_range) Bool)

(declare-const dummy8 endpoint_range)

(declare-datatypes ((endpoint_range__ref 0))
(((endpoint_range__refqtmk (endpoint_range__content endpoint_range)))))
(define-fun endpoint_range__ref_endpoint_range__content__projection ((a endpoint_range__ref)) endpoint_range 
  (endpoint_range__content a))

(define-fun dynamic_invariant2 ((temp___expr_181 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (<= 2 3)) (in_range4 temp___expr_181)))

(define-fun dynamic_invariant3 ((temp___expr_235 (_ BitVec 8))
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (or (= temp___is_init_231 true)
                                     (bvule #x00 #x3F)) (in_range3
                                     temp___expr_235)))

(define-fun dynamic_invariant4 ((temp___expr_309 (_ BitVec 8))
  (temp___is_init_305 Bool) (temp___skip_constant_306 Bool)
  (temp___do_toplevel_307 Bool)
  (temp___do_typ_inv_308 Bool)) Bool (=>
                                     (or (= temp___is_init_305 true)
                                     (bvule #x00 #x01)) (in_range2
                                     temp___expr_309)))

(assert
;; defqtvc
 ;; File "hw-dbc-transfer_rings.ads", line 59, characters 0-0
  (not
  (forall ((pointers (Array Int us_rep1)) (c66b (_ BitVec 8))
  (ada___ada___hw__dbc__transfer_rings__requeue_data_trb__C65b__assume (_ BitVec 8))
  (o (_ BitVec 8)) (c66b1 (_ BitVec 8)))
  (=> (dynamic_invariant2 ep true false true true)
  (=> (dynamic_invariant length true false true true)
  (=> (dynamic_invariant1 buf_addr true false true true)
  (=> (<= length 65536)
  (=>
  (= (bvudiv buf_addr #x0000000000010000) (bvudiv (bvsub (bvadd buf_addr ((_ int2bv 64) 
  length)) #x0000000000000001) #x0000000000010000))
  (=>
  (bvule (bvsub (bvadd buf_addr ((_ int2bv 64) length)) #x0000000000000001) #xFFFFFFFFFFFFFFFF)
  (=>
  (= (to_rep3
     (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__enqueue
     (us_split_fields3 (select pointers ep)))) ada___ada___hw__dbc__transfer_rings__requeue_data_trb__C65b__assume)
  (=>
  (= ada___ada___hw__dbc__transfer_rings__requeue_data_trb__C65b__assume 
  c65b)
  (=> (dynamic_invariant3 c65b true false true true)
  (=> (dynamic_invariant3 c66b false false true true)
  (=> (ite (= c65b #x00) (= o #x02) (= o #x01))
  (=> (= c66b1 (bvurem (bvsub c65b o) #x40))
  (let ((q_ (us_split_fields3 (select pointers ep))))
  (forall ((o1 ring_range))
  (=> (= (to_rep3 o1) c66b1)
  (forall ((pointers1 (Array Int us_rep1)))
  (=>
  (= pointers1 (store pointers ep (us_repqtmk1
                                  (us_split_fieldsqtmk1 o1
                                  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__dequeue
                                  q_)
                                  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__full
                                  q_)
                                  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__toggle
                                  q_)
                                  (rec__ada___ada___hw__dbc__transfer_rings__transfer_pointers__overrun
                                  q_)))))
  (<= length 65536)))))))))))))))))))))
(check-sat)
