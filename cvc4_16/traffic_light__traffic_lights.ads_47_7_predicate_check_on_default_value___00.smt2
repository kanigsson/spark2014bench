(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((time__ref 0))
(((time__refqtmk (time__content us_rep)))))
(define-fun time__ref_time__content__projection ((a time__ref)) us_rep 
  (time__content a))

(declare-const time_first us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__traffic_lights__lights_state__vehicles_green Bool)(rec__traffic_lights__lights_state__vehicles_yellow Bool)(rec__traffic_lights__lights_state__vehicles_red Bool)(rec__traffic_lights__lights_state__pedestrians_green Bool)(rec__traffic_lights__lights_state__pedestrians_red Bool)))))
(define-fun us_split_fields_rec__traffic_lights__lights_state__vehicles_green__projection ((a us_split_fields)) Bool 
  (rec__traffic_lights__lights_state__vehicles_green a))

(define-fun us_split_fields_rec__traffic_lights__lights_state__vehicles_yellow__projection ((a us_split_fields)) Bool 
  (rec__traffic_lights__lights_state__vehicles_yellow a))

(define-fun us_split_fields_rec__traffic_lights__lights_state__vehicles_red__projection ((a us_split_fields)) Bool 
  (rec__traffic_lights__lights_state__vehicles_red a))

(define-fun us_split_fields_rec__traffic_lights__lights_state__pedestrians_green__projection ((a us_split_fields)) Bool 
  (rec__traffic_lights__lights_state__pedestrians_green a))

(define-fun us_split_fields_rec__traffic_lights__lights_state__pedestrians_red__projection ((a us_split_fields)) Bool 
  (rec__traffic_lights__lights_state__pedestrians_red a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (ite (rec__traffic_lights__lights_state__vehicles_green
                                 (us_split_fields1 a)) 1 0) (ite (rec__traffic_lights__lights_state__vehicles_green
                                                                 (us_split_fields1
                                                                 b)) 1 0))
                         (= (ite (rec__traffic_lights__lights_state__vehicles_yellow
                                 (us_split_fields1 a)) 1 0) (ite (rec__traffic_lights__lights_state__vehicles_yellow
                                                                 (us_split_fields1
                                                                 b)) 1 0)))
                         (and
                         (and
                         (= (ite (rec__traffic_lights__lights_state__vehicles_red
                                 (us_split_fields1 a)) 1 0) (ite (rec__traffic_lights__lights_state__vehicles_red
                                                                 (us_split_fields1
                                                                 b)) 1 0))
                         (= (ite (rec__traffic_lights__lights_state__pedestrians_green
                                 (us_split_fields1 a)) 1 0) (ite (rec__traffic_lights__lights_state__pedestrians_green
                                                                 (us_split_fields1
                                                                 b)) 1 0)))
                         (= (ite (rec__traffic_lights__lights_state__pedestrians_red
                                 (us_split_fields1 a)) 1 0) (ite (rec__traffic_lights__lights_state__pedestrians_red
                                                                 (us_split_fields1
                                                                 b)) 1 0))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const traffic_lights__lights_state__vehicles_green__first__bit Int)

(declare-const traffic_lights__lights_state__vehicles_green__last__bit Int)

(declare-const traffic_lights__lights_state__vehicles_green__position Int)

;; traffic_lights__lights_state__vehicles_green__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_green__first__bit))

;; traffic_lights__lights_state__vehicles_green__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__vehicles_green__first__bit traffic_lights__lights_state__vehicles_green__last__bit))

;; traffic_lights__lights_state__vehicles_green__position_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_green__position))

(declare-const traffic_lights__lights_state__vehicles_yellow__first__bit Int)

(declare-const traffic_lights__lights_state__vehicles_yellow__last__bit Int)

(declare-const traffic_lights__lights_state__vehicles_yellow__position Int)

;; traffic_lights__lights_state__vehicles_yellow__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_yellow__first__bit))

;; traffic_lights__lights_state__vehicles_yellow__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__vehicles_yellow__first__bit traffic_lights__lights_state__vehicles_yellow__last__bit))

;; traffic_lights__lights_state__vehicles_yellow__position_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_yellow__position))

(declare-const traffic_lights__lights_state__vehicles_red__first__bit Int)

(declare-const traffic_lights__lights_state__vehicles_red__last__bit Int)

(declare-const traffic_lights__lights_state__vehicles_red__position Int)

;; traffic_lights__lights_state__vehicles_red__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_red__first__bit))

;; traffic_lights__lights_state__vehicles_red__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__vehicles_red__first__bit traffic_lights__lights_state__vehicles_red__last__bit))

;; traffic_lights__lights_state__vehicles_red__position_axiom
  (assert (<= 0 traffic_lights__lights_state__vehicles_red__position))

(declare-const traffic_lights__lights_state__pedestrians_green__first__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_green__last__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_green__position Int)

;; traffic_lights__lights_state__pedestrians_green__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_green__first__bit))

;; traffic_lights__lights_state__pedestrians_green__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__pedestrians_green__first__bit traffic_lights__lights_state__pedestrians_green__last__bit))

;; traffic_lights__lights_state__pedestrians_green__position_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_green__position))

(declare-const traffic_lights__lights_state__pedestrians_red__first__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_red__last__bit Int)

(declare-const traffic_lights__lights_state__pedestrians_red__position Int)

;; traffic_lights__lights_state__pedestrians_red__first__bit_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_red__first__bit))

;; traffic_lights__lights_state__pedestrians_red__last__bit_axiom
  (assert
  (< traffic_lights__lights_state__pedestrians_red__first__bit traffic_lights__lights_state__pedestrians_red__last__bit))

;; traffic_lights__lights_state__pedestrians_red__position_axiom
  (assert (<= 0 traffic_lights__lights_state__pedestrians_red__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ((lights_state__ref 0))
(((lights_state__refqtmk (lights_state__content us_rep1)))))
(define-fun lights_state__ref_lights_state__content__projection ((a lights_state__ref)) us_rep1 
  (lights_state__content a))

(declare-datatypes ((valid_lights_state__ref 0))
(((valid_lights_state__refqtmk (valid_lights_state__content us_rep1)))))
(define-fun valid_lights_state__ref_valid_lights_state__content__projection ((a valid_lights_state__ref)) us_rep1 
  (valid_lights_state__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__traffic_lights__traffic_lightT__last_state_change us_rep)(rec__traffic_lights__traffic_lightT__change_state Bool)(rec__traffic_lights__traffic_lightT__lights us_rep1)))))
(define-fun us_split_fields_rec__traffic_lights__traffic_lightT__last_state_change__projection ((a us_split_fields2)) us_rep 
  (rec__traffic_lights__traffic_lightT__last_state_change a))

(define-fun us_split_fields_rec__traffic_lights__traffic_lightT__change_state__projection ((a us_split_fields2)) Bool 
  (rec__traffic_lights__traffic_lightT__change_state a))

(define-fun us_split_fields_rec__traffic_lights__traffic_lightT__lights__projection ((a us_split_fields2)) us_rep1 
  (rec__traffic_lights__traffic_lightT__lights a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const traffic_lights__traffic_lightT__last_state_change__first__bit Int)

(declare-const traffic_lights__traffic_lightT__last_state_change__last__bit Int)

(declare-const traffic_lights__traffic_lightT__last_state_change__position Int)

;; traffic_lights__traffic_lightT__last_state_change__first__bit_axiom
  (assert
  (<= 0 traffic_lights__traffic_lightT__last_state_change__first__bit))

;; traffic_lights__traffic_lightT__last_state_change__last__bit_axiom
  (assert
  (< traffic_lights__traffic_lightT__last_state_change__first__bit traffic_lights__traffic_lightT__last_state_change__last__bit))

;; traffic_lights__traffic_lightT__last_state_change__position_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__last_state_change__position))

(declare-const traffic_lights__traffic_lightT__change_state__first__bit Int)

(declare-const traffic_lights__traffic_lightT__change_state__last__bit Int)

(declare-const traffic_lights__traffic_lightT__change_state__position Int)

;; traffic_lights__traffic_lightT__change_state__first__bit_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__change_state__first__bit))

;; traffic_lights__traffic_lightT__change_state__last__bit_axiom
  (assert
  (< traffic_lights__traffic_lightT__change_state__first__bit traffic_lights__traffic_lightT__change_state__last__bit))

;; traffic_lights__traffic_lightT__change_state__position_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__change_state__position))

(declare-const traffic_lights__traffic_lightT__lights__first__bit Int)

(declare-const traffic_lights__traffic_lightT__lights__last__bit Int)

(declare-const traffic_lights__traffic_lightT__lights__position Int)

;; traffic_lights__traffic_lightT__lights__first__bit_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__lights__first__bit))

;; traffic_lights__traffic_lightT__lights__last__bit_axiom
  (assert
  (< traffic_lights__traffic_lightT__lights__first__bit traffic_lights__traffic_lightT__lights__last__bit))

;; traffic_lights__traffic_lightT__lights__position_axiom
  (assert (<= 0 traffic_lights__traffic_lightT__lights__position))

(declare-fun user_eq2 (us_rep2 us_rep2) Bool)

(declare-datatypes ((traffic_lightT__ref 0))
(((traffic_lightT__refqtmk (traffic_lightT__content us_rep2)))))
(define-fun traffic_lightT__ref_traffic_lightT__content__projection ((a traffic_lightT__ref)) us_rep2 
  (traffic_lightT__content a))

(declare-fun valid_combination (us_rep1) Bool)

(declare-fun valid_combination__function_guard (Bool us_rep1) Bool)

;; temp___result_172'def
  (assert
  (forall ((temp___171 us_rep1)) (valid_combination__function_guard
  (valid_combination temp___171) temp___171)))

(define-fun dynamic_invariant ((temp___expr_170 us_rep1)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)
  (temp___do_typ_inv_169 Bool)) Bool (=> (= temp___do_toplevel_168 true)
                                     (= (valid_combination temp___expr_170) true)))

(define-fun default_initial_assumption ((temp___expr_173 us_rep1)
  (temp___skip_top_level_174 Bool)) Bool (and
                                         (and
                                         (= (rec__traffic_lights__lights_state__vehicles_green
                                            (us_split_fields1
                                            temp___expr_173)) (distinct 0 0))
                                         (= (rec__traffic_lights__lights_state__vehicles_yellow
                                            (us_split_fields1
                                            temp___expr_173)) (distinct 0 0)))
                                         (and
                                         (and
                                         (= (rec__traffic_lights__lights_state__vehicles_red
                                            (us_split_fields1
                                            temp___expr_173)) (distinct 1 0))
                                         (= (rec__traffic_lights__lights_state__pedestrians_green
                                            (us_split_fields1
                                            temp___expr_173)) (distinct 1 0)))
                                         (= (rec__traffic_lights__lights_state__pedestrians_red
                                            (us_split_fields1
                                            temp___expr_173)) (distinct 0 0)))))

;; temp___result_177'def
  (assert
  (forall ((temp___176 us_rep1)) (valid_combination__function_guard
  (valid_combination temp___176) temp___176)))

(define-fun dynamic_predicate ((temp___175 us_rep1)) Bool (= (valid_combination
                                                             temp___175) true))

(define-fun default_initial_assumption1 ((temp___expr_164 us_rep1)
  (temp___skip_top_level_165 Bool)) Bool (and
                                         (and
                                         (= (rec__traffic_lights__lights_state__vehicles_green
                                            (us_split_fields1
                                            temp___expr_164)) (distinct 0 0))
                                         (= (rec__traffic_lights__lights_state__vehicles_yellow
                                            (us_split_fields1
                                            temp___expr_164)) (distinct 0 0)))
                                         (and
                                         (and
                                         (= (rec__traffic_lights__lights_state__vehicles_red
                                            (us_split_fields1
                                            temp___expr_164)) (distinct 1 0))
                                         (= (rec__traffic_lights__lights_state__pedestrians_green
                                            (us_split_fields1
                                            temp___expr_164)) (distinct 1 0)))
                                         (= (rec__traffic_lights__lights_state__pedestrians_red
                                            (us_split_fields1
                                            temp___expr_164)) (distinct 0 0)))))

;; valid_combination__post_axiom
  (assert true)

;; valid_combination__def_axiom
  (assert
  (forall ((ls us_rep1))
  (! (= (= (valid_combination ls) true)
     (ite (= (rec__traffic_lights__lights_state__vehicles_green
             (us_split_fields1 ls)) true)
     (and
     (and
     (and
     (not
     (= (rec__traffic_lights__lights_state__vehicles_yellow
        (us_split_fields1 ls)) true))
     (not
     (= (rec__traffic_lights__lights_state__vehicles_red
        (us_split_fields1 ls)) true)))
     (not
     (= (rec__traffic_lights__lights_state__pedestrians_green
        (us_split_fields1 ls)) true)))
     (= (rec__traffic_lights__lights_state__pedestrians_red
        (us_split_fields1 ls)) true))
     (ite (= (rec__traffic_lights__lights_state__pedestrians_green
             (us_split_fields1 ls)) true)
     (and
     (and
     (and
     (not
     (= (rec__traffic_lights__lights_state__vehicles_green
        (us_split_fields1 ls)) true))
     (not
     (= (rec__traffic_lights__lights_state__vehicles_yellow
        (us_split_fields1 ls)) true)))
     (= (rec__traffic_lights__lights_state__vehicles_red
        (us_split_fields1 ls)) true))
     (not
     (= (rec__traffic_lights__lights_state__pedestrians_red
        (us_split_fields1 ls)) true)))
     (and
     (not
     (= (rec__traffic_lights__lights_state__pedestrians_green
        (us_split_fields1 ls)) true))
     (= (rec__traffic_lights__lights_state__pedestrians_red
        (us_split_fields1 ls)) true))))) :pattern ((valid_combination ls)) )))

;; temp___result_212'def
  (assert
  (forall ((temp___211 us_rep1)) (valid_combination__function_guard
  (valid_combination temp___211) temp___211)))

(define-fun dynamic_invariant1 ((temp___expr_210 us_rep2)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)
  (temp___do_typ_inv_209 Bool)) Bool (= (valid_combination
                                        (rec__traffic_lights__traffic_lightT__lights
                                        (us_split_fields3 temp___expr_210))) true))

(define-fun default_initial_assumption2 ((temp___expr_213 us_rep2)
  (temp___skip_top_level_214 Bool)) Bool (and
                                         (and
                                         (= (rec__traffic_lights__traffic_lightT__last_state_change
                                            (us_split_fields3
                                            temp___expr_213)) time_first)
                                         (= (rec__traffic_lights__traffic_lightT__change_state
                                            (us_split_fields3
                                            temp___expr_213)) (distinct 0 0)))
                                         (and
                                         (and
                                         (= (rec__traffic_lights__lights_state__vehicles_green
                                            (us_split_fields1
                                            (rec__traffic_lights__traffic_lightT__lights
                                            (us_split_fields3
                                            temp___expr_213)))) (distinct 0 0))
                                         (= (rec__traffic_lights__lights_state__vehicles_yellow
                                            (us_split_fields1
                                            (rec__traffic_lights__traffic_lightT__lights
                                            (us_split_fields3
                                            temp___expr_213)))) (distinct 0 0)))
                                         (and
                                         (and
                                         (= (rec__traffic_lights__lights_state__vehicles_red
                                            (us_split_fields1
                                            (rec__traffic_lights__traffic_lightT__lights
                                            (us_split_fields3
                                            temp___expr_213)))) (distinct 1 0))
                                         (= (rec__traffic_lights__lights_state__pedestrians_green
                                            (us_split_fields1
                                            (rec__traffic_lights__traffic_lightT__lights
                                            (us_split_fields3
                                            temp___expr_213)))) (distinct 1 0)))
                                         (= (rec__traffic_lights__lights_state__pedestrians_red
                                            (us_split_fields1
                                            (rec__traffic_lights__traffic_lightT__lights
                                            (us_split_fields3
                                            temp___expr_213)))) (distinct 0 0))))))

(declare-const self__ us_rep2)

(assert
;; defqtvc
 ;; File "traffic_lights.ads", line 33, characters 0-0
  (not
  (forall ((usf us_split_fields))
  (let ((usf1 (us_repqtmk usf)))
  (=> (default_initial_assumption usf1 false) (dynamic_predicate usf1))))))
(check-sat)
