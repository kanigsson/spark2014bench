(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun sum_all (Int us_private us_private us_private) Int)

(declare-fun sum_all__function_guard (Int Int us_private us_private
  us_private) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun sum_state (us_private us_private us_private) Int)

(declare-fun sum_state__function_guard (Int us_private us_private
  us_private) Bool)

;; sum_state__post_axiom
  (assert
  (forall ((init__b us_private) (init__c us_private) (init__d us_private))
  (! (let ((result (sum_state init__b init__c init__d)))
     (=> (sum_state__function_guard result init__b init__c init__d)
     (dynamic_invariant result true false true true))) :pattern ((sum_state
                                                                 init__b
                                                                 init__c
                                                                 init__d)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

;; sum_all__post_axiom
  (assert
  (forall ((init__a Int))
  (forall ((init__b us_private) (init__c us_private) (init__d us_private))
  (! (=> (dynamic_invariant init__a true true true true)
     (let ((result (sum_all init__a init__b init__c init__d)))
     (=> (sum_all__function_guard result init__a init__b init__c init__d)
     (dynamic_invariant result true false true true)))) :pattern ((sum_all
                                                                  init__a
                                                                  init__b
                                                                  init__c
                                                                  init__d)) ))))

(assert
;; defqtvc
 ;; File "init_2.ads", line 4, characters 0-0
  (not
  (forall ((a Int) (b us_private) (c us_private) (d us_private) (z Int)
  (x Int))
  (=> (dynamic_invariant a true false true true)
  (=>
  (forall ((a1 Int) (b1 us_private) (c1 us_private) (d1 us_private))
  (sum_all__function_guard (sum_all a1 b1 c1 d1) a1 b1 c1 d1))
  (=> (= (sum_all a b c d) 0)
  (=> (= x a)
  (=> (dynamic_invariant x true false true true)
  (let ((o (sum_state b c d)))
  (=>
  (and (sum_state__function_guard o b c d) (dynamic_invariant o true false
  true true))
  (forall ((y Int))
  (=> (= y o)
  (=> (dynamic_invariant y true false true true)
  (=> (dynamic_invariant z false false true true) (in_range (+ x y))))))))))))))))
(check-sat)
(exit)
