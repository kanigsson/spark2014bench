(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__ext__ us_private)))))
(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ((limited_base_list__ref 0))
(((limited_base_list__refqtmk (limited_base_list__content us_rep)))))
(define-fun limited_base_list__ref_limited_base_list__content__projection ((a limited_base_list__ref)) us_rep 
  (limited_base_list__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list us_main_type)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__projection ((a us_split_fields2)) us_main_type 
  (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
  a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (us_main_type us_private) us_private)

(declare-fun extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list (us_private) us_main_type)

;; extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__conv
  (assert
  (forall
  ((use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list us_main_type))
  (forall ((rec__ext__2 us_private))
  (= (extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
     (hide_ext__
     use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
     rec__ext__2)) use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (hide_ext__
                                         (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ((nodes_list__ref 0))
(((nodes_list__refqtmk (nodes_list__content us_rep1)))))
(define-fun nodes_list__ref_nodes_list__content__projection ((a nodes_list__ref)) us_rep1 
  (nodes_list__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1 us_main_type)(rec__use_lists__my_lists__element_lists__lists__list us_main_type1)(rec__ext__2 us_private)))))
(define-fun us_split_fields_rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__2__projection ((a us_split_fields4)) us_main_type 
  (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1
  a))

(define-fun us_split_fields_rec__use_lists__my_lists__element_lists__lists__list__projection ((a us_split_fields4)) us_main_type1 
  (rec__use_lists__my_lists__element_lists__lists__list a))

(define-fun us_split_fields_rec__ext____3__projection ((a us_split_fields4)) us_private 
  (rec__ext__2 a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2 (us_split_fields5 us_split_fields4)(attr__tag2 Int)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun us_rep_attr__tag__3__projection ((a us_rep2)) Int (attr__tag2 a))

(declare-fun hide_ext__1 (us_main_type us_main_type1 us_private) us_private)

;; extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__conv
  (assert
  (forall
  ((use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list us_main_type))
  (forall ((use_lists__my_lists__element_lists__lists__list us_main_type1))
  (forall ((rec__ext__3 us_private))
  (= (extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
     (hide_ext__1
     use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
     use_lists__my_lists__element_lists__lists__list rec__ext__3)) use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list)))))

(declare-fun extract__use_lists__my_lists__element_lists__lists__list (us_private) us_main_type1)

;; extract__use_lists__my_lists__element_lists__lists__list__conv
  (assert
  (forall
  ((use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list us_main_type))
  (forall ((use_lists__my_lists__element_lists__lists__list us_main_type1))
  (forall ((rec__ext__3 us_private))
  (= (extract__use_lists__my_lists__element_lists__lists__list
     (hide_ext__1
     use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
     use_lists__my_lists__element_lists__lists__list rec__ext__3)) use_lists__my_lists__element_lists__lists__list)))))

(declare-fun extract__ext__1 (us_private) us_private)

(define-fun to_base1 ((a us_rep2)) us_rep (us_repqtmk
                                          (us_split_fieldsqtmk
                                          (hide_ext__1
                                          (rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1
                                          (us_split_fields5 a))
                                          (rec__use_lists__my_lists__element_lists__lists__list
                                          (us_split_fields5 a))
                                          (rec__ext__2 (us_split_fields5 a))))
                                          (attr__tag2 a)))

(define-fun of_base1 ((r us_rep)) us_rep2 (us_repqtmk2
                                          (us_split_fieldsqtmk2
                                          (extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__use_lists__my_lists__element_lists__lists__list
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__ext__1
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq2 (us_rep2 us_rep2) Bool)

(declare-const dummy2 us_rep2)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep2)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep2 
  (list__content a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq3 (us_rep3 us_rep3) Bool)

(declare-const dummy3 us_rep3)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep3)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep3 
  (cursor__content a))

(declare-fun has_element (us_rep2 us_rep3) Bool)

(declare-fun has_element__function_guard (Bool us_rep2 us_rep3) Bool)

(declare-fun element (us_rep2 us_rep3) Int)

(declare-fun element__function_guard (Int us_rep2 us_rep3) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq4 (element_type element_type) Bool)

(declare-const dummy4 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant ((temp___expr_315 Int)
  (temp___is_init_311 Bool) (temp___skip_constant_312 Bool)
  (temp___do_toplevel_313 Bool)
  (temp___do_typ_inv_314 Bool)) Bool (=>
                                     (or (= temp___is_init_311 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range temp___expr_315)))

;; element__post_axiom
  (assert
  (forall ((self us_rep2))
  (forall ((position us_rep3)) (! (in_range
  (element self position)) :pattern ((element self position)) ))))

(declare-const us_tag3 Int)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ((list__ref1 0))
(((list__refqtmk1 (list__content1 us_rep2)))))
(define-fun list__ref_list__content__2__projection ((a list__ref1)) us_rep2 
  (list__content1 a))

(declare-const self us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const position us_rep3)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_390 us_rep2)
  (temp___skip_top_level_391 Bool)) Bool (= (attr__tag2 temp___expr_390) 
  us_tag3))

(define-fun default_initial_assumption1 ((temp___expr_250 us_rep)
  (temp___skip_top_level_251 Bool)) Bool (= (attr__tag temp___expr_250) 
  us_tag))

(define-fun default_initial_assumption2 ((temp___expr_297 us_rep1)
  (temp___skip_top_level_298 Bool)) Bool (= (attr__tag1 temp___expr_297) 
  us_tag1))

(define-fun default_initial_assumption3 ((temp___expr_309 us_rep2)
  (temp___skip_top_level_310 Bool)) Bool (= (attr__tag2 temp___expr_309) 
  us_tag2))

(assert
;; defqtvc
 ;; File "conts-lists.ads", line 505, characters 0-0
  (not
  (=> (has_element__function_guard (has_element self position) self position)
  (=> (= (has_element self position) true)
  (=>
  (forall ((o us_rep3) (o1 us_rep2)) (has_element__function_guard
  (has_element o1 o) o1 o)) (= (has_element self position) true))))))
(check-sat)
