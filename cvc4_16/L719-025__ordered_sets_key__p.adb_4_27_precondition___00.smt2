(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__p__my_sets__set__capacity count_type)))))
(define-fun us_split_discrs_rec__p__my_sets__set__capacity__projection ((a us_split_discrs)) count_type 
  (rec__p__my_sets__set__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__p__my_sets__set us_main_type)))))
(define-fun us_split_fields_rec__p__my_sets__set__projection ((a us_split_fields)) us_main_type 
  (rec__p__my_sets__set a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__p__my_sets__set__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__p__my_sets__set__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__p__my_sets__set (us_split_fields1 a))
                           (rec__p__my_sets__set (us_split_fields1 b))) true))
                   true false))

(define-fun in_range2 ((rec__p__my_sets__set__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__p__my_sets__set__capacity1 (to_rep
                                                               (rec__p__my_sets__set__capacity
                                                               a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const p__my_sets__set__capacity__first__bit Int)

(declare-const p__my_sets__set__capacity__last__bit Int)

(declare-const p__my_sets__set__capacity__position Int)

;; p__my_sets__set__capacity__first__bit_axiom
  (assert (<= 0 p__my_sets__set__capacity__first__bit))

;; p__my_sets__set__capacity__last__bit_axiom
  (assert
  (< p__my_sets__set__capacity__first__bit p__my_sets__set__capacity__last__bit))

;; p__my_sets__set__capacity__position_axiom
  (assert (<= 0 p__my_sets__set__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((set__ref 0))
(((set__refqtmk (set__content us_rep)))))
(define-fun set__ref_set__content__projection ((a set__ref)) us_rep (set__content
                                                                    a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep1)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep1 
  (map__content a))

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__p__my_sets__cursor__node count_type)))))
(define-fun us_split_fields_rec__p__my_sets__cursor__node__projection ((a us_split_fields2)) count_type 
  (rec__p__my_sets__cursor__node a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep
                            (rec__p__my_sets__cursor__node
                            (us_split_fields3 a))) (to_rep
                                                   (rec__p__my_sets__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const p__my_sets__cursor__node__first__bit Int)

(declare-const p__my_sets__cursor__node__last__bit Int)

(declare-const p__my_sets__cursor__node__position Int)

;; p__my_sets__cursor__node__first__bit_axiom
  (assert (<= 0 p__my_sets__cursor__node__first__bit))

;; p__my_sets__cursor__node__last__bit_axiom
  (assert
  (< p__my_sets__cursor__node__first__bit p__my_sets__cursor__node__last__bit))

;; p__my_sets__cursor__node__position_axiom
  (assert (<= 0 p__my_sets__cursor__node__position))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-const dummy3 us_rep2)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep2)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep2 
  (cursor__content a))

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content us_rep2)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref)) us_rep2 
  (key_type__content a))

(declare-fun has_key (us_rep1 us_rep2) Bool)

(declare-fun has_key__function_guard (Bool us_rep1 us_rep2) Bool)

(declare-fun get (us_rep1 us_rep2) Int)

(declare-fun get__function_guard (Int us_rep1 us_rep2) Bool)

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun is_empty (us_rep1) Bool)

(declare-fun is_empty__function_guard (Bool us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun default_initial_assumption ((temp___expr_405 us_rep1)
  (temp___skip_top_level_406 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_406 true))
                                         (and
                                         (= (is_empty temp___expr_405) true)
                                         (= (length temp___expr_405) 0))))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq left right) true)
     (and
     (forall ((key us_rep2))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get right key) (get left key)))))
     (forall ((key us_rep2))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq left right)) )))

(declare-fun positions (us_rep) us_rep1)

(declare-fun positions__function_guard (us_rep1 us_rep) Bool)

(declare-const no_element us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard1 (Int us_rep) Bool)

(declare-fun oeq1 (us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq1 a b)) :pattern ((user_eq1 a b)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep2))
     (=> (= (has_key result i) true)
     (and
     (let ((temp___465 (get result i)))
     (and (<= 1 temp___465) (<= temp___465 (length1 container))))
     (forall ((j us_rep2))
     (=> (= (has_key result j) true)
     (=> (= (get result i) (get result j)) (= (bool_eq2 i j) true))))))))) :pattern (
  (positions container)) )))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq4 (us_rep3 us_rep3) Bool)

(declare-const dummy4 us_rep3)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep3)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep3 
  (sequence__content a))

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(declare-fun get1 (us_rep3 Int) Int)

(declare-fun get__function_guard1 (Int us_rep3 Int) Bool)

(define-fun oeq2 ((left us_rep3)
  (right us_rep3)) Bool (and (= (length3 left) (length3 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get1 left
                                                                   n) 
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

(declare-fun find (us_rep3 Int) Int)

(declare-fun find__function_guard (Int us_rep3 Int) Bool)

(define-fun e_elements_included ((left us_rep3)
  (right us_rep3)) Bool (ite (forall ((i Int))
                             (=> (and (<= 1 i) (<= i (length3 left)))
                             (and (< 0 (find right (get1 left i)))
                             (= (get1 right (find right (get1 left i))) 
                             (get1 left i)))))
                        true false))

(declare-fun e_elements_included__function_guard (Bool us_rep3 us_rep3) Bool)

(declare-fun elements (us_rep) us_rep3)

(declare-fun elements__function_guard (us_rep3 us_rep) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (ite (= (oeq1 left right) true)
     (= (oeq2 (elements left) (elements right)) true)
     (or
     (not (= (e_elements_included (elements left) (elements right)) true))
     (not (= (e_elements_included (elements right) (elements left)) true)))) :pattern (
  (oeq1 left right)) )))

(declare-fun contains (us_rep Int) Bool)

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq5 (us_rep4 us_rep4) Bool)

(declare-const dummy5 us_rep4)

(declare-datatypes ((set__ref1 0))
(((set__refqtmk1 (set__content1 us_rep4)))))
(define-fun set__ref_set__content__2__projection ((a set__ref1)) us_rep4 
  (set__content1 a))

(declare-fun contains1 (us_rep4 Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep4 Int) Bool)

(declare-fun model1 (us_rep) us_rep4)

(declare-fun model__function_guard (us_rep4 us_rep) Bool)

(declare-fun key (Int) Int)

(declare-fun key__function_guard (Int Int) Bool)

(declare-fun my_inf (Int Int) Bool)

(declare-fun my_inf__function_guard (Bool Int Int) Bool)

;; temp___result_264'def
  (assert
  (forall ((left Int) (right Int)) (my_inf__function_guard
  (my_inf left right) left right)))

;; temp___result_265'def
  (assert
  (forall ((left Int) (right Int)) (my_inf__function_guard
  (my_inf right left) right left)))

(define-fun equivalent_keys ((left Int)
  (right Int)) Bool (and (not (my_inf left right)) (not (my_inf right left))))

(declare-fun equivalent_keys__function_guard (Bool Int Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 100))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq6 (element_type element_type) Bool)

(declare-const dummy6 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 100))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (key_type key_type) Bool)

(declare-const dummy7 key_type)

(declare-datatypes ((key_type__ref1 0))
(((key_type__refqtmk1 (key_type__content1 key_type)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref1)) key_type 
  (key_type__content1 a))

(define-fun dynamic_invariant ((temp___expr_665 Int)
  (temp___is_init_661 Bool) (temp___skip_constant_662 Bool)
  (temp___do_toplevel_663 Bool)
  (temp___do_typ_inv_664 Bool)) Bool (=>
                                     (or (= temp___is_init_661 true)
                                     (<= 1 100)) (in_range4 temp___expr_665)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant key1 true true true true)
     (and (forall ((e Int)) (key__function_guard (key e) e))
     (= (= (contains container key1) true)
     (exists ((e Int))
     (and (and (in_range3 e) (= (contains1 (model1 container) e) true))
     (= (equivalent_keys key1 (key e)) true)))))) :pattern ((contains
                                                            container key1)) ))))

(define-fun element ((container us_rep)
  (position us_rep2)) Int (get1 (elements container)
                          (get (positions container) position)))

(declare-fun element__function_guard (Int us_rep us_rep2) Bool)

(declare-fun find1 (us_rep Int) us_rep2)

(declare-fun find__function_guard1 (us_rep2 us_rep Int) Bool)

(define-fun element1 ((container us_rep)
  (key1 Int)) Int (element container (find1 container key1)))

(declare-fun element__function_guard1 (Int us_rep Int) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (element_type1 element_type1) Bool)

(declare-const dummy8 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_293 Int)
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)
  (temp___do_typ_inv_292 Bool)) Bool (=>
                                     (or (= temp___is_init_289 true)
                                     (<= 1 100)) (in_range5 temp___expr_293)))

(declare-fun included_except (us_rep4 us_rep4 Int) Bool)

(declare-fun included_except__function_guard (Bool us_rep4 us_rep4 Int) Bool)

(declare-fun mapping_preserved_except (us_rep3 us_rep3 us_rep1 us_rep1
  us_rep2) Bool)

(declare-fun mapping_preserved_except__function_guard (Bool us_rep3 us_rep3
  us_rep1 us_rep1 us_rep2) Bool)

(declare-fun m_included_except (us_rep4 us_rep4 Int) Bool)

(declare-fun m_included_except__function_guard (Bool us_rep4 us_rep4
  Int) Bool)

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 100))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (element_type2 element_type2) Bool)

(declare-const dummy9 element_type2)

(declare-datatypes ((element_type__ref2 0))
(((element_type__refqtmk2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(define-fun dynamic_invariant2 ((temp___expr_286 Int)
  (temp___is_init_282 Bool) (temp___skip_constant_283 Bool)
  (temp___do_toplevel_284 Bool)
  (temp___do_typ_inv_285 Bool)) Bool (=>
                                     (or (= temp___is_init_282 true)
                                     (<= 1 100)) (in_range6 temp___expr_286)))

(declare-sort key_type1 0)

(declare-fun key_typeqtint1 (key_type1) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type1))
  (and (<= 1 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (key_type1 key_type1) Bool)

(declare-const dummy10 key_type1)

(declare-datatypes ((key_type__ref2 0))
(((key_type__refqtmk2 (key_type__content2 key_type1)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref2)) key_type1 
  (key_type__content2 a))

(define-fun dynamic_invariant3 ((temp___expr_658 Int)
  (temp___is_init_654 Bool) (temp___skip_constant_655 Bool)
  (temp___do_toplevel_656 Bool)
  (temp___do_typ_inv_657 Bool)) Bool (=>
                                     (or (= temp___is_init_654 true)
                                     (<= 1 100)) (in_range7 temp___expr_658)))

;; my_inf__post_axiom
  (assert true)

;; my_inf__def_axiom
  (assert
  (forall ((i1 Int) (i2 Int))
  (! (= (= (my_inf i1 i2) true) (< i1 i2)) :pattern ((my_inf i1 i2)) )))

;; key__post_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant2 i true true true true)
     (let ((result (key i)))
     (=> (key__function_guard result i) (dynamic_invariant3 result true false
     true true)))) :pattern ((key i)) )))

;; key__def_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant2 i true true true true) (= (key i) i)) :pattern (
  (key i)) )))

(define-fun dynamic_invariant4 ((temp___expr_304 Int)
  (temp___is_init_300 Bool) (temp___skip_constant_301 Bool)
  (temp___do_toplevel_302 Bool)
  (temp___do_typ_inv_303 Bool)) Bool (=>
                                     (or (= temp___is_init_300 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_304)))

;; temp___result_157'def
  (assert
  (forall ((left Int) (right Int)) (my_inf__function_guard
  (my_inf left right) left right)))

;; temp___result_158'def
  (assert
  (forall ((left Int) (right Int)) (my_inf__function_guard
  (my_inf right left) right left)))

(define-fun equivalent_elements ((left Int)
  (right Int)) Bool (and (not (my_inf left right)) (not (my_inf right left))))

(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk1 (us_split_fieldsqtmk1 rliteral))))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length1 container)))
     (and
     (<= result (to_rep
                (rec__p__my_sets__set__capacity (us_split_discrs1 container))))
     (dynamic_invariant4 result true false true true))) :pattern ((length1
                                                                  container)) )))

;; temp___result_202'def
  (assert
  (forall ((container us_rep3) (item Int) (i Int)) (my_inf__function_guard
  (my_inf (get1 container i) item) (get1 container i) item)))

(define-fun e_bigger_than_range ((container us_rep3) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (my_inf (get1 container i) item) true)))
                   true false))

(declare-fun e_bigger_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

;; temp___result_204'def
  (assert
  (forall ((container us_rep3) (item Int) (i Int)) (my_inf__function_guard
  (my_inf item (get1 container i)) item (get1 container i))))

(define-fun e_smaller_than_range ((container us_rep3) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (my_inf item (get1 container i)) true)))
                   true false))

(declare-fun e_smaller_than_range__function_guard (Bool us_rep3 Int Int
  Int) Bool)

(define-fun e_is_find ((container us_rep3) (item Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range container 1 (- position 1)
                            item) (distinct 1 0)) (ite (< position (length3
                                                                   container))
                                                  (e_smaller_than_range
                                                  container (+ position 1)
                                                  (length3 container) item)
                                                  (distinct 1 0))))

(declare-fun e_is_find__function_guard (Bool us_rep3 Int Int) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq4 a b) (oeq2 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_378 us_rep3)
  (temp___skip_top_level_379 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_379 true))
                                         (= (length3 temp___expr_378) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((item Int))
  (! (=> (dynamic_invariant1 item true true true true)
     (let ((result (find container item)))
     (and
     (=> (< 0 result)
     (and (<= result (length3 container))
     (= (equivalent_elements item (get1 container result)) true)))
     (dynamic_invariant4 result true false true true)))) :pattern ((find
                                                                   container
                                                                   item)) ))))

(declare-fun keys_included (us_rep1 us_rep1) Bool)

(declare-fun keys_included__function_guard (Bool us_rep1 us_rep1) Bool)

;; mapping_preserved_except__post_axiom
  (assert
  (forall ((e_left us_rep3) (e_right us_rep3))
  (forall ((p_left us_rep1) (p_right us_rep1))
  (forall ((position us_rep2))
  (! (=>
     (= (mapping_preserved_except e_left e_right p_left p_right position) true)
     (and (= (keys_included p_left p_right) true)
     (forall ((c us_rep2))
     (=> (= (has_key p_left c) true)
     (=> (not (= (bool_eq2 c position) true))
     (= (get1 e_left (get p_left c)) (get1 e_right (get p_right c)))))))) :pattern (
  (mapping_preserved_except e_left e_right p_left p_right position)) )))))

(declare-fun length4 (us_rep4) Int)

(declare-fun length__function_guard3 (Int us_rep4) Bool)

(declare-fun oeq3 (us_rep4 us_rep4) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep4 us_rep4) Bool)

(declare-fun is_empty1 (us_rep4) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq5 a b) (oeq3 a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_342 us_rep4)
  (temp___skip_top_level_343 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_343 true))
                                         (= (is_empty1 temp___expr_342) true)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length4 (model1 container)) (length1 container)) :pattern ((model1
                                                                    container)) )))

(define-fun iter_has_element ((container us_rep3)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep3 Int) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (extended_index extended_index) Bool)

(declare-const dummy11 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

;; elements__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (elements container)))
     (and
     (and
     (and (= (length3 result) (length1 container))
     (forall ((temp___458 Int))
     (=>
     (and (in_range8 temp___458)
     (= (iter_has_element result temp___458) true))
     (= (contains1 (model1 container) (get1 result temp___458)) true))))
     (forall ((item Int))
     (=> (and (in_range3 item) (= (contains1 (model1 container) item) true))
     (and (< 0 (find result item))
     (= (equivalent_elements (get1 result (find result item)) item) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length1 container)))
     (and (= (find result (get1 result i)) i)
     (= (e_is_find result (get1 result i) i) true)))))) :pattern ((elements
                                                                  container)) )))

(define-fun has_element ((container us_rep)
  (position us_rep2)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep2) Bool)

(define-fun dynamic_invariant5 ((temp___expr_334 Int)
  (temp___is_init_330 Bool) (temp___skip_constant_331 Bool)
  (temp___do_toplevel_332 Bool)
  (temp___do_typ_inv_333 Bool)) Bool (=>
                                     (or (= temp___is_init_330 true)
                                     (<= 1 100)) (in_range3 temp___expr_334)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((item Int))
  (! (=> (dynamic_invariant5 item true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((e Int))
     (and (and (in_range3 e) (= (contains1 container e) true))
     (= (equivalent_elements e item) true)))
     (= (contains1 container item) true)))) :pattern ((contains1 container
                                                      item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep4)) (! (dynamic_invariant4 (length4 container)
  true false true true) :pattern ((length4 container)) )))

(declare-fun ole (us_rep4 us_rep4) Bool)

(declare-fun ole__function_guard (Bool us_rep4 us_rep4) Bool)

;; ole__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (ole left right) true)
     (forall ((item Int))
     (=> (and (in_range3 item) (= (contains1 left item) true))
     (= (contains1 right item) true)))) :pattern ((ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (oeq3 left right) true)
     (and (= (ole left right) true) (= (ole right left) true))) :pattern (
  (oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (is_empty1 container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range3 item) (= (contains1 container item) true)))))
     (= (= result true) (= (length4 container) 0)))) :pattern ((is_empty1
                                                               container)) )))

;; included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((item Int))
  (! (=> (dynamic_invariant5 item true true true true)
     (= (= (included_except left right item) true)
     (forall ((e Int))
     (=> (and (in_range3 e) (= (contains1 left e) true))
     (or (= (contains1 right e) true) (= (equivalent_elements e item) true)))))) :pattern (
  (included_except left right item)) ))))

(define-fun dynamic_invariant6 ((temp___expr_370 Int)
  (temp___is_init_366 Bool) (temp___skip_constant_367 Bool)
  (temp___do_toplevel_368 Bool)
  (temp___do_typ_inv_369 Bool)) Bool (=>
                                     (or (= temp___is_init_366 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_370)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant4 result true false
     true true))) :pattern ((length3 container)) )))

(declare-sort element_type3 0)

(declare-fun element_typeqtint3 (element_type3) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type3))
  (and (<= 1 (element_typeqtint3 i)) (<= (element_typeqtint3 i) 100))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (element_type3 element_type3) Bool)

(declare-const dummy12 element_type3)

(declare-datatypes ((element_type__ref3 0))
(((element_type__refqtmk3 (element_type__content3 element_type3)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref3)) element_type3 
  (element_type__content3 a))

(define-fun dynamic_invariant7 ((temp___expr_363 Int)
  (temp___is_init_359 Bool) (temp___skip_constant_360 Bool)
  (temp___do_toplevel_361 Bool)
  (temp___do_typ_inv_362 Bool)) Bool (=>
                                     (or (= temp___is_init_359 true)
                                     (<= 1 100)) (in_range9 temp___expr_363)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant6 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant7 (get1 container position) true false true true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key1 us_rep2))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k1 us_rep2))
     (and (= (has_key container k1) true) (= (bool_eq2 k1 key1) true)))
     (= (has_key container key1) true))) :pattern ((has_key container key1)) ))))

(declare-fun witness (us_rep1 us_rep2) Int)

(declare-fun witness__function_guard (Int us_rep1 us_rep2) Bool)

(declare-fun w_get (us_rep1 Int) Int)

(declare-fun w_get__function_guard (Int us_rep1 Int) Bool)

(declare-sort element_type4 0)

(declare-fun element_typeqtint4 (element_type4) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type4))
  (and (<= 1 (element_typeqtint4 i)) (<= (element_typeqtint4 i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (element_type4 element_type4) Bool)

(declare-const dummy13 element_type4)

(declare-datatypes ((element_type__ref4 0))
(((element_type__refqtmk4 (element_type__content4 element_type4)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref4)) element_type4 
  (element_type__content4 a))

(define-fun dynamic_invariant8 ((temp___expr_397 Int)
  (temp___is_init_393 Bool) (temp___skip_constant_394 Bool)
  (temp___do_toplevel_395 Bool)
  (temp___do_typ_inv_396 Bool)) Bool (=>
                                     (or (= temp___is_init_393 true)
                                     (<= 1 2147483647)) (in_range10
                                     temp___expr_397)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key1 us_rep2))
  (! (=> (= (has_key container key1) true)
     (let ((result (get container key1)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get container (witness container key1)))
     (forall ((k1 us_rep2))
     (=> (= (has_key container k1) true)
     (= (= (bool_eq2 k1 key1) true)
     (= (witness container key1) (witness container k1)))))))
     (dynamic_invariant8 result true false true true)))) :pattern ((get
                                                                   container
                                                                   key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep1)) (! (dynamic_invariant4 (length container)
  true false true true) :pattern ((length container)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (= (is_empty container) true)
     (forall ((key1 us_rep2)) (not (= (has_key container key1) true)))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (keys_included left right) true)
     (forall ((key1 us_rep2))
     (=> (= (has_key left key1) true) (= (has_key right key1) true)))) :pattern (
  (keys_included left right)) )))

(declare-fun has_witness (us_rep1 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep1 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((key1 us_rep2))
  (! (=> (= (has_key container key1) true)
     (let ((result (witness container key1)))
     (and (= (has_witness container result) true) (dynamic_invariant4 result
     true false true true)))) :pattern ((witness container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant4 witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant8
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

;; temp___result_267'def
  (assert
  (forall ((container us_rep3) (i Int)) (key__function_guard
  (key (get1 container i)) (get1 container i))))

;; temp___result_267'def
  (assert
  (forall ((container us_rep3) (i Int)) (key__function_guard
  (key (get1 container i)) (get1 container i))))

;; temp___result_268'def
  (assert
  (forall ((container us_rep3) (key1 Int) (i Int)) (my_inf__function_guard
  (my_inf (key (get1 container i)) key1) (key (get1 container i)) key1)))

(define-fun e_bigger_than_range1 ((container us_rep3) (fst Int) (lst Int)
  (key1 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (my_inf (key (get1 container i)) key1) true)))
                   true false))

(declare-fun e_bigger_than_range__function_guard1 (Bool us_rep3 Int Int
  Int) Bool)

;; temp___result_270'def
  (assert
  (forall ((container us_rep3) (i Int)) (key__function_guard
  (key (get1 container i)) (get1 container i))))

;; temp___result_270'def
  (assert
  (forall ((container us_rep3) (i Int)) (key__function_guard
  (key (get1 container i)) (get1 container i))))

;; temp___result_271'def
  (assert
  (forall ((container us_rep3) (key1 Int) (i Int)) (my_inf__function_guard
  (my_inf key1 (key (get1 container i))) key1 (key (get1 container i)))))

(define-fun e_smaller_than_range1 ((container us_rep3) (fst Int) (lst Int)
  (key1 Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (my_inf key1 (key (get1 container i))) true)))
                   true false))

(declare-fun e_smaller_than_range__function_guard1 (Bool us_rep3 Int Int
  Int) Bool)

(define-fun e_is_find1 ((container us_rep3) (key1 Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range1 container 1 (- position 1)
                            key1) (distinct 1 0)) (ite (< position (length3
                                                                   container))
                                                  (e_smaller_than_range1
                                                  container (+ position 1)
                                                  (length3 container) key1)
                                                  (distinct 1 0))))

(declare-fun e_is_find__function_guard1 (Bool us_rep3 Int Int) Bool)

(declare-fun find2 (us_rep3 Int) Int)

(declare-fun find__function_guard2 (Int us_rep3 Int) Bool)

;; find__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant key1 true true true true)
     (let ((result (find2 container key1)))
     (and
     (and
     (forall ((container1 us_rep3) (result1 Int)) (key__function_guard
     (key (get1 container1 result1)) (get1 container1 result1)))
     (=> (< 0 result)
     (and
     (and (<= result (length3 container))
     (= (equivalent_keys key1 (key (get1 container result))) true))
     (= (e_is_find1 container key1 result) true)))) (dynamic_invariant4
     result true false true true)))) :pattern ((find2 container key1)) ))))

;; m_included_except__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant key1 true true true true)
     (and (forall ((e Int)) (key__function_guard (key e) e))
     (= (= (m_included_except left right key1) true)
     (forall ((e Int))
     (=> (and (in_range3 e) (= (contains1 left e) true))
     (or (= (contains1 right e) true)
     (= (equivalent_keys (key e) key1) true))))))) :pattern ((m_included_except
                                                             left right key1)) ))))

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant key1 true true true true)
     (let ((result (find1 container key1)))
     (and (forall ((e Int)) (key__function_guard (key e) e))
     (and
     (forall ((container1 us_rep) (result1 us_rep2)) (key__function_guard
     (key (element container1 result1)) (element container1 result1)))
     (ite (forall ((e Int))
          (=> (and (in_range3 e) (= (contains1 (model1 container) e) true))
          (not (= (equivalent_keys key1 (key e)) true))))
     (and (not (= (has_key (positions container) result) true))
     (= (bool_eq2 result no_element) true))
     (and
     (and (= (has_key (positions container) result) true)
     (= (get (positions container) result) (find2 (elements container) key1)))
     (= (equivalent_keys (key (element container result)) key1) true))))))) :pattern (
  (find1 container key1)) ))))

(assert
;; defqtvc
 ;; File "p.ads", line 25, characters 0-0
  (not true))
(check-sat)
