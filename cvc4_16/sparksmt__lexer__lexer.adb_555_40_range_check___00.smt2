(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (character Int (Array Int character) Int
  Int) (Array Int character))

;; concat_singleton_left_def
  (assert
  (forall ((a character))
  (forall ((b (Array Int character)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int character) Int Int
  character) (Array Int character))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((b character))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (character Int
  character) (Array Int character))

;; concat_singletons_def
  (assert
  (forall ((a character) (b character))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun to_rep2 ((x integer)) Int (integerqtint x))

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(define-fun dynamic_invariant3 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-sort read_status 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (read_status read_status) Bool)

(declare-const dummy5 read_status)

(declare-datatypes ((read_status__ref 0))
(((read_status__refqtmk (read_status__content read_status)))))
(define-fun read_status__ref_read_status__content__projection ((a read_status__ref)) read_status 
  (read_status__content a))

(declare-fun to_rep3 (read_status) Int)

(declare-fun of_rep3 (Int) read_status)

;; inversion_axiom
  (assert
  (forall ((x read_status))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x read_status)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__file_io__read_result__status read_status)))))
(define-fun us_split_discrs_rec__file_io__read_result__status__projection ((a us_split_discrs)) read_status 
  (rec__file_io__read_result__status a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__file_io__read_result__c character)))))
(define-fun us_split_fields_rec__file_io__read_result__c__projection ((a us_split_fields)) character 
  (rec__file_io__read_result__c a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun file_io__read_result__c__pred ((a us_rep)) Bool (= (to_rep3
                                                               (rec__file_io__read_result__status
                                                               (us_split_discrs1
                                                               a))) 0))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep3
                           (rec__file_io__read_result__status
                           (us_split_discrs1 a))) (to_rep3
                                                  (rec__file_io__read_result__status
                                                  (us_split_discrs1 b))))
                        (=> (file_io__read_result__c__pred a)
                        (= (to_rep1
                           (rec__file_io__read_result__c
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__file_io__read_result__c
                                                  (us_split_fields1 b))))))
                   true false))

(define-fun in_range6 ((rec__file_io__read_result__status1 Int)
  (a us_split_discrs)) Bool (= rec__file_io__read_result__status1 (to_rep3
                                                                  (rec__file_io__read_result__status
                                                                  a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const file_io__read_result__status__first__bit Int)

(declare-const file_io__read_result__status__last__bit Int)

(declare-const file_io__read_result__status__position Int)

;; file_io__read_result__status__first__bit_axiom
  (assert (<= 0 file_io__read_result__status__first__bit))

;; file_io__read_result__status__last__bit_axiom
  (assert
  (< file_io__read_result__status__first__bit file_io__read_result__status__last__bit))

;; file_io__read_result__status__position_axiom
  (assert (<= 0 file_io__read_result__status__position))

(declare-const file_io__read_result__c__first__bit Int)

(declare-const file_io__read_result__c__last__bit Int)

(declare-const file_io__read_result__c__position Int)

;; file_io__read_result__c__first__bit_axiom
  (assert (<= 0 file_io__read_result__c__first__bit))

;; file_io__read_result__c__last__bit_axiom
  (assert
  (< file_io__read_result__c__first__bit file_io__read_result__c__last__bit))

;; file_io__read_result__c__position_axiom
  (assert (<= 0 file_io__read_result__c__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((read_result__ref 0))
(((read_result__refqtmk (read_result__content us_rep)))))
(define-fun read_result__ref_read_result__content__projection ((a read_result__ref)) us_rep 
  (read_result__content a))

(declare-const current_read__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_215 us_rep)
  (temp___skip_top_level_216 Bool)) Bool (= (to_rep3
                                            (rec__file_io__read_result__status
                                            (us_split_discrs1
                                            temp___expr_215))) 2))

(declare-const next_read__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun invariant__ (us_split_fields us_split_discrs us_private
  us_split_fields us_split_discrs) Bool)

(declare-fun invariant____function_guard (Bool us_split_fields
  us_split_discrs us_private us_split_fields us_split_discrs) Bool)

(declare-fun invariant__1 (us_private) Bool)

(declare-fun invariant____function_guard1 (Bool us_private) Bool)

(declare-fun local_invariant (us_split_fields us_split_discrs us_split_fields
  us_split_discrs) Bool)

(declare-fun local_invariant__function_guard (Bool us_split_fields
  us_split_discrs us_split_fields us_split_discrs) Bool)

;; invariant____post_axiom
  (assert true)

;; invariant____def_axiom
  (assert
  (forall ((lexer__current_read__fields us_split_fields)
  (lexer__next_read__fields us_split_fields))
  (forall ((lexer__current_read__discrs us_split_discrs)
  (lexer__next_read__discrs us_split_discrs))
  (forall ((names__name_table us_private))
  (! (and
     (forall ((names__name_table1 us_private)) (invariant____function_guard1
     (invariant__1 names__name_table1) names__name_table1))
     (and
     (forall ((lexer__current_read__fields1 us_split_fields)
     (lexer__next_read__fields1 us_split_fields)
     (lexer__current_read__discrs1 us_split_discrs)
     (lexer__next_read__discrs1 us_split_discrs))
     (local_invariant__function_guard
     (local_invariant lexer__current_read__fields1
     lexer__current_read__discrs1 lexer__next_read__fields1
     lexer__next_read__discrs1) lexer__current_read__fields1
     lexer__current_read__discrs1 lexer__next_read__fields1
     lexer__next_read__discrs1))
     (=
     (= (invariant__ lexer__current_read__fields lexer__current_read__discrs
        names__name_table lexer__next_read__fields lexer__next_read__discrs) true)
     (and (= (invariant__1 names__name_table) true)
     (= (local_invariant lexer__current_read__fields
        lexer__current_read__discrs lexer__next_read__fields
        lexer__next_read__discrs) true))))) :pattern ((invariant__
                                                      lexer__current_read__fields
                                                      lexer__current_read__discrs
                                                      names__name_table
                                                      lexer__next_read__fields
                                                      lexer__next_read__discrs)) )))))

(declare-sort token_kind 0)

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (token_kind token_kind) Bool)

(declare-const dummy7 token_kind)

(declare-datatypes ((token_kind__ref 0))
(((token_kind__refqtmk (token_kind__content token_kind)))))
(define-fun token_kind__ref_token_kind__content__projection ((a token_kind__ref)) token_kind 
  (token_kind__content a))

(declare-fun to_rep4 (token_kind) Int)

(declare-fun of_rep4 (Int) token_kind)

;; inversion_axiom
  (assert
  (forall ((x token_kind))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x token_kind)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort name_id 0)

(declare-fun name_idqtint (name_id) Int)

;; name_id'axiom
  (assert
  (forall ((i name_id))
  (and (<= 0 (name_idqtint i)) (<= (name_idqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (name_id name_id) Bool)

(declare-const dummy8 name_id)

(declare-datatypes ((name_id__ref 0))
(((name_id__refqtmk (name_id__content name_id)))))
(define-fun name_id__ref_name_id__content__projection ((a name_id__ref)) name_id 
  (name_id__content a))

(define-fun to_rep5 ((x name_id)) Int (name_idqtint x))

(declare-fun of_rep5 (Int) name_id)

;; inversion_axiom
  (assert
  (forall ((x name_id))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x name_id)) (! (in_range8 (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ((us_split_discrs2 0))
(((us_split_discrsqtmk1 (rec__lexer__token__kind token_kind)))))
(define-fun us_split_discrs_rec__lexer__token__kind__projection ((a us_split_discrs2)) token_kind 
  (rec__lexer__token__kind a))

(declare-datatypes ((us_split_discrs__ref1 0))
(((us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__lexer__token__line natural)(rec__lexer__token__col natural)(rec__lexer__token__length natural)(rec__lexer__token__value name_id)))))
(define-fun us_split_fields_rec__lexer__token__line__projection ((a us_split_fields2)) natural 
  (rec__lexer__token__line a))

(define-fun us_split_fields_rec__lexer__token__col__projection ((a us_split_fields2)) natural 
  (rec__lexer__token__col a))

(define-fun us_split_fields_rec__lexer__token__length__projection ((a us_split_fields2)) natural 
  (rec__lexer__token__length a))

(define-fun us_split_fields_rec__lexer__token__value__projection ((a us_split_fields2)) name_id 
  (rec__lexer__token__value a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun lexer__token__value__pred ((a us_rep1)) Bool (and
                                                         (<= 3 (to_rep4
                                                               (rec__lexer__token__kind
                                                               (us_split_discrs3
                                                               a))))
                                                         (<= (to_rep4
                                                             (rec__lexer__token__kind
                                                             (us_split_discrs3
                                                             a))) 8)))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep4
                            (rec__lexer__token__kind (us_split_discrs3 a))) 
                         (to_rep4
                         (rec__lexer__token__kind (us_split_discrs3 b))))
                         (and
                         (and
                         (= (to_rep
                            (rec__lexer__token__line (us_split_fields3 a))) 
                         (to_rep
                         (rec__lexer__token__line (us_split_fields3 b))))
                         (= (to_rep
                            (rec__lexer__token__col (us_split_fields3 a))) 
                         (to_rep
                         (rec__lexer__token__col (us_split_fields3 b)))))
                         (and
                         (= (to_rep
                            (rec__lexer__token__length (us_split_fields3 a))) 
                         (to_rep
                         (rec__lexer__token__length (us_split_fields3 b))))
                         (=> (lexer__token__value__pred a)
                         (= (to_rep5
                            (rec__lexer__token__value (us_split_fields3 a))) 
                         (to_rep5
                         (rec__lexer__token__value (us_split_fields3 b))))))))
                    true false))

(define-fun in_range9 ((rec__lexer__token__kind1 Int)
  (a us_split_discrs2)) Bool (= rec__lexer__token__kind1 (to_rep4
                                                         (rec__lexer__token__kind
                                                         a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const lexer__token__kind__first__bit Int)

(declare-const lexer__token__kind__last__bit Int)

(declare-const lexer__token__kind__position Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit lexer__token__kind__last__bit))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position))

(declare-const lexer__token__line__first__bit Int)

(declare-const lexer__token__line__last__bit Int)

(declare-const lexer__token__line__position Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit lexer__token__line__last__bit))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position))

(declare-const lexer__token__col__first__bit Int)

(declare-const lexer__token__col__last__bit Int)

(declare-const lexer__token__col__position Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit lexer__token__col__last__bit))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position))

(declare-const lexer__token__length__first__bit Int)

(declare-const lexer__token__length__last__bit Int)

(declare-const lexer__token__length__position Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit lexer__token__length__last__bit))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position))

(declare-const lexer__token__value__first__bit Int)

(declare-const lexer__token__value__last__bit Int)

(declare-const lexer__token__value__position Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit))

;; lexer__token__value__last__bit_axiom
  (assert (< lexer__token__value__first__bit lexer__token__value__last__bit))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((token__ref 0))
(((token__refqtmk (token__content us_rep1)))))
(define-fun token__ref_token__content__projection ((a token__ref)) us_rep1 
  (token__content a))

(declare-const t__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun default_initial_assumption1 ((temp___expr_195 us_rep1)
  (temp___skip_top_level_196 Bool)) Bool (= (to_rep4
                                            (rec__lexer__token__kind
                                            (us_split_discrs3
                                            temp___expr_195))) 0))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq4 (us_rep2 us_rep2) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((file__ref 0))
(((file__refqtmk (file__content us_rep2)))))
(define-fun file__ref_file__content__projection ((a file__ref)) us_rep2 
  (file__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i))
  (<= (capacity_rangeqtint i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (capacity_range capacity_range) Bool)

(declare-const dummy11 capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ((us_split_discrs4 0))
(((us_split_discrsqtmk2
  (rec__unbounded_strings__char_vectors__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__unbounded_strings__char_vectors__vector__capacity__projection ((a us_split_discrs4)) capacity_range 
  (rec__unbounded_strings__char_vectors__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref2 0))
(((us_split_discrs__refqtmk2 (us_split_discrs__content2 us_split_discrs4)))))
(define-fun us_split_discrs__ref___split_discrs__content__3__projection ((a us_split_discrs__ref2)) us_split_discrs4 
  (us_split_discrs__content2 a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__unbounded_strings__char_vectors__vector us_main_type1)))))
(define-fun us_split_fields_rec__unbounded_strings__char_vectors__vector__projection ((a us_split_fields4)) us_main_type1 
  (rec__unbounded_strings__char_vectors__vector a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep3 0))
(((us_repqtmk2
  (us_split_discrs5 us_split_discrs4)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep3)) us_split_discrs4 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep3)) us_split_fields4 
  (us_split_fields5 a))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const unbounded_strings__char_vectors__vector__capacity__first__bit Int)

(declare-const unbounded_strings__char_vectors__vector__capacity__last__bit Int)

(declare-const unbounded_strings__char_vectors__vector__capacity__position Int)

;; unbounded_strings__char_vectors__vector__capacity__first__bit_axiom
  (assert
  (<= 0 unbounded_strings__char_vectors__vector__capacity__first__bit))

;; unbounded_strings__char_vectors__vector__capacity__last__bit_axiom
  (assert
  (< unbounded_strings__char_vectors__vector__capacity__first__bit unbounded_strings__char_vectors__vector__capacity__last__bit))

;; unbounded_strings__char_vectors__vector__capacity__position_axiom
  (assert (<= 0 unbounded_strings__char_vectors__vector__capacity__position))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-const dummy12 us_rep3)

(declare-datatypes ((unbounded_string__ref 0))
(((unbounded_string__refqtmk (unbounded_string__content us_rep3)))))
(define-fun unbounded_string__ref_unbounded_string__content__projection ((a unbounded_string__ref)) us_rep3 
  (unbounded_string__content a))

(define-fun to_rep6 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep6 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range10
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range10 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun in_range11 ((rec__unbounded_strings__char_vectors__vector__capacity1 Int)
  (a us_split_discrs4)) Bool (= rec__unbounded_strings__char_vectors__vector__capacity1 
  (to_rep6 (rec__unbounded_strings__char_vectors__vector__capacity a))))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const unbounded_strings__char_vectors__vector__capacity__first__bit1 Int)

(declare-const unbounded_strings__char_vectors__vector__capacity__last__bit1 Int)

(declare-const unbounded_strings__char_vectors__vector__capacity__position1 Int)

;; unbounded_strings__char_vectors__vector__capacity__first__bit_axiom
  (assert
  (<= 0 unbounded_strings__char_vectors__vector__capacity__first__bit1))

;; unbounded_strings__char_vectors__vector__capacity__last__bit_axiom
  (assert
  (< unbounded_strings__char_vectors__vector__capacity__first__bit1 unbounded_strings__char_vectors__vector__capacity__last__bit1))

;; unbounded_strings__char_vectors__vector__capacity__position_axiom
  (assert
  (<= 0 unbounded_strings__char_vectors__vector__capacity__position1))

(declare-fun user_eq13 (us_rep3 us_rep3) Bool)

(declare-const dummy13 us_rep3)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep3)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep3 
  (vector__content a))

(declare-const s__split_discrs us_split_discrs4)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-fun length2 (us_rep3) Int)

(declare-fun length__function_guard (Int us_rep3) Bool)

(define-fun dynamic_invariant4 ((temp___expr_300 us_rep3)
  (temp___is_init_296 Bool) (temp___skip_constant_297 Bool)
  (temp___do_toplevel_298 Bool)
  (temp___do_typ_inv_299 Bool)) Bool (=>
                                     (not (= temp___skip_constant_297 true))
                                     (in_range11 32
                                     (us_split_discrs5 temp___expr_300))))

;; temp___result_306'def
  (assert
  (forall ((temp___305 us_rep3)) (length__function_guard (length2 temp___305)
  temp___305)))

(define-fun default_initial_assumption2 ((temp___expr_302 us_rep3)
  (temp___skip_top_level_303 Bool)) Bool (and
                                         (= (to_rep6
                                            (rec__unbounded_strings__char_vectors__vector__capacity
                                            (us_split_discrs5
                                            temp___expr_302))) 32)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_303 true))
                                         (= (length2 temp___expr_302) 0))))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

;; length__post_axiom
  (assert
  (forall ((s us_rep3))
  (! (=> (dynamic_invariant4 s true true true true)
     (let ((result (length2 s)))
     (=> (length__function_guard result s) (dynamic_invariant result true
     false true true)))) :pattern ((length2 s)) )))

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const r54b Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-fun to_string (us_rep3) us_t)

(declare-fun to_string__function_guard (us_t us_rep3) Bool)

;; to_string__post_axiom
  (assert
  (forall ((s us_rep3))
  (! (=> (dynamic_invariant4 s true true true true)
     (let ((result (to_string s)))
     (and (forall ((s1 us_rep3)) (length__function_guard (length2 s1) s1))
     (=> (to_string__function_guard result s)
     (and (and (= (length1 result) (length2 s)) (= (first1 result) 1))
     (dynamic_invariant3 result true false true true)))))) :pattern (
  (to_string s)) )))

(declare-const tmp us_t)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const str__first integer)

(declare-const str__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(define-fun dynamic_invariant5 ((temp___expr_172 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (<= 0 8)) (in_range7 temp___expr_172)))

(declare-sort valued_tokens 0)

(define-fun in_range12 ((x Int)) Bool (and (<= 3 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (valued_tokens valued_tokens) Bool)

(declare-const dummy14 valued_tokens)

(declare-datatypes ((valued_tokens__ref 0))
(((valued_tokens__refqtmk (valued_tokens__content valued_tokens)))))
(define-fun valued_tokens__ref_valued_tokens__content__projection ((a valued_tokens__ref)) valued_tokens 
  (valued_tokens__content a))

(define-fun dynamic_invariant6 ((temp___expr_179 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (=>
                                     (or (= temp___is_init_175 true)
                                     (<= 3 8)) (in_range12 temp___expr_179)))

(define-fun dynamic_invariant7 ((temp___expr_186 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=>
                                     (or (= temp___is_init_182 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_186)))

(declare-sort parse_state 0)

(define-fun in_range13 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq15 (parse_state parse_state) Bool)

(declare-const dummy15 parse_state)

(declare-datatypes ((parse_state__ref 0))
(((parse_state__refqtmk (parse_state__content parse_state)))))
(define-fun parse_state__ref_parse_state__content__projection ((a parse_state__ref)) parse_state 
  (parse_state__content a))

(define-fun dynamic_invariant8 ((temp___expr_371 Int)
  (temp___is_init_367 Bool) (temp___skip_constant_368 Bool)
  (temp___do_toplevel_369 Bool)
  (temp___do_typ_inv_370 Bool)) Bool (=>
                                     (or (= temp___is_init_367 true)
                                     (<= 0 9)) (in_range13 temp___expr_371)))

(declare-sort terminal_states 0)

(define-fun in_range14 ((x Int)) Bool (and (<= 0 x) (<= x 9)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq16 (terminal_states terminal_states) Bool)

(declare-const dummy16 terminal_states)

(declare-datatypes ((terminal_states__ref 0))
(((terminal_states__refqtmk (terminal_states__content terminal_states)))))
(define-fun terminal_states__ref_terminal_states__content__projection ((a terminal_states__ref)) terminal_states 
  (terminal_states__content a))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const lexer__token__kind__first__bit1 Int)

(declare-const lexer__token__kind__last__bit1 Int)

(declare-const lexer__token__kind__position1 Int)

;; lexer__token__kind__first__bit_axiom
  (assert (<= 0 lexer__token__kind__first__bit1))

;; lexer__token__kind__last__bit_axiom
  (assert (< lexer__token__kind__first__bit1 lexer__token__kind__last__bit1))

;; lexer__token__kind__position_axiom
  (assert (<= 0 lexer__token__kind__position1))

(declare-const lexer__token__value__first__bit1 Int)

(declare-const lexer__token__value__last__bit1 Int)

(declare-const lexer__token__value__position1 Int)

;; lexer__token__value__first__bit_axiom
  (assert (<= 0 lexer__token__value__first__bit1))

;; lexer__token__value__last__bit_axiom
  (assert
  (< lexer__token__value__first__bit1 lexer__token__value__last__bit1))

;; lexer__token__value__position_axiom
  (assert (<= 0 lexer__token__value__position1))

(declare-const lexer__token__line__first__bit1 Int)

(declare-const lexer__token__line__last__bit1 Int)

(declare-const lexer__token__line__position1 Int)

;; lexer__token__line__first__bit_axiom
  (assert (<= 0 lexer__token__line__first__bit1))

;; lexer__token__line__last__bit_axiom
  (assert (< lexer__token__line__first__bit1 lexer__token__line__last__bit1))

;; lexer__token__line__position_axiom
  (assert (<= 0 lexer__token__line__position1))

(declare-const lexer__token__col__first__bit1 Int)

(declare-const lexer__token__col__last__bit1 Int)

(declare-const lexer__token__col__position1 Int)

;; lexer__token__col__first__bit_axiom
  (assert (<= 0 lexer__token__col__first__bit1))

;; lexer__token__col__last__bit_axiom
  (assert (< lexer__token__col__first__bit1 lexer__token__col__last__bit1))

;; lexer__token__col__position_axiom
  (assert (<= 0 lexer__token__col__position1))

(declare-const lexer__token__length__first__bit1 Int)

(declare-const lexer__token__length__last__bit1 Int)

(declare-const lexer__token__length__position1 Int)

;; lexer__token__length__first__bit_axiom
  (assert (<= 0 lexer__token__length__first__bit1))

;; lexer__token__length__last__bit_axiom
  (assert
  (< lexer__token__length__first__bit1 lexer__token__length__last__bit1))

;; lexer__token__length__position_axiom
  (assert (<= 0 lexer__token__length__position1))

(declare-fun user_eq17 (us_rep1 us_rep1) Bool)

(declare-const dummy17 us_rep1)

(declare-datatypes ((t55b__ref 0))
(((t55b__refqtmk (t55b__content us_rep1)))))
(define-fun t55b__ref_t55b__content__projection ((a t55b__ref)) us_rep1 
  (t55b__content a))

(declare-datatypes ((t64b__ref 0))
(((t64b__refqtmk (t64b__content us_t)))))
(define-fun t64b__ref_t64b__content__projection ((a t64b__ref)) us_t 
  (t64b__content a))

(declare-datatypes ((t67b__ref 0))
(((t67b__refqtmk (t67b__content us_t)))))
(define-fun t67b__ref_t67b__content__projection ((a t67b__ref)) us_t 
  (t67b__content a))

(declare-datatypes ((t71b__ref 0))
(((t71b__refqtmk (t71b__content us_t)))))
(define-fun t71b__ref_t71b__content__projection ((a t71b__ref)) us_t 
  (t71b__content a))

(declare-fun temp___String_Literal_485 (tuple0) (Array Int character))

;; temp___String_Literal_485__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 1)) 105)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 2)) 110))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 3)) 118)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 4)) 97))
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 5)) 108))
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 6)) 105)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 7)) 100)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 8)) 32)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 9)) 99))
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 10)) 104)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 11)) 97))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 12)) 114)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 13)) 97))
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 14)) 99)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 15)) 116)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 16)) 101)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 17)) 114))
     (and
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 18)) 32)
     (= (to_rep1 (select (temp___String_Literal_485 us_void_param) 19)) 39)))))) :pattern (
  (temp___String_Literal_485 us_void_param)) )))

(declare-fun temp___String_Literal_487 (tuple0) (Array Int character))

;; temp___String_Literal_487__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep1 (select (temp___String_Literal_487 us_void_param) 1)) 39) :pattern (
  (temp___String_Literal_487 us_void_param)) )))

(declare-fun temp___String_Literal_503 (tuple0) (Array Int character))

;; temp___String_Literal_503__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 1)) 105)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 2)) 110))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 3)) 118)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 4)) 97))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 5)) 108)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 6)) 105)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 7)) 100)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 8)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 9)) 102)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 10)) 111))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 11)) 114)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 12)) 109))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 13)) 97)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 14)) 116)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 15)) 44)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 16)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 17)) 109)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 18)) 117)))))
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 19)) 115)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 20)) 116))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 21)) 32)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 22)) 98)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 23)) 101)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 24)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 25)) 39)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 26)) 98))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 27)) 39)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 28)) 32))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 29)) 111)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 30)) 114)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 31)) 32)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 32)) 39))
     (and
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 33)) 120)
     (= (to_rep1 (select (temp___String_Literal_503 us_void_param) 34)) 39))))))) :pattern (
  (temp___String_Literal_503 us_void_param)) )))

(declare-fun temp___String_Literal_527 (tuple0) (Array Int character))

;; temp___String_Literal_527__def_axiom
  (assert true)

(declare-fun temp___String_Literal_532 (tuple0) (Array Int character))

;; temp___String_Literal_532__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 1)) 113)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 2)) 117))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 3)) 111)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 4)) 116))
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 5)) 101)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 6)) 100)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 7)) 32)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 8)) 115))
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 9)) 121)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 10)) 109))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 11)) 98)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 12)) 111))
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 13)) 108)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 14)) 32)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 15)) 105)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 16)) 115))
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 17)) 32))))
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 18)) 110)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 19)) 111))
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 20)) 116)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 21)) 32)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 22)) 116)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 23)) 101))
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 24)) 114)))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 25)) 109)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 26)) 105))
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 27)) 110)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 28)) 97)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 29)) 116)
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 30)) 101))
     (= (to_rep1 (select (temp___String_Literal_532 us_void_param) 31)) 100)))))) :pattern (
  (temp___String_Literal_532 us_void_param)) )))

(declare-fun temp___String_Literal_533 (tuple0) (Array Int character))

;; temp___String_Literal_533__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 1)) 98)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 2)) 105))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 3)) 110)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 4)) 97))
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 5)) 114))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 6)) 121)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 7)) 32)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 8)) 111)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 9)) 114))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 10)) 32)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 11)) 104))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 12)) 101)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 13)) 120))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 14)) 32)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 15)) 115)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 16)) 121)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 17)) 109))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 18)) 98)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 19)) 111)))))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 20)) 108)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 21)) 32))
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 22)) 105))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 23)) 115)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 24)) 32)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 25)) 110)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 26)) 111))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 27)) 116)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 28)) 32))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 29)) 102)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 30)) 105))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 31)) 110)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 32)) 105)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 33)) 115)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 34)) 104))
     (and
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 35)) 101)
     (= (to_rep1 (select (temp___String_Literal_533 us_void_param) 36)) 100))))))) :pattern (
  (temp___String_Literal_533 us_void_param)) )))

(declare-fun temp___String_Literal_534 (tuple0) (Array Int character))

;; temp___String_Literal_534__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 1)) 115)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 2)) 116))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 3)) 114)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 4)) 105))
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 5)) 110)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 6)) 103)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 7)) 32)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 8)) 108))
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 9)) 105)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 10)) 116))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 11)) 101)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 12)) 114))
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 13)) 97)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 14)) 108)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 15)) 32)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 16)) 105))
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 17)) 115))))
     (and
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 18)) 32)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 19)) 110))
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 20)) 111)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 21)) 116)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 22)) 32)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 23)) 116))
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 24)) 101)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 25)) 114))))
     (and
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 26)) 109)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 27)) 105))
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 28)) 110)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 29)) 97)))
     (and
     (and
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 30)) 116)
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 31)) 101))
     (= (to_rep1 (select (temp___String_Literal_534 us_void_param) 32)) 100)))))) :pattern (
  (temp___String_Literal_534 us_void_param)) )))

(define-fun dynamic_invariant9 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant10 ((temp___expr_378 Int)
  (temp___is_init_374 Bool) (temp___skip_constant_375 Bool)
  (temp___do_toplevel_376 Bool)
  (temp___do_typ_inv_377 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_374 true)
                                     (<= 0 9)) (in_range14 temp___expr_378))
                                     (=> (= temp___do_toplevel_376 true)
                                     (=> (= temp___is_init_374 true)
                                     (or
                                     (and (<= 2 temp___expr_378)
                                     (<= temp___expr_378 2))
                                     (and (<= 9 temp___expr_378)
                                     (<= temp___expr_378 9)))))))

(define-fun dynamic_predicate ((temp___382 Int)) Bool (or
                                                      (and (<= 2 temp___382)
                                                      (<= temp___382 2))
                                                      (and (<= 9 temp___382)
                                                      (<= temp___382 9))))

;; local_invariant__post_axiom
  (assert true)

;; local_invariant__def_axiom
  (assert
  (forall ((lexer__current_read__fields us_split_fields)
  (lexer__next_read__fields us_split_fields))
  (forall ((lexer__current_read__discrs us_split_discrs)
  (lexer__next_read__discrs us_split_discrs))
  (! (=
     (= (local_invariant lexer__current_read__fields
        lexer__current_read__discrs lexer__next_read__fields
        lexer__next_read__discrs) true)
     (and (not (= current_read__attr__constrained true))
     (not (= next_read__attr__constrained true)))) :pattern ((local_invariant
                                                             lexer__current_read__fields
                                                             lexer__current_read__discrs
                                                             lexer__next_read__fields
                                                             lexer__next_read__discrs)) ))))

;; invariant____post_axiom
  (assert true)

(define-fun dynamic_invariant11 ((temp___expr_206 Int)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)
  (temp___do_typ_inv_205 Bool)) Bool (=>
                                     (or (= temp___is_init_202 true)
                                     (<= 0 2)) (in_range5 temp___expr_206)))

(define-fun dynamic_invariant12 ((temp___expr_287 Int)
  (temp___is_init_283 Bool) (temp___skip_constant_284 Bool)
  (temp___do_toplevel_285 Bool)
  (temp___do_typ_inv_286 Bool)) Bool (=>
                                     (or (= temp___is_init_283 true)
                                     (<= 0 2147483647)) (in_range10
                                     temp___expr_287)))

(assert
;; defqtvc
 ;; File "lexer.ads", line 79, characters 0-0
  (not
  (forall ((current_read__split_fields character)
  (current_read__split_discrs read_status)
  (next_read__split_fields character) (next_read__split_discrs read_status)
  (name_table us_private) (the_filename Int) (current_line Int)
  (current_col Int) (current_pos Int) (s__split_fields us_main_type1)
  (first_line Int) (first_col Int) (first_pos Int) (state Int) (c Int)
  (spark__branch Bool) (current_read__split_fields1 character)
  (current_read__split_discrs1 read_status)
  (next_read__split_fields1 character) (next_read__split_discrs1 read_status)
  (current_line1 Int) (current_col1 Int) (current_pos1 Int)
  (s__split_fields1 us_main_type1) (first_line1 Int) (first_col1 Int)
  (first_pos1 Int) (state1 Int) (c1 Int) (spark__branch1 Bool)
  (current_read__split_fields2 character)
  (current_read__split_discrs2 read_status)
  (next_read__split_fields2 character) (next_read__split_discrs2 read_status)
  (current_pos2 Int) (s__split_fields2 us_main_type1) (state2 Int))
  (=> (dynamic_invariant7 the_filename true false true true)
  (=> (= current_read__attr__constrained false)
  (=> (dynamic_invariant1 current_line true false true true)
  (=> (dynamic_invariant current_col true false true true)
  (=> (dynamic_invariant current_pos true false true true)
  (=> (= next_read__attr__constrained false)
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character) (next_read__split_discrs3 read_status)
  (name_table1 us_private)) (invariant____function_guard
  (invariant__ (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3) name_table1
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3) name_table1
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (= (invariant__ (us_split_fieldsqtmk current_read__split_fields)
     (us_split_discrsqtmk current_read__split_discrs) name_table
     (us_split_fieldsqtmk next_read__split_fields)
     (us_split_discrsqtmk next_read__split_discrs)) true)
  (=> (not (= t__attr__constrained true))
  (=> (default_initial_assumption2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields)) false)
  (=> (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields)) false
  false true true)
  (=> (dynamic_invariant first_line false false true true)
  (=> (dynamic_invariant first_col false false true true)
  (=> (dynamic_invariant first_pos false false true true)
  (=> (dynamic_invariant8 state false false true true)
  (=> (dynamic_invariant2 c false false true true)
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character)
  (next_read__split_discrs3 read_status)) (local_invariant__function_guard
  (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (forall ((o us_split_discrs4) (s__split_fields3 us_main_type1))
  (length__function_guard
  (length2 (us_repqtmk2 o (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 o (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character)
  (next_read__split_discrs3 read_status)) (local_invariant__function_guard
  (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (exists ((current_line2 Int) (current_col2 Int) (current_pos3 Int)
  (s__split_fields3 us_main_type1) (first_line2 Int) (first_col2 Int)
  (first_pos2 Int) (c2 Int))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (dynamic_invariant first_line2 false true true true)
  (dynamic_invariant8 state false true true true)) (dynamic_invariant
  first_col2 false true true true)) (dynamic_invariant2 c2 false true true
  true)) (dynamic_invariant first_pos2 false true true true))
  (dynamic_invariant1 current_line2 true true true true)) (dynamic_invariant
  current_col2 true true true true)) (dynamic_invariant current_pos3 true
  true true true)) (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)) false
  true true true))
  (exists ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character) (next_read__split_discrs3 read_status)
  (current_line3 Int) (current_col3 Int) (current_pos4 Int))
  (and
  (and
  (= (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
     (us_split_discrsqtmk current_read__split_discrs3)
     (us_split_fieldsqtmk next_read__split_fields3)
     (us_split_discrsqtmk next_read__split_discrs3)) true)
  (and
  (and (dynamic_invariant1 current_line3 true true true true)
  (dynamic_invariant current_col3 true true true true)) (dynamic_invariant
  current_pos4 true true true true)))
  (exists ((temp___477 Int))
  (and (= (to_rep3 current_read__split_discrs3) temp___477)
  (exists ((spark__branch2 Bool))
  (and
  (= spark__branch2 (ite (= temp___477 1) true
                    (ite (= temp___477 2) true false)))
  (and (not (= spark__branch2 true))
  (and (= first_line1 current_line3)
  (and (= first_col1 current_col3)
  (and (= first_pos1 current_pos4)
  (exists ((o Int))
  (and (= (to_rep1 current_read__split_fields3) o)
  (and (= c1 o)
  (let ((o1 s__split_discrs))
  (exists ((s__split_fields4 us_main_type1))
  (and
  (and
  (= (length2 (us_repqtmk2 o1 (us_split_fieldsqtmk2 s__split_fields4))) 0)
  (dynamic_invariant4
  (us_repqtmk2 o1 (us_split_fieldsqtmk2 s__split_fields4)) true true true
  true))
  (exists ((current_pos5 Int))
  (and (= current_pos5 current_pos4)
  (and
  (and
  (and
  (and
  (= (local_invariant (us_split_fieldsqtmk current_read__split_fields1)
     (us_split_discrsqtmk current_read__split_discrs1)
     (us_split_fieldsqtmk next_read__split_fields1)
     (us_split_discrsqtmk next_read__split_discrs1)) true)
  (= (length2
     (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields1))) (+ 
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields4))) 1)))
  (<= current_pos5 current_pos1))
  (and
  (and
  (and (dynamic_invariant1 current_line1 true true true true)
  (dynamic_invariant current_col1 true true true true)) (dynamic_invariant
  current_pos1 true true true true)) (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields1)) true
  true true true)))
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (= c1 40) true false))
  (and (not (= spark__branch3 true))
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (= c1 41) true false))
  (and (not (= spark__branch4 true))
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (= c1 124) true false))
  (ite (= spark__branch5 true)
  (and (= state1 1) (= spark__branch spark__branch5))
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (= c1 35) true false))
  (ite (= spark__branch6 true)
  (and (= state1 5) (= spark__branch spark__branch6))
  (exists ((spark__branch7 Bool))
  (and
  (= spark__branch7 (and (ite (<= 48 c1) true false) (ite (<= c1 57) true
                                                     false)))
  (ite (= spark__branch7 true)
  (and (= state1 3) (= spark__branch spark__branch7))
  (exists ((spark__branch8 Bool))
  (and
  (= spark__branch8 (or (or (and (ite (<= 65 c1) true false) (ite (<= c1 90)
                                                             true false)) (and 
  (ite (<= 97 c1) true false) (ite (<= c1 122) true false))) (or (or (or (or (or (or (and 
  (ite (<= 33 c1) true false) (ite (<= c1 33) true false)) (and (ite (<= 36 c1)
                                                                true false) 
  (ite (<= c1 38) true false))) (and (ite (<= 42 c1) true false) (ite (<= c1 43)
                                                                 true false))) (and 
  (ite (<= 45 c1) true false) (ite (<= c1 47) true false))) (and (ite (<= 60 c1)
                                                                 true false) 
  (ite (<= c1 64) true false))) (and (ite (<= 94 c1) true false) (ite (<= c1 95)
                                                                 true false))) (and 
  (ite (<= 126 c1) true false) (ite (<= c1 126) true false)))))
  (ite (= spark__branch8 true)
  (and (= state1 0) (= spark__branch spark__branch8))
  (and (= spark__branch (ite (= c1 34) true false))
  (and (= spark__branch true) (= state1 8))))))))))))))))))))))))))))))))))))))))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character)
  (next_read__split_discrs3 read_status)) (local_invariant__function_guard
  (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character)
  (next_read__split_discrs3 read_status)) (local_invariant__function_guard
  (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character)
  (next_read__split_discrs3 read_status)) (local_invariant__function_guard
  (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (forall ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character)
  (next_read__split_discrs3 read_status)) (local_invariant__function_guard
  (local_invariant (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3))
  (us_split_fieldsqtmk current_read__split_fields3)
  (us_split_discrsqtmk current_read__split_discrs3)
  (us_split_fieldsqtmk next_read__split_fields3)
  (us_split_discrsqtmk next_read__split_discrs3)))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (exists ((o Int))
  (and (= (to_rep3 current_read__split_discrs1) o)
  (ite (= o 0)
  (exists ((o1 Int))
  (and (= (to_rep1 current_read__split_fields1) o1)
  (exists ((c2 Int))
  (and (= c2 o1)
  (and
  (or (not (=> (not (= state1 6)) (= state1 7)))
  (let ((o2 (us_repqtmk2 s__split_discrs
            (us_split_fieldsqtmk2 s__split_fields1))))
  (let ((o3 (length2 o2)))
  (and (length__function_guard o3 o2) (dynamic_invariant o3 true false true
  true)))))
  (let ((o2 (us_repqtmk2 s__split_discrs
            (us_split_fieldsqtmk2 s__split_fields1))))
  (let ((o3 (length2 o2)))
  (and
  (and (length__function_guard o3 o2) (dynamic_invariant o3 true false true
  true))
  (exists ((o4 Int))
  (and (= (to_rep3 current_read__split_discrs1) o4)
  (exists ((current_read__split_fields3 character)
  (current_read__split_discrs3 read_status)
  (next_read__split_fields3 character) (next_read__split_discrs3 read_status)
  (the_file us_rep2) (current_line2 Int) (current_col2 Int)
  (current_pos3 Int) (s__split_fields3 us_main_type1) (state3 Int) (c3 Int))
  (and
  (and
  (and
  (and
  (and (= (to_rep3 current_read__split_discrs3) 0)
  (= (not (and (ite (in_range14 state3) true false) (ite (or
                                                         (and (<= 2 state3)
                                                         (<= state3 2))
                                                         (and (<= 9 state3)
                                                         (<= state3 9)))
                                                    true false))) true))
  (<= 1 (length2
        (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))))
  (<= first_pos1 current_pos3))
  (=> (or (= state3 6) (= state3 7))
  (<= 2 (length2
        (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))))
  (and
  (and
  (and
  (and
  (and
  (and (dynamic_invariant8 state3 false true true true) (dynamic_invariant2
  c3 false true true true)) (dynamic_invariant1 current_line2 true true true
  true)) (dynamic_invariant current_col2 true true true true))
  (dynamic_invariant current_pos3 true true true true)) (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)) false
  true true true))
  (or
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (= state3 3) true false))
  (ite (= spark__branch2 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (exists ((spark__branch3 Bool))
  (and
  (= spark__branch3 (and (ite (<= 48 c3) true false) (ite (<= c3 57) true
                                                     false)))
  (and (not (= spark__branch3 true))
  (and (= spark__branch1 (ite (= c3 46) true false))
  (not (= spark__branch1 true))))))
  (= current_read__split_fields2 current_read__split_fields3))
  (= current_read__split_discrs2 current_read__split_discrs3))
  (= next_read__split_fields2 next_read__split_fields3))
  (= next_read__split_discrs2 next_read__split_discrs3))
  (= current_pos2 current_pos3)) (= s__split_fields2 s__split_fields3))
  (= state2 state3))
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (= state3 4) true false))
  (ite (= spark__branch3 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (and (ite (<= 48 c3) true false) (ite (<= c3 57) true
                                                     false)))
  (not (= spark__branch1 true)))
  (= current_read__split_fields2 current_read__split_fields3))
  (= current_read__split_discrs2 current_read__split_discrs3))
  (= next_read__split_fields2 next_read__split_fields3))
  (= next_read__split_discrs2 next_read__split_discrs3))
  (= current_pos2 current_pos3)) (= s__split_fields2 s__split_fields3))
  (= state2 state3))
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (= state3 5) true false))
  (and (not (= spark__branch4 true))
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (= state3 6) true false))
  (ite (= spark__branch5 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (and (ite (<= 48 c3) true false) (ite (<= c3 49) true
                                                     false)))
  (not (= spark__branch1 true)))
  (= current_read__split_fields2 current_read__split_fields3))
  (= current_read__split_discrs2 current_read__split_discrs3))
  (= next_read__split_fields2 next_read__split_fields3))
  (= next_read__split_discrs2 next_read__split_discrs3))
  (= current_pos2 current_pos3)) (= s__split_fields2 s__split_fields3))
  (= state2 state3))
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (= state3 7) true false))
  (ite (= spark__branch6 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (or (or (and (ite (<= 48 c3) true false) (ite (<= c3 57)
                                                             true false)) (and 
  (ite (<= 65 c3) true false) (ite (<= c3 70) true false))) (and (ite (<= 97 c3)
                                                                 true false) 
  (ite (<= c3 102) true false)))) (not (= spark__branch1 true)))
  (= current_read__split_fields2 current_read__split_fields3))
  (= current_read__split_discrs2 current_read__split_discrs3))
  (= next_read__split_fields2 next_read__split_fields3))
  (= next_read__split_discrs2 next_read__split_discrs3))
  (= current_pos2 current_pos3)) (= s__split_fields2 s__split_fields3))
  (= state2 state3))
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (= state3 0) true false))
  (ite (= spark__branch7 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (or (or (or (and (ite (<= 65 c3) true false) (ite (<= c3 90)
                                                                 true false)) (and 
  (ite (<= 97 c3) true false) (ite (<= c3 122) true false))) (and (ite (<= 48 c3)
                                                                  true false) 
  (ite (<= c3 57) true false))) (or (or (or (or (or (or (and (ite (<= 33 c3)
                                                             true false) 
  (ite (<= c3 33) true false)) (and (ite (<= 36 c3) true false) (ite (<= c3 38)
                                                                true false))) (and 
  (ite (<= 42 c3) true false) (ite (<= c3 43) true false))) (and (ite (<= 45 c3)
                                                                 true false) 
  (ite (<= c3 47) true false))) (and (ite (<= 60 c3) true false) (ite (<= c3 64)
                                                                 true false))) (and 
  (ite (<= 94 c3) true false) (ite (<= c3 95) true false))) (and (ite (<= 126 c3)
                                                                 true false) 
  (ite (<= c3 126) true false))))) (not (= spark__branch1 true)))
  (= current_read__split_fields2 current_read__split_fields3))
  (= current_read__split_discrs2 current_read__split_discrs3))
  (= next_read__split_fields2 next_read__split_fields3))
  (= next_read__split_discrs2 next_read__split_discrs3))
  (= current_pos2 current_pos3)) (= s__split_fields2 s__split_fields3))
  (= state2 state3))
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (= state3 1) true false))
  (ite (= spark__branch8 true)
  (and (= spark__branch1 (ite (= c3 124) true false))
  (and (= spark__branch1 true)
  (exists ((current_pos4 Int))
  (and (= current_pos4 current_pos3)
  (exists ((current_line3 Int) (current_col3 Int))
  (and
  (and
  (and
  (and
  (= (local_invariant (us_split_fieldsqtmk current_read__split_fields2)
     (us_split_discrsqtmk current_read__split_discrs2)
     (us_split_fieldsqtmk next_read__split_fields2)
     (us_split_discrsqtmk next_read__split_discrs2)) true)
  (= (length2
     (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2))) (+ 
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))) 1)))
  (<= current_pos4 current_pos2))
  (and
  (and
  (and (dynamic_invariant1 current_line3 true true true true)
  (dynamic_invariant current_col3 true true true true)) (dynamic_invariant
  current_pos2 true true true true)) (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2)) true
  true true true))) (= state2 2)))))))
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (= state3 8) true false))
  (and (= spark__branch9 true)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (= c3 34) true false))
  (and (= spark__branch10 true)
  (exists ((o5 Bool))
  (and
  (exists ((o6 Int))
  (and (= (to_rep3 next_read__split_discrs3) o6)
  (ite (= o6 0)
  (exists ((o7 Int))
  (and (= (to_rep1 next_read__split_fields3) o7)
  (= o5 (ite (= o7 34) true false)))) (= o5 false))))
  (and (= spark__branch1 o5)
  (and (not (= spark__branch1 true))
  (exists ((current_pos4 Int))
  (and (= current_pos4 current_pos3)
  (exists ((current_line3 Int) (current_col3 Int))
  (and
  (and
  (and
  (and
  (= (local_invariant (us_split_fieldsqtmk current_read__split_fields2)
     (us_split_discrsqtmk current_read__split_discrs2)
     (us_split_fieldsqtmk next_read__split_fields2)
     (us_split_discrsqtmk next_read__split_discrs2)) true)
  (= (length2
     (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2))) (+ 
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))) 1)))
  (<= current_pos4 current_pos2))
  (and
  (and
  (and (dynamic_invariant1 current_line3 true true true true)
  (dynamic_invariant current_col3 true true true true)) (dynamic_invariant
  current_pos2 true true true true)) (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2)) true
  true true true))) (= state2 9))))))))))))))))))))))))))))))))))))
  (exists ((current_read__split_fields4 character)
  (current_read__split_discrs4 read_status)
  (next_read__split_fields4 character) (next_read__split_discrs4 read_status)
  (the_file1 us_rep2) (current_line3 Int) (current_col3 Int)
  (current_pos4 Int))
  (and
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (= state3 3) true false))
  (ite (= spark__branch2 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (exists ((spark__branch3 Bool))
  (and
  (= spark__branch3 (and (ite (<= 48 c3) true false) (ite (<= c3 57) true
                                                     false)))
  (ite (= spark__branch3 true)
  (and (= spark__branch1 spark__branch3) (= state2 state3))
  (and (= spark__branch1 (ite (= c3 46) true false))
  (and (= spark__branch1 true) (= state2 4))))))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (= state3 4) true false))
  (ite (= spark__branch3 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (and (ite (<= 48 c3) true false) (ite (<= c3 57) true
                                                     false)))
  (= spark__branch1 true))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (= state2 state3))
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (= state3 5) true false))
  (ite (= spark__branch4 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (= c3 98) true false))
  (ite (= spark__branch5 true)
  (and (= state2 6) (= spark__branch1 spark__branch5))
  (and (= spark__branch1 (ite (= c3 120) true false)) (= state2 7)))))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (and
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (= state3 6) true false))
  (ite (= spark__branch5 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (and (ite (<= 48 c3) true false) (ite (<= c3 49) true
                                                     false)))
  (= spark__branch1 true))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (= state3 7) true false))
  (ite (= spark__branch6 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (or (or (and (ite (<= 48 c3) true false) (ite (<= c3 57)
                                                             true false)) (and 
  (ite (<= 65 c3) true false) (ite (<= c3 70) true false))) (and (ite (<= 97 c3)
                                                                 true false) 
  (ite (<= c3 102) true false)))) (= spark__branch1 true))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (= state3 0) true false))
  (ite (= spark__branch7 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (= spark__branch1 (or (or (or (and (ite (<= 65 c3) true false) (ite (<= c3 90)
                                                                 true false)) (and 
  (ite (<= 97 c3) true false) (ite (<= c3 122) true false))) (and (ite (<= 48 c3)
                                                                  true false) 
  (ite (<= c3 57) true false))) (or (or (or (or (or (or (and (ite (<= 33 c3)
                                                             true false) 
  (ite (<= c3 33) true false)) (and (ite (<= 36 c3) true false) (ite (<= c3 38)
                                                                true false))) (and 
  (ite (<= 42 c3) true false) (ite (<= c3 43) true false))) (and (ite (<= 45 c3)
                                                                 true false) 
  (ite (<= c3 47) true false))) (and (ite (<= 60 c3) true false) (ite (<= c3 64)
                                                                 true false))) (and 
  (ite (<= 94 c3) true false) (ite (<= c3 95) true false))) (and (ite (<= 126 c3)
                                                                 true false) 
  (ite (<= c3 126) true false))))) (= spark__branch1 true))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (= state3 1) true false))
  (ite (= spark__branch8 true)
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= spark__branch1 (ite (= c3 124) true false))
  (not (= spark__branch1 true)))
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (= state3 8) true false))
  (and (= spark__branch9 true)
  (exists ((spark__branch10 Bool))
  (and (= spark__branch10 (ite (= c3 34) true false))
  (ite (= spark__branch10 true)
  (exists ((o5 Bool))
  (and
  (exists ((o6 Int))
  (and (= (to_rep3 next_read__split_discrs3) o6)
  (ite (= o6 0)
  (exists ((o7 Int))
  (and (= (to_rep1 next_read__split_fields3) o7)
  (= o5 (ite (= o7 34) true false)))) (= o5 false))))
  (and (= spark__branch1 o5)
  (and (= spark__branch1 true)
  (exists ((current_pos5 Int))
  (and (= current_pos5 current_pos3)
  (exists ((next_read__split_fields5 character))
  (and (= next_read__split_fields5 next_read__split_fields3)
  (exists ((next_read__split_discrs5 read_status))
  (and (= next_read__split_discrs5 next_read__split_discrs3)
  (and
  (and
  (and
  (= (local_invariant (us_split_fieldsqtmk current_read__split_fields4)
     (us_split_discrsqtmk current_read__split_discrs4)
     (us_split_fieldsqtmk next_read__split_fields4)
     (us_split_discrsqtmk next_read__split_discrs4)) true)
  (= (bool_eq2
     (us_repqtmk (us_split_discrsqtmk current_read__split_discrs4)
     (us_split_fieldsqtmk current_read__split_fields4))
     (us_repqtmk (us_split_discrsqtmk next_read__split_discrs5)
     (us_split_fieldsqtmk next_read__split_fields5))) true))
  (<= current_pos5 current_pos4))
  (and
  (and (dynamic_invariant1 current_line3 true true true true)
  (dynamic_invariant current_col3 true true true true)) (dynamic_invariant
  current_pos4 true true true true)))))))))))))
  (and
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= spark__branch1 spark__branch10)
  (= current_read__split_fields4 current_read__split_fields3))
  (= current_read__split_discrs4 current_read__split_discrs3))
  (= next_read__split_fields4 next_read__split_fields3))
  (= next_read__split_discrs4 next_read__split_discrs3))
  (= the_file1 the_file)) (= current_line3 current_line2))
  (= current_col3 current_col2)) (= current_pos4 current_pos3))))))))))))))))))))
  (= state2 state3)))))))))))
  (exists ((current_pos5 Int))
  (and (= current_pos5 current_pos4)
  (exists ((current_line4 Int) (current_col4 Int))
  (and
  (and
  (and
  (and
  (= (local_invariant (us_split_fieldsqtmk current_read__split_fields2)
     (us_split_discrsqtmk current_read__split_discrs2)
     (us_split_fieldsqtmk next_read__split_fields2)
     (us_split_discrsqtmk next_read__split_discrs2)) true)
  (= (length2
     (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2))) (+ 
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))) 1)))
  (<= current_pos5 current_pos2))
  (and
  (and
  (and (dynamic_invariant1 current_line4 true true true true)
  (dynamic_invariant current_col4 true true true true)) (dynamic_invariant
  current_pos2 true true true true)) (dynamic_invariant4
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2)) true
  true true true)))
  (exists ((o5 Int))
  (and (= (to_rep3 current_read__split_discrs2) o5) (not (= o5 0))))))))))))))))))))))))
  (and
  (and
  (and
  (and
  (and
  (and
  (and (= spark__branch1 spark__branch)
  (= current_read__split_fields2 current_read__split_fields1))
  (= current_read__split_discrs2 current_read__split_discrs1))
  (= next_read__split_fields2 next_read__split_fields1))
  (= next_read__split_discrs2 next_read__split_discrs1))
  (= current_pos2 current_pos1)) (= s__split_fields2 s__split_fields1))
  (= state2 state1)))))
  (=>
  (forall ((s__split_fields3 us_main_type1)) (length__function_guard
  (length2
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3)))
  (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields3))))
  (=>
  (=> (or (= state2 2) (or (= state2 7) (= state2 6)))
  (<= 2 (length2
        (us_repqtmk2 s__split_discrs (us_split_fieldsqtmk2 s__split_fields2)))))
  (let ((o (us_repqtmk2 s__split_discrs
           (us_split_fieldsqtmk2 s__split_fields2))))
  (let ((lexer__read_token__B_6__tmp__assume (to_string o)))
  (=> (forall ((o1 us_rep3)) (length__function_guard (length2 o1) o1))
  (=>
  (and (to_string__function_guard lexer__read_token__B_6__tmp__assume o)
  (and (dynamic_invariant3 lexer__read_token__B_6__tmp__assume true false
  true true)
  (and (= (length1 lexer__read_token__B_6__tmp__assume) (length2 o))
  (= (first1 lexer__read_token__B_6__tmp__assume) 1))))
  (=> (= lexer__read_token__B_6__tmp__assume tmp)
  (=> (dynamic_invariant3 tmp true false true true)
  (forall ((o1 Int))
  (=>
  (ite (= (or (or (ite (= state2 0) true false) (ite (= state2 1) true false)) 
  (ite (= state2 2) true false)) true) (= o1 3)
  (ite (= state2 3) (= o1 4)
  (ite (= state2 4) (= o1 5)
  (ite (= (or (ite (= state2 5) true false) (ite (= state2 7) true false)) true)
  (= o1 7) (ite (= state2 6) (= o1 6) (= o1 8))))))
  (forall ((k Int))
  (=> (= k o1)
  (=> (dynamic_invariant6 k true false true true)
  (=>
  (not
  (= (or (or (ite (= state2 0) true false) (ite (= state2 3) true false)) 
  (ite (= state2 4) true false)) true))
  (=>
  (not
  (= (or (ite (= state2 1) true false) (ite (= state2 8) true false)) true))
  (=>
  (= (or (ite (= state2 2) true false) (ite (= state2 9) true false)) true)
  (let ((o2 (- (last1 tmp) 1)))
  (=> (in_range1 o2)
  (let ((o3 (+ (first1 tmp) 1)))
  (=> (in_range1 o3) (=> (<= o3 o2) (<= (first1 tmp) o3))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
