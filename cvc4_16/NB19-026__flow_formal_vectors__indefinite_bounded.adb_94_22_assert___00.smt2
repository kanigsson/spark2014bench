;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i))
  (<= (capacity_rangeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (capacity_range capacity_range) Bool)

(declare-const dummy capacity_range)

(declare-datatypes ((capacity_range__ref 0))
(((capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__indefinite_bounded__vect__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__indefinite_bounded__vect__vector__capacity__projection ((a us_split_discrs)) capacity_range 
  (rec__indefinite_bounded__vect__vector__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__indefinite_bounded__vect__vector us_main_type)))))
(define-fun us_split_fields_rec__indefinite_bounded__vect__vector__projection ((a us_split_fields)) us_main_type 
  (rec__indefinite_bounded__vect__vector a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const indefinite_bounded__vect__vector__capacity__first__bit Int)

(declare-const indefinite_bounded__vect__vector__capacity__last__bit Int)

(declare-const indefinite_bounded__vect__vector__capacity__position Int)

;; indefinite_bounded__vect__vector__capacity__first__bit_axiom
  (assert (<= 0 indefinite_bounded__vect__vector__capacity__first__bit))

;; indefinite_bounded__vect__vector__capacity__last__bit_axiom
  (assert
  (< indefinite_bounded__vect__vector__capacity__first__bit indefinite_bounded__vect__vector__capacity__last__bit))

;; indefinite_bounded__vect__vector__capacity__position_axiom
  (assert (<= 0 indefinite_bounded__vect__vector__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((vector__ref 0))
(((vector__refqtmk (vector__content us_rep)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep 
  (vector__content a))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(define-fun to_rep ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun capacity ((container us_rep)) Int (ite (= (distinct 1 0) true)
                                              (to_rep
                                              (rec__indefinite_bounded__vect__vector__capacity
                                              (us_split_discrs1 container)))
                                              2147483647))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_233 Int)
  (temp___is_init_229 Bool) (temp___skip_constant_230 Bool)
  (temp___do_toplevel_231 Bool)
  (temp___do_typ_inv_232 Bool)) Bool (=>
                                     (or (= temp___is_init_229 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_233)))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant result true
     false true true))) :pattern ((length container)) )))

(declare-fun empty_vector (tuple0) us_rep)

(declare-fun empty_vector__function_guard (us_rep tuple0) Bool)

;; empty_vector__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (length (empty_vector us_void_param)) 0) :pattern ((empty_vector
                                                           us_void_param)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun length2 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length2 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun oeq1 ((left us_rep1)
  (right us_rep1)) Bool (and (= (length2 left) (length2 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

(declare-fun model1 (us_rep) us_rep1)

(declare-fun model__function_guard (us_rep1 us_rep) Bool)

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

(define-fun last_index ((container us_rep)) Int (last (model1 container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (extended_index extended_index) Bool)

(declare-const dummy3 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_219 Int)
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool)
  (temp___do_typ_inv_218 Bool)) Bool (=>
                                     (or (= temp___is_init_215 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_219)))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-fun copy (us_rep Int) us_rep)

(declare-fun copy__function_guard (us_rep us_rep Int) Bool)

;; copy__post_axiom
  (assert
  (forall ((source us_rep))
  (forall ((capacity1 Int))
  (! (=>
     (and (dynamic_invariant capacity1 true true true true)
     (=> (= (distinct 1 0) true)
     (or (= capacity1 0) (<= (length source) capacity1))))
     (let ((result (copy source capacity1)))
     (and (= (oeq1 (model1 result) (model1 source)) true)
     (ite (= capacity1 0)
     (= (to_rep
        (rec__indefinite_bounded__vect__vector__capacity
        (us_split_discrs1 result))) (length source))
     (= (to_rep
        (rec__indefinite_bounded__vect__vector__capacity
        (us_split_discrs1 result))) capacity1))))) :pattern ((copy source
                                                             capacity1)) ))))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (index_type index_type) Bool)

(declare-const dummy4 index_type)

(declare-datatypes ((index_type__ref 0))
(((index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_205 Int)
  (temp___is_init_201 Bool) (temp___skip_constant_202 Bool)
  (temp___do_toplevel_203 Bool)
  (temp___do_typ_inv_204 Bool)) Bool (=>
                                     (or (= temp___is_init_201 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_205)))

(define-fun element ((container us_rep)
  (index Int)) Int (get (model1 container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (element_type element_type) Bool)

(declare-const dummy5 element_type)

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_212 Int)
  (temp___is_init_208 Bool) (temp___skip_constant_209 Bool)
  (temp___do_toplevel_210 Bool)
  (temp___do_typ_inv_211 Bool)) Bool (=>
                                     (or (= temp___is_init_208 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range4 temp___expr_212)))

(define-fun equal_except ((left us_rep1) (right us_rep1)
  (position Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                                    ((i Int))
                                                                    (=>
                                                                    (and
                                                                    (<= 1 i)
                                                                    (<= i 
                                                                    (last
                                                                    left)))
                                                                    (=>
                                                                    (not
                                                                    (= i position))
                                                                    (= 
                                                                    (get left
                                                                    i) 
                                                                    (get
                                                                    right i)))))
                                                               true false)))

(declare-fun equal_except__function_guard (Bool us_rep1 us_rep1 Int) Bool)

(define-fun ole ((left us_rep1)
  (right us_rep1)) Bool (and (<= (length2 left) (length2 right)) (ite 
                                                                 (forall
                                                                 ((n Int))
                                                                 (=>
                                                                 (and
                                                                 (<= 1 n)
                                                                 (<= n 
                                                                 (last left)))
                                                                 (= (get left
                                                                    n) 
                                                                 (get right
                                                                 n)))) true
                                                                 false)))

(declare-fun ole__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun range_shifted ((left us_rep1) (right us_rep1) (fst Int) (lst Int)
  (offset Int)) Bool (and (ite (forall ((i Int))
                               (=> (and (<= fst i) (<= i lst))
                               (= (get left i) (get right (+ i offset)))))
                          true false) (ite (forall ((i Int))
                                           (=>
                                           (and (<= (+ fst offset) i)
                                           (<= i (+ lst offset)))
                                           (= (get left (- i offset)) 
                                           (get right i))))
                                      true false)))

(declare-fun range_shifted__function_guard (Bool us_rep1 us_rep1 Int Int
  Int) Bool)

(define-fun olt ((left us_rep1)
  (right us_rep1)) Bool (and (< (length2 left) (length2 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun m_elements_reversed ((left us_rep1)
  (right us_rep1)) Bool (and (and (= (length2 left) (length2 right)) 
  (ite (forall ((i Int))
       (=> (and (<= 1 i) (<= i (last left)))
       (= (get left i) (get right (+ (- (last left) i) 1)))))
  true false)) (ite (forall ((i Int))
                    (=> (and (<= 1 i) (<= i (last right)))
                    (= (get right i) (get left (+ (- (last left) i) 1)))))
               true false)))

(declare-fun m_elements_reversed__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun equal_except1 ((left us_rep1) (right us_rep1) (x Int)
  (y Int)) Bool (and (= (length2 left) (length2 right)) (ite (forall
                                                             ((i Int))
                                                             (=>
                                                             (and (<= 1 i)
                                                             (<= i (last
                                                                   left)))
                                                             (=>
                                                             (and
                                                             (not (= i x))
                                                             (not (= i y)))
                                                             (= (get left i) 
                                                             (get right i)))))
                                                        true false)))

(declare-fun equal_except__function_guard1 (Bool us_rep1 us_rep1 Int
  Int) Bool)

(define-fun m_elements_swapped ((left us_rep1) (right us_rep1) (x Int)
  (y Int)) Bool (and (and (and (= (length2 left) (length2 right)) (= 
  (get left x) (get right y))) (= (get left y) (get right x))) (equal_except1
                                                               left right x
                                                               y)))

(declare-fun m_elements_swapped__function_guard (Bool us_rep1 us_rep1 Int
  Int) Bool)

(define-fun first_element ((container us_rep)) Int (get (model1 container) 1))

(declare-fun first_element__function_guard (Int us_rep) Bool)

(define-fun last_element ((container us_rep)) Int (get (model1 container)
                                                  (last_index container)))

(declare-fun last_element__function_guard (Int us_rep) Bool)

(declare-fun find_index (us_rep Int Int) Int)

(declare-fun find_index__function_guard (Int us_rep Int Int) Bool)

(define-fun contains ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (exists ((i Int))
                        (and (and (<= fst i) (<= i lst))
                        (= (get container i) item)))
                   true false))

(declare-fun contains__function_guard (Bool us_rep1 Int Int Int) Bool)

;; find_index__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int) (index Int))
  (! (=>
     (and (dynamic_invariant3 item true true true true) (dynamic_invariant2
     index true true true true))
     (let ((result (find_index container item index)))
     (and
     (ite (or (< (last_index container) index)
          (not
          (= (contains (model1 container) index (last_index container) item) true)))
     (= result 0)
     (and
     (and (and (<= index result) (<= result (last_index container)))
     (= (get (model1 container) result) item))
     (not (= (contains (model1 container) index (- result 1) item) true))))
     (dynamic_invariant1 result true false true true)))) :pattern ((find_index
                                                                   container
                                                                   item
                                                                   index)) ))))

(declare-fun reverse_find_index (us_rep Int Int) Int)

(declare-fun reverse_find_index__function_guard (Int us_rep Int Int) Bool)

;; reverse_find_index__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int) (index Int))
  (! (=>
     (and (dynamic_invariant3 item true true true true) (dynamic_invariant2
     index true true true true))
     (let ((result (reverse_find_index container item index)))
     (and
     (ite (not
          (= (contains (model1 container) 1
             (ite (<= index (last_index container)) index
             (last_index container)) item) true))
     (= result 0)
     (and
     (and
     (and (and (<= 1 result) (<= result index))
     (<= result (last_index container)))
     (= (get (model1 container) result) item))
     (not
     (= (contains (model1 container) (+ result 1)
        (ite (<= index (last_index container)) index (last_index container))
        item) true))))
     (dynamic_invariant1 result true false true true)))) :pattern ((reverse_find_index
                                                                   container
                                                                   item
                                                                   index)) ))))

(declare-fun contains1 (us_rep Int) Bool)

(declare-fun contains__function_guard1 (Bool us_rep Int) Bool)

;; contains__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((item Int))
  (! (=> (dynamic_invariant3 item true true true true)
     (= (= (contains1 container item) true)
     (= (contains (model1 container) 1 (last_index container) item) true))) :pattern (
  (contains1 container item)) ))))

(define-fun has_element ((container us_rep)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last_index
                                                             container)) true
                                                             false)))

(declare-fun has_element__function_guard (Bool us_rep Int) Bool)

(declare-fun is_sorted (us_rep) Bool)

(declare-fun is_sorted__function_guard (Bool us_rep) Bool)

(declare-fun lt (Int Int) Bool)

(declare-fun lt__function_guard (Bool Int Int) Bool)

;; temp___result_199'def
  (assert
  (forall ((container us_rep1) (i Int) (j Int)) (lt__function_guard
  (lt (get container i) (get container j)) (get container i)
  (get container j))))

(define-fun m_elements_sorted ((container us_rep1)) Bool (ite (forall
                                                              ((i Int))
                                                              (=>
                                                              (and (<= 1 i)
                                                              (<= i (last
                                                                    container)))
                                                              (forall
                                                              ((j Int))
                                                              (=>
                                                              (and (<= i j)
                                                              (<= j (last
                                                                    container)))
                                                              (or
                                                              (= (get
                                                                 container i) 
                                                              (get container
                                                              j))
                                                              (= (lt
                                                                 (get
                                                                 container i)
                                                                 (get
                                                                 container j)) true))))))
                                                         true false))

(declare-fun m_elements_sorted__function_guard (Bool us_rep1) Bool)

;; is_sorted__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_sorted container) true)
     (= (m_elements_sorted (model1 container)) true)) :pattern ((is_sorted
                                                                container)) )))

(define-fun m_elements_included ((left us_rep1) (l_fst Int) (l_lst Int)
  (right us_rep1) (r_fst Int)
  (r_lst Int)) Bool (ite (forall ((i Int))
                         (=> (and (<= l_fst i) (<= i l_lst))
                         (exists ((j Int))
                         (and (and (<= r_fst j) (<= j r_lst))
                         (= (get left i) (get right j))))))
                    true false))

(declare-fun m_elements_included__function_guard (Bool us_rep1 Int Int
  us_rep1 Int Int) Bool)

(define-fun in_range5 ((rec__indefinite_bounded__vect__vector__capacity1 Int)
  (a us_rep)) Bool (= rec__indefinite_bounded__vect__vector__capacity1 
  (to_rep
  (rec__indefinite_bounded__vect__vector__capacity (us_split_discrs1 a)))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const indefinite_bounded__vect__vector__capacity__first__bit1 Int)

(declare-const indefinite_bounded__vect__vector__capacity__last__bit1 Int)

(declare-const indefinite_bounded__vect__vector__capacity__position1 Int)

;; indefinite_bounded__vect__vector__capacity__first__bit_axiom
  (assert (<= 0 indefinite_bounded__vect__vector__capacity__first__bit1))

;; indefinite_bounded__vect__vector__capacity__last__bit_axiom
  (assert
  (< indefinite_bounded__vect__vector__capacity__first__bit1 indefinite_bounded__vect__vector__capacity__last__bit1))

;; indefinite_bounded__vect__vector__capacity__position_axiom
  (assert (<= 0 indefinite_bounded__vect__vector__capacity__position1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ((tvS__ref 0))
(((tvS__refqtmk (tvS__content us_rep)))))
(define-fun tvS__ref_tvS__content__projection ((a tvS__ref)) us_rep (tvS__content
                                                                    a))

(declare-const v__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq6 a b) (oeq a b)) :pattern ((user_eq6 a b)) )))

(define-fun dynamic_invariant4 ((temp___expr_365 us_rep)
  (temp___is_init_361 Bool) (temp___skip_constant_362 Bool)
  (temp___do_toplevel_363 Bool)
  (temp___do_typ_inv_364 Bool)) Bool (=>
                                     (not (= temp___skip_constant_362 true))
                                     (in_range5 5 temp___expr_365)))

(define-fun default_initial_assumption ((temp___expr_367 us_rep)
  (temp___skip_top_level_368 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__indefinite_bounded__vect__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_367))) 5)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_368 true))
                                         (= (is_empty temp___expr_367) true))))

(declare-const w__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant5 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range6 temp___expr_18)))

;; lt__post_axiom
  (assert true)

;; lt__def_axiom
  (assert
  (forall ((left Int) (right Int))
  (! (= (= (lt left right) true) (< left right)) :pattern ((lt left right)) )))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (count_type count_type) Bool)

(declare-const dummy8 count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant6 ((temp___expr_226 Int)
  (temp___is_init_222 Bool) (temp___skip_constant_223 Bool)
  (temp___do_toplevel_224 Bool)
  (temp___do_typ_inv_225 Bool)) Bool (=>
                                     (or (= temp___is_init_222 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_226)))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq2 a b) (oeq1 a b)) :pattern ((user_eq2 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_272 us_rep1)
  (temp___skip_top_level_273 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_273 true))
                                         (= (length2 temp___expr_272) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length2 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i))
  (<= (extended_indexqtint1 i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (extended_index1 extended_index1) Bool)

(declare-const dummy9 extended_index1)

(declare-datatypes ((extended_index__ref1 0))
(((extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant7 ((temp___expr_264 Int)
  (temp___is_init_260 Bool) (temp___skip_constant_261 Bool)
  (temp___do_toplevel_262 Bool)
  (temp___do_typ_inv_263 Bool)) Bool (=>
                                     (or (= temp___is_init_260 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_264)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length2 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant6 result true false
     true true))) :pattern ((length2 container)) )))

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= (- 2147483648) (element_typeqtint1 i))
  (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (element_type1 element_type1) Bool)

(declare-const dummy10 element_type1)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant8 ((temp___expr_257 Int)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)
  (temp___do_typ_inv_256 Bool)) Bool (=>
                                     (or (= temp___is_init_253 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range9 temp___expr_257)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant7 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant8 (get container position) true false true true)) :pattern (
  (get container position)) ))))

(assert
;; defqtvc
 ;; File "indefinite_bounded.ads", line 13, characters 0-0
  (not
  (forall ((v__split_fields us_main_type))
  (=> (in_range 5)
  (=> (default_initial_assumption
  (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields)) false)
  (=> (dynamic_invariant4
  (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields)) false
  false true true)
  (forall ((indefinite_bounded__vect__clear__container__fields us_main_type))
  (=>
  (= (length
     (us_repqtmk v__split_discrs
     (us_split_fieldsqtmk indefinite_bounded__vect__clear__container__fields))) 0)
  (forall ((v__split_fields1 us_main_type))
  (=> (= v__split_fields1 indefinite_bounded__vect__clear__container__fields)
  (=>
  (= (is_empty
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields1))) true)
  (=>
  (= (oeq (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields1))
     (empty_vector Tuple0)) true)
  (=>
  (= (capacity
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields1))) 5)
  (let ((o v__split_discrs))
  (forall
  ((indefinite_bounded__vect__append__2__container__fields us_main_type))
  (=>
  (and
  (and
  (= (length
     (us_repqtmk o
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields))) (+ (length
                                                                  (us_repqtmk
                                                                  o
                                                                  (us_split_fieldsqtmk
                                                                  v__split_fields1))) 1))
  (= (olt (model1 (us_repqtmk o (us_split_fieldsqtmk v__split_fields1)))
     (model1
     (us_repqtmk o
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields)))) true))
  (= (get
     (model1
     (us_repqtmk o
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields)))
     (+ (last_index (us_repqtmk o (us_split_fieldsqtmk v__split_fields1))) 1)) 1))
  (forall ((v__split_fields2 us_main_type))
  (=>
  (= v__split_fields2 indefinite_bounded__vect__append__2__container__fields)
  (let ((o1 v__split_discrs))
  (forall
  ((indefinite_bounded__vect__append__2__container__fields1 us_main_type))
  (=>
  (and
  (and
  (= (length
     (us_repqtmk o1
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields1))) (+ (length
                                                                   (us_repqtmk
                                                                   o1
                                                                   (us_split_fieldsqtmk
                                                                   v__split_fields2))) 1))
  (= (olt (model1 (us_repqtmk o1 (us_split_fieldsqtmk v__split_fields2)))
     (model1
     (us_repqtmk o1
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields1)))) true))
  (= (get
     (model1
     (us_repqtmk o1
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields1)))
     (+ (last_index (us_repqtmk o1 (us_split_fieldsqtmk v__split_fields2))) 1)) 2))
  (forall ((v__split_fields3 us_main_type))
  (=>
  (= v__split_fields3 indefinite_bounded__vect__append__2__container__fields1)
  (let ((o2 v__split_discrs))
  (forall
  ((indefinite_bounded__vect__append__2__container__fields2 us_main_type))
  (=>
  (and
  (and
  (= (length
     (us_repqtmk o2
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields2))) (+ (length
                                                                   (us_repqtmk
                                                                   o2
                                                                   (us_split_fieldsqtmk
                                                                   v__split_fields3))) 1))
  (= (olt (model1 (us_repqtmk o2 (us_split_fieldsqtmk v__split_fields3)))
     (model1
     (us_repqtmk o2
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields2)))) true))
  (= (get
     (model1
     (us_repqtmk o2
     (us_split_fieldsqtmk
     indefinite_bounded__vect__append__2__container__fields2)))
     (+ (last_index (us_repqtmk o2 (us_split_fieldsqtmk v__split_fields3))) 1)) 3))
  (forall ((v__split_fields4 us_main_type))
  (=>
  (= v__split_fields4 indefinite_bounded__vect__append__2__container__fields2)
  (=>
  (not
  (= (is_empty
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields4))) true))
  (=>
  (= (length
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields4))) 3)
  (=>
  (= (capacity
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields4))) 5)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields4)) 1) 1)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields4)) 2) 2)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields4)) 3) 3)
  (let ((o3 v__split_discrs))
  (forall
  ((indefinite_bounded__vect__reserve_capacity__container__fields us_main_type))
  (=>
  (= (oeq1
     (model1
     (us_repqtmk o3
     (us_split_fieldsqtmk
     indefinite_bounded__vect__reserve_capacity__container__fields)))
     (model1 (us_repqtmk o3 (us_split_fieldsqtmk v__split_fields4)))) true)
  (forall ((v__split_fields5 us_main_type))
  (=>
  (= v__split_fields5 indefinite_bounded__vect__reserve_capacity__container__fields)
  (=>
  (not
  (= (is_empty
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields5))) true))
  (=>
  (= (length
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields5))) 3)
  (=>
  (= (capacity
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields5))) 5)
  (let ((o4 (us_repqtmk v__split_discrs
            (us_split_fieldsqtmk v__split_fields5))))
  (let ((indefinite_bounded__test__B_1__w__assume (copy o4 6)))
  (=>
  (and
  (= (oeq1 (model1 indefinite_bounded__test__B_1__w__assume) (model1 o4)) true)
  (ite (= 6 0)
  (= (to_rep
     (rec__indefinite_bounded__vect__vector__capacity
     (us_split_discrs1 indefinite_bounded__test__B_1__w__assume))) (length
                                                                   o4))
  (= (to_rep
     (rec__indefinite_bounded__vect__vector__capacity
     (us_split_discrs1 indefinite_bounded__test__B_1__w__assume))) 6)))
  (forall ((w__split_fields us_main_type))
  (=>
  (= (us_split_fieldsqtmk w__split_fields) (us_split_fields1
                                           indefinite_bounded__test__B_1__w__assume))
  (=>
  (= w__split_discrs (us_split_discrs1
                     indefinite_bounded__test__B_1__w__assume))
  (=>
  (not
  (= (is_empty
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields))) true))
  (=>
  (= (length
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields))) 3)
  (=>
  (= (capacity
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields))) 6)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields)) 1) 1)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields)) 2) 2)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields)) 3) 3)
  (let ((o5 (us_repqtmk v__split_discrs
            (us_split_fieldsqtmk v__split_fields5))))
  (let ((o6 w__split_discrs))
  (forall ((w__split_fields1 us_main_type))
  (=>
  (and
  (and
  (= (length (us_repqtmk o6 (us_split_fieldsqtmk w__split_fields1))) (+ 
  (length (us_repqtmk o6 (us_split_fieldsqtmk w__split_fields))) (length o5)))
  (= (ole (model1 (us_repqtmk o6 (us_split_fieldsqtmk w__split_fields)))
     (model1 (us_repqtmk o6 (us_split_fieldsqtmk w__split_fields1)))) true))
  (=> (< 0 (length o5))
  (= (range_shifted (model1 o5)
     (model1 (us_repqtmk o6 (us_split_fieldsqtmk w__split_fields1))) 1
     (last_index o5)
     (+ (- (last_index (us_repqtmk o6 (us_split_fieldsqtmk w__split_fields))) 1) 1)) true)))
  (=>
  (not
  (= (is_empty
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1))) true))
  (=>
  (= (length
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1))) 6)
  (=>
  (= (capacity
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1))) 6)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1)) 1) 1)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1)) 2) 2)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1)) 3) 3)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1)) 4) 1)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1)) 5) 2)
  (=>
  (= (element
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields1)) 6) 3)
  (let ((o7 (empty_vector Tuple0)))
  (=> (= (length o7) 0)
  (forall ((w__split_fields2 us_main_type))
  (=>
  (= (oeq1
     (model1
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields2)))
     (model1 o7)) true)
  (=>
  (= (is_empty
     (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields2))) true)
  (=>
  (= (oeq (us_repqtmk w__split_discrs (us_split_fieldsqtmk w__split_fields2))
     (empty_vector Tuple0)) true)
  (let ((o8 v__split_discrs))
  (forall
  ((indefinite_bounded__vect__replace_element__container__fields us_main_type))
  (=>
  (and
  (and
  (= (length
     (us_repqtmk o8
     (us_split_fieldsqtmk
     indefinite_bounded__vect__replace_element__container__fields))) 
  (length (us_repqtmk o8 (us_split_fieldsqtmk v__split_fields5))))
  (= (get
     (model1
     (us_repqtmk o8
     (us_split_fieldsqtmk
     indefinite_bounded__vect__replace_element__container__fields))) 2) 4))
  (= (equal_except
     (model1 (us_repqtmk o8 (us_split_fieldsqtmk v__split_fields5)))
     (model1
     (us_repqtmk o8
     (us_split_fieldsqtmk
     indefinite_bounded__vect__replace_element__container__fields))) 2) true))
  (forall ((v__split_fields6 us_main_type))
  (=>
  (= v__split_fields6 indefinite_bounded__vect__replace_element__container__fields)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields6)) 1) 1)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields6)) 2) 4)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields6)) 3) 3)
  (let ((o9 v__split_discrs))
  (forall ((indefinite_bounded__vect__swap__container__fields us_main_type))
  (=>
  (= (m_elements_swapped
     (model1 (us_repqtmk o9 (us_split_fieldsqtmk v__split_fields6)))
     (model1
     (us_repqtmk o9
     (us_split_fieldsqtmk indefinite_bounded__vect__swap__container__fields)))
     1 3) true)
  (forall ((v__split_fields7 us_main_type))
  (=> (= v__split_fields7 indefinite_bounded__vect__swap__container__fields)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields7)) 1) 3)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields7)) 2) 4)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields7)) 3) 1)
  (let ((o10 v__split_discrs))
  (forall
  ((indefinite_bounded__vect__delete_last__container__fields us_main_type))
  (=>
  (and
  (= (length
     (us_repqtmk o10
     (us_split_fieldsqtmk
     indefinite_bounded__vect__delete_last__container__fields))) (- (length
                                                                    (us_repqtmk
                                                                    o10
                                                                    (us_split_fieldsqtmk
                                                                    v__split_fields7))) 1))
  (= (olt
     (model1
     (us_repqtmk o10
     (us_split_fieldsqtmk
     indefinite_bounded__vect__delete_last__container__fields)))
     (model1 (us_repqtmk o10 (us_split_fieldsqtmk v__split_fields7)))) true))
  (forall ((v__split_fields8 us_main_type))
  (=>
  (= v__split_fields8 indefinite_bounded__vect__delete_last__container__fields)
  (=>
  (not
  (= (is_empty
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields8))) true))
  (=>
  (= (length
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields8))) 2)
  (=>
  (= (capacity
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields8))) 5)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields8)) 1) 3)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields8)) 2) 4)
  (let ((o11 v__split_discrs))
  (forall
  ((indefinite_bounded__vect__reverse_elements__container__fields us_main_type))
  (=>
  (= (m_elements_reversed
     (model1 (us_repqtmk o11 (us_split_fieldsqtmk v__split_fields8)))
     (model1
     (us_repqtmk o11
     (us_split_fieldsqtmk
     indefinite_bounded__vect__reverse_elements__container__fields)))) true)
  (forall ((v__split_fields9 us_main_type))
  (=>
  (= v__split_fields9 indefinite_bounded__vect__reverse_elements__container__fields)
  (=>
  (not
  (= (is_empty
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9))) true))
  (=>
  (= (length
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9))) 2)
  (=>
  (= (capacity
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9))) 5)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 1) 4)
  (=>
  (= (element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 2) 3)
  (=>
  (= (last_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9))) 2)
  (=>
  (= (first_element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9))) 4)
  (=>
  (= (last_element
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9))) 3)
  (=>
  (= (find_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 0 1) 0)
  (=>
  (= (find_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 4 1) 1)
  (=>
  (= (find_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 4 2) 0)
  (=>
  (= (reverse_find_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 0
     2147483647) 0)
  (=>
  (= (reverse_find_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 4
     2147483647) 1)
  (= (reverse_find_index
     (us_repqtmk v__split_discrs (us_split_fieldsqtmk v__split_fields9)) 4 2) 1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
