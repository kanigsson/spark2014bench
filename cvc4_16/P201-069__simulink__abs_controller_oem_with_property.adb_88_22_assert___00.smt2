(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content Float64)))))
(declare-sort long_float 0)

(declare-fun user_eq (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)

(declare-const dummy long_float)

(declare-datatypes ((long_float__ref 0))
(((long_float__refqtmk (long_float__content long_float)))))
(define-fun long_float__ref_long_float__content__projection ((a long_float__ref)) long_float 
  (long_float__content a))

(define-fun dynamic_invariant ((temp___expr_67 Float64)
  (temp___is_init_63 Bool) (temp___skip_constant_64 Bool)
  (temp___do_toplevel_65 Bool)
  (temp___do_typ_inv_66 Bool)) Bool (=>
                                    (or (= temp___is_init_63 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                    (fp.isFinite64 temp___expr_67)))

(declare-const wheel_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const vehicle_speed Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun boolean_to_long_float (Bool) Float64)

(declare-fun boolean_to_long_float__function_guard (Float64 Bool) Bool)

;; boolean_to_long_float__post_axiom
  (assert
  (forall ((b Bool))
  (! (let ((result (boolean_to_long_float b)))
     (=> (boolean_to_long_float__function_guard result b) (dynamic_invariant
     result true false true true))) :pattern ((boolean_to_long_float b)) )))

(assert
;; defqtvc
 ;; File "abs_controller_oem_with_property.ads", line 17, characters 0-0
  (not
  (forall ((apply_brakes Float64) (epsifzero_out1 Float64)
  (diff_out1 Float64) (difference_out1 Float64) (sum_out1 Float64)
  (epsifzero_out11 Float64))
  (=> (dynamic_invariant wheel_speed true false true true)
  (=> (dynamic_invariant vehicle_speed true false true true)
  (=> (dynamic_invariant apply_brakes false false true true)
  (=>
  (fp.leq (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010) 
  wheel_speed)
  (=> (dynamic_invariant epsifzero_out1 false false true true)
  (=> (dynamic_invariant diff_out1 false false true true)
  (=> (dynamic_invariant difference_out1 false false true true)
  (=> (dynamic_invariant sum_out1 false false true true)
  (=>
  (fp.leq (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010) 
  wheel_speed)
  (=>
  (exists ((spark__branch Bool))
  (and
  (= spark__branch (ite (not (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
                   true false))
  (ite (= spark__branch true) (= epsifzero_out11 vehicle_speed)
  (= epsifzero_out11 (fp #b0 #b01111001010 #b1111111111111101010010000001111110010111011010000010)))))
  (let ((o (fp.div RNE wheel_speed epsifzero_out11)))
  (=> (fp.isFinite64 o)
  (let ((o1 (fp.sub RNE (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) o)))
  (=> (fp.isFinite64 o1)
  (forall ((diff_out11 Float64))
  (=> (= diff_out11 o1)
  (let ((o2 (fp.sub RNE (fp #b0 #b01111111100 #b1001100110011001100110011001100110011001100110011010) diff_out11)))
  (=> (fp.isFinite64 o2)
  (forall ((difference_out11 Float64))
  (=> (= difference_out11 o2)
  (let ((o3 (ite (fp.lt difference_out11 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
            true false)))
  (let ((o4 (boolean_to_long_float o3)))
  (=>
  (and (boolean_to_long_float__function_guard o4 o3) (dynamic_invariant o4
  true false true true))
  (let ((o5 (ite (fp.lt (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) difference_out11)
            true false)))
  (let ((o6 (boolean_to_long_float o5)))
  (=>
  (and (boolean_to_long_float__function_guard o6 o5) (dynamic_invariant o6
  true false true true))
  (let ((o7 (fp.sub RNE o6 o4)))
  (=> (fp.isFinite64 o7)
  (forall ((sum_out11 Float64))
  (=> (= sum_out11 o7)
  (or
  (not
  (fp.eq vehicle_speed (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))
  (fp.eq sum_out11 (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000))))))))))))))))))))))))))))))))))))
(check-sat)
