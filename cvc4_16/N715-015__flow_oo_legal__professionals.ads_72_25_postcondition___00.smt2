(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun in_range2 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Bool)

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((unbounded_string__ref 0))
(((unbounded_string__refqtmk (unbounded_string__content us_rep)))))
(define-fun unbounded_string__ref_unbounded_string__content__projection ((a unbounded_string__ref)) us_rep 
  (unbounded_string__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__people__person__name us_rep)(rec__people__person__dob integer)(rec__people__person__alive Bool)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__people__person__name__projection ((a us_split_fields)) us_rep 
  (rec__people__person__name a))

(define-fun us_split_fields_rec__people__person__dob__projection ((a us_split_fields)) integer 
  (rec__people__person__dob a))

(define-fun us_split_fields_rec__people__person__alive__projection ((a us_split_fields)) Bool 
  (rec__people__person__alive a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (user_eq2
                            (rec__people__person__name (us_split_fields1 a))
                            (rec__people__person__name (us_split_fields1 b))) true)
                         (= (to_rep1
                            (rec__people__person__dob (us_split_fields1 a))) 
                         (to_rep1
                         (rec__people__person__dob (us_split_fields1 b)))))
                         (= (ite (rec__people__person__alive
                                 (us_split_fields1 a)) 1 0) (ite (rec__people__person__alive
                                                                 (us_split_fields1
                                                                 b)) 1 0)))
                    true false))

(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)

(declare-const us_tag Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const people__person__name__first__bit Int)

(declare-const people__person__name__last__bit Int)

(declare-const people__person__name__position Int)

;; people__person__name__first__bit_axiom
  (assert (<= 0 people__person__name__first__bit))

;; people__person__name__last__bit_axiom
  (assert
  (< people__person__name__first__bit people__person__name__last__bit))

;; people__person__name__position_axiom
  (assert (<= 0 people__person__name__position))

(declare-const people__person__dob__first__bit Int)

(declare-const people__person__dob__last__bit Int)

(declare-const people__person__dob__position Int)

;; people__person__dob__first__bit_axiom
  (assert (<= 0 people__person__dob__first__bit))

;; people__person__dob__last__bit_axiom
  (assert (< people__person__dob__first__bit people__person__dob__last__bit))

;; people__person__dob__position_axiom
  (assert (<= 0 people__person__dob__position))

(declare-const people__person__alive__first__bit Int)

(declare-const people__person__alive__last__bit Int)

(declare-const people__person__alive__position Int)

;; people__person__alive__first__bit_axiom
  (assert (<= 0 people__person__alive__first__bit))

;; people__person__alive__last__bit_axiom
  (assert
  (< people__person__alive__first__bit people__person__alive__last__bit))

;; people__person__alive__position_axiom
  (assert (<= 0 people__person__alive__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ((person__ref 0))
(((person__refqtmk (person__content us_rep1)))))
(define-fun person__ref_person__content__projection ((a person__ref)) us_rep1 
  (person__content a))

(declare-sort professions 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (professions professions) Bool)

(declare-const dummy4 professions)

(declare-datatypes ((professions__ref 0))
(((professions__refqtmk (professions__content professions)))))
(define-fun professions__ref_professions__content__projection ((a professions__ref)) professions 
  (professions__content a))

(declare-fun to_rep2 (professions) Int)

(declare-fun of_rep2 (Int) professions)

;; inversion_axiom
  (assert
  (forall ((x professions))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x professions)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort skills 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (skills skills) Bool)

(declare-const dummy5 skills)

(declare-datatypes ((skills__ref 0))
(((skills__refqtmk (skills__content skills)))))
(define-fun skills__ref_skills__content__projection ((a skills__ref)) skills 
  (skills__content a))

(declare-fun to_rep3 (skills) Int)

(declare-fun of_rep3 (Int) skills)

;; inversion_axiom
  (assert
  (forall ((x skills))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x skills)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int skills))))))
(declare-fun slide ((Array Int skills) Int Int) (Array Int skills))

;; slide_eq
  (assert
  (forall ((a (Array Int skills)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int skills)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int skills)) (a__first Int) (a__last Int)
  (b (Array Int skills)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep3 (select a temp___idx_157)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int skills)) (b (Array Int skills)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep3 (select a temp___idx_157)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-const dummy6 (Array Int skills))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq6 ((Array Int skills) (Array Int skills)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__professionals__professional__profession professions)(rec__professionals__professional__skilled_in (Array Int skills))(rec__professionals__professional__number_of_people_killed natural)(rec__people__person__name1 us_rep)(rec__people__person__dob1 integer)(rec__people__person__alive1 Bool)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__professionals__professional__profession__projection ((a us_split_fields2)) professions 
  (rec__professionals__professional__profession a))

(define-fun us_split_fields_rec__professionals__professional__skilled_in__projection ((a us_split_fields2)) (Array Int skills) 
  (rec__professionals__professional__skilled_in a))

(define-fun us_split_fields_rec__professionals__professional__number_of_people_killed__projection ((a us_split_fields2)) natural 
  (rec__professionals__professional__number_of_people_killed a))

(define-fun us_split_fields_rec__people__person__name__2__projection ((a us_split_fields2)) us_rep 
  (rec__people__person__name1 a))

(define-fun us_split_fields_rec__people__person__dob__2__projection ((a us_split_fields2)) integer 
  (rec__people__person__dob1 a))

(define-fun us_split_fields_rec__people__person__alive__2__projection ((a us_split_fields2)) Bool 
  (rec__people__person__alive1 a))

(define-fun us_split_fields_rec__ext____4__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__4__projection ((a us_rep2)) Int (attr__tag1 a))

(declare-fun hide_ext__ (professions (Array Int skills) natural
  us_private) us_private)

(declare-fun extract__professionals__professional__profession (us_private) professions)

;; extract__professionals__professional__profession__conv
  (assert
  (forall ((professionals__professional__profession professions))
  (forall ((professionals__professional__skilled_in (Array Int skills)))
  (forall ((professionals__professional__number_of_people_killed natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__professionals__professional__profession
     (hide_ext__ professionals__professional__profession
     professionals__professional__skilled_in
     professionals__professional__number_of_people_killed rec__ext__2)) professionals__professional__profession))))))

(declare-fun extract__professionals__professional__skilled_in (us_private) (Array Int skills))

;; extract__professionals__professional__skilled_in__conv
  (assert
  (forall ((professionals__professional__profession professions))
  (forall ((professionals__professional__skilled_in (Array Int skills)))
  (forall ((professionals__professional__number_of_people_killed natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__professionals__professional__skilled_in
     (hide_ext__ professionals__professional__profession
     professionals__professional__skilled_in
     professionals__professional__number_of_people_killed rec__ext__2)) professionals__professional__skilled_in))))))

(declare-fun extract__professionals__professional__number_of_people_killed (us_private) natural)

;; extract__professionals__professional__number_of_people_killed__conv
  (assert
  (forall ((professionals__professional__profession professions))
  (forall ((professionals__professional__skilled_in (Array Int skills)))
  (forall ((professionals__professional__number_of_people_killed natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__professionals__professional__number_of_people_killed
     (hide_ext__ professionals__professional__profession
     professionals__professional__skilled_in
     professionals__professional__number_of_people_killed rec__ext__2)) professionals__professional__number_of_people_killed))))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep2)) us_rep1 (us_repqtmk
                                          (us_split_fieldsqtmk
                                          (rec__people__person__name1
                                          (us_split_fields3 a))
                                          (rec__people__person__dob1
                                          (us_split_fields3 a))
                                          (rec__people__person__alive1
                                          (us_split_fields3 a))
                                          (hide_ext__
                                          (rec__professionals__professional__profession
                                          (us_split_fields3 a))
                                          (rec__professionals__professional__skilled_in
                                          (us_split_fields3 a))
                                          (rec__professionals__professional__number_of_people_killed
                                          (us_split_fields3 a))
                                          (rec__ext__1 (us_split_fields3 a))))
                                          (attr__tag1 a)))

(define-fun of_base ((r us_rep1)) us_rep2 (us_repqtmk1
                                          (us_split_fieldsqtmk1
                                          (extract__professionals__professional__profession
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__professionals__professional__skilled_in
                                          (rec__ext__ (us_split_fields1 r)))
                                          (extract__professionals__professional__number_of_people_killed
                                          (rec__ext__ (us_split_fields1 r)))
                                          (rec__people__person__name
                                          (us_split_fields1 r))
                                          (rec__people__person__dob
                                          (us_split_fields1 r))
                                          (rec__people__person__alive
                                          (us_split_fields1 r))
                                          (extract__ext__
                                          (rec__ext__ (us_split_fields1 r))))
                                          (attr__tag r)))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep2
                            (rec__professionals__professional__profession
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__professionals__professional__profession
                                                   (us_split_fields3 b))))
                         (= (bool_eq2
                            (rec__professionals__professional__skilled_in
                            (us_split_fields3 a)) 1 4
                            (rec__professionals__professional__skilled_in
                            (us_split_fields3 b)) 1 4) true))
                         (and
                         (and
                         (= (to_rep
                            (rec__professionals__professional__number_of_people_killed
                            (us_split_fields3 a))) (to_rep
                                                   (rec__professionals__professional__number_of_people_killed
                                                   (us_split_fields3 b))))
                         (= (user_eq2
                            (rec__people__person__name1 (us_split_fields3 a))
                            (rec__people__person__name1 (us_split_fields3 b))) true))
                         (and
                         (= (to_rep1
                            (rec__people__person__dob1 (us_split_fields3 a))) 
                         (to_rep1
                         (rec__people__person__dob1 (us_split_fields3 b))))
                         (= (ite (rec__people__person__alive1
                                 (us_split_fields3 a)) 1 0) (ite (rec__people__person__alive1
                                                                 (us_split_fields3
                                                                 b)) 1 0)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const professionals__professional__profession__first__bit Int)

(declare-const professionals__professional__profession__last__bit Int)

(declare-const professionals__professional__profession__position Int)

;; professionals__professional__profession__first__bit_axiom
  (assert (<= 0 professionals__professional__profession__first__bit))

;; professionals__professional__profession__last__bit_axiom
  (assert
  (< professionals__professional__profession__first__bit professionals__professional__profession__last__bit))

;; professionals__professional__profession__position_axiom
  (assert (<= 0 professionals__professional__profession__position))

(declare-const professionals__professional__skilled_in__first__bit Int)

(declare-const professionals__professional__skilled_in__last__bit Int)

(declare-const professionals__professional__skilled_in__position Int)

;; professionals__professional__skilled_in__first__bit_axiom
  (assert (<= 0 professionals__professional__skilled_in__first__bit))

;; professionals__professional__skilled_in__last__bit_axiom
  (assert
  (< professionals__professional__skilled_in__first__bit professionals__professional__skilled_in__last__bit))

;; professionals__professional__skilled_in__position_axiom
  (assert (<= 0 professionals__professional__skilled_in__position))

(declare-const professionals__professional__number_of_people_killed__first__bit Int)

(declare-const professionals__professional__number_of_people_killed__last__bit Int)

(declare-const professionals__professional__number_of_people_killed__position Int)

;; professionals__professional__number_of_people_killed__first__bit_axiom
  (assert
  (<= 0 professionals__professional__number_of_people_killed__first__bit))

;; professionals__professional__number_of_people_killed__last__bit_axiom
  (assert
  (< professionals__professional__number_of_people_killed__first__bit 
  professionals__professional__number_of_people_killed__last__bit))

;; professionals__professional__number_of_people_killed__position_axiom
  (assert
  (<= 0 professionals__professional__number_of_people_killed__position))

(declare-const people__person__name__first__bit1 Int)

(declare-const people__person__name__last__bit1 Int)

(declare-const people__person__name__position1 Int)

;; people__person__name__first__bit_axiom
  (assert (<= 0 people__person__name__first__bit1))

;; people__person__name__last__bit_axiom
  (assert
  (< people__person__name__first__bit1 people__person__name__last__bit1))

;; people__person__name__position_axiom
  (assert (<= 0 people__person__name__position1))

(declare-const people__person__dob__first__bit1 Int)

(declare-const people__person__dob__last__bit1 Int)

(declare-const people__person__dob__position1 Int)

;; people__person__dob__first__bit_axiom
  (assert (<= 0 people__person__dob__first__bit1))

;; people__person__dob__last__bit_axiom
  (assert
  (< people__person__dob__first__bit1 people__person__dob__last__bit1))

;; people__person__dob__position_axiom
  (assert (<= 0 people__person__dob__position1))

(declare-const people__person__alive__first__bit1 Int)

(declare-const people__person__alive__last__bit1 Int)

(declare-const people__person__alive__position1 Int)

;; people__person__alive__first__bit_axiom
  (assert (<= 0 people__person__alive__first__bit1))

;; people__person__alive__last__bit_axiom
  (assert
  (< people__person__alive__first__bit1 people__person__alive__last__bit1))

;; people__person__alive__position_axiom
  (assert (<= 0 people__person__alive__position1))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ((professional__ref 0))
(((professional__refqtmk (professional__content us_rep2)))))
(define-fun professional__ref_professional__content__projection ((a professional__ref)) us_rep2 
  (professional__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (positive positive) Bool)

(declare-const dummy8 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (character character) Bool)

(declare-const dummy9 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep4 (character) Int)

(declare-fun of_rep4 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int character))))))
(declare-fun slide1 ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep4 (select a temp___idx_91)) (to_rep4
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep4 (select a temp___idx_91)) (to_rep4
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range5 low) (in_range5 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size1 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment4))

(define-fun bool_eq5 ((x us_t)
  (y us_t)) Bool (bool_eq4 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq10 (us_t us_t) Bool)

(declare-const dummy10 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_unbounded_string (us_t) us_rep)

(declare-fun to_unbounded_string__function_guard (us_rep us_t) Bool)

(declare-fun temp___String_Literal_258 (tuple0) (Array Int character))

;; temp___String_Literal_258__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 1)) 78)
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 3)) 109)
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 4)) 101))
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 5)) 108))
     (and
     (and
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 6)) 101)
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 7)) 115))
     (= (to_rep4 (select (temp___String_Literal_258 us_void_param) 8)) 115)))) :pattern (
  (temp___String_Literal_258 us_void_param)) )))

(define-fun default_initial_assumption ((temp___expr_289 us_rep2)
  (temp___skip_top_level_290 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_289) 
                                         us_tag1)
                                         (and
                                         (and
                                         (= (rec__people__person__name1
                                            (us_split_fields3
                                            temp___expr_289)) (to_unbounded_string
                                                              (of_array
                                                              (temp___String_Literal_258
                                                              Tuple0) 1 8)))
                                         (= (to_rep1
                                            (rec__people__person__dob1
                                            (us_split_fields3
                                            temp___expr_289))) (- 1)))
                                         (= (rec__people__person__alive1
                                            (us_split_fields3
                                            temp___expr_289)) (distinct 0 0)))))

(declare-fun has_licence_to_kill (us_rep2) Bool)

(declare-fun has_licence_to_kill__function_guard (Bool us_rep2) Bool)

(declare-fun has_licence_to_kill1 (Int us_rep2) Bool)

(declare-fun has_licence_to_kill__function_guard1 (Bool Int us_rep2) Bool)

(declare-const killer__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const victim__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption1 ((temp___expr_256 us_rep1)
  (temp___skip_top_level_257 Bool)) Bool (and
                                         (= (attr__tag temp___expr_256) 
                                         us_tag)
                                         (and
                                         (and
                                         (= (rec__people__person__name
                                            (us_split_fields1
                                            temp___expr_256)) (to_unbounded_string
                                                              (of_array
                                                              (temp___String_Literal_258
                                                              Tuple0) 1 8)))
                                         (= (to_rep1
                                            (rec__people__person__dob
                                            (us_split_fields1
                                            temp___expr_256))) (- 1)))
                                         (= (rec__people__person__alive
                                            (us_split_fields1
                                            temp___expr_256)) (distinct 0 0)))))

(declare-fun is_alive (us_rep1) Bool)

(declare-fun is_alive__function_guard (Bool us_rep1) Bool)

(declare-fun is_alive1 (Int us_rep1) Bool)

(declare-fun is_alive__function_guard1 (Bool Int us_rep1) Bool)

(declare-fun rip__specific_post (Int us_split_fields Int
  us_split_fields) Bool)

;; professionals__professional__compat_axiom
  (assert true)

;; people__person__compat_axiom
  (assert true)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range5
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range6 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant5 ((temp___expr_239 Int)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)
  (temp___do_typ_inv_238 Bool)) Bool (=>
                                     (or (= temp___is_init_235 true)
                                     (<= 0 3)) (in_range3 temp___expr_239)))

(define-fun dynamic_invariant6 ((temp___expr_246 Int)
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool)
  (temp___do_typ_inv_245 Bool)) Bool (=>
                                     (or (= temp___is_init_242 true)
                                     (<= 0 12)) (in_range4 temp___expr_246)))

;; has_licence_to_kill__post_axiom
  (assert true)

;; has_licence_to_kill__post__dispatch_axiom
  (assert true)

;; professionals__professional__compat_axiom
  (assert
  (forall ((p us_rep2))
  (! (=> (has_licence_to_kill__function_guard1
     (has_licence_to_kill1 us_tag1 p) us_tag1 p)
     (and
     (forall ((p1 us_rep2)) (has_licence_to_kill__function_guard
     (has_licence_to_kill p1) p1))
     (= (ite (has_licence_to_kill p) 1 0) (ite (has_licence_to_kill1 
                                               us_tag1 p) 1 0)))) :pattern (
  (has_licence_to_kill1 us_tag1 p)) )))

;; has_licence_to_kill__def_axiom
  (assert
  (forall ((p us_rep2))
  (! (= (= (has_licence_to_kill p) true)
     (let ((temp___329 (to_rep2
                       (rec__professionals__professional__profession
                       (us_split_fields3 p)))))
     (or (= temp___329 2) (= temp___329 3)))) :pattern ((has_licence_to_kill
                                                        p)) )))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(declare-fun length1 (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((source us_rep)) (! (dynamic_invariant1 (length1 source) true
  false true true) :pattern ((length1 source)) )))

;; to_unbounded_string__post_axiom
  (assert
  (forall ((source us_t))
  (! (=> (dynamic_invariant4 source true true true true)
     (= (length1 (to_unbounded_string source)) (length source))) :pattern (
  (to_unbounded_string source)) )))

;; oeq__post_axiom
  (assert true)

;; is_alive__post_axiom
  (assert true)

;; is_alive__post__dispatch_axiom
  (assert true)

;; professionals__professional__compat_axiom
  (assert
  (forall ((p us_rep1))
  (! (=> (is_alive__function_guard1 (is_alive1 us_tag1 p) us_tag1 p)
     (and (forall ((p1 us_rep1)) (is_alive__function_guard (is_alive p1) p1))
     (= (ite (is_alive p) 1 0) (ite (is_alive1 us_tag1 p) 1 0)))) :pattern (
  (is_alive1 us_tag1 p)) )))

;; people__person__compat_axiom
  (assert
  (forall ((p us_rep1))
  (! (=> (is_alive__function_guard1 (is_alive1 us_tag p) us_tag p)
     (and (forall ((p1 us_rep1)) (is_alive__function_guard (is_alive p1) p1))
     (= (ite (is_alive p) 1 0) (ite (is_alive1 us_tag p) 1 0)))) :pattern (
  (is_alive1 us_tag p)) )))

(assert
;; defqtvc
 ;; File "professionals.ads", line 67, characters 0-0
  (not
  (forall ((killer__split_fields us_split_fields2)
  (victim__split_fields us_split_fields) (o Int))
  (=>
  (forall ((killer__split_fields1 us_split_fields2))
  (is_alive__function_guard
  (is_alive (to_base (us_repqtmk1 killer__split_fields1 killer__attr__tag)))
  (to_base (us_repqtmk1 killer__split_fields1 killer__attr__tag))))
  (=>
  (= (is_alive
     (to_base (us_repqtmk1 killer__split_fields killer__attr__tag))) true)
  (=>
  (forall ((victim__split_fields1 us_split_fields))
  (is_alive__function_guard1
  (is_alive1 victim__attr__tag
  (us_repqtmk victim__split_fields1 victim__attr__tag)) victim__attr__tag
  (us_repqtmk victim__split_fields1 victim__attr__tag)))
  (=>
  (= (is_alive1 victim__attr__tag
     (us_repqtmk victim__split_fields victim__attr__tag)) true)
  (=>
  (forall ((killer__split_fields1 us_split_fields2))
  (has_licence_to_kill__function_guard
  (has_licence_to_kill (us_repqtmk1 killer__split_fields1 killer__attr__tag))
  (us_repqtmk1 killer__split_fields1 killer__attr__tag)))
  (=>
  (= (has_licence_to_kill
     (us_repqtmk1 killer__split_fields killer__attr__tag)) true)
  (=>
  (= (to_rep
     (rec__professionals__professional__number_of_people_killed
     killer__split_fields)) o)
  (let ((o1 (+ o 1)))
  (=> (in_range o1)
  (forall ((o2 natural))
  (=> (= (to_rep o2) o1)
  (forall ((killer__split_fields1 us_split_fields2))
  (=>
  (= killer__split_fields1 (us_split_fieldsqtmk1
                           (rec__professionals__professional__profession
                           killer__split_fields)
                           (rec__professionals__professional__skilled_in
                           killer__split_fields) o2
                           (rec__people__person__name1 killer__split_fields)
                           (rec__people__person__dob1 killer__split_fields)
                           (rec__people__person__alive1 killer__split_fields)
                           (rec__ext__1 killer__split_fields)))
  (let ((o3 victim__attr__tag))
  (forall ((victim__split_fields1 us_split_fields))
  (=> (rip__specific_post o3 victim__split_fields1 o3 victim__split_fields)
  (=>
  (forall ((killer__split_fields2 us_split_fields2))
  (is_alive__function_guard
  (is_alive (to_base (us_repqtmk1 killer__split_fields2 killer__attr__tag)))
  (to_base (us_repqtmk1 killer__split_fields2 killer__attr__tag))))
  (= (is_alive
     (to_base (us_repqtmk1 killer__split_fields1 killer__attr__tag))) true)))))))))))))))))))))
(check-sat)
