;; produced by cvc4_16.drv ;;
(set-logic AUFBVFPDTNIRA)
(set-info :smt-lib-version 2.6)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2nat x) (- (- 256 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvshl v (bvurem n (_ bv8 8))) (bvlshr v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 8)) (n (_ BitVec 8)))
  (= (bvor (bvlshr v (bvurem n (_ bv8 8))) (bvshl v (bvsub (_ bv8 8) (bvurem n (_ bv8 8))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x01) #x00)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 8)) (i (_ BitVec 8)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 8)) (i Int))
  (=> (and (<= 0 i) (< i 256)) (= (nth_bv x ((_ int2bv 8) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (let ((mask (bvshl (bvsub (bvshl #x01 n) #x01) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 8)) (b (_ BitVec 8)) (i (_ BitVec 8))
  (n (_ BitVec 8)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr1 x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr1 x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl1 x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left2 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right2 v (bv2nat n)))))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv1 x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth1 x (bv2nat i)) (nth_bv1 x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536))
  (= (nth_bv1 x ((_ int2bv 16) i)) (nth1 x i)))))

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv1 a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub1 a b (bv2nat i) (bv2nat n)) (eq_sub_bv1 a b i n))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned_8 unsigned_8) Bool)

(declare-const dummy unsigned_8)

(declare-datatypes ((unsigned_8__ref 0))
(((unsigned_8__refqtmk (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref_unsigned_8__content__projection ((a unsigned_8__ref)) unsigned_8 
  (unsigned_8__content a))

(declare-fun to_rep (unsigned_8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned_8)

;; inversion_axiom
  (assert
  (forall ((x unsigned_8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x unsigned_8)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_8)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__types__octet__data unsigned_8)))))
(define-fun us_split_fields_rec__types__octet__data__projection ((a us_split_fields)) unsigned_8 
  (rec__types__octet__data a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__types__octet__data (us_split_fields1 a))) 
                   (to_rep (rec__types__octet__data (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const types__octet__data__first__bit Int)

(declare-const types__octet__data__last__bit Int)

(declare-const types__octet__data__position Int)

;; types__octet__data__first__bit_axiom
  (assert (<= 0 types__octet__data__first__bit))

;; types__octet__data__last__bit_axiom
  (assert (< types__octet__data__first__bit types__octet__data__last__bit))

;; types__octet__data__position_axiom
  (assert (<= 0 types__octet__data__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((octet__ref 0))
(((octet__refqtmk (octet__content us_rep)))))
(define-fun octet__ref_octet__content__projection ((a octet__ref)) us_rep 
  (octet__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const query (Array Int us_rep))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort unsigned_16 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq2 (unsigned_16 unsigned_16) Bool)

(declare-const dummy2 unsigned_16)

(declare-datatypes ((unsigned_16__ref 0))
(((unsigned_16__refqtmk (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref_unsigned_16__content__projection ((a unsigned_16__ref)) unsigned_16 
  (unsigned_16__content a))

(declare-fun to_rep1 (unsigned_16) (_ BitVec 16))

(declare-fun of_rep1 ((_ BitVec 16)) unsigned_16)

;; inversion_axiom
  (assert
  (forall ((x unsigned_16))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x unsigned_16)) Int (bv2nat (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_16)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort query_opcode 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (query_opcode query_opcode) Bool)

(declare-const dummy3 query_opcode)

(declare-datatypes ((query_opcode__ref 0))
(((query_opcode__refqtmk (query_opcode__content query_opcode)))))
(define-fun query_opcode__ref_query_opcode__content__projection ((a query_opcode__ref)) query_opcode 
  (query_opcode__content a))

(declare-fun to_rep2 (query_opcode) Int)

(declare-fun of_rep2 (Int) query_opcode)

;; inversion_axiom
  (assert
  (forall ((x query_opcode))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x query_opcode)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort qdcount_range 0)

(declare-fun qdcount_rangeqtint (qdcount_range) Int)

;; qdcount_range'axiom
  (assert
  (forall ((i qdcount_range))
  (and (<= 1 (qdcount_rangeqtint i)) (<= (qdcount_rangeqtint i) 16))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (qdcount_range qdcount_range) Bool)

(declare-const dummy4 qdcount_range)

(declare-datatypes ((qdcount_range__ref 0))
(((qdcount_range__refqtmk (qdcount_range__content qdcount_range)))))
(define-fun qdcount_range__ref_qdcount_range__content__projection ((a qdcount_range__ref)) qdcount_range 
  (qdcount_range__content a))

(define-fun to_rep3 ((x qdcount_range)) Int (qdcount_rangeqtint x))

(declare-fun of_rep3 (Int) qdcount_range)

;; inversion_axiom
  (assert
  (forall ((x qdcount_range))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x qdcount_range)) (! (in_range2
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__types__query_header__id unsigned_16)(rec__types__query_header__opcode query_opcode)(rec__types__query_header__qdcount qdcount_range)))))
(define-fun us_split_fields_rec__types__query_header__id__projection ((a us_split_fields2)) unsigned_16 
  (rec__types__query_header__id a))

(define-fun us_split_fields_rec__types__query_header__opcode__projection ((a us_split_fields2)) query_opcode 
  (rec__types__query_header__opcode a))

(define-fun us_split_fields_rec__types__query_header__qdcount__projection ((a us_split_fields2)) qdcount_range 
  (rec__types__query_header__qdcount a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__types__query_header__id
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__types__query_header__id
                                                   (us_split_fields3 b))))
                         (= (to_rep2
                            (rec__types__query_header__opcode
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__types__query_header__opcode
                                                   (us_split_fields3 b)))))
                         (= (to_rep3
                            (rec__types__query_header__qdcount
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__types__query_header__qdcount
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const types__query_header__id__first__bit Int)

(declare-const types__query_header__id__last__bit Int)

(declare-const types__query_header__id__position Int)

;; types__query_header__id__first__bit_axiom
  (assert (<= 0 types__query_header__id__first__bit))

;; types__query_header__id__last__bit_axiom
  (assert
  (< types__query_header__id__first__bit types__query_header__id__last__bit))

;; types__query_header__id__position_axiom
  (assert (<= 0 types__query_header__id__position))

(declare-const types__query_header__opcode__first__bit Int)

(declare-const types__query_header__opcode__last__bit Int)

(declare-const types__query_header__opcode__position Int)

;; types__query_header__opcode__first__bit_axiom
  (assert (<= 0 types__query_header__opcode__first__bit))

;; types__query_header__opcode__last__bit_axiom
  (assert
  (< types__query_header__opcode__first__bit types__query_header__opcode__last__bit))

;; types__query_header__opcode__position_axiom
  (assert (<= 0 types__query_header__opcode__position))

(declare-const types__query_header__qdcount__first__bit Int)

(declare-const types__query_header__qdcount__last__bit Int)

(declare-const types__query_header__qdcount__position Int)

;; types__query_header__qdcount__first__bit_axiom
  (assert (<= 0 types__query_header__qdcount__first__bit))

;; types__query_header__qdcount__last__bit_axiom
  (assert
  (< types__query_header__qdcount__first__bit types__query_header__qdcount__last__bit))

;; types__query_header__qdcount__position_axiom
  (assert (<= 0 types__query_header__qdcount__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((query_header__ref 0))
(((query_header__refqtmk (query_header__content us_rep1)))))
(define-fun query_header__ref_query_header__content__projection ((a query_header__ref)) us_rep1 
  (query_header__content a))

(declare-sort return_code_t 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (return_code_t return_code_t) Bool)

(declare-const dummy6 return_code_t)

(declare-datatypes ((return_code_t__ref 0))
(((return_code_t__refqtmk (return_code_t__content return_code_t)))))
(define-fun return_code_t__ref_return_code_t__content__projection ((a return_code_t__ref)) return_code_t 
  (return_code_t__content a))

(declare-fun to_rep4 (return_code_t) Int)

(declare-fun of_rep4 (Int) return_code_t)

;; inversion_axiom
  (assert
  (forall ((x return_code_t))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x return_code_t)) (! (in_range3
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk
  (rec__parse__parse_result_t__return_code return_code_t)))))
(define-fun us_split_discrs_rec__parse__parse_result_t__return_code__projection ((a us_split_discrs)) return_code_t 
  (rec__parse__parse_result_t__return_code a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2 (rec__parse__parse_result_t__header us_rep1)))))
(define-fun us_split_fields_rec__parse__parse_result_t__header__projection ((a us_split_fields4)) us_rep1 
  (rec__parse__parse_result_t__header a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep2 0))
(((us_repqtmk2
  (us_split_discrs1 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun parse__parse_result_t__header__pred ((a us_rep2)) Bool (= 
  (to_rep4 (rec__parse__parse_result_t__return_code (us_split_discrs1 a))) 0))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep4
                            (rec__parse__parse_result_t__return_code
                            (us_split_discrs1 a))) (to_rep4
                                                   (rec__parse__parse_result_t__return_code
                                                   (us_split_discrs1 b))))
                         (=> (parse__parse_result_t__header__pred a)
                         (= (bool_eq2
                            (rec__parse__parse_result_t__header
                            (us_split_fields5 a))
                            (rec__parse__parse_result_t__header
                            (us_split_fields5 b))) true)))
                    true false))

(define-fun in_range4 ((rec__parse__parse_result_t__return_code1 Int)
  (a us_split_discrs)) Bool (= rec__parse__parse_result_t__return_code1 
  (to_rep4 (rec__parse__parse_result_t__return_code a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const parse__parse_result_t__return_code__first__bit Int)

(declare-const parse__parse_result_t__return_code__last__bit Int)

(declare-const parse__parse_result_t__return_code__position Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit parse__parse_result_t__return_code__last__bit))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position))

(declare-const parse__parse_result_t__header__first__bit Int)

(declare-const parse__parse_result_t__header__last__bit Int)

(declare-const parse__parse_result_t__header__position Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit parse__parse_result_t__header__last__bit))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position))

(declare-fun user_eq7 (us_rep2 us_rep2) Bool)

(declare-const dummy7 us_rep2)

(declare-datatypes ((parse_result_t__ref 0))
(((parse_result_t__refqtmk (parse_result_t__content us_rep2)))))
(define-fun parse_result_t__ref_parse_result_t__content__projection ((a parse_result_t__ref)) us_rep2 
  (parse_result_t__content a))

(declare-const result____attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_201 us_rep2)
  (temp___skip_top_level_202 Bool)) Bool (= (to_rep4
                                            (rec__parse__parse_result_t__return_code
                                            (us_split_discrs1
                                            temp___expr_201))) 1))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun extract_unsigned_16 ((Array Int us_rep) Int) (_ BitVec 16))

(declare-fun extract_unsigned_16__function_guard ((_ BitVec 16)
  (Array Int us_rep) Int) Bool)

(define-fun dynamic_invariant ((temp___expr_168 (_ BitVec 16))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool true)

(declare-sort network_dns_query_range 0)

(declare-fun network_dns_query_rangeqtint (network_dns_query_range) Int)

;; network_dns_query_range'axiom
  (assert
  (forall ((i network_dns_query_range))
  (and (<= 0 (network_dns_query_rangeqtint i))
  (<= (network_dns_query_rangeqtint i) 512))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 512)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (network_dns_query_range network_dns_query_range) Bool)

(declare-const dummy8 network_dns_query_range)

(declare-datatypes ((network_dns_query_range__ref 0))
(((network_dns_query_range__refqtmk
  (network_dns_query_range__content network_dns_query_range)))))
(define-fun network_dns_query_range__ref_network_dns_query_range__content__projection ((a network_dns_query_range__ref)) network_dns_query_range 
  (network_dns_query_range__content a))

(define-fun dynamic_invariant1 ((temp___expr_212 Int)
  (temp___is_init_208 Bool) (temp___skip_constant_209 Bool)
  (temp___do_toplevel_210 Bool)
  (temp___do_typ_inv_211 Bool)) Bool (=>
                                     (or (= temp___is_init_208 true)
                                     (<= 0 512)) (in_range5 temp___expr_212)))

;; extract_unsigned_16__post_axiom
  (assert
  (forall ((query1 (Array Int us_rep)))
  (forall ((offset Int))
  (! (=>
     (and (dynamic_invariant1 offset true true true true) (<= offset 511))
     (let ((result (extract_unsigned_16 query1 offset)))
     (=> (extract_unsigned_16__function_guard result query1 offset)
     (dynamic_invariant result true false true true)))) :pattern ((extract_unsigned_16
                                                                  query1
                                                                  offset)) ))))

(declare-fun extract_bits_of_octet ((Array Int us_rep) Int Int
  (_ BitVec 8)) (_ BitVec 8))

(declare-fun extract_bits_of_octet__function_guard ((_ BitVec 8)
  (Array Int us_rep) Int Int (_ BitVec 8)) Bool)

(define-fun dynamic_invariant2 ((temp___expr_219 (_ BitVec 8))
  (temp___is_init_215 Bool) (temp___skip_constant_216 Bool)
  (temp___do_toplevel_217 Bool) (temp___do_typ_inv_218 Bool)) Bool true)

(declare-sort bit_range 0)

(declare-fun bit_rangeqtint (bit_range) Int)

;; bit_range'axiom
  (assert
  (forall ((i bit_range))
  (and (<= 0 (bit_rangeqtint i)) (<= (bit_rangeqtint i) 7))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (bit_range bit_range) Bool)

(declare-const dummy9 bit_range)

(declare-datatypes ((bit_range__ref 0))
(((bit_range__refqtmk (bit_range__content bit_range)))))
(define-fun bit_range__ref_bit_range__content__projection ((a bit_range__ref)) bit_range 
  (bit_range__content a))

(define-fun dynamic_invariant3 ((temp___expr_249 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (or (= temp___is_init_245 true)
                                     (<= 0 7)) (in_range6 temp___expr_249)))

;; extract_bits_of_octet__post_axiom
  (assert
  (forall ((query1 (Array Int us_rep)))
  (forall ((offset Int) (bit_shift_right Int))
  (forall ((bit_mask (_ BitVec 8)))
  (! (=>
     (and
     (and (dynamic_invariant1 offset true true true true) (dynamic_invariant3
     bit_shift_right true true true true)) (dynamic_invariant2 bit_mask true
     true true true))
     (let ((result (extract_bits_of_octet query1 offset bit_shift_right
                   bit_mask)))
     (=> (extract_bits_of_octet__function_guard result query1 offset
     bit_shift_right bit_mask) (dynamic_invariant2 result true false true
     true)))) :pattern ((extract_bits_of_octet query1 offset bit_shift_right
                        bit_mask)) )))))

(declare-const r2b Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const r6b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const r10b Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r14b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const r18b Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const r22b Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const r26b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const r30b Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(define-fun dynamic_invariant4 ((temp___expr_161 Int)
  (temp___is_init_157 Bool) (temp___skip_constant_158 Bool)
  (temp___do_toplevel_159 Bool)
  (temp___do_typ_inv_160 Bool)) Bool (=>
                                     (or (= temp___is_init_157 true)
                                     (<= 0 1)) (in_range3 temp___expr_161)))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const parse__parse_result_t__return_code__first__bit1 Int)

(declare-const parse__parse_result_t__return_code__last__bit1 Int)

(declare-const parse__parse_result_t__return_code__position1 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit1))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit1 parse__parse_result_t__return_code__last__bit1))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position1))

(declare-const parse__parse_result_t__header__first__bit1 Int)

(declare-const parse__parse_result_t__header__last__bit1 Int)

(declare-const parse__parse_result_t__header__position1 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit1))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit1 parse__parse_result_t__header__last__bit1))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position1))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ((t3b__ref 0))
(((t3b__refqtmk (t3b__content us_rep2)))))
(define-fun t3b__ref_t3b__content__projection ((a t3b__ref)) us_rep2 
  (t3b__content a))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const parse__parse_result_t__return_code__first__bit2 Int)

(declare-const parse__parse_result_t__return_code__last__bit2 Int)

(declare-const parse__parse_result_t__return_code__position2 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit2))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit2 parse__parse_result_t__return_code__last__bit2))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position2))

(declare-const parse__parse_result_t__header__first__bit2 Int)

(declare-const parse__parse_result_t__header__last__bit2 Int)

(declare-const parse__parse_result_t__header__position2 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit2))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit2 parse__parse_result_t__header__last__bit2))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position2))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ((t7b__ref 0))
(((t7b__refqtmk (t7b__content us_rep2)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) us_rep2 
  (t7b__content a))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const parse__parse_result_t__return_code__first__bit3 Int)

(declare-const parse__parse_result_t__return_code__last__bit3 Int)

(declare-const parse__parse_result_t__return_code__position3 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit3))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit3 parse__parse_result_t__return_code__last__bit3))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position3))

(declare-const parse__parse_result_t__header__first__bit3 Int)

(declare-const parse__parse_result_t__header__last__bit3 Int)

(declare-const parse__parse_result_t__header__position3 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit3))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit3 parse__parse_result_t__header__last__bit3))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position3))

(declare-fun user_eq12 (us_rep2 us_rep2) Bool)

(declare-const dummy12 us_rep2)

(declare-datatypes ((t11b__ref 0))
(((t11b__refqtmk (t11b__content us_rep2)))))
(define-fun t11b__ref_t11b__content__projection ((a t11b__ref)) us_rep2 
  (t11b__content a))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const parse__parse_result_t__return_code__first__bit4 Int)

(declare-const parse__parse_result_t__return_code__last__bit4 Int)

(declare-const parse__parse_result_t__return_code__position4 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit4))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit4 parse__parse_result_t__return_code__last__bit4))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position4))

(declare-const parse__parse_result_t__header__first__bit4 Int)

(declare-const parse__parse_result_t__header__last__bit4 Int)

(declare-const parse__parse_result_t__header__position4 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit4))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit4 parse__parse_result_t__header__last__bit4))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position4))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ((t15b__ref 0))
(((t15b__refqtmk (t15b__content us_rep2)))))
(define-fun t15b__ref_t15b__content__projection ((a t15b__ref)) us_rep2 
  (t15b__content a))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const parse__parse_result_t__return_code__first__bit5 Int)

(declare-const parse__parse_result_t__return_code__last__bit5 Int)

(declare-const parse__parse_result_t__return_code__position5 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit5))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit5 parse__parse_result_t__return_code__last__bit5))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position5))

(declare-const parse__parse_result_t__header__first__bit5 Int)

(declare-const parse__parse_result_t__header__last__bit5 Int)

(declare-const parse__parse_result_t__header__position5 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit5))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit5 parse__parse_result_t__header__last__bit5))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position5))

(declare-fun user_eq14 (us_rep2 us_rep2) Bool)

(declare-const dummy14 us_rep2)

(declare-datatypes ((t19b__ref 0))
(((t19b__refqtmk (t19b__content us_rep2)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) us_rep2 
  (t19b__content a))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-const parse__parse_result_t__return_code__first__bit6 Int)

(declare-const parse__parse_result_t__return_code__last__bit6 Int)

(declare-const parse__parse_result_t__return_code__position6 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit6))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit6 parse__parse_result_t__return_code__last__bit6))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position6))

(declare-const parse__parse_result_t__header__first__bit6 Int)

(declare-const parse__parse_result_t__header__last__bit6 Int)

(declare-const parse__parse_result_t__header__position6 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit6))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit6 parse__parse_result_t__header__last__bit6))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position6))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-const dummy15 us_rep2)

(declare-datatypes ((t23b__ref 0))
(((t23b__refqtmk (t23b__content us_rep2)))))
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) us_rep2 
  (t23b__content a))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const parse__parse_result_t__return_code__first__bit7 Int)

(declare-const parse__parse_result_t__return_code__last__bit7 Int)

(declare-const parse__parse_result_t__return_code__position7 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit7))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit7 parse__parse_result_t__return_code__last__bit7))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position7))

(declare-const parse__parse_result_t__header__first__bit7 Int)

(declare-const parse__parse_result_t__header__last__bit7 Int)

(declare-const parse__parse_result_t__header__position7 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit7))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit7 parse__parse_result_t__header__last__bit7))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position7))

(declare-fun user_eq16 (us_rep2 us_rep2) Bool)

(declare-const dummy16 us_rep2)

(declare-datatypes ((t27b__ref 0))
(((t27b__refqtmk (t27b__content us_rep2)))))
(define-fun t27b__ref_t27b__content__projection ((a t27b__ref)) us_rep2 
  (t27b__content a))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (<= 0 object__size10))

;; alignment_axiom
  (assert (<= 0 alignment10))

(declare-const parse__parse_result_t__return_code__first__bit8 Int)

(declare-const parse__parse_result_t__return_code__last__bit8 Int)

(declare-const parse__parse_result_t__return_code__position8 Int)

;; parse__parse_result_t__return_code__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__return_code__first__bit8))

;; parse__parse_result_t__return_code__last__bit_axiom
  (assert
  (< parse__parse_result_t__return_code__first__bit8 parse__parse_result_t__return_code__last__bit8))

;; parse__parse_result_t__return_code__position_axiom
  (assert (<= 0 parse__parse_result_t__return_code__position8))

(declare-const parse__parse_result_t__header__first__bit8 Int)

(declare-const parse__parse_result_t__header__last__bit8 Int)

(declare-const parse__parse_result_t__header__position8 Int)

;; parse__parse_result_t__header__first__bit_axiom
  (assert (<= 0 parse__parse_result_t__header__first__bit8))

;; parse__parse_result_t__header__last__bit_axiom
  (assert
  (< parse__parse_result_t__header__first__bit8 parse__parse_result_t__header__last__bit8))

;; parse__parse_result_t__header__position_axiom
  (assert (<= 0 parse__parse_result_t__header__position8))

(declare-fun user_eq17 (us_rep2 us_rep2) Bool)

(declare-const dummy17 us_rep2)

(declare-datatypes ((t31b__ref 0))
(((t31b__refqtmk (t31b__content us_rep2)))))
(define-fun t31b__ref_t31b__content__projection ((a t31b__ref)) us_rep2 
  (t31b__content a))

(define-fun dynamic_invariant5 ((temp___expr_175 Int)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)
  (temp___do_typ_inv_174 Bool)) Bool (=>
                                     (or (= temp___is_init_171 true)
                                     (<= 0 1)) (in_range1 temp___expr_175)))

(define-fun dynamic_invariant6 ((temp___expr_182 Int)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true)
                                     (<= 1 16)) (in_range2 temp___expr_182)))

(assert
;; defqtvc
 ;; File "parse.ads", line 15, characters 0-0
  (not
  (forall ((result____split_discrs return_code_t) (opcode (_ BitVec 8))
  (qdcount (_ BitVec 16)) (count (_ BitVec 16))
  (header__split_fields us_split_fields2))
  (=> (not (= result____attr__constrained true))
  (=> (dynamic_invariant2 opcode false false true true)
  (=> (dynamic_invariant qdcount false false true true)
  (=> (dynamic_invariant count false false true true)
  (let ((o query))
  (let ((o1 (extract_unsigned_16 o 0)))
  (=>
  (and (extract_unsigned_16__function_guard o1 o 0) (dynamic_invariant o1
  true false true true))
  (forall ((o2 unsigned_16))
  (=> (= (to_rep1 o2) o1)
  (forall ((header__split_fields1 us_split_fields2))
  (=>
  (= header__split_fields1 (us_split_fieldsqtmk1 o2
                           (rec__types__query_header__opcode
                           header__split_fields)
                           (rec__types__query_header__qdcount
                           header__split_fields)))
  (let ((o3 query))
  (let ((o4 (extract_bits_of_octet o3 2 7 #x01)))
  (=>
  (and (extract_bits_of_octet__function_guard o4 o3 2 7 #x01)
  (dynamic_invariant2 o4 true false true true))
  (forall ((spark__branch Bool))
  (=> (= spark__branch (ite (not (= o4 #x00)) true false))
  (=> (not (= spark__branch true))
  (let ((o5 query))
  (let ((o6 (extract_bits_of_octet o5 2 3 #x0F)))
  (=>
  (and (extract_bits_of_octet__function_guard o6 o5 2 3 #x0F)
  (dynamic_invariant2 o6 true false true true))
  (forall ((opcode1 (_ BitVec 8)))
  (=> (= opcode1 o6)
  (forall ((spark__branch1 Bool) (header__split_fields2 us_split_fields2))
  (=>
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (= opcode1 #x00) true false))
  (ite (= spark__branch2 true)
  (and
  (exists ((o7 query_opcode))
  (and (= (to_rep2 o7) 0)
  (= header__split_fields2 (us_split_fieldsqtmk1
                           (rec__types__query_header__id
                           header__split_fields1) o7
                           (rec__types__query_header__qdcount
                           header__split_fields1)))))
  (= spark__branch1 spark__branch2))
  (and (= spark__branch1 (ite (= opcode1 #x01) true false))
  (and (= spark__branch1 true)
  (exists ((o7 query_opcode))
  (and (= (to_rep2 o7) 1)
  (= header__split_fields2 (us_split_fieldsqtmk1
                           (rec__types__query_header__id
                           header__split_fields1) o7
                           (rec__types__query_header__qdcount
                           header__split_fields1))))))))))
  (forall ((o7 (_ BitVec 8)))
  (=>
  (= (to_rep (rec__types__octet__data (us_split_fields1 (select query 3)))) o7)
  (let ((o8 query))
  (let ((o9 (extract_bits_of_octet o8 2 0 #x06)))
  (=>
  (and (extract_bits_of_octet__function_guard o9 o8 2 0 #x06)
  (dynamic_invariant2 o9 true false true true))
  (forall ((spark__branch2 Bool))
  (=>
  (= spark__branch2 (or (ite (not (= o9 #x00)) true false) (ite (not
                                                                (= o7 #x00))
                                                           true false)))
  (=> (not (= spark__branch2 true))
  (let ((o10 query))
  (let ((o11 (extract_unsigned_16 o10 4)))
  (=>
  (and (extract_unsigned_16__function_guard o11 o10 4) (dynamic_invariant o11
  true false true true))
  (forall ((qdcount1 (_ BitVec 16)))
  (=> (= qdcount1 o11)
  (forall ((spark__branch3 Bool))
  (=>
  (= spark__branch3 (and (ite (bvuge qdcount1 #x0001) true false) (ite (bvule qdcount1 #x0010)
                                                                  true false)))
  (=> (= spark__branch3 true)
  (let ((o12 (bv2nat qdcount1)))
  (=> (in_range2 o12)
  (forall ((o13 qdcount_range))
  (=> (= (to_rep3 o13) o12)
  (forall ((header__split_fields3 us_split_fields2))
  (=>
  (= header__split_fields3 (us_split_fieldsqtmk1
                           (rec__types__query_header__id
                           header__split_fields2)
                           (rec__types__query_header__opcode
                           header__split_fields2) o13))
  (let ((o14 query))
  (let ((o15 (extract_unsigned_16 o14 6)))
  (=>
  (and (extract_unsigned_16__function_guard o15 o14 6) (dynamic_invariant o15
  true false true true))
  (forall ((count1 (_ BitVec 16)))
  (=> (= count1 o15)
  (forall ((spark__branch4 Bool))
  (=> (= spark__branch4 (ite (not (= count1 #x0000)) true false))
  (=> (= spark__branch4 true)
  (forall ((parse__parse_header__R18b__assume Int))
  (=> (= (to_rep4 result____split_discrs) parse__parse_header__R18b__assume)
  (=> (= parse__parse_header__R18b__assume r18b)
  (=> (dynamic_invariant4 r18b true false true true)
  (forall ((o16 return_code_t))
  (=> (= (to_rep4 o16) 1)
  (=> (= result____attr__constrained true) (= o16 result____split_discrs)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
