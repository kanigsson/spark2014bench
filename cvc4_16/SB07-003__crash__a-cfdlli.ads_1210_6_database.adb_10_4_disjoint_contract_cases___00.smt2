(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ((count_type__ref 0))
(((count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk (rec__database__db_pack__cursor__node count_type)))))
(define-fun us_split_fields_rec__database__db_pack__cursor__node__projection ((a us_split_fields)) count_type 
  (rec__database__db_pack__cursor__node a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__database__db_pack__cursor__node
                           (us_split_fields1 a))) (to_rep
                                                  (rec__database__db_pack__cursor__node
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const database__db_pack__cursor__node__first__bit Int)

(declare-const database__db_pack__cursor__node__last__bit Int)

(declare-const database__db_pack__cursor__node__position Int)

;; database__db_pack__cursor__node__first__bit_axiom
  (assert (<= 0 database__db_pack__cursor__node__first__bit))

;; database__db_pack__cursor__node__last__bit_axiom
  (assert
  (< database__db_pack__cursor__node__first__bit database__db_pack__cursor__node__last__bit))

;; database__db_pack__cursor__node__position_axiom
  (assert (<= 0 database__db_pack__cursor__node__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((cursor__ref 0))
(((cursor__refqtmk (cursor__content us_rep)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep 
  (cursor__content a))

(declare-const no_element us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__database__db_pack__list__capacity count_type)))))
(define-fun us_split_discrs_rec__database__db_pack__list__capacity__projection ((a us_split_discrs)) count_type 
  (rec__database__db_pack__list__capacity a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1 (rec__database__db_pack__list us_main_type)))))
(define-fun us_split_fields_rec__database__db_pack__list__projection ((a us_split_fields2)) us_main_type 
  (rec__database__db_pack__list a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs1 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__database__db_pack__list__capacity
                            (us_split_discrs1 a))) (to_rep
                                                   (rec__database__db_pack__list__capacity
                                                   (us_split_discrs1 b))))
                         (= (us_main_eq
                            (rec__database__db_pack__list
                            (us_split_fields3 a))
                            (rec__database__db_pack__list
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range2 ((rec__database__db_pack__list__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__database__db_pack__list__capacity1 
  (to_rep (rec__database__db_pack__list__capacity a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const database__db_pack__list__capacity__first__bit Int)

(declare-const database__db_pack__list__capacity__last__bit Int)

(declare-const database__db_pack__list__capacity__position Int)

;; database__db_pack__list__capacity__first__bit_axiom
  (assert (<= 0 database__db_pack__list__capacity__first__bit))

;; database__db_pack__list__capacity__last__bit_axiom
  (assert
  (< database__db_pack__list__capacity__first__bit database__db_pack__list__capacity__last__bit))

;; database__db_pack__list__capacity__position_axiom
  (assert (<= 0 database__db_pack__list__capacity__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ((list__ref 0))
(((list__refqtmk (list__content us_rep1)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep1 
  (list__content a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun dynamic_invariant ((temp___expr_299 Int)
  (temp___is_init_295 Bool) (temp___skip_constant_296 Bool)
  (temp___do_toplevel_297 Bool)
  (temp___do_typ_inv_298 Bool)) Bool (=>
                                     (or (= temp___is_init_295 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_299)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__database__db_pack__list__capacity
                (us_split_discrs1 container))))
     (dynamic_invariant result true false true true))) :pattern ((length
                                                                 container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-const dummy3 us_rep2)

(declare-datatypes ((sequence__ref 0))
(((sequence__refqtmk (sequence__content us_rep2)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep2 
  (sequence__content a))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq4 (us_rep3 us_rep3) Bool)

(declare-const dummy4 us_rep3)

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content us_rep3)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep3 
  (map__content a))

(declare-fun model1 (us_rep1) us_rep2)

(declare-fun model__function_guard (us_rep2 us_rep1) Bool)

(declare-fun length1 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun last ((container us_rep2)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep2) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq6 (positive positive) Bool)

(declare-const dummy6 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (character character) Bool)

(declare-const dummy7 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep2 (select a temp___idx_91)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep2 (select a temp___idx_91)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last1 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last1 (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep1 (last1 (rt a))))

(define-fun length3 ((a us_t)) Int (ite (<= (first1 a) (last2 a))
                                   (+ (- (last2 a) (first1 a)) 1) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment4))

(define-fun bool_eq5 ((x us_t)
  (y us_t)) Bool (bool_eq4 (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last1 (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last1 (rt y)))))

(declare-fun user_eq8 (us_t us_t) Bool)

(declare-const dummy8 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-datatypes ((email_address_type__ref 0))
(((email_address_type__refqtmk (email_address_type__content us_t)))))
(define-fun email_address_type__ref_email_address_type__content__projection ((a email_address_type__ref)) us_t 
  (email_address_type__content a))

(declare-datatypes ((us_rep4 0))
(((us_repqtmk2
  (rec__database__email_access__is_null_pointer Bool)(rec__database__email_access__pointer_address Int)(rec__database__email_access__pointer_value us_t)))))
(define-fun us_rep_rec__database__email_access__is_null_pointer__projection ((a us_rep4)) Bool 
  (rec__database__email_access__is_null_pointer a))

(define-fun us_rep_rec__database__email_access__pointer_address__projection ((a us_rep4)) Int 
  (rec__database__email_access__pointer_address a))

(define-fun us_rep_rec__database__email_access__pointer_value__projection ((a us_rep4)) us_t 
  (rec__database__email_access__pointer_value a))

(declare-datatypes ((us_rep__ref 0))
(((us_rep__refqtmk (us_rep__content us_rep4)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep4 
  (us_rep__content a))

(define-fun bool_eq6 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (rec__database__email_access__is_null_pointer a) 
                         (rec__database__email_access__is_null_pointer b))
                         (=>
                         (not
                         (= (rec__database__email_access__is_null_pointer a) true))
                         (and
                         (= (rec__database__email_access__pointer_address a) 
                         (rec__database__email_access__pointer_address b))
                         (= (rec__database__email_access__pointer_value a) 
                         (rec__database__email_access__pointer_value b)))))
                    true false))

(define-fun rec__database__email_access__pointer_value__pred ((a us_rep4)) Bool 
  (not (= (rec__database__email_access__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep4)

;; __null_pointer__def_axiom
  (assert
  (= (rec__database__email_access__is_null_pointer us_null_pointer) true))

(declare-const dummy9 us_rep4)

(declare-datatypes ((email_access__ref 0))
(((email_access__refqtmk (email_access__content us_rep4)))))
(define-fun email_access__ref_email_access__content__projection ((a email_access__ref)) us_rep4 
  (email_access__content a))

(declare-datatypes ((us_split_fields4 0))
(((us_split_fieldsqtmk2
  (rec__database__db_entry_type__key integer)(rec__database__db_entry_type__email us_rep4)))))
(define-fun us_split_fields_rec__database__db_entry_type__key__projection ((a us_split_fields4)) integer 
  (rec__database__db_entry_type__key a))

(define-fun us_split_fields_rec__database__db_entry_type__email__projection ((a us_split_fields4)) us_rep4 
  (rec__database__db_entry_type__email a))

(declare-datatypes ((us_split_fields__ref2 0))
(((us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ((us_rep5 0))
(((us_repqtmk3 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__projection ((a us_rep5)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq7 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (to_rep1
                            (rec__database__db_entry_type__key
                            (us_split_fields5 a))) (to_rep1
                                                   (rec__database__db_entry_type__key
                                                   (us_split_fields5 b))))
                         (= (bool_eq6
                            (rec__database__db_entry_type__email
                            (us_split_fields5 a))
                            (rec__database__db_entry_type__email
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const database__db_entry_type__key__first__bit Int)

(declare-const database__db_entry_type__key__last__bit Int)

(declare-const database__db_entry_type__key__position Int)

;; database__db_entry_type__key__first__bit_axiom
  (assert (<= 0 database__db_entry_type__key__first__bit))

;; database__db_entry_type__key__last__bit_axiom
  (assert
  (< database__db_entry_type__key__first__bit database__db_entry_type__key__last__bit))

;; database__db_entry_type__key__position_axiom
  (assert (<= 0 database__db_entry_type__key__position))

(declare-const database__db_entry_type__email__first__bit Int)

(declare-const database__db_entry_type__email__last__bit Int)

(declare-const database__db_entry_type__email__position Int)

;; database__db_entry_type__email__first__bit_axiom
  (assert (<= 0 database__db_entry_type__email__first__bit))

;; database__db_entry_type__email__last__bit_axiom
  (assert
  (< database__db_entry_type__email__first__bit database__db_entry_type__email__last__bit))

;; database__db_entry_type__email__position_axiom
  (assert (<= 0 database__db_entry_type__email__position))

(declare-fun user_eq9 (us_rep5 us_rep5) Bool)

(declare-const dummy10 us_rep5)

(declare-datatypes ((db_entry_type__ref 0))
(((db_entry_type__refqtmk (db_entry_type__content us_rep5)))))
(define-fun db_entry_type__ref_db_entry_type__content__projection ((a db_entry_type__ref)) us_rep5 
  (db_entry_type__content a))

(declare-datatypes ((element_type__ref 0))
(((element_type__refqtmk (element_type__content us_rep5)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) us_rep5 
  (element_type__content a))

(declare-fun get (us_rep2 Int) us_rep5)

(declare-fun get__function_guard (us_rep5 us_rep2 Int) Bool)

(define-fun oeq1 ((left us_rep2)
  (right us_rep2)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (bool_eq7
                                                                   (get left
                                                                   n)
                                                                   (get right
                                                                   n)) true)))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption ((temp___expr_351 us_rep2)
  (temp___skip_top_level_352 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_352 true))
                                         (= (length1 temp___expr_351) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (= (length1 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

(declare-fun positions (us_rep1) us_rep3)

(declare-fun positions__function_guard (us_rep3 us_rep1) Bool)

(declare-datatypes ((key_type__ref 0))
(((key_type__refqtmk (key_type__content us_rep)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref)) us_rep 
  (key_type__content a))

(declare-fun has_key (us_rep3 us_rep) Bool)

(declare-fun has_key__function_guard (Bool us_rep3 us_rep) Bool)

(declare-fun get1 (us_rep3 us_rep) Int)

(declare-fun get__function_guard1 (Int us_rep3 us_rep) Bool)

(declare-fun length4 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-fun oeq2 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep3 us_rep3) Bool)

(declare-fun is_empty (us_rep3) Bool)

(declare-fun is_empty__function_guard (Bool us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq4 a b) (oeq2 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_453 us_rep3)
  (temp___skip_top_level_454 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_454 true))
                                         (and
                                         (= (is_empty temp___expr_453) true)
                                         (= (length4 temp___expr_453) 0))))

(define-fun default_initial_assumption2 ((temp___expr_439 us_rep)
  (temp___skip_top_level_440 Bool)) Bool (= (to_rep
                                            (rec__database__db_pack__cursor__node
                                            (us_split_fields1
                                            temp___expr_439))) 0))

;; positions__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep))
     (=> (= (has_key result i) true)
     (and
     (let ((temp___506 (get1 result i)))
     (and (<= 1 temp___506) (<= temp___506 (length container))))
     (forall ((j us_rep))
     (=> (= (has_key result j) true)
     (=> (= (get1 result i) (get1 result j)) (= (bool_eq i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun has_element ((container us_rep1)
  (position us_rep)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep1 us_rep) Bool)

(define-fun default_initial_assumption3 ((temp___expr_313 us_rep)
  (temp___skip_top_level_314 Bool)) Bool (= (to_rep
                                            (rec__database__db_pack__cursor__node
                                            (us_split_fields1
                                            temp___expr_313))) 0))

(declare-const container__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const before us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const position us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range3 temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range4
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_279 us_rep5)
  (temp___is_init_275 Bool) (temp___skip_constant_276 Bool)
  (temp___do_toplevel_277 Bool)
  (temp___do_typ_inv_278 Bool)) Bool (=>
                                     (not
                                     (= (rec__database__email_access__is_null_pointer
                                        (rec__database__db_entry_type__email
                                        (us_split_fields5 temp___expr_279))) true))
                                     (dynamic_property 1 2147483647
                                     (first1
                                     (rec__database__email_access__pointer_value
                                     (rec__database__db_entry_type__email
                                     (us_split_fields5 temp___expr_279))))
                                     (last2
                                     (rec__database__email_access__pointer_value
                                     (rec__database__db_entry_type__email
                                     (us_split_fields5 temp___expr_279)))))))

(define-fun default_initial_assumption4 ((temp___expr_281 us_rep5)
  (temp___skip_top_level_282 Bool)) Bool (= (rec__database__email_access__is_null_pointer
                                            (rec__database__db_entry_type__email
                                            (us_split_fields5
                                            temp___expr_281))) true))

(define-fun dynamic_invariant4 ((temp___expr_263 us_t)
  (temp___is_init_259 Bool) (temp___skip_constant_260 Bool)
  (temp___do_toplevel_261 Bool)
  (temp___do_typ_inv_262 Bool)) Bool (=>
                                     (not (= temp___skip_constant_260 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_263)
                                     (last2 temp___expr_263))))

(define-fun dynamic_invariant5 ((temp___expr_269 us_rep4)
  (temp___is_init_265 Bool) (temp___skip_constant_266 Bool)
  (temp___do_toplevel_267 Bool)
  (temp___do_typ_inv_268 Bool)) Bool (=>
                                     (not
                                     (= (rec__database__email_access__is_null_pointer
                                        temp___expr_269) true))
                                     (dynamic_property 1 2147483647
                                     (first1
                                     (rec__database__email_access__pointer_value
                                     temp___expr_269))
                                     (last2
                                     (rec__database__email_access__pointer_value
                                     temp___expr_269)))))

(define-fun default_initial_assumption5 ((temp___expr_271 us_rep4)
  (temp___skip_top_level_272 Bool)) Bool (= (rec__database__email_access__is_null_pointer
                                            temp___expr_271) true))

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk (us_split_fieldsqtmk rliteral))))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep1) (right us_rep1))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq10 (extended_index extended_index) Bool)

(declare-const dummy11 extended_index)

(declare-datatypes ((extended_index__ref 0))
(((extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant6 ((temp___expr_343 Int)
  (temp___is_init_339 Bool) (temp___skip_constant_340 Bool)
  (temp___do_toplevel_341 Bool)
  (temp___do_typ_inv_342 Bool)) Bool (=>
                                     (or (= temp___is_init_339 true)
                                     (<= 0 2147483647)) (in_range6
                                     temp___expr_343)))

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true true))) :pattern ((length1 container)) )))

(define-fun dynamic_invariant7 ((temp___expr_333 us_rep5)
  (temp___is_init_329 Bool) (temp___skip_constant_330 Bool)
  (temp___do_toplevel_331 Bool)
  (temp___do_typ_inv_332 Bool)) Bool (=>
                                     (not
                                     (= (rec__database__email_access__is_null_pointer
                                        (rec__database__db_entry_type__email
                                        (us_split_fields5 temp___expr_333))) true))
                                     (dynamic_property 1 2147483647
                                     (first1
                                     (rec__database__email_access__pointer_value
                                     (rec__database__db_entry_type__email
                                     (us_split_fields5 temp___expr_333))))
                                     (last2
                                     (rec__database__email_access__pointer_value
                                     (rec__database__db_entry_type__email
                                     (us_split_fields5 temp___expr_333)))))))

(define-fun default_initial_assumption6 ((temp___expr_335 us_rep5)
  (temp___skip_top_level_336 Bool)) Bool (= (rec__database__email_access__is_null_pointer
                                            (rec__database__db_entry_type__email
                                            (us_split_fields5
                                            temp___expr_335))) true))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((position1 Int))
  (! (=>
     (and (dynamic_invariant6 position1 true true true true)
     (and (<= 1 position1) (<= position1 (last container))))
     (dynamic_invariant7 (get container position1) true false true true)) :pattern (
  (get container position1)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k us_rep))
     (and (= (has_key container k) true) (= (bool_eq k key) true)))
     (= (has_key container key) true))) :pattern ((has_key container key)) ))))

(declare-fun witness (us_rep3 us_rep) Int)

(declare-fun witness__function_guard (Int us_rep3 us_rep) Bool)

(declare-fun w_get (us_rep3 Int) Int)

(declare-fun w_get__function_guard (Int us_rep3 Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq11 (element_type element_type) Bool)

(declare-const dummy12 element_type)

(declare-datatypes ((element_type__ref1 0))
(((element_type__refqtmk1 (element_type__content1 element_type)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref1)) element_type 
  (element_type__content1 a))

(define-fun dynamic_invariant8 ((temp___expr_445 Int)
  (temp___is_init_441 Bool) (temp___skip_constant_442 Bool)
  (temp___do_toplevel_443 Bool)
  (temp___do_typ_inv_444 Bool)) Bool (=>
                                     (or (= temp___is_init_441 true)
                                     (<= 1 2147483647)) (in_range7
                                     temp___expr_445)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep))
  (! (=> (= (has_key container key) true)
     (let ((result (get1 container key)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get container (witness container key)))
     (forall ((k us_rep))
     (=> (= (has_key container k) true)
     (= (= (bool_eq k key) true)
     (= (witness container key) (witness container k)))))))
     (dynamic_invariant8 result true false true true)))) :pattern ((get1
                                                                   container
                                                                   key)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (dynamic_invariant (length4 container)
  true false true true) :pattern ((length4 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq2 left right) true)
     (and
     (forall ((key us_rep))
     (=> (= (has_key left key) true)
     (and (= (has_key right key) true) (= (get1 right key) (get1 left key)))))
     (forall ((key us_rep))
     (=> (= (has_key right key) true) (= (has_key left key) true))))) :pattern (
  (oeq2 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (= (is_empty container) true)
     (forall ((key us_rep)) (not (= (has_key container key) true)))) :pattern (
  (is_empty container)) )))

(declare-fun has_witness (us_rep3 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep3 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key us_rep))
  (! (=> (= (has_key container key) true)
     (let ((result (witness container key)))
     (and (= (has_witness container result) true) (dynamic_invariant result
     true false true true)))) :pattern ((witness container key)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant8
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

(assert
;; defqtvc
 ;; File "a-cfdlli.ads", line 1200, characters 0-0
  (not
  (forall ((container__split_fields us_main_type))
  (=> (= (us_repqtmk (us_split_fieldsqtmk rliteral)) no_element)
  (=>
  (or
  (= (has_element
     (us_repqtmk1 container__split_discrs
     (us_split_fieldsqtmk1 container__split_fields)) before) true)
  (= (bool_eq before no_element) true))
  (=>
  (= (has_element
     (us_repqtmk1 container__split_discrs
     (us_split_fieldsqtmk1 container__split_fields)) position) true)
  (<= (+ (+ 0 (ite (= (bool_eq before position) true) 1 0)) (ite (= (bool_eq
                                                                    before
                                                                    no_element) true)
                                                            1 0)) 1)))))))
(check-sat)
