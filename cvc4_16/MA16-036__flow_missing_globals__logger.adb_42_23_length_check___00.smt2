(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; Div_unique
  (assert
  (forall ((x Int) (y Int) (q Int))
  (=> (< 0 y) (=> (and (<= (* q y) x) (< x (+ (* q y) y))) (= (div x y) q)))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div x y)) (<= (div x y) x)))))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div x y) 0))))

;; Div_inf_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (< 0 x) (<= x y)) (= (div (- x) y) (- 1)))))

;; Mod_0
  (assert (forall ((y Int)) (=> (not (= y 0)) (= (mod 0 y) 0))))

;; Div_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div 1 y) 0))))

;; Div_minus1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (div (- 1) y) (- 1)))))

;; Mod_1_left
  (assert (forall ((y Int)) (=> (< 1 y) (= (mod 1 y) 1))))

;; Mod_minus1_left
  (assert
  (forall ((y Int))
  (! (=> (< 1 y) (= (mod (- 1) y) (- y 1))) :pattern ((mod (- 1) y)) )))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (div (+ (* x y) z) x) (+ y (div z x)))) :pattern ((div (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (< 0 x) (= (mod (+ (* x y) z) x) (mod z x))) :pattern ((mod (+ (* x y) z) x)) )))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2nat x)
                                            (- (- 65536 (bv2nat x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

;; lsr_bv_is_lsr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvlshr x n) (lsr x (bv2nat n)))))

;; asr_bv_is_asr
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvashr x n) (asr x (bv2nat n)))))

;; lsl_bv_is_lsl
  (assert
  (forall ((x (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvshl x n) (lsl x (bv2nat n)))))

;; rotate_left_bv_is_rotate_left
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvshl v (bvurem n (_ bv16 16))) (bvlshr v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_left1 v (bv2nat n)))))

;; rotate_right_bv_is_rotate_right
  (assert
  (forall ((v (_ BitVec 16)) (n (_ BitVec 16)))
  (= (bvor (bvlshr v (bvurem n (_ bv16 16))) (bvshl v (bvsub (_ bv16 16) (bvurem n (_ bv16 16))))) 
  (rotate_right1 v (bv2nat n)))))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

;; nth_bv_def
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (= (nth_bv x i) true) (not (= (bvand (bvlshr x i) #x0001) #x0000)))))

;; Nth_bv_is_nth
  (assert
  (forall ((x (_ BitVec 16)) (i (_ BitVec 16)))
  (= (nth x (bv2nat i)) (nth_bv x i))))

;; Nth_bv_is_nth2
  (assert
  (forall ((x (_ BitVec 16)) (i Int))
  (=> (and (<= 0 i) (< i 65536)) (= (nth_bv x ((_ int2bv 16) i)) (nth x i)))))

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

;; eq_sub_bv_def
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (let ((mask (bvshl (bvsub (bvshl #x0001 n) #x0001) i)))
  (= (eq_sub_bv a b i n) (= (bvand b mask) (bvand a mask))))))

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

;; eq_sub_equiv
  (assert
  (forall ((a (_ BitVec 16)) (b (_ BitVec 16)) (i (_ BitVec 16))
  (n (_ BitVec 16)))
  (= (eq_sub a b (bv2nat i) (bv2nat n)) (eq_sub_bv a b i n))))

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes ((t__ref1 0))
(((t__refqtmk1 (t__content1 Float64)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort log_index 0)

(define-fun in_range1 ((x (_ BitVec 16))) Bool (and (bvule #x0000 x)
                                               (bvule x #x0257)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))

(declare-fun user_eq (log_index log_index) Bool)

(declare-const dummy log_index)

(declare-datatypes ((log_index__ref 0))
(((log_index__refqtmk (log_index__content log_index)))))
(define-fun log_index__ref_log_index__content__projection ((a log_index__ref)) log_index 
  (log_index__content a))

(declare-fun to_rep (log_index) (_ BitVec 16))

(declare-fun of_rep ((_ BitVec 16)) log_index)

;; inversion_axiom
  (assert
  (forall ((x log_index))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x log_index)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x #x0258)))
     (=> (in_range1 y) (= (to_rep (of_rep x)) y))) :pattern ((to_rep
                                                             (of_rep x))) )))

(define-fun to_int2 ((x log_index)) Int (bv2nat (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x log_index)) (! (in_range_int
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort long_float 0)

(declare-fun user_eq1 (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float64)

(declare-const dummy1 long_float)

(declare-datatypes ((long_float__ref 0))
(((long_float__refqtmk (long_float__content long_float)))))
(define-fun long_float__ref_long_float__content__projection ((a long_float__ref)) long_float 
  (long_float__content a))

(declare-fun to_rep1 (long_float) Float64)

(declare-fun of_rep1 (Float64) long_float)

;; inversion_axiom
  (assert
  (forall ((x long_float))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x long_float))
  (! (fp.isFinite64 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (fp.isFinite64 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                                  (of_rep1 x))) )))

(declare-sort unsigned_16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 16))

(declare-fun user_eq2 (unsigned_16 unsigned_16) Bool)

(declare-const dummy2 unsigned_16)

(declare-datatypes ((unsigned_16__ref 0))
(((unsigned_16__refqtmk (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref_unsigned_16__content__projection ((a unsigned_16__ref)) unsigned_16 
  (unsigned_16__content a))

(declare-fun to_rep2 (unsigned_16) (_ BitVec 16))

(declare-fun of_rep2 ((_ BitVec 16)) unsigned_16)

;; inversion_axiom
  (assert
  (forall ((x unsigned_16))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int3 ((x unsigned_16)) Int (bv2nat (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_16)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__logger__log_entry__ngrotations unsigned_16)(rec__logger__log_entry__ngclicktime unsigned_16)(rec__logger__log_entry__millisecs unsigned_16)(rec__logger__log_entry__estimatedgroundvelocity long_float)(rec__logger__log_entry__estimatedgroundvelocityisavailable Bool)))))
(define-fun us_split_fields_rec__logger__log_entry__ngrotations__projection ((a us_split_fields)) unsigned_16 
  (rec__logger__log_entry__ngrotations a))

(define-fun us_split_fields_rec__logger__log_entry__ngclicktime__projection ((a us_split_fields)) unsigned_16 
  (rec__logger__log_entry__ngclicktime a))

(define-fun us_split_fields_rec__logger__log_entry__millisecs__projection ((a us_split_fields)) unsigned_16 
  (rec__logger__log_entry__millisecs a))

(define-fun us_split_fields_rec__logger__log_entry__estimatedgroundvelocity__projection ((a us_split_fields)) long_float 
  (rec__logger__log_entry__estimatedgroundvelocity a))

(define-fun us_split_fields_rec__logger__log_entry__estimatedgroundvelocityisavailable__projection ((a us_split_fields)) Bool 
  (rec__logger__log_entry__estimatedgroundvelocityisavailable a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__logger__log_entry__ngrotations
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__logger__log_entry__ngrotations
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__logger__log_entry__ngclicktime
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__logger__log_entry__ngclicktime
                                                  (us_split_fields1 b)))))
                        (and
                        (and
                        (= (to_rep2
                           (rec__logger__log_entry__millisecs
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__logger__log_entry__millisecs
                                                  (us_split_fields1 b))))
                        (fp.eq (to_rep1
                               (rec__logger__log_entry__estimatedgroundvelocity
                               (us_split_fields1 a))) (to_rep1
                                                      (rec__logger__log_entry__estimatedgroundvelocity
                                                      (us_split_fields1 b)))))
                        (= (ite (rec__logger__log_entry__estimatedgroundvelocityisavailable
                                (us_split_fields1 a)) 1 0) (ite (rec__logger__log_entry__estimatedgroundvelocityisavailable
                                                                (us_split_fields1
                                                                b)) 1 0))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const logger__log_entry__ngrotations__first__bit Int)

(declare-const logger__log_entry__ngrotations__last__bit Int)

(declare-const logger__log_entry__ngrotations__position Int)

;; logger__log_entry__ngrotations__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngrotations__first__bit))

;; logger__log_entry__ngrotations__last__bit_axiom
  (assert
  (< logger__log_entry__ngrotations__first__bit logger__log_entry__ngrotations__last__bit))

;; logger__log_entry__ngrotations__position_axiom
  (assert (<= 0 logger__log_entry__ngrotations__position))

(declare-const logger__log_entry__ngclicktime__first__bit Int)

(declare-const logger__log_entry__ngclicktime__last__bit Int)

(declare-const logger__log_entry__ngclicktime__position Int)

;; logger__log_entry__ngclicktime__first__bit_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__first__bit))

;; logger__log_entry__ngclicktime__last__bit_axiom
  (assert
  (< logger__log_entry__ngclicktime__first__bit logger__log_entry__ngclicktime__last__bit))

;; logger__log_entry__ngclicktime__position_axiom
  (assert (<= 0 logger__log_entry__ngclicktime__position))

(declare-const logger__log_entry__millisecs__first__bit Int)

(declare-const logger__log_entry__millisecs__last__bit Int)

(declare-const logger__log_entry__millisecs__position Int)

;; logger__log_entry__millisecs__first__bit_axiom
  (assert (<= 0 logger__log_entry__millisecs__first__bit))

;; logger__log_entry__millisecs__last__bit_axiom
  (assert
  (< logger__log_entry__millisecs__first__bit logger__log_entry__millisecs__last__bit))

;; logger__log_entry__millisecs__position_axiom
  (assert (<= 0 logger__log_entry__millisecs__position))

(declare-const logger__log_entry__estimatedgroundvelocity__first__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocity__last__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocity__position Int)

;; logger__log_entry__estimatedgroundvelocity__first__bit_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__first__bit))

;; logger__log_entry__estimatedgroundvelocity__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocity__first__bit logger__log_entry__estimatedgroundvelocity__last__bit))

;; logger__log_entry__estimatedgroundvelocity__position_axiom
  (assert (<= 0 logger__log_entry__estimatedgroundvelocity__position))

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__first__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__last__bit Int)

(declare-const logger__log_entry__estimatedgroundvelocityisavailable__position Int)

;; logger__log_entry__estimatedgroundvelocityisavailable__first__bit_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__first__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__last__bit_axiom
  (assert
  (< logger__log_entry__estimatedgroundvelocityisavailable__first__bit 
  logger__log_entry__estimatedgroundvelocityisavailable__last__bit))

;; logger__log_entry__estimatedgroundvelocityisavailable__position_axiom
  (assert
  (<= 0 logger__log_entry__estimatedgroundvelocityisavailable__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((log_entry__ref 0))
(((log_entry__refqtmk (log_entry__content us_rep)))))
(define-fun log_entry__ref_log_entry__content__projection ((a log_entry__ref)) us_rep 
  (log_entry__content a))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array (_ BitVec 16) us_rep))))))
(declare-fun slide ((Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((first (_ BitVec 16)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((old_first (_ BitVec 16)))
  (forall ((new_first (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array (_ BitVec 16) us_rep))
  (a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b (Array (_ BitVec 16) us_rep)) (b__first (_ BitVec 16))
  (b__last (_ BitVec 16))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_154 (_ BitVec 16)))
                                     (=>
                                     (and (bvule a__first temp___idx_154)
                                     (bvule temp___idx_154 a__last))
                                     (= (bool_eq (select a temp___idx_154)
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)) (b (Array (_ BitVec 16) us_rep)))
  (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b__first (_ BitVec 16)) (b__last (_ BitVec 16)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 16)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy4 (Array (_ BitVec 16) us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 ((Array (_ BitVec 16) us_rep)
  (Array (_ BitVec 16) us_rep)) Bool)

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__logger__log_database__data (Array (_ BitVec 16) us_rep))(rec__logger__log_database__first log_index)(rec__logger__log_database__last log_index)(rec__logger__log_database__empty Bool)))))
(define-fun us_split_fields_rec__logger__log_database__data__projection ((a us_split_fields2)) (Array (_ BitVec 16) us_rep) 
  (rec__logger__log_database__data a))

(define-fun us_split_fields_rec__logger__log_database__first__projection ((a us_split_fields2)) log_index 
  (rec__logger__log_database__first a))

(define-fun us_split_fields_rec__logger__log_database__last__projection ((a us_split_fields2)) log_index 
  (rec__logger__log_database__last a))

(define-fun us_split_fields_rec__logger__log_database__empty__projection ((a us_split_fields2)) Bool 
  (rec__logger__log_database__empty a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq1
                            (rec__logger__log_database__data
                            (us_split_fields3 a)) #x0000 #x0257
                            (rec__logger__log_database__data
                            (us_split_fields3 b)) #x0000 #x0257) true)
                         (= (to_rep
                            (rec__logger__log_database__first
                            (us_split_fields3 a))) (to_rep
                                                   (rec__logger__log_database__first
                                                   (us_split_fields3 b)))))
                         (and
                         (= (to_rep
                            (rec__logger__log_database__last
                            (us_split_fields3 a))) (to_rep
                                                   (rec__logger__log_database__last
                                                   (us_split_fields3 b))))
                         (= (ite (rec__logger__log_database__empty
                                 (us_split_fields3 a)) 1 0) (ite (rec__logger__log_database__empty
                                                                 (us_split_fields3
                                                                 b)) 1 0))))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const logger__log_database__data__first__bit Int)

(declare-const logger__log_database__data__last__bit Int)

(declare-const logger__log_database__data__position Int)

;; logger__log_database__data__first__bit_axiom
  (assert (<= 0 logger__log_database__data__first__bit))

;; logger__log_database__data__last__bit_axiom
  (assert
  (< logger__log_database__data__first__bit logger__log_database__data__last__bit))

;; logger__log_database__data__position_axiom
  (assert (<= 0 logger__log_database__data__position))

(declare-const logger__log_database__first__first__bit Int)

(declare-const logger__log_database__first__last__bit Int)

(declare-const logger__log_database__first__position Int)

;; logger__log_database__first__first__bit_axiom
  (assert (<= 0 logger__log_database__first__first__bit))

;; logger__log_database__first__last__bit_axiom
  (assert
  (< logger__log_database__first__first__bit logger__log_database__first__last__bit))

;; logger__log_database__first__position_axiom
  (assert (<= 0 logger__log_database__first__position))

(declare-const logger__log_database__last__first__bit Int)

(declare-const logger__log_database__last__last__bit Int)

(declare-const logger__log_database__last__position Int)

;; logger__log_database__last__first__bit_axiom
  (assert (<= 0 logger__log_database__last__first__bit))

;; logger__log_database__last__last__bit_axiom
  (assert
  (< logger__log_database__last__first__bit logger__log_database__last__last__bit))

;; logger__log_database__last__position_axiom
  (assert (<= 0 logger__log_database__last__position))

(declare-const logger__log_database__empty__first__bit Int)

(declare-const logger__log_database__empty__last__bit Int)

(declare-const logger__log_database__empty__position Int)

;; logger__log_database__empty__first__bit_axiom
  (assert (<= 0 logger__log_database__empty__first__bit))

;; logger__log_database__empty__last__bit_axiom
  (assert
  (< logger__log_database__empty__first__bit logger__log_database__empty__last__bit))

;; logger__log_database__empty__position_axiom
  (assert (<= 0 logger__log_database__empty__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ((log_database__ref 0))
(((log_database__refqtmk (log_database__content us_rep1)))))
(define-fun log_database__ref_log_database__content__projection ((a log_database__ref)) us_rep1 
  (log_database__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun log_size (us_split_fields2) Int)

(declare-fun log_size__function_guard (Int us_split_fields2) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (natural natural) Bool)

(declare-const dummy6 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

;; log_size__post_axiom
  (assert
  (forall ((logger__event_log__fields us_split_fields2))
  (! (let ((result (log_size logger__event_log__fields)))
     (=> (log_size__function_guard result logger__event_log__fields)
     (dynamic_invariant result true false true true))) :pattern ((log_size
                                                                 logger__event_log__fields)) )))

;; log_size__def_axiom
  (assert
  (forall ((logger__event_log__fields us_split_fields2))
  (! (= (log_size logger__event_log__fields) (ite (= (rec__logger__log_database__empty
                                                     (us_split_fields3
                                                     (us_repqtmk1
                                                     logger__event_log__fields))) true)
                                             0
                                             (+ (bv2nat (let ((temp___213 (bvsub 
                                                        (to_rep
                                                        (rec__logger__log_database__last
                                                        (us_split_fields3
                                                        (us_repqtmk1
                                                        logger__event_log__fields)))) 
                                                        (to_rep
                                                        (rec__logger__log_database__first
                                                        (us_split_fields3
                                                        (us_repqtmk1
                                                        logger__event_log__fields)))))))
                                                        (ite (bvult (to_rep
                                                                    (rec__logger__log_database__last
                                                                    (us_split_fields3
                                                                    (us_repqtmk1
                                                                    logger__event_log__fields)))) 
                                                        (to_rep
                                                        (rec__logger__log_database__first
                                                        (us_split_fields3
                                                        (us_repqtmk1
                                                        logger__event_log__fields)))))
                                                        (bvadd temp___213 #x0258)
                                                        temp___213))) 1))) :pattern (
  (log_size logger__event_log__fields)) )))

(define-fun dynamic_invariant1 ((temp___expr_67 Float64)
  (temp___is_init_63 Bool) (temp___skip_constant_64 Bool)
  (temp___do_toplevel_65 Bool)
  (temp___do_typ_inv_66 Bool)) Bool (=>
                                    (or (= temp___is_init_63 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                    (fp.isFinite64 temp___expr_67)))

(declare-fun make_entry ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16) Float64
  Bool) us_rep)

(declare-fun make_entry__function_guard (us_rep (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16) Float64 Bool) Bool)

(define-fun dynamic_invariant2 ((temp___expr_163 (_ BitVec 16))
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool) (temp___do_typ_inv_162 Bool)) Bool true)

;; make_entry__post_axiom
  (assert true)

;; make_entry__def_axiom
  (assert
  (forall ((ngrotations (_ BitVec 16)) (ngclicktime (_ BitVec 16))
  (millisecs (_ BitVec 16)))
  (forall ((estimatedgroundvelocity Float64))
  (forall ((estimatedgroundvelocityisavailable Bool))
  (! (=>
     (and
     (and
     (and (dynamic_invariant2 ngrotations true true true true)
     (dynamic_invariant2 ngclicktime true true true true))
     (dynamic_invariant2 millisecs true true true true)) (dynamic_invariant1
     estimatedgroundvelocity true true true true))
     (= (make_entry ngrotations ngclicktime millisecs estimatedgroundvelocity
        estimatedgroundvelocityisavailable) (us_repqtmk
                                            (us_split_fieldsqtmk
                                            (of_rep2 ngrotations)
                                            (of_rep2 ngclicktime)
                                            (of_rep2 millisecs)
                                            (of_rep1 estimatedgroundvelocity)
                                            estimatedgroundvelocityisavailable)))) :pattern (
  (make_entry ngrotations ngclicktime millisecs estimatedgroundvelocity
  estimatedgroundvelocityisavailable)) )))))

(declare-sort t 0)

(declare-fun first (t) log_index)

(declare-fun last (t) log_index)

(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool (and (in_range1 low)
                             (and (in_range1 high)
                             (=> (bvule low high)
                             (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array (_ BitVec 16) us_rep))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) us_rep) (elts a))

(define-fun of_array ((a (Array (_ BitVec 16) us_rep)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                   (+ (- (bv2nat (last1 a)) (bv2nat (first1
                                                                    a))) 1)
                                   0))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment3))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq7 (us_t us_t) Bool)

(declare-const dummy7 us_t)

(declare-datatypes ((log_array__ref 0))
(((log_array__refqtmk (log_array__content us_t)))))
(define-fun log_array__ref_log_array__content__projection ((a log_array__ref)) us_t 
  (log_array__content a))

(declare-const tmp (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const result____first log_index)

(declare-const result____last log_index)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r4b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r5b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r8b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const r11b (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant3 ((temp___expr_182 (_ BitVec 16))
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true)
                                     (bvule #x0000 #x0257)) (in_range1
                                     temp___expr_182)))

(declare-fun concat1 ((Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16) (Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; concat_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)) (b (Array (_ BitVec 16) us_rep)))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16))
  (b_first (_ BitVec 16)) (b_last (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (and
     (=> (and (bvule a_first i) (bvule i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (bvugt i a_last)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (bvadd (bvsub i a_last) (bvsub b_first #x0001)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (us_rep (_ BitVec 16)
  (Array (_ BitVec 16) us_rep) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; concat_singleton_left_def
  (assert
  (forall ((a us_rep))
  (forall ((b (Array (_ BitVec 16) us_rep)))
  (forall ((a_first (_ BitVec 16)) (b_first (_ BitVec 16))
  (b_last (_ BitVec 16)))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i (_ BitVec 16)))
     (! (=> (bvugt i a_first)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (bvadd (bvsub i a_first) (bvsub b_first #x0001))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array (_ BitVec 16) us_rep)
  (_ BitVec 16) (_ BitVec 16) us_rep) (Array (_ BitVec 16) us_rep))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array (_ BitVec 16) us_rep)))
  (forall ((b us_rep))
  (forall ((a_first (_ BitVec 16)) (a_last (_ BitVec 16)))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (bvadd a_last #x0001)) b)
     (forall ((i (_ BitVec 16)))
     (! (=> (and (bvule a_first i) (bvule i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (us_rep (_ BitVec 16)
  us_rep) (Array (_ BitVec 16) us_rep))

;; concat_singletons_def
  (assert
  (forall ((a us_rep) (b us_rep))
  (forall ((a_first (_ BitVec 16)))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (bvadd a_first #x0001)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (us_rep (_ BitVec 16)) (Array (_ BitVec 16) us_rep))

;; singleton_def
  (assert
  (forall ((v us_rep))
  (forall ((i (_ BitVec 16)))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-sort t4s 0)

(define-fun in_range3 ((x (_ BitVec 16))) Bool (and (bvule #x0000 x)
                                               (bvule x #x0257)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 599)))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq8 (t4s t4s) Bool)

(declare-const dummy8 t4s)

(declare-datatypes ((t4s__ref 0))
(((t4s__refqtmk (t4s__content t4s)))))
(define-fun t4s__ref_t4s__content__projection ((a t4s__ref)) t4s (t4s__content
                                                                 a))

(declare-datatypes ((tresultS__ref 0))
(((tresultS__refqtmk (tresultS__content us_t)))))
(define-fun tresultS__ref_tresultS__content__projection ((a tresultS__ref)) us_t 
  (tresultS__content a))

(declare-datatypes ((t7b__ref 0))
(((t7b__refqtmk (t7b__content us_t)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) us_t (t7b__content
                                                                  a))

(declare-datatypes ((t10b__ref 0))
(((t10b__refqtmk (t10b__content us_t)))))
(define-fun t10b__ref_t10b__content__projection ((a t10b__ref)) us_t 
  (t10b__content a))

(declare-datatypes ((t13b__ref 0))
(((t13b__refqtmk (t13b__content us_t)))))
(define-fun t13b__ref_t13b__content__projection ((a t13b__ref)) us_t 
  (t13b__content a))

(define-fun dynamic_invariant4 ((temp___expr_224 us_t)
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)
  (temp___do_typ_inv_223 Bool)) Bool (=>
                                     (not (= temp___skip_constant_221 true))
                                     (and (dynamic_property #x0000 tmp
                                     (first1 temp___expr_224)
                                     (last1 temp___expr_224))
                                     (and (= (first1 temp___expr_224) #x0000)
                                     (= (last1 temp___expr_224) tmp)))))

(define-fun default_initial_assumption ((temp___expr_226 us_t)
  (temp___skip_top_level_227 Bool)) Bool (and
                                         (= (first1 temp___expr_226) #x0000)
                                         (= (last1 temp___expr_226) tmp)))

(declare-fun temp_____aggregate_def_246 (us_rep) (Array (_ BitVec 16) us_rep))

;; def_axiom
  (assert
  (forall ((temp___248 us_rep))
  (forall ((temp___249 (_ BitVec 16)))
  (= (select (temp_____aggregate_def_246 temp___248) temp___249) temp___248))))

(define-fun dynamic_invariant5 ((temp___expr_189 us_t)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)
  (temp___do_typ_inv_188 Bool)) Bool (=>
                                     (not (= temp___skip_constant_186 true))
                                     (dynamic_property #x0000 #x0257
                                     (first1 temp___expr_189)
                                     (last1 temp___expr_189))))

(assert
;; defqtvc
 ;; File "logger.ads", line 47, characters 0-0
  (not
  (forall ((event_log__split_fields us_split_fields2)
  (result__ (Array (_ BitVec 16) us_rep)) (spark__branch Bool))
  (=>
  (= spark__branch (rec__logger__log_database__empty event_log__split_fields))
  (=> (not (= spark__branch true))
  (let ((o (log_size event_log__split_fields)))
  (=>
  (and (log_size__function_guard o event_log__split_fields)
  (and (dynamic_invariant o true false true true)
  (= o (ite (= (rec__logger__log_database__empty event_log__split_fields) true)
       0
       (+ (bv2nat (let ((temp___210 (bvsub (to_rep
                                           (rec__logger__log_database__last
                                           event_log__split_fields)) 
                  (to_rep
                  (rec__logger__log_database__first event_log__split_fields)))))
                  (ite (bvult (to_rep
                              (rec__logger__log_database__last
                              event_log__split_fields)) (to_rep
                                                        (rec__logger__log_database__first
                                                        event_log__split_fields)))
                  (bvadd temp___210 #x0258) temp___210))) 1)))))
  (let ((o1 (- o 1)))
  (=> (in_range_int o1)
  (=> (= ((_ int2bv 16) o1) tmp)
  (=> (dynamic_invariant3 tmp true false true true)
  (=> (default_initial_assumption
  (of_array result__ (to_rep result____first) (to_rep result____last)) false)
  (=>
  (and (dynamic_property #x0000 tmp (to_rep result____first)
  (to_rep result____last))
  (and (= (to_rep result____first) #x0000) (= (to_rep result____last) tmp)))
  (forall ((o2 (_ BitVec 16)))
  (=>
  (= (to_rep (rec__logger__log_database__last event_log__split_fields)) o2)
  (forall ((o3 (_ BitVec 16)))
  (=>
  (= (to_rep (rec__logger__log_database__first event_log__split_fields)) o3)
  (forall ((spark__branch1 Bool))
  (=> (= spark__branch1 (ite (bvule o3 o2) true false))
  (=> (= spark__branch1 true)
  (forall ((logger__log_content__B_1__R4b__assume (_ BitVec 16)))
  (=>
  (= (to_rep (rec__logger__log_database__first event_log__split_fields)) logger__log_content__B_1__R4b__assume)
  (=> (= logger__log_content__B_1__R4b__assume r4b)
  (=> (dynamic_invariant3 r4b true false true true)
  (forall ((logger__log_content__B_1__R5b__assume (_ BitVec 16)))
  (=>
  (= (to_rep (rec__logger__log_database__last event_log__split_fields)) logger__log_content__B_1__R5b__assume)
  (=> (= logger__log_content__B_1__R5b__assume r5b)
  (=> (dynamic_invariant3 r5b true false true true)
  (=>
  (=> (bvule r4b r5b)
  (and (and (bvule #x0000 r4b) (bvule r4b #x0257))
  (and (bvule #x0000 r5b) (bvule r5b #x0257))))
  (let ((temp___251 (of_array
                    (rec__logger__log_database__data event_log__split_fields)
                    r4b r5b)))
  (=>
  (ite (bvule (first1 temp___251) (last1 temp___251))
  (and (bvule #x0000 tmp)
  (= (bvsub (last1 temp___251) (first1 temp___251)) (bvsub tmp #x0000)))
  (bvult tmp #x0000))
  (let ((temp___252 (of_array
                    (slide (to_array temp___251) (first1 temp___251) #x0000)
                    #x0000 tmp)))
  (=> (bvule (first1 temp___252) (last1 temp___252))
  (bvule (to_rep result____first) (to_rep result____last)))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
