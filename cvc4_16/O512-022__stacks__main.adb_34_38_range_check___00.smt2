(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun to_rep1 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep2 (select a temp___idx_91)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep2 (select a temp___idx_91)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep3 ((x integer)) Int (integerqtint x))

(declare-fun of_rep3 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep3 (first (mk f l))) f) (= (to_rep3 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep3 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep3 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep3 (first (rt x)))
                 (to_rep3 (last (rt x))) (elts y) (to_rep3 (first (rt y)))
                 (to_rep3 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-sort num 0)

(declare-fun numqtint (num) Int)

;; num'axiom
  (assert
  (forall ((i num))
  (and (<= (- 2147483648) (numqtint i)) (<= (numqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (num num) Bool)

(declare-const dummy5 num)

(declare-datatypes ((num__ref 0))
(((num__refqtmk (num__content num)))))
(define-fun num__ref_num__content__projection ((a num__ref)) num (num__content
                                                                 a))

(define-fun dynamic_invariant3 ((temp___expr_265 Int)
  (temp___is_init_261 Bool) (temp___skip_constant_262 Bool)
  (temp___do_toplevel_263 Bool)
  (temp___do_typ_inv_264 Bool)) Bool (=>
                                     (or (= temp___is_init_261 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_265)))

(declare-const max_cst Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort element 0)

(declare-fun elementqtint (element) Int)

;; element'axiom
  (assert
  (forall ((i element))
  (and (<= (- 2147483648) (elementqtint i)) (<= (elementqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (element element) Bool)

(declare-const dummy6 element)

(declare-datatypes ((element__ref 0))
(((element__refqtmk (element__content element)))))
(define-fun element__ref_element__content__projection ((a element__ref)) element 
  (element__content a))

(define-fun to_rep4 ((x element)) Int (elementqtint x))

(declare-fun of_rep4 (Int) element)

;; inversion_axiom
  (assert
  (forall ((x element))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x element)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int element))))))
(declare-fun slide1 ((Array Int element) Int Int) (Array Int element))

;; slide_eq
  (assert
  (forall ((a (Array Int element)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int element)) (a__first Int) (a__last Int)
  (b (Array Int element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep4 (select a temp___idx_157)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int element)) (b (Array Int element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep4 (select a temp___idx_157)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep3 (first2 (mk1 f l))) f)
     (= (to_rep3 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes ((us_t1 0))
(((us_tqtmk1 (elts1 (Array Int element))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int element) (elts1 a))

(define-fun of_array1 ((a (Array Int element)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep3 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep3 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep3 (first2 (rt1 x)))
                  (to_rep3 (last2 (rt1 x))) (elts1 y)
                  (to_rep3 (first2 (rt1 y))) (to_rep3 (last2 (rt1 y)))))

(declare-fun user_eq7 (us_t1 us_t1) Bool)

(declare-const dummy7 us_t1)

(declare-datatypes ((elements__ref 0))
(((elements__refqtmk (elements__content us_t1)))))
(define-fun elements__ref_elements__content__projection ((a elements__ref)) us_t1 
  (elements__content a))

(declare-datatypes ((t20s__ref 0))
(((t20s__refqtmk (t20s__content us_t1)))))
(define-fun t20s__ref_t20s__content__projection ((a t20s__ref)) us_t1 
  (t20s__content a))

(declare-datatypes ((us_split_discrs 0))
(((us_split_discrsqtmk (rec__stacks__stack__max positive)))))
(define-fun us_split_discrs_rec__stacks__stack__max__projection ((a us_split_discrs)) positive 
  (rec__stacks__stack__max a))

(declare-datatypes ((us_split_discrs__ref 0))
(((us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__stacks__stack__top natural)(rec__stacks__stack__data us_t1)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__stacks__stack__top__projection ((a us_split_fields)) natural 
  (rec__stacks__stack__top a))

(define-fun us_split_fields_rec__stacks__stack__data__projection ((a us_split_fields)) us_t1 
  (rec__stacks__stack__data a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk
  (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__stacks__stack__max (us_split_discrs1 a))) 
                        (to_rep1
                        (rec__stacks__stack__max (us_split_discrs1 b))))
                        (and
                        (= (to_rep
                           (rec__stacks__stack__top (us_split_fields1 a))) 
                        (to_rep
                        (rec__stacks__stack__top (us_split_fields1 b))))
                        (= (bool_eq3
                           (rec__stacks__stack__data (us_split_fields1 a))
                           (rec__stacks__stack__data (us_split_fields1 b))) true)))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(define-fun in_range7 ((rec__stacks__stack__max1 Int)
  (a us_split_discrs)) Bool (= rec__stacks__stack__max1 (to_rep1
                                                        (rec__stacks__stack__max
                                                        a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const stacks__stack__max__first__bit Int)

(declare-const stacks__stack__max__last__bit Int)

(declare-const stacks__stack__max__position Int)

;; stacks__stack__max__first__bit_axiom
  (assert (<= 0 stacks__stack__max__first__bit))

;; stacks__stack__max__last__bit_axiom
  (assert (< stacks__stack__max__first__bit stacks__stack__max__last__bit))

;; stacks__stack__max__position_axiom
  (assert (<= 0 stacks__stack__max__position))

(declare-const stacks__stack__top__first__bit Int)

(declare-const stacks__stack__top__last__bit Int)

(declare-const stacks__stack__top__position Int)

;; stacks__stack__top__first__bit_axiom
  (assert (<= 0 stacks__stack__top__first__bit))

;; stacks__stack__top__last__bit_axiom
  (assert (< stacks__stack__top__first__bit stacks__stack__top__last__bit))

;; stacks__stack__top__position_axiom
  (assert (<= 0 stacks__stack__top__position))

(declare-const stacks__stack__data__first__bit Int)

(declare-const stacks__stack__data__last__bit Int)

(declare-const stacks__stack__data__position Int)

;; stacks__stack__data__first__bit_axiom
  (assert (<= 0 stacks__stack__data__first__bit))

;; stacks__stack__data__last__bit_axiom
  (assert (< stacks__stack__data__first__bit stacks__stack__data__last__bit))

;; stacks__stack__data__position_axiom
  (assert (<= 0 stacks__stack__data__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ((stack__ref 0))
(((stack__refqtmk (stack__content us_rep)))))
(define-fun stack__ref_stack__content__projection ((a stack__ref)) us_rep 
  (stack__content a))

(declare-datatypes ((t3b__ref 0))
(((t3b__refqtmk (t3b__content us_t1)))))
(define-fun t3b__ref_t3b__content__projection ((a t3b__ref)) us_t1 (t3b__content
                                                                   a))

(declare-datatypes ((us_split_fields2 0))
(((us_split_fieldsqtmk1
  (rec__stacks__stack__top1 natural)(rec__stacks__stack__data1 us_t1)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__stacks__stack__top__2__projection ((a us_split_fields2)) natural 
  (rec__stacks__stack__top1 a))

(define-fun us_split_fields_rec__stacks__stack__data__2__projection ((a us_split_fields2)) us_t1 
  (rec__stacks__stack__data1 a))

(define-fun us_split_fields_rec__ext____3__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ((us_split_fields__ref1 0))
(((us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ((us_rep1 0))
(((us_repqtmk1
  (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__3__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (us_private) us_private)

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (rec__stacks__stack__top1
                                         (us_split_fields3 a))
                                         (let ((temp___159 (rec__stacks__stack__data1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array1 (to_array1 temp___159)
                                         (first3 temp___159)
                                         (last3 temp___159)))
                                         (hide_ext__
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (rec__stacks__stack__top
                                         (us_split_fields1 r))
                                         (let ((temp___158 (rec__stacks__stack__data
                                                           (us_split_fields1
                                                           r))))
                                         (of_array1 (to_array1 temp___158)
                                         (first3 temp___158)
                                         (last3 temp___158)))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq5 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__stacks__stack__max (us_split_discrs2 a))) 
                         (to_rep1
                         (rec__stacks__stack__max (us_split_discrs2 b))))
                         (and
                         (= (to_rep
                            (rec__stacks__stack__top1 (us_split_fields3 a))) 
                         (to_rep
                         (rec__stacks__stack__top1 (us_split_fields3 b))))
                         (= (bool_eq3
                            (rec__stacks__stack__data1 (us_split_fields3 a))
                            (rec__stacks__stack__data1 (us_split_fields3 b))) true)))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const stacks__stack__max__first__bit1 Int)

(declare-const stacks__stack__max__last__bit1 Int)

(declare-const stacks__stack__max__position1 Int)

;; stacks__stack__max__first__bit_axiom
  (assert (<= 0 stacks__stack__max__first__bit1))

;; stacks__stack__max__last__bit_axiom
  (assert (< stacks__stack__max__first__bit1 stacks__stack__max__last__bit1))

;; stacks__stack__max__position_axiom
  (assert (<= 0 stacks__stack__max__position1))

(declare-const stacks__stack__top__first__bit1 Int)

(declare-const stacks__stack__top__last__bit1 Int)

(declare-const stacks__stack__top__position1 Int)

;; stacks__stack__top__first__bit_axiom
  (assert (<= 0 stacks__stack__top__first__bit1))

;; stacks__stack__top__last__bit_axiom
  (assert (< stacks__stack__top__first__bit1 stacks__stack__top__last__bit1))

;; stacks__stack__top__position_axiom
  (assert (<= 0 stacks__stack__top__position1))

(declare-const stacks__stack__data__first__bit1 Int)

(declare-const stacks__stack__data__last__bit1 Int)

(declare-const stacks__stack__data__position1 Int)

;; stacks__stack__data__first__bit_axiom
  (assert (<= 0 stacks__stack__data__first__bit1))

;; stacks__stack__data__last__bit_axiom
  (assert
  (< stacks__stack__data__first__bit1 stacks__stack__data__last__bit1))

;; stacks__stack__data__position_axiom
  (assert (<= 0 stacks__stack__data__position1))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ((tsS__ref 0))
(((tsS__refqtmk (tsS__content us_rep1)))))
(define-fun tsS__ref_tsS__content__projection ((a tsS__ref)) us_rep1 
  (tsS__content a))

(declare-const s__split_discrs us_split_discrs)

(declare-const s__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun dynamic_invariant4 ((temp___expr_292 us_rep)
  (temp___is_init_288 Bool) (temp___skip_constant_289 Bool)
  (temp___do_toplevel_290 Bool)
  (temp___do_typ_inv_291 Bool)) Bool (let ((temp___293 (rec__stacks__stack__max
                                                       (us_split_discrs1
                                                       temp___expr_292))))
                                     (and (dynamic_property1 1
                                     (to_rep1 temp___293)
                                     (first3
                                     (rec__stacks__stack__data
                                     (us_split_fields1 temp___expr_292)))
                                     (last3
                                     (rec__stacks__stack__data
                                     (us_split_fields1 temp___expr_292))))
                                     (and
                                     (= (first3
                                        (rec__stacks__stack__data
                                        (us_split_fields1 temp___expr_292))) 1)
                                     (= (last3
                                        (rec__stacks__stack__data
                                        (us_split_fields1 temp___expr_292))) 
                                     (to_rep1 temp___293))))))

(declare-fun size (us_rep) Int)

(declare-fun size__function_guard (Int us_rep) Bool)

(declare-fun size1 (Int us_rep) Int)

(declare-fun size__function_guard1 (Int Int us_rep) Bool)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun is_empty1 (Int us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool Int us_rep) Bool)

(declare-fun pop__specific_post (Int us_split_fields us_split_discrs Int
  us_split_fields) Bool)

;; stacks__stack__compat_axiom
  (assert
  (forall ((stacks__pop__s__fields us_split_fields)
  (stacks__pop__s__old__fields us_split_fields))
  (forall ((s__split_discrs1 us_split_discrs))
  (forall ((s__attr__tag1 Int))
  (! (=> (pop__specific_post us_tag stacks__pop__s__fields s__split_discrs1
     s__attr__tag1 stacks__pop__s__old__fields)
     (and
     (forall ((stacks__pop__s__old__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__pop__s__old__fields1 s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__pop__s__old__fields1 s__attr__tag2)))
     (and
     (forall ((stacks__pop__s__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__pop__s__fields1 s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__pop__s__fields1 s__attr__tag2)))
     (= (size
        (us_repqtmk s__split_discrs1 stacks__pop__s__fields s__attr__tag1)) (- 
     (size
     (us_repqtmk s__split_discrs1 stacks__pop__s__old__fields s__attr__tag1)) 1))))) :pattern ((pop__specific_post
  us_tag stacks__pop__s__fields s__split_discrs1 s__attr__tag1
  stacks__pop__s__old__fields)) )))))

;; main__B_1__TsS__compat_axiom
  (assert
  (forall ((stacks__pop__s__fields us_split_fields)
  (stacks__pop__s__old__fields us_split_fields))
  (forall ((s__split_discrs1 us_split_discrs))
  (forall ((s__attr__tag1 Int))
  (! (=> (pop__specific_post us_tag1 stacks__pop__s__fields s__split_discrs1
     s__attr__tag1 stacks__pop__s__old__fields)
     (and
     (forall ((stacks__pop__s__old__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__pop__s__old__fields1 s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__pop__s__old__fields1 s__attr__tag2)))
     (and
     (forall ((stacks__pop__s__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__pop__s__fields1 s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__pop__s__fields1 s__attr__tag2)))
     (= (size
        (us_repqtmk s__split_discrs1 stacks__pop__s__fields s__attr__tag1)) (- 
     (size
     (us_repqtmk s__split_discrs1 stacks__pop__s__old__fields s__attr__tag1)) 1))))) :pattern ((pop__specific_post
  us_tag1 stacks__pop__s__fields s__split_discrs1 s__attr__tag1
  stacks__pop__s__old__fields)) )))))

(declare-fun print__specific_post (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private us_private
  us_private us_private us_private us_private us_private us_private) Bool)

;; stacks__stack__compat_axiom
  (assert true)

;; main__B_1__TsS__compat_axiom
  (assert true)

(declare-const r12b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun is_full (us_rep) Bool)

(declare-fun is_full__function_guard (Bool us_rep) Bool)

(declare-fun is_full1 (Int us_rep) Bool)

(declare-fun is_full__function_guard1 (Bool Int us_rep) Bool)

(declare-fun push__specific_post (Int us_split_fields us_split_discrs Int Int
  us_split_fields) Bool)

;; stacks__stack__compat_axiom
  (assert
  (forall ((stacks__push__s__fields us_split_fields)
  (stacks__push__s__old__fields us_split_fields))
  (forall ((s__split_discrs1 us_split_discrs))
  (forall ((s__attr__tag1 Int) (e Int))
  (! (=> (push__specific_post us_tag stacks__push__s__fields s__split_discrs1
     s__attr__tag1 e stacks__push__s__old__fields)
     (and
     (forall ((stacks__push__s__old__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__push__s__old__fields1
     s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__push__s__old__fields1
     s__attr__tag2)))
     (and
     (forall ((stacks__push__s__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__push__s__fields1 s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__push__s__fields1 s__attr__tag2)))
     (= (size
        (us_repqtmk s__split_discrs1 stacks__push__s__fields s__attr__tag1)) (+ 
     (size
     (us_repqtmk s__split_discrs1 stacks__push__s__old__fields s__attr__tag1)) 1))))) :pattern ((push__specific_post
  us_tag stacks__push__s__fields s__split_discrs1 s__attr__tag1 e
  stacks__push__s__old__fields)) )))))

;; main__B_1__TsS__compat_axiom
  (assert
  (forall ((stacks__push__s__fields us_split_fields)
  (stacks__push__s__old__fields us_split_fields))
  (forall ((s__split_discrs1 us_split_discrs))
  (forall ((s__attr__tag1 Int) (e Int))
  (! (=> (push__specific_post us_tag1 stacks__push__s__fields
     s__split_discrs1 s__attr__tag1 e stacks__push__s__old__fields)
     (and
     (forall ((stacks__push__s__old__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__push__s__old__fields1
     s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__push__s__old__fields1
     s__attr__tag2)))
     (and
     (forall ((stacks__push__s__fields1 us_split_fields)
     (s__split_discrs2 us_split_discrs) (s__attr__tag2 Int))
     (size__function_guard
     (size
     (us_repqtmk s__split_discrs2 stacks__push__s__fields1 s__attr__tag2))
     (us_repqtmk s__split_discrs2 stacks__push__s__fields1 s__attr__tag2)))
     (= (size
        (us_repqtmk s__split_discrs1 stacks__push__s__fields s__attr__tag1)) (+ 
     (size
     (us_repqtmk s__split_discrs1 stacks__push__s__old__fields s__attr__tag1)) 1))))) :pattern ((push__specific_post
  us_tag1 stacks__push__s__fields s__split_discrs1 s__attr__tag1 e
  stacks__push__s__old__fields)) )))))

(define-fun dynamic_invariant5 ((temp___expr_279 Int)
  (temp___is_init_275 Bool) (temp___skip_constant_276 Bool)
  (temp___do_toplevel_277 Bool)
  (temp___do_typ_inv_278 Bool)) Bool (=>
                                     (or (= temp___is_init_275 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range6 temp___expr_279)))

(declare-sort tTcmdSP1 0)

(declare-fun tTcmdSP1qtint (tTcmdSP1) Int)

;; tTcmdSP1'axiom
  (assert
  (forall ((i tTcmdSP1))
  (and (<= 1 (tTcmdSP1qtint i)) (<= (tTcmdSP1qtint i) 20))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (tTcmdSP1 tTcmdSP1) Bool)

(declare-const dummy10 tTcmdSP1)

(declare-datatypes ((tTcmdSP1__ref 0))
(((tTcmdSP1__refqtmk (tTcmdSP1__content tTcmdSP1)))))
(define-fun tTcmdSP1__ref_tTcmdSP1__content__projection ((a tTcmdSP1__ref)) tTcmdSP1 
  (tTcmdSP1__content a))

(declare-sort t5b 0)

(declare-fun t5bqtint (t5b) Int)

;; t5b'axiom
  (assert (forall ((i t5b)) (and (<= 1 (t5bqtint i)) (<= (t5bqtint i) 3))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (t5b t5b) Bool)

(declare-const dummy11 t5b)

(declare-datatypes ((t5b__ref 0))
(((t5b__refqtmk (t5b__content t5b)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) t5b (t5b__content
                                                                 a))

(declare-sort t9b 0)

(declare-fun t9bqtint (t9b) Int)

;; t9b'axiom
  (assert (forall ((i t9b)) (and (<= 1 (t9bqtint i)) (<= (t9bqtint i) 5))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (t9b t9b) Bool)

(declare-const dummy12 t9b)

(declare-datatypes ((t9b__ref 0))
(((t9b__refqtmk (t9b__content t9b)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) t9b (t9b__content
                                                                 a))

(declare-datatypes ((t14b__ref 0))
(((t14b__refqtmk (t14b__content us_t)))))
(define-fun t14b__ref_t14b__content__projection ((a t14b__ref)) us_t 
  (t14b__content a))

(declare-fun temp___String_Literal_502 (tuple0) (Array Int character))

;; temp___String_Literal_502__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 1)) 104)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 2)) 111))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 3)) 119)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 4)) 32))
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 5)) 109))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 6)) 97)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 7)) 110)))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 8)) 121)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 9)) 32))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 10)) 101)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 11)) 108))))
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 12)) 101)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 13)) 109))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 14)) 101)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 15)) 110)))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 16)) 116)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 17)) 115))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 18)) 32)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 19)) 105)))))
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 20)) 110)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 21)) 32))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 22)) 115)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 23)) 116)))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 24)) 97)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 25)) 99))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 26)) 107)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 27)) 32))))
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 28)) 97)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 29)) 116))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 30)) 32)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 31)) 109)))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 32)) 111)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 33)) 115))
     (and
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 34)) 116)
     (= (to_rep2 (select (temp___String_Literal_502 us_void_param) 35)) 63))))))) :pattern (
  (temp___String_Literal_502 us_void_param)) )))

(declare-fun temp___String_Literal_503 (tuple0) (Array Int character))

;; temp___String_Literal_503__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 1)) 112)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 2)) 117))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 3)) 115)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 4)) 104))
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 5)) 32))
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 6)) 111)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 7)) 114)))
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 8)) 32)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 9)) 112))
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 10)) 111))
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 11)) 112)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 12)) 32))))
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 13)) 101)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 14)) 108))
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 15)) 101))
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 16)) 109)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 17)) 101)))
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 18)) 110)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 19)) 116))
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 20)) 46))
     (and
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 21)) 46)
     (= (to_rep2 (select (temp___String_Literal_503 us_void_param) 22)) 46)))))) :pattern (
  (temp___String_Literal_503 us_void_param)) )))

(declare-fun temp___String_Literal_506 (tuple0) (Array Int character))

;; temp___String_Literal_506__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 1)) 115)
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 2)) 116))
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 3)) 97)
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 4)) 99))
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 5)) 107))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 6)) 32)
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 7)) 105))
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 8)) 115)))
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 9)) 32)
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 10)) 110))
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 11)) 111))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 12)) 119)
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 13)) 58))
     (= (to_rep2 (select (temp___String_Literal_506 us_void_param) 14)) 32))))) :pattern (
  (temp___String_Literal_506 us_void_param)) )))

(declare-fun temp___String_Literal_510 (tuple0) (Array Int character))

;; temp___String_Literal_510__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 1)) 115)
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 2)) 116))
     (and
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 3)) 97)
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 4)) 99))
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 5)) 107))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 6)) 32)
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 7)) 105))
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 8)) 115)))
     (and
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 9)) 32)
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 10)) 110))
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 11)) 111))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 12)) 119)
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 13)) 58))
     (= (to_rep2 (select (temp___String_Literal_510 us_void_param) 14)) 32))))) :pattern (
  (temp___String_Literal_510 us_void_param)) )))

(declare-fun temp___String_Literal_513 (tuple0) (Array Int character))

;; temp___String_Literal_513__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep2 (select (temp___String_Literal_513 us_void_param) 1)) 112)
     (= (to_rep2 (select (temp___String_Literal_513 us_void_param) 2)) 117))
     (and
     (and
     (= (to_rep2 (select (temp___String_Literal_513 us_void_param) 3)) 115)
     (= (to_rep2 (select (temp___String_Literal_513 us_void_param) 4)) 104))
     (= (to_rep2 (select (temp___String_Literal_513 us_void_param) 5)) 32))) :pattern (
  (temp___String_Literal_513 us_void_param)) )))

(declare-fun temp___String_Literal_520 (tuple0) (Array Int character))

;; temp___String_Literal_520__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep2 (select (temp___String_Literal_520 us_void_param) 1)) 112)
     (= (to_rep2 (select (temp___String_Literal_520 us_void_param) 2)) 111))
     (= (to_rep2 (select (temp___String_Literal_520 us_void_param) 3)) 112)) :pattern (
  (temp___String_Literal_520 us_void_param)) )))

(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(define-fun dynamic_invariant7 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq13 (count count) Bool)

(declare-const dummy13 count)

(declare-datatypes ((count__ref 0))
(((count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant8 ((temp___expr_215 Int)
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)
  (temp___do_typ_inv_214 Bool)) Bool (=>
                                     (or (= temp___is_init_211 true)
                                     (<= 0 2147483647)) (in_range11
                                     temp___expr_215)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant8
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant8
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; is_empty__post_axiom
  (assert true)

;; is_empty__post__dispatch_axiom
  (assert true)

;; stacks__stack__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_empty__function_guard1 (is_empty1 us_tag s) us_tag s)
     (and (forall ((s1 us_rep)) (is_empty__function_guard (is_empty s1) s1))
     (= (ite (is_empty s) 1 0) (ite (is_empty1 us_tag s) 1 0)))) :pattern (
  (is_empty1 us_tag s)) )))

;; main__B_1__TsS__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_empty__function_guard1 (is_empty1 us_tag1 s) us_tag1 s)
     (and (forall ((s1 us_rep)) (is_empty__function_guard (is_empty s1) s1))
     (= (ite (is_empty s) 1 0) (ite (is_empty1 us_tag1 s) 1 0)))) :pattern (
  (is_empty1 us_tag1 s)) )))

;; is_empty__def_axiom
  (assert
  (forall ((s us_rep))
  (! (and (forall ((s1 us_rep)) (size__function_guard (size s1) s1))
     (= (= (is_empty s) true) (= (size s) 0))) :pattern ((is_empty s)) )))

;; is_full__post_axiom
  (assert true)

;; is_full__post__dispatch_axiom
  (assert true)

;; stacks__stack__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_full__function_guard1 (is_full1 us_tag s) us_tag s)
     (and (forall ((s1 us_rep)) (is_full__function_guard (is_full s1) s1))
     (= (ite (is_full s) 1 0) (ite (is_full1 us_tag s) 1 0)))) :pattern (
  (is_full1 us_tag s)) )))

;; main__B_1__TsS__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_full__function_guard1 (is_full1 us_tag1 s) us_tag1 s)
     (and (forall ((s1 us_rep)) (is_full__function_guard (is_full s1) s1))
     (= (ite (is_full s) 1 0) (ite (is_full1 us_tag1 s) 1 0)))) :pattern (
  (is_full1 us_tag1 s)) )))

;; is_full__def_axiom
  (assert
  (forall ((s us_rep))
  (! (and (forall ((s1 us_rep)) (size__function_guard (size s1) s1))
     (= (= (is_full s) true)
     (= (size s) (to_rep1 (rec__stacks__stack__max (us_split_discrs1 s)))))) :pattern (
  (is_full s)) )))

;; size__post_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (dynamic_invariant4 s true true true true)
     (let ((result (size s)))
     (=> (size__function_guard result s) (dynamic_invariant1 result true
     false true true)))) :pattern ((size s)) )))

;; size__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((s us_rep))
  (! (=> (dynamic_invariant4 s true true true true)
     (let ((result (size1 attr__tag2 s)))
     (=> (size__function_guard1 result attr__tag2 s) (dynamic_invariant1
     result true false true true)))) :pattern ((size1 attr__tag2 s)) ))))

;; stacks__stack__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (size__function_guard1 (size1 us_tag s) us_tag s)
     (and (forall ((s1 us_rep)) (size__function_guard (size s1) s1))
     (= (size s) (size1 us_tag s)))) :pattern ((size1 us_tag s)) )))

;; main__B_1__TsS__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (size__function_guard1 (size1 us_tag1 s) us_tag1 s)
     (and (forall ((s1 us_rep)) (size__function_guard (size s1) s1))
     (= (size s) (size1 us_tag1 s)))) :pattern ((size1 us_tag1 s)) )))

;; size__def_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (dynamic_invariant4 s true true true true)
     (= (size s) (to_rep (rec__stacks__stack__top (us_split_fields1 s))))) :pattern (
  (size s)) )))

(assert
;; defqtvc
 ;; File "main.adb", line 6, characters 0-0
  (not
  (forall ((max Int) (standard_in us_private) (file_system us_private)
  (standard_out us_private) (standard_err us_private) (current_in us_private)
  (current_out us_private) (current_err us_private)
  (s__split_fields us_split_fields2) (standard_in1 us_private)
  (file_system1 us_private) (standard_out1 us_private)
  (standard_err1 us_private) (current_in1 us_private)
  (current_out1 us_private) (current_err1 us_private)
  (standard_in2 us_private) (file_system2 us_private)
  (standard_out2 us_private) (standard_err2 us_private)
  (current_in2 us_private) (current_out2 us_private)
  (current_err2 us_private) (ada___ada__integer_text_io__get__2__item Int)
  (max1 Int) (standard_in3 us_private) (file_system3 us_private)
  (standard_out3 us_private) (standard_err3 us_private)
  (current_in3 us_private) (current_out3 us_private)
  (current_err3 us_private))
  (=> (dynamic_invariant2 max false false true true)
  (=>
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (=>
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (=>
  (= (line_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (line_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2))
  (=>
  (= (page_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (page_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2))
  (=> (dynamic_invariant3 ada___ada__integer_text_io__get__2__item true true
  true true)
  (=> (in_range3 ada___ada__integer_text_io__get__2__item)
  (=> (= max1 ada___ada__integer_text_io__get__2__item)
  (=> (= max1 max_cst)
  (=>
  (= (line_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (line_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3))
  (=>
  (= (page_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (page_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3))
  (=> (dynamic_invariant2 max_cst true false true true)
  (=> (in_range3 max_cst)
  (=>
  (and (= s__attr__tag us_tag1)
  (and (= (to_rep1 (rec__stacks__stack__max s__split_discrs)) max_cst)
  (and (= (first3 (rec__stacks__stack__data1 s__split_fields)) 1)
  (= (last3 (rec__stacks__stack__data1 s__split_fields)) max_cst))))
  (=>
  (and (in_range7 max_cst
  (us_split_discrs1
  (to_base (us_repqtmk1 s__split_discrs s__split_fields s__attr__tag))))
  (and (dynamic_property1 1 max_cst
  (first3 (rec__stacks__stack__data1 s__split_fields))
  (last3 (rec__stacks__stack__data1 s__split_fields)))
  (and (= (first3 (rec__stacks__stack__data1 s__split_fields)) 1)
  (= (last3 (rec__stacks__stack__data1 s__split_fields)) max_cst))))
  (forall ((standard_in4 us_private) (file_system4 us_private)
  (standard_out4 us_private) (standard_err4 us_private)
  (current_in4 us_private) (current_out4 us_private)
  (current_err4 us_private) (s__split_fields1 us_split_fields2) (last4 Int)
  (v Int) (pos Int))
  (=>
  (and (dynamic_property1 1 max_cst
  (first3 (rec__stacks__stack__data1 s__split_fields1))
  (last3 (rec__stacks__stack__data1 s__split_fields1)))
  (and (= (first3 (rec__stacks__stack__data1 s__split_fields1)) 1)
  (= (last3 (rec__stacks__stack__data1 s__split_fields1)) max_cst)))
  (forall ((standard_in5 us_private) (file_system5 us_private)
  (standard_out5 us_private) (standard_err5 us_private)
  (current_in5 us_private) (current_out5 us_private)
  (current_err5 us_private))
  (=>
  (and
  (= (line_length standard_in4 file_system4 standard_out4 standard_err4
     current_in4 current_out4 current_err4) (line_length standard_in5
                                            file_system5 standard_out5
                                            standard_err5 current_in5
                                            current_out5 current_err5))
  (= (page_length standard_in4 file_system4 standard_out4 standard_err4
     current_in4 current_out4 current_err4) (page_length standard_in5
                                            file_system5 standard_out5
                                            standard_err5 current_in5
                                            current_out5 current_err5)))
  (=> (dynamic_invariant last4 false false true true)
  (=> (dynamic_invariant v false false true true)
  (=> (dynamic_invariant2 pos false false true true)
  (forall ((o integer))
  (=> (= (to_rep3 o) 20)
  (forall ((o1 integer))
  (=> (= (to_rep3 o1) 1)
  (forall ((standard_in6 us_private) (file_system6 us_private)
  (standard_out6 us_private) (standard_err6 us_private)
  (current_in6 us_private) (current_out6 us_private)
  (current_err6 us_private) (ada___ada__text_io__get_line__2__last Int)
  (ada___ada__text_io__get_line__2__item (Array Int character)))
  (=>
  (and
  (and
  (and
  (= (line_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (line_length standard_in6
                                            file_system6 standard_out6
                                            standard_err6 current_in6
                                            current_out6 current_err6))
  (= (page_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (page_length standard_in6
                                            file_system6 standard_out6
                                            standard_err6 current_in6
                                            current_out6 current_err6)))
  (ite (< 0 (length2 (to_rep3 o1) (to_rep3 o)))
  (and (<= (- (to_rep3 o1) 1) ada___ada__text_io__get_line__2__last)
  (<= ada___ada__text_io__get_line__2__last (to_rep3 o)))
  (= ada___ada__text_io__get_line__2__last (- (to_rep3 o1) 1))))
  (dynamic_invariant1 ada___ada__text_io__get_line__2__last true true true
  true))
  (let ((temp___504 (of_array ada___ada__text_io__get_line__2__item 1 20)))
  (forall ((cmd (Array Int character)))
  (=> (= cmd (slide (to_array temp___504) (first1 temp___504) 1))
  (forall ((last5 Int))
  (=> (= last5 ada___ada__text_io__get_line__2__last)
  (=>
  (or (not (= last5 3))
  (=> (<= 1 3) (and (and (<= 1 1) (<= 1 20)) (and (<= 1 3) (<= 3 20)))))
  (forall ((spark__branch Bool))
  (=>
  (= spark__branch (ite (= last5 3)
                   (bool_eq cmd 1 3 (temp___String_Literal_520 Tuple0) 1 3)
                   false))
  (=> (not (= spark__branch true)) (=> (<= 6 last5) (=> (<= 1 5) (<= 1 1)))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
