(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ((positive__ref 0))
(((positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ((character__ref 0))
(((character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ((map__ref 0))
(((map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t 0))
(((us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ((string____ref 0))
(((string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_string (us_image Int) us_t)

(declare-fun from_string (us_t) us_image)

;; to_string__first
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (= (first1 (to_string x s)) 1) :pattern ((to_string x s)) ))))

;; to_string__length
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (=> (<= 0 s) (<= (length1 (to_string x s)) s)) :pattern ((to_string x s)) ))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (character Int (Array Int character) Int
  Int) (Array Int character))

;; concat_singleton_left_def
  (assert
  (forall ((a character))
  (forall ((b (Array Int character)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int character) Int Int
  character) (Array Int character))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((b character))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (character Int
  character) (Array Int character))

;; concat_singletons_def
  (assert
  (forall ((a character) (b character))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-sort card1 0)

(declare-fun cardqtint (card1) Int)

;; card'axiom
  (assert
  (forall ((i card1)) (and (<= 1 (cardqtint i)) (<= (cardqtint i) 52))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 52)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (card1 card1) Bool)

(declare-const dummy4 card1)

(declare-datatypes ((card__ref 0))
(((card__refqtmk (card__content card1)))))
(define-fun card__ref_card__content__projection ((a card__ref)) card1 
  (card__content a))

(define-fun to_rep2 ((x card1)) Int (cardqtint x))

(declare-fun of_rep2 (Int) card1)

;; inversion_axiom
  (assert
  (forall ((x card1))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x card1)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((map__ref1 0))
(((map__refqtmk1 (map__content1 (Array Int card1))))))
(declare-fun slide1 ((Array Int card1) Int Int) (Array Int card1))

;; slide_eq
  (assert
  (forall ((a (Array Int card1)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int card1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int card1)) (a__first Int) (a__last Int)
  (b (Array Int card1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep2 (select a temp___idx_156)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int card1)) (b (Array Int card1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep2 (select a temp___idx_156)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ((us_t1 0))
(((us_tqtmk1 (elts1 (Array Int card1))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int card1) (elts1 a))

(define-fun of_array1 ((a (Array Int card1)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length2 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq5 (us_t1 us_t1) Bool)

(declare-const dummy5 us_t1)

(declare-datatypes ((cardstack__ref 0))
(((cardstack__refqtmk (cardstack__content us_t1)))))
(define-fun cardstack__ref_cardstack__content__projection ((a cardstack__ref)) us_t1 
  (cardstack__content a))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-sort cardindex 0)

(declare-fun cardindexqtint (cardindex) Int)

;; cardindex'axiom
  (assert
  (forall ((i cardindex))
  (and (<= (- 1) (cardindexqtint i)) (<= (cardindexqtint i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 1) x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (cardindex cardindex) Bool)

(declare-const dummy6 cardindex)

(declare-datatypes ((cardindex__ref 0))
(((cardindex__refqtmk (cardindex__content cardindex)))))
(define-fun cardindex__ref_cardindex__content__projection ((a cardindex__ref)) cardindex 
  (cardindex__content a))

(define-fun to_rep3 ((x cardindex)) Int (cardindexqtint x))

(declare-fun of_rep3 (Int) cardindex)

;; inversion_axiom
  (assert
  (forall ((x cardindex))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x cardindex)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-const dummy7 (Array Int card1))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq7 ((Array Int card1) (Array Int card1)) Bool)

(declare-datatypes ((map__ref2 0))
(((map__refqtmk2 (map__content2 (Array Int cardindex))))))
(declare-fun slide2 ((Array Int cardindex) Int Int) (Array Int cardindex))

;; slide_eq
  (assert
  (forall ((a (Array Int cardindex)))
  (forall ((first4 Int))
  (! (= (slide2 a first4 first4) a) :pattern ((slide2 a first4 first4)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int cardindex)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int cardindex)) (a__first Int) (a__last Int)
  (b (Array Int cardindex)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep3 (select a temp___idx_157)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int cardindex)) (b (Array Int cardindex)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep3 (select a temp___idx_157)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-const dummy8 (Array Int cardindex))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq8 ((Array Int cardindex) (Array Int cardindex)) Bool)

(declare-datatypes ((map__ref3 0))
(((map__refqtmk3 (map__content3 (Array Int (Array Int cardindex)))))))
(declare-fun slide3 ((Array Int (Array Int cardindex)) Int
  Int) (Array Int (Array Int cardindex)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (forall ((first4 Int))
  (! (= (slide3 a first4 first4) a) :pattern ((slide3 a first4 first4)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int cardindex))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int (Array Int cardindex))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int cardindex))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_158 Int))
                           (=>
                           (and (<= a__first temp___idx_158)
                           (<= temp___idx_158 a__last))
                           (= (bool_eq4 (select a temp___idx_158) 0 99
                              (select b (+ (- b__first a__first) temp___idx_158))
                              0 99) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int cardindex)))
  (b (Array Int (Array Int cardindex))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_158 Int))
  (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last))
  (= (bool_eq4 (select a temp___idx_158) 0 99
     (select b (+ (- b__first a__first) temp___idx_158)) 0 99) true))))))))

(declare-const dummy9 (Array Int (Array Int cardindex)))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq9 ((Array Int (Array Int cardindex))
  (Array Int (Array Int cardindex))) Bool)

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__patience__state__numelts cardindex)(rec__patience__state__values (Array Int card1))(rec__patience__state__numstacks cardindex)(rec__patience__state__stacksizes (Array Int cardindex))(rec__patience__state__stacks (Array Int (Array Int cardindex)))(rec__patience__state__posstack (Array Int cardindex))(rec__patience__state__posheight (Array Int cardindex))(rec__patience__state__preds (Array Int cardindex))))))
(define-fun us_split_fields_rec__patience__state__numelts__projection ((a us_split_fields)) cardindex 
  (rec__patience__state__numelts a))

(define-fun us_split_fields_rec__patience__state__values__projection ((a us_split_fields)) (Array Int card1) 
  (rec__patience__state__values a))

(define-fun us_split_fields_rec__patience__state__numstacks__projection ((a us_split_fields)) cardindex 
  (rec__patience__state__numstacks a))

(define-fun us_split_fields_rec__patience__state__stacksizes__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__stacksizes a))

(define-fun us_split_fields_rec__patience__state__stacks__projection ((a us_split_fields)) (Array Int (Array Int cardindex)) 
  (rec__patience__state__stacks a))

(define-fun us_split_fields_rec__patience__state__posstack__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__posstack a))

(define-fun us_split_fields_rec__patience__state__posheight__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__posheight a))

(define-fun us_split_fields_rec__patience__state__preds__projection ((a us_split_fields)) (Array Int cardindex) 
  (rec__patience__state__preds a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq6 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__patience__state__numelts
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__patience__state__numelts
                                                  (us_split_fields1 b))))
                        (= (bool_eq2
                           (rec__patience__state__values
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__values
                           (us_split_fields1 b)) 0 99) true))
                        (and
                        (and
                        (and
                        (= (to_rep3
                           (rec__patience__state__numstacks
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__patience__state__numstacks
                                                  (us_split_fields1 b))))
                        (= (bool_eq4
                           (rec__patience__state__stacksizes
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__stacksizes
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq5
                           (rec__patience__state__stacks
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__stacks
                           (us_split_fields1 b)) 0 99) true))
                        (and
                        (and
                        (= (bool_eq4
                           (rec__patience__state__posstack
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__posstack
                           (us_split_fields1 b)) 0 99) true)
                        (= (bool_eq4
                           (rec__patience__state__posheight
                           (us_split_fields1 a)) 0 99
                           (rec__patience__state__posheight
                           (us_split_fields1 b)) 0 99) true))
                        (= (bool_eq4
                           (rec__patience__state__preds (us_split_fields1 a))
                           0 99
                           (rec__patience__state__preds (us_split_fields1 b))
                           0 99) true))))
                   true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const patience__state__numelts__first__bit Int)

(declare-const patience__state__numelts__last__bit Int)

(declare-const patience__state__numelts__position Int)

;; patience__state__numelts__first__bit_axiom
  (assert (<= 0 patience__state__numelts__first__bit))

;; patience__state__numelts__last__bit_axiom
  (assert
  (< patience__state__numelts__first__bit patience__state__numelts__last__bit))

;; patience__state__numelts__position_axiom
  (assert (<= 0 patience__state__numelts__position))

(declare-const patience__state__values__first__bit Int)

(declare-const patience__state__values__last__bit Int)

(declare-const patience__state__values__position Int)

;; patience__state__values__first__bit_axiom
  (assert (<= 0 patience__state__values__first__bit))

;; patience__state__values__last__bit_axiom
  (assert
  (< patience__state__values__first__bit patience__state__values__last__bit))

;; patience__state__values__position_axiom
  (assert (<= 0 patience__state__values__position))

(declare-const patience__state__numstacks__first__bit Int)

(declare-const patience__state__numstacks__last__bit Int)

(declare-const patience__state__numstacks__position Int)

;; patience__state__numstacks__first__bit_axiom
  (assert (<= 0 patience__state__numstacks__first__bit))

;; patience__state__numstacks__last__bit_axiom
  (assert
  (< patience__state__numstacks__first__bit patience__state__numstacks__last__bit))

;; patience__state__numstacks__position_axiom
  (assert (<= 0 patience__state__numstacks__position))

(declare-const patience__state__stacksizes__first__bit Int)

(declare-const patience__state__stacksizes__last__bit Int)

(declare-const patience__state__stacksizes__position Int)

;; patience__state__stacksizes__first__bit_axiom
  (assert (<= 0 patience__state__stacksizes__first__bit))

;; patience__state__stacksizes__last__bit_axiom
  (assert
  (< patience__state__stacksizes__first__bit patience__state__stacksizes__last__bit))

;; patience__state__stacksizes__position_axiom
  (assert (<= 0 patience__state__stacksizes__position))

(declare-const patience__state__stacks__first__bit Int)

(declare-const patience__state__stacks__last__bit Int)

(declare-const patience__state__stacks__position Int)

;; patience__state__stacks__first__bit_axiom
  (assert (<= 0 patience__state__stacks__first__bit))

;; patience__state__stacks__last__bit_axiom
  (assert
  (< patience__state__stacks__first__bit patience__state__stacks__last__bit))

;; patience__state__stacks__position_axiom
  (assert (<= 0 patience__state__stacks__position))

(declare-const patience__state__posstack__first__bit Int)

(declare-const patience__state__posstack__last__bit Int)

(declare-const patience__state__posstack__position Int)

;; patience__state__posstack__first__bit_axiom
  (assert (<= 0 patience__state__posstack__first__bit))

;; patience__state__posstack__last__bit_axiom
  (assert
  (< patience__state__posstack__first__bit patience__state__posstack__last__bit))

;; patience__state__posstack__position_axiom
  (assert (<= 0 patience__state__posstack__position))

(declare-const patience__state__posheight__first__bit Int)

(declare-const patience__state__posheight__last__bit Int)

(declare-const patience__state__posheight__position Int)

;; patience__state__posheight__first__bit_axiom
  (assert (<= 0 patience__state__posheight__first__bit))

;; patience__state__posheight__last__bit_axiom
  (assert
  (< patience__state__posheight__first__bit patience__state__posheight__last__bit))

;; patience__state__posheight__position_axiom
  (assert (<= 0 patience__state__posheight__position))

(declare-const patience__state__preds__first__bit Int)

(declare-const patience__state__preds__last__bit Int)

(declare-const patience__state__preds__position Int)

;; patience__state__preds__first__bit_axiom
  (assert (<= 0 patience__state__preds__first__bit))

;; patience__state__preds__last__bit_axiom
  (assert
  (< patience__state__preds__first__bit patience__state__preds__last__bit))

;; patience__state__preds__position_axiom
  (assert (<= 0 patience__state__preds__position))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes ((state__ref 0))
(((state__refqtmk (state__content us_rep)))))
(define-fun state__ref_state__content__projection ((a state__ref)) us_rep 
  (state__content a))

(declare-const input__first integer)

(declare-const input__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun inv (us_rep) Bool)

(declare-fun inv__function_guard (Bool us_rep) Bool)

(declare-fun playgame (us_t1) us_rep)

(declare-fun playgame__function_guard (us_rep us_t1) Bool)

(declare-const c60b us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun dynamic_invariant ((temp___expr_218 Int)
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)
  (temp___do_typ_inv_217 Bool)) Bool (=>
                                     (or (= temp___is_init_214 true)
                                     (<= (- 1) 100)) (in_range5
                                     temp___expr_218)))

(declare-sort tcardarrayD1 0)

(declare-fun tcardarrayD1qtint (tcardarrayD1) Int)

;; tcardarrayD1'axiom
  (assert
  (forall ((i tcardarrayD1))
  (and (<= 0 (tcardarrayD1qtint i)) (<= (tcardarrayD1qtint i) 99))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq11 (tcardarrayD1 tcardarrayD1) Bool)

(declare-const dummy11 tcardarrayD1)

(declare-datatypes ((tcardarrayD1__ref 0))
(((tcardarrayD1__refqtmk (tcardarrayD1__content tcardarrayD1)))))
(define-fun tcardarrayD1__ref_tcardarrayD1__content__projection ((a tcardarrayD1__ref)) tcardarrayD1 
  (tcardarrayD1__content a))

(declare-sort tindexarrayD1 0)

(declare-fun tindexarrayD1qtint (tindexarrayD1) Int)

;; tindexarrayD1'axiom
  (assert
  (forall ((i tindexarrayD1))
  (and (<= 0 (tindexarrayD1qtint i)) (<= (tindexarrayD1qtint i) 99))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 99)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq12 (tindexarrayD1 tindexarrayD1) Bool)

(declare-const dummy12 tindexarrayD1)

(declare-datatypes ((tindexarrayD1__ref 0))
(((tindexarrayD1__refqtmk (tindexarrayD1__content tindexarrayD1)))))
(define-fun tindexarrayD1__ref_tindexarrayD1__content__projection ((a tindexarrayD1__ref)) tindexarrayD1 
  (tindexarrayD1__content a))

(declare-sort t48b 0)

(declare-fun t48bqtint (t48b) Int)

;; t48b'axiom
  (assert
  (forall ((i t48b)) (and (<= 1 (t48bqtint i)) (<= (t48bqtint i) 7))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (t48b t48b) Bool)

(declare-const dummy13 t48b)

(declare-datatypes ((t48b__ref 0))
(((t48b__refqtmk (t48b__content t48b)))))
(define-fun t48b__ref_t48b__content__projection ((a t48b__ref)) t48b 
  (t48b__content a))

(declare-fun test_patience__input__aggregate_def (Int Int Int Int Int Int
  Int) (Array Int card1))

(declare-fun temp___String_Literal_425 (tuple0) (Array Int character))

;; temp___String_Literal_425__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 2)) 101))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 4)) 116))
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 5)) 32))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 6)) 111)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 7)) 102))
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 8)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 9)) 97)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 11)) 112))
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 12)) 97)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 13)) 116))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 14)) 105)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 15)) 101))
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 16)) 110))
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 17)) 99)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 18)) 101)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 20)) 103))
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 21)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 22)) 109)
     (= (to_rep (select (temp___String_Literal_425 us_void_param) 23)) 101)))))) :pattern (
  (temp___String_Literal_425 us_void_param)) )))

(declare-fun temp___String_Literal_426 (tuple0) (Array Int character))

;; temp___String_Literal_426__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 1)) 45)
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 2)) 45))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 3)) 45)
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 4)) 45))
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 5)) 45))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 6)) 45)
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 7)) 45))
     (= (to_rep (select (temp___String_Literal_426 us_void_param) 8)) 45)))) :pattern (
  (temp___String_Literal_426 us_void_param)) )))

(declare-fun temp___String_Literal_427 (tuple0) (Array Int character))

;; temp___String_Literal_427__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 2)) 97))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 3)) 114)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 4)) 100))
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 5)) 83)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 6)) 116)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 7)) 97)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 8)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 9)) 107)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 10)) 32))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 11)) 40)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 12)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 13)) 105)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 14)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 15)) 115)
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 16)) 116))
     (= (to_rep (select (temp___String_Literal_427 us_void_param) 17)) 61))))) :pattern (
  (temp___String_Literal_427 us_void_param)) )))

(declare-fun temp___String_Literal_430 (tuple0) (Array Int character))

;; temp___String_Literal_430__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_430 us_void_param) 1)) 41)
     (= (to_rep (select (temp___String_Literal_430 us_void_param) 2)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_430 us_void_param) 3)) 61)
     (= (to_rep (select (temp___String_Literal_430 us_void_param) 4)) 32))) :pattern (
  (temp___String_Literal_430 us_void_param)) )))

(declare-fun temp___String_Literal_435 (tuple0) (Array Int character))

;; temp___String_Literal_435__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_435 us_void_param) 1)) 32) :pattern (
  (temp___String_Literal_435 us_void_param)) )))

(declare-fun temp___String_Literal_438 (tuple0) (Array Int character))

;; temp___String_Literal_438__def_axiom
  (assert true)

(declare-fun temp___String_Literal_439 (tuple0) (Array Int character))

;; temp___String_Literal_439__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 1)) 45)
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 2)) 45))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 3)) 45)
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 4)) 45))
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 5)) 45))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 6)) 45)
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 7)) 45))
     (= (to_rep (select (temp___String_Literal_439 us_void_param) 8)) 45)))) :pattern (
  (temp___String_Literal_439 us_void_param)) )))

(declare-fun temp___String_Literal_441 (tuple0) (Array Int character))

;; temp___String_Literal_441__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 1)) 45)
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 2)) 45))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 3)) 45)
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 4)) 45))
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 5)) 45))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 6)) 45)
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 7)) 45))
     (= (to_rep (select (temp___String_Literal_441 us_void_param) 8)) 45)))) :pattern (
  (temp___String_Literal_441 us_void_param)) )))

(declare-fun temp___String_Literal_442 (tuple0) (Array Int character))

;; temp___String_Literal_442__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 2)) 117))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 3)) 109)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 4)) 98))
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 6)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 7)) 32)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 8)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 9)) 102)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 10)) 32))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 11)) 101)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 12)) 108))
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 13)) 116)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 14)) 115)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 15)) 32)
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 16)) 61))
     (= (to_rep (select (temp___String_Literal_442 us_void_param) 17)) 32))))) :pattern (
  (temp___String_Literal_442 us_void_param)) )))

(declare-fun temp___String_Literal_445 (tuple0) (Array Int character))

;; temp___String_Literal_445__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 1)) 67)
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 2)) 97))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 3)) 114)
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 4)) 100))
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 5)) 32))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 6)) 118)
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 7)) 97))
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 8)) 108)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 9)) 117)
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 10)) 101))
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 11)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 12)) 32)
     (= (to_rep (select (temp___String_Literal_445 us_void_param) 13)) 61))))) :pattern (
  (temp___String_Literal_445 us_void_param)) )))

(declare-fun temp___String_Literal_448 (tuple0) (Array Int character))

;; temp___String_Literal_448__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_448 us_void_param) 1)) 32) :pattern (
  (temp___String_Literal_448 us_void_param)) )))

(declare-fun temp___String_Literal_452 (tuple0) (Array Int character))

;; temp___String_Literal_452__def_axiom
  (assert true)

(declare-fun temp___String_Literal_453 (tuple0) (Array Int character))

;; temp___String_Literal_453__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 1)) 78)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 2)) 117))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 3)) 109)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 4)) 98))
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 5)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 6)) 114)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 7)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 8)) 111)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 9)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 10)) 32)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 11)) 115))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 12)) 116)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 13)) 97))
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 14)) 99)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 15)) 107)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 16)) 115)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 17)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 18)) 61)
     (= (to_rep (select (temp___String_Literal_453 us_void_param) 19)) 32)))))) :pattern (
  (temp___String_Literal_453 us_void_param)) )))

(declare-fun temp___String_Literal_459 (tuple0) (Array Int character))

;; temp___String_Literal_459__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_459 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_459 us_void_param) 2)) 116))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_459 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_459 us_void_param) 4)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_459 us_void_param) 5)) 107)
     (= (to_rep (select (temp___String_Literal_459 us_void_param) 6)) 32)))) :pattern (
  (temp___String_Literal_459 us_void_param)) )))

(declare-fun temp___String_Literal_462 (tuple0) (Array Int character))

;; temp___String_Literal_462__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 2)) 104))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 4)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 5)) 32)
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 6)) 115)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 7)) 105)
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 8)) 122))
     (and
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 9)) 101)
     (= (to_rep (select (temp___String_Literal_462 us_void_param) 10)) 32))))) :pattern (
  (temp___String_Literal_462 us_void_param)) )))

(declare-fun temp___String_Literal_468 (tuple0) (Array Int character))

;; temp___String_Literal_468__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_468 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_468 us_void_param) 2)) 58)) :pattern (
  (temp___String_Literal_468 us_void_param)) )))

(declare-fun temp___String_Literal_475 (tuple0) (Array Int character))

;; temp___String_Literal_475__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_475 us_void_param) 1)) 32) :pattern (
  (temp___String_Literal_475 us_void_param)) )))

(declare-fun temp___String_Literal_478 (tuple0) (Array Int character))

;; temp___String_Literal_478__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_478 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_478 us_void_param) 2)) 61))
     (= (to_rep (select (temp___String_Literal_478 us_void_param) 3)) 62)) :pattern (
  (temp___String_Literal_478 us_void_param)) )))

(declare-fun temp___String_Literal_487 (tuple0) (Array Int character))

;; temp___String_Literal_487__def_axiom
  (assert true)

(declare-fun temp___String_Literal_488 (tuple0) (Array Int character))

;; temp___String_Literal_488__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 1)) 45)
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 2)) 45))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 3)) 45)
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 4)) 45))
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 5)) 45))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 6)) 45)
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 7)) 45))
     (= (to_rep (select (temp___String_Literal_488 us_void_param) 8)) 45)))) :pattern (
  (temp___String_Literal_488 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant5 ((temp___expr_193 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)
  (temp___do_typ_inv_192 Bool)) Bool (=>
                                     (or (= temp___is_init_189 true)
                                     (<= 1 52)) (in_range4 temp___expr_193)))

(declare-const rliteral card1)

;; rliteral_axiom
  (assert (= (cardqtint rliteral) 9))

(declare-const rliteral1 card1)

;; rliteral_axiom
  (assert (= (cardqtint rliteral1) 7))

(declare-const rliteral2 card1)

;; rliteral_axiom
  (assert (= (cardqtint rliteral2) 10))

(declare-const rliteral3 card1)

;; rliteral_axiom
  (assert (= (cardqtint rliteral3) 5))

(declare-const rliteral4 card1)

;; rliteral_axiom
  (assert (= (cardqtint rliteral4) 4))

;; def_axiom
  (assert
  (forall ((temp___414 Int) (temp___415 Int) (temp___416 Int)
  (temp___417 Int) (temp___418 Int) (temp___419 Int) (temp___420 Int))
  (let ((temp___413 (test_patience__input__aggregate_def temp___414
                    temp___415 temp___416 temp___417 temp___418 temp___419
                    temp___420)))
  (=>
  (and
  (and (dynamic_invariant5 temp___414 true true true true)
  (dynamic_invariant5 temp___415 true true true true))
  (and
  (and
  (and (dynamic_invariant5 temp___416 true true true true)
  (dynamic_invariant5 temp___417 true true true true)) (dynamic_invariant5
  temp___418 true true true true))
  (and (dynamic_invariant5 temp___419 true true true true)
  (dynamic_invariant5 temp___420 true true true true))))
  (and
  (and (= (select temp___413 1) rliteral)
  (= (select temp___413 2) rliteral1))
  (and
  (and
  (and (= (select temp___413 3) rliteral2)
  (= (select temp___413 4) rliteral)) (= (select temp___413 5) rliteral3))
  (and (= (select temp___413 6) rliteral4)
  (= (select temp___413 7) rliteral2))))))))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (count count) Bool)

(declare-const dummy14 count)

(declare-datatypes ((count__ref 0))
(((count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant6 ((temp___expr_165 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (=>
                                     (or (= temp___is_init_161 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_165)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant6
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant6
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(define-fun dynamic_invariant7 ((temp___expr_200 us_t1)
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)
  (temp___do_typ_inv_199 Bool)) Bool (=>
                                     (not (= temp___skip_constant_197 true))
                                     (dynamic_property1 1 2147483647
                                     (first3 temp___expr_200)
                                     (last3 temp___expr_200))))

;; inv__post_axiom
  (assert true)

;; inv__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (= (inv s) true)
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (and
     (<= 0 (to_rep3 (rec__patience__state__numstacks (us_split_fields1 s))))
     (<= (to_rep3 (rec__patience__state__numstacks (us_split_fields1 s))) 
     (to_rep3 (rec__patience__state__numelts (us_split_fields1 s)))))
     (<= (to_rep3 (rec__patience__state__numelts (us_split_fields1 s))) 100))
     (or (= (to_rep3 (rec__patience__state__numelts (us_split_fields1 s))) 0)
     (< 0 (to_rep3 (rec__patience__state__numstacks (us_split_fields1 s))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep3
              (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (and
     (and
     (<= 1 (to_rep3
           (let ((temp___354 (rec__patience__state__stacksizes
                             (us_split_fields1 s))))
           (select temp___354 i))))
     (<= (to_rep3
         (let ((temp___355 (rec__patience__state__stacksizes
                           (us_split_fields1 s))))
         (select temp___355 i))) (to_rep3
                                 (rec__patience__state__numelts
                                 (us_split_fields1 s)))))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep3
              (let ((temp___356 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___356 i))) 1)))
     (and
     (<= 0 (to_rep3
           (let ((temp___358 (let ((temp___357 (rec__patience__state__stacks
                                               (us_split_fields1 s))))
                             (select temp___357 i))))
           (select temp___358 j))))
     (< (to_rep3
        (let ((temp___360 (let ((temp___359 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___359 i))))
        (select temp___360 j))) (to_rep3
                                (rec__patience__state__numelts
                                (us_split_fields1 s)))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep3 (rec__patience__state__numelts (us_split_fields1 s))) 1)))
     (and
     (and
     (let ((temp___362 (to_rep3
                       (let ((temp___361 (rec__patience__state__posstack
                                         (us_split_fields1 s))))
                       (select temp___361 i)))))
     (and (<= 0 temp___362)
     (<= temp___362 (- (to_rep3
                       (rec__patience__state__numstacks (us_split_fields1 s))) 1))))
     (let ((temp___364 (to_rep3
                       (let ((temp___363 (rec__patience__state__posheight
                                         (us_split_fields1 s))))
                       (select temp___363 i)))))
     (and (<= 0 temp___364)
     (<= temp___364 (- (to_rep3
                       (let ((temp___365 (rec__patience__state__stacksizes
                                         (us_split_fields1 s))))
                       (select temp___365 (to_rep3
                                          (let ((temp___366 (rec__patience__state__posstack
                                                            (us_split_fields1
                                                            s))))
                                          (select temp___366 i)))))) 1)))))
     (= (to_rep3
        (let ((temp___369 (let ((temp___367 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___367 (to_rep3
                                             (let ((temp___368 (rec__patience__state__posstack
                                                               (us_split_fields1
                                                               s))))
                                             (select temp___368 i)))))))
        (select temp___369 (to_rep3
                           (let ((temp___370 (rec__patience__state__posheight
                                             (us_split_fields1 s))))
                           (select temp___370 i)))))) i)))))
     (forall ((ist Int))
     (=>
     (and (<= 0 ist)
     (<= ist (- (to_rep3
                (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((ip Int))
     (=>
     (and (<= 0 ip)
     (<= ip (- (to_rep3
               (let ((temp___371 (rec__patience__state__stacksizes
                                 (us_split_fields1 s))))
               (select temp___371 ist))) 1)))
     (and
     (= ist (to_rep3
            (let ((temp___372 (rec__patience__state__posstack
                              (us_split_fields1 s))))
            (select temp___372 (to_rep3
                               (let ((temp___374 (let ((temp___373 (rec__patience__state__stacks
                                                                   (us_split_fields1
                                                                   s))))
                                                 (select temp___373 ist))))
                               (select temp___374 ip)))))))
     (= ip (to_rep3
           (let ((temp___375 (rec__patience__state__posheight
                             (us_split_fields1 s))))
           (select temp___375 (to_rep3
                              (let ((temp___377 (let ((temp___376 (rec__patience__state__stacks
                                                                  (us_split_fields1
                                                                  s))))
                                                (select temp___376 ist))))
                              (select temp___377 ip)))))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep3
              (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep3
              (let ((temp___378 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___378 i))) 2)))
     (forall ((k Int))
     (=>
     (and (<= (+ j 1) k)
     (<= k (- (to_rep3
              (let ((temp___379 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___379 i))) 1)))
     (< (to_rep3
        (let ((temp___381 (let ((temp___380 (rec__patience__state__stacks
                                            (us_split_fields1 s))))
                          (select temp___380 i))))
        (select temp___381 j))) (to_rep3
                                (let ((temp___383 (let ((temp___382 (rec__patience__state__stacks
                                                                    (us_split_fields1
                                                                    s))))
                                                  (select temp___382 i))))
                                (select temp___383 k)))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep3
              (rec__patience__state__numstacks (us_split_fields1 s))) 1)))
     (forall ((j Int))
     (=>
     (and (<= 0 j)
     (<= j (- (to_rep3
              (let ((temp___384 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___384 i))) 2)))
     (forall ((k Int))
     (=>
     (and (<= (+ j 1) k)
     (<= k (- (to_rep3
              (let ((temp___385 (rec__patience__state__stacksizes
                                (us_split_fields1 s))))
              (select temp___385 i))) 1)))
     (<= (to_rep2
         (let ((temp___389 (rec__patience__state__values
                           (us_split_fields1 s))))
         (select temp___389 (to_rep3
                            (let ((temp___391 (let ((temp___390 (rec__patience__state__stacks
                                                                (us_split_fields1
                                                                s))))
                                              (select temp___390 i))))
                            (select temp___391 k)))))) (to_rep2
                                                       (let ((temp___386 
                                                       (rec__patience__state__values
                                                       (us_split_fields1 s))))
                                                       (select temp___386 
                                                       (to_rep3
                                                       (let ((temp___388 
                                                       (let ((temp___387 
                                                       (rec__patience__state__stacks
                                                       (us_split_fields1 s))))
                                                       (select temp___387 i))))
                                                       (select temp___388 j))))))))))))))
     (forall ((i Int))
     (=>
     (and (<= 0 i)
     (<= i (- (to_rep3 (rec__patience__state__numelts (us_split_fields1 s))) 1)))
     (and
     (and
     (let ((temp___393 (to_rep3
                       (let ((temp___392 (rec__patience__state__preds
                                         (us_split_fields1 s))))
                       (select temp___392 i)))))
     (and (<= (- 1) temp___393)
     (<= temp___393 (- (to_rep3
                       (rec__patience__state__numelts (us_split_fields1 s))) 1))))
     (< (to_rep3
        (let ((temp___394 (rec__patience__state__preds (us_split_fields1 s))))
        (select temp___394 i))) i))
     (ite (< (to_rep3
             (let ((temp___403 (rec__patience__state__preds
                               (us_split_fields1 s))))
             (select temp___403 i))) 0)
     (= (to_rep3
        (let ((temp___395 (rec__patience__state__posstack
                          (us_split_fields1 s))))
        (select temp___395 i))) 0)
     (and
     (and
     (< (to_rep2
        (let ((temp___396 (rec__patience__state__values (us_split_fields1 s))))
        (select temp___396 (to_rep3
                           (let ((temp___397 (rec__patience__state__preds
                                             (us_split_fields1 s))))
                           (select temp___397 i)))))) (to_rep2
                                                      (let ((temp___398 
                                                      (rec__patience__state__values
                                                      (us_split_fields1 s))))
                                                      (select temp___398 i))))
     (< 0 (to_rep3
          (let ((temp___399 (rec__patience__state__posstack
                            (us_split_fields1 s))))
          (select temp___399 i)))))
     (= (to_rep3
        (let ((temp___400 (rec__patience__state__posstack
                          (us_split_fields1 s))))
        (select temp___400 (to_rep3
                           (let ((temp___401 (rec__patience__state__preds
                                             (us_split_fields1 s))))
                           (select temp___401 i)))))) (- (to_rep3
                                                         (let ((temp___402 
                                                         (rec__patience__state__posstack
                                                         (us_split_fields1 s))))
                                                         (select temp___402 i))) 1))))))))) :pattern (
  (inv s)) )))

(assert
;; defqtvc
 ;; File "test_patience.adb", line 5, characters 0-0
  (not
  (forall ((standard_in us_private) (file_system us_private)
  (standard_out us_private) (standard_err us_private) (current_in us_private)
  (current_out us_private) (current_err us_private))
  (let ((test_patience__input__assume (of_array1
                                      (test_patience__input__aggregate_def 9
                                      7 10 9 5 4 10) 1 7)))
  (forall ((input (Array Int card1)))
  (=> (= input (to_array1 test_patience__input__assume))
  (=> (= (to_rep1 input__first) (first3 test_patience__input__assume))
  (=> (= (to_rep1 input__last) (last3 test_patience__input__assume))
  (=> (dynamic_property1 1 2147483647 (to_rep1 input__first)
  (to_rep1 input__last))
  (forall ((standard_in1 us_private) (file_system1 us_private)
  (standard_out1 us_private) (standard_err1 us_private)
  (current_in1 us_private) (current_out1 us_private)
  (current_err1 us_private))
  (=>
  (and
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))
  (forall ((standard_in2 us_private) (file_system2 us_private)
  (standard_out2 us_private) (standard_err2 us_private)
  (current_in2 us_private) (current_out2 us_private)
  (current_err2 us_private))
  (=>
  (and
  (= (line_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (line_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2))
  (= (page_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (page_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2)))
  (=>
  (exists ((o Int))
  (and (= (to_rep1 input__first) o)
  (let ((temp___429 (to_string (attr__ATTRIBUTE_IMAGE1 o) 12)))
  (let ((o1 (- (+ 1 (+ (length 1 17) (length (first1 temp___429)
                                     (last1 temp___429)))) 1)))
  (and (in_range2 o1)
  (let ((temp___431 (of_array
                    (concat1 (temp___String_Literal_427 Tuple0) 1 17
                    (to_array temp___429) (first1 temp___429)
                    (last1 temp___429)) 1 o1)))
  (or (= (length1 temp___431) 0) (in_range2
  (- (+ (first1 temp___431) (+ (length (first1 temp___431)
                               (last1 temp___431)) (length 1 4))) 1)))))))))
  (forall ((standard_in3 us_private) (file_system3 us_private)
  (standard_out3 us_private) (standard_err3 us_private)
  (current_in3 us_private) (current_out3 us_private)
  (current_err3 us_private))
  (=>
  (and
  (= (line_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (line_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3))
  (= (page_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (page_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))
  (forall ((standard_in4 us_private) (file_system4 us_private)
  (standard_out4 us_private) (standard_err4 us_private)
  (current_in4 us_private) (current_out4 us_private)
  (current_err4 us_private))
  (=>
  (exists ((temp___433 Int))
  (and (= (to_rep1 input__first) temp___433)
  (exists ((temp___434 Int))
  (and (= (to_rep1 input__last) temp___434)
  (exists ((i Int))
  (and (= i temp___433)
  (ite (= (and (ite (<= temp___433 i) true false) (ite (<= i temp___434) true
                                                  false)) true)
  (exists ((standard_in5 us_private) (file_system5 us_private)
  (standard_out5 us_private) (standard_err5 us_private)
  (current_in5 us_private) (current_out5 us_private)
  (current_err5 us_private) (i1 Int))
  (and (and (<= (to_rep1 input__first) i1) (<= i1 (to_rep1 input__last)))
  (and (and (<= (to_rep1 input__first) i1) (<= i1 (to_rep1 input__last)))
  (exists ((o Int))
  (and (= (to_rep2 (select input i1)) o)
  (let ((temp___437 (to_string (attr__ATTRIBUTE_IMAGE4 o) 5)))
  (and (in_range2
  (- (+ 1 (+ (length 1 1) (length (first1 temp___437) (last1 temp___437)))) 1))
  (and
  (and
  (= (line_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (line_length standard_in4
                                            file_system4 standard_out4
                                            standard_err4 current_in4
                                            current_out4 current_err4))
  (= (page_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (page_length standard_in4
                                            file_system4 standard_out4
                                            standard_err4 current_in4
                                            current_out4 current_err4)))
  (= i1 temp___434)))))))))
  (and
  (and
  (and
  (and
  (and (and (= standard_in4 standard_in3) (= file_system4 file_system3))
  (= standard_out4 standard_out3)) (= standard_err4 standard_err3))
  (= current_in4 current_in3)) (= current_out4 current_out3))
  (= current_err4 current_err3)))))))))
  (forall ((standard_in5 us_private) (file_system5 us_private)
  (standard_out5 us_private) (standard_err5 us_private)
  (current_in5 us_private) (current_out5 us_private)
  (current_err5 us_private))
  (=>
  (and
  (= (line_length standard_in4 file_system4 standard_out4 standard_err4
     current_in4 current_out4 current_err4) (line_length standard_in5
                                            file_system5 standard_out5
                                            standard_err5 current_in5
                                            current_out5 current_err5))
  (= (page_length standard_in4 file_system4 standard_out4 standard_err4
     current_in4 current_out4 current_err4) (page_length standard_in5
                                            file_system5 standard_out5
                                            standard_err5 current_in5
                                            current_out5 current_err5)))
  (forall ((standard_in6 us_private) (file_system6 us_private)
  (standard_out6 us_private) (standard_err6 us_private)
  (current_in6 us_private) (current_out6 us_private)
  (current_err6 us_private))
  (=>
  (and
  (= (line_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (line_length standard_in6
                                            file_system6 standard_out6
                                            standard_err6 current_in6
                                            current_out6 current_err6))
  (= (page_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (page_length standard_in6
                                            file_system6 standard_out6
                                            standard_err6 current_in6
                                            current_out6 current_err6)))
  (forall ((o Int))
  (=> (= (to_rep1 input__last) o)
  (forall ((o1 Int))
  (=> (= (to_rep1 input__first) o1)
  (<= (length2 (of_array1 input o1 o)) 100)))))))))))))))))))))))))))
(check-sat)
(exit)
