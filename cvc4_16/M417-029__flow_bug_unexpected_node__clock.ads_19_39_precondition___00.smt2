(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ((natural__ref 0))
(((natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort minutes_t 0)

(declare-fun minutes_tqtint (minutes_t) Int)

;; minutes_t'axiom
  (assert
  (forall ((i minutes_t))
  (and (<= 0 (minutes_tqtint i)) (<= (minutes_tqtint i) 59))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (minutes_t minutes_t) Bool)

(declare-const dummy1 minutes_t)

(declare-datatypes ((minutes_t__ref 0))
(((minutes_t__refqtmk (minutes_t__content minutes_t)))))
(define-fun minutes_t__ref_minutes_t__content__projection ((a minutes_t__ref)) minutes_t 
  (minutes_t__content a))

(define-fun to_rep1 ((x minutes_t)) Int (minutes_tqtint x))

(declare-fun of_rep1 (Int) minutes_t)

;; inversion_axiom
  (assert
  (forall ((x minutes_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x minutes_t)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort seconds_t 0)

(declare-fun seconds_tqtint (seconds_t) Int)

;; seconds_t'axiom
  (assert
  (forall ((i seconds_t))
  (and (<= 0 (seconds_tqtint i)) (<= (seconds_tqtint i) 59))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 59)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (seconds_t seconds_t) Bool)

(declare-const dummy2 seconds_t)

(declare-datatypes ((seconds_t__ref 0))
(((seconds_t__refqtmk (seconds_t__content seconds_t)))))
(define-fun seconds_t__ref_seconds_t__content__projection ((a seconds_t__ref)) seconds_t 
  (seconds_t__content a))

(define-fun to_rep2 ((x seconds_t)) Int (seconds_tqtint x))

(declare-fun of_rep2 (Int) seconds_t)

;; inversion_axiom
  (assert
  (forall ((x seconds_t))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x seconds_t)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__time__t__hours natural)(rec__time__t__minutes minutes_t)(rec__time__t__seconds seconds_t)))))
(define-fun us_split_fields_rec__time__t__hours__projection ((a us_split_fields)) natural 
  (rec__time__t__hours a))

(define-fun us_split_fields_rec__time__t__minutes__projection ((a us_split_fields)) minutes_t 
  (rec__time__t__minutes a))

(define-fun us_split_fields_rec__time__t__seconds__projection ((a us_split_fields)) seconds_t 
  (rec__time__t__seconds a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__time__t__hours (us_split_fields1 a))) 
                        (to_rep (rec__time__t__hours (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__time__t__minutes (us_split_fields1 a))) 
                        (to_rep1
                        (rec__time__t__minutes (us_split_fields1 b)))))
                        (= (to_rep2
                           (rec__time__t__seconds (us_split_fields1 a))) 
                        (to_rep2
                        (rec__time__t__seconds (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const time__t__hours__first__bit Int)

(declare-const time__t__hours__last__bit Int)

(declare-const time__t__hours__position Int)

;; time__t__hours__first__bit_axiom
  (assert (<= 0 time__t__hours__first__bit))

;; time__t__hours__last__bit_axiom
  (assert (< time__t__hours__first__bit time__t__hours__last__bit))

;; time__t__hours__position_axiom
  (assert (<= 0 time__t__hours__position))

(declare-const time__t__minutes__first__bit Int)

(declare-const time__t__minutes__last__bit Int)

(declare-const time__t__minutes__position Int)

;; time__t__minutes__first__bit_axiom
  (assert (<= 0 time__t__minutes__first__bit))

;; time__t__minutes__last__bit_axiom
  (assert (< time__t__minutes__first__bit time__t__minutes__last__bit))

;; time__t__minutes__position_axiom
  (assert (<= 0 time__t__minutes__position))

(declare-const time__t__seconds__first__bit Int)

(declare-const time__t__seconds__last__bit Int)

(declare-const time__t__seconds__position Int)

;; time__t__seconds__first__bit_axiom
  (assert (<= 0 time__t__seconds__first__bit))

;; time__t__seconds__last__bit_axiom
  (assert (< time__t__seconds__first__bit time__t__seconds__last__bit))

;; time__t__seconds__position_axiom
  (assert (<= 0 time__t__seconds__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ((t__ref 0))
(((t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun get_current_time (us_split_fields) us_rep)

(declare-fun get_current_time__function_guard (us_rep us_split_fields) Bool)

;; get_current_time__post_axiom
  (assert true)

;; get_current_time__def_axiom
  (assert
  (forall ((clock__current_time__fields us_split_fields))
  (! (= (get_current_time clock__current_time__fields) (us_repqtmk
                                                       clock__current_time__fields)) :pattern (
  (get_current_time clock__current_time__fields)) )))

(declare-const max us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun t_increment (us_rep) us_rep)

(declare-fun t_increment__function_guard (us_rep us_rep) Bool)

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range3 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

;; t_increment__post_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (not (= (bool_eq x max) true))
     (let ((result (t_increment x)))
     (=> (t_increment__function_guard result x)
     (ite (< (to_rep2 (rec__time__t__seconds (us_split_fields1 x))) 59)
     (and
     (and
     (= (to_rep2 (rec__time__t__seconds (us_split_fields1 result))) (+ 
     (to_rep2 (rec__time__t__seconds (us_split_fields1 x))) 1))
     (= (to_rep1 (rec__time__t__minutes (us_split_fields1 result))) (to_rep1
                                                                    (rec__time__t__minutes
                                                                    (us_split_fields1
                                                                    x)))))
     (= (to_rep (rec__time__t__hours (us_split_fields1 result))) (to_rep
                                                                 (rec__time__t__hours
                                                                 (us_split_fields1
                                                                 x)))))
     (ite (and (= (to_rep2 (rec__time__t__seconds (us_split_fields1 x))) 59)
          (< (to_rep1 (rec__time__t__minutes (us_split_fields1 x))) 59))
     (and
     (and (= (to_rep2 (rec__time__t__seconds (us_split_fields1 result))) 0)
     (= (to_rep1 (rec__time__t__minutes (us_split_fields1 result))) (+ 
     (to_rep1 (rec__time__t__minutes (us_split_fields1 x))) 1)))
     (= (to_rep (rec__time__t__hours (us_split_fields1 result))) (to_rep
                                                                 (rec__time__t__hours
                                                                 (us_split_fields1
                                                                 x)))))
     (=>
     (and (= (to_rep2 (rec__time__t__seconds (us_split_fields1 x))) 59)
     (= (to_rep1 (rec__time__t__minutes (us_split_fields1 x))) 59))
     (and
     (and (= (to_rep2 (rec__time__t__seconds (us_split_fields1 result))) 0)
     (= (to_rep1 (rec__time__t__minutes (us_split_fields1 result))) 0))
     (= (to_rep (rec__time__t__hours (us_split_fields1 result))) (+ (to_rep
                                                                    (rec__time__t__hours
                                                                    (us_split_fields1
                                                                    x))) 1))))))))) :pattern (
  (t_increment x)) )))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_160 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (<= 0 59)) (in_range1 temp___expr_160)))

(define-fun dynamic_invariant2 ((temp___expr_167 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (<= 0 59)) (in_range2 temp___expr_167)))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 2147483647))

(declare-const rliteral1 minutes_t)

;; rliteral_axiom
  (assert (= (minutes_tqtint rliteral1) 59))

(declare-const rliteral2 seconds_t)

;; rliteral_axiom
  (assert (= (seconds_tqtint rliteral2) 59))

;; max__def_axiom
  (assert
  (= max (us_repqtmk (us_split_fieldsqtmk rliteral rliteral1 rliteral2))))

(assert
;; defqtvc
 ;; File "clock.ads", line 16, characters 0-0
  (not
  (forall ((current_time__split_fields us_split_fields))
  (=> (= (us_repqtmk (us_split_fieldsqtmk rliteral rliteral1 rliteral2)) 
  max)
  (=>
  (forall ((current_time__split_fields1 us_split_fields))
  (get_current_time__function_guard
  (get_current_time current_time__split_fields1)
  current_time__split_fields1))
  (=>
  (not (= (bool_eq (get_current_time current_time__split_fields) max) true))
  (=>
  (forall ((current_time__split_fields1 us_split_fields))
  (get_current_time__function_guard
  (get_current_time current_time__split_fields1)
  current_time__split_fields1))
  (let ((o (us_repqtmk current_time__split_fields)))
  (let ((temp___203 (t_increment o)))
  (=>
  (and (t_increment__function_guard temp___203 o)
  (ite (= (< (to_rep2 (rec__time__t__seconds current_time__split_fields)) 59) true)
  (and
  (and
  (= (to_rep2 (rec__time__t__seconds (us_split_fields1 temp___203))) (+ 
  (to_rep2 (rec__time__t__seconds current_time__split_fields)) 1))
  (= (to_rep1 (rec__time__t__minutes (us_split_fields1 temp___203))) 
  (to_rep1 (rec__time__t__minutes current_time__split_fields))))
  (= (to_rep (rec__time__t__hours (us_split_fields1 temp___203))) (to_rep
                                                                  (rec__time__t__hours
                                                                  current_time__split_fields))))
  (ite (= (and (= (to_rep2
                  (rec__time__t__seconds current_time__split_fields)) 59) (< 
  (to_rep1 (rec__time__t__minutes current_time__split_fields)) 59)) true)
  (and
  (and (= (to_rep2 (rec__time__t__seconds (us_split_fields1 temp___203))) 0)
  (= (to_rep1 (rec__time__t__minutes (us_split_fields1 temp___203))) (+ 
  (to_rep1 (rec__time__t__minutes current_time__split_fields)) 1)))
  (= (to_rep (rec__time__t__hours (us_split_fields1 temp___203))) (to_rep
                                                                  (rec__time__t__hours
                                                                  current_time__split_fields))))
  (=>
  (= (and (= (to_rep2 (rec__time__t__seconds current_time__split_fields)) 59) (= 
  (to_rep1 (rec__time__t__minutes current_time__split_fields)) 59)) true)
  (and
  (and (= (to_rep2 (rec__time__t__seconds (us_split_fields1 temp___203))) 0)
  (= (to_rep1 (rec__time__t__minutes (us_split_fields1 temp___203))) 0))
  (= (to_rep (rec__time__t__hours (us_split_fields1 temp___203))) (+ 
  (to_rep (rec__time__t__hours current_time__split_fields)) 1)))))))
  (forall ((current_time__split_fields1 us_split_fields))
  (=> (= current_time__split_fields1 (us_split_fields1 temp___203))
  (not (= (bool_eq (get_current_time current_time__split_fields) max) true))))))))))))))
(check-sat)
