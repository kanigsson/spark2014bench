(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ((us_split_fields 0))
(((us_split_fieldsqtmk
  (rec__dic__pr_record_t__x integer)(rec__dic__pr_record_t__y integer)))))
(define-fun us_split_fields_rec__dic__pr_record_t__x__projection ((a us_split_fields)) integer 
  (rec__dic__pr_record_t__x a))

(define-fun us_split_fields_rec__dic__pr_record_t__y__projection ((a us_split_fields)) integer 
  (rec__dic__pr_record_t__y a))

(declare-datatypes ((us_split_fields__ref 0))
(((us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ((us_rep 0))
(((us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__dic__pr_record_t__x (us_split_fields1 a))) 
                        (to_rep
                        (rec__dic__pr_record_t__x (us_split_fields1 b))))
                        (= (to_rep
                           (rec__dic__pr_record_t__y (us_split_fields1 a))) 
                        (to_rep
                        (rec__dic__pr_record_t__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dic__pr_record_t__x__first__bit Int)

(declare-const dic__pr_record_t__x__last__bit Int)

(declare-const dic__pr_record_t__x__position Int)

;; dic__pr_record_t__x__first__bit_axiom
  (assert (<= 0 dic__pr_record_t__x__first__bit))

;; dic__pr_record_t__x__last__bit_axiom
  (assert (< dic__pr_record_t__x__first__bit dic__pr_record_t__x__last__bit))

;; dic__pr_record_t__x__position_axiom
  (assert (<= 0 dic__pr_record_t__x__position))

(declare-const dic__pr_record_t__y__first__bit Int)

(declare-const dic__pr_record_t__y__last__bit Int)

(declare-const dic__pr_record_t__y__position Int)

;; dic__pr_record_t__y__first__bit_axiom
  (assert (<= 0 dic__pr_record_t__y__first__bit))

;; dic__pr_record_t__y__last__bit_axiom
  (assert (< dic__pr_record_t__y__first__bit dic__pr_record_t__y__last__bit))

;; dic__pr_record_t__y__position_axiom
  (assert (<= 0 dic__pr_record_t__y__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ((pr_record_ttt__ref 0))
(((pr_record_ttt__refqtmk (pr_record_ttt__content us_rep)))))
(define-fun pr_record_ttt__ref_pr_record_ttt__content__projection ((a pr_record_ttt__ref)) us_rep 
  (pr_record_ttt__content a))

(declare-fun add3 (us_rep) Int)

(declare-fun add3__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const dic__pr_record_t__x__first__bit1 Int)

(declare-const dic__pr_record_t__x__last__bit1 Int)

(declare-const dic__pr_record_t__x__position1 Int)

;; dic__pr_record_t__x__first__bit_axiom
  (assert (<= 0 dic__pr_record_t__x__first__bit1))

;; dic__pr_record_t__x__last__bit_axiom
  (assert
  (< dic__pr_record_t__x__first__bit1 dic__pr_record_t__x__last__bit1))

;; dic__pr_record_t__x__position_axiom
  (assert (<= 0 dic__pr_record_t__x__position1))

(declare-const dic__pr_record_t__y__first__bit1 Int)

(declare-const dic__pr_record_t__y__last__bit1 Int)

(declare-const dic__pr_record_t__y__position1 Int)

;; dic__pr_record_t__y__first__bit_axiom
  (assert (<= 0 dic__pr_record_t__y__first__bit1))

;; dic__pr_record_t__y__last__bit_axiom
  (assert
  (< dic__pr_record_t__y__first__bit1 dic__pr_record_t__y__last__bit1))

;; dic__pr_record_t__y__position_axiom
  (assert (<= 0 dic__pr_record_t__y__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ((pr_record_tt__ref 0))
(((pr_record_tt__refqtmk (pr_record_tt__content us_rep)))))
(define-fun pr_record_tt__ref_pr_record_tt__content__projection ((a pr_record_tt__ref)) us_rep 
  (pr_record_tt__content a))

(declare-fun add2 (us_rep) Int)

(declare-fun add2__function_guard (Int us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_175 us_rep)
  (temp___skip_top_level_176 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic__pr_record_t__x
                                            (us_split_fields1
                                            temp___expr_175))) 0)
                                         (= (to_rep
                                            (rec__dic__pr_record_t__y
                                            (us_split_fields1
                                            temp___expr_175))) 0)))

;; add3__post_axiom
  (assert
  (forall ((r us_rep))
  (! (let ((result (add3 r)))
     (=> (add3__function_guard result r) (dynamic_invariant result true false
     true true))) :pattern ((add3 r)) )))

;; add3__def_axiom
  (assert
  (forall ((r us_rep))
  (! (and (forall ((r1 us_rep)) (add2__function_guard (add2 r1) r1))
     (= (add3 r) (add2 r))) :pattern ((add3 r)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption1 ((temp___expr_168 us_rep)
  (temp___skip_top_level_169 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic__pr_record_t__x
                                            (us_split_fields1
                                            temp___expr_168))) 0)
                                         (= (to_rep
                                            (rec__dic__pr_record_t__y
                                            (us_split_fields1
                                            temp___expr_168))) 0)))

;; add2__post_axiom
  (assert
  (forall ((r us_rep))
  (! (let ((result (add2 r)))
     (=> (add2__function_guard result r) (dynamic_invariant result true false
     true true))) :pattern ((add2 r)) )))

(assert
;; defqtvc
 ;; File "callers_caller.ads", line 8, characters 0-0
  (not
  (forall ((r__split_fields us_split_fields))
  (=> (default_initial_assumption (us_repqtmk r__split_fields) false)
  (=>
  (forall ((r__split_fields1 us_split_fields)) (add3__function_guard
  (add3 (us_repqtmk r__split_fields1)) (us_repqtmk r__split_fields1)))
  (= (add3 (us_repqtmk r__split_fields)) 0))))))
(check-sat)
