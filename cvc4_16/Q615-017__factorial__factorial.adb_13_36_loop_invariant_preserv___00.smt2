(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ((integer__ref 0))
(((integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-fun mathematical_factorial (Int) Int)

(declare-fun mathematical_factorial__function_guard (Int Int) Bool)

;; mathematical_factorial__def_axiom
  (assert
  (forall ((x Int))
  (! (=>
     (and (dynamic_invariant x true true true true)
     (mathematical_factorial__function_guard (mathematical_factorial x) x))
     (and
     (forall ((x1 Int)) (mathematical_factorial__function_guard
     (mathematical_factorial (- x1 1)) (- x1 1)))
     (= (mathematical_factorial x) (ite (<= x 1) 1
                                   (* x (mathematical_factorial (- x 1))))))) :pattern (
  (mathematical_factorial x)) )))

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun to_rep ((x1 integer)) Int (integerqtint x1))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x1 integer))
  (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)) )))

;; range_axiom
  (assert
  (forall ((x1 integer)) (! (in_range1 (to_rep x1)) :pattern ((to_rep x1)) )))

;; coerce_axiom
  (assert
  (forall ((x1 Int))
  (! (=> (in_range1 x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep
                                                               (of_rep x1))) )))

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x1 Int)) Bool (and (<= first_int x1) (<= x1 last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ((t2b__ref 0))
(((t2b__refqtmk (t2b__content integer)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) integer 
  (t2b__content a))

;; mathematical_factorial__post_axiom
  (assert
  (forall ((x1 Int))
  (! (=>
     (and (dynamic_invariant x1 true true true true)
     (and (<= 1 x1) (<= x1 12)))
     (let ((result (mathematical_factorial x1)))
     (=> (mathematical_factorial__function_guard result x1)
     (dynamic_invariant result true false true true)))) :pattern ((mathematical_factorial
                                                                  x1)) )))

(assert
;; defqtvc
 ;; File "factorial.ads", line 12, characters 0-0
  (not
  (forall ((result__ Int) (result__1 Int))
  (=> (dynamic_invariant x true false true true)
  (=> (<= 1 x)
  (=> (<= x 12)
  (=> (dynamic_invariant result__ false false true true)
  (=> (= result__1 1)
  (let ((temp___161 x))
  (forall ((i Int))
  (=> (= i 2)
  (=>
  (= (and (ite (<= 2 i) true false) (ite (<= i temp___161) true false)) true)
  (let ((o (* result__1 i)))
  (=> (in_range1 o)
  (forall ((result__2 Int))
  (=> (= result__2 o)
  (let ((o1 (mathematical_factorial i)))
  (=>
  (forall ((i1 Int)) (mathematical_factorial__function_guard
  (mathematical_factorial (- i1 1)) (- i1 1)))
  (=>
  (and (mathematical_factorial__function_guard o1 i)
  (and (dynamic_invariant o1 true false true true)
  (= o1 (ite (<= i 1) 1 (* i (mathematical_factorial (- i 1)))))))
  (forall ((result__3 Int) (i1 Int))
  (=>
  (forall ((i2 Int)) (mathematical_factorial__function_guard
  (mathematical_factorial i2) i2))
  (=> (= result__3 (mathematical_factorial i1))
  (=>
  (= (and (ite (and (dynamic_invariant result__3 false true true true)
               (dynamic_property 2 x i1))
          true false) (ite (and (<= 2 i1) (<= i1 x)) true false)) true)
  (=> (not (= i1 temp___161))
  (forall ((i2 Int))
  (=> (= i2 (+ i1 1))
  (let ((o2 (* result__3 i2)))
  (=> (in_range1 o2)
  (forall ((result__4 Int))
  (=> (= result__4 o2)
  (let ((o3 (mathematical_factorial i2)))
  (=>
  (forall ((i3 Int)) (mathematical_factorial__function_guard
  (mathematical_factorial (- i3 1)) (- i3 1)))
  (=>
  (and (mathematical_factorial__function_guard o3 i2)
  (and (dynamic_invariant o3 true false true true)
  (= o3 (ite (<= i2 1) 1 (* i2 (mathematical_factorial (- i2 1)))))))
  (=>
  (forall ((i3 Int)) (mathematical_factorial__function_guard
  (mathematical_factorial i3) i3)) (= result__4 (mathematical_factorial i2))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
