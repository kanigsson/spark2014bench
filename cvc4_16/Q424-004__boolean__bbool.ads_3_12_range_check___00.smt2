(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: CVC4
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes ((tuple0 0))
(((Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ((us_type_of_heap__ref 0))
(((us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes ((int__ref 0))
(((int__refqtmk (int__content Int)))))
(declare-datatypes ((bool__ref 0))
(((bool__refqtmk (bool__content Bool)))))
(declare-datatypes ((us_fixed__ref 0))
(((us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes ((real__ref 0))
(((real__refqtmk (real__content Real)))))
(declare-datatypes ((us_private__ref 0))
(((us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-fun f (Bool) Bool)

(declare-fun f__function_guard (Bool Bool) Bool)

;; f__post_axiom
  (assert true)

;; f__def_axiom
  (assert (forall ((b Bool)) (! (not (= (f b) true)) :pattern ((f b)) )))

(declare-const b_FIRST Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b_LAST Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; b_FIRST__def_axiom
  (assert
  (and (f__function_guard (f (distinct 0 0)) (distinct 0 0))
  (= b_FIRST (f (distinct 0 0)))))

;; b_LAST__def_axiom
  (assert
  (and (f__function_guard (f (distinct 1 0)) (distinct 1 0))
  (= b_LAST (f (distinct 1 0)))))

(assert
;; defqtvc
 ;; File "bbool.ads", line 1, characters 0-0
  (not
  (let ((o (distinct 0 0)))
  (let ((bbool__b_FIRST__assume (f o)))
  (=>
  (and (f__function_guard bbool__b_FIRST__assume o)
  (not (= bbool__b_FIRST__assume true)))
  (=> (= bbool__b_FIRST__assume b_FIRST)
  (let ((o1 (distinct 1 0)))
  (let ((bbool__b_LAST__assume (f o1)))
  (=>
  (and (f__function_guard bbool__b_LAST__assume o1)
  (not (= bbool__b_LAST__assume true)))
  (=> (= bbool__b_LAST__assume b_LAST)
  (=> (<= (ite b_FIRST 1 0) (ite b_LAST 1 0)) (<= 0 (ite b_FIRST 1 0)))))))))))))
(check-sat)
