(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(declare-sort us_main_type 0)

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (rec__list_ex_pledge__list__is_null_pointer Bool)(rec__list_ex_pledge__list__pointer_address Int)(rec__list_ex_pledge__list__pointer_value_abstr us_main_type)))))
(define-fun us_rep_rec__list_ex_pledge__list__is_null_pointer__projection ((a us_rep)) Bool 
  (rec__list_ex_pledge__list__is_null_pointer a))

(define-fun us_rep_rec__list_ex_pledge__list__pointer_address__projection ((a us_rep)) Int 
  (rec__list_ex_pledge__list__pointer_address a))

(define-fun us_rep_rec__list_ex_pledge__list__pointer_value_abstr__projection ((a us_rep)) us_main_type 
  (rec__list_ex_pledge__list__pointer_value_abstr a))

(declare-datatypes ()
((us_rep__ref (us_rep__refqtmk (us_rep__content us_rep)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep 
  (us_rep__content a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__list_ex_pledge__list__is_null_pointer a) 
                        (rec__list_ex_pledge__list__is_null_pointer b))
                        (=>
                        (not
                        (= (rec__list_ex_pledge__list__is_null_pointer a) true))
                        (and
                        (= (rec__list_ex_pledge__list__pointer_address a) 
                        (rec__list_ex_pledge__list__pointer_address b))
                        (= (rec__list_ex_pledge__list__pointer_value_abstr a) 
                        (rec__list_ex_pledge__list__pointer_value_abstr b)))))
                   true false))

(declare-const dummy2 us_rep)

(declare-datatypes () ((t2s__ref (t2s__refqtmk (t2s__content us_rep)))))
(define-fun t2s__ref_t2s__content__projection ((a t2s__ref)) us_rep (t2s__content
                                                                    a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-const dummy3 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-const dummy4 us_rep)

(declare-datatypes () ((t1s__ref (t1s__refqtmk (t1s__content us_rep)))))
(define-fun t1s__ref_t1s__content__projection ((a t1s__ref)) us_rep (t1s__content
                                                                    a))

(declare-fun length_aux (us_rep) Int)

(declare-fun length_aux__function_guard (Int us_rep) Bool)

;; length__post_axiom
  (assert
  (forall ((l us_rep))
  (! (let ((result (length l)))
     (=> (length__function_guard result l) (dynamic_invariant1 result true
     false true true))) :pattern ((length l)) )))

;; length__def_axiom
  (assert
  (forall ((l us_rep))
  (! (and
     (forall ((l1 us_rep)) (length_aux__function_guard (length_aux l1) l1))
     (= (length l) (length_aux l))) :pattern ((length l)) )))

(declare-const dummy5 us_rep)

(declare-datatypes () ((t3s__ref (t3s__refqtmk (t3s__content us_rep)))))
(define-fun t3s__ref_t3s__content__projection ((a t3s__ref)) us_rep (t3s__content
                                                                    a))

(declare-const l us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun get_nth_val (us_rep Int) Int)

(declare-fun get_nth_val__function_guard (Int us_rep Int) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes () ((list__ref (list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__list_ex_pledge__list_cell__value integer)(rec__list_ex_pledge__list_cell__next us_rep)))))
(define-fun us_split_fields_rec__list_ex_pledge__list_cell__value__projection ((a us_split_fields)) integer 
  (rec__list_ex_pledge__list_cell__value a))

(define-fun us_split_fields_rec__list_ex_pledge__list_cell__next__projection ((a us_split_fields)) us_rep 
  (rec__list_ex_pledge__list_cell__next a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__list_ex_pledge__list_cell__value
                            (us_split_fields1 a))) (to_rep
                                                   (rec__list_ex_pledge__list_cell__value
                                                   (us_split_fields1 b))))
                         (= (bool_eq
                            (rec__list_ex_pledge__list_cell__next
                            (us_split_fields1 a))
                            (rec__list_ex_pledge__list_cell__next
                            (us_split_fields1 b))) true))
                    true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const list_ex_pledge__list_cell__value__first__bit Int)

(declare-const list_ex_pledge__list_cell__value__last__bit Int)

(declare-const list_ex_pledge__list_cell__value__position Int)

;; list_ex_pledge__list_cell__value__first__bit_axiom
  (assert (<= 0 list_ex_pledge__list_cell__value__first__bit))

;; list_ex_pledge__list_cell__value__last__bit_axiom
  (assert
  (< list_ex_pledge__list_cell__value__first__bit list_ex_pledge__list_cell__value__last__bit))

;; list_ex_pledge__list_cell__value__position_axiom
  (assert (<= 0 list_ex_pledge__list_cell__value__position))

(declare-const list_ex_pledge__list_cell__next__first__bit Int)

(declare-const list_ex_pledge__list_cell__next__last__bit Int)

(declare-const list_ex_pledge__list_cell__next__position Int)

;; list_ex_pledge__list_cell__next__first__bit_axiom
  (assert (<= 0 list_ex_pledge__list_cell__next__first__bit))

;; list_ex_pledge__list_cell__next__last__bit_axiom
  (assert
  (< list_ex_pledge__list_cell__next__first__bit list_ex_pledge__list_cell__next__last__bit))

;; list_ex_pledge__list_cell__next__position_axiom
  (assert (<= 0 list_ex_pledge__list_cell__next__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ()
((list_cell__ref (list_cell__refqtmk (list_cell__content us_rep1)))))
(define-fun list_cell__ref_list_cell__content__projection ((a list_cell__ref)) us_rep1 
  (list_cell__content a))

(define-fun in_range3 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

(declare-fun us_open (us_main_type) us_rep1)

(declare-fun us_close (us_rep1) us_main_type)

;; close_open
  (assert
  (forall ((x us_main_type))
  (! (= (us_close (us_open x)) x) :pattern ((us_open x)) )))

;; open_close
  (assert
  (forall ((x us_rep1))
  (! (= (us_open (us_close x)) x) :pattern ((us_close x)) )))

(define-fun rec__list_ex_pledge__list__pointer_value ((a us_rep)) us_rep1 
  (us_open (rec__list_ex_pledge__list__pointer_value_abstr a)))

(define-fun rec__list_ex_pledge__list__pointer_value__pred ((a us_rep)) Bool 
  (not (= (rec__list_ex_pledge__list__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
  (assert
  (= (rec__list_ex_pledge__list__is_null_pointer us_null_pointer) true))

;; get_nth_val__def_axiom
  (assert
  (forall ((l1 us_rep))
  (forall ((n1 Int))
  (! (=>
     (and (dynamic_invariant n1 true true true true)
     (get_nth_val__function_guard (get_nth_val l1 n1) l1 n1))
     (and
     (forall ((l2 us_rep) (n2 Int)) (get_nth_val__function_guard
     (get_nth_val
     (rec__list_ex_pledge__list_cell__next
     (us_split_fields1 (rec__list_ex_pledge__list__pointer_value l2)))
     (- n2 1))
     (rec__list_ex_pledge__list_cell__next
     (us_split_fields1 (rec__list_ex_pledge__list__pointer_value l2)))
     (- n2 1)))
     (= (get_nth_val l1 n1) (ite (= n1 1)
                            (to_rep
                            (rec__list_ex_pledge__list_cell__value
                            (us_split_fields1
                            (rec__list_ex_pledge__list__pointer_value l1))))
                            (get_nth_val
                            (rec__list_ex_pledge__list_cell__next
                            (us_split_fields1
                            (rec__list_ex_pledge__list__pointer_value l1)))
                            (- n1 1)))))) :pattern ((get_nth_val l1 n1)) ))))

(define-fun default_initial_assumption ((temp___expr_163 us_rep)
  (temp___skip_top_level_164 Bool)) Bool (= (rec__list_ex_pledge__list__is_null_pointer
                                            temp___expr_163) true))

(define-fun default_initial_assumption1 ((temp___expr_170 us_rep1)
  (temp___skip_top_level_171 Bool)) Bool (= (rec__list_ex_pledge__list__is_null_pointer
                                            (rec__list_ex_pledge__list_cell__next
                                            (us_split_fields1
                                            temp___expr_170))) true))

;; length_aux__def_axiom
  (assert
  (forall ((l1 us_rep))
  (! (=> (length_aux__function_guard (length_aux l1) l1)
     (and
     (forall ((l2 us_rep)) (length_aux__function_guard
     (length_aux
     (rec__list_ex_pledge__list_cell__next
     (us_split_fields1 (rec__list_ex_pledge__list__pointer_value l2))))
     (rec__list_ex_pledge__list_cell__next
     (us_split_fields1 (rec__list_ex_pledge__list__pointer_value l2)))))
     (and
     (forall ((l2 us_rep)) (length_aux__function_guard
     (length_aux
     (rec__list_ex_pledge__list_cell__next
     (us_split_fields1 (rec__list_ex_pledge__list__pointer_value l2))))
     (rec__list_ex_pledge__list_cell__next
     (us_split_fields1 (rec__list_ex_pledge__list__pointer_value l2)))))
     (= (length_aux l1) (ite (= (bool_eq l1 us_null_pointer) true) 0
                        (ite (= (length_aux
                                (rec__list_ex_pledge__list_cell__next
                                (us_split_fields1
                                (rec__list_ex_pledge__list__pointer_value l1)))) 2147483647)
                        2147483647
                        (+ 1 (length_aux
                             (rec__list_ex_pledge__list_cell__next
                             (us_split_fields1
                             (rec__list_ex_pledge__list__pointer_value l1))))))))))) :pattern (
  (length_aux l1)) )))

;; length_aux__post_axiom
  (assert
  (forall ((l1 us_rep))
  (! (let ((result (length_aux l1)))
     (=> (length_aux__function_guard result l1) (dynamic_invariant1 result
     true false true true))) :pattern ((length_aux l1)) )))

;; Assume
  (assert (dynamic_invariant n true false true true))

;; H
  (assert (length__function_guard (length l) l))

;; Assume
  (assert (<= n (length l)))

;; H
  (assert (= n 1))

(assert
;; defqtvc
 ;; File "list_ex_pledge.ads", line 18, characters 0-0
  (not (rec__list_ex_pledge__list__pointer_value__pred l)))
(check-sat)

(exit)
