(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort message_index 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x0F)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 15)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (message_index message_index) Bool)

(declare-const dummy2 message_index)

(declare-datatypes ()
((message_index__ref
 (message_index__refqtmk (message_index__content message_index)))))
(define-fun message_index__ref_message_index__content__projection ((a message_index__ref)) message_index 
  (message_index__content a))

(declare-sort message_count 0)

(declare-fun message_countqtint (message_count) Int)

;; message_count'axiom
  (assert
  (forall ((i message_count))
  (and (<= 0 (message_countqtint i)) (<= (message_countqtint i) 16))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (message_count message_count) Bool)

(declare-const dummy3 message_count)

(declare-datatypes ()
((message_count__ref
 (message_count__refqtmk (message_count__content message_count)))))
(define-fun message_count__ref_message_count__content__projection ((a message_count__ref)) message_count 
  (message_count__content a))

(define-fun to_rep1 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__core__message_record__value integer)(rec__core__message_record__size natural)))))
(define-fun us_split_fields_rec__core__message_record__value__projection ((a us_split_fields)) integer 
  (rec__core__message_record__value a))

(define-fun us_split_fields_rec__core__message_record__size__projection ((a us_split_fields)) natural 
  (rec__core__message_record__size a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__core__message_record__value
                           (us_split_fields1 a))) (to_rep
                                                  (rec__core__message_record__value
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__core__message_record__size
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__core__message_record__size
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const core__message_record__value__first__bit Int)

(declare-const core__message_record__value__last__bit Int)

(declare-const core__message_record__value__position Int)

;; core__message_record__value__first__bit_axiom
  (assert (<= 0 core__message_record__value__first__bit))

;; core__message_record__value__last__bit_axiom
  (assert
  (< core__message_record__value__first__bit core__message_record__value__last__bit))

;; core__message_record__value__position_axiom
  (assert (<= 0 core__message_record__value__position))

(declare-const core__message_record__size__first__bit Int)

(declare-const core__message_record__size__last__bit Int)

(declare-const core__message_record__size__position Int)

;; core__message_record__size__first__bit_axiom
  (assert (<= 0 core__message_record__size__first__bit))

;; core__message_record__size__last__bit_axiom
  (assert
  (< core__message_record__size__first__bit core__message_record__size__last__bit))

;; core__message_record__size__position_axiom
  (assert (<= 0 core__message_record__size__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((message_record__ref
 (message_record__refqtmk (message_record__content us_rep)))))
(define-fun message_record__ref_message_record__content__projection ((a message_record__ref)) us_rep 
  (message_record__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array (_ BitVec 8) us_rep))))))
(declare-fun slide ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_154 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_154)
                                    (bvule temp___idx_154 a__last))
                                    (= (bool_eq (select a temp___idx_154)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (bvadd (bvsub b__first a__first) temp___idx_154))) true))))))))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__core__mailboxT__messages (Array (_ BitVec 8) us_rep))(rec__core__mailboxT__next_in message_index)(rec__core__mailboxT__next_out message_index)(rec__core__mailboxT__count message_count)))))
(define-fun us_split_fields_rec__core__mailboxT__messages__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep) 
  (rec__core__mailboxT__messages a))

(define-fun us_split_fields_rec__core__mailboxT__next_in__projection ((a us_split_fields2)) message_index 
  (rec__core__mailboxT__next_in a))

(define-fun us_split_fields_rec__core__mailboxT__next_out__projection ((a us_split_fields2)) message_index 
  (rec__core__mailboxT__next_out a))

(define-fun us_split_fields_rec__core__mailboxT__count__projection ((a us_split_fields2)) message_count 
  (rec__core__mailboxT__count a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const core__mailboxT__messages__first__bit Int)

(declare-const core__mailboxT__messages__last__bit Int)

(declare-const core__mailboxT__messages__position Int)

;; core__mailboxT__messages__first__bit_axiom
  (assert (<= 0 core__mailboxT__messages__first__bit))

;; core__mailboxT__messages__last__bit_axiom
  (assert
  (< core__mailboxT__messages__first__bit core__mailboxT__messages__last__bit))

;; core__mailboxT__messages__position_axiom
  (assert (<= 0 core__mailboxT__messages__position))

(declare-const core__mailboxT__next_in__first__bit Int)

(declare-const core__mailboxT__next_in__last__bit Int)

(declare-const core__mailboxT__next_in__position Int)

;; core__mailboxT__next_in__first__bit_axiom
  (assert (<= 0 core__mailboxT__next_in__first__bit))

;; core__mailboxT__next_in__last__bit_axiom
  (assert
  (< core__mailboxT__next_in__first__bit core__mailboxT__next_in__last__bit))

;; core__mailboxT__next_in__position_axiom
  (assert (<= 0 core__mailboxT__next_in__position))

(declare-const core__mailboxT__next_out__first__bit Int)

(declare-const core__mailboxT__next_out__last__bit Int)

(declare-const core__mailboxT__next_out__position Int)

;; core__mailboxT__next_out__first__bit_axiom
  (assert (<= 0 core__mailboxT__next_out__first__bit))

;; core__mailboxT__next_out__last__bit_axiom
  (assert
  (< core__mailboxT__next_out__first__bit core__mailboxT__next_out__last__bit))

;; core__mailboxT__next_out__position_axiom
  (assert (<= 0 core__mailboxT__next_out__position))

(declare-const core__mailboxT__count__first__bit Int)

(declare-const core__mailboxT__count__last__bit Int)

(declare-const core__mailboxT__count__position Int)

;; core__mailboxT__count__first__bit_axiom
  (assert (<= 0 core__mailboxT__count__first__bit))

;; core__mailboxT__count__last__bit_axiom
  (assert
  (< core__mailboxT__count__first__bit core__mailboxT__count__last__bit))

;; core__mailboxT__count__position_axiom
  (assert (<= 0 core__mailboxT__count__position))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-datatypes ()
((mailboxT__ref (mailboxT__refqtmk (mailboxT__content us_rep1)))))
(define-fun mailboxT__ref_mailboxT__content__projection ((a mailboxT__ref)) us_rep1 
  (mailboxT__content a))

(declare-fun item_count (us_rep1) Int)

(declare-fun item_count__function_guard (Int us_rep1) Bool)

(declare-fun to_rep2 (message_index) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) message_index)

;; inversion_axiom
  (assert
  (forall ((x message_index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x message_index)) (! (in_range2
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x10)))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int2 ((x message_index)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x message_index)) (! (in_range_int
  (to_int2 x)) :pattern ((to_int2 x)) )))

(define-fun to_rep3 ((x message_count)) Int (message_countqtint x))

(declare-fun of_rep3 (Int) message_count)

;; inversion_axiom
  (assert
  (forall ((x message_count))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x message_count)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-fun temp_____aggregate_def_220 (us_rep) (Array (_ BitVec 8) us_rep))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

(declare-const rliteral1 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral1) 0))

(define-fun default_initial_assumption ((temp___expr_218 us_rep1)
  (temp___skip_top_level_219 Bool)) Bool (and
                                         (and
                                         (= (rec__core__mailboxT__messages
                                            (us_split_fields3
                                            temp___expr_218)) (temp_____aggregate_def_220
                                                              (us_repqtmk
                                                              (us_split_fieldsqtmk
                                                              rliteral
                                                              rliteral1))))
                                         (= (to_rep2
                                            (rec__core__mailboxT__next_in
                                            (us_split_fields3
                                            temp___expr_218))) #x00))
                                         (and
                                         (= (to_rep2
                                            (rec__core__mailboxT__next_out
                                            (us_split_fields3
                                            temp___expr_218))) #x00)
                                         (= (to_rep3
                                            (rec__core__mailboxT__count
                                            (us_split_fields3
                                            temp___expr_218))) 0))))

(define-fun dynamic_invariant1 ((temp___expr_167 Int)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (<= 0 16)) (in_range3 temp___expr_167)))

;; item_count__post_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (let ((result (item_count self__)))
     (=> (item_count__function_guard result self__) (dynamic_invariant1
     result true false true true))) :pattern ((item_count self__)) )))

;; item_count__def_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (= (item_count self__) (to_rep3
                            (rec__core__mailboxT__count
                            (us_split_fields3 self__)))) :pattern ((item_count
                                                                   self__)) )))

(declare-const n Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant3 ((temp___expr_160 (_ BitVec 8))
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (bvule #x00 #x0F)) (in_range2
                                     temp___expr_160)))

;; def_axiom
  (assert
  (forall ((temp___222 us_rep))
  (forall ((temp___223 (_ BitVec 8)))
  (= (select (temp_____aggregate_def_220 temp___222) temp___223) temp___222))))

(declare-const self__ us_split_fields2)

;; Assume
  (assert (dynamic_invariant n true false true true))

;; Assume
  (assert true)

(declare-const self__1 us_split_fields2)

(declare-const o Int)

;; Ensures
  (assert (= (to_rep3 (rec__core__mailboxT__count self__)) o))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (< o 16) true false)))

(declare-const o1 (_ BitVec 8))

(declare-const o2 integer)

(declare-const o3 (_ BitVec 8))

(declare-const self__2 us_split_fields2)

(declare-const o4 (_ BitVec 8))

(declare-const o5 (_ BitVec 8))

(declare-const self__3 us_split_fields2)

(declare-const o6 (_ BitVec 8))

(declare-const o7 message_index)

(declare-const self__4 us_split_fields2)

(declare-const o8 Int)

(declare-const o9 message_count)

;; H
  (assert
  (ite (= spark__branch true)
  (and (= (to_rep2 (rec__core__mailboxT__next_in self__)) o1)
  (and (= (to_rep o2) n)
  (and (= (to_rep2 (rec__core__mailboxT__next_in self__)) o3)
  (and
  (= self__2 (us_split_fieldsqtmk1
             (store (rec__core__mailboxT__messages self__) o3 (us_repqtmk
                                                              (us_split_fieldsqtmk
                                                              o2
                                                              (rec__core__message_record__size
                                                              (us_split_fields1
                                                              (select 
                                                              (rec__core__mailboxT__messages
                                                              self__) 
                                                              o1))))))
             (rec__core__mailboxT__next_in self__)
             (rec__core__mailboxT__next_out self__)
             (rec__core__mailboxT__count self__)))
  (and (= (to_rep2 (rec__core__mailboxT__next_in self__2)) o4)
  (and (= (to_rep2 (rec__core__mailboxT__next_in self__2)) o5)
  (and
  (= self__3 (us_split_fieldsqtmk1
             (store (rec__core__mailboxT__messages self__2) o5 (us_repqtmk
                                                               (us_split_fieldsqtmk
                                                               (rec__core__message_record__value
                                                               (us_split_fields1
                                                               (select 
                                                               (rec__core__mailboxT__messages
                                                               self__2) 
                                                               o4)))
                                                               rliteral1)))
             (rec__core__mailboxT__next_in self__2)
             (rec__core__mailboxT__next_out self__2)
             (rec__core__mailboxT__count self__2)))
  (and (= (to_rep2 (rec__core__mailboxT__next_in self__3)) o6)
  (and (= (to_rep2 o7) (bvurem (bvadd o6 #x01) #x10))
  (and
  (= self__4 (us_split_fieldsqtmk1 (rec__core__mailboxT__messages self__3) 
             o7 (rec__core__mailboxT__next_out self__3)
             (rec__core__mailboxT__count self__3)))
  (and (= (to_rep3 (rec__core__mailboxT__count self__4)) o8)
  (let ((o10 (+ o8 1)))
  (and (in_range3 o10)
  (and (= (to_rep3 o9) o10)
  (= self__1 (us_split_fieldsqtmk1 (rec__core__mailboxT__messages self__4)
             (rec__core__mailboxT__next_in self__4)
             (rec__core__mailboxT__next_out self__4) o9))))))))))))))))
  (= self__1 self__)))

;; H
  (assert
  (forall ((self__5 us_split_fields2)) (item_count__function_guard
  (item_count (us_repqtmk1 self__5)) (us_repqtmk1 self__5))))

(assert
;; defqtvc
 ;; File "core.ads", line 29, characters 0-0
  (not (< 0 (item_count (us_repqtmk1 self__1)))))
(check-sat)

(exit)
