(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__split_records__record_with_mutable_discrs__present Bool)))))
(define-fun us_split_discrs_rec__split_records__record_with_mutable_discrs__present__projection ((a us_split_discrs)) Bool 
  (rec__split_records__record_with_mutable_discrs__present a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__split_records__record_with_mutable_discrs__field natural)))))
(define-fun us_split_fields_rec__split_records__record_with_mutable_discrs__field__projection ((a us_split_fields)) natural 
  (rec__split_records__record_with_mutable_discrs__field a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun split_records__record_with_mutable_discrs__field__pred ((a us_rep)) Bool (= (ite 
  (rec__split_records__record_with_mutable_discrs__present
  (us_split_discrs1 a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__split_records__record_with_mutable_discrs__present
                                (us_split_discrs1 a)) 1 0) (ite (rec__split_records__record_with_mutable_discrs__present
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=>
                        (split_records__record_with_mutable_discrs__field__pred
                        a)
                        (= (to_rep
                           (rec__split_records__record_with_mutable_discrs__field
                           (us_split_fields1 a))) (to_rep
                                                  (rec__split_records__record_with_mutable_discrs__field
                                                  (us_split_fields1 b))))))
                   true false))

(define-fun in_range2 ((rec__split_records__record_with_mutable_discrs__present1 Bool)
  (a us_split_discrs)) Bool (= rec__split_records__record_with_mutable_discrs__present1 
  (rec__split_records__record_with_mutable_discrs__present a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const split_records__record_with_mutable_discrs__present__first__bit Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit Int)

(declare-const split_records__record_with_mutable_discrs__present__position Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit split_records__record_with_mutable_discrs__present__last__bit))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position))

(declare-const split_records__record_with_mutable_discrs__field__first__bit Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit Int)

(declare-const split_records__record_with_mutable_discrs__field__position Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit split_records__record_with_mutable_discrs__field__last__bit))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((record_with_mutable_discrs__ref
 (record_with_mutable_discrs__refqtmk
 (record_with_mutable_discrs__content us_rep)))))
(define-fun record_with_mutable_discrs__ref_record_with_mutable_discrs__content__projection ((a record_with_mutable_discrs__ref)) us_rep 
  (record_with_mutable_discrs__content a))

(define-fun default_initial_assumption ((temp___expr_164 us_rep)
  (temp___skip_top_level_165 Bool)) Bool (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            temp___expr_164)) (distinct 0 0)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const split_records__record_with_mutable_discrs__present__first__bit1 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit1 Int)

(declare-const split_records__record_with_mutable_discrs__present__position1 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit1))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit1 
  split_records__record_with_mutable_discrs__present__last__bit1))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position1))

(declare-const split_records__record_with_mutable_discrs__field__first__bit1 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit1 Int)

(declare-const split_records__record_with_mutable_discrs__field__position1 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit1))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit1 split_records__record_with_mutable_discrs__field__last__bit1))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((tc1S__ref (tc1S__refqtmk (tc1S__content us_rep)))))
(define-fun tc1S__ref_tc1S__content__projection ((a tc1S__ref)) us_rep 
  (tc1S__content a))

(declare-const c1__split_discrs us_split_discrs)

(declare-const c1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_199 us_rep)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (=>
                                     (not (= temp___skip_constant_196 true))
                                     (in_range2 (distinct 0 0)
                                     (us_split_discrs1 temp___expr_199))))

(define-fun default_initial_assumption1 ((temp___expr_201 us_rep)
  (temp___skip_top_level_202 Bool)) Bool (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            temp___expr_201)) (distinct 0 0)))

(declare-const c2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const split_records__record_with_mutable_discrs__present__first__bit2 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit2 Int)

(declare-const split_records__record_with_mutable_discrs__present__position2 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit2))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit2 
  split_records__record_with_mutable_discrs__present__last__bit2))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position2))

(declare-const split_records__record_with_mutable_discrs__field__first__bit2 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit2 Int)

(declare-const split_records__record_with_mutable_discrs__field__position2 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit2))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit2 split_records__record_with_mutable_discrs__field__last__bit2))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((t1s__ref (t1s__refqtmk (t1s__content us_rep)))))
(define-fun t1s__ref_t1s__content__projection ((a t1s__ref)) us_rep (t1s__content
                                                                    a))

(declare-datatypes ()
((us_split_discrs2
 (us_split_discrsqtmk1 (rec__split_records__holder__present Bool)))))
(define-fun us_split_discrs_rec__split_records__holder__present__projection ((a us_split_discrs2)) Bool 
  (rec__split_records__holder__present a))

(declare-datatypes ()
((us_split_discrs__ref1
 (us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1 (rec__split_records__holder__content us_rep)))))
(define-fun us_split_fields_rec__split_records__holder__content__projection ((a us_split_fields2)) us_rep 
  (rec__split_records__holder__content a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (us_repqtmk1
 (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (ite (rec__split_records__holder__present
                                 (us_split_discrs3 a)) 1 0) (ite (rec__split_records__holder__present
                                                                 (us_split_discrs3
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__split_records__holder__content
                            (us_split_fields3 a))
                            (rec__split_records__holder__content
                            (us_split_fields3 b))) true))
                    true false))

(define-fun in_range3 ((rec__split_records__holder__present1 Bool)
  (a us_split_discrs2)) Bool (= rec__split_records__holder__present1 
  (rec__split_records__holder__present a)))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const split_records__holder__present__first__bit Int)

(declare-const split_records__holder__present__last__bit Int)

(declare-const split_records__holder__present__position Int)

;; split_records__holder__present__first__bit_axiom
  (assert (<= 0 split_records__holder__present__first__bit))

;; split_records__holder__present__last__bit_axiom
  (assert
  (< split_records__holder__present__first__bit split_records__holder__present__last__bit))

;; split_records__holder__present__position_axiom
  (assert (<= 0 split_records__holder__present__position))

(declare-const split_records__holder__content__first__bit Int)

(declare-const split_records__holder__content__last__bit Int)

(declare-const split_records__holder__content__position Int)

;; split_records__holder__content__first__bit_axiom
  (assert (<= 0 split_records__holder__content__first__bit))

;; split_records__holder__content__last__bit_axiom
  (assert
  (< split_records__holder__content__first__bit split_records__holder__content__last__bit))

;; split_records__holder__content__position_axiom
  (assert (<= 0 split_records__holder__content__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((holder__ref (holder__refqtmk (holder__content us_rep1)))))
(define-fun holder__ref_holder__content__projection ((a holder__ref)) us_rep1 
  (holder__content a))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const split_records__record_with_mutable_discrs__present__first__bit3 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit3 Int)

(declare-const split_records__record_with_mutable_discrs__present__position3 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit3))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit3 
  split_records__record_with_mutable_discrs__present__last__bit3))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position3))

(declare-const split_records__record_with_mutable_discrs__field__first__bit3 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit3 Int)

(declare-const split_records__record_with_mutable_discrs__field__position3 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit3))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit3 split_records__record_with_mutable_discrs__field__last__bit3))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position3))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((t5b__ref (t5b__refqtmk (t5b__content us_rep)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) us_rep (t5b__content
                                                                    a))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2 (rec__split_records__holder__content1 us_rep)))))
(define-fun us_split_fields_rec__split_records__holder__content__2__projection ((a us_split_fields4)) us_rep 
  (rec__split_records__holder__content1 a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (us_repqtmk2
 (us_split_discrs4 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs2 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base ((a us_rep2)) us_rep1 (us_repqtmk1 (us_split_discrs4 a)
                                          (us_split_fieldsqtmk1
                                          (rec__split_records__holder__content1
                                          (us_split_fields5 a)))))

(define-fun of_base ((r us_rep1)) us_rep2 (us_repqtmk2 (us_split_discrs3 r)
                                          (us_split_fieldsqtmk2
                                          (rec__split_records__holder__content
                                          (us_split_fields3 r)))))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (ite (rec__split_records__holder__present
                                 (us_split_discrs4 a)) 1 0) (ite (rec__split_records__holder__present
                                                                 (us_split_discrs4
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__split_records__holder__content1
                            (us_split_fields5 a))
                            (rec__split_records__holder__content1
                            (us_split_fields5 b))) true))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const split_records__holder__present__first__bit1 Int)

(declare-const split_records__holder__present__last__bit1 Int)

(declare-const split_records__holder__present__position1 Int)

;; split_records__holder__present__first__bit_axiom
  (assert (<= 0 split_records__holder__present__first__bit1))

;; split_records__holder__present__last__bit_axiom
  (assert
  (< split_records__holder__present__first__bit1 split_records__holder__present__last__bit1))

;; split_records__holder__present__position_axiom
  (assert (<= 0 split_records__holder__present__position1))

(declare-const split_records__holder__content__first__bit1 Int)

(declare-const split_records__holder__content__last__bit1 Int)

(declare-const split_records__holder__content__position1 Int)

;; split_records__holder__content__first__bit_axiom
  (assert (<= 0 split_records__holder__content__first__bit1))

;; split_records__holder__content__last__bit_axiom
  (assert
  (< split_records__holder__content__first__bit1 split_records__holder__content__last__bit1))

;; split_records__holder__content__position_axiom
  (assert (<= 0 split_records__holder__content__position1))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-const dummy6 us_rep2)

(declare-datatypes () ((th1S__ref (th1S__refqtmk (th1S__content us_rep2)))))
(define-fun th1S__ref_th1S__content__projection ((a th1S__ref)) us_rep2 
  (th1S__content a))

(declare-const h1__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_209 us_rep2)
  (temp___is_init_205 Bool) (temp___skip_constant_206 Bool)
  (temp___do_toplevel_207 Bool)
  (temp___do_typ_inv_208 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_206 true))
                                     (in_range3 (distinct 0 0)
                                     (us_split_discrs3
                                     (to_base temp___expr_209)))) (in_range2
                                     (distinct 0 0)
                                     (us_split_discrs1
                                     (rec__split_records__holder__content1
                                     (us_split_fields5 temp___expr_209))))))

(define-fun default_initial_assumption2 ((temp___expr_212 us_rep2)
  (temp___skip_top_level_213 Bool)) Bool (and
                                         (= (rec__split_records__holder__present
                                            (us_split_discrs4
                                            temp___expr_212)) (distinct 0 0))
                                         (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (rec__split_records__holder__content1
                                            (us_split_fields5
                                            temp___expr_212)))) (distinct 0 0))))

(declare-datatypes ()
((us_split_fields6
 (us_split_fieldsqtmk3 (rec__split_records__mutable_holder__content us_rep)))))
(define-fun us_split_fields_rec__split_records__mutable_holder__content__projection ((a us_split_fields6)) us_rep 
  (rec__split_records__mutable_holder__content a))

(declare-datatypes ()
((us_split_fields__ref3
 (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq3 ((a us_rep3)
  (b us_rep3)) Bool (ite (= (bool_eq
                            (rec__split_records__mutable_holder__content
                            (us_split_fields7 a))
                            (rec__split_records__mutable_holder__content
                            (us_split_fields7 b))) true)
                    true false))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const split_records__mutable_holder__content__first__bit Int)

(declare-const split_records__mutable_holder__content__last__bit Int)

(declare-const split_records__mutable_holder__content__position Int)

;; split_records__mutable_holder__content__first__bit_axiom
  (assert (<= 0 split_records__mutable_holder__content__first__bit))

;; split_records__mutable_holder__content__last__bit_axiom
  (assert
  (< split_records__mutable_holder__content__first__bit split_records__mutable_holder__content__last__bit))

;; split_records__mutable_holder__content__position_axiom
  (assert (<= 0 split_records__mutable_holder__content__position))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ()
((mutable_holder__ref
 (mutable_holder__refqtmk (mutable_holder__content us_rep3)))))
(define-fun mutable_holder__ref_mutable_holder__content__projection ((a mutable_holder__ref)) us_rep3 
  (mutable_holder__content a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun default_initial_assumption3 ((temp___expr_174 us_rep3)
  (temp___skip_top_level_175 Bool)) Bool (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (rec__split_records__mutable_holder__content
                                            (us_split_fields7
                                            temp___expr_174)))) (distinct 0 0)))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const split_records__record_with_mutable_discrs__present__first__bit4 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit4 Int)

(declare-const split_records__record_with_mutable_discrs__present__position4 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit4))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit4 
  split_records__record_with_mutable_discrs__present__last__bit4))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position4))

(declare-const split_records__record_with_mutable_discrs__field__first__bit4 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit4 Int)

(declare-const split_records__record_with_mutable_discrs__field__position4 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit4))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit4 split_records__record_with_mutable_discrs__field__last__bit4))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position4))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes () ((tc3S__ref (tc3S__refqtmk (tc3S__content us_rep)))))
(define-fun tc3S__ref_tc3S__content__projection ((a tc3S__ref)) us_rep 
  (tc3S__content a))

(declare-const c3 us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-const split_records__record_with_mutable_discrs__present__first__bit5 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit5 Int)

(declare-const split_records__record_with_mutable_discrs__present__position5 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit5))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit5 
  split_records__record_with_mutable_discrs__present__last__bit5))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position5))

(declare-const split_records__record_with_mutable_discrs__field__first__bit5 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit5 Int)

(declare-const split_records__record_with_mutable_discrs__field__position5 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit5))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit5 split_records__record_with_mutable_discrs__field__last__bit5))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position5))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes () ((t14b__ref (t14b__refqtmk (t14b__content us_rep)))))
(define-fun t14b__ref_t14b__content__projection ((a t14b__ref)) us_rep 
  (t14b__content a))

(declare-const c4 us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const split_records__record_with_mutable_discrs__present__first__bit6 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit6 Int)

(declare-const split_records__record_with_mutable_discrs__present__position6 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit6))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit6 
  split_records__record_with_mutable_discrs__present__last__bit6))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position6))

(declare-const split_records__record_with_mutable_discrs__field__first__bit6 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit6 Int)

(declare-const split_records__record_with_mutable_discrs__field__position6 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit6))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit6 split_records__record_with_mutable_discrs__field__last__bit6))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position6))

(declare-fun user_eq10 (us_rep us_rep) Bool)

(declare-const dummy10 us_rep)

(declare-datatypes () ((t15b__ref (t15b__refqtmk (t15b__content us_rep)))))
(define-fun t15b__ref_t15b__content__projection ((a t15b__ref)) us_rep 
  (t15b__content a))

(declare-datatypes ()
((us_split_fields8
 (us_split_fieldsqtmk4 (rec__split_records__holder__content2 us_rep)))))
(define-fun us_split_fields_rec__split_records__holder__content__4__projection ((a us_split_fields8)) us_rep 
  (rec__split_records__holder__content2 a))

(declare-datatypes ()
((us_split_fields__ref4
 (us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4
 (us_repqtmk4
 (us_split_discrs5 us_split_discrs2)(us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep4)) us_split_discrs2 
  (us_split_discrs5 a))

(define-fun us_rep___split_fields__6__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun to_base1 ((a us_rep4)) us_rep1 (us_repqtmk1 (us_split_discrs5 a)
                                           (us_split_fieldsqtmk1
                                           (rec__split_records__holder__content2
                                           (us_split_fields9 a)))))

(define-fun of_base1 ((r us_rep1)) us_rep4 (us_repqtmk4 (us_split_discrs3 r)
                                           (us_split_fieldsqtmk4
                                           (rec__split_records__holder__content
                                           (us_split_fields3 r)))))

(define-fun bool_eq5 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (ite (rec__split_records__holder__present
                                 (us_split_discrs5 a)) 1 0) (ite (rec__split_records__holder__present
                                                                 (us_split_discrs5
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__split_records__holder__content2
                            (us_split_fields9 a))
                            (rec__split_records__holder__content2
                            (us_split_fields9 b))) true))
                    true false))

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (<= 0 object__size10))

;; alignment_axiom
  (assert (<= 0 alignment10))

(declare-const split_records__holder__present__first__bit2 Int)

(declare-const split_records__holder__present__last__bit2 Int)

(declare-const split_records__holder__present__position2 Int)

;; split_records__holder__present__first__bit_axiom
  (assert (<= 0 split_records__holder__present__first__bit2))

;; split_records__holder__present__last__bit_axiom
  (assert
  (< split_records__holder__present__first__bit2 split_records__holder__present__last__bit2))

;; split_records__holder__present__position_axiom
  (assert (<= 0 split_records__holder__present__position2))

(declare-const split_records__holder__content__first__bit2 Int)

(declare-const split_records__holder__content__last__bit2 Int)

(declare-const split_records__holder__content__position2 Int)

;; split_records__holder__content__first__bit_axiom
  (assert (<= 0 split_records__holder__content__first__bit2))

;; split_records__holder__content__last__bit_axiom
  (assert
  (< split_records__holder__content__first__bit2 split_records__holder__content__last__bit2))

;; split_records__holder__content__position_axiom
  (assert (<= 0 split_records__holder__content__position2))

(declare-fun user_eq11 (us_rep4 us_rep4) Bool)

(declare-const dummy11 us_rep4)

(declare-datatypes () ((th3S__ref (th3S__refqtmk (th3S__content us_rep4)))))
(define-fun th3S__ref_th3S__content__projection ((a th3S__ref)) us_rep4 
  (th3S__content a))

(declare-const h3 us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const h4 us_rep3)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const a2 (Array Int us_rep))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const alignment11 Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (<= 0 object__size11))

;; alignment_axiom
  (assert (<= 0 alignment11))

(declare-const split_records__record_with_mutable_discrs__present__first__bit7 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit7 Int)

(declare-const split_records__record_with_mutable_discrs__present__position7 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit7))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit7 
  split_records__record_with_mutable_discrs__present__last__bit7))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position7))

(declare-const split_records__record_with_mutable_discrs__field__first__bit7 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit7 Int)

(declare-const split_records__record_with_mutable_discrs__field__position7 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit7))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit7 split_records__record_with_mutable_discrs__field__last__bit7))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position7))

(declare-fun user_eq12 (us_rep us_rep) Bool)

(declare-const dummy12 us_rep)

(declare-datatypes () ((t4b__ref (t4b__refqtmk (t4b__content us_rep)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_rep (t4b__content
                                                                    a))

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const alignment12 Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (<= 0 object__size12))

;; alignment_axiom
  (assert (<= 0 alignment12))

(declare-const split_records__record_with_mutable_discrs__present__first__bit8 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit8 Int)

(declare-const split_records__record_with_mutable_discrs__present__position8 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit8))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit8 
  split_records__record_with_mutable_discrs__present__last__bit8))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position8))

(declare-const split_records__record_with_mutable_discrs__field__first__bit8 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit8 Int)

(declare-const split_records__record_with_mutable_discrs__field__position8 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit8))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit8 split_records__record_with_mutable_discrs__field__last__bit8))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position8))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes () ((t7b__ref (t7b__refqtmk (t7b__content us_rep)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) us_rep (t7b__content
                                                                    a))

(declare-datatypes ()
((us_split_fields10
 (us_split_fieldsqtmk5 (rec__split_records__holder__content3 us_rep)))))
(define-fun us_split_fields_rec__split_records__holder__content__3__projection ((a us_split_fields10)) us_rep 
  (rec__split_records__holder__content3 a))

(declare-datatypes ()
((us_split_fields__ref5
 (us_split_fields__refqtmk5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5
 (us_repqtmk5
 (us_split_discrs6 us_split_discrs2)(us_split_fields11 us_split_fields10)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep5)) us_split_discrs2 
  (us_split_discrs6 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep5)) us_split_fields10 
  (us_split_fields11 a))

(define-fun to_base2 ((a us_rep5)) us_rep1 (us_repqtmk1 (us_split_discrs6 a)
                                           (us_split_fieldsqtmk1
                                           (rec__split_records__holder__content3
                                           (us_split_fields11 a)))))

(define-fun of_base2 ((r us_rep1)) us_rep5 (us_repqtmk5 (us_split_discrs3 r)
                                           (us_split_fieldsqtmk5
                                           (rec__split_records__holder__content
                                           (us_split_fields3 r)))))

(define-fun bool_eq6 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (ite (rec__split_records__holder__present
                                 (us_split_discrs6 a)) 1 0) (ite (rec__split_records__holder__present
                                                                 (us_split_discrs6
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__split_records__holder__content3
                            (us_split_fields11 a))
                            (rec__split_records__holder__content3
                            (us_split_fields11 b))) true))
                    true false))

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const alignment13 Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (<= 0 object__size13))

;; alignment_axiom
  (assert (<= 0 alignment13))

(declare-const split_records__holder__present__first__bit3 Int)

(declare-const split_records__holder__present__last__bit3 Int)

(declare-const split_records__holder__present__position3 Int)

;; split_records__holder__present__first__bit_axiom
  (assert (<= 0 split_records__holder__present__first__bit3))

;; split_records__holder__present__last__bit_axiom
  (assert
  (< split_records__holder__present__first__bit3 split_records__holder__present__last__bit3))

;; split_records__holder__present__position_axiom
  (assert (<= 0 split_records__holder__present__position3))

(declare-const split_records__holder__content__first__bit3 Int)

(declare-const split_records__holder__content__last__bit3 Int)

(declare-const split_records__holder__content__position3 Int)

;; split_records__holder__content__first__bit_axiom
  (assert (<= 0 split_records__holder__content__first__bit3))

;; split_records__holder__content__last__bit_axiom
  (assert
  (< split_records__holder__content__first__bit3 split_records__holder__content__last__bit3))

;; split_records__holder__content__position_axiom
  (assert (<= 0 split_records__holder__content__position3))

(declare-fun user_eq14 (us_rep5 us_rep5) Bool)

(declare-const dummy14 us_rep5)

(declare-datatypes () ((t6b__ref (t6b__refqtmk (t6b__content us_rep5)))))
(define-fun t6b__ref_t6b__content__projection ((a t6b__ref)) us_rep5 
  (t6b__content a))

(declare-const value__size14 Int)

(declare-const object__size14 Int)

(declare-const alignment14 Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (<= 0 object__size14))

;; alignment_axiom
  (assert (<= 0 alignment14))

(declare-const split_records__record_with_mutable_discrs__present__first__bit9 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit9 Int)

(declare-const split_records__record_with_mutable_discrs__present__position9 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit9))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit9 
  split_records__record_with_mutable_discrs__present__last__bit9))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position9))

(declare-const split_records__record_with_mutable_discrs__field__first__bit9 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit9 Int)

(declare-const split_records__record_with_mutable_discrs__field__position9 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit9))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit9 split_records__record_with_mutable_discrs__field__last__bit9))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert (<= 0 split_records__record_with_mutable_discrs__field__position9))

(declare-fun user_eq15 (us_rep us_rep) Bool)

(declare-const dummy15 us_rep)

(declare-datatypes () ((t8b__ref (t8b__refqtmk (t8b__content us_rep)))))
(define-fun t8b__ref_t8b__content__projection ((a t8b__ref)) us_rep (t8b__content
                                                                    a))

(declare-const value__size15 Int)

(declare-const object__size15 Int)

(declare-const alignment15 Int)

;; value__size_axiom
  (assert (<= 0 value__size15))

;; object__size_axiom
  (assert (<= 0 object__size15))

;; alignment_axiom
  (assert (<= 0 alignment15))

(declare-const split_records__record_with_mutable_discrs__present__first__bit10 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit10 Int)

(declare-const split_records__record_with_mutable_discrs__present__position10 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit10))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit10 
  split_records__record_with_mutable_discrs__present__last__bit10))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position10))

(declare-const split_records__record_with_mutable_discrs__field__first__bit10 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit10 Int)

(declare-const split_records__record_with_mutable_discrs__field__position10 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit10))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit10 split_records__record_with_mutable_discrs__field__last__bit10))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position10))

(declare-fun user_eq16 (us_rep us_rep) Bool)

(declare-const dummy16 us_rep)

(declare-datatypes () ((t9b__ref (t9b__refqtmk (t9b__content us_rep)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) us_rep (t9b__content
                                                                    a))

(declare-sort tTaSP1 0)

(declare-fun tTaSP1qtint (tTaSP1) Int)

;; tTaSP1'axiom
  (assert
  (forall ((i tTaSP1)) (and (<= 1 (tTaSP1qtint i)) (<= (tTaSP1qtint i) 1))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq17 (tTaSP1 tTaSP1) Bool)

(declare-const dummy17 tTaSP1)

(declare-datatypes ()
((tTaSP1__ref (tTaSP1__refqtmk (tTaSP1__content tTaSP1)))))
(define-fun tTaSP1__ref_tTaSP1__content__projection ((a tTaSP1__ref)) tTaSP1 
  (tTaSP1__content a))

(define-fun default_initial_assumption4 ((temp___expr_225 (Array Int us_rep))
  (temp___skip_top_level_226 Bool)) Bool (forall ((temp___227 Int))
                                         (=>
                                         (and (<= 1 temp___227)
                                         (<= temp___227 1))
                                         (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (select temp___expr_225 temp___227))) (distinct 0 0)))))

(declare-const value__size16 Int)

(declare-const object__size16 Int)

(declare-const alignment16 Int)

;; value__size_axiom
  (assert (<= 0 value__size16))

;; object__size_axiom
  (assert (<= 0 object__size16))

;; alignment_axiom
  (assert (<= 0 alignment16))

(declare-const split_records__record_with_mutable_discrs__present__first__bit11 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit11 Int)

(declare-const split_records__record_with_mutable_discrs__present__position11 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit11))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit11 
  split_records__record_with_mutable_discrs__present__last__bit11))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position11))

(declare-const split_records__record_with_mutable_discrs__field__first__bit11 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit11 Int)

(declare-const split_records__record_with_mutable_discrs__field__position11 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit11))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit11 split_records__record_with_mutable_discrs__field__last__bit11))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position11))

(declare-fun user_eq18 (us_rep us_rep) Bool)

(declare-const dummy18 us_rep)

(declare-datatypes () ((t10b__ref (t10b__refqtmk (t10b__content us_rep)))))
(define-fun t10b__ref_t10b__content__projection ((a t10b__ref)) us_rep 
  (t10b__content a))

(define-fun dynamic_invariant2 ((temp___expr_235 us_rep)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (not (= temp___skip_constant_232 true))
                                     (in_range2 (distinct 0 0)
                                     (us_split_discrs1 temp___expr_235))))

(define-fun default_initial_assumption5 ((temp___expr_237 us_rep)
  (temp___skip_top_level_238 Bool)) Bool (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            temp___expr_237)) (distinct 0 0)))

(declare-const value__size17 Int)

(declare-const object__size17 Int)

(declare-const alignment17 Int)

;; value__size_axiom
  (assert (<= 0 value__size17))

;; object__size_axiom
  (assert (<= 0 object__size17))

;; alignment_axiom
  (assert (<= 0 alignment17))

(declare-const split_records__record_with_mutable_discrs__present__first__bit12 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit12 Int)

(declare-const split_records__record_with_mutable_discrs__present__position12 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit12))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit12 
  split_records__record_with_mutable_discrs__present__last__bit12))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position12))

(declare-const split_records__record_with_mutable_discrs__field__first__bit12 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit12 Int)

(declare-const split_records__record_with_mutable_discrs__field__position12 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit12))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit12 split_records__record_with_mutable_discrs__field__last__bit12))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position12))

(declare-fun user_eq19 (us_rep us_rep) Bool)

(declare-const dummy19 us_rep)

(declare-datatypes () ((t13b__ref (t13b__refqtmk (t13b__content us_rep)))))
(define-fun t13b__ref_t13b__content__projection ((a t13b__ref)) us_rep 
  (t13b__content a))

(define-fun dynamic_invariant3 ((temp___expr_245 us_rep4)
  (temp___is_init_241 Bool) (temp___skip_constant_242 Bool)
  (temp___do_toplevel_243 Bool)
  (temp___do_typ_inv_244 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_242 true))
                                     (in_range3 (distinct 0 0)
                                     (us_split_discrs3
                                     (to_base1 temp___expr_245)))) (in_range2
                                     (distinct 0 0)
                                     (us_split_discrs1
                                     (rec__split_records__holder__content2
                                     (us_split_fields9 temp___expr_245))))))

(define-fun default_initial_assumption6 ((temp___expr_248 us_rep4)
  (temp___skip_top_level_249 Bool)) Bool (and
                                         (= (rec__split_records__holder__present
                                            (us_split_discrs5
                                            temp___expr_248)) (distinct 0 0))
                                         (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (rec__split_records__holder__content2
                                            (us_split_fields9
                                            temp___expr_248)))) (distinct 0 0))))

(declare-const value__size18 Int)

(declare-const object__size18 Int)

(declare-const alignment18 Int)

;; value__size_axiom
  (assert (<= 0 value__size18))

;; object__size_axiom
  (assert (<= 0 object__size18))

;; alignment_axiom
  (assert (<= 0 alignment18))

(declare-const split_records__record_with_mutable_discrs__present__first__bit13 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit13 Int)

(declare-const split_records__record_with_mutable_discrs__present__position13 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit13))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit13 
  split_records__record_with_mutable_discrs__present__last__bit13))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position13))

(declare-const split_records__record_with_mutable_discrs__field__first__bit13 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit13 Int)

(declare-const split_records__record_with_mutable_discrs__field__position13 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit13))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit13 split_records__record_with_mutable_discrs__field__last__bit13))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position13))

(declare-fun user_eq20 (us_rep us_rep) Bool)

(declare-const dummy20 us_rep)

(declare-datatypes () ((t17b__ref (t17b__refqtmk (t17b__content us_rep)))))
(define-fun t17b__ref_t17b__content__projection ((a t17b__ref)) us_rep 
  (t17b__content a))

(declare-datatypes ()
((us_split_fields12
 (us_split_fieldsqtmk6 (rec__split_records__holder__content4 us_rep)))))
(define-fun us_split_fields_rec__split_records__holder__content__5__projection ((a us_split_fields12)) us_rep 
  (rec__split_records__holder__content4 a))

(declare-datatypes ()
((us_split_fields__ref6
 (us_split_fields__refqtmk6 (us_split_fields__content6 us_split_fields12)))))
(define-fun us_split_fields__ref___split_fields__content__7__projection ((a us_split_fields__ref6)) us_split_fields12 
  (us_split_fields__content6 a))

(declare-datatypes ()
((us_rep6
 (us_repqtmk6
 (us_split_discrs7 us_split_discrs2)(us_split_fields13 us_split_fields12)))))
(define-fun us_rep___split_discrs__6__projection ((a us_rep6)) us_split_discrs2 
  (us_split_discrs7 a))

(define-fun us_rep___split_fields__7__projection ((a us_rep6)) us_split_fields12 
  (us_split_fields13 a))

(define-fun to_base3 ((a us_rep6)) us_rep1 (us_repqtmk1 (us_split_discrs7 a)
                                           (us_split_fieldsqtmk1
                                           (rec__split_records__holder__content4
                                           (us_split_fields13 a)))))

(define-fun of_base3 ((r us_rep1)) us_rep6 (us_repqtmk6 (us_split_discrs3 r)
                                           (us_split_fieldsqtmk6
                                           (rec__split_records__holder__content
                                           (us_split_fields3 r)))))

(define-fun bool_eq7 ((a us_rep6)
  (b us_rep6)) Bool (ite (and
                         (= (ite (rec__split_records__holder__present
                                 (us_split_discrs7 a)) 1 0) (ite (rec__split_records__holder__present
                                                                 (us_split_discrs7
                                                                 b)) 1 0))
                         (= (bool_eq
                            (rec__split_records__holder__content4
                            (us_split_fields13 a))
                            (rec__split_records__holder__content4
                            (us_split_fields13 b))) true))
                    true false))

(declare-const value__size19 Int)

(declare-const object__size19 Int)

(declare-const alignment19 Int)

;; value__size_axiom
  (assert (<= 0 value__size19))

;; object__size_axiom
  (assert (<= 0 object__size19))

;; alignment_axiom
  (assert (<= 0 alignment19))

(declare-const split_records__holder__present__first__bit4 Int)

(declare-const split_records__holder__present__last__bit4 Int)

(declare-const split_records__holder__present__position4 Int)

;; split_records__holder__present__first__bit_axiom
  (assert (<= 0 split_records__holder__present__first__bit4))

;; split_records__holder__present__last__bit_axiom
  (assert
  (< split_records__holder__present__first__bit4 split_records__holder__present__last__bit4))

;; split_records__holder__present__position_axiom
  (assert (<= 0 split_records__holder__present__position4))

(declare-const split_records__holder__content__first__bit4 Int)

(declare-const split_records__holder__content__last__bit4 Int)

(declare-const split_records__holder__content__position4 Int)

;; split_records__holder__content__first__bit_axiom
  (assert (<= 0 split_records__holder__content__first__bit4))

;; split_records__holder__content__last__bit_axiom
  (assert
  (< split_records__holder__content__first__bit4 split_records__holder__content__last__bit4))

;; split_records__holder__content__position_axiom
  (assert (<= 0 split_records__holder__content__position4))

(declare-fun user_eq21 (us_rep6 us_rep6) Bool)

(declare-const dummy21 us_rep6)

(declare-datatypes () ((t16b__ref (t16b__refqtmk (t16b__content us_rep6)))))
(define-fun t16b__ref_t16b__content__projection ((a t16b__ref)) us_rep6 
  (t16b__content a))

(declare-const value__size20 Int)

(declare-const object__size20 Int)

(declare-const alignment20 Int)

;; value__size_axiom
  (assert (<= 0 value__size20))

;; object__size_axiom
  (assert (<= 0 object__size20))

;; alignment_axiom
  (assert (<= 0 alignment20))

(declare-const split_records__record_with_mutable_discrs__present__first__bit14 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit14 Int)

(declare-const split_records__record_with_mutable_discrs__present__position14 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit14))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit14 
  split_records__record_with_mutable_discrs__present__last__bit14))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position14))

(declare-const split_records__record_with_mutable_discrs__field__first__bit14 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit14 Int)

(declare-const split_records__record_with_mutable_discrs__field__position14 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit14))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit14 split_records__record_with_mutable_discrs__field__last__bit14))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position14))

(declare-fun user_eq22 (us_rep us_rep) Bool)

(declare-const dummy22 us_rep)

(declare-datatypes () ((t18b__ref (t18b__refqtmk (t18b__content us_rep)))))
(define-fun t18b__ref_t18b__content__projection ((a t18b__ref)) us_rep 
  (t18b__content a))

(declare-const value__size21 Int)

(declare-const object__size21 Int)

(declare-const alignment21 Int)

;; value__size_axiom
  (assert (<= 0 value__size21))

;; object__size_axiom
  (assert (<= 0 object__size21))

;; alignment_axiom
  (assert (<= 0 alignment21))

(declare-const split_records__record_with_mutable_discrs__present__first__bit15 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit15 Int)

(declare-const split_records__record_with_mutable_discrs__present__position15 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit15))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit15 
  split_records__record_with_mutable_discrs__present__last__bit15))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position15))

(declare-const split_records__record_with_mutable_discrs__field__first__bit15 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit15 Int)

(declare-const split_records__record_with_mutable_discrs__field__position15 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit15))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit15 split_records__record_with_mutable_discrs__field__last__bit15))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position15))

(declare-fun user_eq23 (us_rep us_rep) Bool)

(declare-const dummy23 us_rep)

(declare-datatypes () ((t19b__ref (t19b__refqtmk (t19b__content us_rep)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) us_rep 
  (t19b__content a))

(declare-sort tTa2SP1 0)

(declare-fun tTa2SP1qtint (tTa2SP1) Int)

;; tTa2SP1'axiom
  (assert
  (forall ((i tTa2SP1))
  (and (<= 1 (tTa2SP1qtint i)) (<= (tTa2SP1qtint i) 1))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq24 (tTa2SP1 tTa2SP1) Bool)

(declare-const dummy24 tTa2SP1)

(declare-datatypes ()
((tTa2SP1__ref (tTa2SP1__refqtmk (tTa2SP1__content tTa2SP1)))))
(define-fun tTa2SP1__ref_tTa2SP1__content__projection ((a tTa2SP1__ref)) tTa2SP1 
  (tTa2SP1__content a))

(define-fun default_initial_assumption7 ((temp___expr_261 (Array Int us_rep))
  (temp___skip_top_level_262 Bool)) Bool (forall ((temp___263 Int))
                                         (=>
                                         (and (<= 1 temp___263)
                                         (<= temp___263 1))
                                         (= (rec__split_records__record_with_mutable_discrs__present
                                            (us_split_discrs1
                                            (select temp___expr_261 temp___263))) (distinct 0 0)))))

(declare-const value__size22 Int)

(declare-const object__size22 Int)

(declare-const alignment22 Int)

;; value__size_axiom
  (assert (<= 0 value__size22))

;; object__size_axiom
  (assert (<= 0 object__size22))

;; alignment_axiom
  (assert (<= 0 alignment22))

(declare-const split_records__record_with_mutable_discrs__present__first__bit16 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit16 Int)

(declare-const split_records__record_with_mutable_discrs__present__position16 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit16))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit16 
  split_records__record_with_mutable_discrs__present__last__bit16))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position16))

(declare-const split_records__record_with_mutable_discrs__field__first__bit16 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit16 Int)

(declare-const split_records__record_with_mutable_discrs__field__position16 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit16))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit16 split_records__record_with_mutable_discrs__field__last__bit16))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position16))

(declare-fun user_eq25 (us_rep us_rep) Bool)

(declare-const dummy25 us_rep)

(declare-datatypes () ((t20b__ref (t20b__refqtmk (t20b__content us_rep)))))
(define-fun t20b__ref_t20b__content__projection ((a t20b__ref)) us_rep 
  (t20b__content a))

(declare-fun split_records__test__a2__aggregate_def (us_rep) (Array Int us_rep))

(declare-const value__size23 Int)

(declare-const object__size23 Int)

(declare-const alignment23 Int)

;; value__size_axiom
  (assert (<= 0 value__size23))

;; object__size_axiom
  (assert (<= 0 object__size23))

;; alignment_axiom
  (assert (<= 0 alignment23))

(declare-const split_records__record_with_mutable_discrs__present__first__bit17 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit17 Int)

(declare-const split_records__record_with_mutable_discrs__present__position17 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit17))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit17 
  split_records__record_with_mutable_discrs__present__last__bit17))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position17))

(declare-const split_records__record_with_mutable_discrs__field__first__bit17 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit17 Int)

(declare-const split_records__record_with_mutable_discrs__field__position17 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit17))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit17 split_records__record_with_mutable_discrs__field__last__bit17))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position17))

(declare-fun user_eq26 (us_rep us_rep) Bool)

(declare-const dummy26 us_rep)

(declare-datatypes () ((t23b__ref (t23b__refqtmk (t23b__content us_rep)))))
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) us_rep 
  (t23b__content a))

(declare-const value__size24 Int)

(declare-const object__size24 Int)

(declare-const alignment24 Int)

;; value__size_axiom
  (assert (<= 0 value__size24))

;; object__size_axiom
  (assert (<= 0 object__size24))

;; alignment_axiom
  (assert (<= 0 alignment24))

(declare-const split_records__record_with_mutable_discrs__present__first__bit18 Int)

(declare-const split_records__record_with_mutable_discrs__present__last__bit18 Int)

(declare-const split_records__record_with_mutable_discrs__present__position18 Int)

;; split_records__record_with_mutable_discrs__present__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__first__bit18))

;; split_records__record_with_mutable_discrs__present__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__present__first__bit18 
  split_records__record_with_mutable_discrs__present__last__bit18))

;; split_records__record_with_mutable_discrs__present__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__present__position18))

(declare-const split_records__record_with_mutable_discrs__field__first__bit18 Int)

(declare-const split_records__record_with_mutable_discrs__field__last__bit18 Int)

(declare-const split_records__record_with_mutable_discrs__field__position18 Int)

;; split_records__record_with_mutable_discrs__field__first__bit_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__first__bit18))

;; split_records__record_with_mutable_discrs__field__last__bit_axiom
  (assert
  (< split_records__record_with_mutable_discrs__field__first__bit18 split_records__record_with_mutable_discrs__field__last__bit18))

;; split_records__record_with_mutable_discrs__field__position_axiom
  (assert
  (<= 0 split_records__record_with_mutable_discrs__field__position18))

(declare-fun user_eq27 (us_rep us_rep) Bool)

(declare-const dummy27 us_rep)

(declare-datatypes () ((t24b__ref (t24b__refqtmk (t24b__content us_rep)))))
(define-fun t24b__ref_t24b__content__projection ((a t24b__ref)) us_rep 
  (t24b__content a))

(declare-fun split_records__test__a__aggregate_def (us_rep) (Array Int us_rep))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

;; def_axiom
  (assert
  (forall ((temp___287 us_rep))
  (= (select (split_records__test__a__aggregate_def temp___287) 1) temp___287)))

;; c3__def_axiom
  (assert
  (= c3 (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
        (us_split_fieldsqtmk dummy))))

;; c4__def_axiom
  (assert
  (= c4 (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
        (us_split_fieldsqtmk dummy))))

;; h3__def_axiom
  (assert
  (= h3 (of_base1
        (to_base3
        (us_repqtmk6 (us_split_discrsqtmk1 (distinct 0 0))
        (us_split_fieldsqtmk6
        (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
        (us_split_fieldsqtmk dummy))))))))

;; h4__def_axiom
  (assert
  (= h4 (us_repqtmk3
        (us_split_fieldsqtmk3
        (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
        (us_split_fieldsqtmk dummy))))))

;; a2__def_axiom
  (assert
  (= a2 (split_records__test__a2__aggregate_def
        (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
        (us_split_fieldsqtmk dummy)))))

;; def_axiom
  (assert
  (forall ((temp___156 us_rep))
  (= (select (split_records__test__a2__aggregate_def temp___156) 1) temp___156)))

(define-fun dynamic_invariant5 ((temp___expr_183 us_rep1)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool) (temp___do_typ_inv_182 Bool)) Bool (in_range2
  (rec__split_records__holder__present (us_split_discrs3 temp___expr_183))
  (us_split_discrs1
  (rec__split_records__holder__content (us_split_fields3 temp___expr_183)))))

(declare-const c1__split_fields natural)

;; Assume
  (assert (= c1__attr__constrained true))

;; Assume
  (assert (default_initial_assumption1
  (us_repqtmk c1__split_discrs (us_split_fieldsqtmk c1__split_fields))
  false))

;; Assume
  (assert (dynamic_invariant
  (us_repqtmk c1__split_discrs (us_split_fieldsqtmk c1__split_fields)) false
  false true true))

(declare-const c2__split_fields natural)

;; H
  (assert (= c2__split_fields dummy))

(declare-const c2__split_discrs Bool)

;; H
  (assert (= c2__split_discrs (distinct 0 0)))

;; Assume
  (assert (= c2__attr__constrained false))

;; Assume
  (assert true)

(define-fun temp___284 () us_rep (us_repqtmk
                                 (us_split_discrsqtmk (distinct 0 0))
                                 (us_split_fieldsqtmk dummy)))

(define-fun temp___285 () us_rep1 (to_base2
                                  (us_repqtmk5
                                  (us_split_discrsqtmk1 (distinct 0 0))
                                  (us_split_fieldsqtmk5 temp___284))))

(define-fun split_records__test__h1__assume () us_rep2 (of_base temp___285))

(declare-const h1__split_fields us_rep)

;; H
  (assert
  (= (us_split_fieldsqtmk2 h1__split_fields) (us_split_fields5
                                             split_records__test__h1__assume)))

;; Assume
  (assert
  (= h1__split_discrs (us_split_discrs4 split_records__test__h1__assume)))

;; Assume
  (assert (dynamic_invariant1
  (us_repqtmk2 h1__split_discrs (us_split_fieldsqtmk2 h1__split_fields)) true
  false true true))

(declare-const h2__split_fields us_rep)

;; H
  (assert
  (= h2__split_fields (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
                      (us_split_fieldsqtmk dummy))))

;; Assume
  (assert true)

(declare-const a (Array Int us_rep))

;; H
  (assert
  (= a (split_records__test__a__aggregate_def
       (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
       (us_split_fieldsqtmk dummy)))))

;; Assume
  (assert true)

(define-fun temp___290 () us_rep (us_repqtmk
                                 (us_split_discrsqtmk (distinct 0 0))
                                 (us_split_fieldsqtmk dummy)))

;; Assume
  (assert (= temp___290 c3))

;; Assume
  (assert (dynamic_invariant2 c3 true false true true))

;; Assume
  (assert
  (= (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
     (us_split_fieldsqtmk dummy)) c4))

;; Assume
  (assert (in_range2 (distinct 0 0) (us_split_discrs1 c4)))

(define-fun temp___293 () us_rep (us_repqtmk
                                 (us_split_discrsqtmk (distinct 0 0))
                                 (us_split_fieldsqtmk dummy)))

(define-fun temp___294 () us_rep1 (to_base3
                                  (us_repqtmk6
                                  (us_split_discrsqtmk1 (distinct 0 0))
                                  (us_split_fieldsqtmk6 temp___293))))

;; Assume
  (assert (= (of_base1 temp___294) h3))

;; Assume
  (assert (dynamic_invariant3 h3 true false true true))

;; Assume
  (assert
  (= (us_repqtmk3
     (us_split_fieldsqtmk3
     (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
     (us_split_fieldsqtmk dummy)))) h4))

;; Assume
  (assert true)

;; Assume
  (assert
  (= (split_records__test__a2__aggregate_def
     (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
     (us_split_fieldsqtmk dummy))) a2))

;; Assume
  (assert true)

;; Assert
  (assert true)

;; Assert
  (assert true)

;; Assert
  (assert true)

;; Assert
  (assert true)

;; Assert
  (assert true)

(declare-const split_records__update_field_if_possible__r__discrs Bool)

(declare-const split_records__update_field_if_possible__r__fields natural)

;; H
  (assert
  (=> (= split_records__update_field_if_possible__r__discrs true)
  (= (to_rep split_records__update_field_if_possible__r__fields) 0)))

;; H
  (assert true)

(declare-const c1__split_fields1 natural)

;; H
  (assert
  (= c1__split_fields1 split_records__update_field_if_possible__r__fields))

;; Assume
  (assert true)

;; Assume
  (assert
  (=> (= c1__attr__constrained true)
  (= (us_split_discrsqtmk split_records__update_field_if_possible__r__discrs) 
  c1__split_discrs)))

;; Assert
  (assert
  (not
  (= (rec__split_records__record_with_mutable_discrs__present
     c1__split_discrs) true)))

(declare-const c2__split_fields1 natural)

(declare-const c2__split_discrs1 Bool)

;; H
  (assert (=> (= c2__split_discrs1 true) (= (to_rep c2__split_fields1) 0)))

;; H
  (assert true)

;; Assert
  (assert (not (= c2__split_discrs1 true)))

(declare-const split_records__update_field_if_possible__r__discrs1 Bool)

(declare-const split_records__update_field_if_possible__r__fields1 natural)

;; H
  (assert
  (=> (= split_records__update_field_if_possible__r__discrs1 true)
  (= (to_rep split_records__update_field_if_possible__r__fields1) 0)))

;; H
  (assert true)

(declare-const h1__split_fields1 us_rep)

;; H
  (assert
  (= h1__split_fields1 (us_repqtmk
                       (us_split_discrsqtmk
                       split_records__update_field_if_possible__r__discrs1)
                       (us_split_fieldsqtmk
                       split_records__update_field_if_possible__r__fields1))))

;; Assume
  (assert
  (= (us_split_discrsqtmk
     split_records__update_field_if_possible__r__discrs1) (us_split_discrs1
                                                          h1__split_fields)))

(assert
;; defqtvc
 ;; File "split_records.ads", line 27, characters 0-0
  (not
  (not
  (= (rec__split_records__record_with_mutable_discrs__present
     (us_split_discrs1 h1__split_fields1)) true))))
(check-sat)
