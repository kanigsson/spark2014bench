;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy1 (Array Int integer))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq1 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int (Array Int integer)))))))
(declare-fun slide1 ((Array Int (Array Int integer)) Int
  Int) (Array Int (Array Int integer)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int integer))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int integer))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int (Array Int integer))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int integer))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155) 1 2
                              (select b (+ (- b__first a__first) temp___idx_155))
                              1 2) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int integer)))
  (b (Array Int (Array Int integer))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155) 1 2
     (select b (+ (- b__first a__first) temp___idx_155)) 1 2) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort ta3D1 0)

(declare-fun ta3D1qtint (ta3D1) Int)

;; ta3D1'axiom
  (assert
  (forall ((i ta3D1)) (and (<= 1 (ta3D1qtint i)) (<= (ta3D1qtint i) 2))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (ta3D1 ta3D1) Bool)

(declare-const dummy2 ta3D1)

(declare-datatypes () ((ta3D1__ref (ta3D1__refqtmk (ta3D1__content ta3D1)))))
(define-fun ta3D1__ref_ta3D1__content__projection ((a ta3D1__ref)) ta3D1 
  (ta3D1__content a))

(declare-sort t59s 0)

(declare-fun t59sqtint (t59s) Int)

;; t59s'axiom
  (assert
  (forall ((i t59s)) (and (<= 1 (t59sqtint i)) (<= (t59sqtint i) 2))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (t59s t59s) Bool)

(declare-const dummy3 t59s)

(declare-datatypes () ((t59s__ref (t59s__refqtmk (t59s__content t59s)))))
(define-fun t59s__ref_t59s__content__projection ((a t59s__ref)) t59s 
  (t59s__content a))

(declare-sort t65s 0)

(declare-fun t65sqtint (t65s) Int)

;; t65s'axiom
  (assert
  (forall ((i t65s)) (and (<= 1 (t65sqtint i)) (<= (t65sqtint i) 2))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (t65s t65s) Bool)

(declare-const dummy4 t65s)

(declare-datatypes () ((t65s__ref (t65s__refqtmk (t65s__content t65s)))))
(define-fun t65s__ref_t65s__content__projection ((a t65s__ref)) t65s 
  (t65s__content a))

(declare-sort t71s 0)

(declare-fun t71sqtint (t71s) Int)

;; t71s'axiom
  (assert
  (forall ((i t71s)) (and (<= 1 (t71sqtint i)) (<= (t71sqtint i) 2))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (t71s t71s) Bool)

(declare-const dummy5 t71s)

(declare-datatypes () ((t71s__ref (t71s__refqtmk (t71s__content t71s)))))
(define-fun t71s__ref_t71s__content__projection ((a t71s__ref)) t71s 
  (t71s__content a))

(declare-sort t77s 0)

(declare-fun t77sqtint (t77s) Int)

;; t77s'axiom
  (assert
  (forall ((i t77s)) (and (<= 1 (t77sqtint i)) (<= (t77sqtint i) 2))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (t77s t77s) Bool)

(declare-const dummy6 t77s)

(declare-datatypes () ((t77s__ref (t77s__refqtmk (t77s__content t77s)))))
(define-fun t77s__ref_t77s__content__projection ((a t77s__ref)) t77s 
  (t77s__content a))

(declare-sort t83s 0)

(declare-fun t83sqtint (t83s) Int)

;; t83s'axiom
  (assert
  (forall ((i t83s)) (and (<= 1 (t83sqtint i)) (<= (t83sqtint i) 2))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (t83s t83s) Bool)

(declare-const dummy7 t83s)

(declare-datatypes () ((t83s__ref (t83s__refqtmk (t83s__content t83s)))))
(define-fun t83s__ref_t83s__content__projection ((a t83s__ref)) t83s 
  (t83s__content a))

(declare-fun temp_____aggregate_def_263 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

(declare-fun temp_____aggregate_def_268 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_273 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_281 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

(declare-fun temp_____aggregate_def_286 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_291 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_299 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

(declare-fun temp_____aggregate_def_304 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_309 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_317 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

(declare-fun temp_____aggregate_def_322 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_327 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_335 ((Array Int integer)
  (Array Int integer)) (Array Int (Array Int integer)))

(declare-fun temp_____aggregate_def_340 (Int Int) (Array Int integer))

(declare-fun temp_____aggregate_def_345 (Int Int) (Array Int integer))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 2))

;; def_axiom
  (assert
  (forall ((temp___270 Int) (temp___271 Int))
  (let ((temp___269 (temp_____aggregate_def_268 temp___270 temp___271)))
  (=>
  (and (dynamic_invariant temp___270 true true true true) (dynamic_invariant
  temp___271 true true true true))
  (and (= (to_rep (select temp___269 1)) temp___270)
  (= (select temp___269 2) rliteral))))))

;; def_axiom
  (assert
  (forall ((temp___265 (Array Int integer)) (temp___266 (Array Int integer)))
  (let ((temp___264 (temp_____aggregate_def_263 temp___265 temp___266)))
  (and (= (select temp___264 1) temp___265)
  (= (select temp___264 2) temp___266)))))

;; def_axiom
  (assert
  (forall ((temp___275 Int) (temp___276 Int))
  (let ((temp___274 (temp_____aggregate_def_273 temp___275 temp___276)))
  (=>
  (and (dynamic_invariant temp___275 true true true true) (dynamic_invariant
  temp___276 true true true true))
  (and (= (to_rep (select temp___274 1)) temp___275)
  (= (select temp___274 2) rliteral))))))

;; def_axiom
  (assert
  (forall ((temp___288 Int) (temp___289 Int))
  (let ((temp___287 (temp_____aggregate_def_286 temp___288 temp___289)))
  (=>
  (and (dynamic_invariant temp___288 true true true true) (dynamic_invariant
  temp___289 true true true true))
  (and (= (to_rep (select temp___287 1)) temp___288)
  (= (to_rep (select temp___287 2)) temp___289))))))

;; def_axiom
  (assert
  (forall ((temp___283 (Array Int integer)) (temp___284 (Array Int integer)))
  (let ((temp___282 (temp_____aggregate_def_281 temp___283 temp___284)))
  (and (= (select temp___282 1) temp___283)
  (= (select temp___282 2) temp___284)))))

;; def_axiom
  (assert
  (forall ((temp___293 Int) (temp___294 Int))
  (let ((temp___292 (temp_____aggregate_def_291 temp___293 temp___294)))
  (=>
  (and (dynamic_invariant temp___293 true true true true) (dynamic_invariant
  temp___294 true true true true))
  (and (= (to_rep (select temp___292 1)) temp___293)
  (= (to_rep (select temp___292 2)) temp___294))))))

;; def_axiom
  (assert
  (forall ((temp___306 Int) (temp___307 Int))
  (let ((temp___305 (temp_____aggregate_def_304 temp___306 temp___307)))
  (=>
  (and (dynamic_invariant temp___306 true true true true) (dynamic_invariant
  temp___307 true true true true))
  (and (= (to_rep (select temp___305 1)) temp___306)
  (= (to_rep (select temp___305 2)) temp___307))))))

;; def_axiom
  (assert
  (forall ((temp___301 (Array Int integer)) (temp___302 (Array Int integer)))
  (let ((temp___300 (temp_____aggregate_def_299 temp___301 temp___302)))
  (and (= (select temp___300 1) temp___301)
  (= (select temp___300 2) temp___302)))))

;; def_axiom
  (assert
  (forall ((temp___311 Int) (temp___312 Int))
  (let ((temp___310 (temp_____aggregate_def_309 temp___311 temp___312)))
  (=>
  (and (dynamic_invariant temp___311 true true true true) (dynamic_invariant
  temp___312 true true true true))
  (and (= (to_rep (select temp___310 1)) temp___311)
  (= (to_rep (select temp___310 2)) temp___312))))))

;; def_axiom
  (assert
  (forall ((temp___324 Int) (temp___325 Int))
  (let ((temp___323 (temp_____aggregate_def_322 temp___324 temp___325)))
  (=>
  (and (dynamic_invariant temp___324 true true true true) (dynamic_invariant
  temp___325 true true true true))
  (and (= (select temp___323 1) rliteral)
  (= (to_rep (select temp___323 2)) temp___325))))))

;; def_axiom
  (assert
  (forall ((temp___319 (Array Int integer)) (temp___320 (Array Int integer)))
  (let ((temp___318 (temp_____aggregate_def_317 temp___319 temp___320)))
  (and (= (select temp___318 1) temp___319)
  (= (select temp___318 2) temp___320)))))

;; def_axiom
  (assert
  (forall ((temp___329 Int) (temp___330 Int))
  (let ((temp___328 (temp_____aggregate_def_327 temp___329 temp___330)))
  (=>
  (and (dynamic_invariant temp___329 true true true true) (dynamic_invariant
  temp___330 true true true true))
  (and (= (select temp___328 1) rliteral)
  (= (to_rep (select temp___328 2)) temp___330))))))

;; def_axiom
  (assert
  (forall ((temp___342 Int) (temp___343 Int))
  (let ((temp___341 (temp_____aggregate_def_340 temp___342 temp___343)))
  (=>
  (and (dynamic_invariant temp___342 true true true true) (dynamic_invariant
  temp___343 true true true true))
  (and (= (to_rep (select temp___341 1)) temp___342)
  (= (select temp___341 2) rliteral))))))

;; def_axiom
  (assert
  (forall ((temp___337 (Array Int integer)) (temp___338 (Array Int integer)))
  (let ((temp___336 (temp_____aggregate_def_335 temp___337 temp___338)))
  (and (= (select temp___336 1) temp___337)
  (= (select temp___336 2) temp___338)))))

;; def_axiom
  (assert
  (forall ((temp___347 Int) (temp___348 Int))
  (let ((temp___346 (temp_____aggregate_def_345 temp___347 temp___348)))
  (=>
  (and (dynamic_invariant temp___347 true true true true) (dynamic_invariant
  temp___348 true true true true))
  (and (= (to_rep (select temp___346 1)) temp___347)
  (= (select temp___346 2) rliteral))))))

(declare-const one Int)

(declare-const a (Array Int (Array Int integer)))

(declare-const one1 Int)

;; H
  (assert (= one1 one))

;; Assume
  (assert (dynamic_invariant one true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant b true false true true))

;; Assume
  (assert (= one 1))

(define-fun o () Int b)

(assert
;; defqtvc
 ;; File "arr_aggregate.ads", line 43, characters 0-0
  (not (= one 1)))
(check-sat)
