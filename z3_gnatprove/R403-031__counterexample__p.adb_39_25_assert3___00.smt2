(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const x (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun pow21 ((_ BitVec 16)) (_ BitVec 16))

(declare-fun pow2__function_guard ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-sort u16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))

(declare-fun user_eq (u16 u16) Bool)

(declare-const dummy u16)

(declare-datatypes () ((u16__ref (u16__refqtmk (u16__content u16)))))
(define-fun u16__ref_u16__content__projection ((a u16__ref)) u16 (u16__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_196 (_ BitVec 16))
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool) (temp___do_typ_inv_195 Bool)) Bool true)

;; pow2__post_axiom
  (assert
  (forall ((x1 (_ BitVec 16)))
  (! (=> (dynamic_invariant x1 true true true true) (dynamic_invariant
     (pow21 x1) true false true true)) :pattern ((pow21 x1)) )))

;; pow2__def_axiom
  (assert
  (forall ((x1 (_ BitVec 16)))
  (! (=> (dynamic_invariant x1 true true true true)
     (= (pow21 x1) (ite (< (bv2int x1) 16)
                   (bvshl #x0001 ((_ int2bv 16) (bv2int x1))) #x0000))) :pattern (
  (pow21 x1)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const num (_ BitVec 16))

(declare-const bits (_ BitVec 16))

(declare-const res (_ BitVec 16))

(declare-const b (_ BitVec 16))

(declare-const m (_ BitVec 16))

(declare-const bits_g (_ BitVec 16))

(declare-const res_g (_ BitVec 16))

;; Assume
  (assert (dynamic_invariant x true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant num false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant bits false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant res false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant b false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant m false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant bits_g false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant res_g false false true true))

(declare-const num1 (_ BitVec 16))

;; H
  (assert (= num1 x))

;; Assert
  (assert (bvule num1 #xFFFF))

(declare-const bits1 (_ BitVec 16))

;; H
  (assert (= bits1 #x4000))

(declare-const res1 (_ BitVec 16))

;; H
  (assert (= res1 #x0000))

(declare-const m1 (_ BitVec 16))

;; H
  (assert (= m1 #x0008))

(declare-const bits_g1 (_ BitVec 16))

;; H
  (assert (= bits_g1 #x0080))

(declare-const res_g1 (_ BitVec 16))

;; H
  (assert (= res_g1 #x0000))

;; H
  (assert (not (= bits1 #x0000)))

(declare-const num2 (_ BitVec 16))

(declare-const bits2 (_ BitVec 16))

(declare-const res2 (_ BitVec 16))

(declare-const b1 (_ BitVec 16))

(declare-const m2 (_ BitVec 16))

(declare-const bits_g2 (_ BitVec 16))

(declare-const res_g2 (_ BitVec 16))

;; H
  (assert
  (= (and (ite (and
               (and
               (and
               (and
               (and
               (and (dynamic_invariant m2 false true true true)
               (dynamic_invariant bits_g2 false true true true))
               (dynamic_invariant res_g2 false true true true))
               (dynamic_invariant num2 false true true true))
               (dynamic_invariant bits2 false true true true))
               (dynamic_invariant res2 false true true true))
               (dynamic_invariant b1 false true true true))
          true false) (ite (not (= bits2 #x0000)) true false)) true))

(declare-const m3 (_ BitVec 16))

;; H
  (assert (= m3 (bvsub m2 #x0001)))

(assert
;; defqtvc
 ;; File "p.ads", line 19, characters 0-0
  (not (= res2 (bvmul res_g2 (pow21 (bvadd m3 #x0001))))))
(check-sat)
