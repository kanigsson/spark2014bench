;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort resource 0)

(declare-fun resourceqtint (resource) Int)

;; resource'axiom
  (assert
  (forall ((i resource))
  (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 3))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (resource resource) Bool)

(declare-const dummy2 resource)

(declare-datatypes ()
((resource__ref (resource__refqtmk (resource__content resource)))))
(define-fun resource__ref_resource__content__projection ((a resource__ref)) resource 
  (resource__content a))

(define-fun to_rep ((x resource)) Int (resourceqtint x))

(declare-fun of_rep (Int) resource)

;; inversion_axiom
  (assert
  (forall ((x resource))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x resource)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort status 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (status status) Bool)

(declare-const dummy3 status)

(declare-datatypes ()
((status__ref (status__refqtmk (status__content status)))))
(define-fun status__ref_status__content__projection ((a status__ref)) status 
  (status__content a))

(declare-fun to_rep1 (status) Int)

(declare-fun of_rep1 (Int) status)

;; inversion_axiom
  (assert
  (forall ((x status))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x status)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__list_allocator__cell__stat status)(rec__list_allocator__cell__prev resource)(rec__list_allocator__cell__next resource)))))
(define-fun us_split_fields_rec__list_allocator__cell__stat__projection ((a us_split_fields)) status 
  (rec__list_allocator__cell__stat a))

(define-fun us_split_fields_rec__list_allocator__cell__prev__projection ((a us_split_fields)) resource 
  (rec__list_allocator__cell__prev a))

(define-fun us_split_fields_rec__list_allocator__cell__next__projection ((a us_split_fields)) resource 
  (rec__list_allocator__cell__next a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__list_allocator__cell__stat
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__list_allocator__cell__stat
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__list_allocator__cell__prev
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_allocator__cell__prev
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__list_allocator__cell__next
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_allocator__cell__next
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const list_allocator__cell__stat__first__bit Int)

(declare-const list_allocator__cell__stat__last__bit Int)

(declare-const list_allocator__cell__stat__position Int)

;; list_allocator__cell__stat__first__bit_axiom
  (assert (<= 0 list_allocator__cell__stat__first__bit))

;; list_allocator__cell__stat__last__bit_axiom
  (assert
  (< list_allocator__cell__stat__first__bit list_allocator__cell__stat__last__bit))

;; list_allocator__cell__stat__position_axiom
  (assert (<= 0 list_allocator__cell__stat__position))

(declare-const list_allocator__cell__prev__first__bit Int)

(declare-const list_allocator__cell__prev__last__bit Int)

(declare-const list_allocator__cell__prev__position Int)

;; list_allocator__cell__prev__first__bit_axiom
  (assert (<= 0 list_allocator__cell__prev__first__bit))

;; list_allocator__cell__prev__last__bit_axiom
  (assert
  (< list_allocator__cell__prev__first__bit list_allocator__cell__prev__last__bit))

;; list_allocator__cell__prev__position_axiom
  (assert (<= 0 list_allocator__cell__prev__position))

(declare-const list_allocator__cell__next__first__bit Int)

(declare-const list_allocator__cell__next__last__bit Int)

(declare-const list_allocator__cell__next__position Int)

;; list_allocator__cell__next__first__bit_axiom
  (assert (<= 0 list_allocator__cell__next__first__bit))

;; list_allocator__cell__next__last__bit_axiom
  (assert
  (< list_allocator__cell__next__first__bit list_allocator__cell__next__last__bit))

;; list_allocator__cell__next__position_axiom
  (assert (<= 0 list_allocator__cell__next__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes () ((cell__ref (cell__refqtmk (cell__content us_rep)))))
(define-fun cell__ref_cell__content__projection ((a cell__ref)) us_rep 
  (cell__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq2 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun length (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (natural natural) Bool)

(declare-const dummy6 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range5
                                    temp___expr_39)))

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (and
     (forall ((a1 us_rep1) (b1 us_rep1)) (oeq__function_guard (oeq a1 b1) a1
     b1)) (= (user_eq5 a b) (oeq a b))) :pattern ((user_eq5 a b)) )))

;; temp___result_240'def
  (assert
  (forall ((temp___239 us_rep1)) (length__function_guard (length temp___239)
  temp___239)))

(define-fun default_initial_assumption ((temp___expr_237 us_rep1)
  (temp___skip_top_level_238 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_238 true))
                                         (= (length temp___expr_237) 0)))

;; length__post_axiom
  (assert
  (forall ((s us_rep1))
  (! (let ((result (length s)))
     (=> (length__function_guard result s) (dynamic_invariant result true
     false true true))) :pattern ((length s)) )))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 3))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-const dummy7 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_228 Int)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)
  (temp___do_typ_inv_227 Bool)) Bool (=>
                                     (or (= temp___is_init_224 true)
                                     (<= 0 3)) (in_range6 temp___expr_228)))

;; get__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((n Int))
  (! (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (=>
     (and (dynamic_invariant1 n true true true true)
     (and (<= 1 n) (<= n (length s))))
     (let ((result (get s n)))
     (=> (get__function_guard result s n) (dynamic_invariant2 result true
     false true true))))) :pattern ((get s n)) ))))

(declare-fun is_prepend (us_rep1 Int us_rep1) Bool)

(declare-fun is_prepend__function_guard (Bool us_rep1 Int us_rep1) Bool)

;; is_prepend__post_axiom
  (assert
  (forall ((s us_rep1) (result__ us_rep1))
  (forall ((e Int))
  (! (=> (dynamic_invariant2 e true true true true)
     (let ((result (is_prepend s e result__)))
     (and
     (forall ((result__1 us_rep1)) (length__function_guard (length result__1)
     result__1))
     (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (and
     (forall ((result__1 us_rep1)) (get__function_guard (get result__1 1)
     result__1 1))
     (and
     (forall ((result__1 us_rep1)) (length__function_guard (length result__1)
     result__1))
     (and
     (forall ((result__1 us_rep1) (m Int)) (get__function_guard
     (get result__1 m) result__1 m))
     (and
     (forall ((s1 us_rep1) (m Int)) (get__function_guard (get s1 (- m 1)) s1
     (- m 1)))
     (=> (is_prepend__function_guard result s e result__)
     (= (= result true)
     (and (and (= (length result__) (+ (length s) 1)) (= (get result__ 1) e))
     (forall ((m Int))
     (=> (and (<= 2 m) (<= m (length result__)))
     (= (get result__ m) (get s (- m 1)))))))))))))))) :pattern ((is_prepend
                                                                 s e
                                                                 result__)) ))))

(declare-fun prepend (us_rep1 Int) us_rep1)

(declare-fun prepend__function_guard (us_rep1 us_rep1 Int) Bool)

;; prepend__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((e Int))
  (! (=> (dynamic_invariant2 e true true true true)
     (let ((result (prepend s e)))
     (and
     (forall ((s1 us_rep1) (e1 Int) (result1 us_rep1))
     (is_prepend__function_guard (is_prepend s1 e1 result1) s1 e1 result1))
     (=> (prepend__function_guard result s e)
     (= (is_prepend s e result) true))))) :pattern ((prepend s e)) ))))

(declare-fun is_removed_at (us_rep1 Int us_rep1) Bool)

(declare-fun is_removed_at__function_guard (Bool us_rep1 Int us_rep1) Bool)

(declare-fun remove_at (us_rep1 Int) us_rep1)

(declare-fun remove_at__function_guard (us_rep1 us_rep1 Int) Bool)

;; remove_at__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((n Int))
  (! (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (=>
     (and (dynamic_invariant1 n true true true true)
     (and (<= 1 n) (<= n (length s))))
     (let ((result (remove_at s n)))
     (and
     (forall ((s1 us_rep1) (n1 Int) (result1 us_rep1))
     (is_removed_at__function_guard (is_removed_at s1 n1 result1) s1 n1
     result1))
     (=> (remove_at__function_guard result s n)
     (= (is_removed_at s n result) true)))))) :pattern ((remove_at s n)) ))))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__list_allocator__m__t__available us_rep1)(rec__list_allocator__m__t__allocated us_rep1)))))
(define-fun us_split_fields_rec__list_allocator__m__t__available__projection ((a us_split_fields2)) us_rep1 
  (rec__list_allocator__m__t__available a))

(define-fun us_split_fields_rec__list_allocator__m__t__allocated__projection ((a us_split_fields2)) us_rep1 
  (rec__list_allocator__m__t__allocated a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (user_eq5
                            (rec__list_allocator__m__t__available
                            (us_split_fields3 a))
                            (rec__list_allocator__m__t__available
                            (us_split_fields3 b))) true)
                         (= (user_eq5
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields3 a))
                            (rec__list_allocator__m__t__allocated
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const list_allocator__m__t__available__first__bit Int)

(declare-const list_allocator__m__t__available__last__bit Int)

(declare-const list_allocator__m__t__available__position Int)

;; list_allocator__m__t__available__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__available__first__bit))

;; list_allocator__m__t__available__last__bit_axiom
  (assert
  (< list_allocator__m__t__available__first__bit list_allocator__m__t__available__last__bit))

;; list_allocator__m__t__available__position_axiom
  (assert (<= 0 list_allocator__m__t__available__position))

(declare-const list_allocator__m__t__allocated__first__bit Int)

(declare-const list_allocator__m__t__allocated__last__bit Int)

(declare-const list_allocator__m__t__allocated__position Int)

;; list_allocator__m__t__allocated__first__bit_axiom
  (assert (<= 0 list_allocator__m__t__allocated__first__bit))

;; list_allocator__m__t__allocated__last__bit_axiom
  (assert
  (< list_allocator__m__t__allocated__first__bit list_allocator__m__t__allocated__last__bit))

;; list_allocator__m__t__allocated__position_axiom
  (assert (<= 0 list_allocator__m__t__allocated__position))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-const dummy8 us_rep2)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep2)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep2 (t__content a))

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (and
     (forall ((a1 us_rep2) (b1 us_rep2)) (oeq__function_guard1 (oeq1 a1 b1)
     a1 b1)) (= (user_eq8 a b) (oeq1 a b))) :pattern ((user_eq8 a b)) )))

;; temp___result_331'def
  (assert
  (forall ((temp___330 us_rep1)) (length__function_guard (length temp___330)
  temp___330)))

;; temp___result_334'def
  (assert
  (forall ((temp___333 us_rep1)) (length__function_guard (length temp___333)
  temp___333)))

(define-fun default_initial_assumption1 ((temp___expr_327 us_rep2)
  (temp___skip_top_level_328 Bool)) Bool (and
                                         (= (length
                                            (rec__list_allocator__m__t__available
                                            (us_split_fields3
                                            temp___expr_327))) 0)
                                         (= (length
                                            (rec__list_allocator__m__t__allocated
                                            (us_split_fields3
                                            temp___expr_327))) 0)))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep2) (y us_rep2))
  (! (and
     (forall ((x1 us_rep2) (y1 us_rep2)) (oeq__function_guard
     (oeq (rec__list_allocator__m__t__available (us_split_fields3 x1))
     (rec__list_allocator__m__t__available (us_split_fields3 y1)))
     (rec__list_allocator__m__t__available (us_split_fields3 x1))
     (rec__list_allocator__m__t__available (us_split_fields3 y1))))
     (and
     (forall ((x1 us_rep2) (y1 us_rep2)) (oeq__function_guard
     (oeq (rec__list_allocator__m__t__allocated (us_split_fields3 x1))
     (rec__list_allocator__m__t__allocated (us_split_fields3 y1)))
     (rec__list_allocator__m__t__allocated (us_split_fields3 x1))
     (rec__list_allocator__m__t__allocated (us_split_fields3 y1))))
     (= (= (oeq1 x y) true)
     (and
     (= (oeq (rec__list_allocator__m__t__available (us_split_fields3 x))
        (rec__list_allocator__m__t__available (us_split_fields3 y))) true)
     (= (oeq (rec__list_allocator__m__t__allocated (us_split_fields3 x))
        (rec__list_allocator__m__t__allocated (us_split_fields3 y))) true))))) :pattern (
  (oeq1 x y)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun mem (us_rep1 Int) Bool)

(declare-fun mem__function_guard (Bool us_rep1 Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 0 3)) (in_range3 temp___expr_178)))

;; mem__post_axiom
  (assert true)

;; mem__def_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((r Int))
  (! (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (and
     (forall ((s1 us_rep1) (j Int)) (get__function_guard (get s1 j) s1 j))
     (= (= (mem s r) true)
     (exists ((j Int))
     (and (and (<= 1 j) (<= j (length s))) (= (get s j) r)))))) :pattern (
  (mem s r)) ))))

(declare-fun find (us_rep1 Int) Int)

(declare-fun find__function_guard (Int us_rep1 Int) Bool)

;; find__post_axiom
  (assert
  (forall ((s us_rep1))
  (forall ((r Int))
  (! (=> (dynamic_invariant3 r true true true true)
     (let ((result (find s r)))
     (and
     (forall ((s1 us_rep1) (r1 Int)) (mem__function_guard (mem s1 r1) s1 r1))
     (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (and
     (forall ((s1 us_rep1) (result1 Int)) (get__function_guard
     (get s1 result1) s1 result1))
     (=> (find__function_guard result s r)
     (and
     (ite (= (mem s r) true)
     (and (and (<= 1 result) (<= result (length s))) (= (get s result) r))
     (= result 0)) (dynamic_invariant result true false true true)))))))) :pattern (
  (find s r)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun is_valid (Int us_split_fields2 Int (Array Int us_rep)) Bool)

(declare-fun is_valid__function_guard (Bool Int us_split_fields2 Int
  (Array Int us_rep)) Bool)

(declare-sort valid_resource 0)

(declare-fun valid_resourceqtint (valid_resource) Int)

;; valid_resource'axiom
  (assert
  (forall ((i valid_resource))
  (and (<= 1 (valid_resourceqtint i)) (<= (valid_resourceqtint i) 3))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (valid_resource valid_resource) Bool)

(declare-const dummy9 valid_resource)

(declare-datatypes ()
((valid_resource__ref
 (valid_resource__refqtmk (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref_valid_resource__content__projection ((a valid_resource__ref)) valid_resource 
  (valid_resource__content a))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((list_allocator__first_available Int)
  (list_allocator__first_allocated Int))
  (forall ((list_allocator__m__model__fields us_split_fields2))
  (forall ((list_allocator__data (Array Int us_rep)))
  (! (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) 1)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) 1))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) 1)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) 1))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (+ j 1))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (+ j 1)))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (- j 1))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (- j 1)))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (k Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) k)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) k))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (+ j 1))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (+ j 1)))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (- j 1))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))
     (- j 1)))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2))
     (length__function_guard
     (length
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))))
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1)))))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (j Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) j))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (k Int))
     (get__function_guard
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) k)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) k))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (r Int))
     (mem__function_guard
     (mem
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (r Int))
     (mem__function_guard
     (mem
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (r Int))
     (mem__function_guard
     (mem
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r)
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r))
     (and
     (forall ((list_allocator__m__model__fields1 us_split_fields2) (r Int))
     (mem__function_guard
     (mem
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r)
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields1))) r))
     (=
     (= (is_valid list_allocator__first_available
        list_allocator__m__model__fields list_allocator__first_allocated
        list_allocator__data) true)
     (and
     (and
     (and
     (and
     (ite (not (= list_allocator__first_available 0))
     (and
     (< 0 (length
          (rec__list_allocator__m__t__available
          (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))))
     (= (get
        (rec__list_allocator__m__t__available
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) 1) list_allocator__first_available))
     (= (length
        (rec__list_allocator__m__t__available
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))) 0))
     (ite (not (= list_allocator__first_allocated 0))
     (and
     (< 0 (length
          (rec__list_allocator__m__t__allocated
          (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))))
     (= (get
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) 1) list_allocator__first_allocated))
     (= (length
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))) 0)))
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (length
           (rec__list_allocator__m__t__available
           (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))))))
     (and
     (and
     (and (in_range7
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) j))
     (= (to_rep
        (rec__list_allocator__cell__next
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__available
                                     (us_split_fields3
                                     (us_repqtmk1
                                     list_allocator__m__model__fields))) j))))) 
     (ite (< j (length
               (rec__list_allocator__m__t__available
               (us_split_fields3
               (us_repqtmk1 list_allocator__m__model__fields)))))
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))
     (+ j 1)) 0)))
     (= (to_rep
        (rec__list_allocator__cell__prev
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__available
                                     (us_split_fields3
                                     (us_repqtmk1
                                     list_allocator__m__model__fields))) j))))) 
     (ite (< 1 j)
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))
     (- j 1)) 0)))
     (forall ((k Int))
     (=>
     (and (<= 1 k)
     (<= k (length
           (rec__list_allocator__m__t__available
           (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))))))
     (=> (not (= j k))
     (not
     (= (get
        (rec__list_allocator__m__t__available
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) j) 
     (get
     (rec__list_allocator__m__t__available
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) k))))))))))
     (forall ((j Int))
     (=>
     (and (<= 1 j)
     (<= j (length
           (rec__list_allocator__m__t__allocated
           (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))))))
     (and
     (and
     (and (in_range7
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) j))
     (= (to_rep
        (rec__list_allocator__cell__next
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__allocated
                                     (us_split_fields3
                                     (us_repqtmk1
                                     list_allocator__m__model__fields))) j))))) 
     (ite (< j (length
               (rec__list_allocator__m__t__allocated
               (us_split_fields3
               (us_repqtmk1 list_allocator__m__model__fields)))))
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))
     (+ j 1)) 0)))
     (= (to_rep
        (rec__list_allocator__cell__prev
        (us_split_fields1
        (select list_allocator__data (get
                                     (rec__list_allocator__m__t__allocated
                                     (us_split_fields3
                                     (us_repqtmk1
                                     list_allocator__m__model__fields))) j))))) 
     (ite (< 1 j)
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields)))
     (- j 1)) 0)))
     (forall ((k Int))
     (=>
     (and (<= 1 k)
     (<= k (length
           (rec__list_allocator__m__t__allocated
           (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))))))
     (=> (not (= j k))
     (not
     (= (get
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) j) 
     (get
     (rec__list_allocator__m__t__allocated
     (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) k))))))))))
     (forall ((r Int))
     (=> (and (<= 1 r) (<= r 3))
     (ite (= (to_rep1
             (rec__list_allocator__cell__stat
             (us_split_fields1 (select list_allocator__data r)))) 0)
     (and
     (= (mem
        (rec__list_allocator__m__t__available
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) r) true)
     (not
     (= (mem
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) r) true)))
     (and
     (not
     (= (mem
        (rec__list_allocator__m__t__available
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) r) true))
     (= (mem
        (rec__list_allocator__m__t__allocated
        (us_split_fields3 (us_repqtmk1 list_allocator__m__model__fields))) r) true))))))))))))))))))))))))))))))))))))) :pattern (
  (is_valid list_allocator__first_available list_allocator__m__model__fields
  list_allocator__first_allocated list_allocator__data)) )))))

(declare-const res Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant5 ((temp___expr_192 Int)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)
  (temp___do_typ_inv_191 Bool)) Bool (=>
                                     (or (= temp___is_init_188 true)
                                     (<= 0 1)) (in_range4 temp___expr_192)))

(define-fun dynamic_invariant6 ((temp___expr_185 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)
  (temp___do_typ_inv_184 Bool)) Bool (=>
                                     (or (= temp___is_init_181 true)
                                     (<= 1 3)) (in_range7 temp___expr_185)))

;; oeq__post_axiom
  (assert
  (forall ((s1 us_rep1) (s2 us_rep1))
  (! (let ((result (oeq s1 s2)))
     (and (forall ((s11 us_rep1)) (length__function_guard (length s11) s11))
     (and (forall ((s21 us_rep1)) (length__function_guard (length s21) s21))
     (and (forall ((s11 us_rep1)) (length__function_guard (length s11) s11))
     (and
     (forall ((s11 us_rep1) (n Int)) (get__function_guard (get s11 n) s11 n))
     (and
     (forall ((s21 us_rep1) (n Int)) (get__function_guard (get s21 n) s21 n))
     (=> (oeq__function_guard result s1 s2)
     (= (= result true)
     (and (= (length s1) (length s2))
     (forall ((n Int))
     (=> (and (<= 1 n) (<= n (length s1))) (= (get s1 n) (get s2 n))))))))))))) :pattern (
  (oeq s1 s2)) )))

;; is_removed_at__post_axiom
  (assert
  (forall ((s us_rep1) (result__ us_rep1))
  (forall ((n Int))
  (! (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (=>
     (and (dynamic_invariant1 n true true true true)
     (and (<= 1 n) (<= n (length s))))
     (let ((result (is_removed_at s n result__)))
     (and
     (forall ((result__1 us_rep1)) (length__function_guard (length result__1)
     result__1))
     (and (forall ((s1 us_rep1)) (length__function_guard (length s1) s1))
     (and
     (forall ((result__1 us_rep1)) (length__function_guard (length result__1)
     result__1))
     (and
     (forall ((result__1 us_rep1) (m Int)) (get__function_guard
     (get result__1 m) result__1 m))
     (and
     (forall ((s1 us_rep1) (m Int)) (get__function_guard (get s1 m) s1 m))
     (and
     (forall ((result__1 us_rep1) (m Int)) (get__function_guard
     (get result__1 m) result__1 m))
     (and
     (forall ((s1 us_rep1) (m Int)) (get__function_guard (get s1 (+ m 1)) s1
     (+ m 1)))
     (=> (is_removed_at__function_guard result s n result__)
     (= (= result true)
     (and (= (length result__) (- (length s) 1))
     (forall ((m Int))
     (=> (and (<= 1 m) (<= m (length result__)))
     (ite (< m n) (= (get result__ m) (get s m))
     (=> (<= n m) (= (get result__ m) (get s (+ m 1)))))))))))))))))))) :pattern (
  (is_removed_at s n result__)) ))))

(declare-const rliteral resource)

;; rliteral_axiom
  (assert (= (resourceqtint rliteral) 0))

(declare-const data (Array Int us_rep))

(declare-const model__split_fields us_split_fields2)

(declare-const first_available Int)

(declare-const first_allocated Int)

(declare-const prev_alloc Int)

(declare-const next_alloc Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 first_available true false true true))

;; Assume
  (assert (dynamic_invariant3 first_allocated true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 res true false true true))

;; H
  (assert
  (forall ((data1 (Array Int us_rep)) (model__split_fields1 us_split_fields2)
  (first_available1 Int) (first_allocated1 Int)) (is_valid__function_guard
  (is_valid first_available1 model__split_fields1 first_allocated1 data1)
  first_available1 model__split_fields1 first_allocated1 data1)))

;; Assume
  (assert
  (= (is_valid first_available model__split_fields first_allocated data) true))

;; H
  (assert
  (forall ((model__split_fields1 us_split_fields2)) (mem__function_guard
  (mem (rec__list_allocator__m__t__allocated model__split_fields1) res)
  (rec__list_allocator__m__t__allocated model__split_fields1) res)))

(define-fun usf () Bool (mem
                        (rec__list_allocator__m__t__allocated
                        model__split_fields) res))

;; H
  (assert
  (forall ((model__split_fields1 us_split_fields2)) (length__function_guard
  (length (rec__list_allocator__m__t__allocated model__split_fields1))
  (rec__list_allocator__m__t__allocated model__split_fields1))))

(define-fun usf1 () Int (length
                        (rec__list_allocator__m__t__allocated
                        model__split_fields)))

(declare-const temp___old_897 us_split_fields2)

(define-fun temp___old_8971 () us_rep2 (us_repqtmk1 temp___old_897))

;; H
  (assert (= temp___old_897 model__split_fields))

(define-fun usf2 () us_rep1 (rec__list_allocator__m__t__allocated
                            model__split_fields))

(define-fun usf3 () us_rep1 (rec__list_allocator__m__t__available
                            model__split_fields))

(define-fun usf4 () us_rep1 (rec__list_allocator__m__t__allocated
                            model__split_fields))

;; H
  (assert
  (forall ((model__split_fields1 us_split_fields2)) (length__function_guard
  (length (rec__list_allocator__m__t__allocated model__split_fields1))
  (rec__list_allocator__m__t__allocated model__split_fields1))))

(define-fun usf5 () Int (length
                        (rec__list_allocator__m__t__allocated
                        model__split_fields)))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 prev_alloc false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 next_alloc false false true true))

(declare-const o Bool)

(declare-const o1 Int)

;; H
  (assert
  (ite (not (= res 0))
  (and (and (<= 1 res) (<= res 3))
  (and
  (= (to_rep1
     (rec__list_allocator__cell__stat (us_split_fields1 (select data res)))) 
  o1) (= o (ite (= o1 1) true false)))) (= o false)))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch o))

;; H
  (assert (= spark__branch true))

;; Assert
  (assert (and (<= 1 res) (<= res 3)))

(declare-const o2 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_allocator__cell__prev (us_split_fields1 (select data res)))) 
  o2))

(declare-const prev_alloc1 Int)

;; H
  (assert (= prev_alloc1 o2))

;; Assert
  (assert (and (<= 1 res) (<= res 3)))

(declare-const o3 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_allocator__cell__next (us_split_fields1 (select data res)))) 
  o3))

(declare-const next_alloc1 Int)

;; H
  (assert (= next_alloc1 o3))

(declare-const o4 resource)

;; Ensures
  (assert (= (to_rep o4) first_available))

(declare-const o5 status)

;; Ensures
  (assert (= (to_rep1 o5) 0))

;; Assert
  (assert (and (<= 1 res) (<= res 3)))

(declare-const data1 (Array Int us_rep))

;; H
  (assert
  (= data1 (store data res (us_repqtmk (us_split_fieldsqtmk o5 rliteral o4)))))

(declare-const spark__branch1 Bool)

(declare-const data2 (Array Int us_rep))

;; H
  (assert (= spark__branch1 (ite (= prev_alloc1 0) false true)))

(declare-const o6 resource)

;; H
  (assert
  (ite (= spark__branch1 true)
  (let ((q_ (us_split_fields1 (select data1 prev_alloc1))))
  (and (= (to_rep o6) next_alloc1)
  (and (and (<= 1 prev_alloc1) (<= prev_alloc1 3))
  (= data2 (store data1 prev_alloc1 (us_repqtmk
                                    (us_split_fieldsqtmk
                                    (rec__list_allocator__cell__stat q_)
                                    (rec__list_allocator__cell__prev q_) 
                                    o6)))))))
  (= data2 data1)))

(declare-const spark__branch2 Bool)

(declare-const data3 (Array Int us_rep))

;; H
  (assert (= spark__branch2 (ite (= next_alloc1 0) false true)))

(declare-const o7 resource)

;; H
  (assert
  (ite (= spark__branch2 true)
  (let ((q_ (us_split_fields1 (select data2 next_alloc1))))
  (and (= (to_rep o7) prev_alloc1)
  (and (and (<= 1 next_alloc1) (<= next_alloc1 3))
  (= data3 (store data2 next_alloc1 (us_repqtmk
                                    (us_split_fieldsqtmk
                                    (rec__list_allocator__cell__stat q_) 
                                    o7 (rec__list_allocator__cell__next q_))))))))
  (= data3 data2)))

(declare-const first_available1 Int)

;; H
  (assert (= first_available1 res))

(declare-const first_allocated1 Int)

(declare-const spark__branch3 Bool)

;; H
  (assert (= spark__branch3 (ite (= res first_allocated) true false)))

;; H
  (assert
  (ite (= spark__branch3 true) (= first_allocated1 next_alloc1)
  (= first_allocated1 first_allocated)))

(define-fun o8 () Int res)

(define-fun o9 () us_rep1 (rec__list_allocator__m__t__allocated
                          model__split_fields))

(define-fun o10 () Int (find o9 o8))

;; H
  (assert
  (forall ((o11 Int) (o12 us_rep1)) (mem__function_guard (mem o12 o11) o12
  o11)))

;; H
  (assert (forall ((o11 us_rep1)) (length__function_guard (length o11) o11)))

;; H
  (assert
  (forall ((o11 us_rep1) (o12 Int)) (get__function_guard (get o11 o12) o11
  o12)))

;; H
  (assert (find__function_guard o10 o9 o8))

;; H
  (assert (dynamic_invariant o10 true false true true))

;; H
  (assert
  (ite (= (mem o9 o8) true)
  (and (and (<= 1 o10) (<= o10 (length o9))) (= (get o9 o10) o8)) (= 
  o10 0)))

;; Ensures
  (assert (in_range2 o10))

(define-fun o11 () us_rep1 (rec__list_allocator__m__t__allocated
                           model__split_fields))

(define-fun o12 () us_rep1 (remove_at o11 o10))

;; H
  (assert
  (forall ((o13 Int) (o14 us_rep1) (o15 us_rep1))
  (is_removed_at__function_guard (is_removed_at o14 o13 o15) o14 o13 o15)))

;; H
  (assert (remove_at__function_guard o12 o11 o10))

;; H
  (assert true)

;; H
  (assert (= (is_removed_at o11 o10 o12) true))

(declare-const model__split_fields1 us_split_fields2)

;; H
  (assert
  (= model__split_fields1 (us_split_fieldsqtmk1
                          (rec__list_allocator__m__t__available
                          model__split_fields) o12)))

(define-fun o13 () Int res)

(define-fun o14 () us_rep1 (rec__list_allocator__m__t__available
                           model__split_fields1))

(define-fun o15 () us_rep1 (prepend o14 o13))

;; H
  (assert
  (forall ((o16 Int) (o17 us_rep1) (o18 us_rep1)) (is_prepend__function_guard
  (is_prepend o17 o16 o18) o17 o16 o18)))

;; H
  (assert (prepend__function_guard o15 o14 o13))

;; H
  (assert true)

;; H
  (assert (= (is_prepend o14 o13 o15) true))

(declare-const model__split_fields2 us_split_fields2)

;; H
  (assert
  (= model__split_fields2 (us_split_fieldsqtmk1 o15
                          (rec__list_allocator__m__t__allocated
                          model__split_fields1))))

(declare-const j Int)

;; H
  (assert
  (forall ((model__split_fields3 us_split_fields2)) (length__function_guard
  (length (rec__list_allocator__m__t__available model__split_fields3))
  (rec__list_allocator__m__t__available model__split_fields3))))

;; H
  (assert (<= 1 j))

;; H
  (assert
  (<= j (length (rec__list_allocator__m__t__available model__split_fields2))))

;; H
  (assert
  (forall ((model__split_fields3 us_split_fields2) (j1 Int))
  (get__function_guard
  (get (rec__list_allocator__m__t__available model__split_fields3) j1)
  (rec__list_allocator__m__t__available model__split_fields3) j1)))

(assert
;; defqtvc
 ;; File "list_allocator.ads", line 76, characters 0-0
  (not (in_range7
  (get (rec__list_allocator__m__t__available model__split_fields2) j))))
(check-sat)
