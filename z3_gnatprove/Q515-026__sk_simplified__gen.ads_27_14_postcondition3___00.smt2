;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort word64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (word64 word64) Bool)

(declare-const dummy word64)

(declare-datatypes ()
((word64__ref (word64__refqtmk (word64__content word64)))))
(define-fun word64__ref_word64__content__projection ((a word64__ref)) word64 
  (word64__content a))

(declare-fun to_rep (word64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) word64)

;; inversion_axiom
  (assert
  (forall ((x word64)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x word64)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x word64)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__gen__segment_type__selector word64)))))
(define-fun us_split_fields_rec__gen__segment_type__selector__projection ((a us_split_fields)) word64 
  (rec__gen__segment_type__selector a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__gen__segment_type__selector
                           (us_split_fields1 a))) (to_rep
                                                  (rec__gen__segment_type__selector
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const gen__segment_type__selector__first__bit Int)

(declare-const gen__segment_type__selector__last__bit Int)

(declare-const gen__segment_type__selector__position Int)

;; gen__segment_type__selector__first__bit_axiom
  (assert (<= 0 gen__segment_type__selector__first__bit))

;; gen__segment_type__selector__last__bit_axiom
  (assert
  (< gen__segment_type__selector__first__bit gen__segment_type__selector__last__bit))

;; gen__segment_type__selector__position_axiom
  (assert (<= 0 gen__segment_type__selector__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((segment_type__ref (segment_type__refqtmk (segment_type__content us_rep)))))
(define-fun segment_type__ref_segment_type__content__projection ((a segment_type__ref)) us_rep 
  (segment_type__content a))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__gen__subject_state_type__regs word64)(rec__gen__subject_state_type__exit_reason word64)(rec__gen__subject_state_type__exit_qualification word64)(rec__gen__subject_state_type__guest_phys_addr word64)(rec__gen__subject_state_type__instruction_len word64)(rec__gen__subject_state_type__rip word64)(rec__gen__subject_state_type__rsp word64)(rec__gen__subject_state_type__cr0 word64)(rec__gen__subject_state_type__shadow_cr0 word64)(rec__gen__subject_state_type__ldtr us_rep)))))
(define-fun us_split_fields_rec__gen__subject_state_type__regs__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__regs a))

(define-fun us_split_fields_rec__gen__subject_state_type__exit_reason__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__exit_reason a))

(define-fun us_split_fields_rec__gen__subject_state_type__exit_qualification__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__exit_qualification a))

(define-fun us_split_fields_rec__gen__subject_state_type__guest_phys_addr__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__guest_phys_addr a))

(define-fun us_split_fields_rec__gen__subject_state_type__instruction_len__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__instruction_len a))

(define-fun us_split_fields_rec__gen__subject_state_type__rip__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__rip a))

(define-fun us_split_fields_rec__gen__subject_state_type__rsp__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__rsp a))

(define-fun us_split_fields_rec__gen__subject_state_type__cr0__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__cr0 a))

(define-fun us_split_fields_rec__gen__subject_state_type__shadow_cr0__projection ((a us_split_fields2)) word64 
  (rec__gen__subject_state_type__shadow_cr0 a))

(define-fun us_split_fields_rec__gen__subject_state_type__ldtr__projection ((a us_split_fields2)) us_rep 
  (rec__gen__subject_state_type__ldtr a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__gen__subject_state_type__regs
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__regs
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__gen__subject_state_type__exit_reason
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__exit_reason
                                                   (us_split_fields3 b)))))
                         (and
                         (and
                         (and
                         (= (to_rep
                            (rec__gen__subject_state_type__exit_qualification
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__exit_qualification
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__gen__subject_state_type__guest_phys_addr
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__guest_phys_addr
                                                   (us_split_fields3 b)))))
                         (and
                         (= (to_rep
                            (rec__gen__subject_state_type__instruction_len
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__instruction_len
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__gen__subject_state_type__rip
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__rip
                                                   (us_split_fields3 b))))))
                         (and
                         (and
                         (= (to_rep
                            (rec__gen__subject_state_type__rsp
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__rsp
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__gen__subject_state_type__cr0
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__cr0
                                                   (us_split_fields3 b)))))
                         (and
                         (= (to_rep
                            (rec__gen__subject_state_type__shadow_cr0
                            (us_split_fields3 a))) (to_rep
                                                   (rec__gen__subject_state_type__shadow_cr0
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__gen__subject_state_type__ldtr
                            (us_split_fields3 a))
                            (rec__gen__subject_state_type__ldtr
                            (us_split_fields3 b))) true)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const gen__subject_state_type__regs__first__bit Int)

(declare-const gen__subject_state_type__regs__last__bit Int)

(declare-const gen__subject_state_type__regs__position Int)

;; gen__subject_state_type__regs__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__regs__first__bit))

;; gen__subject_state_type__regs__last__bit_axiom
  (assert
  (< gen__subject_state_type__regs__first__bit gen__subject_state_type__regs__last__bit))

;; gen__subject_state_type__regs__position_axiom
  (assert (<= 0 gen__subject_state_type__regs__position))

(declare-const gen__subject_state_type__exit_reason__first__bit Int)

(declare-const gen__subject_state_type__exit_reason__last__bit Int)

(declare-const gen__subject_state_type__exit_reason__position Int)

;; gen__subject_state_type__exit_reason__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__exit_reason__first__bit))

;; gen__subject_state_type__exit_reason__last__bit_axiom
  (assert
  (< gen__subject_state_type__exit_reason__first__bit gen__subject_state_type__exit_reason__last__bit))

;; gen__subject_state_type__exit_reason__position_axiom
  (assert (<= 0 gen__subject_state_type__exit_reason__position))

(declare-const gen__subject_state_type__exit_qualification__first__bit Int)

(declare-const gen__subject_state_type__exit_qualification__last__bit Int)

(declare-const gen__subject_state_type__exit_qualification__position Int)

;; gen__subject_state_type__exit_qualification__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__exit_qualification__first__bit))

;; gen__subject_state_type__exit_qualification__last__bit_axiom
  (assert
  (< gen__subject_state_type__exit_qualification__first__bit gen__subject_state_type__exit_qualification__last__bit))

;; gen__subject_state_type__exit_qualification__position_axiom
  (assert (<= 0 gen__subject_state_type__exit_qualification__position))

(declare-const gen__subject_state_type__guest_phys_addr__first__bit Int)

(declare-const gen__subject_state_type__guest_phys_addr__last__bit Int)

(declare-const gen__subject_state_type__guest_phys_addr__position Int)

;; gen__subject_state_type__guest_phys_addr__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__guest_phys_addr__first__bit))

;; gen__subject_state_type__guest_phys_addr__last__bit_axiom
  (assert
  (< gen__subject_state_type__guest_phys_addr__first__bit gen__subject_state_type__guest_phys_addr__last__bit))

;; gen__subject_state_type__guest_phys_addr__position_axiom
  (assert (<= 0 gen__subject_state_type__guest_phys_addr__position))

(declare-const gen__subject_state_type__instruction_len__first__bit Int)

(declare-const gen__subject_state_type__instruction_len__last__bit Int)

(declare-const gen__subject_state_type__instruction_len__position Int)

;; gen__subject_state_type__instruction_len__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__instruction_len__first__bit))

;; gen__subject_state_type__instruction_len__last__bit_axiom
  (assert
  (< gen__subject_state_type__instruction_len__first__bit gen__subject_state_type__instruction_len__last__bit))

;; gen__subject_state_type__instruction_len__position_axiom
  (assert (<= 0 gen__subject_state_type__instruction_len__position))

(declare-const gen__subject_state_type__rip__first__bit Int)

(declare-const gen__subject_state_type__rip__last__bit Int)

(declare-const gen__subject_state_type__rip__position Int)

;; gen__subject_state_type__rip__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__rip__first__bit))

;; gen__subject_state_type__rip__last__bit_axiom
  (assert
  (< gen__subject_state_type__rip__first__bit gen__subject_state_type__rip__last__bit))

;; gen__subject_state_type__rip__position_axiom
  (assert (<= 0 gen__subject_state_type__rip__position))

(declare-const gen__subject_state_type__rsp__first__bit Int)

(declare-const gen__subject_state_type__rsp__last__bit Int)

(declare-const gen__subject_state_type__rsp__position Int)

;; gen__subject_state_type__rsp__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__rsp__first__bit))

;; gen__subject_state_type__rsp__last__bit_axiom
  (assert
  (< gen__subject_state_type__rsp__first__bit gen__subject_state_type__rsp__last__bit))

;; gen__subject_state_type__rsp__position_axiom
  (assert (<= 0 gen__subject_state_type__rsp__position))

(declare-const gen__subject_state_type__cr0__first__bit Int)

(declare-const gen__subject_state_type__cr0__last__bit Int)

(declare-const gen__subject_state_type__cr0__position Int)

;; gen__subject_state_type__cr0__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__cr0__first__bit))

;; gen__subject_state_type__cr0__last__bit_axiom
  (assert
  (< gen__subject_state_type__cr0__first__bit gen__subject_state_type__cr0__last__bit))

;; gen__subject_state_type__cr0__position_axiom
  (assert (<= 0 gen__subject_state_type__cr0__position))

(declare-const gen__subject_state_type__shadow_cr0__first__bit Int)

(declare-const gen__subject_state_type__shadow_cr0__last__bit Int)

(declare-const gen__subject_state_type__shadow_cr0__position Int)

;; gen__subject_state_type__shadow_cr0__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__shadow_cr0__first__bit))

;; gen__subject_state_type__shadow_cr0__last__bit_axiom
  (assert
  (< gen__subject_state_type__shadow_cr0__first__bit gen__subject_state_type__shadow_cr0__last__bit))

;; gen__subject_state_type__shadow_cr0__position_axiom
  (assert (<= 0 gen__subject_state_type__shadow_cr0__position))

(declare-const gen__subject_state_type__ldtr__first__bit Int)

(declare-const gen__subject_state_type__ldtr__last__bit Int)

(declare-const gen__subject_state_type__ldtr__position Int)

;; gen__subject_state_type__ldtr__first__bit_axiom
  (assert (<= 0 gen__subject_state_type__ldtr__first__bit))

;; gen__subject_state_type__ldtr__last__bit_axiom
  (assert
  (< gen__subject_state_type__ldtr__first__bit gen__subject_state_type__ldtr__last__bit))

;; gen__subject_state_type__ldtr__position_axiom
  (assert (<= 0 gen__subject_state_type__ldtr__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ()
((subject_state_type__ref
 (subject_state_type__refqtmk (subject_state_type__content us_rep1)))))
(define-fun subject_state_type__ref_subject_state_type__content__projection ((a subject_state_type__ref)) us_rep1 
  (subject_state_type__content a))

(declare-const e us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_159 (_ BitVec 64))
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)

;; Assume
  (assert true)

(declare-const gen__get_val__result Int)

;; H
  (assert (= gen__get_val__result 0))

(assert
;; defqtvc
 ;; File "gen.ads", line 24, characters 0-0
  (not false))
(check-sat)
