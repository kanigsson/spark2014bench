(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort value 0)

(declare-fun valueqtint (value) Int)

;; value'axiom
  (assert
  (forall ((i value))
  (and (<= (- 23) (valueqtint i)) (<= (valueqtint i) 69))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 23) x) (<= x 69)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (value value) Bool)

(declare-const dummy value)

(declare-datatypes () ((value__ref (value__refqtmk (value__content value)))))
(define-fun value__ref_value__content__projection ((a value__ref)) value 
  (value__content a))

(define-fun to_rep ((x value)) Int (valueqtint x))

(declare-fun of_rep (Int) value)

;; inversion_axiom
  (assert
  (forall ((x value)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x value)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int value))))))
(declare-fun slide ((Array Int value) Int Int) (Array Int value))

;; slide_eq
  (assert
  (forall ((a (Array Int value)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int value)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int value)) (a__first Int) (a__last Int)
  (b (Array Int value)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int value)) (b (Array Int value)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-fun create_step_array (Int) (Array Int value))

(declare-fun create_step_array__function_guard ((Array Int value) Int) Bool)

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 1001))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 1001)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (index index) Bool)

(declare-const dummy1 index)

(declare-datatypes () ((index__ref (index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(define-fun dynamic_invariant ((temp___expr_169 Int)
  (temp___is_init_165 Bool) (temp___skip_constant_166 Bool)
  (temp___do_toplevel_167 Bool)
  (temp___do_typ_inv_168 Bool)) Bool (=>
                                     (or (= temp___is_init_165 true)
                                     (<= 0 1001)) (in_range2
                                     temp___expr_169)))

;; create_step_array__post_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true true)
     (let ((result (create_step_array i)))
     (=> (create_step_array__function_guard result i)
     (forall ((j Int))
     (=> (and (<= 0 j) (<= j 1001))
     (and (=> (< j i) (= (to_rep (select result j)) (- 23)))
     (=> (<= i j) (= (to_rep (select result j)) 69)))))))) :pattern (
  (create_step_array i)) )))

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort counter 0)

(declare-fun counterqtint (counter) Int)

;; counter'axiom
  (assert
  (forall ((i1 counter))
  (and (<= 0 (counterqtint i1)) (<= (counterqtint i1) 1002))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1002)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (counter counter) Bool)

(declare-const dummy2 counter)

(declare-datatypes ()
((counter__ref (counter__refqtmk (counter__content counter)))))
(define-fun counter__ref_counter__content__projection ((a counter__ref)) counter 
  (counter__content a))

(define-fun dynamic_invariant1 ((temp___expr_162 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)
  (temp___do_typ_inv_161 Bool)) Bool (=>
                                     (or (= temp___is_init_158 true)
                                     (<= 0 1002)) (in_range3
                                     temp___expr_162)))

(define-fun dynamic_invariant2 ((temp___expr_176 Int)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)
  (temp___do_typ_inv_175 Bool)) Bool (=>
                                     (or (= temp___is_init_172 true)
                                     (<= (- 23) 69)) (in_range1
                                     temp___expr_176)))

(declare-const step (Array Int value))

;; Assume
  (assert (dynamic_invariant i true false true true))

;; Assume
  (assert true)

;; Assume
  (assert true)

(declare-const c Int)

;; H
  (assert (= c 0))

;; Assume
  (assert (dynamic_invariant1 c true false true true))

(define-fun o () Int i)

(define-fun o1 () (Array Int value) (create_step_array o))

;; H
  (assert (create_step_array__function_guard o1 o))

;; H
  (assert true)

;; H
  (assert
  (forall ((j Int))
  (=> (and (<= 0 j) (<= j 1001))
  (and (=> (< j o) (= (to_rep (select o1 j)) (- 23)))
  (=> (<= o j) (= (to_rep (select o1 j)) 69))))))

(declare-const step1 (Array Int value))

;; H
  (assert (= step1 o1))

(declare-const c1 Int)

(declare-const j Int)

;; H
  (assert (= j 0))

;; H
  (assert
  (ite (= (and (ite (<= 0 j) true false) (ite (<= j 1001) true false)) true)
  (exists ((spark__branch Bool) (c2 Int))
  (and
  (exists ((o2 Int))
  (and (= (to_rep (select step1 j)) o2)
  (and (= spark__branch (ite (= o2 (- 23)) true false))
  (ite (= spark__branch true)
  (let ((o3 (+ c 1))) (and (in_range3 o3) (= c2 o3))) (= c2 c)))))
  (exists ((j1 Int))
  (and
  (and
  (and
  (forall ((k Int))
  (=> (and (<= 0 k) (<= k 1001))
  (and (=> (< k i) (= (to_rep (select step1 k)) (- 23)))
  (=> (<= i k) (= (to_rep (select step1 k)) 69)))))
  (=> (< j1 i) (= c1 (+ j1 1)))) (=> (<= i j1) (= c1 i)))
  (and
  (= (and (ite (and (dynamic_invariant1 c1 true true true true) (in_range2
               j1))
          true false) (ite (and (<= 0 j1) (<= j1 1001)) true false)) true)
  (= j1 1001)))))) (= c1 c)))

(declare-const complex_arrays__use_step_array__result Int)

;; H
  (assert (= complex_arrays__use_step_array__result c1))

(assert
;; defqtvc
 ;; File "complex_arrays.adb", line 171, characters 0-0
  (not (= i complex_arrays__use_step_array__result)))
(check-sat)
