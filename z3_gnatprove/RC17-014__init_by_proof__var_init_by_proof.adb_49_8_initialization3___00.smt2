(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort my_nat 0)

(declare-fun my_natqtint (my_nat) Int)

;; my_nat'axiom
  (assert
  (forall ((i my_nat))
  (and (<= 10 (my_natqtint i)) (<= (my_natqtint i) 150))))

(define-fun in_range ((x Int)) Bool (and (<= 10 x) (<= x 150)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (my_nat my_nat) Bool)

(declare-const dummy my_nat)

(declare-datatypes ()
((my_nat__ref (my_nat__refqtmk (my_nat__content my_nat)))))
(define-fun my_nat__ref_my_nat__content__projection ((a my_nat__ref)) my_nat 
  (my_nat__content a))

(define-fun dynamic_invariant ((temp___expr_188 Int)
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)
  (temp___do_typ_inv_187 Bool)) Bool (=>
                                     (or (= temp___is_init_184 true)
                                     (<= 10 150)) (in_range temp___expr_188)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const g Int)

(declare-const x Int)

(declare-const y Int)

(declare-const z Int)

(declare-const w Int)

(declare-const g__attr__init Bool)

;; H
  (assert (= g__attr__init false))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant g g__attr__init false true true))

(declare-const x__attr__init Bool)

;; H
  (assert (= x__attr__init false))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant x x__attr__init false true true))

(declare-const y__attr__init Bool)

;; H
  (assert (= y__attr__init false))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant y y__attr__init false true true))

(declare-const z__attr__init Bool)

;; H
  (assert (= z__attr__init false))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant z z__attr__init false true true))

(declare-const w__attr__init Bool)

;; H
  (assert (= w__attr__init false))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant w w__attr__init false true true))

(declare-const x__attr__init1 Bool)

;; H
  (assert (= x__attr__init1 true))

(declare-const x1 Int)

;; H
  (assert (= x1 13))

(declare-const y__attr__init1 Bool)

;; H
  (assert (= y__attr__init1 true))

;; Assert
  (assert (= x__attr__init1 true))

(declare-const y1 Int)

;; H
  (assert (= y1 x1))

(declare-const x__attr__init2 Bool)

(declare-const x2 Int)

(declare-const o Int)

;; H
  (assert (= o x2))

;; Ensures
  (assert (dynamic_invariant o x__attr__init2 true true true))

;; Assume
  (assert (= x__attr__init2 true))

;; Assert
  (assert (= x__attr__init2 true))

(declare-const y2 Int)

;; Ensures
  (assert (dynamic_invariant y2 true true true true))

;; Assert
  (assert (= y__attr__init1 true))

;; Assert
  (assert (= y__attr__init1 true))

(declare-const z__attr__init1 Bool)

(declare-const o1 Int)

;; Ensures
  (assert (dynamic_invariant o1 z__attr__init1 true true true))

;; Assume
  (assert (= z__attr__init1 true))

(declare-const w1 Int)

;; Ensures
  (assert (dynamic_invariant w1 true true true true))

(assert
;; defqtvc
 ;; File "var_init_by_proof.adb", line 2, characters 0-0
  (not (= w__attr__init true)))
(check-sat)
