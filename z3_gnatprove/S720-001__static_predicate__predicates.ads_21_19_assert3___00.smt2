(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float32)))))
(declare-sort float__ 0)

(declare-fun user_eq (float__ float__) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy float__)

(declare-datatypes ()
((float____ref (float____refqtmk (float____content float__)))))
(define-fun float____ref_float____content__projection ((a float____ref)) float__ 
  (float____content a))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-const x0 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const x1 Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun test1 (Float32) Bool)

(declare-fun test1__function_guard (Bool Float32) Bool)

(declare-sort t1 0)

(declare-fun user_eq5 (t1 t1) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-const dummy5 t1)

(declare-datatypes () ((t1__ref (t1__refqtmk (t1__content t1)))))
(define-fun t1__ref_t1__content__projection ((a t1__ref)) t1 (t1__content a))

;; test1__post_axiom
  (assert true)

;; test1__def_axiom
  (assert
  (forall ((x Float32))
  (! (= (= (test1 x) true)
     (and (fp.isFinite32 x)
     (not (fp.eq x (fp #b0 #b00000000 #b00000000000000000000000))))) :pattern (
  (test1 x)) )))

(declare-const y0 (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y1 (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun test2 (us_t) Bool)

(declare-fun test2__function_guard (Bool us_t) Bool)

(define-fun dynamic_invariant1 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-datatypes () ((t2__ref (t2__refqtmk (t2__content us_t)))))
(define-fun t2__ref_t2__content__projection ((a t2__ref)) us_t (t2__content
                                                               a))

(declare-fun temp___String_Literal_178 (tuple0) (Array Int character))

;; temp___String_Literal_178__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_178 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_178 us_void_param) 2)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_178 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_178 us_void_param) 4)) 111))) :pattern (
  (temp___String_Literal_178 us_void_param)) )))

(declare-fun temp___String_Literal_179 (tuple0) (Array Int character))

;; temp___String_Literal_179__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_179 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_179 us_void_param) 2)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_179 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_179 us_void_param) 4)) 105))) :pattern (
  (temp___String_Literal_179 us_void_param)) )))

;; test2__post_axiom
  (assert true)

;; test2__def_axiom
  (assert
  (forall ((x us_t))
  (! (= (= (test2 x) true)
     (let ((temp___208 (of_array (to_array x) (first1 x) (last1 x))))
     (or
     (= (bool_eq1 temp___208
        (of_array (temp___String_Literal_179 Tuple0) 1 4)) true)
     (= (bool_eq1 temp___208
        (of_array (temp___String_Literal_178 Tuple0) 1 4)) true)))) :pattern (
  (test2 x)) )))

(declare-sort tTy0SP1 0)

(declare-fun tTy0SP1qtint (tTy0SP1) Int)

;; tTy0SP1'axiom
  (assert
  (forall ((i tTy0SP1))
  (and (<= 1 (tTy0SP1qtint i)) (<= (tTy0SP1qtint i) 4))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (tTy0SP1 tTy0SP1) Bool)

(declare-const dummy6 tTy0SP1)

(declare-datatypes ()
((tTy0SP1__ref (tTy0SP1__refqtmk (tTy0SP1__content tTy0SP1)))))
(define-fun tTy0SP1__ref_tTy0SP1__content__projection ((a tTy0SP1__ref)) tTy0SP1 
  (tTy0SP1__content a))

(declare-fun temp___String_Literal_155 (tuple0) (Array Int character))

;; temp___String_Literal_155__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 2)) 117))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 4)) 117))) :pattern (
  (temp___String_Literal_155 us_void_param)) )))

(declare-sort tTy1SP1 0)

(declare-fun tTy1SP1qtint (tTy1SP1) Int)

;; tTy1SP1'axiom
  (assert
  (forall ((i tTy1SP1))
  (and (<= 1 (tTy1SP1qtint i)) (<= (tTy1SP1qtint i) 4))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (tTy1SP1 tTy1SP1) Bool)

(declare-const dummy7 tTy1SP1)

(declare-datatypes ()
((tTy1SP1__ref (tTy1SP1__refqtmk (tTy1SP1__content tTy1SP1)))))
(define-fun tTy1SP1__ref_tTy1SP1__content__projection ((a tTy1SP1__ref)) tTy1SP1 
  (tTy1SP1__content a))

(declare-fun temp___String_Literal_156 (tuple0) (Array Int character))

;; temp___String_Literal_156__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 2)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 3)) 116)
     (= (to_rep (select (temp___String_Literal_156 us_void_param) 4)) 111))) :pattern (
  (temp___String_Literal_156 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant5 ((temp___expr_164 Float32)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)
  (temp___do_typ_inv_163 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_160 true)
                                     (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                     (fp.isFinite32 temp___expr_164))
                                     (=> (= temp___do_toplevel_162 true)
                                     (=> (= temp___is_init_160 true)
                                     (not (fp.eq temp___expr_164 (fp #b0 #b00000000 #b00000000000000000000000)))))))

(define-fun dynamic_predicate ((temp___168 Float32)) Bool (not (fp.eq temp___168 (fp #b0 #b00000000 #b00000000000000000000000))))

;; x0__def_axiom
  (assert (= x0 (fp #b0 #b00000000 #b00000000000000000000000)))

;; x1__def_axiom
  (assert (= x1 (fp #b0 #b01111111 #b00000000000000000000000)))

(define-fun dynamic_invariant6 ((temp___expr_176 us_t)
  (temp___is_init_172 Bool) (temp___skip_constant_173 Bool)
  (temp___do_toplevel_174 Bool)
  (temp___do_typ_inv_175 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_173 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_176)
                                     (last1 temp___expr_176)))
                                     (=> (= temp___do_toplevel_174 true)
                                     (=> (= temp___is_init_172 true)
                                     (or
                                     (= (bool_eq1 temp___expr_176
                                        (of_array
                                        (temp___String_Literal_179 Tuple0) 1
                                        4)) true)
                                     (= (bool_eq1 temp___expr_176
                                        (of_array
                                        (temp___String_Literal_178 Tuple0) 1
                                        4)) true))))))

(define-fun dynamic_predicate1 ((temp___181 us_t)) Bool (or
                                                        (= (bool_eq1
                                                           temp___181
                                                           (of_array
                                                           (temp___String_Literal_179
                                                           Tuple0) 1 4)) true)
                                                        (= (bool_eq1
                                                           temp___181
                                                           (of_array
                                                           (temp___String_Literal_178
                                                           Tuple0) 1 4)) true)))

;; y0__def_axiom
  (assert (= y0 (temp___String_Literal_155 Tuple0)))

;; y1__def_axiom
  (assert (= y1 (temp___String_Literal_156 Tuple0)))

;; Assume
  (assert (dynamic_invariant x0 true false true true))

;; Assume
  (assert (dynamic_invariant x1 true false true true))

;; H
  (assert (test1__function_guard (test1 x0) x0))

;; Assert
  (assert (not (= (test1 x0) true)))

;; H
  (assert (test1__function_guard (test1 x1) x1))

;; Assert
  (assert (= (test1 x1) true))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; H
  (assert (test2__function_guard (test2 (of_array y0 1 4))
  (of_array y0 1 4)))

;; Assert
  (assert (not (= (test2 (of_array y0 1 4)) true)))

;; H
  (assert (test2__function_guard (test2 (of_array y1 1 4))
  (of_array y1 1 4)))

(assert
;; defqtvc
 ;; File "predicates.ads", line 1, characters 0-0
  (not (= (test2 (of_array y1 1 4)) true)))
(check-sat)

(exit)
