(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy2 (Array Int natural))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 ((Array Int natural) (Array Int natural)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__composite_cursors__cont1__content (Array Int natural))(rec__composite_cursors__cont1__length natural)))))
(define-fun us_split_fields_rec__composite_cursors__cont1__content__projection ((a us_split_fields)) (Array Int natural) 
  (rec__composite_cursors__cont1__content a))

(define-fun us_split_fields_rec__composite_cursors__cont1__length__projection ((a us_split_fields)) natural 
  (rec__composite_cursors__cont1__length a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq
                           (rec__composite_cursors__cont1__content
                           (us_split_fields1 a)) 1 100
                           (rec__composite_cursors__cont1__content
                           (us_split_fields1 b)) 1 100) true)
                        (= (to_rep
                           (rec__composite_cursors__cont1__length
                           (us_split_fields1 a))) (to_rep
                                                  (rec__composite_cursors__cont1__length
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const composite_cursors__cont1__content__first__bit Int)

(declare-const composite_cursors__cont1__content__last__bit Int)

(declare-const composite_cursors__cont1__content__position Int)

;; composite_cursors__cont1__content__first__bit_axiom
  (assert (<= 0 composite_cursors__cont1__content__first__bit))

;; composite_cursors__cont1__content__last__bit_axiom
  (assert
  (< composite_cursors__cont1__content__first__bit composite_cursors__cont1__content__last__bit))

;; composite_cursors__cont1__content__position_axiom
  (assert (<= 0 composite_cursors__cont1__content__position))

(declare-const composite_cursors__cont1__length__first__bit Int)

(declare-const composite_cursors__cont1__length__last__bit Int)

(declare-const composite_cursors__cont1__length__position Int)

;; composite_cursors__cont1__length__first__bit_axiom
  (assert (<= 0 composite_cursors__cont1__length__first__bit))

;; composite_cursors__cont1__length__last__bit_axiom
  (assert
  (< composite_cursors__cont1__length__first__bit composite_cursors__cont1__length__last__bit))

;; composite_cursors__cont1__length__position_axiom
  (assert (<= 0 composite_cursors__cont1__length__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((cont1__ref (cont1__refqtmk (cont1__content us_rep)))))
(define-fun cont1__ref_cont1__content__projection ((a cont1__ref)) us_rep 
  (cont1__content a))

(declare-const c us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const p (Array Int natural))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun has_element (us_rep (Array Int natural)) Bool)

(declare-fun has_element__function_guard (Bool us_rep
  (Array Int natural)) Bool)

(define-fun dynamic_invariant ((temp___expr_185 us_rep)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)
  (temp___do_typ_inv_184 Bool)) Bool (=> (= temp___do_toplevel_183 true)
                                     (=> (= temp___is_init_181 true)
                                     (<= (to_rep
                                         (rec__composite_cursors__cont1__length
                                         (us_split_fields1 temp___expr_185))) 100))))

(define-fun dynamic_predicate ((temp___194 us_rep)) Bool (<= (to_rep
                                                             (rec__composite_cursors__cont1__length
                                                             (us_split_fields1
                                                             temp___194))) 100))

;; has_element__post_axiom
  (assert true)

;; has_element__def_axiom
  (assert
  (forall ((c1 us_rep))
  (forall ((p1 (Array Int natural)))
  (! (= (= (has_element c1 p1) true)
     (let ((temp___209 (to_rep (select p1 1))))
     (and (<= 1 temp___209)
     (<= temp___209 (to_rep
                    (rec__composite_cursors__cont1__length
                    (us_split_fields1 c1))))))) :pattern ((has_element c1 p1)) ))))

(declare-const i17s us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun temp_____aggregate_def_212 (Int) (Array Int natural))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

;; def_axiom
  (assert
  (forall ((temp___214 Int))
  (=> (dynamic_invariant1 temp___214 true true true true)
  (= (to_rep (select (temp_____aggregate_def_212 temp___214) 1)) temp___214))))

;; Assume
  (assert (dynamic_invariant i17s true false true true))

;; Assume
  (assert (dynamic_invariant i17s true false true true))

;; Assume
  (assert (dynamic_invariant c true false true true))

;; Assume
  (assert true)

;; H
  (assert (has_element__function_guard (has_element c p) c p))

;; Assume
  (assert (= (has_element c p) true))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep (select p 1)) o))

(assert
;; defqtvc
 ;; File "composite_cursors.ads", line 20, characters 0-0
  (not (in_range (+ o 1))))
(check-sat)
