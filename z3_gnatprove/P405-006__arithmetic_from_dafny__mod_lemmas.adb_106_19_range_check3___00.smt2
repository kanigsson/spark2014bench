;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort small_integer 0)

(declare-fun small_integerqtint (small_integer) Int)

;; small_integer'axiom
  (assert
  (forall ((i small_integer))
  (and (<= (- 1000) (small_integerqtint i)) (<= (small_integerqtint i) 1000))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 1000) x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (small_integer small_integer) Bool)

(declare-const dummy3 small_integer)

(declare-datatypes ()
((small_integer__ref
 (small_integer__refqtmk (small_integer__content small_integer)))))
(define-fun small_integer__ref_small_integer__content__projection ((a small_integer__ref)) small_integer 
  (small_integer__content a))

(declare-sort small_positive 0)

(declare-fun small_positiveqtint (small_positive) Int)

;; small_positive'axiom
  (assert
  (forall ((i small_positive))
  (and (<= 1 (small_positiveqtint i)) (<= (small_positiveqtint i) 1000))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (small_positive small_positive) Bool)

(declare-const dummy4 small_positive)

(declare-datatypes ()
((small_positive__ref
 (small_positive__refqtmk (small_positive__content small_positive)))))
(define-fun small_positive__ref_small_positive__content__projection ((a small_positive__ref)) small_positive 
  (small_positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_180 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)
  (temp___do_typ_inv_179 Bool)) Bool (=>
                                     (or (= temp___is_init_176 true)
                                     (<= (- 1000) 1000)) (in_range3
                                     temp___expr_180)))

(define-fun dynamic_invariant4 ((temp___expr_194 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)
  (temp___do_typ_inv_193 Bool)) Bool (=>
                                     (or (= temp___is_init_190 true)
                                     (<= 1 1000)) (in_range4
                                     temp___expr_194)))

(declare-const x Int)

(declare-const y Int)

(declare-const z Int)

(declare-const r Int)

(declare-const s Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant x false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant y false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant z false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant r false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant s false false true true))

(declare-const x1 Int)

;; H
  (assert (= x1 4))

;; Ensures
  (assert (in_range2 x1))

(declare-const r1 Int)

;; H
  (assert (= r1 0))

;; H
  (assert (dynamic_invariant r1 true true true true))

(declare-const x2 Int)

;; H
  (assert (= x2 2356))

;; Ensures
  (assert (in_range2 x2))

(declare-const r2 Int)

;; H
  (assert (= r2 0))

;; H
  (assert (dynamic_invariant r2 true true true true))

(declare-const x3 Int)

;; H
  (assert (= x3 4))

;; Ensures
  (assert (in_range2 x3))

(declare-const r3 Int)

(declare-const s1 Int)

;; H
  (assert (= r3 0))

;; H
  (assert (= s1 0))

;; H
  (assert (dynamic_invariant r3 true true true true))

;; H
  (assert (dynamic_invariant s1 true true true true))

(declare-const x4 Int)

;; H
  (assert (= x4 4))

(declare-const y1 Int)

;; H
  (assert (= y1 2356))

;; Ensures
  (assert (in_range2 y1))

;; Ensures
  (assert (in_range1 x4))

(declare-const r4 Int)

;; H
  (assert (= r4 x4))

;; H
  (assert (dynamic_invariant r4 true true true true))

(declare-const x5 Int)

;; H
  (assert (= x5 2356))

(declare-const y2 Int)

;; H
  (assert (= y2 4))

;; Ensures
  (assert (in_range2 y2))

(declare-const r5 Int)

;; H
  (assert (<= 0 r5))

;; H
  (assert (<= r5 (- y2 1)))

;; H
  (assert (dynamic_invariant r5 true true true true))

(declare-const x6 Int)

;; H
  (assert (= x6 2356))

(declare-const y3 Int)

;; H
  (assert (= y3 4))

;; Ensures
  (assert (in_range2 y3))

(declare-const r6 Int)

(declare-const s2 Int)

;; H
  (assert (= r6 s2))

;; H
  (assert (dynamic_invariant r6 true true true true))

;; H
  (assert (dynamic_invariant s2 true true true true))

(declare-const x7 Int)

;; H
  (assert (= x7 356))

(declare-const y4 Int)

;; H
  (assert (= y4 43))

(declare-const z1 Int)

;; H
  (assert (= z1 4))

(assert
;; defqtvc
 ;; File "mod_lemmas.adb", line 3, characters 0-0
  (not (in_range4 z1)))
(check-sat)
