(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun last (Int) Int)

(define-fun dynamic_property ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes () ((t__ref (t__refqtmk (t__content integer)))))
(define-fun t__ref_t__content__projection ((a t__ref)) integer (t__content a))

(define-fun dynamic_invariant2 ((temp___expr_158 Int)
  (temp___is_init_154 Bool) (temp___skip_constant_155 Bool)
  (temp___do_toplevel_156 Bool) (temp___do_typ_inv_157 Bool)
  (const_in_loop__B_2__x Int)) Bool (=>
                                    (or (= temp___is_init_154 true)
                                    (<= 1 (last const_in_loop__B_2__x)))
                                    (dynamic_property 1
                                    (last const_in_loop__B_2__x)
                                    temp___expr_158)))

;; last__def_axiom
  (assert
  (forall ((const_in_loop__B_2__x Int))
  (! (= (last const_in_loop__B_2__x) const_in_loop__B_2__x) :pattern (
  (last const_in_loop__B_2__x)) )))

(declare-const z Int)

;; Assume
  (assert (dynamic_invariant1 z false false true true))

(declare-const v1 Int)

;; H
  (assert (= v1 1))

;; Assume
  (assert (dynamic_invariant v1 true false true true))

(declare-const v2 Int)

;; H
  (assert (= v2 1))

;; Assume
  (assert (dynamic_invariant v2 true false true true))

(declare-const z1 Int)

;; H
  (assert (= z1 1))

;; H
  (assert (= (distinct 1 0) true))

(declare-const x Int)

;; H
  (assert (= x z1))

;; Assume
  (assert (dynamic_invariant x true false true true))

(declare-const spark__branch Bool)

(declare-const v11 Int)

;; H
  (assert (= spark__branch (ite (= z1 1) true false)))

;; H
  (assert (ite (= spark__branch true) (= v11 (last x)) (= v11 v1)))

(declare-const v21 Int)

;; H
  (assert (= v21 (last x)))

;; Assert
  (assert (= v11 v21))

(declare-const z2 Int)

(declare-const v12 Int)

(declare-const v22 Int)

(declare-const x1 Int)

;; LoopInvariant
  (assert (= v12 (last x1)))

;; Assume
  (assert
  (and
  (and
  (and (dynamic_invariant1 z2 false true true true) (dynamic_invariant 
  v12 true true true true)) (dynamic_invariant v22 true true true true))
  (dynamic_invariant x1 true true true true)))

(declare-const z3 Int)

;; H
  (assert (= z3 2))

;; H
  (assert (= (distinct 1 0) true))

(declare-const x2 Int)

;; H
  (assert (= x2 z3))

;; Assume
  (assert (dynamic_invariant x2 true false true true))

(declare-const v13 Int)

(declare-const spark__branch1 Bool)

;; H
  (assert (= spark__branch1 (ite (= z3 1) true false)))

;; H
  (assert (ite (= spark__branch1 true) (= v13 (last x2)) (= v13 v12)))

(declare-const v23 Int)

;; H
  (assert (= v23 (last x2)))

;; Assert
  (assert (= v13 v23))

(assert
;; defqtvc
 ;; File "const_in_loop.adb", line 1, characters 0-0
  (not (= v13 (last x2))))
(check-sat)
