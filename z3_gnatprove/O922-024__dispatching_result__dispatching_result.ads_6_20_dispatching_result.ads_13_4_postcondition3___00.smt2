(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__dispatching_result__root__f1 natural)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__dispatching_result__root__f1__projection ((a us_split_fields)) natural 
  (rec__dispatching_result__root__f1 a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__dispatching_result__root__f1
                           (us_split_fields1 a))) (to_rep
                                                  (rec__dispatching_result__root__f1
                                                  (us_split_fields1 b))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dispatching_result__root__f1__first__bit Int)

(declare-const dispatching_result__root__f1__last__bit Int)

(declare-const dispatching_result__root__f1__position Int)

;; dispatching_result__root__f1__first__bit_axiom
  (assert (<= 0 dispatching_result__root__f1__first__bit))

;; dispatching_result__root__f1__last__bit_axiom
  (assert
  (< dispatching_result__root__f1__first__bit dispatching_result__root__f1__last__bit))

;; dispatching_result__root__f1__position_axiom
  (assert (<= 0 dispatching_result__root__f1__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((root__ref (root__refqtmk (root__content us_rep)))))
(define-fun root__ref_root__content__projection ((a root__ref)) us_rep 
  (root__content a))

(declare-const v Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__dispatching_result__child__f2 natural)(rec__dispatching_result__root__f11 natural)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__dispatching_result__child__f2__projection ((a us_split_fields2)) natural 
  (rec__dispatching_result__child__f2 a))

(define-fun us_split_fields_rec__dispatching_result__root__f1__2__projection ((a us_split_fields2)) natural 
  (rec__dispatching_result__root__f11 a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (natural us_private) us_private)

(declare-fun extract__dispatching_result__child__f2 (us_private) natural)

;; extract__dispatching_result__child__f2__conv
  (assert
  (forall ((dispatching_result__child__f2 natural))
  (forall ((rec__ext__2 us_private))
  (= (extract__dispatching_result__child__f2
     (hide_ext__ dispatching_result__child__f2 rec__ext__2)) dispatching_result__child__f2))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (rec__dispatching_result__root__f11
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__dispatching_result__child__f2
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (extract__dispatching_result__child__f2
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__dispatching_result__root__f1
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__dispatching_result__child__f2
                            (us_split_fields3 a))) (to_rep
                                                   (rec__dispatching_result__child__f2
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__dispatching_result__root__f11
                            (us_split_fields3 a))) (to_rep
                                                   (rec__dispatching_result__root__f11
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const dispatching_result__child__f2__first__bit Int)

(declare-const dispatching_result__child__f2__last__bit Int)

(declare-const dispatching_result__child__f2__position Int)

;; dispatching_result__child__f2__first__bit_axiom
  (assert (<= 0 dispatching_result__child__f2__first__bit))

;; dispatching_result__child__f2__last__bit_axiom
  (assert
  (< dispatching_result__child__f2__first__bit dispatching_result__child__f2__last__bit))

;; dispatching_result__child__f2__position_axiom
  (assert (<= 0 dispatching_result__child__f2__position))

(declare-const dispatching_result__root__f1__first__bit1 Int)

(declare-const dispatching_result__root__f1__last__bit1 Int)

(declare-const dispatching_result__root__f1__position1 Int)

;; dispatching_result__root__f1__first__bit_axiom
  (assert (<= 0 dispatching_result__root__f1__first__bit1))

;; dispatching_result__root__f1__last__bit_axiom
  (assert
  (< dispatching_result__root__f1__first__bit1 dispatching_result__root__f1__last__bit1))

;; dispatching_result__root__f1__position_axiom
  (assert (<= 0 dispatching_result__root__f1__position1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ()
((child__ref (child__refqtmk (child__content us_rep1)))))
(define-fun child__ref_child__content__projection ((a child__ref)) us_rep1 
  (child__content a))

(define-fun default_initial_assumption ((temp___expr_161 us_rep)
  (temp___skip_top_level_162 Bool)) Bool (= (attr__tag temp___expr_161) 
  us_tag))

(define-fun default_initial_assumption1 ((temp___expr_171 us_rep1)
  (temp___skip_top_level_172 Bool)) Bool (= (attr__tag1 temp___expr_171) 
  us_tag1))

;; Assume
  (assert (dynamic_invariant v true false true true))

(declare-const o natural)

;; Ensures
  (assert (= (to_rep o) v))

(declare-const o1 natural)

;; Ensures
  (assert (= (to_rep o1) v))

(declare-const dispatching_result__init__2__result us_rep1)

;; H
  (assert
  (= dispatching_result__init__2__result (us_repqtmk1
                                         (us_split_fieldsqtmk1 o1 o
                                         us_null_ext__) us_tag1)))

(assert
;; defqtvc
 ;; File "dispatching_result.ads", line 13, characters 0-0
  (not
  (= (to_rep
     (rec__dispatching_result__root__f1
     (us_split_fields1 (to_base dispatching_result__init__2__result)))) 
  v)))
(check-sat)

(exit)
