(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (character character) Bool)

(declare-const dummy1 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun end_line (Int Int Int) Bool)

(declare-fun end_line__function_guard (Bool Int Int Int) Bool)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(declare-sort tfirst_charS 0)

(declare-fun tfirst_charSqtint (tfirst_charS) Int)

;; tfirst_charS'axiom
  (assert
  (forall ((i tfirst_charS))
  (and (<= 1 (tfirst_charSqtint i)) (<= (tfirst_charSqtint i) 1025))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 1025)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (tfirst_charS tfirst_charS) Bool)

(declare-const dummy3 tfirst_charS)

(declare-datatypes ()
((tfirst_charS__ref
 (tfirst_charS__refqtmk (tfirst_charS__content tfirst_charS)))))
(define-fun tfirst_charS__ref_tfirst_charS__content__projection ((a tfirst_charS__ref)) tfirst_charS 
  (tfirst_charS__content a))

(define-fun dynamic_invariant3 ((temp___expr_207 Int)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)
  (temp___do_typ_inv_206 Bool)) Bool (=>
                                     (or (= temp___is_init_203 true)
                                     (<= 1 1025)) (in_range4
                                     temp___expr_207)))

(declare-sort tlast_charS 0)

(declare-fun tlast_charSqtint (tlast_charS) Int)

;; tlast_charS'axiom
  (assert
  (forall ((i tlast_charS))
  (and (<= 0 (tlast_charSqtint i)) (<= (tlast_charSqtint i) 1024))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (tlast_charS tlast_charS) Bool)

(declare-const dummy4 tlast_charS)

(declare-datatypes ()
((tlast_charS__ref (tlast_charS__refqtmk (tlast_charS__content tlast_charS)))))
(define-fun tlast_charS__ref_tlast_charS__content__projection ((a tlast_charS__ref)) tlast_charS 
  (tlast_charS__content a))

(define-fun dynamic_invariant4 ((temp___expr_214 Int)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)
  (temp___do_typ_inv_213 Bool)) Bool (=>
                                     (or (= temp___is_init_210 true)
                                     (<= 0 1024)) (in_range5
                                     temp___expr_214)))

;; end_line__post_axiom
  (assert true)

(declare-sort tTlineSP1 0)

(declare-fun tTlineSP1qtint (tTlineSP1) Int)

;; tTlineSP1'axiom
  (assert
  (forall ((i tTlineSP1))
  (and (<= 1 (tTlineSP1qtint i)) (<= (tTlineSP1qtint i) 1024))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq5 (tTlineSP1 tTlineSP1) Bool)

(declare-const dummy5 tTlineSP1)

(declare-datatypes ()
((tTlineSP1__ref (tTlineSP1__refqtmk (tTlineSP1__content tTlineSP1)))))
(define-fun tTlineSP1__ref_tTlineSP1__content__projection ((a tTlineSP1__ref)) tTlineSP1 
  (tTlineSP1__content a))

(declare-const line (Array Int character))

(declare-const first_char Int)

(declare-const last_char Int)

(declare-const line_num Int)

(declare-const c Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 first_char true false true true))

;; Assume
  (assert (dynamic_invariant4 last_char true false true true))

;; Assume
  (assert (dynamic_invariant line_num true false true true))

;; Assume
  (assert (dynamic_invariant1 c false false true true))

;; Assume
  (assert (<= first_char 1024))

(declare-const line1 (Array Int character))

(declare-const first_char1 Int)

;; H
  (assert
  (forall ((first_char2 Int) (last_char1 Int)) (end_line__function_guard
  (end_line 1 first_char2 last_char1) 1 first_char2 last_char1)))

;; H
  (assert (end_line__function_guard (end_line 1 first_char last_char) 1
  first_char last_char))

;; H
  (assert
  (ite (= (end_line 1 first_char last_char) true)
  (exists ((first_char2 Int) (last_char1 Int) (line_num1 Int))
  (and
  (= (and (ite (and
               (and (dynamic_invariant3 first_char2 true true true true)
               (dynamic_invariant4 last_char1 true true true true))
               (dynamic_invariant line_num1 true true true true))
          true false) (ite (= (end_line 1 first_char2 last_char1) true) true
                      false)) true)
  (exists ((last_char2 Int) (line_num2 Int))
  (and
  (and
  (and (dynamic_invariant3 first_char1 true true true true)
  (dynamic_invariant4 last_char2 true true true true)) (dynamic_invariant
  line_num2 true true true true))
  (let ((o (end_line 1 first_char1 last_char2)))
  (and (end_line__function_guard o 1 first_char1 last_char2)
  (not (= o true)))))))) (and (= line1 line) (= first_char1 first_char))))

(assert
;; defqtvc
 ;; File "input.adb", line 30, characters 0-0
  (not (<= 1 first_char1)))
(check-sat)

(exit)
