;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float32)))))
(declare-sort float__ 0)

(declare-fun user_eq (float__ float__) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float32)

(declare-const dummy float__)

(declare-datatypes ()
((float____ref (float____refqtmk (float____content float__)))))
(define-fun float____ref_float____content__projection ((a float____ref)) float__ 
  (float____content a))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun saturate (Float32 Float32 Float32) Float32)

(declare-fun saturate__function_guard (Float32 Float32 Float32 Float32) Bool)

;; saturate__post_axiom
  (assert
  (forall ((value Float32) (min_value Float32) (max_value Float32))
  (! (=>
     (and
     (and (dynamic_invariant value true true true true) (dynamic_invariant
     min_value true true true true)) (dynamic_invariant max_value true true
     true true))
     (let ((result (saturate value min_value max_value)))
     (and
     (ite (fp.lt value min_value) (fp.eq result min_value)
     (ite (fp.lt max_value value) (fp.eq result max_value)
     (fp.eq result value))) (dynamic_invariant result true false true true)))) :pattern (
  (saturate value min_value max_value)) )))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun atan_2 (Float32 Float32) Float32)

(declare-fun atan_2__function_guard (Float32 Float32 Float32) Bool)

(declare-sort t_radians 0)

(define-fun in_range ((x Float32)) Bool (and (fp.isFinite32 x)
                                        (and
                                        (fp.leq (fp.neg (fp #b0 #b10000001 #b10010010000111111011011)) x)
                                        (fp.leq x (fp #b0 #b10000001 #b10010010000111111011011)))))

(declare-fun user_eq1 (t_radians t_radians) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy1 t_radians)

(declare-datatypes ()
((t_radians__ref (t_radians__refqtmk (t_radians__content t_radians)))))
(define-fun t_radians__ref_t_radians__content__projection ((a t_radians__ref)) t_radians 
  (t_radians__content a))

(define-fun dynamic_invariant1 ((temp___expr_242 Float32)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000001 #b10010010000111111011011)) (fp #b0 #b10000001 #b10010010000111111011011)))
                                     (in_range temp___expr_242)))

;; atan_2__post_axiom
  (assert
  (forall ((x Float32) (y Float32))
  (! (=>
     (and (dynamic_invariant x true true true true) (dynamic_invariant y true
     true true true)) (dynamic_invariant1 (atan_2 x y) true false true true)) :pattern (
  (atan_2 x y)) )))

(declare-fun asin1 (Float32) Float32)

(declare-fun asin__function_guard (Float32 Float32) Bool)

;; asin__post_axiom
  (assert
  (forall ((x Float32))
  (! (=> (dynamic_invariant x true true true true) (dynamic_invariant1
     (asin1 x) true false true true)) :pattern ((asin1 x)) )))

(declare-sort t_degrees 0)

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000111 #b01101000000000000000000)))))

(declare-fun user_eq2 (t_degrees t_degrees) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE2 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Float32)

(declare-const dummy2 t_degrees)

(declare-datatypes ()
((t_degrees__ref (t_degrees__refqtmk (t_degrees__content t_degrees)))))
(define-fun t_degrees__ref_t_degrees__content__projection ((a t_degrees__ref)) t_degrees 
  (t_degrees__content a))

(define-fun dynamic_invariant2 ((temp___expr_200 Float32)
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)
  (temp___do_typ_inv_199 Bool)) Bool (=>
                                     (or (= temp___is_init_196 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000111 #b01101000000000000000000)) (fp #b0 #b10000111 #b01101000000000000000000)))
                                     (in_range1 temp___expr_200)))

(declare-sort t_quaternion 0)

(define-fun in_range2 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000)))))

(declare-fun user_eq3 (t_quaternion t_quaternion) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float32)

(declare-const dummy3 t_quaternion)

(declare-datatypes ()
((t_quaternion__ref
 (t_quaternion__refqtmk (t_quaternion__content t_quaternion)))))
(define-fun t_quaternion__ref_t_quaternion__content__projection ((a t_quaternion__ref)) t_quaternion 
  (t_quaternion__content a))

(define-fun dynamic_invariant3 ((temp___expr_207 Float32)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)
  (temp___do_typ_inv_206 Bool)) Bool (=>
                                     (or (= temp___is_init_203 true)
                                     (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) (fp #b0 #b01111111 #b00000000000000000000000)))
                                     (in_range2 temp___expr_207)))

(declare-const euler_roll_actual Float32)

(declare-const euler_pitch_actual Float32)

(declare-const euler_yaw_actual Float32)

(declare-const q0 Float32)

(declare-const q1 Float32)

(declare-const q2 Float32)

(declare-const q3 Float32)

(declare-const grav_x Float32)

(declare-const grav_y Float32)

(declare-const grav_z Float32)

;; Assume
  (assert (dynamic_invariant2 euler_roll_actual false false true true))

;; Assume
  (assert (dynamic_invariant2 euler_pitch_actual false false true true))

;; Assume
  (assert (dynamic_invariant2 euler_yaw_actual false false true true))

;; Assume
  (assert (dynamic_invariant3 q0 true false true true))

;; Assume
  (assert (dynamic_invariant3 q1 true false true true))

;; Assume
  (assert (dynamic_invariant3 q2 true false true true))

;; Assume
  (assert (dynamic_invariant3 q3 true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant grav_x false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant grav_y false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant grav_z false false true true))

(declare-const grav_x1 Float32)

;; H
  (assert
  (= grav_x1 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.sub RNE (fp.mul RNE 
  q1 q3) (fp.mul RNE q0 q2)))))

(declare-const grav_y1 Float32)

;; H
  (assert
  (= grav_y1 (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.add RNE (fp.mul RNE 
  q0 q1) (fp.mul RNE q2 q3)))))

(declare-const grav_z1 Float32)

;; H
  (assert
  (= grav_z1 (fp.add RNE (fp.sub RNE (fp.sub RNE (fp.mul RNE q0 q0) (fp.mul RNE 
  q1 q1)) (fp.mul RNE q2 q2)) (fp.mul RNE q3 q3))))

(define-fun o () Float32 (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)))

(define-fun o1 () Float32 (saturate grav_x1 o
                          (fp #b0 #b01111111 #b00000000000000000000000)))

;; H
  (assert (dynamic_invariant o1 true false true true))

;; H
  (assert
  (ite (fp.lt grav_x1 o) (fp.eq o1 o)
  (ite (fp.lt (fp #b0 #b01111111 #b00000000000000000000000) grav_x1)
  (fp.eq o1 (fp #b0 #b01111111 #b00000000000000000000000))
  (fp.eq o1 grav_x1))))

(declare-const grav_x2 Float32)

;; H
  (assert (= grav_x2 o1))

;; Ensures
  (assert (dynamic_invariant1
  (atan_2
  (fp.mul RNE (fp #b0 #b10000000 #b00000000000000000000000) (fp.add RNE (fp.mul RNE 
  q0 q3) (fp.mul RNE q1 q2)))
  (fp.sub RNE (fp.sub RNE (fp.add RNE (fp.mul RNE q0 q0) (fp.mul RNE 
  q1 q1)) (fp.mul RNE q2 q2)) (fp.mul RNE q3 q3))) true false true true))

(assert
;; defqtvc
 ;; File "sensfusion6_pack.ads", line 26, characters 0-0
  (not (not (fp.isZero (fp #b0 #b10000000 #b10010010000111111011011)))))
(check-sat)
