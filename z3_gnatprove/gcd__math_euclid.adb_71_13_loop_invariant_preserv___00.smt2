;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(declare-fun divides (Int Int) Bool)

(declare-fun divides__function_guard (Bool Int Int) Bool)

;; divides__post_axiom
  (assert true)

;; divides__def_axiom
  (assert
  (forall ((a Int) (b Int))
  (! (= (= (divides a b) true) (= (mod2 b a) 0)) :pattern ((divides a b)) )))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const c Int)

;; Assume
  (assert (dynamic_invariant1 a true false true true))

;; Assume
  (assert (dynamic_invariant1 b true false true true))

(declare-const an Int)

;; H
  (assert (= an a))

;; Assume
  (assert (dynamic_invariant1 an true false true true))

(define-fun o () Int b)

;; Ensures
  (assert (in_range1 o))

(declare-const bn Int)

;; H
  (assert (= bn o))

;; Assume
  (assert (dynamic_invariant bn true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 c false false true true))

;; H
  (assert (not (= bn 0)))

(declare-const c1 Int)

;; H
  (assert (= c1 an))

;; Ensures
  (assert (in_range2 bn))

(declare-const an1 Int)

;; H
  (assert (= an1 bn))

(define-fun o1 () Int (mod2 c1 bn))

;; Ensures
  (assert (in_range1 o1))

(declare-const bn1 Int)

;; H
  (assert (= bn1 o1))

;; H
  (assert
  (forall ((c2 Int) (x Int)) (divides__function_guard (divides x c2) x c2)))

;; H
  (assert
  (forall ((an2 Int) (x Int)) (divides__function_guard (divides x an2) x
  an2)))

;; H
  (assert
  (forall ((an2 Int) (x Int)) (divides__function_guard (divides x an2) x
  an2)))

;; H
  (assert
  (forall ((c2 Int) (an2 Int)) (divides__function_guard (divides an2 c2) an2
  c2)))

;; H
  (assert
  (forall ((c2 Int) (an2 Int) (x Int)) (divides__function_guard
  (divides x (mod2 c2 an2)) x (mod2 c2 an2))))

;; Ensures
  (assert
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 2147483647))
  (= (and (= (divides x c1) true) (= (divides x an1) true))
  (and (= (divides x an1) true)
  (or (= (divides an1 c1) true) (= (divides x (mod2 c1 an1)) true)))))))

(declare-const an2 Int)

(declare-const bn2 Int)

(declare-const c2 Int)

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x a) x a)))

;; H
  (assert (forall ((x Int)) (divides__function_guard (divides x b) x b)))

;; H
  (assert
  (forall ((an3 Int) (x Int)) (divides__function_guard (divides x an3) x
  an3)))

;; H
  (assert
  (forall ((bn3 Int) (x Int)) (divides__function_guard (divides x bn3) x
  bn3)))

;; LoopInvariant
  (assert
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 2147483647))
  (= (and (= (divides x a) true) (= (divides x b) true))
  (and (= (divides x an2) true) (or (= bn2 0) (= (divides x bn2) true)))))))

;; Assume
  (assert
  (and
  (and (dynamic_invariant1 c2 false true true true) (dynamic_invariant1 
  an2 true true true true)) (dynamic_invariant bn2 true true true true)))

;; H
  (assert (not (= bn2 0)))

(declare-const c3 Int)

;; H
  (assert (= c3 an2))

;; Ensures
  (assert (in_range2 bn2))

(declare-const an3 Int)

;; H
  (assert (= an3 bn2))

(define-fun o2 () Int (mod2 c3 bn2))

;; Ensures
  (assert (in_range1 o2))

(declare-const bn3 Int)

;; H
  (assert (= bn3 o2))

;; H
  (assert
  (forall ((c4 Int) (x Int)) (divides__function_guard (divides x c4) x c4)))

;; H
  (assert
  (forall ((an4 Int) (x Int)) (divides__function_guard (divides x an4) x
  an4)))

;; H
  (assert
  (forall ((an4 Int) (x Int)) (divides__function_guard (divides x an4) x
  an4)))

;; H
  (assert
  (forall ((c4 Int) (an4 Int)) (divides__function_guard (divides an4 c4) an4
  c4)))

;; H
  (assert
  (forall ((c4 Int) (an4 Int) (x Int)) (divides__function_guard
  (divides x (mod2 c4 an4)) x (mod2 c4 an4))))

;; Ensures
  (assert
  (forall ((x Int))
  (=> (and (<= 1 x) (<= x 2147483647))
  (= (and (= (divides x c3) true) (= (divides x an3) true))
  (and (= (divides x an3) true)
  (or (= (divides an3 c3) true) (= (divides x (mod2 c3 an3)) true)))))))

(declare-const x Int)

;; H
  (assert (<= 1 x))

;; H
  (assert (<= x 2147483647))

;; H
  (assert (forall ((x1 Int)) (divides__function_guard (divides x1 a) x1 a)))

;; H
  (assert (forall ((x1 Int)) (divides__function_guard (divides x1 b) x1 b)))

;; H
  (assert (= (divides x a) true))

;; H
  (assert (= (divides x b) true))

;; H
  (assert
  (forall ((an4 Int) (x1 Int)) (divides__function_guard (divides x1 an4) x1
  an4)))

(assert
;; defqtvc
 ;; File "math_euclid.ads", line 5, characters 0-0
  (not (= (divides x an3) true)))
(check-sat)
