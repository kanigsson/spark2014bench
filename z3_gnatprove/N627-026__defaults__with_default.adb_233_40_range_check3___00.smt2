;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep ((x positive)) Int (positiveqtint x))

(declare-fun of_rep (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const c Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun to_rep1 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__with_default__ok_nested_defaults__empty_rec1__d positive)))))
(define-fun us_split_discrs_rec__with_default__ok_nested_defaults__empty_rec1__d__projection ((a us_split_discrs)) positive 
  (rec__with_default__ok_nested_defaults__empty_rec1__d a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__11__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_discrs1 us_split_discrs)))))
(define-fun us_rep___split_discrs__11__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__with_default__ok_nested_defaults__empty_rec1__d
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__with_default__ok_nested_defaults__empty_rec1__d
                                                  (us_split_discrs1 b))))
                   true false))

(define-fun in_range2 ((rec__with_default__ok_nested_defaults__empty_rec1__d1 Int)
  (a us_split_discrs)) Bool (= rec__with_default__ok_nested_defaults__empty_rec1__d1 
  (to_rep (rec__with_default__ok_nested_defaults__empty_rec1__d a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const with_default__ok_nested_defaults__empty_rec1__d__first__bit Int)

(declare-const with_default__ok_nested_defaults__empty_rec1__d__last__bit Int)

(declare-const with_default__ok_nested_defaults__empty_rec1__d__position Int)

;; with_default__ok_nested_defaults__empty_rec1__d__first__bit_axiom
  (assert (<= 0 with_default__ok_nested_defaults__empty_rec1__d__first__bit))

;; with_default__ok_nested_defaults__empty_rec1__d__last__bit_axiom
  (assert
  (< with_default__ok_nested_defaults__empty_rec1__d__first__bit with_default__ok_nested_defaults__empty_rec1__d__last__bit))

;; with_default__ok_nested_defaults__empty_rec1__d__position_axiom
  (assert (<= 0 with_default__ok_nested_defaults__empty_rec1__d__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((empty_rec1__ref (empty_rec1__refqtmk (empty_rec1__content us_rep)))))
(define-fun empty_rec1__ref_empty_rec1__content__projection ((a empty_rec1__ref)) us_rep 
  (empty_rec1__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_162 Int))
                           (=>
                           (and (<= a__first temp___idx_162)
                           (<= temp___idx_162 a__last))
                           (= (bool_eq (select a temp___idx_162)
                              (select b (+ (- b__first a__first) temp___idx_162))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_162 Int))
  (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last))
  (= (bool_eq (select a temp___idx_162)
     (select b (+ (- b__first a__first) temp___idx_162))) true))))))))

(declare-const dummy3 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__with_default__ok_nested_defaults__non_init1__e (Array Int us_rep))(rec__with_default__ok_nested_defaults__non_init1__f natural)))))
(define-fun us_split_fields_rec__with_default__ok_nested_defaults__non_init1__e__projection ((a us_split_fields)) (Array Int us_rep) 
  (rec__with_default__ok_nested_defaults__non_init1__e a))

(define-fun us_split_fields_rec__with_default__ok_nested_defaults__non_init1__f__projection ((a us_split_fields)) natural 
  (rec__with_default__ok_nested_defaults__non_init1__f a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__13__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__13__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq1
                            (rec__with_default__ok_nested_defaults__non_init1__e
                            (us_split_fields1 a)) 1 0
                            (rec__with_default__ok_nested_defaults__non_init1__e
                            (us_split_fields1 b)) 1 0) true)
                         (= (to_rep1
                            (rec__with_default__ok_nested_defaults__non_init1__f
                            (us_split_fields1 a))) (to_rep1
                                                   (rec__with_default__ok_nested_defaults__non_init1__f
                                                   (us_split_fields1 b)))))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const with_default__ok_nested_defaults__non_init1__e__first__bit Int)

(declare-const with_default__ok_nested_defaults__non_init1__e__last__bit Int)

(declare-const with_default__ok_nested_defaults__non_init1__e__position Int)

;; with_default__ok_nested_defaults__non_init1__e__first__bit_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init1__e__first__bit))

;; with_default__ok_nested_defaults__non_init1__e__last__bit_axiom
  (assert
  (< with_default__ok_nested_defaults__non_init1__e__first__bit with_default__ok_nested_defaults__non_init1__e__last__bit))

;; with_default__ok_nested_defaults__non_init1__e__position_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init1__e__position))

(declare-const with_default__ok_nested_defaults__non_init1__f__first__bit Int)

(declare-const with_default__ok_nested_defaults__non_init1__f__last__bit Int)

(declare-const with_default__ok_nested_defaults__non_init1__f__position Int)

;; with_default__ok_nested_defaults__non_init1__f__first__bit_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init1__f__first__bit))

;; with_default__ok_nested_defaults__non_init1__f__last__bit_axiom
  (assert
  (< with_default__ok_nested_defaults__non_init1__f__first__bit with_default__ok_nested_defaults__non_init1__f__last__bit))

;; with_default__ok_nested_defaults__non_init1__f__position_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init1__f__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((non_init1__ref (non_init1__refqtmk (non_init1__content us_rep1)))))
(define-fun non_init1__ref_non_init1__content__projection ((a non_init1__ref)) us_rep1 
  (non_init1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_652 us_rep1)
  (temp___skip_top_level_653 Bool)) Bool (forall ((temp___655 Int))
                                         (=>
                                         (and (<= 1 temp___655)
                                         (<= temp___655 0))
                                         (= (to_rep
                                            (rec__with_default__ok_nested_defaults__empty_rec1__d
                                            (us_split_discrs1
                                            (select (rec__with_default__ok_nested_defaults__non_init1__e
                                                    (us_split_fields1
                                                    temp___expr_652)) temp___655)))) 
                                         c))))

(declare-datatypes ()
((us_split_discrs2
 (us_split_discrsqtmk1
 (rec__with_default__ok_nested_defaults__empty_rec2__d positive)))))
(define-fun us_split_discrs_rec__with_default__ok_nested_defaults__empty_rec2__d__projection ((a us_split_discrs2)) positive 
  (rec__with_default__ok_nested_defaults__empty_rec2__d a))

(declare-datatypes ()
((us_split_discrs__ref1
 (us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__12__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_discrs3 us_split_discrs2)))))
(define-fun us_rep___split_discrs__12__projection ((a us_rep2)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep
                            (rec__with_default__ok_nested_defaults__empty_rec2__d
                            (us_split_discrs3 a))) (to_rep
                                                   (rec__with_default__ok_nested_defaults__empty_rec2__d
                                                   (us_split_discrs3 b))))
                    true false))

(define-fun in_range3 ((rec__with_default__ok_nested_defaults__empty_rec2__d1 Int)
  (a us_split_discrs2)) Bool (= rec__with_default__ok_nested_defaults__empty_rec2__d1 
  (to_rep (rec__with_default__ok_nested_defaults__empty_rec2__d a))))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const with_default__ok_nested_defaults__empty_rec2__d__first__bit Int)

(declare-const with_default__ok_nested_defaults__empty_rec2__d__last__bit Int)

(declare-const with_default__ok_nested_defaults__empty_rec2__d__position Int)

;; with_default__ok_nested_defaults__empty_rec2__d__first__bit_axiom
  (assert (<= 0 with_default__ok_nested_defaults__empty_rec2__d__first__bit))

;; with_default__ok_nested_defaults__empty_rec2__d__last__bit_axiom
  (assert
  (< with_default__ok_nested_defaults__empty_rec2__d__first__bit with_default__ok_nested_defaults__empty_rec2__d__last__bit))

;; with_default__ok_nested_defaults__empty_rec2__d__position_axiom
  (assert (<= 0 with_default__ok_nested_defaults__empty_rec2__d__position))

(declare-fun user_eq5 (us_rep2 us_rep2) Bool)

(declare-const dummy5 us_rep2)

(declare-datatypes ()
((empty_rec2__ref (empty_rec2__refqtmk (empty_rec2__content us_rep2)))))
(define-fun empty_rec2__ref_empty_rec2__content__projection ((a empty_rec2__ref)) us_rep2 
  (empty_rec2__content a))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_163 Int))
                           (=>
                           (and (<= a__first temp___idx_163)
                           (<= temp___idx_163 a__last))
                           (= (bool_eq3 (select a temp___idx_163)
                              (select b (+ (- b__first a__first) temp___idx_163))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_163 Int))
  (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last))
  (= (bool_eq3 (select a temp___idx_163)
     (select b (+ (- b__first a__first) temp___idx_163))) true))))))))

(declare-const dummy6 (Array Int us_rep2))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size1 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq6 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__with_default__ok_nested_defaults__non_init2__e (Array Int us_rep2))(rec__with_default__ok_nested_defaults__non_init2__f natural)))))
(define-fun us_split_fields_rec__with_default__ok_nested_defaults__non_init2__e__projection ((a us_split_fields2)) (Array Int us_rep2) 
  (rec__with_default__ok_nested_defaults__non_init2__e a))

(define-fun us_split_fields_rec__with_default__ok_nested_defaults__non_init2__f__projection ((a us_split_fields2)) natural 
  (rec__with_default__ok_nested_defaults__non_init2__f a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__14__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__14__projection ((a us_rep3)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (bool_eq4
                            (rec__with_default__ok_nested_defaults__non_init2__e
                            (us_split_fields3 a)) 1 100
                            (rec__with_default__ok_nested_defaults__non_init2__e
                            (us_split_fields3 b)) 1 100) true)
                         (= (to_rep1
                            (rec__with_default__ok_nested_defaults__non_init2__f
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__with_default__ok_nested_defaults__non_init2__f
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const with_default__ok_nested_defaults__non_init2__e__first__bit Int)

(declare-const with_default__ok_nested_defaults__non_init2__e__last__bit Int)

(declare-const with_default__ok_nested_defaults__non_init2__e__position Int)

;; with_default__ok_nested_defaults__non_init2__e__first__bit_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init2__e__first__bit))

;; with_default__ok_nested_defaults__non_init2__e__last__bit_axiom
  (assert
  (< with_default__ok_nested_defaults__non_init2__e__first__bit with_default__ok_nested_defaults__non_init2__e__last__bit))

;; with_default__ok_nested_defaults__non_init2__e__position_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init2__e__position))

(declare-const with_default__ok_nested_defaults__non_init2__f__first__bit Int)

(declare-const with_default__ok_nested_defaults__non_init2__f__last__bit Int)

(declare-const with_default__ok_nested_defaults__non_init2__f__position Int)

;; with_default__ok_nested_defaults__non_init2__f__first__bit_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init2__f__first__bit))

;; with_default__ok_nested_defaults__non_init2__f__last__bit_axiom
  (assert
  (< with_default__ok_nested_defaults__non_init2__f__first__bit with_default__ok_nested_defaults__non_init2__f__last__bit))

;; with_default__ok_nested_defaults__non_init2__f__position_axiom
  (assert (<= 0 with_default__ok_nested_defaults__non_init2__f__position))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ()
((non_init2__ref (non_init2__refqtmk (non_init2__content us_rep3)))))
(define-fun non_init2__ref_non_init2__content__projection ((a non_init2__ref)) us_rep3 
  (non_init2__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort t37b 0)

(declare-fun t37bqtint (t37b) Int)

;; t37b'axiom
  (assert
  (forall ((i t37b)) (and (<= 1 (t37bqtint i)) (<= (t37bqtint i) 100))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq8 (t37b t37b) Bool)

(declare-const dummy8 t37b)

(declare-datatypes () ((t37b__ref (t37b__refqtmk (t37b__content t37b)))))
(define-fun t37b__ref_t37b__content__projection ((a t37b__ref)) t37b 
  (t37b__content a))

(define-fun default_initial_assumption1 ((temp___expr_682 us_rep3)
  (temp___skip_top_level_683 Bool)) Bool (forall ((temp___685 Int))
                                         (=>
                                         (and (<= 1 temp___685)
                                         (<= temp___685 100))
                                         (= (to_rep
                                            (rec__with_default__ok_nested_defaults__empty_rec2__d
                                            (us_split_discrs3
                                            (select (rec__with_default__ok_nested_defaults__non_init2__e
                                                    (us_split_fields3
                                                    temp___expr_682)) temp___685)))) 1))))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun default_initial_assumption2 ((temp___expr_635 us_rep)
  (temp___skip_top_level_636 Bool)) Bool (= (to_rep
                                            (rec__with_default__ok_nested_defaults__empty_rec1__d
                                            (us_split_discrs1
                                            temp___expr_635))) c))

(define-fun default_initial_assumption3 ((temp___expr_665 us_rep2)
  (temp___skip_top_level_666 Bool)) Bool (= (to_rep
                                            (rec__with_default__ok_nested_defaults__empty_rec2__d
                                            (us_split_discrs3
                                            temp___expr_665))) 1))

(declare-const empty__split_fields us_split_fields)

;; Assume
  (assert (dynamic_invariant c true false true true))

(declare-const usf us_split_fields)

;; H
  (assert (< 0 (length 1 0)))

(assert
;; defqtvc
 ;; File "with_default.ads", line 26, characters 0-0
  (not (in_range1 c)))
(check-sat)
