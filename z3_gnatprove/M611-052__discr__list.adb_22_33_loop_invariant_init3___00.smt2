;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 100))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (capacity_range capacity_range) Bool)

(declare-const dummy1 capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep1 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep1 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk (rec__list__my_lists__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__list__my_lists__vector__capacity__projection ((a us_split_discrs)) capacity_range 
  (rec__list__my_lists__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__list__my_lists__vector us_main_type)))))
(define-fun us_split_fields_rec__list__my_lists__vector__projection ((a us_split_fields)) us_main_type 
  (rec__list__my_lists__vector a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__list__my_lists__vector__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__list__my_lists__vector__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__list__my_lists__vector (us_split_fields1 a))
                           (rec__list__my_lists__vector (us_split_fields1 b))) true))
                   true false))

(define-fun in_range3 ((rec__list__my_lists__vector__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__list__my_lists__vector__capacity1 
  (to_rep1 (rec__list__my_lists__vector__capacity a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const list__my_lists__vector__capacity__first__bit Int)

(declare-const list__my_lists__vector__capacity__last__bit Int)

(declare-const list__my_lists__vector__capacity__position Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit list__my_lists__vector__capacity__last__bit))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((vector__ref (vector__refqtmk (vector__content us_rep)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep 
  (vector__content a))

(define-fun capacity ((container us_rep)) Int (to_rep1
                                              (rec__list__my_lists__vector__capacity
                                              (us_split_discrs1 container))))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun dynamic_invariant1 ((temp___expr_249 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (or (= temp___is_init_245 true)
                                     (<= 0 100)) (in_range2 temp___expr_249)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant1 result true
     false true true))) :pattern ((length container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun model1 (us_rep) us_rep1)

(declare-fun model__function_guard (us_rep1 us_rep) Bool)

(define-fun last_index ((container us_rep)) Int (last (model1 container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 101))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 101)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (extended_index extended_index) Bool)

(declare-const dummy4 extended_index)

(declare-datatypes ()
((extended_index__ref
 (extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_235 Int)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (or (= temp___is_init_231 true)
                                     (<= 0 101)) (in_range4 temp___expr_235)))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (index_type index_type) Bool)

(declare-const dummy5 index_type)

(declare-datatypes ()
((index_type__ref (index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_221 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)
  (temp___do_typ_inv_220 Bool)) Bool (=>
                                     (or (= temp___is_init_217 true)
                                     (<= 1 100)) (in_range5 temp___expr_221)))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun element ((container us_rep)
  (index Int)) Int (get (model1 container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (element_type element_type) Bool)

(declare-const dummy6 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_228 Int)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)
  (temp___do_typ_inv_227 Bool)) Bool (=>
                                     (or (= temp___is_init_224 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range6 temp___expr_228)))

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun olt ((left us_rep1)
  (right us_rep1)) Bool (and (< (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const list__my_lists__vector__capacity__first__bit1 Int)

(declare-const list__my_lists__vector__capacity__last__bit1 Int)

(declare-const list__my_lists__vector__capacity__position1 Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit1))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit1 list__my_lists__vector__capacity__last__bit1))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position1))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((list__ref (list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-const l us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const r1b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort index 0)

(declare-fun indexqtint (index) Int)

;; index'axiom
  (assert
  (forall ((i index)) (and (<= 0 (indexqtint i)) (<= (indexqtint i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (index index) Bool)

(declare-const dummy8 index)

(declare-datatypes () ((index__ref (index__refqtmk (index__content index)))))
(define-fun index__ref_index__content__projection ((a index__ref)) index 
  (index__content a))

(define-fun to_rep2 ((x index)) Int (indexqtint x))

(declare-fun of_rep2 (Int) index)

;; inversion_axiom
  (assert
  (forall ((x index))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x index)) (! (in_range7 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (positive positive) Bool)

(declare-const dummy9 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_202 Int))
                           (=>
                           (and (<= a__first temp___idx_202)
                           (<= temp___idx_202 a__last))
                           (= (to_rep (select a temp___idx_202)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_202)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_202 Int))
  (=> (and (<= a__first temp___idx_202) (<= temp___idx_202 a__last))
  (= (to_rep (select a temp___idx_202)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_202)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last1 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l1 Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l1)
     (and (= (to_rep (first (mk f l1))) f) (= (to_rep (last1 (mk f l1))) l1)))) :pattern (
  (mk f l1)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range8 low) (in_range8 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l1 Int)) us_t (us_tqtmk a (mk f l1)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep (last1 (rt a))))

(define-fun length3 ((a us_t)) Int (ite (<= (first1 a) (last2 a))
                                   (+ (- (last2 a) (first1 a)) 1) 0))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment3))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x)))
                 (to_rep (last1 (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last1 (rt y)))))

(declare-fun user_eq10 (us_t us_t) Bool)

(declare-const dummy10 us_t)

(declare-datatypes ()
((intarray__ref (intarray__refqtmk (intarray__content us_t)))))
(define-fun intarray__ref_intarray__content__projection ((a intarray__ref)) us_t 
  (intarray__content a))

(declare-datatypes () ((t11s__ref (t11s__refqtmk (t11s__content us_t)))))
(define-fun t11s__ref_t11s__content__projection ((a t11s__ref)) us_t 
  (t11s__content a))

(declare-datatypes ()
((us_split_discrs2 (us_split_discrsqtmk1 (rec__stack__stack__n index)))))
(define-fun us_split_discrs_rec__stack__stack__n__projection ((a us_split_discrs2)) index 
  (rec__stack__stack__n a))

(declare-datatypes ()
((us_split_discrs__ref1
 (us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs2)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref1)) us_split_discrs2 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__stack__stack__top index)(rec__stack__stack__content us_t)))))
(define-fun us_split_fields_rec__stack__stack__top__projection ((a us_split_fields2)) index 
  (rec__stack__stack__top a))

(define-fun us_split_fields_rec__stack__stack__content__projection ((a us_split_fields2)) us_t 
  (rec__stack__stack__content a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2
 (us_repqtmk1
 (us_split_discrs3 us_split_discrs2)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep2)) us_split_discrs2 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__stack__stack__n (us_split_discrs3 a))) 
                         (to_rep2
                         (rec__stack__stack__n (us_split_discrs3 b))))
                         (and
                         (= (to_rep2
                            (rec__stack__stack__top (us_split_fields3 a))) 
                         (to_rep2
                         (rec__stack__stack__top (us_split_fields3 b))))
                         (= (bool_eq3
                            (rec__stack__stack__content (us_split_fields3 a))
                            (rec__stack__stack__content (us_split_fields3 b))) true)))
                    true false))

(define-fun in_range9 ((rec__stack__stack__n1 Int)
  (a us_split_discrs2)) Bool (= rec__stack__stack__n1 (to_rep2
                                                      (rec__stack__stack__n
                                                      a))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const stack__stack__n__first__bit Int)

(declare-const stack__stack__n__last__bit Int)

(declare-const stack__stack__n__position Int)

;; stack__stack__n__first__bit_axiom
  (assert (<= 0 stack__stack__n__first__bit))

;; stack__stack__n__last__bit_axiom
  (assert (< stack__stack__n__first__bit stack__stack__n__last__bit))

;; stack__stack__n__position_axiom
  (assert (<= 0 stack__stack__n__position))

(declare-const stack__stack__top__first__bit Int)

(declare-const stack__stack__top__last__bit Int)

(declare-const stack__stack__top__position Int)

;; stack__stack__top__first__bit_axiom
  (assert (<= 0 stack__stack__top__first__bit))

;; stack__stack__top__last__bit_axiom
  (assert (< stack__stack__top__first__bit stack__stack__top__last__bit))

;; stack__stack__top__position_axiom
  (assert (<= 0 stack__stack__top__position))

(declare-const stack__stack__content__first__bit Int)

(declare-const stack__stack__content__last__bit Int)

(declare-const stack__stack__content__position Int)

;; stack__stack__content__first__bit_axiom
  (assert (<= 0 stack__stack__content__first__bit))

;; stack__stack__content__last__bit_axiom
  (assert
  (< stack__stack__content__first__bit stack__stack__content__last__bit))

;; stack__stack__content__position_axiom
  (assert (<= 0 stack__stack__content__position))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ()
((stack__ref (stack__refqtmk (stack__content us_rep2)))))
(define-fun stack__ref_stack__content__projection ((a stack__ref)) us_rep2 
  (stack__content a))

(declare-datatypes () ((t2b__ref (t2b__refqtmk (t2b__content us_t)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) us_t (t2b__content
                                                                  a))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__stack__stack__top1 index)(rec__stack__stack__content1 us_t)))))
(define-fun us_split_fields_rec__stack__stack__top__2__projection ((a us_split_fields4)) index 
  (rec__stack__stack__top1 a))

(define-fun us_split_fields_rec__stack__stack__content__2__projection ((a us_split_fields4)) us_t 
  (rec__stack__stack__content1 a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3
 (us_repqtmk2
 (us_split_discrs4 us_split_discrs2)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep3)) us_split_discrs2 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep3)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base ((a us_rep3)) us_rep2 (us_repqtmk1 (us_split_discrs4 a)
                                          (us_split_fieldsqtmk1
                                          (rec__stack__stack__top1
                                          (us_split_fields5 a))
                                          (let ((temp___204 (rec__stack__stack__content1
                                                            (us_split_fields5
                                                            a))))
                                          (of_array (to_array temp___204)
                                          (first1 temp___204)
                                          (last2 temp___204))))))

(define-fun of_base ((r us_rep2)) us_rep3 (us_repqtmk2 (us_split_discrs3 r)
                                          (us_split_fieldsqtmk2
                                          (rec__stack__stack__top
                                          (us_split_fields3 r))
                                          (let ((temp___203 (rec__stack__stack__content
                                                            (us_split_fields3
                                                            r))))
                                          (of_array (to_array temp___203)
                                          (first1 temp___203)
                                          (last2 temp___203))))))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep2
                            (rec__stack__stack__n (us_split_discrs4 a))) 
                         (to_rep2
                         (rec__stack__stack__n (us_split_discrs4 b))))
                         (and
                         (= (to_rep2
                            (rec__stack__stack__top1 (us_split_fields5 a))) 
                         (to_rep2
                         (rec__stack__stack__top1 (us_split_fields5 b))))
                         (= (bool_eq3
                            (rec__stack__stack__content1
                            (us_split_fields5 a))
                            (rec__stack__stack__content1
                            (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const stack__stack__n__first__bit1 Int)

(declare-const stack__stack__n__last__bit1 Int)

(declare-const stack__stack__n__position1 Int)

;; stack__stack__n__first__bit_axiom
  (assert (<= 0 stack__stack__n__first__bit1))

;; stack__stack__n__last__bit_axiom
  (assert (< stack__stack__n__first__bit1 stack__stack__n__last__bit1))

;; stack__stack__n__position_axiom
  (assert (<= 0 stack__stack__n__position1))

(declare-const stack__stack__top__first__bit1 Int)

(declare-const stack__stack__top__last__bit1 Int)

(declare-const stack__stack__top__position1 Int)

;; stack__stack__top__first__bit_axiom
  (assert (<= 0 stack__stack__top__first__bit1))

;; stack__stack__top__last__bit_axiom
  (assert (< stack__stack__top__first__bit1 stack__stack__top__last__bit1))

;; stack__stack__top__position_axiom
  (assert (<= 0 stack__stack__top__position1))

(declare-const stack__stack__content__first__bit1 Int)

(declare-const stack__stack__content__last__bit1 Int)

(declare-const stack__stack__content__position1 Int)

;; stack__stack__content__first__bit_axiom
  (assert (<= 0 stack__stack__content__first__bit1))

;; stack__stack__content__last__bit_axiom
  (assert
  (< stack__stack__content__first__bit1 stack__stack__content__last__bit1))

;; stack__stack__content__position_axiom
  (assert (<= 0 stack__stack__content__position1))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-const dummy12 us_rep3)

(declare-datatypes () ((tsS__ref (tsS__refqtmk (tsS__content us_rep3)))))
(define-fun tsS__ref_tsS__content__projection ((a tsS__ref)) us_rep3 
  (tsS__content a))

(declare-const s__split_discrs us_split_discrs2)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const res__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq7 a b) (oeq a b)) :pattern ((user_eq7 a b)) )))

(define-fun dynamic_invariant5 ((temp___expr_386 us_rep)
  (temp___is_init_382 Bool) (temp___skip_constant_383 Bool)
  (temp___do_toplevel_384 Bool)
  (temp___do_typ_inv_385 Bool)) Bool (=>
                                     (not (= temp___skip_constant_383 true))
                                     (in_range3 100
                                     (us_split_discrs1 temp___expr_386))))

(define-fun default_initial_assumption ((temp___expr_388 us_rep)
  (temp___skip_top_level_389 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__list__my_lists__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_388))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_389 true))
                                         (= (is_empty temp___expr_388) true))))

(declare-const r4b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r5b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant6 ((temp___expr_413 us_rep2)
  (temp___is_init_409 Bool) (temp___skip_constant_410 Bool)
  (temp___do_toplevel_411 Bool)
  (temp___do_typ_inv_412 Bool)) Bool (let ((temp___414 (rec__stack__stack__n
                                                       (us_split_discrs3
                                                       temp___expr_413))))
                                     (and (dynamic_property 1
                                     (to_rep2 temp___414)
                                     (first1
                                     (rec__stack__stack__content
                                     (us_split_fields3 temp___expr_413)))
                                     (last2
                                     (rec__stack__stack__content
                                     (us_split_fields3 temp___expr_413))))
                                     (and
                                     (= (first1
                                        (rec__stack__stack__content
                                        (us_split_fields3 temp___expr_413))) 1)
                                     (= (last2
                                        (rec__stack__stack__content
                                        (us_split_fields3 temp___expr_413))) 
                                     (to_rep2 temp___414))))))

(declare-fun is_empty1 (us_rep2) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)

(declare-fun top (us_rep2) Int)

(declare-fun top__function_guard (Int us_rep2) Bool)

;; top__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (and
     (forall ((s1 us_rep2)) (is_empty__function_guard1 (is_empty1 s1) s1))
     (=>
     (and (dynamic_invariant6 s true true true true)
     (not (= (is_empty1 s) true)))
     (let ((result (top s)))
     (=> (top__function_guard result s) (dynamic_invariant result true false
     true true))))) :pattern ((top s)) )))

;; top__def_axiom
  (assert
  (forall ((s us_rep2))
  (! (=> (dynamic_invariant6 s true true true true)
     (= (top s) (to_rep2 (rec__stack__stack__top (us_split_fields3 s))))) :pattern (
  (top s)) )))

(declare-fun is_full (us_rep2) Bool)

(declare-fun is_full__function_guard (Bool us_rep2) Bool)

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last3 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l1 Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l1)
     (and (= (to_rep (first2 (mk1 f l1))) f)
     (= (to_rep (last3 (mk1 f l1))) l1)))) :pattern ((mk1 f l1)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range8 low) (in_range8 high))))))

(declare-datatypes ()
((us_t1 (us_tqtmk1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l1 Int)) us_t1 (us_tqtmk1 a (mk1 f l1)))

(define-fun first3 ((a us_t1)) Int (to_rep (first2 (rt1 a))))

(define-fun last4 ((a us_t1)) Int (to_rep (last3 (rt1 a))))

(define-fun length4 ((a us_t1)) Int (ite (<= (first3 a) (last4 a))
                                    (+ (- (last4 a) (first3 a)) 1) 0))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size1 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment6))

(define-fun bool_eq6 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep (first2 (rt1 x)))
                  (to_rep (last3 (rt1 x))) (elts1 y)
                  (to_rep (first2 (rt1 y))) (to_rep (last3 (rt1 y)))))

(declare-fun user_eq13 (us_t1 us_t1) Bool)

(declare-const dummy13 us_t1)

(declare-datatypes () ((m__ref (m__refqtmk (m__content us_t1)))))
(define-fun m__ref_m__content__projection ((a m__ref)) us_t1 (m__content a))

(declare-fun to_but_top (us_rep2) us_t1)

(declare-fun to_but_top__function_guard (us_t1 us_rep2) Bool)

(declare-fun to__ (us_rep2) us_t1)

(declare-fun to____function_guard (us_t1 us_rep2) Bool)

(declare-const r7b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const r8b Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun dynamic_invariant7 ((temp___expr_400 Int)
  (temp___is_init_396 Bool) (temp___skip_constant_397 Bool)
  (temp___do_toplevel_398 Bool)
  (temp___do_typ_inv_399 Bool)) Bool (=>
                                     (or (= temp___is_init_396 true)
                                     (<= 0 100)) (in_range7 temp___expr_400)))

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (integer integer) Bool)

(declare-const dummy14 integer)

(declare-datatypes () ((t9b__ref (t9b__refqtmk (t9b__content integer)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) integer 
  (t9b__content a))

(define-fun dynamic_invariant8 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range8
                                    temp___expr_46)))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (count_type count_type) Bool)

(declare-const dummy15 count_type)

(declare-datatypes ()
((count_type__ref (count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant9 ((temp___expr_242 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (<= 0 2147483647)) (in_range10
                                     temp___expr_242)))

(define-fun dynamic_invariant10 ((temp___expr_434 us_t1)
  (temp___is_init_430 Bool) (temp___skip_constant_431 Bool)
  (temp___do_toplevel_432 Bool)
  (temp___do_typ_inv_433 Bool)) Bool (=>
                                     (not (= temp___skip_constant_431 true))
                                     (dynamic_property1 1 2147483647
                                     (first3 temp___expr_434)
                                     (last4 temp___expr_434))))

;; to____post_axiom
  (assert
  (forall ((s us_rep2))
  (! (=> (dynamic_invariant6 s true true true true)
     (let ((result (to__ s)))
     (=> (to____function_guard result s) (dynamic_invariant10 result true
     false true true)))) :pattern ((to__ s)) )))

;; to_but_top__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (=> (dynamic_invariant6 s true true true true)
     (let ((result (to_but_top s)))
     (=> (to_but_top__function_guard result s) (dynamic_invariant10 result
     true false true true)))) :pattern ((to_but_top s)) )))

;; is_full__post_axiom
  (assert true)

;; is_empty__post_axiom
  (assert true)

(define-fun oeq1 ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_288 us_rep1)
  (temp___skip_top_level_289 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_289 true))
                                         (= (length1 temp___expr_288) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty container) true) (= (length container) 0)) :pattern (
  (is_empty container)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 100))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq16 (extended_index1 extended_index1) Bool)

(declare-const dummy16 extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant11 ((temp___expr_280 Int)
  (temp___is_init_276 Bool) (temp___skip_constant_277 Bool)
  (temp___do_toplevel_278 Bool)
  (temp___do_typ_inv_279 Bool)) Bool (=>
                                     (or (= temp___is_init_276 true)
                                     (<= 0 100)) (in_range11
                                     temp___expr_280)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 100) (dynamic_invariant9 result true false true
     true))) :pattern ((length1 container)) )))

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= (- 2147483648) (element_typeqtint1 i))
  (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq17 (element_type1 element_type1) Bool)

(declare-const dummy17 element_type1)

(declare-datatypes ()
((element_type__ref1
 (element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant12 ((temp___expr_273 Int)
  (temp___is_init_269 Bool) (temp___skip_constant_270 Bool)
  (temp___do_toplevel_271 Bool)
  (temp___do_typ_inv_272 Bool)) Bool (=>
                                     (or (= temp___is_init_269 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range12 temp___expr_273)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant11 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant12 (get container position) true false true true)) :pattern (
  (get container position)) ))))

;; r1b__def_axiom
  (assert (= r1b (length l)))

;; r4b__def_axiom
  (assert (= r4b 1))

;; r5b__def_axiom
  (assert (= r5b (last_index l)))

;; r7b__def_axiom
  (assert (= r7b 1))

;; r8b__def_axiom
  (assert (= r8b (last_index l)))

(declare-const s__split_fields us_split_fields4)

(declare-const res__split_fields us_main_type)

;; Assume
  (assert (dynamic_invariant5 l true false true true))

(define-fun o () us_rep l)

(define-fun list__reverse_list__R1b__assume () Int (length o))

;; H
  (assert (dynamic_invariant1 list__reverse_list__R1b__assume true false true
  true))

;; H
  (assert (<= list__reverse_list__R1b__assume (capacity o)))

;; Assume
  (assert (= list__reverse_list__R1b__assume r1b))

;; Assume
  (assert (dynamic_invariant1 r1b true false true true))

(define-fun o1 () Int r1b)

;; Ensures
  (assert (in_range7 o1))

;; Assume
  (assert
  (and (= (to_rep2 (rec__stack__stack__n s__split_discrs)) r1b)
  (and (= (first1 (rec__stack__stack__content1 s__split_fields)) 1)
  (= (last2 (rec__stack__stack__content1 s__split_fields)) r1b))))

;; Assume
  (assert
  (and (in_range9 r1b
  (us_split_discrs3 (to_base (us_repqtmk2 s__split_discrs s__split_fields))))
  (and (dynamic_property 1 r1b
  (first1 (rec__stack__stack__content1 s__split_fields))
  (last2 (rec__stack__stack__content1 s__split_fields)))
  (and (= (first1 (rec__stack__stack__content1 s__split_fields)) 1)
  (= (last2 (rec__stack__stack__content1 s__split_fields)) r1b)))))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))
  false))

;; Assume
  (assert (dynamic_invariant5
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))
  false false true true))

(define-fun list__reverse_list__L_1__R4b__assume () Int 1)

;; H
  (assert (dynamic_invariant3 list__reverse_list__L_1__R4b__assume true false
  true true))

;; H
  (assert (= list__reverse_list__L_1__R4b__assume 1))

;; Assume
  (assert (= list__reverse_list__L_1__R4b__assume r4b))

;; Assume
  (assert (dynamic_invariant3 r4b true false true true))

(define-fun o2 () us_rep l)

(define-fun list__reverse_list__L_1__R5b__assume () Int (last_index o2))

;; H
  (assert (dynamic_invariant2 list__reverse_list__L_1__R5b__assume true false
  true true))

;; H
  (assert (= list__reverse_list__L_1__R5b__assume (last (model1 o2))))

;; Assume
  (assert (= list__reverse_list__L_1__R5b__assume r5b))

;; Assume
  (assert (dynamic_invariant2 r5b true false true true))

(declare-const s__split_fields1 us_split_fields4)

;; H
  (assert
  (forall ((o3 us_split_discrs2) (stack__push__s__fields us_split_fields2))
  (top__function_guard (top (us_repqtmk1 o3 stack__push__s__fields))
  (us_repqtmk1 o3 stack__push__s__fields))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields4) (o3 us_split_discrs2))
  (to____function_guard
  (to__
  (us_repqtmk1 o3
  (us_split_fields3 (to_base (us_repqtmk2 s__split_discrs s__split_fields2)))))
  (us_repqtmk1 o3
  (us_split_fields3 (to_base (us_repqtmk2 s__split_discrs s__split_fields2)))))))

;; H
  (assert
  (forall ((o3 us_split_discrs2) (stack__push__s__fields us_split_fields2))
  (to_but_top__function_guard
  (to_but_top (us_repqtmk1 o3 stack__push__s__fields))
  (us_repqtmk1 o3 stack__push__s__fields))))

(declare-const i Int)

;; H
  (assert (= i r4b))

;; H
  (assert
  (let ((temp___600 r5b))
  (ite (= (and (ite (<= r4b i) true false) (ite (<= i temp___600) true false)) true)
  (exists ((s__split_fields2 us_split_fields4) (i1 Int))
  (and
  (= (and (ite (and (dynamic_property 1 r1b
               (first1 (rec__stack__stack__content1 s__split_fields2))
               (last2 (rec__stack__stack__content1 s__split_fields2)))
               (and
               (= (first1 (rec__stack__stack__content1 s__split_fields2)) 1)
               (= (last2 (rec__stack__stack__content1 s__split_fields2)) 
               r1b)))
          true false) (ite (and (<= r4b i1) (<= i1 r5b)) true false)) true)
  (and (in_range5 i1)
  (let ((o3 l))
  (let ((o4 (element o3 i1)))
  (and
  (and (dynamic_invariant4 o4 true false true true)
  (= o4 (get (model1 o3) i1)))
  (let ((o5 s__split_discrs))
  (exists ((stack__push__s__fields us_split_fields2))
  (and
  (and
  (and (= (top (us_repqtmk1 o5 stack__push__s__fields)) o4)
  (= (let ((temp___455 (to__
                       (us_repqtmk1 o5
                       (us_split_fields3
                       (to_base
                       (us_repqtmk2 s__split_discrs s__split_fields2)))))))
     (let ((temp___454 (to_but_top (us_repqtmk1 o5 stack__push__s__fields))))
     (bool_eq2 (to_array1 temp___454) (first3 temp___454) (last4 temp___454)
     (to_array1 temp___455) (first3 temp___455) (last4 temp___455)))) true))
  (dynamic_invariant6 (us_repqtmk1 o5 stack__push__s__fields) true true true
  true))
  (let ((temp___601 (of_base
                    (us_repqtmk1 s__split_discrs stack__push__s__fields))))
  (and (= s__split_fields1 (us_split_fields5 temp___601))
  (and (= s__split_discrs (us_split_discrs4 temp___601)) (= i1 temp___600)))))))))))))
  (= s__split_fields1 s__split_fields))))

(define-fun list__reverse_list__L_2__R7b__assume () Int 1)

;; H
  (assert (dynamic_invariant3 list__reverse_list__L_2__R7b__assume true false
  true true))

;; H
  (assert (= list__reverse_list__L_2__R7b__assume 1))

;; Assume
  (assert (= list__reverse_list__L_2__R7b__assume r7b))

;; Assume
  (assert (dynamic_invariant3 r7b true false true true))

(define-fun o3 () us_rep l)

(define-fun list__reverse_list__L_2__R8b__assume () Int (last_index o3))

;; H
  (assert (dynamic_invariant2 list__reverse_list__L_2__R8b__assume true false
  true true))

;; H
  (assert (= list__reverse_list__L_2__R8b__assume (last (model1 o3))))

;; Assume
  (assert (= list__reverse_list__L_2__R8b__assume r8b))

;; Assume
  (assert (dynamic_invariant2 r8b true false true true))

(define-fun temp___605 () Int r7b)

(define-fun temp___606 () Int r8b)

(declare-const i1 Int)

;; H
  (assert (= i1 temp___605))

;; H
  (assert
  (= (and (ite (<= temp___605 i1) true false) (ite (<= i1 temp___606) true
                                              false)) true))

(define-fun o4 () us_rep2 (to_base
                          (us_repqtmk2 s__split_discrs s__split_fields1)))

(define-fun o5 () Int (top o4))

;; H
  (assert (top__function_guard o5 o4))

;; H
  (assert (dynamic_invariant o5 true false true true))

;; H
  (assert (= o5 (to_rep2 (rec__stack__stack__top (us_split_fields3 o4)))))

(define-fun o6 () us_split_discrs res__split_discrs)

(declare-const list__my_lists__append__2__container__fields us_main_type)

;; H
  (assert
  (= (length
     (us_repqtmk o6
     (us_split_fieldsqtmk list__my_lists__append__2__container__fields))) (+ 
  (length
  (us_repqtmk o6
  (us_split_fields1
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))))) 1)))

;; H
  (assert
  (= (olt
     (model1
     (us_repqtmk o6
     (us_split_fields1
     (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields)))))
     (model1
     (us_repqtmk o6
     (us_split_fieldsqtmk list__my_lists__append__2__container__fields)))) true))

;; H
  (assert
  (= (get
     (model1
     (us_repqtmk o6
     (us_split_fieldsqtmk list__my_lists__append__2__container__fields)))
     (+ (last_index
        (us_repqtmk o6
        (us_split_fields1
        (us_repqtmk res__split_discrs
        (us_split_fieldsqtmk res__split_fields))))) 1)) o5))

;; H
  (assert true)

(declare-const res__split_fields1 us_main_type)

;; H
  (assert
  (= res__split_fields1 list__my_lists__append__2__container__fields))

;; Assume
  (assert true)

(define-fun o7 () us_split_discrs2 s__split_discrs)

(declare-const stack__pop__s__fields us_split_fields2)

;; H
  (assert
  (forall ((o8 us_split_discrs2) (stack__pop__s__fields1 us_split_fields2))
  (to____function_guard (to__ (us_repqtmk1 o8 stack__pop__s__fields1))
  (us_repqtmk1 o8 stack__pop__s__fields1))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields4) (o8 us_split_discrs2))
  (to_but_top__function_guard
  (to_but_top
  (us_repqtmk1 o8
  (us_split_fields3 (to_base (us_repqtmk2 s__split_discrs s__split_fields2)))))
  (us_repqtmk1 o8
  (us_split_fields3 (to_base (us_repqtmk2 s__split_discrs s__split_fields2)))))))

;; H
  (assert
  (= (let ((temp___466 (to__ (us_repqtmk1 o7 stack__pop__s__fields))))
     (let ((temp___465 (to_but_top
                       (us_repqtmk1 o7
                       (us_split_fields3
                       (to_base
                       (us_repqtmk2 s__split_discrs s__split_fields1)))))))
     (bool_eq2 (to_array1 temp___465) (first3 temp___465) (last4 temp___465)
     (to_array1 temp___466) (first3 temp___466) (last4 temp___466)))) true))

;; H
  (assert (dynamic_invariant6 (us_repqtmk1 o7 stack__pop__s__fields) true
  true true true))

(define-fun temp___608 () us_rep3 (of_base
                                  (us_repqtmk1 s__split_discrs
                                  stack__pop__s__fields)))

(declare-const s__split_fields2 us_split_fields4)

;; H
  (assert (= s__split_fields2 (us_split_fields5 temp___608)))

;; Assume
  (assert (= s__split_discrs (us_split_discrs4 temp___608)))

(declare-const j Int)

;; H
  (assert (<= 1 j))

;; H
  (assert (<= j i1))

(assert
;; defqtvc
 ;; File "list.ads", line 11, characters 0-0
  (not
  (= (element
     (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields1))
     j) (element l (+ (- (last_index l) j) 1)))))
(check-sat)
