(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-sort us_main_type 0)

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (rec__traverse_list__list_acc__is_null_pointer Bool)(rec__traverse_list__list_acc__pointer_address Int)(rec__traverse_list__list_acc__pointer_value_abstr us_main_type)))))
(define-fun us_rep_rec__traverse_list__list_acc__is_null_pointer__projection ((a us_rep)) Bool 
  (rec__traverse_list__list_acc__is_null_pointer a))

(define-fun us_rep_rec__traverse_list__list_acc__pointer_address__projection ((a us_rep)) Int 
  (rec__traverse_list__list_acc__pointer_address a))

(define-fun us_rep_rec__traverse_list__list_acc__pointer_value_abstr__projection ((a us_rep)) us_main_type 
  (rec__traverse_list__list_acc__pointer_value_abstr a))

(declare-datatypes ()
((us_rep__ref (us_rep__refqtmk (us_rep__content us_rep)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep 
  (us_rep__content a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__traverse_list__list_acc__is_null_pointer a) 
                        (rec__traverse_list__list_acc__is_null_pointer b))
                        (=>
                        (not
                        (= (rec__traverse_list__list_acc__is_null_pointer a) true))
                        (and
                        (= (rec__traverse_list__list_acc__pointer_address a) 
                        (rec__traverse_list__list_acc__pointer_address b))
                        (= (rec__traverse_list__list_acc__pointer_value_abstr
                           a) (rec__traverse_list__list_acc__pointer_value_abstr
                              b)))))
                   true false))

(declare-const dummy1 us_rep)

(declare-datatypes () ((t3b__ref (t3b__refqtmk (t3b__content us_rep)))))
(define-fun t3b__ref_t3b__content__projection ((a t3b__ref)) us_rep (t3b__content
                                                                    a))

(declare-const x us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const dummy2 us_rep)

(declare-datatypes () ((t4b__ref (t4b__refqtmk (t4b__content us_rep)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_rep (t4b__content
                                                                    a))

(declare-fun get_nth (us_rep Int) us_rep)

(declare-fun get_nth__function_guard (us_rep us_rep Int) Bool)

(declare-sort us_pledge_ty 0)

(declare-datatypes ()
((us_pledge_ty__ref
 (us_pledge_ty__refqtmk (us_pledge_ty__content us_pledge_ty)))))
(declare-fun us_pledge_get (us_pledge_ty us_rep us_rep) Bool)

(declare-fun traverse_list__get_nth__pledge (us_rep Int) us_pledge_ty)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i1 integer))
  (and (<= (- 2147483648) (integerqtint i1))
  (<= (integerqtint i1) 2147483647))))

(define-fun in_range2 ((x1 Int)) Bool (and (<= (- 2147483648) x1)
                                      (<= x1 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x1 integer)) Int (integerqtint x1))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x1 integer))
  (! (= (of_rep (to_rep x1)) x1) :pattern ((to_rep x1)) )))

;; range_axiom
  (assert
  (forall ((x1 integer)) (! (in_range2 (to_rep x1)) :pattern ((to_rep x1)) )))

;; coerce_axiom
  (assert
  (forall ((x1 Int))
  (! (=> (in_range2 x1) (= (to_rep (of_rep x1)) x1)) :pattern ((to_rep
                                                               (of_rep x1))) )))

(declare-const dummy4 us_rep)

(declare-datatypes ()
((list_acc__ref (list_acc__refqtmk (list_acc__content us_rep)))))
(define-fun list_acc__ref_list_acc__content__projection ((a list_acc__ref)) us_rep 
  (list_acc__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__traverse_list__list__val integer)(rec__traverse_list__list__next us_rep)))))
(define-fun us_split_fields_rec__traverse_list__list__val__projection ((a us_split_fields)) integer 
  (rec__traverse_list__list__val a))

(define-fun us_split_fields_rec__traverse_list__list__next__projection ((a us_split_fields)) us_rep 
  (rec__traverse_list__list__next a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__traverse_list__list__val
                            (us_split_fields1 a))) (to_rep
                                                   (rec__traverse_list__list__val
                                                   (us_split_fields1 b))))
                         (= (bool_eq
                            (rec__traverse_list__list__next
                            (us_split_fields1 a))
                            (rec__traverse_list__list__next
                            (us_split_fields1 b))) true))
                    true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const traverse_list__list__val__first__bit Int)

(declare-const traverse_list__list__val__last__bit Int)

(declare-const traverse_list__list__val__position Int)

;; traverse_list__list__val__first__bit_axiom
  (assert (<= 0 traverse_list__list__val__first__bit))

;; traverse_list__list__val__last__bit_axiom
  (assert
  (< traverse_list__list__val__first__bit traverse_list__list__val__last__bit))

;; traverse_list__list__val__position_axiom
  (assert (<= 0 traverse_list__list__val__position))

(declare-const traverse_list__list__next__first__bit Int)

(declare-const traverse_list__list__next__last__bit Int)

(declare-const traverse_list__list__next__position Int)

;; traverse_list__list__next__first__bit_axiom
  (assert (<= 0 traverse_list__list__next__first__bit))

;; traverse_list__list__next__last__bit_axiom
  (assert
  (< traverse_list__list__next__first__bit traverse_list__list__next__last__bit))

;; traverse_list__list__next__position_axiom
  (assert (<= 0 traverse_list__list__next__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes () ((list__ref (list__refqtmk (list__content us_rep1)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep1 
  (list__content a))

(declare-const dummy6 us_rep)

(declare-datatypes () ((t7b__ref (t7b__refqtmk (t7b__content us_rep)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) us_rep (t7b__content
                                                                    a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort us_pledge_ty1 0)

(declare-datatypes ()
((us_pledge_ty__ref1
 (us_pledge_ty__refqtmk1 (us_pledge_ty__content1 us_pledge_ty1)))))
(declare-fun us_pledge_get1 (us_pledge_ty1 us_rep us_rep) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun us_open (us_main_type) us_rep1)

(declare-fun us_close (us_rep1) us_main_type)

;; close_open
  (assert
  (forall ((x1 us_main_type))
  (! (= (us_close (us_open x1)) x1) :pattern ((us_open x1)) )))

;; open_close
  (assert
  (forall ((x1 us_rep1))
  (! (= (us_open (us_close x1)) x1) :pattern ((us_close x1)) )))

(define-fun rec__traverse_list__list_acc__pointer_value ((a us_rep)) us_rep1 
  (us_open (rec__traverse_list__list_acc__pointer_value_abstr a)))

(define-fun rec__traverse_list__list_acc__pointer_value__pred ((a us_rep)) Bool 
  (not (= (rec__traverse_list__list_acc__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
  (assert
  (= (rec__traverse_list__list_acc__is_null_pointer us_null_pointer) true))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(define-fun default_initial_assumption ((temp___expr_181 us_rep)
  (temp___skip_top_level_182 Bool)) Bool (= (rec__traverse_list__list_acc__is_null_pointer
                                            temp___expr_181) true))

(define-fun default_initial_assumption1 ((temp___expr_188 us_rep1)
  (temp___skip_top_level_189 Bool)) Bool (= (rec__traverse_list__list_acc__is_null_pointer
                                            (rec__traverse_list__list__next
                                            (us_split_fields1
                                            temp___expr_188))) true))

;; get_nth__post_axiom
  (assert
  (forall ((x1 us_rep))
  (forall ((i1 Int))
  (! (=> (dynamic_invariant i1 true true true true)
     (let ((result (get_nth x1 i1)))
     (=> (get_nth__function_guard result x1 i1)
     (= (us_pledge_get (traverse_list__get_nth__pledge x1 i1) x1 result) true)))) :pattern (
  (get_nth x1 i1)) ))))

;; Assume
  (assert (dynamic_invariant i true false true true))

(define-fun traverse_list__get_nth__res__assume () us_rep x)

(declare-const usf us_pledge_ty1)

;; Ensures
  (assert
  (forall ((temp___borrowed_194 us_rep))
  (forall ((temp___brower_193 us_rep))
  (! (= (= (us_pledge_get1 usf temp___borrowed_194 temp___brower_193) true)
     (= temp___brower_193 temp___borrowed_194)) :pattern ((us_pledge_get1 
                                                          usf
                                                          temp___borrowed_194
                                                          temp___brower_193)) ))))

(declare-const traverse_list__get_nth__res__pledge us_pledge_ty1)

;; H
  (assert (= traverse_list__get_nth__res__pledge usf))

(declare-const res__pointer_value us_split_fields)

;; H
  (assert
  (= (us_repqtmk1 res__pointer_value) (rec__traverse_list__list_acc__pointer_value
                                      traverse_list__get_nth__res__assume)))

(declare-const res__pointer_address Int)

;; H
  (assert
  (= res__pointer_address (rec__traverse_list__list_acc__pointer_address
                          traverse_list__get_nth__res__assume)))

(declare-const res__is_null_pointer Bool)

;; H
  (assert
  (= res__is_null_pointer (rec__traverse_list__list_acc__is_null_pointer
                          traverse_list__get_nth__res__assume)))

(declare-const j Int)

;; H
  (assert (= j 1))

;; H
  (assert (= (and (ite (<= 1 j) true false) (ite (<= j i) true false)) true))

(declare-const res__pointer_value1 us_split_fields)

(declare-const res__pointer_address1 Int)

(declare-const res__is_null_pointer1 Bool)

(declare-const traverse_list__get_nth__res__pledge1 us_pledge_ty1)

(declare-const j1 Int)

;; H
  (assert
  (= (and (ite true true false) (ite (and (<= 1 j1) (<= j1 i)) true false)) true))

;; H
  (assert
  (not
  (= (bool_eq
     (us_repqtmk res__is_null_pointer1 res__pointer_address1
     (us_close (us_repqtmk1 res__pointer_value1))) us_null_pointer) true)))

(declare-const usf1 us_pledge_ty1)

;; Ensures
  (assert
  (forall ((temp___borrowed_201 us_rep))
  (forall ((temp___brower_198 us_rep))
  (! (= (us_pledge_get1 usf1 temp___borrowed_201 temp___brower_198) (us_pledge_get1
                                                                    traverse_list__get_nth__res__pledge1
                                                                    temp___borrowed_201
                                                                    (us_repqtmk
                                                                    res__is_null_pointer1
                                                                    res__pointer_address1
                                                                    (us_close
                                                                    (us_repqtmk1
                                                                    (us_split_fieldsqtmk
                                                                    (rec__traverse_list__list__val
                                                                    (us_split_fields1
                                                                    (rec__traverse_list__list_acc__pointer_value
                                                                    (us_repqtmk
                                                                    res__is_null_pointer1
                                                                    res__pointer_address1
                                                                    (us_close
                                                                    (us_repqtmk1
                                                                    res__pointer_value1))))))
                                                                    temp___brower_198)))))) :pattern (
  (us_pledge_get1 usf1 temp___borrowed_201 temp___brower_198)) ))))

(declare-const traverse_list__get_nth__res__pledge2 us_pledge_ty1)

;; H
  (assert (= traverse_list__get_nth__res__pledge2 usf1))

(assert
;; defqtvc
 ;; File "traverse_list.adb", line 9, characters 0-0
  (not (rec__traverse_list__list_acc__pointer_value__pred
  (us_repqtmk res__is_null_pointer1 res__pointer_address1
  (us_close (us_repqtmk1 res__pointer_value1))))))
(check-sat)

(exit)
