;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort signature_type 0)

(declare-fun signature_typeqtint (signature_type) Int)

;; signature_type'axiom
  (assert
  (forall ((i signature_type))
  (and (<= 0 (signature_typeqtint i)) (<= (signature_typeqtint i) 7))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (signature_type signature_type) Bool)

(declare-const dummy signature_type)

(declare-datatypes ()
((signature_type__ref
 (signature_type__refqtmk (signature_type__content signature_type)))))
(define-fun signature_type__ref_signature_type__content__projection ((a signature_type__ref)) signature_type 
  (signature_type__content a))

(define-fun to_rep ((x signature_type)) Int (signature_typeqtint x))

(declare-fun of_rep (Int) signature_type)

;; inversion_axiom
  (assert
  (forall ((x signature_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x signature_type)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort columns 0)

(declare-fun columnsqtint (columns) Int)

;; columns'axiom
  (assert
  (forall ((i columns))
  (and (<= 0 (columnsqtint i)) (<= (columnsqtint i) 319))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 319)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (columns columns) Bool)

(declare-const dummy1 columns)

(declare-datatypes ()
((columns__ref (columns__refqtmk (columns__content columns)))))
(define-fun columns__ref_columns__content__projection ((a columns__ref)) columns 
  (columns__content a))

(define-fun to_rep1 ((x columns)) Int (columnsqtint x))

(declare-fun of_rep1 (Int) columns)

;; inversion_axiom
  (assert
  (forall ((x columns))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x columns)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort rows 0)

(declare-fun rowsqtint (rows) Int)

;; rows'axiom
  (assert
  (forall ((i rows)) (and (<= 0 (rowsqtint i)) (<= (rowsqtint i) 199))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (rows rows) Bool)

(declare-const dummy2 rows)

(declare-datatypes () ((rows__ref (rows__refqtmk (rows__content rows)))))
(define-fun rows__ref_rows__content__projection ((a rows__ref)) rows 
  (rows__content a))

(define-fun to_rep2 ((x rows)) Int (rowsqtint x))

(declare-fun of_rep2 (Int) rows)

;; inversion_axiom
  (assert
  (forall ((x rows)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x rows)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort widths 0)

(declare-fun widthsqtint (widths) Int)

;; widths'axiom
  (assert
  (forall ((i widths)) (and (<= 0 (widthsqtint i)) (<= (widthsqtint i) 320))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 320)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (widths widths) Bool)

(declare-const dummy3 widths)

(declare-datatypes ()
((widths__ref (widths__refqtmk (widths__content widths)))))
(define-fun widths__ref_widths__content__projection ((a widths__ref)) widths 
  (widths__content a))

(define-fun to_rep3 ((x widths)) Int (widthsqtint x))

(declare-fun of_rep3 (Int) widths)

;; inversion_axiom
  (assert
  (forall ((x widths))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x widths)) (! (in_range4 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort heights 0)

(declare-fun heightsqtint (heights) Int)

;; heights'axiom
  (assert
  (forall ((i heights))
  (and (<= 0 (heightsqtint i)) (<= (heightsqtint i) 200))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 200)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (heights heights) Bool)

(declare-const dummy4 heights)

(declare-datatypes ()
((heights__ref (heights__refqtmk (heights__content heights)))))
(define-fun heights__ref_heights__content__projection ((a heights__ref)) heights 
  (heights__content a))

(define-fun to_rep4 ((x heights)) Int (heightsqtint x))

(declare-fun of_rep4 (Int) heights)

;; inversion_axiom
  (assert
  (forall ((x heights))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x heights)) (! (in_range5 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__camera_types__blob_type__signature signature_type)(rec__camera_types__blob_type__x columns)(rec__camera_types__blob_type__y rows)(rec__camera_types__blob_type__width widths)(rec__camera_types__blob_type__height heights)))))
(define-fun us_split_fields_rec__camera_types__blob_type__signature__projection ((a us_split_fields)) signature_type 
  (rec__camera_types__blob_type__signature a))

(define-fun us_split_fields_rec__camera_types__blob_type__x__projection ((a us_split_fields)) columns 
  (rec__camera_types__blob_type__x a))

(define-fun us_split_fields_rec__camera_types__blob_type__y__projection ((a us_split_fields)) rows 
  (rec__camera_types__blob_type__y a))

(define-fun us_split_fields_rec__camera_types__blob_type__width__projection ((a us_split_fields)) widths 
  (rec__camera_types__blob_type__width a))

(define-fun us_split_fields_rec__camera_types__blob_type__height__projection ((a us_split_fields)) heights 
  (rec__camera_types__blob_type__height a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__camera_types__blob_type__signature
                           (us_split_fields1 a))) (to_rep
                                                  (rec__camera_types__blob_type__signature
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__camera_types__blob_type__x
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__camera_types__blob_type__x
                                                  (us_split_fields1 b)))))
                        (and
                        (and
                        (= (to_rep2
                           (rec__camera_types__blob_type__y
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__camera_types__blob_type__y
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__camera_types__blob_type__width
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__camera_types__blob_type__width
                                                  (us_split_fields1 b)))))
                        (= (to_rep4
                           (rec__camera_types__blob_type__height
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__camera_types__blob_type__height
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const camera_types__blob_type__signature__first__bit Int)

(declare-const camera_types__blob_type__signature__last__bit Int)

(declare-const camera_types__blob_type__signature__position Int)

;; camera_types__blob_type__signature__first__bit_axiom
  (assert (<= 0 camera_types__blob_type__signature__first__bit))

;; camera_types__blob_type__signature__last__bit_axiom
  (assert
  (< camera_types__blob_type__signature__first__bit camera_types__blob_type__signature__last__bit))

;; camera_types__blob_type__signature__position_axiom
  (assert (<= 0 camera_types__blob_type__signature__position))

(declare-const camera_types__blob_type__x__first__bit Int)

(declare-const camera_types__blob_type__x__last__bit Int)

(declare-const camera_types__blob_type__x__position Int)

;; camera_types__blob_type__x__first__bit_axiom
  (assert (<= 0 camera_types__blob_type__x__first__bit))

;; camera_types__blob_type__x__last__bit_axiom
  (assert
  (< camera_types__blob_type__x__first__bit camera_types__blob_type__x__last__bit))

;; camera_types__blob_type__x__position_axiom
  (assert (<= 0 camera_types__blob_type__x__position))

(declare-const camera_types__blob_type__y__first__bit Int)

(declare-const camera_types__blob_type__y__last__bit Int)

(declare-const camera_types__blob_type__y__position Int)

;; camera_types__blob_type__y__first__bit_axiom
  (assert (<= 0 camera_types__blob_type__y__first__bit))

;; camera_types__blob_type__y__last__bit_axiom
  (assert
  (< camera_types__blob_type__y__first__bit camera_types__blob_type__y__last__bit))

;; camera_types__blob_type__y__position_axiom
  (assert (<= 0 camera_types__blob_type__y__position))

(declare-const camera_types__blob_type__width__first__bit Int)

(declare-const camera_types__blob_type__width__last__bit Int)

(declare-const camera_types__blob_type__width__position Int)

;; camera_types__blob_type__width__first__bit_axiom
  (assert (<= 0 camera_types__blob_type__width__first__bit))

;; camera_types__blob_type__width__last__bit_axiom
  (assert
  (< camera_types__blob_type__width__first__bit camera_types__blob_type__width__last__bit))

;; camera_types__blob_type__width__position_axiom
  (assert (<= 0 camera_types__blob_type__width__position))

(declare-const camera_types__blob_type__height__first__bit Int)

(declare-const camera_types__blob_type__height__last__bit Int)

(declare-const camera_types__blob_type__height__position Int)

;; camera_types__blob_type__height__first__bit_axiom
  (assert (<= 0 camera_types__blob_type__height__first__bit))

;; camera_types__blob_type__height__last__bit_axiom
  (assert
  (< camera_types__blob_type__height__first__bit camera_types__blob_type__height__last__bit))

;; camera_types__blob_type__height__position_axiom
  (assert (<= 0 camera_types__blob_type__height__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((blob_type__ref (blob_type__refqtmk (blob_type__content us_rep)))))
(define-fun blob_type__ref_blob_type__content__projection ((a blob_type__ref)) us_rep 
  (blob_type__content a))

(declare-const i1s us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_207 us_rep)
  (temp___is_init_203 Bool) (temp___skip_constant_204 Bool)
  (temp___do_toplevel_205 Bool)
  (temp___do_typ_inv_206 Bool)) Bool (=> (= temp___do_toplevel_205 true)
                                     (and (in_range2
                                     (+ (to_rep1
                                        (rec__camera_types__blob_type__x
                                        (us_split_fields1 temp___expr_207))) 
                                     (div1
                                     (to_rep3
                                     (rec__camera_types__blob_type__width
                                     (us_split_fields1 temp___expr_207))) 2)))
                                     (in_range3
                                     (+ (to_rep2
                                        (rec__camera_types__blob_type__y
                                        (us_split_fields1 temp___expr_207))) 
                                     (div1
                                     (to_rep4
                                     (rec__camera_types__blob_type__height
                                     (us_split_fields1 temp___expr_207))) 2))))))

(define-fun default_initial_assumption ((temp___expr_211 us_rep)
  (temp___skip_top_level_212 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__camera_types__blob_type__signature
                                            (us_split_fields1
                                            temp___expr_211))) 0)
                                         (= (to_rep1
                                            (rec__camera_types__blob_type__x
                                            (us_split_fields1
                                            temp___expr_211))) 0))
                                         (and
                                         (and
                                         (= (to_rep2
                                            (rec__camera_types__blob_type__y
                                            (us_split_fields1
                                            temp___expr_211))) 0)
                                         (= (to_rep3
                                            (rec__camera_types__blob_type__width
                                            (us_split_fields1
                                            temp___expr_211))) 0))
                                         (= (to_rep4
                                            (rec__camera_types__blob_type__height
                                            (us_split_fields1
                                            temp___expr_211))) 0))))

(define-fun dynamic_predicate ((temp___213 us_rep)) Bool (and (in_range2
                                                         (+ (to_rep1
                                                            (rec__camera_types__blob_type__x
                                                            (us_split_fields1
                                                            temp___213))) 
                                                         (div1
                                                         (to_rep3
                                                         (rec__camera_types__blob_type__width
                                                         (us_split_fields1
                                                         temp___213))) 2)))
                                                         (in_range3
                                                         (+ (to_rep2
                                                            (rec__camera_types__blob_type__y
                                                            (us_split_fields1
                                                            temp___213))) 
                                                         (div1
                                                         (to_rep4
                                                         (rec__camera_types__blob_type__height
                                                         (us_split_fields1
                                                         temp___213))) 2)))))

(define-fun dynamic_invariant1 ((temp___expr_165 Int)
  (temp___is_init_161 Bool) (temp___skip_constant_162 Bool)
  (temp___do_toplevel_163 Bool)
  (temp___do_typ_inv_164 Bool)) Bool (=>
                                     (or (= temp___is_init_161 true)
                                     (<= 0 7)) (in_range1 temp___expr_165)))

(define-fun dynamic_invariant2 ((temp___expr_179 Int)
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool)
  (temp___do_typ_inv_178 Bool)) Bool (=>
                                     (or (= temp___is_init_175 true)
                                     (<= 0 319)) (in_range2 temp___expr_179)))

(define-fun dynamic_invariant3 ((temp___expr_186 Int)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=>
                                     (or (= temp___is_init_182 true)
                                     (<= 0 199)) (in_range3 temp___expr_186)))

(define-fun dynamic_invariant4 ((temp___expr_193 Int)
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool)
  (temp___do_typ_inv_192 Bool)) Bool (=>
                                     (or (= temp___is_init_189 true)
                                     (<= 0 320)) (in_range4 temp___expr_193)))

(define-fun dynamic_invariant5 ((temp___expr_200 Int)
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)
  (temp___do_typ_inv_199 Bool)) Bool (=>
                                     (or (= temp___is_init_196 true)
                                     (<= 0 200)) (in_range5 temp___expr_200)))

;; Assume
  (assert (dynamic_invariant i1s true false false true))

(declare-const o Int)

;; Ensures
  (assert
  (= (to_rep4 (rec__camera_types__blob_type__height (us_split_fields1 i1s))) 
  o))

(assert
;; defqtvc
 ;; File "camera_types.ads", line 12, characters 0-0
  (not (not (= 2 0))))
(check-sat)
