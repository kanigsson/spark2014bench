;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort cell_type 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (cell_type cell_type) Bool)

(declare-const dummy cell_type)

(declare-datatypes ()
((cell_type__ref (cell_type__refqtmk (cell_type__content cell_type)))))
(define-fun cell_type__ref_cell_type__content__projection ((a cell_type__ref)) cell_type 
  (cell_type__content a))

(declare-fun to_rep (cell_type) Int)

(declare-fun of_rep (Int) cell_type)

;; inversion_axiom
  (assert
  (forall ((x cell_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x cell_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__tetris__cell__kind cell_type)))))
(define-fun us_split_fields_rec__tetris__cell__kind__projection ((a us_split_fields)) cell_type 
  (rec__tetris__cell__kind a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__tetris__cell__kind (us_split_fields1 a))) 
                   (to_rep (rec__tetris__cell__kind (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const tetris__cell__kind__first__bit Int)

(declare-const tetris__cell__kind__last__bit Int)

(declare-const tetris__cell__kind__position Int)

;; tetris__cell__kind__first__bit_axiom
  (assert (<= 0 tetris__cell__kind__first__bit))

;; tetris__cell__kind__last__bit_axiom
  (assert (< tetris__cell__kind__first__bit tetris__cell__kind__last__bit))

;; tetris__cell__kind__position_axiom
  (assert (<= 0 tetris__cell__kind__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((cell__ref (cell__refqtmk (cell__content us_rep)))))
(define-fun cell__ref_cell__content__projection ((a cell__ref)) us_rep 
  (cell__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy2 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int (Array Int us_rep)))))))
(declare-fun slide1 ((Array Int (Array Int us_rep)) Int
  Int) (Array Int (Array Int us_rep)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int (Array Int us_rep))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int us_rep))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq1 (select a temp___idx_155) 1 8
                              (select b (+ (- b__first a__first) temp___idx_155))
                              1 8) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int us_rep)))
  (b (Array Int (Array Int us_rep))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq1 (select a temp___idx_155) 1 8
     (select b (+ (- b__first a__first) temp___idx_155)) 1 8) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun is_empty_cell ((Array Int (Array Int us_rep)) Int Int) Bool)

(declare-fun is_empty_cell__function_guard (Bool
  (Array Int (Array Int us_rep)) Int Int) Bool)

(declare-sort y_coord 0)

(declare-fun y_coordqtint (y_coord) Int)

;; y_coord'axiom
  (assert
  (forall ((i y_coord))
  (and (<= 1 (y_coordqtint i)) (<= (y_coordqtint i) 16))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (y_coord y_coord) Bool)

(declare-const dummy3 y_coord)

(declare-datatypes ()
((y_coord__ref (y_coord__refqtmk (y_coord__content y_coord)))))
(define-fun y_coord__ref_y_coord__content__projection ((a y_coord__ref)) y_coord 
  (y_coord__content a))

(define-fun dynamic_invariant ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 1 16)) (in_range2 temp___expr_171)))

(declare-sort x_coord 0)

(declare-fun x_coordqtint (x_coord) Int)

;; x_coord'axiom
  (assert
  (forall ((i x_coord))
  (and (<= 1 (x_coordqtint i)) (<= (x_coordqtint i) 8))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (x_coord x_coord) Bool)

(declare-const dummy4 x_coord)

(declare-datatypes ()
((x_coord__ref (x_coord__refqtmk (x_coord__content x_coord)))))
(define-fun x_coord__ref_x_coord__content__projection ((a x_coord__ref)) x_coord 
  (x_coord__content a))

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 1 8)) (in_range3 temp___expr_178)))

;; is_empty_cell__post_axiom
  (assert true)

;; is_empty_cell__def_axiom
  (assert
  (forall ((the_board (Array Int (Array Int us_rep))))
  (forall ((xpos Int) (ypos Int))
  (! (= (= (is_empty_cell the_board xpos ypos) true)
     (= (to_rep
        (rec__tetris__cell__kind
        (us_split_fields1
        (let ((temp___247 (select the_board ypos))) (select temp___247 xpos))))) 0)) :pattern (
  (is_empty_cell the_board xpos ypos)) ))))

(declare-sort piece_count_type 0)

(declare-fun piece_count_typeqtint (piece_count_type) Int)

;; piece_count_type'axiom
  (assert
  (forall ((i piece_count_type))
  (and (<= 0 (piece_count_typeqtint i)) (<= (piece_count_typeqtint i) 1000))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (piece_count_type piece_count_type) Bool)

(declare-const dummy5 piece_count_type)

(declare-datatypes ()
((piece_count_type__ref
 (piece_count_type__refqtmk (piece_count_type__content piece_count_type)))))
(define-fun piece_count_type__ref_piece_count_type__content__projection ((a piece_count_type__ref)) piece_count_type 
  (piece_count_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_164 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)
  (temp___do_typ_inv_163 Bool)) Bool (=>
                                     (or (= temp___is_init_160 true)
                                     (<= 0 1000)) (in_range4
                                     temp___expr_164)))

(define-fun dynamic_invariant3 ((temp___expr_185 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)
  (temp___do_typ_inv_184 Bool)) Bool (=>
                                     (or (= temp___is_init_181 true)
                                     (<= 0 7)) (in_range1 temp___expr_185)))

(declare-const piece_count Int)

(declare-const create_piece Bool)

(declare-const game_board (Array Int (Array Int us_rep)))

;; Assume
  (assert (dynamic_invariant2 piece_count true false true true))

;; Assume
  (assert true)

(declare-const spark__branch Bool)

;; H
  (assert
  (= spark__branch (ite (= (ite create_piece 1 0) (ite (distinct 1 0) 1 0))
                   true false)))

;; H
  (assert (= spark__branch true))

(define-fun o () Bool (is_empty_cell game_board 4 1))

;; H
  (assert (is_empty_cell__function_guard o game_board 4 1))

;; H
  (assert
  (= (= o true)
  (= (to_rep
     (rec__tetris__cell__kind
     (us_split_fields1 (select (select game_board 1) 4)))) 0)))

(declare-const spark__branch1 Bool)

;; H
  (assert (= spark__branch1 o))

;; H
  (assert (= spark__branch1 true))

(assert
;; defqtvc
 ;; File "controller.ads", line 6, characters 0-0
  (not (in_range4 (+ piece_count 1))))
(check-sat)
