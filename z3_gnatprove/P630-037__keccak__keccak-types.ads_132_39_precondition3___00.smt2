(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-fun shift_left_2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun shift_left_2__function_guard ((_ BitVec 8) (_ BitVec 8)
  Int) Bool)

(declare-sort unsigned_2 0)

(define-fun in_range1 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x03)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq1 (unsigned_2 unsigned_2) Bool)

(declare-const dummy1 unsigned_2)

(declare-datatypes ()
((unsigned_2__ref (unsigned_2__refqtmk (unsigned_2__content unsigned_2)))))
(define-fun unsigned_2__ref_unsigned_2__content__projection ((a unsigned_2__ref)) unsigned_2 
  (unsigned_2__content a))

(define-fun dynamic_invariant1 ((temp___expr_175 (_ BitVec 8))
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)
  (temp___do_typ_inv_174 Bool)) Bool (=>
                                     (or (= temp___is_init_171 true)
                                     (bvule #x00 #x03)) (in_range1
                                     temp___expr_175)))

;; shift_left_2__post_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and
     (and (dynamic_invariant1 value true true true true) (dynamic_invariant
     amount true true true true)) (<= amount 2))
     (let ((result (shift_left_2 value amount)))
     (=> (shift_left_2__function_guard result value amount)
     (dynamic_invariant1 result true false true true)))) :pattern ((shift_left_2
                                                                   value
                                                                   amount)) ))))

;; shift_left_2__def_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 value true true true true) (dynamic_invariant
     amount true true true true))
     (= (shift_left_2 value amount) (bvand (ite (< amount 8)
                                           (bvshl value ((_ int2bv 8) amount))
                                           #x00) #x03))) :pattern ((shift_left_2
                                                                   value
                                                                   amount)) ))))

(declare-fun shift_right_2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun shift_right_2__function_guard ((_ BitVec 8) (_ BitVec 8)
  Int) Bool)

;; shift_right_2__post_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and
     (and (dynamic_invariant1 value true true true true) (dynamic_invariant
     amount true true true true)) (<= amount 2))
     (let ((result (shift_right_2 value amount)))
     (=> (shift_right_2__function_guard result value amount)
     (dynamic_invariant1 result true false true true)))) :pattern ((shift_right_2
                                                                   value
                                                                   amount)) ))))

;; shift_right_2__def_axiom
  (assert
  (forall ((value (_ BitVec 8)))
  (forall ((amount Int))
  (! (=>
     (and (dynamic_invariant1 value true true true true) (dynamic_invariant
     amount true true true true))
     (= (shift_right_2 value amount) (bvand (ite (< amount 8)
                                            (bvlshr value ((_ int2bv 8) amount))
                                            #x00) #x03))) :pattern ((shift_right_2
                                                                    value
                                                                    amount)) ))))

(declare-const value (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const amount Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; Assume
  (assert (dynamic_invariant1 value true false true true))

;; Assume
  (assert (dynamic_invariant amount true false true true))

;; Assume
  (assert (<= amount 2))

(define-fun o () Int (- 2 amount))

;; Ensures
  (assert (in_range o))

(define-fun o1 () (_ BitVec 8) value)

(assert
;; defqtvc
 ;; File "keccak-types.ads", line 86, characters 0-0
  (not (<= o 2)))
(check-sat)

(exit)
