;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__user_eq__nested__r1__a integer)(rec__user_eq__nested__r1__b integer)))))
(define-fun us_split_fields_rec__user_eq__nested__r1__a__projection ((a us_split_fields)) integer 
  (rec__user_eq__nested__r1__a a))

(define-fun us_split_fields_rec__user_eq__nested__r1__b__projection ((a us_split_fields)) integer 
  (rec__user_eq__nested__r1__b a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__user_eq__nested__r1__a (us_split_fields1 a))) 
                        (to_rep
                        (rec__user_eq__nested__r1__a (us_split_fields1 b))))
                        (= (to_rep
                           (rec__user_eq__nested__r1__b (us_split_fields1 a))) 
                        (to_rep
                        (rec__user_eq__nested__r1__b (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const user_eq__nested__r1__a__first__bit Int)

(declare-const user_eq__nested__r1__a__last__bit Int)

(declare-const user_eq__nested__r1__a__position Int)

;; user_eq__nested__r1__a__first__bit_axiom
  (assert (<= 0 user_eq__nested__r1__a__first__bit))

;; user_eq__nested__r1__a__last__bit_axiom
  (assert
  (< user_eq__nested__r1__a__first__bit user_eq__nested__r1__a__last__bit))

;; user_eq__nested__r1__a__position_axiom
  (assert (<= 0 user_eq__nested__r1__a__position))

(declare-const user_eq__nested__r1__b__first__bit Int)

(declare-const user_eq__nested__r1__b__last__bit Int)

(declare-const user_eq__nested__r1__b__position Int)

;; user_eq__nested__r1__b__first__bit_axiom
  (assert (<= 0 user_eq__nested__r1__b__first__bit))

;; user_eq__nested__r1__b__last__bit_axiom
  (assert
  (< user_eq__nested__r1__b__first__bit user_eq__nested__r1__b__last__bit))

;; user_eq__nested__r1__b__position_axiom
  (assert (<= 0 user_eq__nested__r1__b__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((r1__ref (r1__refqtmk (r1__content us_rep)))))
(define-fun r1__ref_r1__content__projection ((a r1__ref)) us_rep (r1__content
                                                                 a))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const user_eq__nested__r1__a__first__bit1 Int)

(declare-const user_eq__nested__r1__a__last__bit1 Int)

(declare-const user_eq__nested__r1__a__position1 Int)

;; user_eq__nested__r1__a__first__bit_axiom
  (assert (<= 0 user_eq__nested__r1__a__first__bit1))

;; user_eq__nested__r1__a__last__bit_axiom
  (assert
  (< user_eq__nested__r1__a__first__bit1 user_eq__nested__r1__a__last__bit1))

;; user_eq__nested__r1__a__position_axiom
  (assert (<= 0 user_eq__nested__r1__a__position1))

(declare-const user_eq__nested__r1__b__first__bit1 Int)

(declare-const user_eq__nested__r1__b__last__bit1 Int)

(declare-const user_eq__nested__r1__b__position1 Int)

;; user_eq__nested__r1__b__first__bit_axiom
  (assert (<= 0 user_eq__nested__r1__b__first__bit1))

;; user_eq__nested__r1__b__last__bit_axiom
  (assert
  (< user_eq__nested__r1__b__first__bit1 user_eq__nested__r1__b__last__bit1))

;; user_eq__nested__r1__b__position_axiom
  (assert (<= 0 user_eq__nested__r1__b__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((r2__ref (r2__refqtmk (r2__content us_rep)))))
(define-fun r2__ref_r2__content__projection ((a r2__ref)) us_rep (r2__content
                                                                 a))

(declare-datatypes ()
((us_split_fields2 (us_split_fieldsqtmk1 (rec__user_eq__rr1__f us_rep)))))
(define-fun us_split_fields_rec__user_eq__rr1__f__projection ((a us_split_fields2)) us_rep 
  (rec__user_eq__rr1__f a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (user_eq1
                            (rec__user_eq__rr1__f (us_split_fields3 a))
                            (rec__user_eq__rr1__f (us_split_fields3 b))) true)
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const user_eq__rr1__f__first__bit Int)

(declare-const user_eq__rr1__f__last__bit Int)

(declare-const user_eq__rr1__f__position Int)

;; user_eq__rr1__f__first__bit_axiom
  (assert (<= 0 user_eq__rr1__f__first__bit))

;; user_eq__rr1__f__last__bit_axiom
  (assert (< user_eq__rr1__f__first__bit user_eq__rr1__f__last__bit))

;; user_eq__rr1__f__position_axiom
  (assert (<= 0 user_eq__rr1__f__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes () ((rr1__ref (rr1__refqtmk (rr1__content us_rep1)))))
(define-fun rr1__ref_rr1__content__projection ((a rr1__ref)) us_rep1 
  (rr1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ()
((us_split_fields4 (us_split_fieldsqtmk2 (rec__user_eq__rr2__f us_rep)))))
(define-fun us_split_fields_rec__user_eq__rr2__f__projection ((a us_split_fields4)) us_rep 
  (rec__user_eq__rr2__f a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq2 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (user_eq2
                            (rec__user_eq__rr2__f (us_split_fields5 a))
                            (rec__user_eq__rr2__f (us_split_fields5 b))) true)
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const user_eq__rr2__f__first__bit Int)

(declare-const user_eq__rr2__f__last__bit Int)

(declare-const user_eq__rr2__f__position Int)

;; user_eq__rr2__f__first__bit_axiom
  (assert (<= 0 user_eq__rr2__f__first__bit))

;; user_eq__rr2__f__last__bit_axiom
  (assert (< user_eq__rr2__f__first__bit user_eq__rr2__f__last__bit))

;; user_eq__rr2__f__position_axiom
  (assert (<= 0 user_eq__rr2__f__position))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes () ((rr2__ref (rr2__refqtmk (rr2__content us_rep2)))))
(define-fun rr2__ref_rr2__content__projection ((a rr2__ref)) us_rep2 
  (rr2__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (and
     (forall ((a1 us_rep) (b1 us_rep)) (oeq__function_guard (oeq a1 b1) a1
     b1)) (= (user_eq1 a b) (oeq a b))) :pattern ((user_eq1 a b)) )))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (= (= (oeq x y) true)
     (= (to_rep (rec__user_eq__nested__r1__a (us_split_fields1 x))) (to_rep
                                                                    (rec__user_eq__nested__r1__a
                                                                    (us_split_fields1
                                                                    y))))) :pattern (
  (oeq x y)) )))

(declare-fun oeq1 (us_rep us_rep) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (and
     (forall ((a1 us_rep) (b1 us_rep)) (oeq__function_guard1 (oeq1 a1 b1) a1
     b1)) (= (user_eq2 a b) (oeq1 a b))) :pattern ((user_eq2 a b)) )))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (= (= (oeq1 x y) true)
     (= (to_rep (rec__user_eq__nested__r1__b (us_split_fields1 x))) (to_rep
                                                                    (rec__user_eq__nested__r1__b
                                                                    (us_split_fields1
                                                                    y))))) :pattern (
  (oeq1 x y)) )))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 2))

(declare-const x__split_fields us_split_fields)

;; H
  (assert (= x__split_fields (us_split_fieldsqtmk rliteral rliteral)))

;; Assume
  (assert true)

(declare-const y__split_fields us_split_fields)

;; H
  (assert (= y__split_fields (us_split_fieldsqtmk rliteral rliteral1)))

;; Assume
  (assert true)

(declare-const z__split_fields us_split_fields)

;; H
  (assert (= z__split_fields (us_split_fieldsqtmk rliteral rliteral)))

;; Assume
  (assert true)

(declare-const w__split_fields us_split_fields)

;; H
  (assert (= w__split_fields (us_split_fieldsqtmk rliteral rliteral1)))

;; Assume
  (assert true)

(assert
;; defqtvc
 ;; File "user_eq.adb", line 1, characters 0-0
  (not
  (= (bool_eq1
     (us_repqtmk1 (us_split_fieldsqtmk1 (us_repqtmk x__split_fields)))
     (us_repqtmk1 (us_split_fieldsqtmk1 (us_repqtmk y__split_fields)))) true)))
(check-sat)
