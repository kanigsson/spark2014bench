(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-fun b (Int) Bool)

(declare-fun b__function_guard (Bool Int) Bool)

;; b__post_axiom
  (assert true)

(declare-fun e (tuple0) Int)

(declare-fun e__function_guard (Int tuple0) Bool)

(declare-sort enum 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (enum enum) Bool)

(declare-const dummy1 enum)

(declare-datatypes () ((enum__ref (enum__refqtmk (enum__content enum)))))
(define-fun enum__ref_enum__content__projection ((a enum__ref)) enum 
  (enum__content a))

(define-fun dynamic_invariant1 ((temp___expr_181 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (<= 0 2)) (in_range2 temp___expr_181)))

;; e__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (e us_void_param)))
     (=> (e__function_guard result us_void_param) (dynamic_invariant1 result
     true false true true))) :pattern ((e us_void_param)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort t1b 0)

(declare-fun t1bqtint (t1b) Int)

;; t1b'axiom
  (assert (forall ((i t1b)) (and (<= 1 (t1bqtint i)) (<= (t1bqtint i) 2))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (t1b t1b) Bool)

(declare-const dummy2 t1b)

(declare-datatypes () ((t1b__ref (t1b__refqtmk (t1b__content t1b)))))
(define-fun t1b__ref_t1b__content__projection ((a t1b__ref)) t1b (t1b__content
                                                                 a))

(declare-const spark__branch Bool)

(declare-const y Int)

(declare-const r2b Int)

(declare-const i Int)

(declare-const x Int)

;; H
  (assert (= x 0))

;; Assume
  (assert (dynamic_invariant x true false true true))

(declare-const i1 Int)

;; H
  (assert (= i1 1))

;; H
  (assert
  (= (and (ite (<= 1 i1) true false) (ite (<= i1 2) true false)) true))

(define-fun o () Bool (b 1))

;; Ensures
  (assert (b__function_guard o 1))

(declare-const spark__branch1 Bool)

;; H
  (assert (= spark__branch1 o))

;; H
  (assert (= spark__branch1 true))

(define-fun o1 () Int (e Tuple0))

;; H
  (assert (e__function_guard o1 Tuple0))

;; H
  (assert (dynamic_invariant1 o1 true false true true))

(declare-const spark__branch2 Bool)

;; H
  (assert (= spark__branch2 (ite (= o1 1) true false)))

;; H
  (assert (= spark__branch2 true))

(define-fun o2 () Bool (b 3))

;; Ensures
  (assert (b__function_guard o2 3))

(declare-const spark__branch3 Bool)

;; H
  (assert (= spark__branch3 o2))

;; H
  (assert (= spark__branch3 true))

(declare-const y1 Int)

;; H
  (assert (= y1 10))

;; Assume
  (assert (dynamic_invariant y1 true false true true))

(declare-const r2b1 Int)

;; H
  (assert (= r2b1 y1))

;; Assume
  (assert (dynamic_invariant r2b1 true false true true))

(declare-const i2 Int)

;; H
  (assert (= i2 1))

;; H
  (assert
  (= (and (ite (<= 1 i2) true false) (ite (<= i2 r2b1) true false)) true))

(declare-const x1 Int)

(declare-const i3 Int)

;; H
  (assert
  (= (and (ite (dynamic_invariant x1 true true true true) true false) 
  (ite (and (<= 1 i3) (<= i3 r2b1)) true false)) true))

(define-fun o3 () Int (+ x1 1))

(assert
;; defqtvc
 ;; File "test_goto.adb", line 1, characters 0-0
  (not (in_range1 o3)))
(check-sat)

(exit)
