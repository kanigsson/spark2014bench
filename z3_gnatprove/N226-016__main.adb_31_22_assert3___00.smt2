;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort id_type 0)

(declare-fun id_typeqtint (id_type) Int)

;; id_type'axiom
  (assert
  (forall ((i id_type))
  (and (<= 0 (id_typeqtint i)) (<= (id_typeqtint i) 1))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (id_type id_type) Bool)

(declare-const dummy id_type)

(declare-datatypes ()
((id_type__ref (id_type__refqtmk (id_type__content id_type)))))
(define-fun id_type__ref_id_type__content__projection ((a id_type__ref)) id_type 
  (id_type__content a))

(define-fun to_rep ((x id_type)) Int (id_typeqtint x))

(declare-fun of_rep (Int) id_type)

;; inversion_axiom
  (assert
  (forall ((x id_type)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x id_type)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int id_type))))))
(declare-fun slide ((Array Int id_type) Int Int) (Array Int id_type))

;; slide_eq
  (assert
  (forall ((a (Array Int id_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int id_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int id_type)) (a__first Int) (a__last Int)
  (b (Array Int id_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int id_type)) (b (Array Int id_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const map1 (Array Int id_type))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const id Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant ((temp___expr_188 Int)
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)
  (temp___do_typ_inv_187 Bool)) Bool (=>
                                     (or (= temp___is_init_184 true)
                                     (<= 0 1)) (in_range1 temp___expr_188)))

(declare-fun main__map__aggregate_def (Int Int) (Array Int id_type))

;; map__def_axiom
  (assert (= map1 (main__map__aggregate_def 1 0)))

(declare-const rliteral id_type)

;; rliteral_axiom
  (assert (= (id_typeqtint rliteral) 1))

(declare-const rliteral1 id_type)

;; rliteral_axiom
  (assert (= (id_typeqtint rliteral1) 0))

;; def_axiom
  (assert
  (forall ((temp___156 Int) (temp___157 Int))
  (let ((temp___155 (main__map__aggregate_def temp___156 temp___157)))
  (=>
  (and (dynamic_invariant temp___156 true true true true) (dynamic_invariant
  temp___157 true true true true))
  (and (= (select temp___155 0) rliteral)
  (= (select temp___155 1) rliteral1))))))

;; Assume
  (assert true)

;; Assume
  (assert (= (main__map__aggregate_def 1 0) map1))

;; Assume
  (assert (dynamic_invariant id true false true true))

(declare-const id1 Int)

;; H
  (assert (<= 0 id1))

;; H
  (assert (<= id1 1))

(assert
;; defqtvc
 ;; File "main.adb", line 23, characters 0-0
  (not (not (= (to_rep (select map1 id1)) id1))))
(check-sat)
