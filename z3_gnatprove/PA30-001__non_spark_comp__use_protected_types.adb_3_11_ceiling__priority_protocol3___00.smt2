(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__spark_mode_auto__my_prot us_main_type)))))
(define-fun us_split_fields_rec__spark_mode_auto__my_prot__projection ((a us_split_fields)) us_main_type 
  (rec__spark_mode_auto__my_prot a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-datatypes ()
((my_prot__ref (my_prot__refqtmk (my_prot__content us_rep)))))
(define-fun my_prot__ref_my_prot__content__projection ((a my_prot__ref)) us_rep 
  (my_prot__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun get_x (us_rep us_type_of_heap) Int)

(declare-fun get_x__function_guard (Int us_rep us_type_of_heap) Bool)

;; get_x__post_axiom
  (assert
  (forall ((self__ us_rep))
  (forall ((us_HEAP us_type_of_heap)) (! (in_range
  (get_x self__ us_HEAP)) :pattern ((get_x self__ us_HEAP)) ))))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1 (rec__spark_mode_on__my_prot us_main_type1)))))
(define-fun us_split_fields_rec__spark_mode_on__my_prot__projection ((a us_split_fields2)) us_main_type1 
  (rec__spark_mode_on__my_prot a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-datatypes ()
((my_prot__ref1 (my_prot__refqtmk1 (my_prot__content1 us_rep1)))))
(define-fun my_prot__ref_my_prot__content__2__projection ((a my_prot__ref1)) us_rep1 
  (my_prot__content1 a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun get_x1 (us_rep1 us_type_of_heap) Int)

(declare-fun get_x__function_guard1 (Int us_rep1 us_type_of_heap) Bool)

;; get_x__post_axiom
  (assert
  (forall ((self__ us_rep1))
  (forall ((us_HEAP us_type_of_heap)) (! (in_range
  (get_x1 self__ us_HEAP)) :pattern ((get_x1 self__ us_HEAP)) ))))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__spark_mode_auto__sT__y integer)(rec__spark_mode_auto__z integer)(rec__spark_mode_auto__sT us_main_type2)))))
(define-fun us_split_fields_rec__spark_mode_auto__sT__y__projection ((a us_split_fields4)) integer 
  (rec__spark_mode_auto__sT__y a))

(define-fun us_split_fields_rec__spark_mode_auto__z__projection ((a us_split_fields4)) integer 
  (rec__spark_mode_auto__z a))

(define-fun us_split_fields_rec__spark_mode_auto__sT__projection ((a us_split_fields4)) us_main_type2 
  (rec__spark_mode_auto__sT a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const spark_mode_auto__sT__y__first__bit Int)

(declare-const spark_mode_auto__sT__y__last__bit Int)

(declare-const spark_mode_auto__sT__y__position Int)

;; spark_mode_auto__sT__y__first__bit_axiom
  (assert (<= 0 spark_mode_auto__sT__y__first__bit))

;; spark_mode_auto__sT__y__last__bit_axiom
  (assert
  (< spark_mode_auto__sT__y__first__bit spark_mode_auto__sT__y__last__bit))

;; spark_mode_auto__sT__y__position_axiom
  (assert (<= 0 spark_mode_auto__sT__y__position))

(declare-fun user_eq3 (us_rep2 us_rep2) Bool)

(declare-datatypes () ((sT__ref (sT__refqtmk (sT__content us_rep2)))))
(define-fun sT__ref_sT__content__projection ((a sT__ref)) us_rep2 (sT__content
                                                                  a))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun default_initial_assumption ((temp___expr_200 us_rep2)
  (temp___skip_top_level_201 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__spark_mode_auto__sT__y
                                            (us_split_fields5
                                            temp___expr_200))) 0)
                                         (= (to_rep
                                            (rec__spark_mode_auto__z
                                            (us_split_fields5
                                            temp___expr_200))) 0)))

(declare-fun get_x2 (us_rep2 us_type_of_heap) Int)

(declare-fun get_x__function_guard2 (Int us_rep2 us_type_of_heap) Bool)

;; get_x__post_axiom
  (assert
  (forall ((self__ us_rep2))
  (forall ((us_HEAP us_type_of_heap)) (! (in_range
  (get_x2 self__ us_HEAP)) :pattern ((get_x2 self__ us_HEAP)) ))))

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-datatypes ()
((us_split_fields6
 (us_split_fieldsqtmk3
 (rec__spark_mode_on__sT__y integer)(rec__spark_mode_on__z integer)(rec__spark_mode_on__sT us_main_type3)))))
(define-fun us_split_fields_rec__spark_mode_on__sT__y__projection ((a us_split_fields6)) integer 
  (rec__spark_mode_on__sT__y a))

(define-fun us_split_fields_rec__spark_mode_on__z__projection ((a us_split_fields6)) integer 
  (rec__spark_mode_on__z a))

(define-fun us_split_fields_rec__spark_mode_on__sT__projection ((a us_split_fields6)) us_main_type3 
  (rec__spark_mode_on__sT a))

(declare-datatypes ()
((us_split_fields__ref3
 (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const spark_mode_on__sT__y__first__bit Int)

(declare-const spark_mode_on__sT__y__last__bit Int)

(declare-const spark_mode_on__sT__y__position Int)

;; spark_mode_on__sT__y__first__bit_axiom
  (assert (<= 0 spark_mode_on__sT__y__first__bit))

;; spark_mode_on__sT__y__last__bit_axiom
  (assert
  (< spark_mode_on__sT__y__first__bit spark_mode_on__sT__y__last__bit))

;; spark_mode_on__sT__y__position_axiom
  (assert (<= 0 spark_mode_on__sT__y__position))

(declare-fun user_eq4 (us_rep3 us_rep3) Bool)

(declare-datatypes () ((sT__ref1 (sT__refqtmk1 (sT__content1 us_rep3)))))
(define-fun sT__ref_sT__content__2__projection ((a sT__ref1)) us_rep3 
  (sT__content1 a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun default_initial_assumption1 ((temp___expr_207 us_rep3)
  (temp___skip_top_level_208 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__spark_mode_on__sT__y
                                            (us_split_fields7
                                            temp___expr_207))) 0)
                                         (= (to_rep
                                            (rec__spark_mode_on__z
                                            (us_split_fields7
                                            temp___expr_207))) 0)))

(declare-fun get_x3 (us_rep3 us_type_of_heap) Int)

(declare-fun get_x__function_guard3 (Int us_rep3 us_type_of_heap) Bool)

;; get_x__post_axiom
  (assert
  (forall ((self__ us_rep3))
  (forall ((us_HEAP us_type_of_heap)) (! (in_range
  (get_x3 self__ us_HEAP)) :pattern ((get_x3 self__ us_HEAP)) ))))

(declare-sort us_main_type4 0)

(declare-fun us_main_eq4 (us_main_type4 us_main_type4) Bool)

(declare-datatypes ()
((us_split_fields8
 (us_split_fieldsqtmk4
 (rec__spark_mode_auto__y2 integer)(rec__spark_mode_auto__z2 integer)(rec__spark_mode_auto__s2T us_main_type4)))))
(define-fun us_split_fields_rec__spark_mode_auto__y2__projection ((a us_split_fields8)) integer 
  (rec__spark_mode_auto__y2 a))

(define-fun us_split_fields_rec__spark_mode_auto__z2__projection ((a us_split_fields8)) integer 
  (rec__spark_mode_auto__z2 a))

(define-fun us_split_fields_rec__spark_mode_auto__s2T__projection ((a us_split_fields8)) us_main_type4 
  (rec__spark_mode_auto__s2T a))

(declare-datatypes ()
((us_split_fields__ref4
 (us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (us_repqtmk4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq5 (us_rep4 us_rep4) Bool)

(declare-datatypes () ((s2T__ref (s2T__refqtmk (s2T__content us_rep4)))))
(define-fun s2T__ref_s2T__content__projection ((a s2T__ref)) us_rep4 
  (s2T__content a))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun default_initial_assumption2 ((temp___expr_214 us_rep4)
  (temp___skip_top_level_215 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__spark_mode_auto__y2
                                            (us_split_fields9
                                            temp___expr_214))) 0)
                                         (= (to_rep
                                            (rec__spark_mode_auto__z2
                                            (us_split_fields9
                                            temp___expr_214))) 0)))

(declare-fun get_x4 (us_rep4 us_type_of_heap) Int)

(declare-fun get_x__function_guard4 (Int us_rep4 us_type_of_heap) Bool)

;; get_x__post_axiom
  (assert
  (forall ((self__ us_rep4))
  (forall ((us_HEAP us_type_of_heap)) (! (in_range
  (get_x4 self__ us_HEAP)) :pattern ((get_x4 self__ us_HEAP)) ))))

(declare-sort us_main_type5 0)

(declare-fun us_main_eq5 (us_main_type5 us_main_type5) Bool)

(declare-datatypes ()
((us_split_fields10
 (us_split_fieldsqtmk5 (rec__spark_mode_on__s2T us_main_type5)))))
(define-fun us_split_fields_rec__spark_mode_on__s2T__projection ((a us_split_fields10)) us_main_type5 
  (rec__spark_mode_on__s2T a))

(declare-datatypes ()
((us_split_fields__ref5
 (us_split_fields__refqtmk5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5 (us_repqtmk5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___split_fields__6__projection ((a us_rep5)) us_split_fields10 
  (us_split_fields11 a))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-fun user_eq6 (us_rep5 us_rep5) Bool)

(declare-datatypes () ((s2T__ref1 (s2T__refqtmk1 (s2T__content1 us_rep5)))))
(define-fun s2T__ref_s2T__content__2__projection ((a s2T__ref1)) us_rep5 
  (s2T__content1 a))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun get_x5 (us_rep5 us_type_of_heap) Int)

(declare-fun get_x__function_guard5 (Int us_rep5 us_type_of_heap) Bool)

;; get_x__post_axiom
  (assert
  (forall ((self__ us_rep5))
  (forall ((us_HEAP us_type_of_heap)) (! (in_range
  (get_x5 self__ us_HEAP)) :pattern ((get_x5 self__ us_HEAP)) ))))

(declare-sort priority 0)

(declare-fun priorityqtint (priority) Int)

;; priority'axiom
  (assert
  (forall ((i priority))
  (and (<= 0 (priorityqtint i)) (<= (priorityqtint i) 97))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 97)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq7 (priority priority) Bool)

(declare-const dummy1 priority)

(declare-datatypes ()
((priority__ref (priority__refqtmk (priority__content priority)))))
(define-fun priority__ref_priority__content__projection ((a priority__ref)) priority 
  (priority__content a))

(define-fun dynamic_invariant1 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 0 97)) (in_range1 temp___expr_171)))

(declare-const us_HEAP us_type_of_heap)

(declare-const x Int)

(declare-const p__split_fields us_main_type)

(declare-const p__split_fields1 us_main_type1)

(declare-const s__split_fields us_split_fields4)

(declare-const s__split_fields1 us_split_fields6)

(declare-const s2__split_fields us_split_fields8)

(declare-const s2__split_fields1 us_main_type5)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

(assert
;; defqtvc
 ;; File "use_protected_types.adb", line 3, characters 0-0
  (not (<= 48 97)))
(check-sat)
