;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort enum 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (enum enum) Bool)

(declare-const dummy4 enum)

(declare-datatypes () ((enum__ref (enum__refqtmk (enum__content enum)))))
(define-fun enum__ref_enum__content__projection ((a enum__ref)) enum 
  (enum__content a))

(declare-fun to_rep2 (enum) Int)

(declare-fun of_rep2 (Int) enum)

;; inversion_axiom
  (assert
  (forall ((x enum)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x enum)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_discrs (us_split_discrsqtmk (rec__p_init__t__e enum)))))
(define-fun us_split_discrs_rec__p_init__t__e__projection ((a us_split_discrs)) enum 
  (rec__p_init__t__e a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__p_init__t__x1 integer)(rec__p_init__t__x2 integer)))))
(define-fun us_split_fields_rec__p_init__t__x1__projection ((a us_split_fields)) integer 
  (rec__p_init__t__x1 a))

(define-fun us_split_fields_rec__p_init__t__x2__projection ((a us_split_fields)) integer 
  (rec__p_init__t__x2 a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun p_init__t__x2__pred ((a us_rep)) Bool (= (to_rep2
                                                     (rec__p_init__t__e
                                                     (us_split_discrs1 a))) 1))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2 (rec__p_init__t__e (us_split_discrs1 a))) 
                        (to_rep2 (rec__p_init__t__e (us_split_discrs1 b))))
                        (and
                        (= (to_rep1
                           (rec__p_init__t__x1 (us_split_fields1 a))) 
                        (to_rep1 (rec__p_init__t__x1 (us_split_fields1 b))))
                        (=> (p_init__t__x2__pred a)
                        (= (to_rep1
                           (rec__p_init__t__x2 (us_split_fields1 a))) 
                        (to_rep1 (rec__p_init__t__x2 (us_split_fields1 b)))))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const p_init__t__e__first__bit Int)

(declare-const p_init__t__e__last__bit Int)

(declare-const p_init__t__e__position Int)

;; p_init__t__e__first__bit_axiom
  (assert (<= 0 p_init__t__e__first__bit))

;; p_init__t__e__last__bit_axiom
  (assert (< p_init__t__e__first__bit p_init__t__e__last__bit))

;; p_init__t__e__position_axiom
  (assert (<= 0 p_init__t__e__position))

(declare-const p_init__t__x2__first__bit Int)

(declare-const p_init__t__x2__last__bit Int)

(declare-const p_init__t__x2__position Int)

;; p_init__t__x2__first__bit_axiom
  (assert (<= 0 p_init__t__x2__first__bit))

;; p_init__t__x2__last__bit_axiom
  (assert (< p_init__t__x2__first__bit p_init__t__x2__last__bit))

;; p_init__t__x2__position_axiom
  (assert (<= 0 p_init__t__x2__position))

(declare-const p_init__t__x1__first__bit Int)

(declare-const p_init__t__x1__last__bit Int)

(declare-const p_init__t__x1__position Int)

;; p_init__t__x1__first__bit_axiom
  (assert (<= 0 p_init__t__x1__first__bit))

;; p_init__t__x1__last__bit_axiom
  (assert (< p_init__t__x1__first__bit p_init__t__x1__last__bit))

;; p_init__t__x1__position_axiom
  (assert (<= 0 p_init__t__x1__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((tc1S__ref (tc1S__refqtmk (tc1S__content us_rep)))))
(define-fun tc1S__ref_tc1S__content__projection ((a tc1S__ref)) us_rep 
  (tc1S__content a))

(declare-const c1 us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun in_range4 ((rec__p_init__t__e1 Int)
  (a us_split_discrs)) Bool (= rec__p_init__t__e1 (to_rep2
                                                  (rec__p_init__t__e a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const p_init__t__e__first__bit1 Int)

(declare-const p_init__t__e__last__bit1 Int)

(declare-const p_init__t__e__position1 Int)

;; p_init__t__e__first__bit_axiom
  (assert (<= 0 p_init__t__e__first__bit1))

;; p_init__t__e__last__bit_axiom
  (assert (< p_init__t__e__first__bit1 p_init__t__e__last__bit1))

;; p_init__t__e__position_axiom
  (assert (<= 0 p_init__t__e__position1))

(declare-const p_init__t__x1__first__bit1 Int)

(declare-const p_init__t__x1__last__bit1 Int)

(declare-const p_init__t__x1__position1 Int)

;; p_init__t__x1__first__bit_axiom
  (assert (<= 0 p_init__t__x1__first__bit1))

;; p_init__t__x1__last__bit_axiom
  (assert (< p_init__t__x1__first__bit1 p_init__t__x1__last__bit1))

;; p_init__t__x1__position_axiom
  (assert (<= 0 p_init__t__x1__position1))

(declare-const p_init__t__x2__first__bit1 Int)

(declare-const p_init__t__x2__last__bit1 Int)

(declare-const p_init__t__x2__position1 Int)

;; p_init__t__x2__first__bit_axiom
  (assert (<= 0 p_init__t__x2__first__bit1))

;; p_init__t__x2__last__bit_axiom
  (assert (< p_init__t__x2__first__bit1 p_init__t__x2__last__bit1))

;; p_init__t__x2__position_axiom
  (assert (<= 0 p_init__t__x2__position1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-const y1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_172 us_rep)
  (temp___skip_top_level_173 Bool)) Bool (= (to_rep2
                                            (rec__p_init__t__e
                                            (us_split_discrs1
                                            temp___expr_172))) 0))

(declare-const y2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const p_init__t__e__first__bit2 Int)

(declare-const p_init__t__e__last__bit2 Int)

(declare-const p_init__t__e__position2 Int)

;; p_init__t__e__first__bit_axiom
  (assert (<= 0 p_init__t__e__first__bit2))

;; p_init__t__e__last__bit_axiom
  (assert (< p_init__t__e__first__bit2 p_init__t__e__last__bit2))

;; p_init__t__e__position_axiom
  (assert (<= 0 p_init__t__e__position2))

(declare-const p_init__t__x2__first__bit2 Int)

(declare-const p_init__t__x2__last__bit2 Int)

(declare-const p_init__t__x2__position2 Int)

;; p_init__t__x2__first__bit_axiom
  (assert (<= 0 p_init__t__x2__first__bit2))

;; p_init__t__x2__last__bit_axiom
  (assert (< p_init__t__x2__first__bit2 p_init__t__x2__last__bit2))

;; p_init__t__x2__position_axiom
  (assert (<= 0 p_init__t__x2__position2))

(declare-const p_init__t__x1__first__bit2 Int)

(declare-const p_init__t__x1__last__bit2 Int)

(declare-const p_init__t__x1__position2 Int)

;; p_init__t__x1__first__bit_axiom
  (assert (<= 0 p_init__t__x1__first__bit2))

;; p_init__t__x1__last__bit_axiom
  (assert (< p_init__t__x1__first__bit2 p_init__t__x1__last__bit2))

;; p_init__t__x1__position_axiom
  (assert (<= 0 p_init__t__x1__position2))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((tz1S__ref (tz1S__refqtmk (tz1S__content us_rep)))))
(define-fun tz1S__ref_tz1S__content__projection ((a tz1S__ref)) us_rep 
  (tz1S__content a))

(declare-const z1__split_discrs us_split_discrs)

(declare-const z1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant ((temp___expr_203 us_rep)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)
  (temp___do_typ_inv_202 Bool)) Bool (=>
                                     (not (= temp___skip_constant_200 true))
                                     (in_range4 0
                                     (us_split_discrs1 temp___expr_203))))

(define-fun default_initial_assumption1 ((temp___expr_205 us_rep)
  (temp___skip_top_level_206 Bool)) Bool (= (to_rep2
                                            (rec__p_init__t__e
                                            (us_split_discrs1
                                            temp___expr_205))) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const p_init__t__e__first__bit3 Int)

(declare-const p_init__t__e__last__bit3 Int)

(declare-const p_init__t__e__position3 Int)

;; p_init__t__e__first__bit_axiom
  (assert (<= 0 p_init__t__e__first__bit3))

;; p_init__t__e__last__bit_axiom
  (assert (< p_init__t__e__first__bit3 p_init__t__e__last__bit3))

;; p_init__t__e__position_axiom
  (assert (<= 0 p_init__t__e__position3))

(declare-const p_init__t__x1__first__bit3 Int)

(declare-const p_init__t__x1__last__bit3 Int)

(declare-const p_init__t__x1__position3 Int)

;; p_init__t__x1__first__bit_axiom
  (assert (<= 0 p_init__t__x1__first__bit3))

;; p_init__t__x1__last__bit_axiom
  (assert (< p_init__t__x1__first__bit3 p_init__t__x1__last__bit3))

;; p_init__t__x1__position_axiom
  (assert (<= 0 p_init__t__x1__position3))

(declare-const p_init__t__x2__first__bit3 Int)

(declare-const p_init__t__x2__last__bit3 Int)

(declare-const p_init__t__x2__position3 Int)

;; p_init__t__x2__first__bit_axiom
  (assert (<= 0 p_init__t__x2__first__bit3))

;; p_init__t__x2__last__bit_axiom
  (assert (< p_init__t__x2__first__bit3 p_init__t__x2__last__bit3))

;; p_init__t__x2__position_axiom
  (assert (<= 0 p_init__t__x2__position3))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes () ((tz2S__ref (tz2S__refqtmk (tz2S__content us_rep)))))
(define-fun tz2S__ref_tz2S__content__projection ((a tz2S__ref)) us_rep 
  (tz2S__content a))

(declare-const z2__split_discrs us_split_discrs)

(declare-const z2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant1 ((temp___expr_214 us_rep)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)
  (temp___do_typ_inv_213 Bool)) Bool (=>
                                     (not (= temp___skip_constant_211 true))
                                     (in_range4 1
                                     (us_split_discrs1 temp___expr_214))))

(define-fun default_initial_assumption2 ((temp___expr_216 us_rep)
  (temp___skip_top_level_217 Bool)) Bool (= (to_rep2
                                            (rec__p_init__t__e
                                            (us_split_discrs1
                                            temp___expr_216))) 1))

(declare-fun init (tuple0) us_rep)

(declare-fun init__function_guard (us_rep tuple0) Bool)

;; init__post_axiom
  (assert true)

(define-fun dynamic_invariant2 ((temp___expr_181 us_rep)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (not (= temp___skip_constant_178 true))
                                     (in_range4 0
                                     (us_split_discrs1 temp___expr_181))))

(define-fun default_initial_assumption3 ((temp___expr_183 us_rep)
  (temp___skip_top_level_184 Bool)) Bool (= (to_rep2
                                            (rec__p_init__t__e
                                            (us_split_discrs1
                                            temp___expr_183))) 0))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const p_init__t__e__first__bit4 Int)

(declare-const p_init__t__e__last__bit4 Int)

(declare-const p_init__t__e__position4 Int)

;; p_init__t__e__first__bit_axiom
  (assert (<= 0 p_init__t__e__first__bit4))

;; p_init__t__e__last__bit_axiom
  (assert (< p_init__t__e__first__bit4 p_init__t__e__last__bit4))

;; p_init__t__e__position_axiom
  (assert (<= 0 p_init__t__e__position4))

(declare-const p_init__t__x2__first__bit4 Int)

(declare-const p_init__t__x2__last__bit4 Int)

(declare-const p_init__t__x2__position4 Int)

;; p_init__t__x2__first__bit_axiom
  (assert (<= 0 p_init__t__x2__first__bit4))

;; p_init__t__x2__last__bit_axiom
  (assert (< p_init__t__x2__first__bit4 p_init__t__x2__last__bit4))

;; p_init__t__x2__position_axiom
  (assert (<= 0 p_init__t__x2__position4))

(declare-const p_init__t__x1__first__bit4 Int)

(declare-const p_init__t__x1__last__bit4 Int)

(declare-const p_init__t__x1__position4 Int)

;; p_init__t__x1__first__bit_axiom
  (assert (<= 0 p_init__t__x1__first__bit4))

;; p_init__t__x1__last__bit_axiom
  (assert (< p_init__t__x1__first__bit4 p_init__t__x1__last__bit4))

;; p_init__t__x1__position_axiom
  (assert (<= 0 p_init__t__x1__position4))

(declare-fun user_eq9 (us_rep us_rep) Bool)

(declare-const dummy9 us_rep)

(declare-datatypes () ((t1b__ref (t1b__refqtmk (t1b__content us_rep)))))
(define-fun t1b__ref_t1b__content__projection ((a t1b__ref)) us_rep (t1b__content
                                                                    a))

(declare-fun temp___String_Literal_240 (tuple0) (Array Int character))

;; temp___String_Literal_240__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 1)) 89)
     (= (to_rep (select (temp___String_Literal_240 us_void_param) 2)) 50)) :pattern (
  (temp___String_Literal_240 us_void_param)) )))

(declare-fun temp___String_Literal_243 (tuple0) (Array Int character))

;; temp___String_Literal_243__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 1)) 90)
     (= (to_rep (select (temp___String_Literal_243 us_void_param) 2)) 50)) :pattern (
  (temp___String_Literal_243 us_void_param)) )))

(declare-fun temp___String_Literal_247 (tuple0) (Array Int character))

;; temp___String_Literal_247__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 1)) 89)
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 2)) 49)) :pattern (
  (temp___String_Literal_247 us_void_param)) )))

(declare-fun temp___String_Literal_252 (tuple0) (Array Int character))

;; temp___String_Literal_252__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_252 us_void_param) 1)) 90)
     (= (to_rep (select (temp___String_Literal_252 us_void_param) 2)) 49)) :pattern (
  (temp___String_Literal_252 us_void_param)) )))

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun dynamic_invariant6 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 1))

;; c1__def_axiom
  (assert
  (= c1 (us_repqtmk (us_split_discrsqtmk (of_rep2 0))
        (us_split_fieldsqtmk rliteral dummy))))

(define-fun dynamic_invariant7 ((temp___expr_163 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)
  (temp___do_typ_inv_162 Bool)) Bool (=>
                                     (or (= temp___is_init_159 true)
                                     (<= 0 1)) (in_range3 temp___expr_163)))

(declare-const y1__split_fields us_split_fields)

(declare-const y1__split_discrs enum)

(declare-const y2__split_fields us_split_fields)

(declare-const y2__split_discrs enum)

(declare-const z1__split_fields us_split_fields)

(declare-const z2__split_fields us_split_fields)

;; Assume
  (assert (dynamic_invariant2 c1 true false true true))

(declare-const o enum)

;; Ensures
  (assert (= (to_rep2 o) 0))

;; Assume
  (assert
  (= (us_repqtmk (us_split_discrsqtmk o)
     (us_split_fieldsqtmk rliteral dummy)) c1))

;; Assume
  (assert true)

;; Assume
  (assert (= y1__attr__constrained false))

;; Assume
  (assert true)

;; Assume
  (assert (= y2__attr__constrained false))

;; Assume
  (assert (dynamic_invariant (us_repqtmk z1__split_discrs z1__split_fields)
  false false true true))

;; Assume
  (assert (= z1__attr__constrained true))

;; Assume
  (assert (dynamic_invariant1 (us_repqtmk z2__split_discrs z2__split_fields)
  false false true true))

;; Assume
  (assert (= z2__attr__constrained true))

(define-fun temp___237 () us_rep (init Tuple0))

;; H
  (assert (init__function_guard temp___237 Tuple0))

;; H
  (assert true)

;; Assert
  (assert
  (=> (= y2__attr__constrained true)
  (= (rec__p_init__t__e (us_split_discrs1 temp___237)) y2__split_discrs)))

(declare-const y2__split_fields1 us_split_fields)

;; H
  (assert (= y2__split_fields1 (us_split_fields1 temp___237)))

(declare-const y2__split_discrs1 enum)

;; H
  (assert
  (= (us_split_discrsqtmk y2__split_discrs1) (us_split_discrs1 temp___237)))

(define-fun temp___241 () us_rep (init Tuple0))

;; H
  (assert (init__function_guard temp___241 Tuple0))

;; H
  (assert true)

(define-fun temp___242 () us_rep temp___241)

(declare-const z2__split_fields1 us_split_fields)

;; H
  (assert (= z2__split_fields1 (us_split_fields1 temp___242)))

;; Assume
  (assert (= z2__split_discrs (us_split_discrs1 temp___242)))

(define-fun temp___244 () us_rep (init Tuple0))

;; H
  (assert (init__function_guard temp___244 Tuple0))

;; H
  (assert true)

;; Assert
  (assert
  (=> (= y1__attr__constrained true)
  (= (rec__p_init__t__e (us_split_discrs1 temp___244)) y1__split_discrs)))

(declare-const y1__split_fields1 us_split_fields)

;; H
  (assert (= y1__split_fields1 (us_split_fields1 temp___244)))

(declare-const y1__split_discrs1 enum)

;; H
  (assert
  (= (us_split_discrsqtmk y1__split_discrs1) (us_split_discrs1 temp___244)))

;; H
  (assert (= y1__attr__constrained true))

(assert
;; defqtvc
 ;; File "run.ads", line 3, characters 0-0
  (not (= (rec__p_init__t__e (us_split_discrs1 c1)) y1__split_discrs1)))
(check-sat)
