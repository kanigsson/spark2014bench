(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const int__ Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (character character) Bool)

(declare-const dummy1 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort r1 0)

(declare-fun user_eq2 (r1 r1) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dummy2 r1)

(declare-datatypes () ((r1__ref (r1__refqtmk (r1__content r1)))))
(define-fun r1__ref_r1__content__projection ((a r1__ref)) r1 (r1__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort my_integer 0)

(declare-fun my_integerqtint (my_integer) Int)

;; my_integer'axiom
  (assert
  (forall ((i my_integer))
  (and (<= 1 (my_integerqtint i)) (<= (my_integerqtint i) 10))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (my_integer my_integer) Bool)

(declare-const dummy3 my_integer)

(declare-datatypes ()
((my_integer__ref (my_integer__refqtmk (my_integer__content my_integer)))))
(define-fun my_integer__ref_my_integer__content__projection ((a my_integer__ref)) my_integer 
  (my_integer__content a))

(define-fun to_rep1 ((x my_integer)) Int (my_integerqtint x))

(declare-fun of_rep1 (Int) my_integer)

;; inversion_axiom
  (assert
  (forall ((x my_integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x my_integer)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk (rec__alignment_attribute__r2__d1 my_integer)))))
(define-fun us_split_discrs_rec__alignment_attribute__r2__d1__projection ((a us_split_discrs)) my_integer 
  (rec__alignment_attribute__r2__d1 a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__alignment_attribute__r2__d2 Bool)))))
(define-fun us_split_fields_rec__alignment_attribute__r2__d2__projection ((a us_split_fields)) Bool 
  (rec__alignment_attribute__r2__d2 a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun alignment_attribute__r2__d2__pred ((a us_rep)) Bool (= (to_rep1
                                                                   (rec__alignment_attribute__r2__d1
                                                                   (us_split_discrs1
                                                                   a))) 5))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__alignment_attribute__r2__d1
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__alignment_attribute__r2__d1
                                                  (us_split_discrs1 b))))
                        (=> (alignment_attribute__r2__d2__pred a)
                        (= (ite (rec__alignment_attribute__r2__d2
                                (us_split_fields1 a)) 1 0) (ite (rec__alignment_attribute__r2__d2
                                                                (us_split_fields1
                                                                b)) 1 0))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const alignment_attribute__r2__d1__first__bit Int)

(declare-const alignment_attribute__r2__d1__last__bit Int)

(declare-const alignment_attribute__r2__d1__position Int)

;; alignment_attribute__r2__d1__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d1__first__bit))

;; alignment_attribute__r2__d1__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d1__first__bit alignment_attribute__r2__d1__last__bit))

;; alignment_attribute__r2__d1__position_axiom
  (assert (<= 0 alignment_attribute__r2__d1__position))

(declare-const alignment_attribute__r2__d2__first__bit Int)

(declare-const alignment_attribute__r2__d2__last__bit Int)

(declare-const alignment_attribute__r2__d2__position Int)

;; alignment_attribute__r2__d2__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d2__first__bit))

;; alignment_attribute__r2__d2__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d2__first__bit alignment_attribute__r2__d2__last__bit))

;; alignment_attribute__r2__d2__position_axiom
  (assert (<= 0 alignment_attribute__r2__d2__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((trt2S__ref (trt2S__refqtmk (trt2S__content us_rep)))))
(define-fun trt2S__ref_trt2S__content__projection ((a trt2S__ref)) us_rep 
  (trt2S__content a))

(define-fun in_range4 ((rec__alignment_attribute__r2__d11 Int)
  (a us_split_discrs)) Bool (= rec__alignment_attribute__r2__d11 (to_rep1
                                                                 (rec__alignment_attribute__r2__d1
                                                                 a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const alignment_attribute__r2__d1__first__bit1 Int)

(declare-const alignment_attribute__r2__d1__last__bit1 Int)

(declare-const alignment_attribute__r2__d1__position1 Int)

;; alignment_attribute__r2__d1__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d1__first__bit1))

;; alignment_attribute__r2__d1__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d1__first__bit1 alignment_attribute__r2__d1__last__bit1))

;; alignment_attribute__r2__d1__position_axiom
  (assert (<= 0 alignment_attribute__r2__d1__position1))

(declare-const alignment_attribute__r2__d2__first__bit1 Int)

(declare-const alignment_attribute__r2__d2__last__bit1 Int)

(declare-const alignment_attribute__r2__d2__position1 Int)

;; alignment_attribute__r2__d2__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d2__first__bit1))

;; alignment_attribute__r2__d2__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d2__first__bit1 alignment_attribute__r2__d2__last__bit1))

;; alignment_attribute__r2__d2__position_axiom
  (assert (<= 0 alignment_attribute__r2__d2__position1))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((r2__ref (r2__refqtmk (r2__content us_rep)))))
(define-fun r2__ref_r2__content__projection ((a r2__ref)) us_rep (r2__content
                                                                 a))

(declare-const rt2__split_discrs us_split_discrs)

(declare-const rt2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant1 ((temp___expr_239 us_rep)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)
  (temp___do_typ_inv_238 Bool)) Bool (=>
                                     (not (= temp___skip_constant_236 true))
                                     (in_range4 3
                                     (us_split_discrs1 temp___expr_239))))

(define-fun default_initial_assumption ((temp___expr_241 us_rep)
  (temp___skip_top_level_242 Bool)) Bool (= (to_rep1
                                            (rec__alignment_attribute__r2__d1
                                            (us_split_discrs1
                                            temp___expr_241))) 3))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const alignment_attribute__r2__d1__first__bit2 Int)

(declare-const alignment_attribute__r2__d1__last__bit2 Int)

(declare-const alignment_attribute__r2__d1__position2 Int)

;; alignment_attribute__r2__d1__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d1__first__bit2))

;; alignment_attribute__r2__d1__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d1__first__bit2 alignment_attribute__r2__d1__last__bit2))

;; alignment_attribute__r2__d1__position_axiom
  (assert (<= 0 alignment_attribute__r2__d1__position2))

(declare-const alignment_attribute__r2__d2__first__bit2 Int)

(declare-const alignment_attribute__r2__d2__last__bit2 Int)

(declare-const alignment_attribute__r2__d2__position2 Int)

;; alignment_attribute__r2__d2__first__bit_axiom
  (assert (<= 0 alignment_attribute__r2__d2__first__bit2))

;; alignment_attribute__r2__d2__last__bit_axiom
  (assert
  (< alignment_attribute__r2__d2__first__bit2 alignment_attribute__r2__d2__last__bit2))

;; alignment_attribute__r2__d2__position_axiom
  (assert (<= 0 alignment_attribute__r2__d2__position2))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes () ((sr2__ref (sr2__refqtmk (sr2__content us_rep)))))
(define-fun sr2__ref_sr2__content__projection ((a sr2__ref)) us_rep (sr2__content
                                                                    a))

(declare-const rst2__split_discrs us_split_discrs)

(declare-const rst2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(define-fun dynamic_invariant2 ((temp___expr_186 us_rep)
  (temp___is_init_182 Bool) (temp___skip_constant_183 Bool)
  (temp___do_toplevel_184 Bool)
  (temp___do_typ_inv_185 Bool)) Bool (=>
                                     (not (= temp___skip_constant_183 true))
                                     (in_range4 5
                                     (us_split_discrs1 temp___expr_186))))

(define-fun default_initial_assumption1 ((temp___expr_188 us_rep)
  (temp___skip_top_level_189 Bool)) Bool (= (to_rep1
                                            (rec__alignment_attribute__r2__d1
                                            (us_split_discrs1
                                            temp___expr_188))) 5))

(define-fun to_rep2 ((x integer)) Int (integerqtint x))

(declare-fun of_rep2 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__alignment_attribute__r3__i integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__alignment_attribute__r3__i__projection ((a us_split_fields2)) integer 
  (rec__alignment_attribute__r3__i a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields2)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__projection ((a us_rep1)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep2
                            (rec__alignment_attribute__r3__i
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__alignment_attribute__r3__i
                                                   (us_split_fields3 b))))
                    true false))

(declare-fun us_dispatch_eq (us_rep1 us_rep1) Bool)

(declare-const us_tag Int)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const alignment_attribute__r3__i__first__bit Int)

(declare-const alignment_attribute__r3__i__last__bit Int)

(declare-const alignment_attribute__r3__i__position Int)

;; alignment_attribute__r3__i__first__bit_axiom
  (assert (<= 0 alignment_attribute__r3__i__first__bit))

;; alignment_attribute__r3__i__last__bit_axiom
  (assert
  (< alignment_attribute__r3__i__first__bit alignment_attribute__r3__i__last__bit))

;; alignment_attribute__r3__i__position_axiom
  (assert (<= 0 alignment_attribute__r3__i__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes () ((r3__ref (r3__refqtmk (r3__content us_rep1)))))
(define-fun r3__ref_r3__content__projection ((a r3__ref)) us_rep1 (r3__content
                                                                  a))

(declare-const rt3__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun default_initial_assumption2 ((temp___expr_197 us_rep1)
  (temp___skip_top_level_198 Bool)) Bool (= (attr__tag temp___expr_197) 
  us_tag))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__alignment_attribute__r4__j integer)(rec__alignment_attribute__r3__i1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__alignment_attribute__r4__j__projection ((a us_split_fields4)) integer 
  (rec__alignment_attribute__r4__j a))

(define-fun us_split_fields_rec__alignment_attribute__r3__i__2__projection ((a us_split_fields4)) integer 
  (rec__alignment_attribute__r3__i1 a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields4)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep2)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer us_private) us_private)

(declare-fun extract__alignment_attribute__r4__j (us_private) integer)

;; extract__alignment_attribute__r4__j__conv
  (assert
  (forall ((alignment_attribute__r4__j integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__alignment_attribute__r4__j
     (hide_ext__ alignment_attribute__r4__j rec__ext__2)) alignment_attribute__r4__j))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep2)) us_rep1 (us_repqtmk1
                                          (us_split_fieldsqtmk1
                                          (rec__alignment_attribute__r3__i1
                                          (us_split_fields5 a))
                                          (hide_ext__
                                          (rec__alignment_attribute__r4__j
                                          (us_split_fields5 a))
                                          (rec__ext__1 (us_split_fields5 a))))
                                          (attr__tag1 a)))

(define-fun of_base ((r us_rep1)) us_rep2 (us_repqtmk2
                                          (us_split_fieldsqtmk2
                                          (extract__alignment_attribute__r4__j
                                          (rec__ext__ (us_split_fields3 r)))
                                          (rec__alignment_attribute__r3__i
                                          (us_split_fields3 r))
                                          (extract__ext__
                                          (rec__ext__ (us_split_fields3 r))))
                                          (attr__tag r)))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__alignment_attribute__r4__j
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__alignment_attribute__r4__j
                                                   (us_split_fields5 b))))
                         (= (to_rep2
                            (rec__alignment_attribute__r3__i1
                            (us_split_fields5 a))) (to_rep2
                                                   (rec__alignment_attribute__r3__i1
                                                   (us_split_fields5 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const alignment_attribute__r4__j__first__bit Int)

(declare-const alignment_attribute__r4__j__last__bit Int)

(declare-const alignment_attribute__r4__j__position Int)

;; alignment_attribute__r4__j__first__bit_axiom
  (assert (<= 0 alignment_attribute__r4__j__first__bit))

;; alignment_attribute__r4__j__last__bit_axiom
  (assert
  (< alignment_attribute__r4__j__first__bit alignment_attribute__r4__j__last__bit))

;; alignment_attribute__r4__j__position_axiom
  (assert (<= 0 alignment_attribute__r4__j__position))

(declare-const alignment_attribute__r3__i__first__bit1 Int)

(declare-const alignment_attribute__r3__i__last__bit1 Int)

(declare-const alignment_attribute__r3__i__position1 Int)

;; alignment_attribute__r3__i__first__bit_axiom
  (assert (<= 0 alignment_attribute__r3__i__first__bit1))

;; alignment_attribute__r3__i__last__bit_axiom
  (assert
  (< alignment_attribute__r3__i__first__bit1 alignment_attribute__r3__i__last__bit1))

;; alignment_attribute__r3__i__position_axiom
  (assert (<= 0 alignment_attribute__r3__i__position1))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-const dummy8 us_rep2)

(declare-datatypes () ((r4__ref (r4__refqtmk (r4__content us_rep2)))))
(define-fun r4__ref_r4__content__projection ((a r4__ref)) us_rep2 (r4__content
                                                                  a))

(declare-const rt4__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(define-fun default_initial_assumption3 ((temp___expr_205 us_rep2)
  (temp___skip_top_level_206 Bool)) Bool (= (attr__tag1 temp___expr_205) 
  us_tag1))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq9 (natural natural) Bool)

(declare-const dummy9 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep3 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep3 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep3 (select a temp___idx_155)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep3 (select a temp___idx_155)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq10 (positive positive) Bool)

(declare-const dummy10 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep4 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep4 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range6 (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int positive))))))
(declare-fun slide2 ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep4 (select a temp___idx_154)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep4 (select a temp___idx_154)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant3 ((temp___expr_162 Int)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)
  (temp___do_typ_inv_161 Bool)) Bool (=>
                                     (or (= temp___is_init_158 true)
                                     (<= 1 10)) (in_range3 temp___expr_162)))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep2 (first (mk f l))) f) (= (to_rep2 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range6 low) (in_range6 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep2 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep2 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const component__size Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment6))

(define-fun bool_eq6 ((x us_t)
  (y us_t)) Bool (bool_eq4 (elts x) (to_rep2 (first (rt x)))
                 (to_rep2 (last (rt x))) (elts y) (to_rep2 (first (rt y)))
                 (to_rep2 (last (rt y)))))

(declare-fun user_eq11 (us_t us_t) Bool)

(declare-const dummy11 us_t)

(declare-datatypes ()
((unconstr_array__ref
 (unconstr_array__refqtmk (unconstr_array__content us_t)))))
(define-fun unconstr_array__ref_unconstr_array__content__projection ((a unconstr_array__ref)) us_t 
  (unconstr_array__content a))

(declare-fun temp___String_Literal_284 (tuple0) (Array Int character))

;; temp___String_Literal_284__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_284 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_284 us_void_param) 2)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_284 us_void_param) 3)) 115)
     (= (to_rep (select (temp___String_Literal_284 us_void_param) 4)) 116))) :pattern (
  (temp___String_Literal_284 us_void_param)) )))

(declare-fun alignment_attribute__ua__aggregate_def (Int) (Array Int natural))

(declare-fun alignment_attribute__ca__aggregate_def (Int) (Array Int positive))

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range5
                                    temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range6
                                    temp___expr_46)))

(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun default_initial_assumption4 ((temp___expr_178 us_rep)
  (temp___skip_top_level_179 Bool)) Bool (= (to_rep1
                                            (rec__alignment_attribute__r2__d1
                                            (us_split_discrs1
                                            temp___expr_178))) 1))

(define-fun dynamic_invariant7 ((temp___expr_223 us_t)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)
  (temp___do_typ_inv_222 Bool)) Bool (=>
                                     (not (= temp___skip_constant_220 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_223)
                                     (last1 temp___expr_223))))

;; int____def_axiom
  (assert (= int__ 2))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 1))

;; def_axiom
  (assert
  (forall ((temp___298 Int))
  (=> (dynamic_invariant4 temp___298 true true true true)
  (forall ((temp___299 Int))
  (= (select (alignment_attribute__ua__aggregate_def temp___298) temp___299) 
  rliteral)))))

(declare-const rliteral1 positive)

;; rliteral_axiom
  (assert (= (positiveqtint rliteral1) 2))

;; def_axiom
  (assert
  (forall ((temp___301 Int))
  (=> (dynamic_invariant5 temp___301 true true true true)
  (forall ((temp___302 Int))
  (= (select (alignment_attribute__ca__aggregate_def temp___301) temp___302) 
  rliteral1)))))

(declare-const rt1 r1)

(declare-const rt2__split_fields Bool)

(declare-const rst2__split_fields Bool)

(declare-const rt3__split_fields us_split_fields2)

(declare-const rt4__split_fields us_split_fields4)

(assert
;; defqtvc
 ;; File "alignment_attribute.ads", line 1, characters 0-0
  (not (in_range3 5)))
(check-sat)
