;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (rec__walker__int_acc__is_null_pointer Bool)(rec__walker__int_acc__pointer_address Int)(rec__walker__int_acc__pointer_value integer)))))
(define-fun us_rep_rec__walker__int_acc__is_null_pointer__projection ((a us_rep)) Bool 
  (rec__walker__int_acc__is_null_pointer a))

(define-fun us_rep_rec__walker__int_acc__pointer_address__projection ((a us_rep)) Int 
  (rec__walker__int_acc__pointer_address a))

(define-fun us_rep_rec__walker__int_acc__pointer_value__projection ((a us_rep)) integer 
  (rec__walker__int_acc__pointer_value a))

(declare-datatypes ()
((us_rep__ref (us_rep__refqtmk (us_rep__content us_rep)))))
(define-fun us_rep__ref___rep__content__projection ((a us_rep__ref)) us_rep 
  (us_rep__content a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (rec__walker__int_acc__is_null_pointer a) 
                        (rec__walker__int_acc__is_null_pointer b))
                        (=>
                        (not
                        (= (rec__walker__int_acc__is_null_pointer a) true))
                        (and
                        (= (rec__walker__int_acc__pointer_address a) 
                        (rec__walker__int_acc__pointer_address b))
                        (= (rec__walker__int_acc__pointer_value a) (rec__walker__int_acc__pointer_value
                                                                   b)))))
                   true false))

(define-fun rec__walker__int_acc__pointer_value__pred ((a us_rep)) Bool 
  (not (= (rec__walker__int_acc__is_null_pointer a) true)))

(declare-const us_null_pointer us_rep)

;; __null_pointer__def_axiom
  (assert (= (rec__walker__int_acc__is_null_pointer us_null_pointer) true))

(declare-const dummy1 us_rep)

(declare-datatypes ()
((int_acc__ref (int_acc__refqtmk (int_acc__content us_rep)))))
(define-fun int_acc__ref_int_acc__content__projection ((a int_acc__ref)) us_rep 
  (int_acc__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__walker__two_acc__fst us_rep)(rec__walker__two_acc__snd us_rep)))))
(define-fun us_split_fields_rec__walker__two_acc__fst__projection ((a us_split_fields)) us_rep 
  (rec__walker__two_acc__fst a))

(define-fun us_split_fields_rec__walker__two_acc__snd__projection ((a us_split_fields)) us_rep 
  (rec__walker__two_acc__snd a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (bool_eq
                            (rec__walker__two_acc__fst (us_split_fields1 a))
                            (rec__walker__two_acc__fst (us_split_fields1 b))) true)
                         (= (bool_eq
                            (rec__walker__two_acc__snd (us_split_fields1 a))
                            (rec__walker__two_acc__snd (us_split_fields1 b))) true))
                    true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const walker__two_acc__fst__first__bit Int)

(declare-const walker__two_acc__fst__last__bit Int)

(declare-const walker__two_acc__fst__position Int)

;; walker__two_acc__fst__first__bit_axiom
  (assert (<= 0 walker__two_acc__fst__first__bit))

;; walker__two_acc__fst__last__bit_axiom
  (assert
  (< walker__two_acc__fst__first__bit walker__two_acc__fst__last__bit))

;; walker__two_acc__fst__position_axiom
  (assert (<= 0 walker__two_acc__fst__position))

(declare-const walker__two_acc__snd__first__bit Int)

(declare-const walker__two_acc__snd__last__bit Int)

(declare-const walker__two_acc__snd__position Int)

;; walker__two_acc__snd__first__bit_axiom
  (assert (<= 0 walker__two_acc__snd__first__bit))

;; walker__two_acc__snd__last__bit_axiom
  (assert
  (< walker__two_acc__snd__first__bit walker__two_acc__snd__last__bit))

;; walker__two_acc__snd__position_axiom
  (assert (<= 0 walker__two_acc__snd__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes ()
((two_acc__ref (two_acc__refqtmk (two_acc__content us_rep1)))))
(define-fun two_acc__ref_two_acc__content__projection ((a two_acc__ref)) us_rep1 
  (two_acc__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_187 us_rep1)
  (temp___skip_top_level_188 Bool)) Bool (and
                                         (= (rec__walker__int_acc__is_null_pointer
                                            (rec__walker__two_acc__fst
                                            (us_split_fields1
                                            temp___expr_187))) true)
                                         (= (rec__walker__int_acc__is_null_pointer
                                            (rec__walker__two_acc__snd
                                            (us_split_fields1
                                            temp___expr_187))) true)))

(declare-const dummy3 us_rep)

(declare-datatypes () ((t3b__ref (t3b__refqtmk (t3b__content us_rep)))))
(define-fun t3b__ref_t3b__content__projection ((a t3b__ref)) us_rep (t3b__content
                                                                    a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort us_pledge_ty 0)

(declare-datatypes ()
((us_pledge_ty__ref
 (us_pledge_ty__refqtmk (us_pledge_ty__content us_pledge_ty)))))
(declare-fun us_pledge_get (us_pledge_ty us_rep1 us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun default_initial_assumption1 ((temp___expr_180 us_rep)
  (temp___skip_top_level_181 Bool)) Bool (= (rec__walker__int_acc__is_null_pointer
                                            temp___expr_180) true))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 3))

(declare-const x__split_fields us_split_fields)

;; Assume
  (assert (default_initial_assumption (us_repqtmk1 x__split_fields) false))

;; Assume
  (assert true)

(declare-const us_next_pointer_address Int)

(declare-const o us_rep)

;; H
  (assert
  (= (and (ite (and (not (= (rec__walker__int_acc__is_null_pointer o) true))
               (= (rec__walker__int_acc__pointer_address o) us_next_pointer_address))
          true false) (ite (= (rec__walker__int_acc__pointer_value o) 
                      (of_rep 1)) true false)) true))

(declare-const x__split_fields1 us_split_fields)

;; H
  (assert
  (= x__split_fields1 (us_split_fieldsqtmk o
                      (rec__walker__two_acc__snd x__split_fields))))

(declare-const us_next_pointer_address1 Int)

(declare-const o1 us_rep)

;; H
  (assert
  (= (and (ite (and (not (= (rec__walker__int_acc__is_null_pointer o1) true))
               (= (rec__walker__int_acc__pointer_address o1) us_next_pointer_address1))
          true false) (ite (= (rec__walker__int_acc__pointer_value o1) 
                      (of_rep 2)) true false)) true))

(declare-const x__split_fields2 us_split_fields)

;; H
  (assert
  (= x__split_fields2 (us_split_fieldsqtmk
                      (rec__walker__two_acc__fst x__split_fields1) o1)))

(define-fun walker__B_1__y__assume () us_rep (rec__walker__two_acc__fst
                                             x__split_fields2))

(declare-const usf us_pledge_ty)

;; Ensures
  (assert
  (forall ((temp___borrowed_206 us_rep1))
  (forall ((temp___brower_204 us_rep))
  (! (= (= (us_pledge_get usf temp___borrowed_206 temp___brower_204) true)
     (= (rec__walker__two_acc__fst (us_split_fields1 temp___borrowed_206)) temp___brower_204)) :pattern (
  (us_pledge_get usf temp___borrowed_206 temp___brower_204)) ))))

(declare-const walker__B_1__y__pledge us_pledge_ty)

;; H
  (assert (= walker__B_1__y__pledge usf))

(declare-const y__pointer_value integer)

;; H
  (assert
  (= y__pointer_value (rec__walker__int_acc__pointer_value
                      walker__B_1__y__assume)))

(declare-const y__pointer_address Int)

;; H
  (assert
  (= y__pointer_address (rec__walker__int_acc__pointer_address
                        walker__B_1__y__assume)))

(declare-const y__is_null_pointer Bool)

;; H
  (assert
  (= y__is_null_pointer (rec__walker__int_acc__is_null_pointer
                        walker__B_1__y__assume)))

(declare-const y__pointer_value1 integer)

;; H
  (assert (= y__pointer_value1 rliteral))

(declare-const usf1 us_split_fields)

;; Assume
  (assert
  (and
  (= (us_pledge_get walker__B_1__y__pledge (us_repqtmk1 usf1)
     (us_repqtmk y__is_null_pointer y__pointer_address y__pointer_value1)) true)
  (= (rec__walker__int_acc__is_null_pointer
     (rec__walker__two_acc__fst x__split_fields2)) (rec__walker__int_acc__is_null_pointer
                                                   (rec__walker__two_acc__fst
                                                   usf1)))))

(declare-const x__split_fields3 us_split_fields)

;; H
  (assert
  (= x__split_fields3 (us_split_fieldsqtmk (rec__walker__two_acc__fst usf1)
                      (rec__walker__two_acc__snd x__split_fields2))))

(assert
;; defqtvc
 ;; File "walker.adb", line 1, characters 0-0
  (not (rec__walker__int_acc__pointer_value__pred
  (rec__walker__two_acc__fst x__split_fields3))))
(check-sat)
