(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-const number Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const length Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort digit_index_type 0)

(declare-fun digit_index_typeqtint (digit_index_type) Int)

;; digit_index_type'axiom
  (assert
  (forall ((i digit_index_type))
  (and (<= 1 (digit_index_typeqtint i)) (<= (digit_index_typeqtint i) 65536))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 65536)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (digit_index_type digit_index_type) Bool)

(declare-const dummy1 digit_index_type)

(declare-datatypes ()
((digit_index_type__ref
 (digit_index_type__refqtmk (digit_index_type__content digit_index_type)))))
(define-fun digit_index_type__ref_digit_index_type__content__projection ((a digit_index_type__ref)) digit_index_type 
  (digit_index_type__content a))

(define-fun to_rep ((x digit_index_type)) Int (digit_index_typeqtint x))

(declare-fun of_rep (Int) digit_index_type)

;; inversion_axiom
  (assert
  (forall ((x digit_index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x digit_index_type)) (! (in_range2
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort tdigit_count_typeB 0)

(declare-fun tdigit_count_typeBqtint (tdigit_count_typeB) Int)

;; tdigit_count_typeB'axiom
  (assert
  (forall ((i tdigit_count_typeB))
  (and (<= (- 2147483648) (tdigit_count_typeBqtint i))
  (<= (tdigit_count_typeBqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (tdigit_count_typeB tdigit_count_typeB) Bool)

(declare-const dummy2 tdigit_count_typeB)

(declare-datatypes ()
((tdigit_count_typeB__ref
 (tdigit_count_typeB__refqtmk
 (tdigit_count_typeB__content tdigit_count_typeB)))))
(define-fun tdigit_count_typeB__ref_tdigit_count_typeB__content__projection ((a tdigit_count_typeB__ref)) tdigit_count_typeB 
  (tdigit_count_typeB__content a))

(define-fun to_rep1 ((x tdigit_count_typeB)) Int (tdigit_count_typeBqtint x))

(declare-fun of_rep1 (Int) tdigit_count_typeB)

;; inversion_axiom
  (assert
  (forall ((x tdigit_count_typeB))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x tdigit_count_typeB)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (octet octet) Bool)

(declare-const dummy3 octet)

(declare-datatypes () ((octet__ref (octet__refqtmk (octet__content octet)))))
(define-fun octet__ref_octet__content__projection ((a octet__ref)) octet 
  (octet__content a))

(declare-fun to_rep2 (octet) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int2 ((x octet)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int octet))))))
(declare-fun slide ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) tdigit_count_typeB)

(declare-fun last (t) tdigit_count_typeB)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range3 f)
     (=> (in_range3 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range3 low)
                   (and (in_range3 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((digits_array_type__ref
 (digits_array_type__refqtmk (digits_array_type__content us_t)))))
(define-fun digits_array_type__ref_digits_array_type__content__projection ((a digits_array_type__ref)) us_t 
  (digits_array_type__content a))

(declare-datatypes () ((t18s__ref (t18s__refqtmk (t18s__content us_t)))))
(define-fun t18s__ref_t18s__content__projection ((a t18s__ref)) us_t 
  (t18s__content a))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk (rec__very_longs__very_long__length digit_index_type)))))
(define-fun us_split_discrs_rec__very_longs__very_long__length__projection ((a us_split_discrs)) digit_index_type 
  (rec__very_longs__very_long__length a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__very_longs__very_long__long_digits us_t)))))
(define-fun us_split_fields_rec__very_longs__very_long__long_digits__projection ((a us_split_fields)) us_t 
  (rec__very_longs__very_long__long_digits a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__very_longs__very_long__length
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__very_longs__very_long__length
                                                  (us_split_discrs1 b))))
                        (= (bool_eq1
                           (rec__very_longs__very_long__long_digits
                           (us_split_fields1 a))
                           (rec__very_longs__very_long__long_digits
                           (us_split_fields1 b))) true))
                   true false))

(define-fun in_range4 ((rec__very_longs__very_long__length1 Int)
  (a us_split_discrs)) Bool (= rec__very_longs__very_long__length1 (to_rep
                                                                   (rec__very_longs__very_long__length
                                                                   a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const very_longs__very_long__length__first__bit Int)

(declare-const very_longs__very_long__length__last__bit Int)

(declare-const very_longs__very_long__length__position Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit very_longs__very_long__length__last__bit))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position))

(declare-const very_longs__very_long__long_digits__first__bit Int)

(declare-const very_longs__very_long__long_digits__last__bit Int)

(declare-const very_longs__very_long__long_digits__position Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit very_longs__very_long__long_digits__last__bit))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((very_long__ref (very_long__refqtmk (very_long__content us_rep)))))
(define-fun very_long__ref_very_long__content__projection ((a very_long__ref)) us_rep 
  (very_long__content a))

(declare-datatypes () ((t23b__ref (t23b__refqtmk (t23b__content us_t)))))
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) us_t 
  (t23b__content a))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1 (rec__very_longs__very_long__long_digits1 us_t)))))
(define-fun us_split_fields_rec__very_longs__very_long__long_digits__6__projection ((a us_split_fields2)) us_t 
  (rec__very_longs__very_long__long_digits1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (us_repqtmk1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__6__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__6__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (let ((temp___178 (rec__very_longs__very_long__long_digits1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array (to_array temp___178)
                                         (first1 temp___178)
                                         (last1 temp___178))))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___177 (rec__very_longs__very_long__long_digits
                                                           (us_split_fields1
                                                           r))))
                                         (of_array (to_array temp___177)
                                         (first1 temp___177)
                                         (last1 temp___177))))))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__very_longs__very_long__length
                            (us_split_discrs2 a))) (to_rep
                                                   (rec__very_longs__very_long__length
                                                   (us_split_discrs2 b))))
                         (= (bool_eq1
                            (rec__very_longs__very_long__long_digits1
                            (us_split_fields3 a))
                            (rec__very_longs__very_long__long_digits1
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const very_longs__very_long__length__first__bit1 Int)

(declare-const very_longs__very_long__length__last__bit1 Int)

(declare-const very_longs__very_long__length__position1 Int)

;; very_longs__very_long__length__first__bit_axiom
  (assert (<= 0 very_longs__very_long__length__first__bit1))

;; very_longs__very_long__length__last__bit_axiom
  (assert
  (< very_longs__very_long__length__first__bit1 very_longs__very_long__length__last__bit1))

;; very_longs__very_long__length__position_axiom
  (assert (<= 0 very_longs__very_long__length__position1))

(declare-const very_longs__very_long__long_digits__first__bit1 Int)

(declare-const very_longs__very_long__long_digits__last__bit1 Int)

(declare-const very_longs__very_long__long_digits__position1 Int)

;; very_longs__very_long__long_digits__first__bit_axiom
  (assert (<= 0 very_longs__very_long__long_digits__first__bit1))

;; very_longs__very_long__long_digits__last__bit_axiom
  (assert
  (< very_longs__very_long__long_digits__first__bit1 very_longs__very_long__long_digits__last__bit1))

;; very_longs__very_long__long_digits__position_axiom
  (assert (<= 0 very_longs__very_long__long_digits__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ()
((tresultS__ref (tresultS__refqtmk (tresultS__content us_rep1)))))
(define-fun tresultS__ref_tresultS__content__projection ((a tresultS__ref)) us_rep1 
  (tresultS__content a))

(declare-const result____split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_435 us_rep1)
  (temp___is_init_431 Bool) (temp___skip_constant_432 Bool)
  (temp___do_toplevel_433 Bool)
  (temp___do_typ_inv_434 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_432 true))
                                     (in_range4 length
                                     (us_split_discrs1
                                     (to_base temp___expr_435))))
                                     (and (dynamic_property 1 length
                                     (first1
                                     (rec__very_longs__very_long__long_digits1
                                     (us_split_fields3 temp___expr_435)))
                                     (last1
                                     (rec__very_longs__very_long__long_digits1
                                     (us_split_fields3 temp___expr_435))))
                                     (and
                                     (= (first1
                                        (rec__very_longs__very_long__long_digits1
                                        (us_split_fields3 temp___expr_435))) 1)
                                     (= (last1
                                        (rec__very_longs__very_long__long_digits1
                                        (us_split_fields3 temp___expr_435))) 
                                     length)))))

(define-fun default_initial_assumption ((temp___expr_438 us_rep1)
  (temp___skip_top_level_439 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__very_longs__very_long__length
                                            (us_split_discrs2
                                            temp___expr_438))) length)
                                         (and
                                         (= (first1
                                            (rec__very_longs__very_long__long_digits1
                                            (us_split_fields3
                                            temp___expr_438))) 1)
                                         (= (last1
                                            (rec__very_longs__very_long__long_digits1
                                            (us_split_fields3
                                            temp___expr_438))) length))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const r26b Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant2 ((temp___expr_243 Int)
  (temp___is_init_239 Bool) (temp___skip_constant_240 Bool)
  (temp___do_toplevel_241 Bool)
  (temp___do_typ_inv_242 Bool)) Bool (=>
                                     (or (= temp___is_init_239 true)
                                     (<= 1 65536)) (in_range2
                                     temp___expr_243)))

(declare-datatypes () ((t25b__ref (t25b__refqtmk (t25b__content us_t)))))
(define-fun t25b__ref_t25b__content__projection ((a t25b__ref)) us_t 
  (t25b__content a))

(declare-fun temp_____aggregate_def_881 ((_ BitVec 8) Int Int) us_t)

(define-fun dynamic_invariant3 ((temp___expr_250 (_ BitVec 8))
  (temp___is_init_246 Bool) (temp___skip_constant_247 Bool)
  (temp___do_toplevel_248 Bool) (temp___do_typ_inv_249 Bool)) Bool true)

;; def_axiom
  (assert
  (forall ((temp___883 (_ BitVec 8)))
  (forall ((temp___884 Int) (temp___885 Int))
  (let ((temp___882 (temp_____aggregate_def_881 temp___883 temp___884
                    temp___885)))
  (=> (dynamic_invariant3 temp___883 true true true true)
  (and
  (=> (dynamic_property 1 65536 temp___884 temp___885)
  (and (= (first1 temp___882) temp___884) (= (last1 temp___882) temp___885)))
  (forall ((temp___886 Int))
  (= (to_rep2 (select (to_array temp___882) temp___886)) temp___883))))))))

(define-fun dynamic_invariant4 ((temp___expr_257 us_t)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)
  (temp___do_typ_inv_256 Bool)) Bool (=>
                                     (not (= temp___skip_constant_254 true))
                                     (dynamic_property 1 65536
                                     (first1 temp___expr_257)
                                     (last1 temp___expr_257))))

(define-fun dynamic_invariant5 ((temp___expr_263 us_rep)
  (temp___is_init_259 Bool) (temp___skip_constant_260 Bool)
  (temp___do_toplevel_261 Bool)
  (temp___do_typ_inv_262 Bool)) Bool (let ((temp___264 (rec__very_longs__very_long__length
                                                       (us_split_discrs1
                                                       temp___expr_263))))
                                     (and (dynamic_property 1
                                     (to_rep temp___264)
                                     (first1
                                     (rec__very_longs__very_long__long_digits
                                     (us_split_fields1 temp___expr_263)))
                                     (last1
                                     (rec__very_longs__very_long__long_digits
                                     (us_split_fields1 temp___expr_263))))
                                     (and
                                     (= (first1
                                        (rec__very_longs__very_long__long_digits
                                        (us_split_fields1 temp___expr_263))) 1)
                                     (= (last1
                                        (rec__very_longs__very_long__long_digits
                                        (us_split_fields1 temp___expr_263))) 
                                     (to_rep temp___264))))))

(declare-const result____split_fields us_t)

(declare-const temp Int)

;; Assume
  (assert (dynamic_invariant number true false true true))

;; Assume
  (assert (dynamic_invariant2 length true false true true))

(define-fun o () Int length)

;; Ensures
  (assert (in_range2 o))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk1 result____split_discrs
  (us_split_fieldsqtmk1 result____split_fields)) false))

;; Assume
  (assert (dynamic_invariant1
  (us_repqtmk1 result____split_discrs
  (us_split_fieldsqtmk1 result____split_fields)) false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant temp false false true true))

;; Assert
  (assert
  (= (to_rep (rec__very_longs__very_long__length result____split_discrs)) 
  length))

(define-fun temp___887 () us_t (temp_____aggregate_def_881 #x00 1 length))

;; Assume
  (assert (= (first1 temp___887) 1))

;; Assume
  (assert (= (last1 temp___887) length))

;; Assert
  (assert
  (ite (<= (first1 temp___887) (last1 temp___887))
  (and (<= 1 length)
  (= (- (last1 temp___887) (first1 temp___887)) (- length 1))) (< length 1)))

(define-fun temp___889 () us_t (of_array (to_array temp___887)
                               (first1 temp___887) (last1 temp___887)))

;; Assert
  (assert
  (ite (<= (first1 temp___889) (last1 temp___889))
  (and (<= (first1 result____split_fields) (last1 result____split_fields))
  (= (- (last1 temp___889) (first1 temp___889)) (- (last1
                                                   result____split_fields) 
  (first1 result____split_fields))))
  (< (last1 result____split_fields) (first1 result____split_fields))))

(declare-const result____split_fields1 us_t)

;; H
  (assert (= result____split_fields1 temp___889))

(declare-const temp1 Int)

;; H
  (assert (= temp1 number))

;; Assume
  (assert (= (last1 result____split_fields1) r26b))

;; Assume
  (assert (in_range3 r26b))

(declare-const result____split_fields2 us_t)

(declare-const index Int)

;; H
  (assert (= index 1))

;; H
  (assert
  (let ((temp___894 r26b))
  (ite (= (and (ite (<= 1 index) true false) (ite (<= index temp___894) true
                                             false)) true)
  (exists ((result____split_fields3 us_t) (temp2 Int) (index1 Int))
  (and
  (= (and (ite (and
               (and (dynamic_invariant1
               (us_repqtmk1 result____split_discrs
               (us_split_fieldsqtmk1 result____split_fields3)) false true
               true true)
               (forall ((temp___900 Int))
               (=>
               (and (<= (first1 result____split_fields3) temp___900)
               (<= temp___900 (last1 result____split_fields3)))
               (=>
               (or (< temp___894 temp___900)
               (or (< temp___900 1) (<= index1 temp___900)))
               (= (select (to_array result____split_fields3) temp___900) (select 
               (to_array result____split_fields1) temp___900))))))
               (dynamic_invariant temp2 false true true true))
          true false) (ite (and (<= 1 index1) (<= index1 r26b)) true false)) true)
  (let ((o1 (mod1 temp2 256)))
  (and (uint_in_range o1)
  (exists ((o2 octet))
  (and (= (to_rep2 o2) ((_ int2bv 8) o1))
  (and
  (and (<= (first1 result____split_fields3) index1)
  (<= index1 (last1 result____split_fields3)))
  (and
  (= result____split_fields2 (us_tqtmk
                             (store (to_array result____split_fields3) index1 o2)
                             (rt result____split_fields3)))
  (= index1 temp___894)))))))))
  (= result____split_fields2 result____split_fields1))))

(declare-const very_longs__make_from_natural__result us_rep)

;; H
  (assert
  (= very_longs__make_from_natural__result (to_base
                                           (us_repqtmk1
                                           result____split_discrs
                                           (us_split_fieldsqtmk1
                                           result____split_fields2)))))

(assert
;; defqtvc
 ;; File "very_longs.ads", line 12, characters 0-0
  (not
  (= (to_rep
     (rec__very_longs__very_long__length
     (us_split_discrs1 very_longs__make_from_natural__result))) length)))
(check-sat)

(exit)
