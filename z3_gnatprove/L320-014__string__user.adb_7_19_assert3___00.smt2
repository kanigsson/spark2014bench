(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort character 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (character character) Bool)

(declare-const dummy character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-const s (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const s1 (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tTsSP1 0)

(declare-fun tTsSP1qtint (tTsSP1) Int)

;; tTsSP1'axiom
  (assert
  (forall ((i tTsSP1)) (and (<= 1 (tTsSP1qtint i)) (<= (tTsSP1qtint i) 10))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (tTsSP1 tTsSP1) Bool)

(declare-const dummy1 tTsSP1)

(declare-datatypes ()
((tTsSP1__ref (tTsSP1__refqtmk (tTsSP1__content tTsSP1)))))
(define-fun tTsSP1__ref_tTsSP1__content__projection ((a tTsSP1__ref)) tTsSP1 
  (tTsSP1__content a))

(declare-fun temp___String_Literal_154 (tuple0) (Array Int character))

;; temp___String_Literal_154__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 2)) 109))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 4)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 6)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 7)) 111)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 8)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 9)) 32)
     (= (to_rep (select (temp___String_Literal_154 us_void_param) 10)) 78))))) :pattern (
  (temp___String_Literal_154 us_void_param)) )))

(declare-sort tTsSP11 0)

(declare-fun tTsSP1qtint1 (tTsSP11) Int)

;; tTsSP1'axiom
  (assert
  (forall ((i tTsSP11))
  (and (<= 1 (tTsSP1qtint1 i)) (<= (tTsSP1qtint1 i) 10))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tTsSP11 tTsSP11) Bool)

(declare-const dummy2 tTsSP11)

(declare-datatypes ()
((tTsSP1__ref1 (tTsSP1__refqtmk1 (tTsSP1__content1 tTsSP11)))))
(define-fun tTsSP1__ref_tTsSP1__content__2__projection ((a tTsSP1__ref1)) tTsSP11 
  (tTsSP1__content1 a))

(declare-fun temp___String_Literal_155 (tuple0) (Array Int character))

;; temp___String_Literal_155__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 2)) 109))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 4)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 6)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 7)) 111)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 8)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 9)) 32)
     (= (to_rep (select (temp___String_Literal_155 us_void_param) 10)) 78))))) :pattern (
  (temp___String_Literal_155 us_void_param)) )))

(declare-fun temp___String_Literal_197 (tuple0) (Array Int character))

;; temp___String_Literal_197__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 2)) 109))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 4)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 6)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 7)) 111)
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 8)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 9)) 32)
     (= (to_rep (select (temp___String_Literal_197 us_void_param) 10)) 78))))) :pattern (
  (temp___String_Literal_197 us_void_param)) )))

(declare-fun temp___String_Literal_204 (tuple0) (Array Int character))

;; temp___String_Literal_204__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 1)) 105)
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 2)) 109))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 3)) 97)
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 4)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 6)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 7)) 111)
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 8)) 102))
     (and
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 9)) 32)
     (= (to_rep (select (temp___String_Literal_204 us_void_param) 10)) 78))))) :pattern (
  (temp___String_Literal_204 us_void_param)) )))

(define-fun dynamic_invariant ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range temp___expr_74)))

;; s__def_axiom
  (assert (= s (temp___String_Literal_154 Tuple0)))

;; s__def_axiom
  (assert (= s1 (temp___String_Literal_155 Tuple0)))

;; Assume
  (assert true)

;; Assume
  (assert (= (temp___String_Literal_154 Tuple0) s))

;; Assume
  (assert true)

;; Assume
  (assert (= (temp___String_Literal_155 Tuple0) s1))

;; Assert
  (assert (= (bool_eq s 1 10 (temp___String_Literal_197 Tuple0) 1 10) true))

(assert
;; defqtvc
 ;; File "user.adb", line 2, characters 0-0
  (not (= (bool_eq s1 1 10 (temp___String_Literal_204 Tuple0) 1 10) true)))
(check-sat)

(exit)
