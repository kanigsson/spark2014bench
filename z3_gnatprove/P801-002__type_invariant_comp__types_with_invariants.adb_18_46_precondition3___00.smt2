(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__types_with_invariants__my_integer__sign Bool)(rec__types_with_invariants__my_integer__val natural)))))
(define-fun us_split_fields_rec__types_with_invariants__my_integer__sign__projection ((a us_split_fields)) Bool 
  (rec__types_with_invariants__my_integer__sign a))

(define-fun us_split_fields_rec__types_with_invariants__my_integer__val__projection ((a us_split_fields)) natural 
  (rec__types_with_invariants__my_integer__val a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__types_with_invariants__my_integer__sign
                                (us_split_fields1 a)) 1 0) (ite (rec__types_with_invariants__my_integer__sign
                                                                (us_split_fields1
                                                                b)) 1 0))
                        (= (to_rep
                           (rec__types_with_invariants__my_integer__val
                           (us_split_fields1 a))) (to_rep
                                                  (rec__types_with_invariants__my_integer__val
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const types_with_invariants__my_integer__sign__first__bit Int)

(declare-const types_with_invariants__my_integer__sign__last__bit Int)

(declare-const types_with_invariants__my_integer__sign__position Int)

;; types_with_invariants__my_integer__sign__first__bit_axiom
  (assert (<= 0 types_with_invariants__my_integer__sign__first__bit))

;; types_with_invariants__my_integer__sign__last__bit_axiom
  (assert
  (< types_with_invariants__my_integer__sign__first__bit types_with_invariants__my_integer__sign__last__bit))

;; types_with_invariants__my_integer__sign__position_axiom
  (assert (<= 0 types_with_invariants__my_integer__sign__position))

(declare-const types_with_invariants__my_integer__val__first__bit Int)

(declare-const types_with_invariants__my_integer__val__last__bit Int)

(declare-const types_with_invariants__my_integer__val__position Int)

;; types_with_invariants__my_integer__val__first__bit_axiom
  (assert (<= 0 types_with_invariants__my_integer__val__first__bit))

;; types_with_invariants__my_integer__val__last__bit_axiom
  (assert
  (< types_with_invariants__my_integer__val__first__bit types_with_invariants__my_integer__val__last__bit))

;; types_with_invariants__my_integer__val__position_axiom
  (assert (<= 0 types_with_invariants__my_integer__val__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((my_integer__ref (my_integer__refqtmk (my_integer__content us_rep)))))
(define-fun my_integer__ref_my_integer__content__projection ((a my_integer__ref)) us_rep 
  (my_integer__content a))

(declare-fun to_integer (us_rep) Int)

(declare-fun to_integer__function_guard (Int us_rep) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range3 temp___expr_18)))

(define-fun default_initial_assumption ((temp___expr_164 us_rep)
  (temp___skip_top_level_165 Bool)) Bool (and
                                         (= (rec__types_with_invariants__my_integer__sign
                                            (us_split_fields1
                                            temp___expr_164)) (distinct 1 0))
                                         (= (to_rep
                                            (rec__types_with_invariants__my_integer__val
                                            (us_split_fields1
                                            temp___expr_164))) 0)))

(define-fun type_invariant ((temp___166 us_rep)) Bool (=>
                                                      (= (to_rep
                                                         (rec__types_with_invariants__my_integer__val
                                                         (us_split_fields1
                                                         temp___166))) 0)
                                                      (= (rec__types_with_invariants__my_integer__sign
                                                         (us_split_fields1
                                                         temp___166)) true)))

;; to_integer__post_axiom
  (assert
  (forall ((x us_rep))
  (! (let ((result (to_integer x)))
     (=> (to_integer__function_guard result x) (dynamic_invariant1 result
     true false true true))) :pattern ((to_integer x)) )))

;; to_integer__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (to_integer x) (ite (= (rec__types_with_invariants__my_integer__sign
                               (us_split_fields1 x)) true)
                       (to_rep
                       (rec__types_with_invariants__my_integer__val
                       (us_split_fields1 x)))
                       (- (to_rep
                          (rec__types_with_invariants__my_integer__val
                          (us_split_fields1 x)))))) :pattern ((to_integer x)) )))

(declare-fun from_integer (Int) us_rep)

(declare-fun from_integer__function_guard (us_rep Int) Bool)

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

;; from_integer__post_axiom
  (assert true)

;; from_integer__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant1 x true true true true)
     (= (from_integer x) (us_repqtmk
                         (us_split_fieldsqtmk (>= x 0) (of_rep (abs1 x)))))) :pattern (
  (from_integer x)) )))

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const e us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ()
((int____ref (int____refqtmk (int____content us_rep)))))
(define-fun int____ref_int____content__projection ((a int____ref)) us_rep 
  (int____content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun default_initial_assumption1 ((temp___expr_256 us_rep)
  (temp___skip_top_level_257 Bool)) Bool (and
                                         (= (rec__types_with_invariants__my_integer__sign
                                            (us_split_fields1
                                            temp___expr_256)) (distinct 1 0))
                                         (= (to_rep
                                            (rec__types_with_invariants__my_integer__val
                                            (us_split_fields1
                                            temp___expr_256))) 0)))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

;; Assume
  (assert (dynamic_invariant i true false true true))

;; Assume
  (assert true)

(declare-const t__split_fields us_split_fields)

;; H
  (assert (= t__split_fields (us_split_fields1 e)))

;; Assume
  (assert true)

;; Assert
  (assert
  (= (to_rep (rec__types_with_invariants__my_integer__val t__split_fields)) 
  (to_rep (rec__types_with_invariants__my_integer__val (us_split_fields1 e)))))

;; H
  (assert (to_integer__function_guard (to_integer e) e))

;; H
  (assert (to_integer__function_guard (to_integer e) e))

;; H
  (assert (from_integer__function_guard (from_integer (to_integer e))
  (to_integer e)))

;; Assert
  (assert
  (=>
  (or
  (not
  (= (to_rep
     (rec__types_with_invariants__my_integer__val (us_split_fields1 e))) 0))
  (= (rec__types_with_invariants__my_integer__sign (us_split_fields1 e)) true))
  (= (bool_eq (from_integer (to_integer e)) e) true)))

(define-fun o () Int i)

(assert
;; defqtvc
 ;; File "types_with_invariants.adb", line 8, characters 0-0
  (not (< (- 2147483648) o)))
(check-sat)

(exit)
