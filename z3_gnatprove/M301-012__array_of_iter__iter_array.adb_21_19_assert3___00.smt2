(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort tarD1 0)

(declare-fun tarD1qtint (tarD1) Int)

;; tarD1'axiom
  (assert
  (forall ((i tarD1)) (and (<= 1 (tarD1qtint i)) (<= (tarD1qtint i) 10))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (tarD1 tarD1) Bool)

(declare-const dummy1 tarD1)

(declare-datatypes () ((tarD1__ref (tarD1__refqtmk (tarD1__content tarD1)))))
(define-fun tarD1__ref_tarD1__content__projection ((a tarD1__ref)) tarD1 
  (tarD1__content a))

(declare-sort t11b 0)

(declare-fun t11bqtint (t11b) Int)

;; t11b'axiom
  (assert
  (forall ((i t11b)) (and (<= 1 (t11bqtint i)) (<= (t11bqtint i) 10))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (t11b t11b) Bool)

(declare-const dummy2 t11b)

(declare-datatypes () ((t11b__ref (t11b__refqtmk (t11b__content t11b)))))
(define-fun t11b__ref_t11b__content__projection ((a t11b__ref)) t11b 
  (t11b__content a))

(declare-fun iter_array__x__aggregate_def (Int) (Array Int natural))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___187 Int))
  (=> (dynamic_invariant temp___187 true true true true)
  (forall ((temp___188 Int))
  (= (select (iter_array__x__aggregate_def temp___187) temp___188) rliteral)))))

(declare-const rliteral1 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral1) 1))

(declare-const rliteral2 natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral2) 2))

(declare-const x (Array Int natural))

;; H
  (assert (= x (iter_array__x__aggregate_def 0)))

;; Assume
  (assert true)

;; Assert
  (assert
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j 10)) (= (to_rep (select x j)) 0))))

;; Assert
  (assert
  (forall ((temp___191 Int))
  (=> (and (<= 1 temp___191) (<= temp___191 10))
  (= (to_rep (select x temp___191)) 0))))

(declare-const c8b Int)

;; H
  (assert (= c8b 1))

(declare-const x1 (Array Int natural))

;; H
  (assert (= x1 (store x c8b rliteral1)))

(declare-const c8b1 Int)

;; H
  (assert (= c8b1 2))

(declare-const x2 (Array Int natural))

;; H
  (assert (= x2 (store x1 c8b1 rliteral1)))

(declare-const c8b2 Int)

;; H
  (assert (= c8b2 3))

(declare-const x3 (Array Int natural))

;; H
  (assert (= x3 (store x2 c8b2 rliteral1)))

(declare-const c8b3 Int)

;; H
  (assert (= c8b3 4))

(declare-const x4 (Array Int natural))

;; H
  (assert (= x4 (store x3 c8b3 rliteral1)))

(declare-const c8b4 Int)

;; H
  (assert (= c8b4 5))

(declare-const x5 (Array Int natural))

;; H
  (assert (= x5 (store x4 c8b4 rliteral1)))

(declare-const c8b5 Int)

;; H
  (assert (= c8b5 6))

(declare-const x6 (Array Int natural))

;; H
  (assert (= x6 (store x5 c8b5 rliteral1)))

(declare-const c8b6 Int)

;; H
  (assert (= c8b6 7))

(declare-const x7 (Array Int natural))

;; H
  (assert (= x7 (store x6 c8b6 rliteral1)))

(declare-const c8b7 Int)

;; H
  (assert (= c8b7 8))

(declare-const x8 (Array Int natural))

;; H
  (assert (= x8 (store x7 c8b7 rliteral1)))

(declare-const c8b8 Int)

;; H
  (assert (= c8b8 9))

(declare-const x9 (Array Int natural))

;; H
  (assert (= x9 (store x8 c8b8 rliteral1)))

(declare-const c8b9 Int)

;; H
  (assert (= c8b9 10))

(declare-const x10 (Array Int natural))

;; H
  (assert (= x10 (store x9 c8b9 rliteral1)))

;; Assert
  (assert
  (forall ((temp___198 Int))
  (=> (and (<= 1 temp___198) (<= temp___198 10))
  (= (to_rep (select x10 temp___198)) 1))))

(declare-const x11 (Array Int natural))

(declare-const j Int)

;; H
  (assert (= j 1))

;; H
  (assert
  (ite (= (and (ite (<= 1 j) true false) (ite (<= j 10) true false)) true)
  (exists ((x12 (Array Int natural)))
  (and (= x12 (store x10 j rliteral2))
  (exists ((j1 Int))
  (and
  (forall ((k Int))
  (=> (and (<= 1 k) (<= k j1)) (= (to_rep (select x11 k)) 2)))
  (and
  (= (and (ite (and (in_range3 j1)
               (forall ((temp___203 Int))
               (=> (and (<= 1 temp___203) (<= temp___203 10))
               (=>
               (or (< 10 temp___203) (or (< temp___203 1) (< j1 temp___203)))
               (= (select x11 temp___203) (select x10 temp___203))))))
          true false) (ite (and (<= 1 j1) (<= j1 10)) true false)) true)
  (= j1 10)))))) (= x11 x10)))

(declare-const temp___207 Int)

;; H
  (assert (<= 1 temp___207))

;; H
  (assert (<= temp___207 10))

(assert
;; defqtvc
 ;; File "iter_array.adb", line 1, characters 0-0
  (not (= (to_rep (select x11 temp___207)) 2)))
(check-sat)

(exit)
