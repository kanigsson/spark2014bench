(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort ext_account_num 0)

(declare-fun ext_account_numqtint (ext_account_num) Int)

;; ext_account_num'axiom
  (assert
  (forall ((i ext_account_num))
  (and (<= 0 (ext_account_numqtint i)) (<= (ext_account_numqtint i) 200000))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 200000)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (ext_account_num ext_account_num) Bool)

(declare-const dummy ext_account_num)

(declare-datatypes ()
((ext_account_num__ref
 (ext_account_num__refqtmk (ext_account_num__content ext_account_num)))))
(define-fun ext_account_num__ref_ext_account_num__content__projection ((a ext_account_num__ref)) ext_account_num 
  (ext_account_num__content a))

(define-fun to_rep ((x ext_account_num)) Int (ext_account_numqtint x))

(declare-fun of_rep (Int) ext_account_num)

;; inversion_axiom
  (assert
  (forall ((x ext_account_num))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x ext_account_num)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__database__availability__account_link__available Bool)(rec__database__availability__account_link__prev ext_account_num)(rec__database__availability__account_link__next ext_account_num)))))
(define-fun us_split_fields_rec__database__availability__account_link__available__projection ((a us_split_fields)) Bool 
  (rec__database__availability__account_link__available a))

(define-fun us_split_fields_rec__database__availability__account_link__prev__projection ((a us_split_fields)) ext_account_num 
  (rec__database__availability__account_link__prev a))

(define-fun us_split_fields_rec__database__availability__account_link__next__projection ((a us_split_fields)) ext_account_num 
  (rec__database__availability__account_link__next a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (ite (rec__database__availability__account_link__available
                                (us_split_fields1 a)) 1 0) (ite (rec__database__availability__account_link__available
                                                                (us_split_fields1
                                                                b)) 1 0))
                        (= (to_rep
                           (rec__database__availability__account_link__prev
                           (us_split_fields1 a))) (to_rep
                                                  (rec__database__availability__account_link__prev
                                                  (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__database__availability__account_link__next
                           (us_split_fields1 a))) (to_rep
                                                  (rec__database__availability__account_link__next
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const database__availability__account_link__available__first__bit Int)

(declare-const database__availability__account_link__available__last__bit Int)

(declare-const database__availability__account_link__available__position Int)

;; database__availability__account_link__available__first__bit_axiom
  (assert (<= 0 database__availability__account_link__available__first__bit))

;; database__availability__account_link__available__last__bit_axiom
  (assert
  (< database__availability__account_link__available__first__bit database__availability__account_link__available__last__bit))

;; database__availability__account_link__available__position_axiom
  (assert (<= 0 database__availability__account_link__available__position))

(declare-const database__availability__account_link__prev__first__bit Int)

(declare-const database__availability__account_link__prev__last__bit Int)

(declare-const database__availability__account_link__prev__position Int)

;; database__availability__account_link__prev__first__bit_axiom
  (assert (<= 0 database__availability__account_link__prev__first__bit))

;; database__availability__account_link__prev__last__bit_axiom
  (assert
  (< database__availability__account_link__prev__first__bit database__availability__account_link__prev__last__bit))

;; database__availability__account_link__prev__position_axiom
  (assert (<= 0 database__availability__account_link__prev__position))

(declare-const database__availability__account_link__next__first__bit Int)

(declare-const database__availability__account_link__next__last__bit Int)

(declare-const database__availability__account_link__next__position Int)

;; database__availability__account_link__next__first__bit_axiom
  (assert (<= 0 database__availability__account_link__next__first__bit))

;; database__availability__account_link__next__last__bit_axiom
  (assert
  (< database__availability__account_link__next__first__bit database__availability__account_link__next__last__bit))

;; database__availability__account_link__next__position_axiom
  (assert (<= 0 database__availability__account_link__next__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((account_link__ref (account_link__refqtmk (account_link__content us_rep)))))
(define-fun account_link__ref_account_link__content__projection ((a account_link__ref)) us_rep 
  (account_link__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun existing (Int (Array Int us_rep)) Bool)

(declare-fun existing__function_guard (Bool Int (Array Int us_rep)) Bool)

(declare-fun is_available (Int (Array Int us_rep)) Bool)

(declare-fun is_available__function_guard (Bool Int (Array Int us_rep)) Bool)

(declare-sort account_num 0)

(declare-fun account_numqtint (account_num) Int)

;; account_num'axiom
  (assert
  (forall ((i account_num))
  (and (<= 1 (account_numqtint i)) (<= (account_numqtint i) 200000))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 200000)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (account_num account_num) Bool)

(declare-const dummy2 account_num)

(declare-datatypes ()
((account_num__ref (account_num__refqtmk (account_num__content account_num)))))
(define-fun account_num__ref_account_num__content__projection ((a account_num__ref)) account_num 
  (account_num__content a))

(define-fun dynamic_invariant ((temp___expr_189 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)
  (temp___do_typ_inv_188 Bool)) Bool (=>
                                     (or (= temp___is_init_185 true)
                                     (<= 1 200000)) (in_range2
                                     temp___expr_189)))

;; existing__post_axiom
  (assert true)

;; existing__def_axiom
  (assert
  (forall ((account Int))
  (forall ((database__availability__links (Array Int us_rep)))
  (! (and
     (forall ((account1 Int)
     (database__availability__links1 (Array Int us_rep)))
     (is_available__function_guard
     (is_available account1 database__availability__links1) account1
     database__availability__links1))
     (= (= (existing account database__availability__links) true)
     (not (= (is_available account database__availability__links) true)))) :pattern (
  (existing account database__availability__links)) ))))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep1 (character) Int)

(declare-fun of_rep1 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int character))))))
(declare-fun slide1 ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep1 (select a temp___idx_91)) (to_rep1
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-const dummy4 (Array Int character))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 ((Array Int character) (Array Int character)) Bool)

(declare-sort num 0)

(declare-fun numqtint (num) Int)

;; num'axiom
  (assert (forall ((i num)) (and (<= 0 (numqtint i)) (<= (numqtint i) 999))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 999)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (num num) Bool)

(declare-const dummy5 num)

(declare-datatypes () ((num__ref (num__refqtmk (num__content num)))))
(define-fun num__ref_num__content__projection ((a num__ref)) num (num__content
                                                                 a))

(define-fun to_rep2 ((x num)) Int (numqtint x))

(declare-fun of_rep2 (Int) num)

;; inversion_axiom
  (assert
  (forall ((x num)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x num)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int num))))))
(declare-fun slide2 ((Array Int num) Int Int) (Array Int num))

;; slide_eq
  (assert
  (forall ((a (Array Int num)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int num)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int num)) (a__first Int) (a__last Int)
  (b (Array Int num)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep2 (select a temp___idx_157)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int num)) (b (Array Int num)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep2 (select a temp___idx_157)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-const dummy6 (Array Int num))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq6 ((Array Int num) (Array Int num)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__database__account_rec__owner_name (Array Int character))(rec__database__account_rec__owner_id (Array Int num))(rec__database__account_rec__account ext_account_num)))))
(define-fun us_split_fields_rec__database__account_rec__owner_name__projection ((a us_split_fields2)) (Array Int character) 
  (rec__database__account_rec__owner_name a))

(define-fun us_split_fields_rec__database__account_rec__owner_id__projection ((a us_split_fields2)) (Array Int num) 
  (rec__database__account_rec__owner_id a))

(define-fun us_split_fields_rec__database__account_rec__account__projection ((a us_split_fields2)) ext_account_num 
  (rec__database__account_rec__account a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq4 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (bool_eq2
                            (rec__database__account_rec__owner_name
                            (us_split_fields3 a)) 1 255
                            (rec__database__account_rec__owner_name
                            (us_split_fields3 b)) 1 255) true)
                         (= (bool_eq3
                            (rec__database__account_rec__owner_id
                            (us_split_fields3 a)) 0 2
                            (rec__database__account_rec__owner_id
                            (us_split_fields3 b)) 0 2) true))
                         (= (to_rep
                            (rec__database__account_rec__account
                            (us_split_fields3 a))) (to_rep
                                                   (rec__database__account_rec__account
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const database__account_rec__owner_name__first__bit Int)

(declare-const database__account_rec__owner_name__last__bit Int)

(declare-const database__account_rec__owner_name__position Int)

;; database__account_rec__owner_name__first__bit_axiom
  (assert (<= 0 database__account_rec__owner_name__first__bit))

;; database__account_rec__owner_name__last__bit_axiom
  (assert
  (< database__account_rec__owner_name__first__bit database__account_rec__owner_name__last__bit))

;; database__account_rec__owner_name__position_axiom
  (assert (<= 0 database__account_rec__owner_name__position))

(declare-const database__account_rec__owner_id__first__bit Int)

(declare-const database__account_rec__owner_id__last__bit Int)

(declare-const database__account_rec__owner_id__position Int)

;; database__account_rec__owner_id__first__bit_axiom
  (assert (<= 0 database__account_rec__owner_id__first__bit))

;; database__account_rec__owner_id__last__bit_axiom
  (assert
  (< database__account_rec__owner_id__first__bit database__account_rec__owner_id__last__bit))

;; database__account_rec__owner_id__position_axiom
  (assert (<= 0 database__account_rec__owner_id__position))

(declare-const database__account_rec__account__first__bit Int)

(declare-const database__account_rec__account__last__bit Int)

(declare-const database__account_rec__account__position Int)

;; database__account_rec__account__first__bit_axiom
  (assert (<= 0 database__account_rec__account__first__bit))

;; database__account_rec__account__last__bit_axiom
  (assert
  (< database__account_rec__account__first__bit database__account_rec__account__last__bit))

;; database__account_rec__account__position_axiom
  (assert (<= 0 database__account_rec__account__position))

(declare-fun user_eq7 (us_rep1 us_rep1) Bool)

(declare-const dummy7 us_rep1)

(declare-datatypes ()
((account_rec__ref (account_rec__refqtmk (account_rec__content us_rep1)))))
(define-fun account_rec__ref_account_rec__content__projection ((a account_rec__ref)) us_rep1 
  (account_rec__content a))

(declare-datatypes ()
((map__ref3 (map__refqtmk3 (map__content3 (Array Int us_rep1))))))
(declare-fun slide3 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_158 Int))
                           (=>
                           (and (<= a__first temp___idx_158)
                           (<= temp___idx_158 a__last))
                           (= (bool_eq4 (select a temp___idx_158)
                              (select b (+ (- b__first a__first) temp___idx_158))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_158 Int))
  (=> (and (<= a__first temp___idx_158) (<= temp___idx_158 a__last))
  (= (bool_eq4 (select a temp___idx_158)
     (select b (+ (- b__first a__first) temp___idx_158))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun belongs_to (Int (Array Int character) (Array Int num)
  (Array Int us_rep1)) Bool)

(declare-fun belongs_to__function_guard (Bool Int (Array Int character)
  (Array Int num) (Array Int us_rep1)) Bool)

;; belongs_to__post_axiom
  (assert true)

;; belongs_to__def_axiom
  (assert
  (forall ((account Int))
  (forall ((customer (Array Int character)))
  (forall ((id (Array Int num)))
  (forall ((database__accounts (Array Int us_rep1)))
  (! (= (= (belongs_to account customer id database__accounts) true)
     (= (bool_eq4 (select database__accounts account)
        (us_repqtmk1 (us_split_fieldsqtmk1 customer id (of_rep account)))) true)) :pattern (
  (belongs_to account customer id database__accounts)) ))))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun max_account_reached (Int) Bool)

(declare-fun max_account_reached__function_guard (Bool Int) Bool)

(declare-fun some_available (Int) Bool)

(declare-fun some_available__function_guard (Bool Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_182 Int)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true)
                                     (<= 0 200000)) (in_range1
                                     temp___expr_182)))

;; max_account_reached__post_axiom
  (assert true)

;; max_account_reached__def_axiom
  (assert
  (forall ((database__availability__first_available Int))
  (! (and
     (forall ((database__availability__first_available1 Int))
     (some_available__function_guard
     (some_available database__availability__first_available1)
     database__availability__first_available1))
     (=
     (= (max_account_reached database__availability__first_available) true)
     (not (= (some_available database__availability__first_available) true)))) :pattern (
  (max_account_reached database__availability__first_available)) )))

(declare-sort cur 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq8 (cur cur) Bool)

(declare-const dummy8 cur)

(declare-datatypes () ((cur__ref (cur__refqtmk (cur__content cur)))))
(define-fun cur__ref_cur__content__projection ((a cur__ref)) cur (cur__content
                                                                 a))

(declare-fun to_rep3 (cur) Int)

(declare-fun of_rep3 (Int) cur)

;; inversion_axiom
  (assert
  (forall ((x cur)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x cur)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort raw_amount 0)

(declare-fun raw_amountqtint (raw_amount) Int)

;; raw_amount'axiom
  (assert
  (forall ((i raw_amount))
  (and (<= 0 (raw_amountqtint i)) (<= (raw_amountqtint i) 1000000))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 1000000)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq9 (raw_amount raw_amount) Bool)

(declare-const dummy9 raw_amount)

(declare-datatypes ()
((raw_amount__ref (raw_amount__refqtmk (raw_amount__content raw_amount)))))
(define-fun raw_amount__ref_raw_amount__content__projection ((a raw_amount__ref)) raw_amount 
  (raw_amount__content a))

(define-fun to_rep4 ((x raw_amount)) Int (raw_amountqtint x))

(declare-fun of_rep4 (Int) raw_amount)

;; inversion_axiom
  (assert
  (forall ((x raw_amount))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x raw_amount)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__money__amount__currency cur)(rec__money__amount__raw raw_amount)))))
(define-fun us_split_fields_rec__money__amount__currency__projection ((a us_split_fields4)) cur 
  (rec__money__amount__currency a))

(define-fun us_split_fields_rec__money__amount__raw__projection ((a us_split_fields4)) raw_amount 
  (rec__money__amount__raw a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq6 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep3
                            (rec__money__amount__currency
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__money__amount__currency
                                                   (us_split_fields5 b))))
                         (= (to_rep4
                            (rec__money__amount__raw (us_split_fields5 a))) 
                         (to_rep4
                         (rec__money__amount__raw (us_split_fields5 b)))))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const money__amount__currency__first__bit Int)

(declare-const money__amount__currency__last__bit Int)

(declare-const money__amount__currency__position Int)

;; money__amount__currency__first__bit_axiom
  (assert (<= 0 money__amount__currency__first__bit))

;; money__amount__currency__last__bit_axiom
  (assert
  (< money__amount__currency__first__bit money__amount__currency__last__bit))

;; money__amount__currency__position_axiom
  (assert (<= 0 money__amount__currency__position))

(declare-const money__amount__raw__first__bit Int)

(declare-const money__amount__raw__last__bit Int)

(declare-const money__amount__raw__position Int)

;; money__amount__raw__first__bit_axiom
  (assert (<= 0 money__amount__raw__first__bit))

;; money__amount__raw__last__bit_axiom
  (assert (< money__amount__raw__first__bit money__amount__raw__last__bit))

;; money__amount__raw__position_axiom
  (assert (<= 0 money__amount__raw__position))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ()
((amount__ref (amount__refqtmk (amount__content us_rep2)))))
(define-fun amount__ref_amount__content__projection ((a amount__ref)) us_rep2 
  (amount__content a))

(declare-datatypes ()
((us_split_fields6
 (us_split_fieldsqtmk3
 (rec__database__account_balance__value us_rep2)(rec__database__account_balance__account ext_account_num)))))
(define-fun us_split_fields_rec__database__account_balance__value__projection ((a us_split_fields6)) us_rep2 
  (rec__database__account_balance__value a))

(define-fun us_split_fields_rec__database__account_balance__account__projection ((a us_split_fields6)) ext_account_num 
  (rec__database__account_balance__account a))

(declare-datatypes ()
((us_split_fields__ref3
 (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq7 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (bool_eq6
                            (rec__database__account_balance__value
                            (us_split_fields7 a))
                            (rec__database__account_balance__value
                            (us_split_fields7 b))) true)
                         (= (to_rep
                            (rec__database__account_balance__account
                            (us_split_fields7 a))) (to_rep
                                                   (rec__database__account_balance__account
                                                   (us_split_fields7 b)))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const database__account_balance__value__first__bit Int)

(declare-const database__account_balance__value__last__bit Int)

(declare-const database__account_balance__value__position Int)

;; database__account_balance__value__first__bit_axiom
  (assert (<= 0 database__account_balance__value__first__bit))

;; database__account_balance__value__last__bit_axiom
  (assert
  (< database__account_balance__value__first__bit database__account_balance__value__last__bit))

;; database__account_balance__value__position_axiom
  (assert (<= 0 database__account_balance__value__position))

(declare-const database__account_balance__account__first__bit Int)

(declare-const database__account_balance__account__last__bit Int)

(declare-const database__account_balance__account__position Int)

;; database__account_balance__account__first__bit_axiom
  (assert (<= 0 database__account_balance__account__first__bit))

;; database__account_balance__account__last__bit_axiom
  (assert
  (< database__account_balance__account__first__bit database__account_balance__account__last__bit))

;; database__account_balance__account__position_axiom
  (assert (<= 0 database__account_balance__account__position))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-const dummy11 us_rep3)

(declare-datatypes ()
((account_balance__ref
 (account_balance__refqtmk (account_balance__content us_rep3)))))
(define-fun account_balance__ref_account_balance__content__projection ((a account_balance__ref)) us_rep3 
  (account_balance__content a))

(declare-datatypes ()
((map__ref4 (map__refqtmk4 (map__content4 (Array Int us_rep3))))))
(declare-fun slide4 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(define-fun bool_eq8 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_171 Int))
                           (=>
                           (and (<= a__first temp___idx_171)
                           (<= temp___idx_171 a__last))
                           (= (bool_eq7 (select a temp___idx_171)
                              (select b (+ (- b__first a__first) temp___idx_171))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_171 Int))
  (=> (and (<= a__first temp___idx_171) (<= temp___idx_171 a__last))
  (= (bool_eq7 (select a temp___idx_171)
     (select b (+ (- b__first a__first) temp___idx_171))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun balance (Int (Array Int us_rep3) (Array Int us_rep)) us_rep2)

(declare-fun balance__function_guard (us_rep2 Int (Array Int us_rep3)
  (Array Int us_rep)) Bool)

;; balance__post_axiom
  (assert
  (forall ((account Int) (database__availability__links (Array Int us_rep)))
  (existing__function_guard (existing account database__availability__links)
  account database__availability__links)))

;; balance__def_axiom
  (assert
  (forall ((account Int))
  (forall ((database__accounts_balance (Array Int us_rep3)))
  (forall ((database__availability__links (Array Int us_rep)))
  (! (=> (dynamic_invariant account true true true true)
     (= (balance account database__accounts_balance
        database__availability__links) (rec__database__account_balance__value
                                       (us_split_fields7
                                       (select database__accounts_balance account))))) :pattern (
  (balance account database__accounts_balance database__availability__links)) )))))

(declare-const customer (Array Int character))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const id (Array Int num))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const cur1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((a us_rep2))
  (! (= (= (is_empty a) true)
     (= (to_rep4 (rec__money__amount__raw (us_split_fields5 a))) 0)) :pattern (
  (is_empty a)) )))

(define-fun dynamic_invariant2 ((temp___expr_319 Int)
  (temp___is_init_315 Bool) (temp___skip_constant_316 Bool)
  (temp___do_toplevel_317 Bool)
  (temp___do_typ_inv_318 Bool)) Bool (=>
                                     (or (= temp___is_init_315 true)
                                     (<= 0 6)) (in_range5 temp___expr_319)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

;; some_available__post_axiom
  (assert true)

;; some_available__def_axiom
  (assert
  (forall ((database__availability__first_available Int))
  (! (= (= (some_available database__availability__first_available) true)
     (not (= database__availability__first_available 0))) :pattern ((some_available
                                                                    database__availability__first_available)) )))

;; is_available__post_axiom
  (assert true)

;; is_available__def_axiom
  (assert
  (forall ((account Int))
  (forall ((database__availability__links (Array Int us_rep)))
  (! (= (= (is_available account database__availability__links) true)
     (= (rec__database__availability__account_link__available
        (us_split_fields1 (select database__availability__links account))) true)) :pattern (
  (is_available account database__availability__links)) ))))

(define-fun dynamic_invariant4 ((temp___expr_249 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (or (= temp___is_init_245 true)
                                     (<= 0 999)) (in_range4 temp___expr_249)))

(define-fun dynamic_invariant5 ((temp___expr_326 Int)
  (temp___is_init_322 Bool) (temp___skip_constant_323 Bool)
  (temp___do_toplevel_324 Bool)
  (temp___do_typ_inv_325 Bool)) Bool (=>
                                     (or (= temp___is_init_322 true)
                                     (<= 0 1000000)) (in_range6
                                     temp___expr_326)))

(declare-const rliteral raw_amount)

;; rliteral_axiom
  (assert (= (raw_amountqtint rliteral) 0))

(declare-const links (Array Int us_rep))

(declare-const accounts (Array Int us_rep1))

(declare-const first_available Int)

(declare-const accounts_balance (Array Int us_rep3))

(declare-const account Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 first_available true false true true))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 cur1 true false true true))

;; Assume
  (assert (dynamic_invariant account false false true true))

;; H
  (assert
  (forall ((first_available1 Int)) (max_account_reached__function_guard
  (max_account_reached first_available1) first_available1)))

;; Assume
  (assert (not (= (max_account_reached first_available) true)))

(declare-const links1 (Array Int us_rep))

(declare-const accounts1 (Array Int us_rep1))

(declare-const accounts_balance1 (Array Int us_rep3))

(declare-const account1 Int)

;; H
  (assert
  (forall ((first_available1 Int)) (some_available__function_guard
  (some_available first_available1) first_available1)))

;; H
  (assert
  (forall ((links2 (Array Int us_rep)) (account2 Int))
  (is_available__function_guard (is_available account2 links2) account2
  links2)))

;; H
  (assert (max_account_reached__function_guard
  (max_account_reached first_available) first_available))

;; H
  (assert
  (= (= (max_account_reached first_available) true)
  (not (= (some_available first_available) true))))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (max_account_reached first_available)))

(declare-const links2 (Array Int us_rep))

(declare-const first_available1 Int)

(declare-const o ext_account_num)

(declare-const o1 ext_account_num)

(declare-const o2 cur)

;; H
  (assert
  (ite (= spark__branch true)
  (and
  (and (and (= account1 200000) (= links1 links)) (= accounts1 accounts))
  (= accounts_balance1 accounts_balance))
  (and (= links2 links)
  (and
  (and
  (and (not (= (is_available account1 links1) true))
  (forall ((act Int))
  (=> (and (<= 1 act) (<= act 200000))
  (=> (not (= act account1))
  (=
  (= (rec__database__availability__account_link__available
     (us_split_fields1 (select links1 act))) true)
  (= (rec__database__availability__account_link__available
     (us_split_fields1 (select links2 act))) true))))))
  (and (dynamic_invariant account1 true true true true) (dynamic_invariant1
  first_available1 true true true true)))
  (and (= (to_rep o) account1)
  (and
  (= accounts1 (store accounts account1 (us_repqtmk1
                                        (us_split_fieldsqtmk1 customer id o))))
  (and (= (to_rep o1) account1)
  (and (= (to_rep3 o2) cur1)
  (= accounts_balance1 (store accounts_balance account1 (us_repqtmk3
                                                        (us_split_fieldsqtmk3
                                                        (us_repqtmk2
                                                        (us_split_fieldsqtmk2
                                                        o2 rliteral)) 
                                                        o1))))))))))))

(define-fun o3 () Bool (existing account1 links1))

;; H
  (assert
  (forall ((links3 (Array Int us_rep)) (account2 Int))
  (is_available__function_guard (is_available account2 links3) account2
  links3)))

;; H
  (assert (existing__function_guard o3 account1 links1))

;; H
  (assert (= (= o3 true) (not (= (is_available account1 links1) true))))

(define-fun o4 () Bool (ite (= o3 true)
                       (belongs_to account1 customer id accounts1) false))

;; H
  (assert
  (or (not (= o3 true))
  (let ((o5 id))
  (let ((o6 customer))
  (and (belongs_to__function_guard o4 account1 o6 o5 accounts1)
  (= (= o4 true)
  (= (bool_eq4 (select accounts1 account1)
     (us_repqtmk1 (us_split_fieldsqtmk1 o6 o5 (of_rep account1)))) true)))))))

;; H
  (assert (= o4 true))

;; H
  (assert
  (forall ((links3 (Array Int us_rep)) (account2 Int))
  (existing__function_guard (existing account2 links3) account2 links3)))

(assert
;; defqtvc
 ;; File "database.ads", line 44, characters 0-0
  (not (= (existing account1 links1) true)))
(check-sat)

(exit)
