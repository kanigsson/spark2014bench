(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun nth2 ((_ BitVec 8) Int) Bool)

(declare-fun lsr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl2 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right3 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left3 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun to_int3 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv2 ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (t__refqtmk2 (t__content2 (_ BitVec 8))))))
(declare-fun power2 ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(declare-sort unsigned8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned8 unsigned8) Bool)

(declare-const dummy unsigned8)

(declare-datatypes ()
((unsigned8__ref (unsigned8__refqtmk (unsigned8__content unsigned8)))))
(define-fun unsigned8__ref_unsigned8__content__projection ((a unsigned8__ref)) unsigned8 
  (unsigned8__content a))

(declare-fun to_rep (unsigned8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) unsigned8)

;; inversion_axiom
  (assert
  (forall ((x unsigned8))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int4 ((x unsigned8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned8)) (! (uint_in_range2
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array (_ BitVec 64) unsigned8))))))
(declare-fun slide ((Array (_ BitVec 64) unsigned8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) unsigned8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 64) unsigned8))
  (a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b (Array (_ BitVec 64) unsigned8)) (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_154 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_154)
                                     (bvule temp___idx_154 a__last))
                                     (= (to_rep (select a temp___idx_154)) 
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) unsigned8))
  (b (Array (_ BitVec 64) unsigned8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun edi ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edi__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned64 unsigned64) Bool)

(declare-const dummy1 unsigned64)

(declare-datatypes ()
((unsigned64__ref (unsigned64__refqtmk (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref_unsigned64__content__projection ((a unsigned64__ref)) unsigned64 
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_172 (_ BitVec 64))
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool) (temp___do_typ_inv_171 Bool)) Bool true)

(declare-sort unsigned32 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 32))

(declare-fun user_eq2 (unsigned32 unsigned32) Bool)

(declare-const dummy2 unsigned32)

(declare-datatypes ()
((unsigned32__ref (unsigned32__refqtmk (unsigned32__content unsigned32)))))
(define-fun unsigned32__ref_unsigned32__content__projection ((a unsigned32__ref)) unsigned32 
  (unsigned32__content a))

(define-fun dynamic_invariant1 ((temp___expr_193 (_ BitVec 32))
  (temp___is_init_189 Bool) (temp___skip_constant_190 Bool)
  (temp___do_toplevel_191 Bool) (temp___do_typ_inv_192 Bool)) Bool true)

;; edi__post_axiom
  (assert
  (forall ((x86__rdi (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdi true true true true)
     (let ((result (edi x86__rdi)))
     (=> (edi__function_guard result x86__rdi)
     (and (= result ((_ extract 31 0) (bvand x86__rdi #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((edi
                                                                    x86__rdi)) )))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun nth3 ((_ BitVec 16) Int) Bool)

(declare-fun lsr3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl3 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right4 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left4 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int5 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv3 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (t__refqtmk3 (t__content3 (_ BitVec 16))))))
(declare-fun power3 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min3 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun readmem16 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 16))

(declare-fun readmem16__function_guard ((_ BitVec 16) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

(declare-fun readmem32 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 32))

(declare-fun readmem32__function_guard ((_ BitVec 32) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem32__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem32 addr x86__memory)))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem16__function_guard (readmem16 addr1 x86__memory1) addr1
     x86__memory1))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem16__function_guard
     (readmem16 (bvadd addr1 #x0000000000000002) x86__memory1)
     (bvadd addr1 #x0000000000000002) x86__memory1))
     (=> (readmem32__function_guard result addr x86__memory)
     (and
     (and
     (= result (bvadd ((_ zero_extend 16) (readmem16 addr x86__memory)) (bvmul ((_ zero_extend 16) 
     (readmem16 (bvadd addr #x0000000000000002) x86__memory)) #x00010000)))
     (bvuge result #x00000000)) (dynamic_invariant1 result true false true
     true))))))) :pattern ((readmem32 addr x86__memory)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun eax ((_ BitVec 64)) (_ BitVec 32))

(declare-fun eax__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; eax__post_axiom
  (assert
  (forall ((x86__rax (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rax true true true true)
     (let ((result (eax x86__rax)))
     (=> (eax__function_guard result x86__rax)
     (and (= result ((_ extract 31 0) (bvand x86__rax #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((eax
                                                                    x86__rax)) )))

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun edx ((_ BitVec 64)) (_ BitVec 32))

(declare-fun edx__function_guard ((_ BitVec 32) (_ BitVec 64)) Bool)

;; edx__post_axiom
  (assert
  (forall ((x86__rdx (_ BitVec 64)))
  (! (=> (dynamic_invariant x86__rdx true true true true)
     (let ((result (edx x86__rdx)))
     (=> (edx__function_guard result x86__rdx)
     (and (= result ((_ extract 31 0) (bvand x86__rdx #x00000000FFFFFFFF)))
     (dynamic_invariant1 result true false true true))))) :pattern ((edx
                                                                    x86__rdx)) )))

(declare-fun readmem64 ((_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) (_ BitVec 64))

(declare-fun readmem64__function_guard ((_ BitVec 64) (_ BitVec 64)
  (Array (_ BitVec 64) unsigned8)) Bool)

;; readmem64__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem64 addr x86__memory)))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem32__function_guard (readmem32 addr1 x86__memory1) addr1
     x86__memory1))
     (and
     (forall ((addr1 (_ BitVec 64))
     (x86__memory1 (Array (_ BitVec 64) unsigned8)))
     (readmem32__function_guard
     (readmem32 (bvadd addr1 #x0000000000000004) x86__memory1)
     (bvadd addr1 #x0000000000000004) x86__memory1))
     (=> (readmem64__function_guard result addr x86__memory)
     (and
     (and
     (= result (bvadd ((_ zero_extend 32) (readmem32 addr x86__memory)) (bvmul ((_ zero_extend 32) 
     (readmem32 (bvadd addr #x0000000000000004) x86__memory)) #x0000000100000000)))
     (bvuge result #x0000000000000000)) (dynamic_invariant result true false
     true true))))))) :pattern ((readmem64 addr x86__memory)) ))))

(declare-sort unsigned641 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE4 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (unsigned641 unsigned641) Bool)

(declare-const dummy3 unsigned641)

(declare-datatypes ()
((unsigned64__ref1 (unsigned64__refqtmk1 (unsigned64__content1 unsigned641)))))
(define-fun unsigned64__ref_unsigned64__content__2__projection ((a unsigned64__ref1)) unsigned641 
  (unsigned64__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_179 (_ BitVec 64))
  (temp___is_init_175 Bool) (temp___skip_constant_176 Bool)
  (temp___do_toplevel_177 Bool) (temp___do_typ_inv_178 Bool)) Bool true)

(declare-sort unsigned16 0)

(declare-const attr__ATTRIBUTE_MODULUS4 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 16))

(declare-fun user_eq4 (unsigned16 unsigned16) Bool)

(declare-const dummy4 unsigned16)

(declare-datatypes ()
((unsigned16__ref (unsigned16__refqtmk (unsigned16__content unsigned16)))))
(define-fun unsigned16__ref_unsigned16__content__projection ((a unsigned16__ref)) unsigned16 
  (unsigned16__content a))

(define-fun dynamic_invariant3 ((temp___expr_246 (_ BitVec 16))
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool) (temp___do_typ_inv_245 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_216 (_ BitVec 8))
  (temp___is_init_212 Bool) (temp___skip_constant_213 Bool)
  (temp___do_toplevel_214 Bool) (temp___do_typ_inv_215 Bool)) Bool true)

;; readmem16__post_axiom
  (assert
  (forall ((addr (_ BitVec 64)))
  (forall ((x86__memory (Array (_ BitVec 64) unsigned8)))
  (! (=> (dynamic_invariant addr true true true true)
     (let ((result (readmem16 addr x86__memory)))
     (=> (readmem16__function_guard result addr x86__memory)
     (and
     (and
     (= result (bvadd ((_ zero_extend 8) (to_rep (select x86__memory addr))) (bvmul ((_ zero_extend 8) 
     (to_rep (select x86__memory (bvadd addr #x0000000000000001)))) #x0100)))
     (bvuge result #x0000)) (dynamic_invariant3 result true false true true))))) :pattern (
  (readmem16 addr x86__memory)) ))))

(declare-const rsp (_ BitVec 64))

(declare-const rbp (_ BitVec 64))

(declare-const memory (Array (_ BitVec 64) unsigned8))

(declare-const rdi (_ BitVec 64))

(declare-const rsi (_ BitVec 64))

(declare-const rax (_ BitVec 64))

(declare-const rdx (_ BitVec 64))

(declare-const rsp1 (_ BitVec 64))

;; H
  (assert (= rsp1 rsp))

;; Assume
  (assert (dynamic_invariant rax true false true true))

;; Assume
  (assert (dynamic_invariant rdx true false true true))

;; Assume
  (assert (dynamic_invariant rsp true false true true))

;; Assume
  (assert (dynamic_invariant rbp true false true true))

;; Assume
  (assert (dynamic_invariant rsi true false true true))

;; Assume
  (assert (dynamic_invariant rdi true false true true))

;; Assume
  (assert true)

;; Ensures
  (assert true)

(declare-const saversp (_ BitVec 64))

;; H
  (assert (= saversp rsp))

;; Assume
  (assert (dynamic_invariant2 saversp true false true true))

(define-fun o () (_ BitVec 64) (bvsub rsp #x0000000000000008))

(declare-const memory1 (Array (_ BitVec 64) unsigned8))

;; H
  (assert (= memory1 memory))

(declare-const memory2 (Array (_ BitVec 64) unsigned8))

;; H
  (assert
  (= (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd (bvadd ((_ zero_extend 56) 
  (to_rep (select memory2 o))) (bvmul ((_ zero_extend 56) (to_rep
                                                          (select memory2 (bvadd 
                                                          o #x0000000000000001)))) #x0000000000000100)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000002)))) #x0000000000010000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000003)))) #x0000000001000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000004)))) #x0000000100000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000005)))) #x0000010000000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000006)))) #x0001000000000000)) (bvmul ((_ zero_extend 56) 
  (to_rep (select memory2 (bvadd o #x0000000000000007)))) #x0100000000000000)) 
  rbp))

;; H
  (assert
  (forall ((i (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 i) (bvule i #xFFFFFFFFFFFFFFFF))
  (=>
  (and
  (and
  (and
  (and
  (and
  (and (and (not (= i o)) (not (= i (bvadd o #x0000000000000001))))
  (not (= i (bvadd o #x0000000000000002))))
  (not (= i (bvadd o #x0000000000000003))))
  (not (= i (bvadd o #x0000000000000004))))
  (not (= i (bvadd o #x0000000000000005))))
  (not (= i (bvadd o #x0000000000000006))))
  (not (= i (bvadd o #x0000000000000007))))
  (= (to_rep (select memory2 i)) (to_rep (select memory1 i)))))))

;; H
  (assert true)

(declare-const rsp2 (_ BitVec 64))

;; H
  (assert (= rsp2 (bvsub rsp #x0000000000000008)))

(assert
;; defqtvc
 ;; File "simple1_zstspark.ads", line 12, characters 0-0
  (not (= rsp2 (bvsub saversp #x0000000000000008))))
(check-sat)
