(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-datatypes ()
((us_split_discrs (us_split_discrsqtmk (rec__default_init__discr__b Bool)))))
(define-fun us_split_discrs_rec__default_init__discr__b__projection ((a us_split_discrs)) Bool 
  (rec__default_init__discr__b a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__default_init__discr__f natural)))))
(define-fun us_split_fields_rec__default_init__discr__f__projection ((a us_split_fields)) natural 
  (rec__default_init__discr__f a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun default_init__discr__f__pred ((a us_rep)) Bool (= (ite (rec__default_init__discr__b
                                                                   (us_split_discrs1
                                                                   a)) 1 0) 1))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__default_init__discr__b
                                (us_split_discrs1 a)) 1 0) (ite (rec__default_init__discr__b
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (=> (default_init__discr__f__pred a)
                        (= (to_rep
                           (rec__default_init__discr__f (us_split_fields1 a))) 
                        (to_rep
                        (rec__default_init__discr__f (us_split_fields1 b))))))
                   true false))

(define-fun in_range2 ((rec__default_init__discr__b1 Bool)
  (a us_split_discrs)) Bool (= rec__default_init__discr__b1 (rec__default_init__discr__b
                                                            a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const default_init__discr__b__first__bit Int)

(declare-const default_init__discr__b__last__bit Int)

(declare-const default_init__discr__b__position Int)

;; default_init__discr__b__first__bit_axiom
  (assert (<= 0 default_init__discr__b__first__bit))

;; default_init__discr__b__last__bit_axiom
  (assert
  (< default_init__discr__b__first__bit default_init__discr__b__last__bit))

;; default_init__discr__b__position_axiom
  (assert (<= 0 default_init__discr__b__position))

(declare-const default_init__discr__f__first__bit Int)

(declare-const default_init__discr__f__last__bit Int)

(declare-const default_init__discr__f__position Int)

;; default_init__discr__f__first__bit_axiom
  (assert (<= 0 default_init__discr__f__first__bit))

;; default_init__discr__f__last__bit_axiom
  (assert
  (< default_init__discr__f__first__bit default_init__discr__f__last__bit))

;; default_init__discr__f__position_axiom
  (assert (<= 0 default_init__discr__f__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((discr__ref (discr__refqtmk (discr__content us_rep)))))
(define-fun discr__ref_discr__content__projection ((a discr__ref)) us_rep 
  (discr__content a))

(declare-fun discr_ok (us_rep) Bool)

(declare-fun discr_ok__function_guard (Bool us_rep) Bool)

;; discr_ok__post_axiom
  (assert true)

;; discr_ok__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (discr_ok x) true)
     (=> (= (rec__default_init__discr__b (us_split_discrs1 x)) true)
     (= (to_rep (rec__default_init__discr__f (us_split_fields1 x))) 0))) :pattern (
  (discr_ok x)) )))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-const usf us_rep)

;; H
  (assert
  (forall ((usf1 us_rep)) (discr_ok__function_guard (discr_ok usf1) usf1)))

;; H
  (assert true)

;; H
  (assert
  (=> (default_init__discr__f__pred usf)
  (= (to_rep (rec__default_init__discr__f (us_split_fields1 usf))) 0)))

;; H
  (assert true)

;; H
  (assert
  (forall ((usf1 us_rep)) (discr_ok__function_guard (discr_ok usf1) usf1)))

(assert
;; defqtvc
 ;; File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-N715-017__default_init_cond-15469/src/gnatprove/default_init__discr.mlw", line 401, characters 5-8
  (not (= (discr_ok usf) true)))
(check-sat)

(exit)
