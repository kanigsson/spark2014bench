(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-fun r_1 (Bool Bool Bool) Bool)

(declare-fun r_1__function_guard (Bool Bool Bool Bool) Bool)

;; r_1__post_axiom
  (assert true)

;; r_1__def_axiom
  (assert
  (forall ((seta Bool) (a Bool) (b Bool))
  (! (= (= (r_1 seta a b) true)
     (=> (and (= seta true) (not (= b true))) (= a true))) :pattern (
  (r_1 seta a b)) )))

(declare-const seta Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const setb Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const c Bool)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-fun boolean_to_unsigned_8 (Bool) (_ BitVec 8))

(declare-fun boolean_to_unsigned_8__function_guard ((_ BitVec 8) Bool) Bool)

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 8))

(declare-fun user_eq (unsigned_8 unsigned_8) Bool)

(declare-const dummy unsigned_8)

(declare-datatypes ()
((unsigned_8__ref (unsigned_8__refqtmk (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref_unsigned_8__content__projection ((a unsigned_8__ref)) unsigned_8 
  (unsigned_8__content a))

(define-fun dynamic_invariant ((temp___expr_177 (_ BitVec 8))
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool) (temp___do_typ_inv_176 Bool)) Bool true)

;; boolean_to_unsigned_8__post_axiom
  (assert
  (forall ((b Bool))
  (! (let ((result (boolean_to_unsigned_8 b)))
     (=> (boolean_to_unsigned_8__function_guard result b) (dynamic_invariant
     result true false true true))) :pattern ((boolean_to_unsigned_8 b)) )))

;; boolean_to_unsigned_8__def_axiom
  (assert
  (forall ((b Bool))
  (! (= (boolean_to_unsigned_8 b) (ite (= b true) #x01 #x00)) :pattern (
  (boolean_to_unsigned_8 b)) )))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_162 Int))
                           (=>
                           (and (<= a__first temp___idx_162)
                           (<= temp___idx_162 a__last))
                           (= (ite (select a temp___idx_162) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_162)) 1 0)))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_162 Int))
  (=> (and (<= a__first temp___idx_162) (<= temp___idx_162 a__last))
  (= (ite (select a temp___idx_162) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_162)) 1 0)))))))))

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (map__refqtmk1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) Bool)

(declare-fun set (map1 Int Int Bool) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a Bool))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a Bool))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide1 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq1 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_163 Int)
                             (temp___idx_164 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_163)
                             (<= temp___idx_163 a__last))
                             (and (<= a__first_2 temp___idx_164)
                             (<= temp___idx_164 a__last_2)))
                             (= (ite (get a temp___idx_163 temp___idx_164) 1 0) (ite 
                             (get b (+ (- b__first a__first) temp___idx_163)
                             (+ (- b__first_2 a__first_2) temp___idx_164)) 1 0)))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq1 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_163 Int) (temp___idx_164 Int))
  (=>
  (and (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last))
  (and (<= a__first_2 temp___idx_164) (<= temp___idx_164 a__last_2)))
  (= (ite (get a temp___idx_163 temp___idx_164) 1 0) (ite (get b
                                                          (+ (- b__first a__first) temp___idx_163)
                                                          (+ (- b__first_2 a__first_2) temp___idx_164)) 1 0)))))))))

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-const attr__ATTRIBUTE_ADDRESS19 Int)

(declare-sort boolean_array_8_2_range_1 0)

(declare-fun boolean_array_8_2_range_1qtint (boolean_array_8_2_range_1) Int)

;; boolean_array_8_2_range_1'axiom
  (assert
  (forall ((i boolean_array_8_2_range_1))
  (and (<= 1 (boolean_array_8_2_range_1qtint i))
  (<= (boolean_array_8_2_range_1qtint i) 8))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (boolean_array_8_2_range_1
  boolean_array_8_2_range_1) Bool)

(declare-const dummy1 boolean_array_8_2_range_1)

(declare-datatypes ()
((boolean_array_8_2_range_1__ref
 (boolean_array_8_2_range_1__refqtmk
 (boolean_array_8_2_range_1__content boolean_array_8_2_range_1)))))
(define-fun boolean_array_8_2_range_1__ref_boolean_array_8_2_range_1__content__projection ((a boolean_array_8_2_range_1__ref)) boolean_array_8_2_range_1 
  (boolean_array_8_2_range_1__content a))

(declare-fun finnuc__comp__mux_out1__aggregate_def (Bool) (Array Int Bool))

(declare-fun finnuc__comp__mux_out1_1__aggregate_def (Bool) (Array Int Bool))

(declare-fun finnuc__comp__logic_table__aggregate_def (Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

(declare-fun finnuc__comp__logic_table_1__aggregate_def (Bool Bool Bool Bool
  Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool) map1)

;; def_axiom
  (assert
  (forall ((temp___224 Bool))
  (forall ((temp___225 Int))
  (= (select (finnuc__comp__mux_out1__aggregate_def temp___224) temp___225) temp___224))))

;; def_axiom
  (assert
  (forall ((temp___227 Bool))
  (forall ((temp___228 Int))
  (= (select (finnuc__comp__mux_out1_1__aggregate_def temp___227) temp___228) temp___227))))

;; def_axiom
  (assert
  (forall ((temp___230 Bool) (temp___231 Bool) (temp___232 Bool)
  (temp___233 Bool) (temp___234 Bool) (temp___235 Bool) (temp___236 Bool)
  (temp___237 Bool) (temp___238 Bool) (temp___239 Bool) (temp___240 Bool)
  (temp___241 Bool) (temp___242 Bool) (temp___243 Bool) (temp___244 Bool)
  (temp___245 Bool))
  (let ((temp___229 (finnuc__comp__logic_table__aggregate_def temp___230
                    temp___231 temp___232 temp___233 temp___234 temp___235
                    temp___236 temp___237 temp___238 temp___239 temp___240
                    temp___241 temp___242 temp___243 temp___244 temp___245)))
  (and
  (and
  (and (= (get temp___229 1 1) temp___230)
  (= (get temp___229 1 2) temp___231))
  (and (= (get temp___229 2 1) temp___232)
  (= (get temp___229 2 2) temp___233)))
  (and
  (and
  (and
  (and (= (get temp___229 3 1) temp___234)
  (= (get temp___229 3 2) temp___235))
  (and (= (get temp___229 4 1) temp___236)
  (= (get temp___229 4 2) temp___237)))
  (and (= (get temp___229 5 1) temp___238)
  (= (get temp___229 5 2) temp___239)))
  (and
  (and
  (and (= (get temp___229 6 1) temp___240)
  (= (get temp___229 6 2) temp___241))
  (and (= (get temp___229 7 1) temp___242)
  (= (get temp___229 7 2) temp___243)))
  (and (= (get temp___229 8 1) temp___244)
  (= (get temp___229 8 2) temp___245))))))))

;; def_axiom
  (assert
  (forall ((temp___249 Bool) (temp___250 Bool) (temp___251 Bool)
  (temp___252 Bool) (temp___253 Bool) (temp___254 Bool) (temp___255 Bool)
  (temp___256 Bool) (temp___257 Bool) (temp___258 Bool) (temp___259 Bool)
  (temp___260 Bool) (temp___261 Bool) (temp___262 Bool) (temp___263 Bool)
  (temp___264 Bool))
  (let ((temp___248 (finnuc__comp__logic_table_1__aggregate_def temp___249
                    temp___250 temp___251 temp___252 temp___253 temp___254
                    temp___255 temp___256 temp___257 temp___258 temp___259
                    temp___260 temp___261 temp___262 temp___263 temp___264)))
  (and
  (and
  (and (= (get temp___248 1 1) temp___249)
  (= (get temp___248 1 2) temp___250))
  (and (= (get temp___248 2 1) temp___251)
  (= (get temp___248 2 2) temp___252)))
  (and
  (and
  (and
  (and (= (get temp___248 3 1) temp___253)
  (= (get temp___248 3 2) temp___254))
  (and (= (get temp___248 4 1) temp___255)
  (= (get temp___248 4 2) temp___256)))
  (and (= (get temp___248 5 1) temp___257)
  (= (get temp___248 5 2) temp___258)))
  (and
  (and
  (and (= (get temp___248 6 1) temp___259)
  (= (get temp___248 6 2) temp___260))
  (and (= (get temp___248 7 1) temp___261)
  (= (get temp___248 7 2) temp___262)))
  (and (= (get temp___248 8 1) temp___263)
  (= (get temp___248 8 2) temp___264))))))))

(define-fun dynamic_invariant1 ((temp___expr_201 Int)
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)
  (temp___do_typ_inv_200 Bool)) Bool (=>
                                     (or (= temp___is_init_197 true)
                                     (<= 1 8)) (in_range1 temp___expr_201)))

(declare-const unit_delay_memory Bool)

(declare-const memory_memory Bool)

(declare-const memory_memory_1 Bool)

(declare-const logic_index (_ BitVec 8))

(declare-const logic_index_1 (_ BitVec 8))

(declare-const mux_out1 (Array Int Bool))

;; H
  (assert
  (= mux_out1 (finnuc__comp__mux_out1__aggregate_def (distinct 0 0))))

;; Assume
  (assert true)

(declare-const mux_out1_1 (Array Int Bool))

;; H
  (assert
  (= mux_out1_1 (finnuc__comp__mux_out1_1__aggregate_def (distinct 0 0))))

;; Assume
  (assert true)

(declare-const logic_table map1)

;; H
  (assert
  (= logic_table (finnuc__comp__logic_table__aggregate_def (distinct 0 0)
                 (distinct 1 0) (distinct 1 0) (distinct 0 0) (distinct 0 0)
                 (distinct 1 0) (distinct 0 0) (distinct 1 0) (distinct 1 0)
                 (distinct 0 0) (distinct 1 0) (distinct 0 0) (distinct 0 0)
                 (distinct 0 0) (distinct 0 0) (distinct 0 0))))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant logic_index false false true true))

(declare-const logic_table_1 map1)

;; H
  (assert
  (= logic_table_1 (finnuc__comp__logic_table_1__aggregate_def (distinct 0 0)
                   (distinct 1 0) (distinct 1 0) (distinct 0 0)
                   (distinct 0 0) (distinct 1 0) (distinct 0 0)
                   (distinct 1 0) (distinct 1 0) (distinct 0 0)
                   (distinct 1 0) (distinct 0 0) (distinct 0 0)
                   (distinct 0 0) (distinct 0 0) (distinct 0 0))))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant logic_index_1 false false true true))

(declare-const logical_operator1_out1 Bool)

;; H
  (assert
  (= logical_operator1_out1 (ite (= (ite (= unit_delay_memory true) c false) true)
                            true setb)))

(declare-const mux_out11 (Array Int Bool))

;; H
  (assert (= mux_out11 (store mux_out1 1 seta)))

(declare-const mux_out12 (Array Int Bool))

;; H
  (assert (= mux_out12 (store mux_out11 2 logical_operator1_out1)))

(declare-const mux_out13 (Array Int Bool))

;; H
  (assert (= mux_out13 (store mux_out12 3 memory_memory)))

(define-fun o () Bool (select mux_out13 3))

(define-fun o1 () (_ BitVec 8) (boolean_to_unsigned_8 o))

;; H
  (assert (boolean_to_unsigned_8__function_guard o1 o))

;; H
  (assert (dynamic_invariant o1 true false true true))

;; H
  (assert (= o1 (ite (= o true) #x01 #x00)))

(define-fun o2 () Bool (select mux_out13 2))

(define-fun o3 () (_ BitVec 8) (boolean_to_unsigned_8 o2))

;; H
  (assert (boolean_to_unsigned_8__function_guard o3 o2))

;; H
  (assert (dynamic_invariant o3 true false true true))

;; H
  (assert (= o3 (ite (= o2 true) #x01 #x00)))

(define-fun o4 () Bool (select mux_out13 1))

(define-fun o5 () (_ BitVec 8) (boolean_to_unsigned_8 o4))

;; H
  (assert (boolean_to_unsigned_8__function_guard o5 o4))

;; H
  (assert (dynamic_invariant o5 true false true true))

;; H
  (assert (= o5 (ite (= o4 true) #x01 #x00)))

(declare-const logic_index1 (_ BitVec 8))

;; H
  (assert
  (= logic_index1 (bvadd (bvadd (bvmul o5 #x04) (bvmul o3 #x02)) (bvmul 
  o1 #x01))))

(define-fun temp___267 () Int (+ (bv2int logic_index1) 1))

;; Assert
  (assert (and (<= 1 temp___267) (<= temp___267 8)))

(declare-const demux_out1 Bool)

;; H
  (assert (= demux_out1 (get logic_table temp___267 1)))

(define-fun temp___268 () Int (+ (bv2int logic_index1) 1))

;; Assert
  (assert (and (<= 1 temp___268) (<= temp___268 8)))

(declare-const a Bool)

;; H
  (assert (= a demux_out1))

(declare-const mux_out1_11 (Array Int Bool))

;; H
  (assert (= mux_out1_11 (store mux_out1_1 1 logical_operator1_out1)))

(declare-const o6 Bool)

;; H
  (assert
  (ite (= seta true) (= o6 (ite (= c true) false true)) (= o6 false)))

(declare-const mux_out1_12 (Array Int Bool))

;; H
  (assert (= mux_out1_12 (store mux_out1_11 2 o6)))

(declare-const mux_out1_13 (Array Int Bool))

;; H
  (assert (= mux_out1_13 (store mux_out1_12 3 memory_memory_1)))

(define-fun o7 () Bool (select mux_out1_13 3))

(define-fun o8 () (_ BitVec 8) (boolean_to_unsigned_8 o7))

;; H
  (assert (boolean_to_unsigned_8__function_guard o8 o7))

;; H
  (assert (dynamic_invariant o8 true false true true))

;; H
  (assert (= o8 (ite (= o7 true) #x01 #x00)))

(define-fun o9 () Bool (select mux_out1_13 2))

(define-fun o10 () (_ BitVec 8) (boolean_to_unsigned_8 o9))

;; H
  (assert (boolean_to_unsigned_8__function_guard o10 o9))

;; H
  (assert (dynamic_invariant o10 true false true true))

;; H
  (assert (= o10 (ite (= o9 true) #x01 #x00)))

(define-fun o11 () Bool (select mux_out1_13 1))

(define-fun o12 () (_ BitVec 8) (boolean_to_unsigned_8 o11))

;; H
  (assert (boolean_to_unsigned_8__function_guard o12 o11))

;; H
  (assert (dynamic_invariant o12 true false true true))

;; H
  (assert (= o12 (ite (= o11 true) #x01 #x00)))

(declare-const logic_index_11 (_ BitVec 8))

;; H
  (assert
  (= logic_index_11 (bvadd (bvadd (bvmul o12 #x04) (bvmul o10 #x02)) (bvmul 
  o8 #x01))))

(define-fun temp___269 () Int (+ (bv2int logic_index_11) 1))

;; Assert
  (assert (and (<= 1 temp___269) (<= temp___269 8)))

(declare-const demux_out1_1 Bool)

;; H
  (assert (= demux_out1_1 (get logic_table_1 temp___269 1)))

(define-fun temp___270 () Int (+ (bv2int logic_index_11) 1))

(assert
;; defqtvc
 ;; File "finnuc.ads", line 45, characters 0-0
  (not (<= 1 temp___270)))
(check-sat)
