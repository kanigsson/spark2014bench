(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort x_coord 0)

(declare-fun x_coordqtint (x_coord) Int)

;; x_coord'axiom
  (assert
  (forall ((i x_coord))
  (and (<= 1 (x_coordqtint i)) (<= (x_coordqtint i) 8))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 8)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (x_coord x_coord) Bool)

(declare-const dummy x_coord)

(declare-datatypes ()
((x_coord__ref (x_coord__refqtmk (x_coord__content x_coord)))))
(define-fun x_coord__ref_x_coord__content__projection ((a x_coord__ref)) x_coord 
  (x_coord__content a))

(define-fun to_rep ((x x_coord)) Int (x_coordqtint x))

(declare-fun of_rep (Int) x_coord)

;; inversion_axiom
  (assert
  (forall ((x x_coord)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x x_coord)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort y_coord 0)

(declare-fun y_coordqtint (y_coord) Int)

;; y_coord'axiom
  (assert
  (forall ((i y_coord))
  (and (<= 1 (y_coordqtint i)) (<= (y_coordqtint i) 16))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (y_coord y_coord) Bool)

(declare-const dummy1 y_coord)

(declare-datatypes ()
((y_coord__ref (y_coord__refqtmk (y_coord__content y_coord)))))
(define-fun y_coord__ref_y_coord__content__projection ((a y_coord__ref)) y_coord 
  (y_coord__content a))

(define-fun to_rep1 ((x y_coord)) Int (y_coordqtint x))

(declare-fun of_rep1 (Int) y_coord)

;; inversion_axiom
  (assert
  (forall ((x y_coord))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x y_coord)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort piece_type 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (piece_type piece_type) Bool)

(declare-const dummy2 piece_type)

(declare-datatypes ()
((piece_type__ref (piece_type__refqtmk (piece_type__content piece_type)))))
(define-fun piece_type__ref_piece_type__content__projection ((a piece_type__ref)) piece_type 
  (piece_type__content a))

(declare-fun to_rep2 (piece_type) Int)

(declare-fun of_rep2 (Int) piece_type)

;; inversion_axiom
  (assert
  (forall ((x piece_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x piece_type)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__tetris__piece__kind piece_type)(rec__tetris__piece__y y_coord)(rec__tetris__piece__x x_coord)))))
(define-fun us_split_fields_rec__tetris__piece__kind__projection ((a us_split_fields)) piece_type 
  (rec__tetris__piece__kind a))

(define-fun us_split_fields_rec__tetris__piece__y__projection ((a us_split_fields)) y_coord 
  (rec__tetris__piece__y a))

(define-fun us_split_fields_rec__tetris__piece__x__projection ((a us_split_fields)) x_coord 
  (rec__tetris__piece__x a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep2
                           (rec__tetris__piece__kind (us_split_fields1 a))) 
                        (to_rep2
                        (rec__tetris__piece__kind (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__tetris__piece__y (us_split_fields1 a))) 
                        (to_rep1
                        (rec__tetris__piece__y (us_split_fields1 b)))))
                        (= (to_rep
                           (rec__tetris__piece__x (us_split_fields1 a))) 
                        (to_rep (rec__tetris__piece__x (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const tetris__piece__kind__first__bit Int)

(declare-const tetris__piece__kind__last__bit Int)

(declare-const tetris__piece__kind__position Int)

;; tetris__piece__kind__first__bit_axiom
  (assert (<= 0 tetris__piece__kind__first__bit))

;; tetris__piece__kind__last__bit_axiom
  (assert (< tetris__piece__kind__first__bit tetris__piece__kind__last__bit))

;; tetris__piece__kind__position_axiom
  (assert (<= 0 tetris__piece__kind__position))

(declare-const tetris__piece__y__first__bit Int)

(declare-const tetris__piece__y__last__bit Int)

(declare-const tetris__piece__y__position Int)

;; tetris__piece__y__first__bit_axiom
  (assert (<= 0 tetris__piece__y__first__bit))

;; tetris__piece__y__last__bit_axiom
  (assert (< tetris__piece__y__first__bit tetris__piece__y__last__bit))

;; tetris__piece__y__position_axiom
  (assert (<= 0 tetris__piece__y__position))

(declare-const tetris__piece__x__first__bit Int)

(declare-const tetris__piece__x__last__bit Int)

(declare-const tetris__piece__x__position Int)

;; tetris__piece__x__first__bit_axiom
  (assert (<= 0 tetris__piece__x__first__bit))

;; tetris__piece__x__last__bit_axiom
  (assert (< tetris__piece__x__first__bit tetris__piece__x__last__bit))

;; tetris__piece__x__position_axiom
  (assert (<= 0 tetris__piece__x__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((piece__ref (piece__refqtmk (piece__content us_rep)))))
(define-fun piece__ref_piece__content__projection ((a piece__ref)) us_rep 
  (piece__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const direction Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun is_valid_move (us_rep Int) Bool)

(declare-fun is_valid_move__function_guard (Bool us_rep Int) Bool)

(declare-sort action_type 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (action_type action_type) Bool)

(declare-const dummy4 action_type)

(declare-datatypes ()
((action_type__ref (action_type__refqtmk (action_type__content action_type)))))
(define-fun action_type__ref_action_type__content__projection ((a action_type__ref)) action_type 
  (action_type__content a))

(define-fun dynamic_invariant ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 0 3)) (in_range4 temp___expr_178)))

;; is_valid_move__post_axiom
  (assert true)

;; is_valid_move__def_axiom
  (assert
  (forall ((the_piece us_rep))
  (forall ((direction1 Int))
  (! (= (= (is_valid_move the_piece direction1) true)
     (not
     (and (= direction1 3)
     (= (to_rep1 (rec__tetris__piece__y (us_split_fields1 the_piece))) 16)))) :pattern (
  (is_valid_move the_piece direction1)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant1 ((temp___expr_164 Int)
  (temp___is_init_160 Bool) (temp___skip_constant_161 Bool)
  (temp___do_toplevel_162 Bool)
  (temp___do_typ_inv_163 Bool)) Bool (=>
                                     (or (= temp___is_init_160 true)
                                     (<= 1 8)) (in_range1 temp___expr_164)))

(define-fun dynamic_invariant2 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 1 16)) (in_range2 temp___expr_171)))

(define-fun dynamic_invariant3 ((temp___expr_199 Int)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (=>
                                     (or (= temp___is_init_195 true)
                                     (<= 1 7)) (in_range3 temp___expr_199)))

(declare-const the_piece__split_fields us_split_fields)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant direction true false true true))

;; H
  (assert
  (forall ((the_piece__split_fields1 us_split_fields))
  (is_valid_move__function_guard
  (is_valid_move (us_repqtmk the_piece__split_fields1) direction)
  (us_repqtmk the_piece__split_fields1) direction)))

;; Assume
  (assert
  (= (is_valid_move (us_repqtmk the_piece__split_fields) direction) true))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep (rec__tetris__piece__x the_piece__split_fields)) 
  o))

(declare-const xnew Int)

;; H
  (assert (= xnew o))

;; Assume
  (assert (dynamic_invariant1 xnew true false true true))

(declare-const o1 Int)

;; Ensures
  (assert (= (to_rep1 (rec__tetris__piece__y the_piece__split_fields)) 
  o1))

(declare-const ynew Int)

;; H
  (assert (= ynew o1))

;; Assume
  (assert (dynamic_invariant2 ynew true false true true))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= direction 1) true false)))

;; H
  (assert (= spark__branch true))

(declare-const spark__branch1 Bool)

;; H
  (assert (= spark__branch1 (ite (< 1 xnew) true false)))

;; H
  (assert (= spark__branch1 true))

(assert
;; defqtvc
 ;; File "tetris.ads", line 55, characters 0-0
  (not (in_range1 (- xnew 1))))
(check-sat)
