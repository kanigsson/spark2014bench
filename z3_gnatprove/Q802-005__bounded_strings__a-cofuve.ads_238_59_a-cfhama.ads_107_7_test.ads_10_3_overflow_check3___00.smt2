(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep 
  (sequence__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ()
((count_type__ref (count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant ((temp___expr_331 Int)
  (temp___is_init_327 Bool) (temp___skip_constant_328 Bool)
  (temp___do_toplevel_329 Bool)
  (temp___do_typ_inv_330 Bool)) Bool (=>
                                     (or (= temp___is_init_327 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_331)))

;; length__post_axiom
  (assert
  (forall ((container us_rep)) (! (in_range1
  (length container)) :pattern ((length container)) )))

(define-fun last ((container us_rep)) Int (+ 0 (length container)))

(declare-fun last__function_guard (Int us_rep) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (extended_index extended_index) Bool)

(declare-const dummy2 extended_index)

(declare-datatypes ()
((extended_index__ref
 (extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant1 ((temp___expr_449 Int)
  (temp___is_init_445 Bool) (temp___skip_constant_446 Bool)
  (temp___do_toplevel_447 Bool)
  (temp___do_typ_inv_448 Bool)) Bool (=>
                                     (or (= temp___is_init_445 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_449)))

;; last__post_axiom
  (assert
  (forall ((container us_rep)) (! (in_range2
  (last container)) :pattern ((last container)) )))

(declare-const left us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const right us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const fst Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const lst Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const offset Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-sort tcount_typeB 0)

(declare-fun tcount_typeBqtint (tcount_typeB) Int)

;; tcount_typeB'axiom
  (assert
  (forall ((i tcount_typeB))
  (and (<= (- 2147483648) (tcount_typeBqtint i))
  (<= (tcount_typeBqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (tcount_typeB tcount_typeB) Bool)

(declare-const dummy3 tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (tcount_typeB__refqtmk (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref_tcount_typeB__content__projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (index_type index_type) Bool)

(declare-const dummy4 index_type)

(declare-datatypes ()
((index_type__ref (index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant2 ((temp___expr_442 Int)
  (temp___is_init_438 Bool) (temp___skip_constant_439 Bool)
  (temp___do_toplevel_440 Bool)
  (temp___do_typ_inv_441 Bool)) Bool (=>
                                     (or (= temp___is_init_438 true)
                                     (<= 1 2147483647)) (in_range4
                                     temp___expr_442)))

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (natural natural) Bool)

(declare-const dummy5 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range5 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (positive positive) Bool)

(declare-const dummy6 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep1 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep1 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range6 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort character 0)

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (character character) Bool)

(declare-const dummy8 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep2 (character) Int)

(declare-fun of_rep2 (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range8
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep2 (select a temp___idx_91)) (to_rep2
                                                                 (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep2 (select a temp___idx_91)) (to_rep2
                                        (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep3 ((x integer)) Int (integerqtint x))

(declare-fun of_rep3 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range7 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last1 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range7 f)
     (=> (in_range7 l)
     (and (= (to_rep3 (first (mk f l))) f) (= (to_rep3 (last1 (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range7 low)
                   (and (in_range7 high)
                   (=> (<= low high) (and (in_range6 low) (in_range6 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep3 (first (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep3 (last1 (rt a))))

(define-fun length2 ((a us_t)) Int (ite (<= (first1 a) (last2 a))
                                   (+ (- (last2 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep3 (first (rt x)))
                 (to_rep3 (last1 (rt x))) (elts y) (to_rep3 (first (rt y)))
                 (to_rep3 (last1 (rt y)))))

(declare-fun user_eq9 (us_t us_t) Bool)

(declare-const dummy9 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-datatypes () ((t2s__ref (t2s__refqtmk (t2s__content us_t)))))
(define-fun t2s__ref_t2s__content__projection ((a t2s__ref)) us_t (t2s__content
                                                                  a))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__ada___ada___ada__strings__superbounded__super_string__max_length positive)))))
(define-fun us_split_discrs_rec__ada___ada___ada__strings__superbounded__super_string__max_length__projection ((a us_split_discrs)) positive 
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__ada___ada___ada__strings__superbounded__super_string__current_length natural)(rec__ada___ada___ada__strings__superbounded__super_string__data us_t)))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__projection ((a us_split_fields)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__projection ((a us_split_fields)) us_t 
  (rec__ada___ada___ada__strings__superbounded__super_string__data a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs1 a))) (to_rep1
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs1 b))))
                         (and
                         (= (to_rep
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                            (us_split_fields1 a))) (to_rep
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                                   (us_split_fields1 b))))
                         (= (bool_eq2
                            (rec__ada___ada___ada__strings__superbounded__super_string__data
                            (us_split_fields1 a))
                            (rec__ada___ada___ada__strings__superbounded__super_string__data
                            (us_split_fields1 b))) true)))
                    true false))

(define-fun in_range9 ((rec__ada___ada___ada__strings__superbounded__super_string__max_length1 Int)
  (a us_split_discrs)) Bool (= rec__ada___ada___ada__strings__superbounded__super_string__max_length1 
  (to_rep1
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length a))))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position))

(declare-fun user_eq10 (us_rep1 us_rep1) Bool)

(declare-const dummy10 us_rep1)

(declare-datatypes ()
((super_string__ref (super_string__refqtmk (super_string__content us_rep1)))))
(define-fun super_string__ref_super_string__content__projection ((a super_string__ref)) us_rep1 
  (super_string__content a))

(declare-sort tT92sP1 0)

(declare-fun tT92sP1qtint (tT92sP1) Int)

;; tT92sP1'axiom
  (assert
  (forall ((i tT92sP1))
  (and (<= 1 (tT92sP1qtint i)) (<= (tT92sP1qtint i) 128))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (tT92sP1 tT92sP1) Bool)

(declare-const dummy11 tT92sP1)

(declare-datatypes ()
((tT92sP1__ref (tT92sP1__refqtmk (tT92sP1__content tT92sP1)))))
(define-fun tT92sP1__ref_tT92sP1__content__projection ((a tT92sP1__ref)) tT92sP1 
  (tT92sP1__content a))

(declare-const dummy12 (Array Int character))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq12 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__ada___ada___ada__strings__superbounded__super_string__current_length1 natural)(rec__ada___ada___ada__strings__superbounded__super_string__data1 (Array Int character))))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__3__projection ((a us_split_fields2)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__3__projection ((a us_split_fields2)) (Array Int character) 
  (rec__ada___ada___ada__strings__superbounded__super_string__data1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2
 (us_repqtmk1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep2)) us_rep1 (us_repqtmk (us_split_discrs2 a)
                                          (us_split_fieldsqtmk
                                          (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                          (us_split_fields3 a))
                                          (of_array
                                          (rec__ada___ada___ada__strings__superbounded__super_string__data1
                                          (us_split_fields3 a)) 1 128))))

(define-fun of_base ((r us_rep1)) us_rep2 (us_repqtmk1 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk1
                                          (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                          (us_split_fields1 r))
                                          (let ((temp___156 (rec__ada___ada___ada__strings__superbounded__super_string__data
                                                            (us_split_fields1
                                                            r))))
                                          (to_array temp___156)))))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep1
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs2 a))) (to_rep1
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs2 b))))
                         (and
                         (= (to_rep
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                            (us_split_fields3 a))) (to_rep
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                                   (us_split_fields3 b))))
                         (= (bool_eq1
                            (rec__ada___ada___ada__strings__superbounded__super_string__data1
                            (us_split_fields3 a)) 1 128
                            (rec__ada___ada___ada__strings__superbounded__super_string__data1
                            (us_split_fields3 b)) 1 128) true)))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position1))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position1))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position1))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ()
((bounded_string__ref
 (bounded_string__refqtmk (bounded_string__content us_rep2)))))
(define-fun bounded_string__ref_bounded_string__content__projection ((a bounded_string__ref)) us_rep2 
  (bounded_string__content a))

(declare-datatypes ()
((element_type__ref (element_type__refqtmk (element_type__content us_rep2)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref)) us_rep2 
  (element_type__content a))

(declare-fun get (us_rep Int) us_rep2)

(declare-fun get__function_guard (us_rep2 us_rep Int) Bool)

(declare-datatypes () ((t90s__ref (t90s__refqtmk (t90s__content us_t)))))
(define-fun t90s__ref_t90s__content__projection ((a t90s__ref)) us_t 
  (t90s__content a))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__ada___ada___ada__strings__superbounded__super_string__current_length2 natural)(rec__ada___ada___ada__strings__superbounded__super_string__data2 us_t)))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__2__projection ((a us_split_fields4)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__2__projection ((a us_split_fields4)) us_t 
  (rec__ada___ada___ada__strings__superbounded__super_string__data2 a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep3
 (us_repqtmk2
 (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep3)) us_split_discrs 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep3)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base1 ((a us_rep3)) us_rep1 (us_repqtmk (us_split_discrs3 a)
                                           (us_split_fieldsqtmk
                                           (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
                                           (us_split_fields5 a))
                                           (let ((temp___155 (rec__ada___ada___ada__strings__superbounded__super_string__data2
                                                             (us_split_fields5
                                                             a))))
                                           (of_array (to_array temp___155)
                                           (first1 temp___155)
                                           (last2 temp___155))))))

(define-fun of_base1 ((r us_rep1)) us_rep3 (us_repqtmk2 (us_split_discrs1 r)
                                           (us_split_fieldsqtmk2
                                           (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                           (us_split_fields1 r))
                                           (let ((temp___154 (rec__ada___ada___ada__strings__superbounded__super_string__data
                                                             (us_split_fields1
                                                             r))))
                                           (of_array (to_array temp___154)
                                           (first1 temp___154)
                                           (last2 temp___154))))))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep1
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs3 a))) (to_rep1
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs3 b))))
                         (and
                         (= (to_rep
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
                            (us_split_fields5 a))) (to_rep
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length2
                                                   (us_split_fields5 b))))
                         (= (bool_eq2
                            (rec__ada___ada___ada__strings__superbounded__super_string__data2
                            (us_split_fields5 a))
                            (rec__ada___ada___ada__strings__superbounded__super_string__data2
                            (us_split_fields5 b))) true)))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position2 Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit2))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit2 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit2))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position2))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position2 Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit2))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit2 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit2))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position2))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit2 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position2 Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit2))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit2 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit2))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position2))

(declare-fun user_eq14 (us_rep3 us_rep3) Bool)

(declare-const dummy14 us_rep3)

(declare-datatypes ()
((tbounded_stringB__ref
 (tbounded_stringB__refqtmk (tbounded_stringB__content us_rep3)))))
(define-fun tbounded_stringB__ref_tbounded_stringB__content__projection ((a tbounded_stringB__ref)) us_rep3 
  (tbounded_stringB__content a))

(define-fun oeq ((left1 us_rep)
  (right1 us_rep)) Bool (and (= (length left1) (length right1)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left1)))
                                                                (= (bool_eq5
                                                                   (of_base1
                                                                   (to_base
                                                                   (get left1
                                                                   n)))
                                                                   (of_base1
                                                                   (to_base
                                                                   (get
                                                                   right1 n)))) true)))
                                                                true false)))

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq a b) (oeq a b)) :pattern ((user_eq a b)) )))

(define-fun default_initial_assumption ((temp___expr_457 us_rep)
  (temp___skip_top_level_458 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_458 true))
                                         (= (length temp___expr_457) 0)))

(define-fun dynamic_invariant3 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range5
                                    temp___expr_39)))

(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range6
                                    temp___expr_46)))

(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range8 temp___expr_74)))

(define-fun dynamic_invariant6 ((temp___expr_284 us_rep1)
  (temp___is_init_280 Bool) (temp___skip_constant_281 Bool)
  (temp___do_toplevel_282 Bool)
  (temp___do_typ_inv_283 Bool)) Bool (let ((temp___285 (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                       (us_split_discrs1
                                                       temp___expr_284))))
                                     (and (dynamic_property 1
                                     (to_rep1 temp___285)
                                     (first1
                                     (rec__ada___ada___ada__strings__superbounded__super_string__data
                                     (us_split_fields1 temp___expr_284)))
                                     (last2
                                     (rec__ada___ada___ada__strings__superbounded__super_string__data
                                     (us_split_fields1 temp___expr_284))))
                                     (and
                                     (= (first1
                                        (rec__ada___ada___ada__strings__superbounded__super_string__data
                                        (us_split_fields1 temp___expr_284))) 1)
                                     (= (last2
                                        (rec__ada___ada___ada__strings__superbounded__super_string__data
                                        (us_split_fields1 temp___expr_284))) 
                                     (to_rep1 temp___285))))))

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(define-fun dynamic_invariant7 ((temp___expr_291 us_rep2)
  (temp___is_init_287 Bool) (temp___skip_constant_288 Bool)
  (temp___do_toplevel_289 Bool)
  (temp___do_typ_inv_290 Bool)) Bool (=>
                                     (not (= temp___skip_constant_288 true))
                                     (in_range9 128
                                     (us_split_discrs1
                                     (to_base temp___expr_291)))))

(define-fun default_initial_assumption1 ((temp___expr_294 us_rep2)
  (temp___skip_top_level_295 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                            (us_split_discrs2
                                            temp___expr_294))) 128)
                                         (= (to_rep
                                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                            (us_split_fields3
                                            temp___expr_294))) 0)))

;; oeq__post_axiom
  (assert true)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq13 a b) (oeq1 (of_base (to_base a)) (of_base (to_base b)))) :pattern (
  (user_eq13 a b)) )))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 fst true false true true))

;; Assume
  (assert (dynamic_invariant1 lst true false true true))

;; Assume
  (assert (in_range3 offset))

(declare-const o Bool)

;; H
  (assert (dynamic_invariant1 (last left) true false true true))

;; H
  (assert (let ((o1 left)) (= (last o1) (+ 0 (length o1)))))

;; H
  (assert
  (ite (<= lst (last left))
  (and (or (not (< offset 0)) (in_range3 (- (- 2147483648) offset)))
  (= o (ite (< offset 0) (ite (<= (- (- 2147483648) offset) 1) true false)
       (distinct 1 0))))
  (= o false)))

;; H
  (assert (= o true))

;; H
  (assert (<= fst lst))

(define-fun o1 () Int lst)

;; Ensures
  (assert (in_range3 o1))

(define-fun o2 () Int (length right))

;; H
  (assert (dynamic_invariant o2 true false true true))

;; H
  (assert (<= (+ 0 o2) 2147483647))

(define-fun o3 () Int (+ 0 o2))

(assert
;; defqtvc
 ;; File "a-cofuve.ads", line 217, characters 0-0
  (not (in_range3 o3)))
(check-sat)
