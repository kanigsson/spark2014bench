(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_discrs (us_split_discrsqtmk (rec__p__t__x integer)))))
(define-fun us_split_discrs_rec__p__t__x__projection ((a us_split_discrs)) integer 
  (rec__p__t__x a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_discrs1 us_split_discrs)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__p__t__x (us_split_discrs1 a))) 
                   (to_rep (rec__p__t__x (us_split_discrs1 b)))) true false))

(define-fun in_range1 ((rec__p__t__x1 Int)
  (a us_split_discrs)) Bool (= rec__p__t__x1 (to_rep (rec__p__t__x a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const p__t__x__first__bit Int)

(declare-const p__t__x__last__bit Int)

(declare-const p__t__x__position Int)

;; p__t__x__first__bit_axiom
  (assert (<= 0 p__t__x__first__bit))

;; p__t__x__last__bit_axiom
  (assert (< p__t__x__first__bit p__t__x__last__bit))

;; p__t__x__position_axiom
  (assert (<= 0 p__t__x__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-const x__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_181 us_rep)
  (temp___skip_top_level_182 Bool)) Bool (= (to_rep
                                            (rec__p__t__x
                                            (us_split_discrs1
                                            temp___expr_181))) 5))

(declare-const y__split_discrs us_split_discrs)

(declare-const y__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const p__t__x__first__bit1 Int)

(declare-const p__t__x__last__bit1 Int)

(declare-const p__t__x__position1 Int)

;; p__t__x__first__bit_axiom
  (assert (<= 0 p__t__x__first__bit1))

;; p__t__x__last__bit_axiom
  (assert (< p__t__x__first__bit1 p__t__x__last__bit1))

;; p__t__x__position_axiom
  (assert (<= 0 p__t__x__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((tyS__ref (tyS__refqtmk (tyS__content us_rep)))))
(define-fun tyS__ref_tyS__content__projection ((a tyS__ref)) us_rep (tyS__content
                                                                    a))

(define-fun dynamic_invariant ((temp___expr_188 us_rep)
  (temp___is_init_184 Bool) (temp___skip_constant_185 Bool)
  (temp___do_toplevel_186 Bool)
  (temp___do_typ_inv_187 Bool)) Bool (=>
                                     (not (= temp___skip_constant_185 true))
                                     (in_range1 2
                                     (us_split_discrs1 temp___expr_188))))

(define-fun default_initial_assumption1 ((temp___expr_190 us_rep)
  (temp___skip_top_level_191 Bool)) Bool (= (to_rep
                                            (rec__p__t__x
                                            (us_split_discrs1
                                            temp___expr_190))) 2))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const p__t__x__first__bit2 Int)

(declare-const p__t__x__last__bit2 Int)

(declare-const p__t__x__position2 Int)

;; p__t__x__first__bit_axiom
  (assert (<= 0 p__t__x__first__bit2))

;; p__t__x__last__bit_axiom
  (assert (< p__t__x__first__bit2 p__t__x__last__bit2))

;; p__t__x__position_axiom
  (assert (<= 0 p__t__x__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((t1b__ref (t1b__refqtmk (t1b__content us_rep)))))
(define-fun t1b__ref_t1b__content__projection ((a t1b__ref)) us_rep (t1b__content
                                                                    a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const p__t__x__first__bit3 Int)

(declare-const p__t__x__last__bit3 Int)

(declare-const p__t__x__position3 Int)

;; p__t__x__first__bit_axiom
  (assert (<= 0 p__t__x__first__bit3))

;; p__t__x__last__bit_axiom
  (assert (< p__t__x__first__bit3 p__t__x__last__bit3))

;; p__t__x__position_axiom
  (assert (<= 0 p__t__x__position3))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes () ((t7b__ref (t7b__refqtmk (t7b__content us_rep)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) us_rep (t7b__content
                                                                    a))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const p__t__x__first__bit4 Int)

(declare-const p__t__x__last__bit4 Int)

(declare-const p__t__x__position4 Int)

;; p__t__x__first__bit_axiom
  (assert (<= 0 p__t__x__first__bit4))

;; p__t__x__last__bit_axiom
  (assert (< p__t__x__first__bit4 p__t__x__last__bit4))

;; p__t__x__position_axiom
  (assert (<= 0 p__t__x__position4))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((t11b__ref (t11b__refqtmk (t11b__content us_rep)))))
(define-fun t11b__ref_t11b__content__projection ((a t11b__ref)) us_rep 
  (t11b__content a))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 2))

(declare-const x__split_discrs integer)

;; Assume
  (assert (= x__attr__constrained false))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk (us_split_discrsqtmk x__split_discrs)) false))

;; Assume
  (assert true)

;; Ensures
  (assert (in_range 2))

(assert
;; defqtvc
 ;; File "p.adb", line 1, characters 0-0
  (not (in_range1 2 (us_split_discrsqtmk rliteral))))
(check-sat)

(exit)
