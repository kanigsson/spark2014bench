(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_string (us_image Int) us_t)

(declare-fun from_string (us_t) us_image)

;; to_string__first
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (= (first1 (to_string x s)) 1) :pattern ((to_string x s)) ))))

;; to_string__length
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (=> (<= 0 s) (<= (length (to_string x s)) s)) :pattern ((to_string x s)) ))))

(declare-sort opt_index_type 0)

(declare-fun opt_index_typeqtint (opt_index_type) Int)

;; opt_index_type'axiom
  (assert
  (forall ((i opt_index_type))
  (and (<= 0 (opt_index_typeqtint i)) (<= (opt_index_typeqtint i) 32))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 32)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (opt_index_type opt_index_type) Bool)

(declare-const dummy4 opt_index_type)

(declare-datatypes ()
((opt_index_type__ref
 (opt_index_type__refqtmk (opt_index_type__content opt_index_type)))))
(define-fun opt_index_type__ref_opt_index_type__content__projection ((a opt_index_type__ref)) opt_index_type 
  (opt_index_type__content a))

(define-fun to_rep2 ((x opt_index_type)) Int (opt_index_typeqtint x))

(declare-fun of_rep2 (Int) opt_index_type)

;; inversion_axiom
  (assert
  (forall ((x opt_index_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x opt_index_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort elem_type 0)

(declare-fun elem_typeqtint (elem_type) Int)

;; elem_type'axiom
  (assert
  (forall ((i elem_type))
  (and (<= (- 2147483648) (elem_typeqtint i))
  (<= (elem_typeqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (elem_type elem_type) Bool)

(declare-const dummy5 elem_type)

(declare-datatypes ()
((elem_type__ref (elem_type__refqtmk (elem_type__content elem_type)))))
(define-fun elem_type__ref_elem_type__content__projection ((a elem_type__ref)) elem_type 
  (elem_type__content a))

(define-fun to_rep3 ((x elem_type)) Int (elem_typeqtint x))

(declare-fun of_rep3 (Int) elem_type)

;; inversion_axiom
  (assert
  (forall ((x elem_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x elem_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int elem_type))))))
(declare-fun slide1 ((Array Int elem_type) Int Int) (Array Int elem_type))

;; slide_eq
  (assert
  (forall ((a (Array Int elem_type)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int elem_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int elem_type)) (a__first Int) (a__last Int)
  (b (Array Int elem_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep3 (select a temp___idx_156)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int elem_type)) (b (Array Int elem_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep3 (select a temp___idx_156)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-const dummy6 (Array Int elem_type))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq6 ((Array Int elem_type) (Array Int elem_type)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__repro_main__int_table__t__elems (Array Int elem_type))(rec__repro_main__int_table__t__last opt_index_type)))))
(define-fun us_split_fields_rec__repro_main__int_table__t__elems__projection ((a us_split_fields)) (Array Int elem_type) 
  (rec__repro_main__int_table__t__elems a))

(define-fun us_split_fields_rec__repro_main__int_table__t__last__projection ((a us_split_fields)) opt_index_type 
  (rec__repro_main__int_table__t__last a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq2
                           (rec__repro_main__int_table__t__elems
                           (us_split_fields1 a)) 1 32
                           (rec__repro_main__int_table__t__elems
                           (us_split_fields1 b)) 1 32) true)
                        (= (to_rep2
                           (rec__repro_main__int_table__t__last
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__repro_main__int_table__t__last
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const repro_main__int_table__t__elems__first__bit Int)

(declare-const repro_main__int_table__t__elems__last__bit Int)

(declare-const repro_main__int_table__t__elems__position Int)

;; repro_main__int_table__t__elems__first__bit_axiom
  (assert (<= 0 repro_main__int_table__t__elems__first__bit))

;; repro_main__int_table__t__elems__last__bit_axiom
  (assert
  (< repro_main__int_table__t__elems__first__bit repro_main__int_table__t__elems__last__bit))

;; repro_main__int_table__t__elems__position_axiom
  (assert (<= 0 repro_main__int_table__t__elems__position))

(declare-const repro_main__int_table__t__last__first__bit Int)

(declare-const repro_main__int_table__t__last__last__bit Int)

(declare-const repro_main__int_table__t__last__position Int)

;; repro_main__int_table__t__last__first__bit_axiom
  (assert (<= 0 repro_main__int_table__t__last__first__bit))

;; repro_main__int_table__t__last__last__bit_axiom
  (assert
  (< repro_main__int_table__t__last__first__bit repro_main__int_table__t__last__last__bit))

;; repro_main__int_table__t__last__position_axiom
  (assert (<= 0 repro_main__int_table__t__last__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (natural natural) Bool)

(declare-const dummy8 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range6 low) (in_range6 high))))))

(declare-datatypes ()
((us_t1 (us_tqtmk1 (elts1 (Array Int elem_type))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int elem_type) (elts1 a))

(define-fun of_array1 ((a (Array Int elem_type)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment3))

(define-fun bool_eq4 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq9 (us_t1 us_t1) Bool)

(declare-const dummy9 us_t1)

(declare-datatypes ()
((model_type__ref (model_type__refqtmk (model_type__content us_t1)))))
(define-fun model_type__ref_model_type__content__projection ((a model_type__ref)) us_t1 
  (model_type__content a))

(declare-fun model1 (us_rep) us_t1)

(declare-fun model__function_guard (us_t1 us_rep) Bool)

(declare-fun empty_table (tuple0) us_rep)

(declare-fun empty_table__function_guard (us_rep tuple0) Bool)

(declare-fun temp_____aggregate_def_260 (Int) (Array Int elem_type))

;; empty_table__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (empty_table us_void_param)))
     (and
     (forall ((result1 us_rep)) (model__function_guard (model1 result1)
     result1))
     (=> (empty_table__function_guard result us_void_param)
     (= (length1 (model1 result)) 0)))) :pattern ((empty_table us_void_param)) )))

(declare-const rliteral opt_index_type)

;; rliteral_axiom
  (assert (= (opt_index_typeqtint rliteral) 0))

;; empty_table__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (empty_table us_void_param) (us_repqtmk
                                    (us_split_fieldsqtmk
                                    (temp_____aggregate_def_260 0) rliteral))) :pattern (
  (empty_table us_void_param)) )))

(declare-fun first4 (us_rep) Int)

(declare-fun first__function_guard (Int us_rep) Bool)

(declare-fun first5 (us_rep) Int)

(declare-fun first__function_guard1 (Int us_rep) Bool)

(declare-sort cursor_type 0)

(declare-fun cursor_typeqtint (cursor_type) Int)

;; cursor_type'axiom
  (assert
  (forall ((i cursor_type))
  (and (<= 1 (cursor_typeqtint i)) (<= (cursor_typeqtint i) 33))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 33)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (cursor_type cursor_type) Bool)

(declare-const dummy10 cursor_type)

(declare-datatypes ()
((cursor_type__ref (cursor_type__refqtmk (cursor_type__content cursor_type)))))
(define-fun cursor_type__ref_cursor_type__content__projection ((a cursor_type__ref)) cursor_type 
  (cursor_type__content a))

(define-fun dynamic_invariant ((temp___expr_206 Int)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)
  (temp___do_typ_inv_205 Bool)) Bool (=>
                                     (or (= temp___is_init_202 true)
                                     (<= 1 33)) (in_range7 temp___expr_206)))

;; first__post_axiom
  (assert
  (forall ((table us_rep))
  (! (let ((result (first4 table)))
     (=> (first__function_guard result table) (dynamic_invariant result true
     false true true))) :pattern ((first4 table)) )))

;; first__post_refine_axiom
  (assert
  (forall ((table us_rep))
  (! (let ((result (first5 table)))
     (=> (first__function_guard1 result table)
     (and (= result 1) (dynamic_invariant result true false true true)))) :pattern (
  (first5 table)) )))

(declare-fun has_element (us_rep Int) Bool)

(declare-fun has_element__function_guard (Bool us_rep Int) Bool)

;; has_element__post_axiom
  (assert true)

;; has_element__def_axiom
  (assert
  (forall ((table us_rep))
  (forall ((cursor Int))
  (! (= (= (has_element table cursor) true)
     (and (< cursor 33)
     (<= cursor (to_rep2
                (rec__repro_main__int_table__t__last
                (us_split_fields1 table)))))) :pattern ((has_element table
                                                        cursor)) ))))

(declare-fun index_of (Int) Int)

(declare-fun index_of__function_guard (Int Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range6
                                    temp___expr_39)))

;; index_of__post_axiom
  (assert
  (forall ((cursor Int))
  (! (=> (dynamic_invariant cursor true true true true)
     (let ((result (index_of cursor)))
     (=> (index_of__function_guard result cursor) (dynamic_invariant1 result
     true false true true)))) :pattern ((index_of cursor)) )))

;; index_of__def_axiom
  (assert
  (forall ((cursor Int))
  (! (=> (dynamic_invariant cursor true true true true)
     (= (index_of cursor) cursor)) :pattern ((index_of cursor)) )))

(declare-fun next (us_rep Int) Int)

(declare-fun next__function_guard (Int us_rep Int) Bool)

(declare-fun next1 (us_rep Int) Int)

(declare-fun next__function_guard1 (Int us_rep Int) Bool)

;; next__post_axiom
  (assert
  (forall ((table us_rep))
  (forall ((cursor Int))
  (! (and
     (forall ((table1 us_rep) (cursor1 Int)) (has_element__function_guard
     (has_element table1 cursor1) table1 cursor1))
     (=>
     (and (dynamic_invariant cursor true true true true)
     (= (has_element table cursor) true))
     (let ((result (next table cursor)))
     (and
     (forall ((table1 us_rep) (result1 Int)) (has_element__function_guard
     (has_element table1 result1) table1 result1))
     (and
     (forall ((cursor1 Int)) (index_of__function_guard (index_of cursor1)
     cursor1))
     (and
     (forall ((result1 Int)) (index_of__function_guard (index_of result1)
     result1))
     (=> (next__function_guard result table cursor)
     (and
     (=> (= (has_element table result) true)
     (< (index_of cursor) (index_of result))) (dynamic_invariant result true
     false true true))))))))) :pattern ((next table cursor)) ))))

;; next__post_refine_axiom
  (assert
  (forall ((table us_rep))
  (forall ((cursor Int))
  (! (and
     (forall ((table1 us_rep) (cursor1 Int)) (has_element__function_guard
     (has_element table1 cursor1) table1 cursor1))
     (=>
     (and (dynamic_invariant cursor true true true true)
     (= (has_element table cursor) true))
     (let ((result (next1 table cursor)))
     (=> (next__function_guard1 result table cursor)
     (and (< cursor result) (dynamic_invariant result true false true true)))))) :pattern (
  (next1 table cursor)) ))))

;; next__def_axiom
  (assert
  (forall ((table us_rep))
  (forall ((cursor Int))
  (! (=> (dynamic_invariant cursor true true true true)
     (= (next1 table cursor) (+ cursor 1))) :pattern ((next1 table cursor)) ))))

(declare-fun element (us_rep Int) Int)

(declare-fun element__function_guard (Int us_rep Int) Bool)

(define-fun dynamic_invariant2 ((temp___expr_199 Int)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (=>
                                     (or (= temp___is_init_195 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range5 temp___expr_199)))

;; element__post_axiom
  (assert
  (forall ((table us_rep))
  (forall ((cursor Int))
  (! (and
     (forall ((table1 us_rep) (cursor1 Int)) (has_element__function_guard
     (has_element table1 cursor1) table1 cursor1))
     (=>
     (and (dynamic_invariant cursor true true true true)
     (= (has_element table cursor) true))
     (let ((result (element table cursor)))
     (=> (element__function_guard result table cursor) (dynamic_invariant2
     result true false true true))))) :pattern ((element table cursor)) ))))

;; element__def_axiom
  (assert
  (forall ((table us_rep))
  (forall ((cursor Int))
  (! (=> (dynamic_invariant cursor true true true true)
     (= (element table cursor) (to_rep3
                               (let ((temp___280 (rec__repro_main__int_table__t__elems
                                                 (us_split_fields1 table))))
                               (select temp___280 cursor))))) :pattern (
  (element table cursor)) ))))

(declare-fun length2 (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun member1 (us_rep Int) Bool)

(declare-fun member__function_guard (Bool us_rep Int) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant5 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant6 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (count count) Bool)

(declare-const dummy11 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant7 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_171)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(define-fun dynamic_invariant8 ((temp___expr_249 us_t1)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (not (= temp___skip_constant_246 true))
                                     (dynamic_property1 0 2147483647
                                     (first3 temp___expr_249)
                                     (last3 temp___expr_249))))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 32))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 32)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq12 (index_type index_type) Bool)

(declare-const dummy12 index_type)

(declare-datatypes ()
((index_type__ref (index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-sort t2 0)

(declare-fun first6 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first6 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range9 low) (in_range9 high))))))

(declare-datatypes ()
((us_t2 (us_tqtmk2 (elts2 (Array Int elem_type))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int elem_type) (elts2 a))

(define-fun of_array2 ((a (Array Int elem_type)) (f Int)
  (l Int)) us_t2 (us_tqtmk2 a (mk2 f l)))

(define-fun first7 ((a us_t2)) Int (to_rep1 (first6 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length3 ((a us_t2)) Int (ite (<= (first7 a) (last5 a))
                                    (+ (- (last5 a) (first7 a)) 1) 0))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size3 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment4))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq2 (elts2 x) (to_rep1 (first6 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first6 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq13 (us_t2 us_t2) Bool)

(declare-const dummy13 us_t2)

(declare-datatypes ()
((telem_arrayB__ref (telem_arrayB__refqtmk (telem_arrayB__content us_t2)))))
(define-fun telem_arrayB__ref_telem_arrayB__content__projection ((a telem_arrayB__ref)) us_t2 
  (telem_arrayB__content a))

(declare-datatypes () ((t38b__ref (t38b__refqtmk (t38b__content us_t2)))))
(define-fun t38b__ref_t38b__content__projection ((a t38b__ref)) us_t2 
  (t38b__content a))

;; model__post_axiom
  (assert
  (forall ((table us_rep))
  (! (let ((result (model1 table)))
     (=> (model__function_guard result table) (dynamic_invariant8 result true
     false true true))) :pattern ((model1 table)) )))

;; model__def_axiom
  (assert
  (forall ((table us_rep))
  (! (= (model1 table) (let ((temp___258 (let ((temp___256 (to_rep2
                                                           (rec__repro_main__int_table__t__last
                                                           (us_split_fields1
                                                           table)))))
                                         (let ((temp___255 1))
                                         (let ((temp___257 (rec__repro_main__int_table__t__elems
                                                           (us_split_fields1
                                                           table))))
                                         (of_array2 temp___257 temp___255
                                         temp___256))))))
                       (of_array1 (to_array2 temp___258) (first7 temp___258)
                       (last5 temp___258)))) :pattern ((model1 table)) )))

;; length__post_axiom
  (assert
  (forall ((table us_rep))
  (! (let ((result (length2 table)))
     (and
     (forall ((table1 us_rep)) (model__function_guard (model1 table1)
     table1))
     (=> (length__function_guard result table)
     (and (= result (length1 (model1 table))) (dynamic_invariant1 result true
     false true true))))) :pattern ((length2 table)) )))

;; length__def_axiom
  (assert
  (forall ((table us_rep))
  (! (= (length2 table) (to_rep2
                        (rec__repro_main__int_table__t__last
                        (us_split_fields1 table)))) :pattern ((length2 table)) )))

;; member__post_axiom
  (assert
  (forall ((table us_rep))
  (forall ((elem Int))
  (! (=> (dynamic_invariant2 elem true true true true)
     (let ((result (member1 table elem)))
     (and
     (forall ((table1 us_rep) (e Int)) (member__function_guard
     (member1 table1 e) table1 e))
     (=> (member__function_guard result table elem)
     (= (= result true)
     (exists ((e Int))
     (and (and (in_range5 e) (= (member1 table e) true)) (= e elem)))))))) :pattern (
  (member1 table elem)) ))))

;; member__def_axiom
  (assert
  (forall ((table us_rep))
  (forall ((elem Int))
  (! (= (= (member1 table elem) true)
     (exists ((i Int))
     (and
     (and (<= 1 i)
     (<= i (to_rep2
           (rec__repro_main__int_table__t__last (us_split_fields1 table)))))
     (= (to_rep3
        (let ((temp___284 (rec__repro_main__int_table__t__elems
                          (us_split_fields1 table))))
        (select temp___284 i))) elem)))) :pattern ((member1 table elem)) ))))

(define-fun dynamic_invariant9 ((temp___expr_213 Int)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)
  (temp___do_typ_inv_212 Bool)) Bool (=>
                                     (or (= temp___is_init_209 true)
                                     (<= 0 32)) (in_range4 temp___expr_213)))

(declare-const rliteral1 elem_type)

;; rliteral_axiom
  (assert (= (elem_typeqtint rliteral1) 0))

;; def_axiom
  (assert
  (forall ((temp___262 Int))
  (=> (dynamic_invariant2 temp___262 true true true true)
  (forall ((temp___263 Int))
  (= (select (temp_____aggregate_def_260 temp___262) temp___263) rliteral1)))))

(declare-const standard_in us_private)

(declare-const file_system us_private)

(declare-const standard_out us_private)

(declare-const standard_err us_private)

(declare-const current_in us_private)

(declare-const current_out us_private)

(declare-const current_err us_private)

(define-fun repro_main__table__assume () us_rep (empty_table Tuple0))

;; H
  (assert
  (forall ((repro_main__table__assume1 us_rep)) (model__function_guard
  (model1 repro_main__table__assume1) repro_main__table__assume1)))

;; H
  (assert (empty_table__function_guard repro_main__table__assume Tuple0))

;; H
  (assert true)

;; H
  (assert
  (= repro_main__table__assume (us_repqtmk
                               (us_split_fieldsqtmk
                               (temp_____aggregate_def_260 0) rliteral))))

;; H
  (assert (= (length1 (model1 repro_main__table__assume)) 0))

(declare-const table__split_fields us_split_fields)

;; H
  (assert
  (= table__split_fields (us_split_fields1 repro_main__table__assume)))

;; Assume
  (assert true)

(declare-const table__split_fields1 us_split_fields)

;; H
  (assert
  (forall ((table__split_fields2 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields2))
  (us_repqtmk table__split_fields2))))

;; H
  (assert
  (forall ((table__split_fields2 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields2))
  (us_repqtmk table__split_fields2))))

;; H
  (assert
  (forall ((table__split_fields2 us_split_fields)) (member__function_guard
  (member1 (us_repqtmk table__split_fields2) 2)
  (us_repqtmk table__split_fields2) 2)))

;; H
  (assert
  (forall ((temp___289 us_rep) (e Int)) (member__function_guard
  (member1 temp___289 e) temp___289 e)))

;; H
  (assert
  (forall ((table__split_fields2 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields2) e)
  (us_repqtmk table__split_fields2) e)))

;; H
  (assert
  (forall ((temp___292 us_rep) (e Int)) (member__function_guard
  (member1 temp___292 e) temp___292 e)))

;; H
  (assert
  (forall ((table__split_fields2 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields2) e)
  (us_repqtmk table__split_fields2) e)))

;; H
  (assert
  (= (length2 (us_repqtmk table__split_fields1)) (+ (length2
                                                    (us_repqtmk
                                                    table__split_fields)) 1)))

;; H
  (assert (= (member1 (us_repqtmk table__split_fields1) 2) true))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields) e) true))
  (= (member1 (us_repqtmk table__split_fields1) e) true))))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields1) e) true))
  (or (= e 2) (= (member1 (us_repqtmk table__split_fields) e) true)))))

;; H
  (assert true)

(declare-const table__split_fields2 us_split_fields)

;; H
  (assert
  (forall ((table__split_fields3 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields3))
  (us_repqtmk table__split_fields3))))

;; H
  (assert
  (forall ((table__split_fields3 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields3))
  (us_repqtmk table__split_fields3))))

;; H
  (assert
  (forall ((table__split_fields3 us_split_fields)) (member__function_guard
  (member1 (us_repqtmk table__split_fields3) 3)
  (us_repqtmk table__split_fields3) 3)))

;; H
  (assert
  (forall ((temp___289 us_rep) (e Int)) (member__function_guard
  (member1 temp___289 e) temp___289 e)))

;; H
  (assert
  (forall ((table__split_fields3 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields3) e)
  (us_repqtmk table__split_fields3) e)))

;; H
  (assert
  (forall ((temp___292 us_rep) (e Int)) (member__function_guard
  (member1 temp___292 e) temp___292 e)))

;; H
  (assert
  (forall ((table__split_fields3 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields3) e)
  (us_repqtmk table__split_fields3) e)))

;; H
  (assert
  (= (length2 (us_repqtmk table__split_fields2)) (+ (length2
                                                    (us_repqtmk
                                                    table__split_fields1)) 1)))

;; H
  (assert (= (member1 (us_repqtmk table__split_fields2) 3) true))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields1) e) true))
  (= (member1 (us_repqtmk table__split_fields2) e) true))))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields2) e) true))
  (or (= e 3) (= (member1 (us_repqtmk table__split_fields1) e) true)))))

;; H
  (assert true)

(declare-const table__split_fields3 us_split_fields)

;; H
  (assert
  (forall ((table__split_fields4 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields4))
  (us_repqtmk table__split_fields4))))

;; H
  (assert
  (forall ((table__split_fields4 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields4))
  (us_repqtmk table__split_fields4))))

;; H
  (assert
  (forall ((table__split_fields4 us_split_fields)) (member__function_guard
  (member1 (us_repqtmk table__split_fields4) 5)
  (us_repqtmk table__split_fields4) 5)))

;; H
  (assert
  (forall ((temp___289 us_rep) (e Int)) (member__function_guard
  (member1 temp___289 e) temp___289 e)))

;; H
  (assert
  (forall ((table__split_fields4 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields4) e)
  (us_repqtmk table__split_fields4) e)))

;; H
  (assert
  (forall ((temp___292 us_rep) (e Int)) (member__function_guard
  (member1 temp___292 e) temp___292 e)))

;; H
  (assert
  (forall ((table__split_fields4 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields4) e)
  (us_repqtmk table__split_fields4) e)))

;; H
  (assert
  (= (length2 (us_repqtmk table__split_fields3)) (+ (length2
                                                    (us_repqtmk
                                                    table__split_fields2)) 1)))

;; H
  (assert (= (member1 (us_repqtmk table__split_fields3) 5) true))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields2) e) true))
  (= (member1 (us_repqtmk table__split_fields3) e) true))))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields3) e) true))
  (or (= e 5) (= (member1 (us_repqtmk table__split_fields2) e) true)))))

;; H
  (assert true)

(declare-const table__split_fields4 us_split_fields)

;; H
  (assert
  (forall ((table__split_fields5 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields5))
  (us_repqtmk table__split_fields5))))

;; H
  (assert
  (forall ((table__split_fields5 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields5))
  (us_repqtmk table__split_fields5))))

;; H
  (assert
  (forall ((table__split_fields5 us_split_fields)) (member__function_guard
  (member1 (us_repqtmk table__split_fields5) 7)
  (us_repqtmk table__split_fields5) 7)))

;; H
  (assert
  (forall ((temp___289 us_rep) (e Int)) (member__function_guard
  (member1 temp___289 e) temp___289 e)))

;; H
  (assert
  (forall ((table__split_fields5 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields5) e)
  (us_repqtmk table__split_fields5) e)))

;; H
  (assert
  (forall ((temp___292 us_rep) (e Int)) (member__function_guard
  (member1 temp___292 e) temp___292 e)))

;; H
  (assert
  (forall ((table__split_fields5 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields5) e)
  (us_repqtmk table__split_fields5) e)))

;; H
  (assert
  (= (length2 (us_repqtmk table__split_fields4)) (+ (length2
                                                    (us_repqtmk
                                                    table__split_fields3)) 1)))

;; H
  (assert (= (member1 (us_repqtmk table__split_fields4) 7) true))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields3) e) true))
  (= (member1 (us_repqtmk table__split_fields4) e) true))))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields4) e) true))
  (or (= e 7) (= (member1 (us_repqtmk table__split_fields3) e) true)))))

;; H
  (assert true)

(declare-const table__split_fields5 us_split_fields)

;; H
  (assert
  (forall ((table__split_fields6 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields6))
  (us_repqtmk table__split_fields6))))

;; H
  (assert
  (forall ((table__split_fields6 us_split_fields)) (length__function_guard
  (length2 (us_repqtmk table__split_fields6))
  (us_repqtmk table__split_fields6))))

;; H
  (assert
  (forall ((table__split_fields6 us_split_fields)) (member__function_guard
  (member1 (us_repqtmk table__split_fields6) 11)
  (us_repqtmk table__split_fields6) 11)))

;; H
  (assert
  (forall ((temp___289 us_rep) (e Int)) (member__function_guard
  (member1 temp___289 e) temp___289 e)))

;; H
  (assert
  (forall ((table__split_fields6 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields6) e)
  (us_repqtmk table__split_fields6) e)))

;; H
  (assert
  (forall ((temp___292 us_rep) (e Int)) (member__function_guard
  (member1 temp___292 e) temp___292 e)))

;; H
  (assert
  (forall ((table__split_fields6 us_split_fields) (e Int))
  (member__function_guard (member1 (us_repqtmk table__split_fields6) e)
  (us_repqtmk table__split_fields6) e)))

;; H
  (assert
  (= (length2 (us_repqtmk table__split_fields5)) (+ (length2
                                                    (us_repqtmk
                                                    table__split_fields4)) 1)))

;; H
  (assert (= (member1 (us_repqtmk table__split_fields5) 11) true))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields4) e) true))
  (= (member1 (us_repqtmk table__split_fields5) e) true))))

;; H
  (assert
  (forall ((e Int))
  (=>
  (and (in_range5 e) (= (member1 (us_repqtmk table__split_fields5) e) true))
  (or (= e 11) (= (member1 (us_repqtmk table__split_fields4) e) true)))))

;; H
  (assert true)

(define-fun o () us_rep (us_repqtmk table__split_fields5))

(define-fun o1 () Int (first4 o))

;; H
  (assert (first__function_guard o1 o))

;; H
  (assert (dynamic_invariant o1 true false true true))

(declare-const i Int)

;; H
  (assert (= i o1))

(define-fun o2 () us_rep (us_repqtmk table__split_fields5))

(define-fun o3 () Bool (has_element o2 i))

;; H
  (assert (has_element__function_guard o3 o2 i))

;; H
  (assert
  (= (= o3 true)
  (and (< i 33)
  (<= i (to_rep2 (rec__repro_main__int_table__t__last table__split_fields5))))))

;; H
  (assert (= o3 true))

(define-fun o4 () us_rep (us_repqtmk table__split_fields5))

(define-fun o5 () Int (element o4 i))

;; H
  (assert (element__function_guard o5 o4 i))

;; H
  (assert (dynamic_invariant2 o5 true false true true))

;; H
  (assert
  (= o5 (to_rep3
        (select (rec__repro_main__int_table__t__elems table__split_fields5) 
        i))))

(declare-const standard_in1 us_private)

(declare-const file_system1 us_private)

(declare-const standard_out1 us_private)

(declare-const standard_err1 us_private)

(declare-const current_in1 us_private)

(declare-const current_out1 us_private)

(declare-const current_err1 us_private)

;; H
  (assert
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))

;; H
  (assert
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))

(declare-const i1 Int)

(declare-const standard_in2 us_private)

(declare-const file_system2 us_private)

(declare-const standard_out2 us_private)

(declare-const standard_err2 us_private)

(declare-const current_in2 us_private)

(declare-const current_out2 us_private)

(declare-const current_err2 us_private)

;; H
  (assert
  (forall ((table__split_fields6 us_split_fields) (i2 Int))
  (has_element__function_guard
  (has_element (us_repqtmk table__split_fields6) i2)
  (us_repqtmk table__split_fields6) i2)))

;; H
  (assert
  (= (and (ite (dynamic_invariant i1 true true true true) true false) 
  (has_element (us_repqtmk table__split_fields5) i1)) true))

(declare-const temp___306 Int)

;; H
  (assert (= temp___306 (index_of i1)))

(define-fun o6 () us_rep (us_repqtmk table__split_fields5))

(define-fun o7 () Int (next o6 i1))

;; H
  (assert
  (forall ((o8 us_rep) (o9 Int)) (has_element__function_guard
  (has_element o8 o9) o8 o9)))

;; H
  (assert (forall ((i2 Int)) (index_of__function_guard (index_of i2) i2)))

;; H
  (assert (forall ((o8 Int)) (index_of__function_guard (index_of o8) o8)))

;; H
  (assert (next__function_guard o7 o6 i1))

;; H
  (assert (dynamic_invariant o7 true false true true))

;; H
  (assert (=> (= (has_element o6 o7) true) (< (index_of i1) (index_of o7))))

(define-fun o8 () us_rep (us_repqtmk table__split_fields5))

(define-fun o9 () Bool (has_element o8 o7))

;; H
  (assert (has_element__function_guard o9 o8 o7))

;; H
  (assert
  (= (= o9 true)
  (and (< o7 33)
  (<= o7 (to_rep2 (rec__repro_main__int_table__t__last table__split_fields5))))))

;; H
  (assert (= o9 true))

(define-fun o10 () us_rep (us_repqtmk table__split_fields5))

(define-fun o11 () Int (next o10 i1))

;; H
  (assert
  (forall ((o12 us_rep) (o13 Int)) (has_element__function_guard
  (has_element o12 o13) o12 o13)))

;; H
  (assert (forall ((i2 Int)) (index_of__function_guard (index_of i2) i2)))

;; H
  (assert (forall ((o12 Int)) (index_of__function_guard (index_of o12) o12)))

;; H
  (assert (next__function_guard o11 o10 i1))

;; H
  (assert (dynamic_invariant o11 true false true true))

;; H
  (assert
  (=> (= (has_element o10 o11) true) (< (index_of i1) (index_of o11))))

(declare-const i2 Int)

;; H
  (assert (= i2 o11))

(define-fun o12 () us_rep (us_repqtmk table__split_fields5))

(define-fun o13 () Int (element o12 i2))

;; H
  (assert (element__function_guard o13 o12 i2))

;; H
  (assert (dynamic_invariant2 o13 true false true true))

;; H
  (assert
  (= o13 (to_rep3
         (select (rec__repro_main__int_table__t__elems table__split_fields5) 
         i2))))

(declare-const standard_in3 us_private)

(declare-const file_system3 us_private)

(declare-const standard_out3 us_private)

(declare-const standard_err3 us_private)

(declare-const current_in3 us_private)

(declare-const current_out3 us_private)

(declare-const current_err3 us_private)

;; H
  (assert
  (= (line_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (line_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))

;; H
  (assert
  (= (page_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (page_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))

;; H
  (assert (forall ((i3 Int)) (index_of__function_guard (index_of i3) i3)))

(assert
;; defqtvc
 ;; File "repro_main.adb", line 4, characters 0-0
  (not (< temp___306 (index_of i2))))
(check-sat)
