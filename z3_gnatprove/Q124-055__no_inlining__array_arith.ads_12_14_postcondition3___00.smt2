(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-fun ident (Int Int) Int)

(declare-fun ident__function_guard (Int Int Int) Bool)

;; ident__post_axiom
  (assert
  (forall ((y Int) (array_arith__init2__one Int))
  (! (=>
     (and (dynamic_invariant1 y true true true true) (dynamic_invariant
     array_arith__init2__one true true true true))
     (let ((result (ident y array_arith__init2__one)))
     (=> (ident__function_guard result y array_arith__init2__one)
     (dynamic_invariant1 result true false true true)))) :pattern ((ident y
                                                                   array_arith__init2__one)) )))

(declare-const x (Array Int natural))

;; Assume
  (assert true)

(declare-const one Int)

;; H
  (assert (= one 1))

;; Assume
  (assert (dynamic_invariant one true false true true))

(define-fun o () Int (ident 1 one))

;; H
  (assert (ident__function_guard o 1 one))

;; H
  (assert (dynamic_invariant1 o true false true true))

(declare-const o1 natural)

;; Ensures
  (assert (= (to_rep o1) o))

(declare-const x1 (Array Int natural))

;; H
  (assert (= x1 (store x 1 o1)))

(define-fun o2 () Int (ident 2 one))

;; H
  (assert (ident__function_guard o2 2 one))

;; H
  (assert (dynamic_invariant1 o2 true false true true))

(declare-const o3 natural)

;; Ensures
  (assert (= (to_rep o3) o2))

(declare-const x2 (Array Int natural))

;; H
  (assert (= x2 (store x1 2 o3)))

(define-fun o4 () Int (ident 3 one))

;; H
  (assert (ident__function_guard o4 3 one))

;; H
  (assert (dynamic_invariant1 o4 true false true true))

(declare-const o5 natural)

;; Ensures
  (assert (= (to_rep o5) o4))

(declare-const x3 (Array Int natural))

;; H
  (assert (= x3 (store x2 3 o5)))

(define-fun o6 () Int (ident 4 one))

;; H
  (assert (ident__function_guard o6 4 one))

;; H
  (assert (dynamic_invariant1 o6 true false true true))

(declare-const o7 natural)

;; Ensures
  (assert (= (to_rep o7) o6))

(declare-const x4 (Array Int natural))

;; H
  (assert (= x4 (store x3 4 o7)))

(define-fun o8 () Int (ident 5 one))

;; H
  (assert (ident__function_guard o8 5 one))

;; H
  (assert (dynamic_invariant1 o8 true false true true))

(declare-const o9 natural)

;; Ensures
  (assert (= (to_rep o9) o8))

(declare-const x5 (Array Int natural))

;; H
  (assert (= x5 (store x4 5 o9)))

(define-fun o10 () Int (ident 6 one))

;; H
  (assert (ident__function_guard o10 6 one))

;; H
  (assert (dynamic_invariant1 o10 true false true true))

(declare-const o11 natural)

;; Ensures
  (assert (= (to_rep o11) o10))

(declare-const x6 (Array Int natural))

;; H
  (assert (= x6 (store x5 6 o11)))

(define-fun o12 () Int (ident 7 one))

;; H
  (assert (ident__function_guard o12 7 one))

;; H
  (assert (dynamic_invariant1 o12 true false true true))

(declare-const o13 natural)

;; Ensures
  (assert (= (to_rep o13) o12))

(declare-const x7 (Array Int natural))

;; H
  (assert (= x7 (store x6 7 o13)))

(define-fun o14 () Int (ident 8 one))

;; H
  (assert (ident__function_guard o14 8 one))

;; H
  (assert (dynamic_invariant1 o14 true false true true))

(declare-const o15 natural)

;; Ensures
  (assert (= (to_rep o15) o14))

(declare-const x8 (Array Int natural))

;; H
  (assert (= x8 (store x7 8 o15)))

(define-fun o16 () Int (ident 9 one))

;; H
  (assert (ident__function_guard o16 9 one))

;; H
  (assert (dynamic_invariant1 o16 true false true true))

(declare-const o17 natural)

;; Ensures
  (assert (= (to_rep o17) o16))

(declare-const x9 (Array Int natural))

;; H
  (assert (= x9 (store x8 9 o17)))

(define-fun o18 () Int (ident 10 one))

;; H
  (assert (ident__function_guard o18 10 one))

;; H
  (assert (dynamic_invariant1 o18 true false true true))

(declare-const o19 natural)

;; Ensures
  (assert (= (to_rep o19) o18))

(declare-const x10 (Array Int natural))

;; H
  (assert (= x10 (store x9 10 o19)))

(declare-const j Int)

;; H
  (assert (<= 1 j))

;; H
  (assert (<= j 10))

(assert
;; defqtvc
 ;; File "array_arith.ads", line 11, characters 0-0
  (not (= (to_rep (select x10 j)) (+ j 1))))
(check-sat)
