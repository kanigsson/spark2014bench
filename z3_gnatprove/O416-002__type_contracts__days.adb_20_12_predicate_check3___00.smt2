(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort day 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (day day) Bool)

(declare-const dummy day)

(declare-datatypes () ((day__ref (day__refqtmk (day__content day)))))
(define-fun day__ref_day__content__projection ((a day__ref)) day (day__content
                                                                 a))

(define-fun dynamic_invariant ((temp___expr_159 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)
  (temp___do_typ_inv_158 Bool)) Bool (=>
                                     (or (= temp___is_init_155 true)
                                     (<= 0 6)) (in_range1 temp___expr_159)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i1s Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort t_day 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (t_day t_day) Bool)

(declare-const dummy1 t_day)

(declare-datatypes () ((t_day__ref (t_day__refqtmk (t_day__content t_day)))))
(define-fun t_day__ref_t_day__content__projection ((a t_day__ref)) t_day 
  (t_day__content a))

(define-fun dynamic_invariant1 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 0 6)) (in_range2 temp___expr_166))
                                     (=> (= temp___do_toplevel_164 true)
                                     (=> (= temp___is_init_162 true)
                                     (or
                                     (and (<= 1 temp___expr_166)
                                     (<= temp___expr_166 1))
                                     (and (<= 3 temp___expr_166)
                                     (<= temp___expr_166 3)))))))

(define-fun dynamic_predicate ((temp___170 Int)) Bool (or
                                                      (and (<= 1 temp___170)
                                                      (<= temp___170 1))
                                                      (and (<= 3 temp___170)
                                                      (<= temp___170 3))))

(declare-const d Int)

;; Assume
  (assert (dynamic_invariant1 i1s true false true true))

;; Assume
  (assert (dynamic_invariant1 i1s true false true true))

;; Assume
  (assert (dynamic_invariant1 d true false true true))

(declare-const tmp Int)

;; H
  (assert (= tmp d))

;; Assume
  (assert (dynamic_invariant tmp true false true true))

(declare-const tmp1 Int)

;; Ensures
  (assert (dynamic_invariant tmp1 true true true true))

(declare-const tmp2 Int)

;; H
  (assert
  (ite (not
       (= (and (ite (in_range2 tmp1) true false) (ite (or
                                                      (and (<= 1 tmp1)
                                                      (<= tmp1 1))
                                                      (and (<= 3 tmp1)
                                                      (<= tmp1 3)))
                                                 true false)) true))
  (exists ((tmp3 Int))
  (and
  (= (and (ite (dynamic_invariant tmp3 true true true true) true false) 
  (ite (= (not (and (ite (in_range2 tmp3) true false) (ite (or
                                                           (and (<= 1 tmp3)
                                                           (<= tmp3 1))
                                                           (and (<= 3 tmp3)
                                                           (<= tmp3 3)))
                                                      true false))) true)
  true false)) true)
  (and (dynamic_invariant tmp2 true true true true)
  (= (and (ite (in_range2 tmp2) true false) (ite (or
                                                 (and (<= 1 tmp2)
                                                 (<= tmp2 1))
                                                 (and (<= 3 tmp2)
                                                 (<= tmp2 3)))
                                            true false)) true))))
  (= tmp2 tmp1)))

(assert
;; defqtvc
 ;; File "days.ads", line 11, characters 0-0
  (not (or (and (<= 1 tmp2) (<= tmp2 1)) (and (<= 3 tmp2) (<= tmp2 3)))))
(check-sat)

(exit)
