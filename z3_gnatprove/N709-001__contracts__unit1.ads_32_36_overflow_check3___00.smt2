(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__unit1__t1__c1 integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__unit1__t1__c1__projection ((a us_split_fields)) integer 
  (rec__unit1__t1__c1 a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__unit1__t1__c1 (us_split_fields1 a))) 
                   (to_rep (rec__unit1__t1__c1 (us_split_fields1 b)))) true
                   false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const unit1__t1__c1__first__bit Int)

(declare-const unit1__t1__c1__last__bit Int)

(declare-const unit1__t1__c1__position Int)

;; unit1__t1__c1__first__bit_axiom
  (assert (<= 0 unit1__t1__c1__first__bit))

;; unit1__t1__c1__last__bit_axiom
  (assert (< unit1__t1__c1__first__bit unit1__t1__c1__last__bit))

;; unit1__t1__c1__position_axiom
  (assert (<= 0 unit1__t1__c1__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((t1__ref (t1__refqtmk (t1__content us_rep)))))
(define-fun t1__ref_t1__content__projection ((a t1__ref)) us_rep (t1__content
                                                                 a))

(define-fun default_initial_assumption ((temp___expr_162 us_rep)
  (temp___skip_top_level_163 Bool)) Bool (= (attr__tag temp___expr_162) 
  us_tag))

(declare-fun is_max (us_rep) Bool)

(declare-fun is_max__function_guard (Bool us_rep) Bool)

(declare-fun is_max1 (Int us_rep) Bool)

(declare-fun is_max__function_guard1 (Bool Int us_rep) Bool)

(declare-const x__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

;; is_max__post_axiom
  (assert true)

;; is_max__post__dispatch_axiom
  (assert true)

;; unit1__t1__compat_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (is_max__function_guard1 (is_max1 us_tag x) us_tag x)
     (and (forall ((x1 us_rep)) (is_max__function_guard (is_max x1) x1))
     (= (ite (is_max x) 1 0) (ite (is_max1 us_tag x) 1 0)))) :pattern (
  (is_max1 us_tag x)) )))

;; is_max__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (= (is_max x) true)
     (= (to_rep (rec__unit1__t1__c1 (us_split_fields1 x))) 2147483647)) :pattern (
  (is_max x)) )))

(declare-const x__split_fields us_split_fields)

(declare-const x__split_fields1 us_split_fields)

;; H
  (assert (= x__split_fields1 x__split_fields))

;; Assume
  (assert true)

;; H
  (assert
  (forall ((x__split_fields2 us_split_fields)) (is_max__function_guard
  (is_max (us_repqtmk x__split_fields2 x__attr__tag))
  (us_repqtmk x__split_fields2 x__attr__tag))))

;; Assume
  (assert (not (= (is_max (us_repqtmk x__split_fields x__attr__tag)) true)))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep (rec__unit1__t1__c1 x__split_fields)) o))

(define-fun o1 () Int (+ o 1))

;; Ensures
  (assert (in_range o1))

(declare-const o2 integer)

;; Ensures
  (assert (= (to_rep o2) o1))

(declare-const x__split_fields2 us_split_fields)

;; H
  (assert
  (= x__split_fields2 (us_split_fieldsqtmk o2 (rec__ext__ x__split_fields))))

(assert
;; defqtvc
 ;; File "unit1.ads", line 27, characters 0-0
  (not (in_range (+ (to_rep (rec__unit1__t1__c1 x__split_fields)) 1))))
(check-sat)

(exit)
