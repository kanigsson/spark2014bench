(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort stb 0)

(declare-fun stbqtint (stb) Int)

;; stb'axiom
  (assert (forall ((i stb)) (and (<= 1 (stbqtint i)) (<= (stbqtint i) 10))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (stb stb) Bool)

(declare-const dummy stb)

(declare-datatypes () ((stb__ref (stb__refqtmk (stb__content stb)))))
(define-fun stb__ref_stb__content__projection ((a stb__ref)) stb (stb__content
                                                                 a))

(define-fun to_rep ((x stb)) Int (stbqtint x))

(declare-fun of_rep (Int) stb)

;; inversion_axiom
  (assert
  (forall ((x stb)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x stb)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes () ((tb__ref (tb__refqtmk (tb__content us_t)))))
(define-fun tb__ref_tb__content__projection ((a tb__ref)) us_t (tb__content
                                                               a))

(declare-datatypes () ((t6b__ref (t6b__refqtmk (t6b__content us_t)))))
(define-fun t6b__ref_t6b__content__projection ((a t6b__ref)) us_t (t6b__content
                                                                  a))

(declare-datatypes ()
((us_split_discrs (us_split_discrsqtmk (rec__discr_dyn__r2__a stb)))))
(define-fun us_split_discrs_rec__discr_dyn__r2__a__projection ((a us_split_discrs)) stb 
  (rec__discr_dyn__r2__a a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__discr_dyn__r2__b us_t)(rec__discr_dyn__r2__c Bool)))))
(define-fun us_split_fields_rec__discr_dyn__r2__b__projection ((a us_split_fields)) us_t 
  (rec__discr_dyn__r2__b a))

(define-fun us_split_fields_rec__discr_dyn__r2__c__projection ((a us_split_fields)) Bool 
  (rec__discr_dyn__r2__c a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__discr_dyn__r2__a (us_split_discrs1 a))) 
                        (to_rep (rec__discr_dyn__r2__a (us_split_discrs1 b))))
                        (and
                        (= (bool_eq1
                           (rec__discr_dyn__r2__b (us_split_fields1 a))
                           (rec__discr_dyn__r2__b (us_split_fields1 b))) true)
                        (= (ite (rec__discr_dyn__r2__c (us_split_fields1 a)) 1 0) (ite 
                        (rec__discr_dyn__r2__c (us_split_fields1 b)) 1 0))))
                   true false))

(define-fun in_range3 ((rec__discr_dyn__r2__a1 Int)
  (a us_split_discrs)) Bool (= rec__discr_dyn__r2__a1 (to_rep
                                                      (rec__discr_dyn__r2__a
                                                      a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const discr_dyn__r2__a__first__bit Int)

(declare-const discr_dyn__r2__a__last__bit Int)

(declare-const discr_dyn__r2__a__position Int)

;; discr_dyn__r2__a__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__a__first__bit))

;; discr_dyn__r2__a__last__bit_axiom
  (assert (< discr_dyn__r2__a__first__bit discr_dyn__r2__a__last__bit))

;; discr_dyn__r2__a__position_axiom
  (assert (<= 0 discr_dyn__r2__a__position))

(declare-const discr_dyn__r2__b__first__bit Int)

(declare-const discr_dyn__r2__b__last__bit Int)

(declare-const discr_dyn__r2__b__position Int)

;; discr_dyn__r2__b__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__b__first__bit))

;; discr_dyn__r2__b__last__bit_axiom
  (assert (< discr_dyn__r2__b__first__bit discr_dyn__r2__b__last__bit))

;; discr_dyn__r2__b__position_axiom
  (assert (<= 0 discr_dyn__r2__b__position))

(declare-const discr_dyn__r2__c__first__bit Int)

(declare-const discr_dyn__r2__c__last__bit Int)

(declare-const discr_dyn__r2__c__position Int)

;; discr_dyn__r2__c__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__c__first__bit))

;; discr_dyn__r2__c__last__bit_axiom
  (assert (< discr_dyn__r2__c__first__bit discr_dyn__r2__c__last__bit))

;; discr_dyn__r2__c__position_axiom
  (assert (<= 0 discr_dyn__r2__c__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((r2__ref (r2__refqtmk (r2__content us_rep)))))
(define-fun r2__ref_r2__content__projection ((a r2__ref)) us_rep (r2__content
                                                                 a))

(declare-sort tT10bP1 0)

(declare-fun tT10bP1qtint (tT10bP1) Int)

;; tT10bP1'axiom
  (assert
  (forall ((i tT10bP1))
  (and (<= 1 (tT10bP1qtint i)) (<= (tT10bP1qtint i) 3))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (tT10bP1 tT10bP1) Bool)

(declare-const dummy4 tT10bP1)

(declare-datatypes ()
((tT10bP1__ref (tT10bP1__refqtmk (tT10bP1__content tT10bP1)))))
(define-fun tT10bP1__ref_tT10bP1__content__projection ((a tT10bP1__ref)) tT10bP1 
  (tT10bP1__content a))

(declare-const dummy5 (Array Int integer))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq5 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__discr_dyn__r2__b1 (Array Int integer))(rec__discr_dyn__r2__c1 Bool)))))
(define-fun us_split_fields_rec__discr_dyn__r2__b__2__projection ((a us_split_fields2)) (Array Int integer) 
  (rec__discr_dyn__r2__b1 a))

(define-fun us_split_fields_rec__discr_dyn__r2__c__2__projection ((a us_split_fields2)) Bool 
  (rec__discr_dyn__r2__c1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (us_repqtmk1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (of_array
                                         (rec__discr_dyn__r2__b1
                                         (us_split_fields3 a)) 1 3)
                                         (rec__discr_dyn__r2__c1
                                         (us_split_fields3 a)))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___155 (rec__discr_dyn__r2__b
                                                           (us_split_fields1
                                                           r))))
                                         (to_array temp___155))
                                         (rec__discr_dyn__r2__c
                                         (us_split_fields1 r)))))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep
                            (rec__discr_dyn__r2__a (us_split_discrs2 a))) 
                         (to_rep
                         (rec__discr_dyn__r2__a (us_split_discrs2 b))))
                         (and
                         (= (bool_eq
                            (rec__discr_dyn__r2__b1 (us_split_fields3 a)) 1 3
                            (rec__discr_dyn__r2__b1 (us_split_fields3 b)) 1
                            3) true)
                         (= (ite (rec__discr_dyn__r2__c1
                                 (us_split_fields3 a)) 1 0) (ite (rec__discr_dyn__r2__c1
                                                                 (us_split_fields3
                                                                 b)) 1 0))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const discr_dyn__r2__a__first__bit1 Int)

(declare-const discr_dyn__r2__a__last__bit1 Int)

(declare-const discr_dyn__r2__a__position1 Int)

;; discr_dyn__r2__a__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__a__first__bit1))

;; discr_dyn__r2__a__last__bit_axiom
  (assert (< discr_dyn__r2__a__first__bit1 discr_dyn__r2__a__last__bit1))

;; discr_dyn__r2__a__position_axiom
  (assert (<= 0 discr_dyn__r2__a__position1))

(declare-const discr_dyn__r2__b__first__bit1 Int)

(declare-const discr_dyn__r2__b__last__bit1 Int)

(declare-const discr_dyn__r2__b__position1 Int)

;; discr_dyn__r2__b__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__b__first__bit1))

;; discr_dyn__r2__b__last__bit_axiom
  (assert (< discr_dyn__r2__b__first__bit1 discr_dyn__r2__b__last__bit1))

;; discr_dyn__r2__b__position_axiom
  (assert (<= 0 discr_dyn__r2__b__position1))

(declare-const discr_dyn__r2__c__first__bit1 Int)

(declare-const discr_dyn__r2__c__last__bit1 Int)

(declare-const discr_dyn__r2__c__position1 Int)

;; discr_dyn__r2__c__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__c__first__bit1))

;; discr_dyn__r2__c__last__bit_axiom
  (assert (< discr_dyn__r2__c__first__bit1 discr_dyn__r2__c__last__bit1))

;; discr_dyn__r2__c__position_axiom
  (assert (<= 0 discr_dyn__r2__c__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes () ((tb1S__ref (tb1S__refqtmk (tb1S__content us_rep1)))))
(define-fun tb1S__ref_tb1S__content__projection ((a tb1S__ref)) us_rep1 
  (tb1S__content a))

(declare-const b1__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_202 us_rep1)
  (temp___is_init_198 Bool) (temp___skip_constant_199 Bool)
  (temp___do_toplevel_200 Bool)
  (temp___do_typ_inv_201 Bool)) Bool (=>
                                     (not (= temp___skip_constant_199 true))
                                     (in_range3 3
                                     (us_split_discrs1
                                     (to_base temp___expr_202)))))

(define-fun default_initial_assumption ((temp___expr_205 us_rep1)
  (temp___skip_top_level_206 Bool)) Bool (= (to_rep
                                            (rec__discr_dyn__r2__a
                                            (us_split_discrs2
                                            temp___expr_205))) 3))

(define-fun dynamic_invariant1 ((temp___expr_182 Int)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (or (= temp___is_init_178 true)
                                     (<= 1 10)) (in_range1 temp___expr_182)))

(declare-sort tT15bP1 0)

(declare-fun tT15bP1qtint (tT15bP1) Int)

;; tT15bP1'axiom
  (assert
  (forall ((i tT15bP1))
  (and (<= 1 (tT15bP1qtint i)) (<= (tT15bP1qtint i) 2))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq7 (tT15bP1 tT15bP1) Bool)

(declare-const dummy7 tT15bP1)

(declare-datatypes ()
((tT15bP1__ref (tT15bP1__refqtmk (tT15bP1__content tT15bP1)))))
(define-fun tT15bP1__ref_tT15bP1__content__projection ((a tT15bP1__ref)) tT15bP1 
  (tT15bP1__content a))

(declare-const dummy8 (Array Int integer))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size2 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq8 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__discr_dyn__r2__b2 (Array Int integer))(rec__discr_dyn__r2__c2 Bool)))))
(define-fun us_split_fields_rec__discr_dyn__r2__b__3__projection ((a us_split_fields4)) (Array Int integer) 
  (rec__discr_dyn__r2__b2 a))

(define-fun us_split_fields_rec__discr_dyn__r2__c__3__projection ((a us_split_fields4)) Bool 
  (rec__discr_dyn__r2__c2 a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (us_repqtmk2
 (us_split_discrs3 us_split_discrs)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__3__projection ((a us_rep2)) us_split_discrs 
  (us_split_discrs3 a))

(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun to_base1 ((a us_rep2)) us_rep (us_repqtmk (us_split_discrs3 a)
                                          (us_split_fieldsqtmk
                                          (of_array
                                          (rec__discr_dyn__r2__b2
                                          (us_split_fields5 a)) 1 2)
                                          (rec__discr_dyn__r2__c2
                                          (us_split_fields5 a)))))

(define-fun of_base1 ((r us_rep)) us_rep2 (us_repqtmk2 (us_split_discrs1 r)
                                          (us_split_fieldsqtmk2
                                          (let ((temp___156 (rec__discr_dyn__r2__b
                                                            (us_split_fields1
                                                            r))))
                                          (to_array temp___156))
                                          (rec__discr_dyn__r2__c
                                          (us_split_fields1 r)))))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep
                            (rec__discr_dyn__r2__a (us_split_discrs3 a))) 
                         (to_rep
                         (rec__discr_dyn__r2__a (us_split_discrs3 b))))
                         (and
                         (= (bool_eq
                            (rec__discr_dyn__r2__b2 (us_split_fields5 a)) 1 2
                            (rec__discr_dyn__r2__b2 (us_split_fields5 b)) 1
                            2) true)
                         (= (ite (rec__discr_dyn__r2__c2
                                 (us_split_fields5 a)) 1 0) (ite (rec__discr_dyn__r2__c2
                                                                 (us_split_fields5
                                                                 b)) 1 0))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const discr_dyn__r2__a__first__bit2 Int)

(declare-const discr_dyn__r2__a__last__bit2 Int)

(declare-const discr_dyn__r2__a__position2 Int)

;; discr_dyn__r2__a__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__a__first__bit2))

;; discr_dyn__r2__a__last__bit_axiom
  (assert (< discr_dyn__r2__a__first__bit2 discr_dyn__r2__a__last__bit2))

;; discr_dyn__r2__a__position_axiom
  (assert (<= 0 discr_dyn__r2__a__position2))

(declare-const discr_dyn__r2__b__first__bit2 Int)

(declare-const discr_dyn__r2__b__last__bit2 Int)

(declare-const discr_dyn__r2__b__position2 Int)

;; discr_dyn__r2__b__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__b__first__bit2))

;; discr_dyn__r2__b__last__bit_axiom
  (assert (< discr_dyn__r2__b__first__bit2 discr_dyn__r2__b__last__bit2))

;; discr_dyn__r2__b__position_axiom
  (assert (<= 0 discr_dyn__r2__b__position2))

(declare-const discr_dyn__r2__c__first__bit2 Int)

(declare-const discr_dyn__r2__c__last__bit2 Int)

(declare-const discr_dyn__r2__c__position2 Int)

;; discr_dyn__r2__c__first__bit_axiom
  (assert (<= 0 discr_dyn__r2__c__first__bit2))

;; discr_dyn__r2__c__last__bit_axiom
  (assert (< discr_dyn__r2__c__first__bit2 discr_dyn__r2__c__last__bit2))

;; discr_dyn__r2__c__position_axiom
  (assert (<= 0 discr_dyn__r2__c__position2))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes () ((t14b__ref (t14b__refqtmk (t14b__content us_rep2)))))
(define-fun t14b__ref_t14b__content__projection ((a t14b__ref)) us_rep2 
  (t14b__content a))

(declare-fun temp_____aggregate_def_215 (Int Int) (Array Int integer))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(define-fun dynamic_invariant3 ((temp___expr_195 us_rep)
  (temp___is_init_191 Bool) (temp___skip_constant_192 Bool)
  (temp___do_toplevel_193 Bool)
  (temp___do_typ_inv_194 Bool)) Bool (let ((temp___196 (rec__discr_dyn__r2__a
                                                       (us_split_discrs1
                                                       temp___expr_195))))
                                     (and (dynamic_property 1
                                     (to_rep temp___196)
                                     (first1
                                     (rec__discr_dyn__r2__b
                                     (us_split_fields1 temp___expr_195)))
                                     (last1
                                     (rec__discr_dyn__r2__b
                                     (us_split_fields1 temp___expr_195))))
                                     (and
                                     (= (first1
                                        (rec__discr_dyn__r2__b
                                        (us_split_fields1 temp___expr_195))) 1)
                                     (= (last1
                                        (rec__discr_dyn__r2__b
                                        (us_split_fields1 temp___expr_195))) 
                                     (to_rep temp___196))))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) (- 1)))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) (- 2)))

;; def_axiom
  (assert
  (forall ((temp___217 Int) (temp___218 Int))
  (let ((temp___216 (temp_____aggregate_def_215 temp___217 temp___218)))
  (=>
  (and (dynamic_invariant2 temp___217 true true true true)
  (dynamic_invariant2 temp___218 true true true true))
  (and (= (select temp___216 1) rliteral)
  (= (select temp___216 2) rliteral1))))))

(declare-const usf Int)

;; Ensures
  (assert (dynamic_invariant1 usf true true true true))

(declare-const usf1 us_rep)

;; Ensures
  (assert (= (to_rep (rec__discr_dyn__r2__a (us_split_discrs1 usf1))) 
  usf))

(assert
;; defqtvc
 ;; File "discr_dyn.adb", line 1, characters 0-0
  (not (in_range1 3)))
(check-sat)
