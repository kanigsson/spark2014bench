;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float64)))))
(declare-sort long_float 0)

(declare-fun user_eq (long_float long_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Float64)

(declare-const dummy long_float)

(declare-datatypes ()
((long_float__ref (long_float__refqtmk (long_float__content long_float)))))
(define-fun long_float__ref_long_float__content__projection ((a long_float__ref)) long_float 
  (long_float__content a))

(define-fun dynamic_invariant ((temp___expr_67 Float64)
  (temp___is_init_63 Bool) (temp___skip_constant_64 Bool)
  (temp___do_toplevel_65 Bool)
  (temp___do_typ_inv_66 Bool)) Bool (=>
                                    (or (= temp___is_init_63 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)) (fp #b0 #b11111111110 #b1111111111111111111111111111111111111111111111111111)))
                                    (fp.isFinite64 temp___expr_67)))

(declare-const new_value Float64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const prior_value Float64)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const smoothing_factor Float64)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const smoothed_value Float64)

(declare-const abs_delta_out1 Float64)

(declare-const smoother_value_out1 Float64)

(declare-const abs_new_delta_out1 Float64)

;; Assume
  (assert (dynamic_invariant new_value true false true true))

;; Assume
  (assert (dynamic_invariant prior_value true false true true))

;; Assume
  (assert (dynamic_invariant smoothing_factor true false true true))

;; Assume
  (assert (dynamic_invariant smoothed_value false false true true))

;; Assume
  (assert
  (and
  (and
  (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) 
  smoothing_factor)
  (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) 
  new_value))
  (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) 
  prior_value)))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant abs_delta_out1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant smoother_value_out1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant abs_new_delta_out1 false false true true))

(define-fun o () Float64 (fp.sub RNE new_value prior_value))

;; Ensures
  (assert (fp.isFinite64 o))

(declare-const abs_delta_out11 Float64)

;; H
  (assert (= abs_delta_out11 (fp.abs o)))

(declare-const compare_to_zero_out1 Bool)

;; H
  (assert
  (= compare_to_zero_out1 (ite (fp.eq abs_delta_out11 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000))
                          true false)))

;; Assert
  (assert
  (fp.lt (fp #b0 #b01111111111 #b0000000000000000000000000000000000000000000000000000) 
  smoothing_factor))

(assert
;; defqtvc
 ;; File "smoothing.ads", line 16, characters 0-0
  (not
  (not (fp.eq smoothing_factor (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)))))
(check-sat)
