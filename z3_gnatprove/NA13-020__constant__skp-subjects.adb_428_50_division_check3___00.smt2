;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const subject_id Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun nth1 ((_ BitVec 32) Int) Bool)

(declare-fun lsr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int2 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv1 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 (_ BitVec 32))))))
(declare-fun power1 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-sort profile_kind 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (profile_kind profile_kind) Bool)

(declare-const dummy profile_kind)

(declare-datatypes ()
((profile_kind__ref
 (profile_kind__refqtmk (profile_kind__content profile_kind)))))
(define-fun profile_kind__ref_profile_kind__content__projection ((a profile_kind__ref)) profile_kind 
  (profile_kind__content a))

(declare-fun to_rep (profile_kind) Int)

(declare-fun of_rep (Int) profile_kind)

;; inversion_axiom
  (assert
  (forall ((x profile_kind))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x profile_kind)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort word32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (word32 word32) Bool)

(declare-const dummy1 word32)

(declare-datatypes ()
((word32__ref (word32__refqtmk (word32__content word32)))))
(define-fun word32__ref_word32__content__projection ((a word32__ref)) word32 
  (word32__content a))

(declare-fun to_rep1 (word32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) word32)

;; inversion_axiom
  (assert
  (forall ((x word32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int3 ((x word32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x word32)) (! (uint_in_range1
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__ada___skp__subjects__vmx_controls_type__exec_pin word32)(rec__ada___skp__subjects__vmx_controls_type__exec_proc word32)(rec__ada___skp__subjects__vmx_controls_type__exec_proc2 word32)(rec__ada___skp__subjects__vmx_controls_type__exit_ctrls word32)(rec__ada___skp__subjects__vmx_controls_type__entry_ctrls word32)))))
(define-fun us_split_fields_rec__ada___skp__subjects__vmx_controls_type__exec_pin__projection ((a us_split_fields)) word32 
  (rec__ada___skp__subjects__vmx_controls_type__exec_pin a))

(define-fun us_split_fields_rec__ada___skp__subjects__vmx_controls_type__exec_proc__projection ((a us_split_fields)) word32 
  (rec__ada___skp__subjects__vmx_controls_type__exec_proc a))

(define-fun us_split_fields_rec__ada___skp__subjects__vmx_controls_type__exec_proc2__projection ((a us_split_fields)) word32 
  (rec__ada___skp__subjects__vmx_controls_type__exec_proc2 a))

(define-fun us_split_fields_rec__ada___skp__subjects__vmx_controls_type__exit_ctrls__projection ((a us_split_fields)) word32 
  (rec__ada___skp__subjects__vmx_controls_type__exit_ctrls a))

(define-fun us_split_fields_rec__ada___skp__subjects__vmx_controls_type__entry_ctrls__projection ((a us_split_fields)) word32 
  (rec__ada___skp__subjects__vmx_controls_type__entry_ctrls a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__ada___skp__subjects__vmx_controls_type__exec_pin
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___skp__subjects__vmx_controls_type__exec_pin
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ada___skp__subjects__vmx_controls_type__exec_proc
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___skp__subjects__vmx_controls_type__exec_proc
                                                  (us_split_fields1 b)))))
                        (and
                        (and
                        (= (to_rep1
                           (rec__ada___skp__subjects__vmx_controls_type__exec_proc2
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___skp__subjects__vmx_controls_type__exec_proc2
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__ada___skp__subjects__vmx_controls_type__exit_ctrls
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___skp__subjects__vmx_controls_type__exit_ctrls
                                                  (us_split_fields1 b)))))
                        (= (to_rep1
                           (rec__ada___skp__subjects__vmx_controls_type__entry_ctrls
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___skp__subjects__vmx_controls_type__entry_ctrls
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const ada___skp__subjects__vmx_controls_type__exec_pin__first__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exec_pin__last__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exec_pin__position Int)

;; ada___skp__subjects__vmx_controls_type__exec_pin__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__exec_pin__first__bit))

;; ada___skp__subjects__vmx_controls_type__exec_pin__last__bit_axiom
  (assert
  (< ada___skp__subjects__vmx_controls_type__exec_pin__first__bit ada___skp__subjects__vmx_controls_type__exec_pin__last__bit))

;; ada___skp__subjects__vmx_controls_type__exec_pin__position_axiom
  (assert (<= 0 ada___skp__subjects__vmx_controls_type__exec_pin__position))

(declare-const ada___skp__subjects__vmx_controls_type__exec_proc__first__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exec_proc__last__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exec_proc__position Int)

;; ada___skp__subjects__vmx_controls_type__exec_proc__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__exec_proc__first__bit))

;; ada___skp__subjects__vmx_controls_type__exec_proc__last__bit_axiom
  (assert
  (< ada___skp__subjects__vmx_controls_type__exec_proc__first__bit ada___skp__subjects__vmx_controls_type__exec_proc__last__bit))

;; ada___skp__subjects__vmx_controls_type__exec_proc__position_axiom
  (assert (<= 0 ada___skp__subjects__vmx_controls_type__exec_proc__position))

(declare-const ada___skp__subjects__vmx_controls_type__exec_proc2__first__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exec_proc2__last__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exec_proc2__position Int)

;; ada___skp__subjects__vmx_controls_type__exec_proc2__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__exec_proc2__first__bit))

;; ada___skp__subjects__vmx_controls_type__exec_proc2__last__bit_axiom
  (assert
  (< ada___skp__subjects__vmx_controls_type__exec_proc2__first__bit ada___skp__subjects__vmx_controls_type__exec_proc2__last__bit))

;; ada___skp__subjects__vmx_controls_type__exec_proc2__position_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__exec_proc2__position))

(declare-const ada___skp__subjects__vmx_controls_type__exit_ctrls__first__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exit_ctrls__last__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__exit_ctrls__position Int)

;; ada___skp__subjects__vmx_controls_type__exit_ctrls__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__exit_ctrls__first__bit))

;; ada___skp__subjects__vmx_controls_type__exit_ctrls__last__bit_axiom
  (assert
  (< ada___skp__subjects__vmx_controls_type__exit_ctrls__first__bit ada___skp__subjects__vmx_controls_type__exit_ctrls__last__bit))

;; ada___skp__subjects__vmx_controls_type__exit_ctrls__position_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__exit_ctrls__position))

(declare-const ada___skp__subjects__vmx_controls_type__entry_ctrls__first__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__entry_ctrls__last__bit Int)

(declare-const ada___skp__subjects__vmx_controls_type__entry_ctrls__position Int)

;; ada___skp__subjects__vmx_controls_type__entry_ctrls__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__entry_ctrls__first__bit))

;; ada___skp__subjects__vmx_controls_type__entry_ctrls__last__bit_axiom
  (assert
  (< ada___skp__subjects__vmx_controls_type__entry_ctrls__first__bit 
  ada___skp__subjects__vmx_controls_type__entry_ctrls__last__bit))

;; ada___skp__subjects__vmx_controls_type__entry_ctrls__position_axiom
  (assert
  (<= 0 ada___skp__subjects__vmx_controls_type__entry_ctrls__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((vmx_controls_type__ref
 (vmx_controls_type__refqtmk (vmx_controls_type__content us_rep)))))
(define-fun vmx_controls_type__ref_vmx_controls_type__content__projection ((a vmx_controls_type__ref)) us_rep 
  (vmx_controls_type__content a))

(declare-sort word64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq3 (word64 word64) Bool)

(declare-const dummy3 word64)

(declare-datatypes ()
((word64__ref (word64__refqtmk (word64__content word64)))))
(define-fun word64__ref_word64__content__projection ((a word64__ref)) word64 
  (word64__content a))

(declare-fun to_rep2 (word64) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) word64)

;; inversion_axiom
  (assert
  (forall ((x word64))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int4 ((x word64)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x word64)) (! (uint_in_range
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort dst_subject_type 0)

(declare-fun dst_subject_typeqtint (dst_subject_type) Int)

;; dst_subject_type'axiom
  (assert
  (forall ((i dst_subject_type))
  (and (<= 0 (dst_subject_typeqtint i)) (<= (dst_subject_typeqtint i) 7))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (dst_subject_type dst_subject_type) Bool)

(declare-const dummy4 dst_subject_type)

(declare-datatypes ()
((dst_subject_type__ref
 (dst_subject_type__refqtmk (dst_subject_type__content dst_subject_type)))))
(define-fun dst_subject_type__ref_dst_subject_type__content__projection ((a dst_subject_type__ref)) dst_subject_type 
  (dst_subject_type__content a))

(define-fun to_rep3 ((x dst_subject_type)) Int (dst_subject_typeqtint x))

(declare-fun of_rep3 (Int) dst_subject_type)

;; inversion_axiom
  (assert
  (forall ((x dst_subject_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x dst_subject_type)) (! (in_range2
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort dst_vector_range 0)

(declare-fun dst_vector_rangeqtint (dst_vector_range) Int)

;; dst_vector_range'axiom
  (assert
  (forall ((i dst_vector_range))
  (and (<= 0 (dst_vector_rangeqtint i)) (<= (dst_vector_rangeqtint i) 256))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 256)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (dst_vector_range dst_vector_range) Bool)

(declare-const dummy5 dst_vector_range)

(declare-datatypes ()
((dst_vector_range__ref
 (dst_vector_range__refqtmk (dst_vector_range__content dst_vector_range)))))
(define-fun dst_vector_range__ref_dst_vector_range__content__projection ((a dst_vector_range__ref)) dst_vector_range 
  (dst_vector_range__content a))

(define-fun to_rep4 ((x dst_vector_range)) Int (dst_vector_rangeqtint x))

(declare-fun of_rep4 (Int) dst_vector_range)

;; inversion_axiom
  (assert
  (forall ((x dst_vector_range))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x dst_vector_range)) (! (in_range3
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__ada___skp__subjects__trap_entry_type__dst_subject dst_subject_type)(rec__ada___skp__subjects__trap_entry_type__dst_vector dst_vector_range)))))
(define-fun us_split_fields_rec__ada___skp__subjects__trap_entry_type__dst_subject__projection ((a us_split_fields2)) dst_subject_type 
  (rec__ada___skp__subjects__trap_entry_type__dst_subject a))

(define-fun us_split_fields_rec__ada___skp__subjects__trap_entry_type__dst_vector__projection ((a us_split_fields2)) dst_vector_range 
  (rec__ada___skp__subjects__trap_entry_type__dst_vector a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep3
                            (rec__ada___skp__subjects__trap_entry_type__dst_subject
                            (us_split_fields3 a))) (to_rep3
                                                   (rec__ada___skp__subjects__trap_entry_type__dst_subject
                                                   (us_split_fields3 b))))
                         (= (to_rep4
                            (rec__ada___skp__subjects__trap_entry_type__dst_vector
                            (us_split_fields3 a))) (to_rep4
                                                   (rec__ada___skp__subjects__trap_entry_type__dst_vector
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const ada___skp__subjects__trap_entry_type__dst_subject__first__bit Int)

(declare-const ada___skp__subjects__trap_entry_type__dst_subject__last__bit Int)

(declare-const ada___skp__subjects__trap_entry_type__dst_subject__position Int)

;; ada___skp__subjects__trap_entry_type__dst_subject__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__trap_entry_type__dst_subject__first__bit))

;; ada___skp__subjects__trap_entry_type__dst_subject__last__bit_axiom
  (assert
  (< ada___skp__subjects__trap_entry_type__dst_subject__first__bit ada___skp__subjects__trap_entry_type__dst_subject__last__bit))

;; ada___skp__subjects__trap_entry_type__dst_subject__position_axiom
  (assert (<= 0 ada___skp__subjects__trap_entry_type__dst_subject__position))

(declare-const ada___skp__subjects__trap_entry_type__dst_vector__first__bit Int)

(declare-const ada___skp__subjects__trap_entry_type__dst_vector__last__bit Int)

(declare-const ada___skp__subjects__trap_entry_type__dst_vector__position Int)

;; ada___skp__subjects__trap_entry_type__dst_vector__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__trap_entry_type__dst_vector__first__bit))

;; ada___skp__subjects__trap_entry_type__dst_vector__last__bit_axiom
  (assert
  (< ada___skp__subjects__trap_entry_type__dst_vector__first__bit ada___skp__subjects__trap_entry_type__dst_vector__last__bit))

;; ada___skp__subjects__trap_entry_type__dst_vector__position_axiom
  (assert (<= 0 ada___skp__subjects__trap_entry_type__dst_vector__position))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ()
((trap_entry_type__ref
 (trap_entry_type__refqtmk (trap_entry_type__content us_rep1)))))
(define-fun trap_entry_type__ref_trap_entry_type__content__projection ((a trap_entry_type__ref)) us_rep1 
  (trap_entry_type__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq1 (select a temp___idx_156)
                              (select b (+ (- b__first a__first) temp___idx_156))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq1 (select a temp___idx_156)
     (select b (+ (- b__first a__first) temp___idx_156))) true))))))))

(declare-const dummy7 (Array Int us_rep1))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq7 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__ada___skp__subjects__event_entry_type__dst_subject dst_subject_type)(rec__ada___skp__subjects__event_entry_type__dst_vector dst_vector_range)(rec__ada___skp__subjects__event_entry_type__handover Bool)(rec__ada___skp__subjects__event_entry_type__send_ipi Bool)))))
(define-fun us_split_fields_rec__ada___skp__subjects__event_entry_type__dst_subject__projection ((a us_split_fields4)) dst_subject_type 
  (rec__ada___skp__subjects__event_entry_type__dst_subject a))

(define-fun us_split_fields_rec__ada___skp__subjects__event_entry_type__dst_vector__projection ((a us_split_fields4)) dst_vector_range 
  (rec__ada___skp__subjects__event_entry_type__dst_vector a))

(define-fun us_split_fields_rec__ada___skp__subjects__event_entry_type__handover__projection ((a us_split_fields4)) Bool 
  (rec__ada___skp__subjects__event_entry_type__handover a))

(define-fun us_split_fields_rec__ada___skp__subjects__event_entry_type__send_ipi__projection ((a us_split_fields4)) Bool 
  (rec__ada___skp__subjects__event_entry_type__send_ipi a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep3
                            (rec__ada___skp__subjects__event_entry_type__dst_subject
                            (us_split_fields5 a))) (to_rep3
                                                   (rec__ada___skp__subjects__event_entry_type__dst_subject
                                                   (us_split_fields5 b))))
                         (= (to_rep4
                            (rec__ada___skp__subjects__event_entry_type__dst_vector
                            (us_split_fields5 a))) (to_rep4
                                                   (rec__ada___skp__subjects__event_entry_type__dst_vector
                                                   (us_split_fields5 b)))))
                         (and
                         (= (ite (rec__ada___skp__subjects__event_entry_type__handover
                                 (us_split_fields5 a)) 1 0) (ite (rec__ada___skp__subjects__event_entry_type__handover
                                                                 (us_split_fields5
                                                                 b)) 1 0))
                         (= (ite (rec__ada___skp__subjects__event_entry_type__send_ipi
                                 (us_split_fields5 a)) 1 0) (ite (rec__ada___skp__subjects__event_entry_type__send_ipi
                                                                 (us_split_fields5
                                                                 b)) 1 0))))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const ada___skp__subjects__event_entry_type__dst_subject__first__bit Int)

(declare-const ada___skp__subjects__event_entry_type__dst_subject__last__bit Int)

(declare-const ada___skp__subjects__event_entry_type__dst_subject__position Int)

;; ada___skp__subjects__event_entry_type__dst_subject__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__event_entry_type__dst_subject__first__bit))

;; ada___skp__subjects__event_entry_type__dst_subject__last__bit_axiom
  (assert
  (< ada___skp__subjects__event_entry_type__dst_subject__first__bit ada___skp__subjects__event_entry_type__dst_subject__last__bit))

;; ada___skp__subjects__event_entry_type__dst_subject__position_axiom
  (assert
  (<= 0 ada___skp__subjects__event_entry_type__dst_subject__position))

(declare-const ada___skp__subjects__event_entry_type__dst_vector__first__bit Int)

(declare-const ada___skp__subjects__event_entry_type__dst_vector__last__bit Int)

(declare-const ada___skp__subjects__event_entry_type__dst_vector__position Int)

;; ada___skp__subjects__event_entry_type__dst_vector__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__event_entry_type__dst_vector__first__bit))

;; ada___skp__subjects__event_entry_type__dst_vector__last__bit_axiom
  (assert
  (< ada___skp__subjects__event_entry_type__dst_vector__first__bit ada___skp__subjects__event_entry_type__dst_vector__last__bit))

;; ada___skp__subjects__event_entry_type__dst_vector__position_axiom
  (assert (<= 0 ada___skp__subjects__event_entry_type__dst_vector__position))

(declare-const ada___skp__subjects__event_entry_type__handover__first__bit Int)

(declare-const ada___skp__subjects__event_entry_type__handover__last__bit Int)

(declare-const ada___skp__subjects__event_entry_type__handover__position Int)

;; ada___skp__subjects__event_entry_type__handover__first__bit_axiom
  (assert (<= 0 ada___skp__subjects__event_entry_type__handover__first__bit))

;; ada___skp__subjects__event_entry_type__handover__last__bit_axiom
  (assert
  (< ada___skp__subjects__event_entry_type__handover__first__bit ada___skp__subjects__event_entry_type__handover__last__bit))

;; ada___skp__subjects__event_entry_type__handover__position_axiom
  (assert (<= 0 ada___skp__subjects__event_entry_type__handover__position))

(declare-const ada___skp__subjects__event_entry_type__send_ipi__first__bit Int)

(declare-const ada___skp__subjects__event_entry_type__send_ipi__last__bit Int)

(declare-const ada___skp__subjects__event_entry_type__send_ipi__position Int)

;; ada___skp__subjects__event_entry_type__send_ipi__first__bit_axiom
  (assert (<= 0 ada___skp__subjects__event_entry_type__send_ipi__first__bit))

;; ada___skp__subjects__event_entry_type__send_ipi__last__bit_axiom
  (assert
  (< ada___skp__subjects__event_entry_type__send_ipi__first__bit ada___skp__subjects__event_entry_type__send_ipi__last__bit))

;; ada___skp__subjects__event_entry_type__send_ipi__position_axiom
  (assert (<= 0 ada___skp__subjects__event_entry_type__send_ipi__position))

(declare-fun user_eq8 (us_rep2 us_rep2) Bool)

(declare-const dummy8 us_rep2)

(declare-datatypes ()
((event_entry_type__ref
 (event_entry_type__refqtmk (event_entry_type__content us_rep2)))))
(define-fun event_entry_type__ref_event_entry_type__content__projection ((a event_entry_type__ref)) us_rep2 
  (event_entry_type__content a))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int us_rep2))))))
(declare-fun slide1 ((Array Int us_rep2) Int Int) (Array Int us_rep2))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep2)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int us_rep2)) (a__first Int) (a__last Int)
  (b (Array Int us_rep2)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_160 Int))
                           (=>
                           (and (<= a__first temp___idx_160)
                           (<= temp___idx_160 a__last))
                           (= (bool_eq3 (select a temp___idx_160)
                              (select b (+ (- b__first a__first) temp___idx_160))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep2)) (b (Array Int us_rep2)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_160 Int))
  (=> (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last))
  (= (bool_eq3 (select a temp___idx_160)
     (select b (+ (- b__first a__first) temp___idx_160))) true))))))))

(declare-const dummy9 (Array Int us_rep2))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const component__size1 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq9 ((Array Int us_rep2) (Array Int us_rep2)) Bool)

(declare-sort cpu_range 0)

(declare-fun cpu_rangeqtint (cpu_range) Int)

;; cpu_range'axiom
  (assert
  (forall ((i cpu_range))
  (and (<= 0 (cpu_rangeqtint i)) (<= (cpu_rangeqtint i) 3))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (cpu_range cpu_range) Bool)

(declare-const dummy10 cpu_range)

(declare-datatypes ()
((cpu_range__ref (cpu_range__refqtmk (cpu_range__content cpu_range)))))
(define-fun cpu_range__ref_cpu_range__content__projection ((a cpu_range__ref)) cpu_range 
  (cpu_range__content a))

(define-fun to_rep5 ((x cpu_range)) Int (cpu_rangeqtint x))

(declare-fun of_rep5 (Int) cpu_range)

;; inversion_axiom
  (assert
  (forall ((x cpu_range))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x cpu_range)) (! (in_range4
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-datatypes ()
((us_split_fields6
 (us_split_fieldsqtmk3
 (rec__ada___skp__subjects__subject_spec_type__cpu_id cpu_range)(rec__ada___skp__subjects__subject_spec_type__profile profile_kind)(rec__ada___skp__subjects__subject_spec_type__pml4_address word64)(rec__ada___skp__subjects__subject_spec_type__ept_pointer word64)(rec__ada___skp__subjects__subject_spec_type__vmcs_address word64)(rec__ada___skp__subjects__subject_spec_type__io_bitmap_address word64)(rec__ada___skp__subjects__subject_spec_type__msr_bitmap_address word64)(rec__ada___skp__subjects__subject_spec_type__msr_store_address word64)(rec__ada___skp__subjects__subject_spec_type__stack_address word64)(rec__ada___skp__subjects__subject_spec_type__entry_point word64)(rec__ada___skp__subjects__subject_spec_type__cr0_value word64)(rec__ada___skp__subjects__subject_spec_type__cr0_mask word64)(rec__ada___skp__subjects__subject_spec_type__cr4_value word64)(rec__ada___skp__subjects__subject_spec_type__cr4_mask word64)(rec__ada___skp__subjects__subject_spec_type__cs_access word32)(rec__ada___skp__subjects__subject_spec_type__exception_bitmap word32)(rec__ada___skp__subjects__subject_spec_type__msr_count word32)(rec__ada___skp__subjects__subject_spec_type__vmx_controls us_rep)(rec__ada___skp__subjects__subject_spec_type__trap_table (Array Int us_rep1))(rec__ada___skp__subjects__subject_spec_type__event_table (Array Int us_rep2))))))
(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__cpu_id__projection ((a us_split_fields6)) cpu_range 
  (rec__ada___skp__subjects__subject_spec_type__cpu_id a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__profile__projection ((a us_split_fields6)) profile_kind 
  (rec__ada___skp__subjects__subject_spec_type__profile a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__pml4_address__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__pml4_address a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__ept_pointer__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__ept_pointer a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__vmcs_address__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__vmcs_address a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__io_bitmap_address__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__io_bitmap_address a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__msr_bitmap_address__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__msr_bitmap_address a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__msr_store_address__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__msr_store_address a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__stack_address__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__stack_address a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__entry_point__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__entry_point a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__cr0_value__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__cr0_value a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__cr0_mask__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__cr0_mask a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__cr4_value__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__cr4_value a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__cr4_mask__projection ((a us_split_fields6)) word64 
  (rec__ada___skp__subjects__subject_spec_type__cr4_mask a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__cs_access__projection ((a us_split_fields6)) word32 
  (rec__ada___skp__subjects__subject_spec_type__cs_access a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__exception_bitmap__projection ((a us_split_fields6)) word32 
  (rec__ada___skp__subjects__subject_spec_type__exception_bitmap a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__msr_count__projection ((a us_split_fields6)) word32 
  (rec__ada___skp__subjects__subject_spec_type__msr_count a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__vmx_controls__projection ((a us_split_fields6)) us_rep 
  (rec__ada___skp__subjects__subject_spec_type__vmx_controls a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__trap_table__projection ((a us_split_fields6)) (Array Int us_rep1) 
  (rec__ada___skp__subjects__subject_spec_type__trap_table a))

(define-fun us_split_fields_rec__ada___skp__subjects__subject_spec_type__event_table__projection ((a us_split_fields6)) (Array Int us_rep2) 
  (rec__ada___skp__subjects__subject_spec_type__event_table a))

(declare-datatypes ()
((us_split_fields__ref3
 (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (and
                         (= (to_rep5
                            (rec__ada___skp__subjects__subject_spec_type__cpu_id
                            (us_split_fields7 a))) (to_rep5
                                                   (rec__ada___skp__subjects__subject_spec_type__cpu_id
                                                   (us_split_fields7 b))))
                         (= (to_rep
                            (rec__ada___skp__subjects__subject_spec_type__profile
                            (us_split_fields7 a))) (to_rep
                                                   (rec__ada___skp__subjects__subject_spec_type__profile
                                                   (us_split_fields7 b)))))
                         (and
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__pml4_address
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__pml4_address
                                                   (us_split_fields7 b))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__ept_pointer
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__ept_pointer
                                                   (us_split_fields7 b)))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__vmcs_address
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__vmcs_address
                                                   (us_split_fields7 b)))))
                         (and
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__io_bitmap_address
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__io_bitmap_address
                                                   (us_split_fields7 b))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__msr_bitmap_address
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__msr_bitmap_address
                                                   (us_split_fields7 b))))))
                         (and
                         (and
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__msr_store_address
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__msr_store_address
                                                   (us_split_fields7 b))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__stack_address
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__stack_address
                                                   (us_split_fields7 b)))))
                         (and
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__entry_point
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__entry_point
                                                   (us_split_fields7 b))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__cr0_value
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__cr0_value
                                                   (us_split_fields7 b)))))))
                         (and
                         (and
                         (and
                         (and
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__cr0_mask
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__cr0_mask
                                                   (us_split_fields7 b))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__cr4_value
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__cr4_value
                                                   (us_split_fields7 b)))))
                         (= (to_rep2
                            (rec__ada___skp__subjects__subject_spec_type__cr4_mask
                            (us_split_fields7 a))) (to_rep2
                                                   (rec__ada___skp__subjects__subject_spec_type__cr4_mask
                                                   (us_split_fields7 b)))))
                         (and
                         (= (to_rep1
                            (rec__ada___skp__subjects__subject_spec_type__cs_access
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__ada___skp__subjects__subject_spec_type__cs_access
                                                   (us_split_fields7 b))))
                         (= (to_rep1
                            (rec__ada___skp__subjects__subject_spec_type__exception_bitmap
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__ada___skp__subjects__subject_spec_type__exception_bitmap
                                                   (us_split_fields7 b))))))
                         (and
                         (and
                         (= (to_rep1
                            (rec__ada___skp__subjects__subject_spec_type__msr_count
                            (us_split_fields7 a))) (to_rep1
                                                   (rec__ada___skp__subjects__subject_spec_type__msr_count
                                                   (us_split_fields7 b))))
                         (= (bool_eq
                            (rec__ada___skp__subjects__subject_spec_type__vmx_controls
                            (us_split_fields7 a))
                            (rec__ada___skp__subjects__subject_spec_type__vmx_controls
                            (us_split_fields7 b))) true))
                         (and
                         (= (bool_eq2
                            (rec__ada___skp__subjects__subject_spec_type__trap_table
                            (us_split_fields7 a)) 0 59
                            (rec__ada___skp__subjects__subject_spec_type__trap_table
                            (us_split_fields7 b)) 0 59) true)
                         (= (bool_eq4
                            (rec__ada___skp__subjects__subject_spec_type__event_table
                            (us_split_fields7 a)) 0 31
                            (rec__ada___skp__subjects__subject_spec_type__event_table
                            (us_split_fields7 b)) 0 31) true))))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const ada___skp__subjects__subject_spec_type__cpu_id__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cpu_id__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cpu_id__position Int)

;; ada___skp__subjects__subject_spec_type__cpu_id__first__bit_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cpu_id__first__bit))

;; ada___skp__subjects__subject_spec_type__cpu_id__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__cpu_id__first__bit ada___skp__subjects__subject_spec_type__cpu_id__last__bit))

;; ada___skp__subjects__subject_spec_type__cpu_id__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cpu_id__position))

(declare-const ada___skp__subjects__subject_spec_type__profile__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__profile__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__profile__position Int)

;; ada___skp__subjects__subject_spec_type__profile__first__bit_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__profile__first__bit))

;; ada___skp__subjects__subject_spec_type__profile__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__profile__first__bit ada___skp__subjects__subject_spec_type__profile__last__bit))

;; ada___skp__subjects__subject_spec_type__profile__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__profile__position))

(declare-const ada___skp__subjects__subject_spec_type__pml4_address__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__pml4_address__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__pml4_address__position Int)

;; ada___skp__subjects__subject_spec_type__pml4_address__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__pml4_address__first__bit))

;; ada___skp__subjects__subject_spec_type__pml4_address__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__pml4_address__first__bit 
  ada___skp__subjects__subject_spec_type__pml4_address__last__bit))

;; ada___skp__subjects__subject_spec_type__pml4_address__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__pml4_address__position))

(declare-const ada___skp__subjects__subject_spec_type__ept_pointer__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__ept_pointer__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__ept_pointer__position Int)

;; ada___skp__subjects__subject_spec_type__ept_pointer__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__ept_pointer__first__bit))

;; ada___skp__subjects__subject_spec_type__ept_pointer__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__ept_pointer__first__bit 
  ada___skp__subjects__subject_spec_type__ept_pointer__last__bit))

;; ada___skp__subjects__subject_spec_type__ept_pointer__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__ept_pointer__position))

(declare-const ada___skp__subjects__subject_spec_type__vmcs_address__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__vmcs_address__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__vmcs_address__position Int)

;; ada___skp__subjects__subject_spec_type__vmcs_address__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__vmcs_address__first__bit))

;; ada___skp__subjects__subject_spec_type__vmcs_address__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__vmcs_address__first__bit 
  ada___skp__subjects__subject_spec_type__vmcs_address__last__bit))

;; ada___skp__subjects__subject_spec_type__vmcs_address__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__vmcs_address__position))

(declare-const ada___skp__subjects__subject_spec_type__io_bitmap_address__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__io_bitmap_address__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__io_bitmap_address__position Int)

;; ada___skp__subjects__subject_spec_type__io_bitmap_address__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__io_bitmap_address__first__bit))

;; ada___skp__subjects__subject_spec_type__io_bitmap_address__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__io_bitmap_address__first__bit 
  ada___skp__subjects__subject_spec_type__io_bitmap_address__last__bit))

;; ada___skp__subjects__subject_spec_type__io_bitmap_address__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__io_bitmap_address__position))

(declare-const ada___skp__subjects__subject_spec_type__msr_bitmap_address__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__msr_bitmap_address__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__msr_bitmap_address__position Int)

;; ada___skp__subjects__subject_spec_type__msr_bitmap_address__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__msr_bitmap_address__first__bit))

;; ada___skp__subjects__subject_spec_type__msr_bitmap_address__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__msr_bitmap_address__first__bit 
  ada___skp__subjects__subject_spec_type__msr_bitmap_address__last__bit))

;; ada___skp__subjects__subject_spec_type__msr_bitmap_address__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__msr_bitmap_address__position))

(declare-const ada___skp__subjects__subject_spec_type__msr_store_address__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__msr_store_address__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__msr_store_address__position Int)

;; ada___skp__subjects__subject_spec_type__msr_store_address__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__msr_store_address__first__bit))

;; ada___skp__subjects__subject_spec_type__msr_store_address__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__msr_store_address__first__bit 
  ada___skp__subjects__subject_spec_type__msr_store_address__last__bit))

;; ada___skp__subjects__subject_spec_type__msr_store_address__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__msr_store_address__position))

(declare-const ada___skp__subjects__subject_spec_type__stack_address__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__stack_address__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__stack_address__position Int)

;; ada___skp__subjects__subject_spec_type__stack_address__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__stack_address__first__bit))

;; ada___skp__subjects__subject_spec_type__stack_address__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__stack_address__first__bit 
  ada___skp__subjects__subject_spec_type__stack_address__last__bit))

;; ada___skp__subjects__subject_spec_type__stack_address__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__stack_address__position))

(declare-const ada___skp__subjects__subject_spec_type__entry_point__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__entry_point__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__entry_point__position Int)

;; ada___skp__subjects__subject_spec_type__entry_point__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__entry_point__first__bit))

;; ada___skp__subjects__subject_spec_type__entry_point__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__entry_point__first__bit 
  ada___skp__subjects__subject_spec_type__entry_point__last__bit))

;; ada___skp__subjects__subject_spec_type__entry_point__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__entry_point__position))

(declare-const ada___skp__subjects__subject_spec_type__cr0_value__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr0_value__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr0_value__position Int)

;; ada___skp__subjects__subject_spec_type__cr0_value__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__cr0_value__first__bit))

;; ada___skp__subjects__subject_spec_type__cr0_value__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__cr0_value__first__bit ada___skp__subjects__subject_spec_type__cr0_value__last__bit))

;; ada___skp__subjects__subject_spec_type__cr0_value__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cr0_value__position))

(declare-const ada___skp__subjects__subject_spec_type__cr0_mask__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr0_mask__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr0_mask__position Int)

;; ada___skp__subjects__subject_spec_type__cr0_mask__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__cr0_mask__first__bit))

;; ada___skp__subjects__subject_spec_type__cr0_mask__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__cr0_mask__first__bit ada___skp__subjects__subject_spec_type__cr0_mask__last__bit))

;; ada___skp__subjects__subject_spec_type__cr0_mask__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cr0_mask__position))

(declare-const ada___skp__subjects__subject_spec_type__cr4_value__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr4_value__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr4_value__position Int)

;; ada___skp__subjects__subject_spec_type__cr4_value__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__cr4_value__first__bit))

;; ada___skp__subjects__subject_spec_type__cr4_value__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__cr4_value__first__bit ada___skp__subjects__subject_spec_type__cr4_value__last__bit))

;; ada___skp__subjects__subject_spec_type__cr4_value__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cr4_value__position))

(declare-const ada___skp__subjects__subject_spec_type__cr4_mask__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr4_mask__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cr4_mask__position Int)

;; ada___skp__subjects__subject_spec_type__cr4_mask__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__cr4_mask__first__bit))

;; ada___skp__subjects__subject_spec_type__cr4_mask__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__cr4_mask__first__bit ada___skp__subjects__subject_spec_type__cr4_mask__last__bit))

;; ada___skp__subjects__subject_spec_type__cr4_mask__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cr4_mask__position))

(declare-const ada___skp__subjects__subject_spec_type__cs_access__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cs_access__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__cs_access__position Int)

;; ada___skp__subjects__subject_spec_type__cs_access__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__cs_access__first__bit))

;; ada___skp__subjects__subject_spec_type__cs_access__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__cs_access__first__bit ada___skp__subjects__subject_spec_type__cs_access__last__bit))

;; ada___skp__subjects__subject_spec_type__cs_access__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__cs_access__position))

(declare-const ada___skp__subjects__subject_spec_type__exception_bitmap__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__exception_bitmap__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__exception_bitmap__position Int)

;; ada___skp__subjects__subject_spec_type__exception_bitmap__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__exception_bitmap__first__bit))

;; ada___skp__subjects__subject_spec_type__exception_bitmap__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__exception_bitmap__first__bit 
  ada___skp__subjects__subject_spec_type__exception_bitmap__last__bit))

;; ada___skp__subjects__subject_spec_type__exception_bitmap__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__exception_bitmap__position))

(declare-const ada___skp__subjects__subject_spec_type__msr_count__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__msr_count__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__msr_count__position Int)

;; ada___skp__subjects__subject_spec_type__msr_count__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__msr_count__first__bit))

;; ada___skp__subjects__subject_spec_type__msr_count__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__msr_count__first__bit ada___skp__subjects__subject_spec_type__msr_count__last__bit))

;; ada___skp__subjects__subject_spec_type__msr_count__position_axiom
  (assert (<= 0 ada___skp__subjects__subject_spec_type__msr_count__position))

(declare-const ada___skp__subjects__subject_spec_type__vmx_controls__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__vmx_controls__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__vmx_controls__position Int)

;; ada___skp__subjects__subject_spec_type__vmx_controls__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__vmx_controls__first__bit))

;; ada___skp__subjects__subject_spec_type__vmx_controls__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__vmx_controls__first__bit 
  ada___skp__subjects__subject_spec_type__vmx_controls__last__bit))

;; ada___skp__subjects__subject_spec_type__vmx_controls__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__vmx_controls__position))

(declare-const ada___skp__subjects__subject_spec_type__trap_table__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__trap_table__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__trap_table__position Int)

;; ada___skp__subjects__subject_spec_type__trap_table__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__trap_table__first__bit))

;; ada___skp__subjects__subject_spec_type__trap_table__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__trap_table__first__bit ada___skp__subjects__subject_spec_type__trap_table__last__bit))

;; ada___skp__subjects__subject_spec_type__trap_table__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__trap_table__position))

(declare-const ada___skp__subjects__subject_spec_type__event_table__first__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__event_table__last__bit Int)

(declare-const ada___skp__subjects__subject_spec_type__event_table__position Int)

;; ada___skp__subjects__subject_spec_type__event_table__first__bit_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__event_table__first__bit))

;; ada___skp__subjects__subject_spec_type__event_table__last__bit_axiom
  (assert
  (< ada___skp__subjects__subject_spec_type__event_table__first__bit 
  ada___skp__subjects__subject_spec_type__event_table__last__bit))

;; ada___skp__subjects__subject_spec_type__event_table__position_axiom
  (assert
  (<= 0 ada___skp__subjects__subject_spec_type__event_table__position))

(declare-fun user_eq11 (us_rep3 us_rep3) Bool)

(declare-const dummy11 us_rep3)

(declare-datatypes ()
((subject_spec_type__ref
 (subject_spec_type__refqtmk (subject_spec_type__content us_rep3)))))
(define-fun subject_spec_type__ref_subject_spec_type__content__projection ((a subject_spec_type__ref)) us_rep3 
  (subject_spec_type__content a))

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int us_rep3))))))
(declare-fun slide2 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq6 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (bool_eq5 (select a temp___idx_164)
                              (select b (+ (- b__first a__first) temp___idx_164))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (bool_eq5 (select a temp___idx_164)
     (select b (+ (- b__first a__first) temp___idx_164))) true))))))))

(declare-const subject_specs (Array Int us_rep3))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort subject_id_type 0)

(declare-fun subject_id_typeqtint (subject_id_type) Int)

;; subject_id_type'axiom
  (assert
  (forall ((i subject_id_type))
  (and (<= 0 (subject_id_typeqtint i)) (<= (subject_id_typeqtint i) 6))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq12 (subject_id_type subject_id_type) Bool)

(declare-const dummy12 subject_id_type)

(declare-datatypes ()
((subject_id_type__ref
 (subject_id_type__refqtmk (subject_id_type__content subject_id_type)))))
(define-fun subject_id_type__ref_subject_id_type__content__projection ((a subject_id_type__ref)) subject_id_type 
  (subject_id_type__content a))

(define-fun dynamic_invariant ((temp___expr_414 Int)
  (temp___is_init_410 Bool) (temp___skip_constant_411 Bool)
  (temp___do_toplevel_412 Bool)
  (temp___do_typ_inv_413 Bool)) Bool (=>
                                     (or (= temp___is_init_410 true)
                                     (<= 0 6)) (in_range5 temp___expr_414)))

(declare-const null_trap us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const null_trap_table (Array Int us_rep1))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun ada___skp__subjects__null_trap_table__aggregate_def (us_rep1) (Array Int us_rep1))

;; null_trap_table__def_axiom
  (assert
  (= null_trap_table (ada___skp__subjects__null_trap_table__aggregate_def
                     null_trap)))

;; def_axiom
  (assert
  (forall ((temp___158 us_rep1))
  (forall ((temp___159 Int))
  (= (select (ada___skp__subjects__null_trap_table__aggregate_def temp___158) temp___159) temp___158))))

(declare-const null_event us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const null_event_table (Array Int us_rep2))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun ada___skp__subjects__null_event_table__aggregate_def (us_rep2) (Array Int us_rep2))

;; null_event_table__def_axiom
  (assert
  (= null_event_table (ada___skp__subjects__null_event_table__aggregate_def
                      null_event)))

;; def_axiom
  (assert
  (forall ((temp___162 us_rep2))
  (forall ((temp___163 Int))
  (= (select (ada___skp__subjects__null_event_table__aggregate_def
             temp___162) temp___163) temp___162))))

(declare-fun ada___skp__subjects__subject_specs__aggregate_def (us_rep3
  us_rep3 us_rep3 us_rep3 us_rep3 us_rep3 us_rep3) (Array Int us_rep3))

(declare-fun temp_____aggregate_def_174 (us_rep2 us_rep2
  us_rep2) (Array Int us_rep2))

(declare-fun temp_____aggregate_def_180 (us_rep2
  us_rep2) (Array Int us_rep2))

(declare-fun temp_____aggregate_def_185 (us_rep2 us_rep2
  us_rep2) (Array Int us_rep2))

(declare-fun temp_____aggregate_def_191 (us_rep2 us_rep2
  us_rep2) (Array Int us_rep2))

(declare-fun temp_____aggregate_def_197 (us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1) (Array Int us_rep1))

(declare-fun temp_____aggregate_def_258 (us_rep2
  us_rep2) (Array Int us_rep2))

(declare-fun temp_____aggregate_def_263 (us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1 us_rep1
  us_rep1) (Array Int us_rep1))

(declare-fun temp_____aggregate_def_324 (us_rep2
  us_rep2) (Array Int us_rep2))

(declare-const rliteral cpu_range)

;; rliteral_axiom
  (assert (= (cpu_rangeqtint rliteral) 0))

(declare-const rliteral1 dst_subject_type)

;; rliteral_axiom
  (assert (= (dst_subject_typeqtint rliteral1) 5))

(declare-const rliteral2 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral2) 49))

(declare-const rliteral3 dst_subject_type)

;; rliteral_axiom
  (assert (= (dst_subject_typeqtint rliteral3) 6))

(declare-const rliteral4 cpu_range)

;; rliteral_axiom
  (assert (= (cpu_rangeqtint rliteral4) 2))

(declare-const rliteral5 dst_subject_type)

;; rliteral_axiom
  (assert (= (dst_subject_typeqtint rliteral5) 1))

(declare-const rliteral6 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral6) 38))

(declare-const rliteral7 cpu_range)

;; rliteral_axiom
  (assert (= (cpu_rangeqtint rliteral7) 1))

(declare-const rliteral8 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral8) 256))

(declare-const rliteral9 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral9) 36))

(declare-const rliteral10 cpu_range)

;; rliteral_axiom
  (assert (= (cpu_rangeqtint rliteral10) 3))

(declare-const rliteral11 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral11) 37))

(declare-const rliteral12 dst_subject_type)

;; rliteral_axiom
  (assert (= (dst_subject_typeqtint rliteral12) 3))

(declare-const rliteral13 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral13) 34))

(declare-const rliteral14 dst_subject_type)

;; rliteral_axiom
  (assert (= (dst_subject_typeqtint rliteral14) 4))

(declare-const rliteral15 dst_vector_range)

;; rliteral_axiom
  (assert (= (dst_vector_rangeqtint rliteral15) 35))

;; subject_specs__def_axiom
  (assert
  (= subject_specs (ada___skp__subjects__subject_specs__aggregate_def
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral (of_rep 0)
                   (of_rep2 #x0000000000F4A000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000005000) (of_rep2 #x0000000000F60000)
                   (of_rep2 #x0000000000F72000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000003000) (of_rep2 #x0000000000006000)
                   (of_rep2 #x0000000080010033) (of_rep2 #x00000000E005003F)
                   (of_rep2 #x0000000000002220) (of_rep2 #x00000000001767FF)
                   (of_rep1 #x0000A09B) (of_rep1 #xFFFFFFFF)
                   (of_rep1 #x00000000)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2999E00) (of_rep1 #x00000040)
                   (of_rep1 #x00408200) (of_rep1 #x00000200)))
                   null_trap_table null_event_table))
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral (of_rep 0)
                   (of_rep2 #x0000000000F56000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000006000) (of_rep2 #x0000000000F6A000)
                   (of_rep2 #x0000000000F7E000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000003000) (of_rep2 #x0000000000006000)
                   (of_rep2 #x0000000080010033) (of_rep2 #x00000000E005003F)
                   (of_rep2 #x0000000000002220) (of_rep2 #x00000000001767FF)
                   (of_rep1 #x0000A09B) (of_rep1 #xFFFFFFFF)
                   (of_rep1 #x00000000)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2999E00) (of_rep1 #x00000040)
                   (of_rep1 #x00408200) (of_rep1 #x00000200)))
                   null_trap_table
                   (temp_____aggregate_def_174
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral1 rliteral2 (distinct 0 0)
                   (distinct 1 0)))
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral3 rliteral2 (distinct 0 0)
                   (distinct 1 0))) null_event)))
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral4 (of_rep 0)
                   (of_rep2 #x0000000000F4E000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000007000) (of_rep2 #x0000000000F62000)
                   (of_rep2 #x0000000000F73000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000003000) (of_rep2 #x0000000000006000)
                   (of_rep2 #x0000000080010033) (of_rep2 #x00000000E005003F)
                   (of_rep2 #x0000000000002220) (of_rep2 #x00000000001767FF)
                   (of_rep1 #x0000A09B) (of_rep1 #xFFFFFFFF)
                   (of_rep1 #x00000000)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2999E00) (of_rep1 #x00000040)
                   (of_rep1 #x00408200) (of_rep1 #x00000200)))
                   null_trap_table
                   (temp_____aggregate_def_180
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral5 rliteral6 (distinct 0 0)
                   (distinct 1 0))) null_event)))
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral7 (of_rep 0)
                   (of_rep2 #x0000000000F46000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000008000) (of_rep2 #x0000000000F5E000)
                   (of_rep2 #x0000000000F71000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000003000) (of_rep2 #x0000000000006000)
                   (of_rep2 #x0000000080010033) (of_rep2 #x00000000E005003F)
                   (of_rep2 #x0000000000002220) (of_rep2 #x00000000001767FF)
                   (of_rep1 #x0000A09B) (of_rep1 #xFFFFFFFF)
                   (of_rep1 #x00000000)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2999E00) (of_rep1 #x00000040)
                   (of_rep1 #x00408200) (of_rep1 #x00000200)))
                   null_trap_table
                   (temp_____aggregate_def_185
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral1 rliteral8 (distinct 1 0)
                   (distinct 0 0)))
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral5 rliteral9 (distinct 0 0)
                   (distinct 1 0))) null_event)))
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral10 (of_rep 0)
                   (of_rep2 #x0000000000F52000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000009000) (of_rep2 #x0000000000F68000)
                   (of_rep2 #x0000000000F7A000) (of_rep2 #x0000000000000000)
                   (of_rep2 #x0000000000003000) (of_rep2 #x0000000000006000)
                   (of_rep2 #x0000000080010033) (of_rep2 #x00000000E005003F)
                   (of_rep2 #x0000000000002220) (of_rep2 #x00000000001767FF)
                   (of_rep1 #x0000A09B) (of_rep1 #xFFFFFFFF)
                   (of_rep1 #x00000000)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2999E00) (of_rep1 #x00000040)
                   (of_rep1 #x00408200) (of_rep1 #x00000200)))
                   null_trap_table
                   (temp_____aggregate_def_191
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral3 rliteral8 (distinct 1 0)
                   (distinct 0 0)))
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral5 rliteral11 (distinct 0 0)
                   (distinct 1 0))) null_event)))
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral7 (of_rep 1)
                   (of_rep2 #x0000000000000000) (of_rep2 #x0000000000DAF01E)
                   (of_rep2 #x000000000000A000) (of_rep2 #x0000000000F5A000)
                   (of_rep2 #x0000000000F6F000) (of_rep2 #x0000000000F70000)
                   (of_rep2 #x0000000000000000) (of_rep2 #x0000000000400000)
                   (of_rep2 #x0000000000000035) (of_rep2 #x0000000000000020)
                   (of_rep2 #x0000000000002020) (of_rep2 #x0000000000002000)
                   (of_rep1 #x0000C09B) (of_rep1 #xFFF08002)
                   (of_rep1 #x00000005)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2981E00) (of_rep1 #x000000C2)
                   (of_rep1 #x00708200) (of_rep1 #x00008000)))
                   (temp_____aggregate_def_197
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral12 rliteral9))
                   null_trap)
                   (temp_____aggregate_def_258
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral5 rliteral13 (distinct 0 0)
                   (distinct 1 0))) null_event)))
                   (us_repqtmk3
                   (us_split_fieldsqtmk3 rliteral10 (of_rep 1)
                   (of_rep2 #x0000000000000000) (of_rep2 #x00000000009A001E)
                   (of_rep2 #x000000000000B000) (of_rep2 #x0000000000F64000)
                   (of_rep2 #x0000000000F78000) (of_rep2 #x0000000000F79000)
                   (of_rep2 #x0000000000000000) (of_rep2 #x0000000000400000)
                   (of_rep2 #x0000000000000035) (of_rep2 #x0000000000000020)
                   (of_rep2 #x0000000000002020) (of_rep2 #x0000000000002000)
                   (of_rep1 #x0000C09B) (of_rep1 #xFFF08002)
                   (of_rep1 #x00000005)
                   (us_repqtmk
                   (us_split_fieldsqtmk (of_rep1 #x00000049)
                   (of_rep1 #xB2981E00) (of_rep1 #x000000C2)
                   (of_rep1 #x00708200) (of_rep1 #x00008000)))
                   (temp_____aggregate_def_263
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   (us_repqtmk1 (us_split_fieldsqtmk1 rliteral14 rliteral9))
                   null_trap)
                   (temp_____aggregate_def_324
                   (us_repqtmk2
                   (us_split_fieldsqtmk2 rliteral5 rliteral15 (distinct 0 0)
                   (distinct 1 0))) null_event))))))

;; def_axiom
  (assert
  (forall ((temp___166 us_rep3) (temp___167 us_rep3) (temp___168 us_rep3)
  (temp___169 us_rep3) (temp___170 us_rep3) (temp___171 us_rep3)
  (temp___172 us_rep3))
  (let ((temp___165 (ada___skp__subjects__subject_specs__aggregate_def
                    temp___166 temp___167 temp___168 temp___169 temp___170
                    temp___171 temp___172)))
  (and
  (and (= (select temp___165 0) temp___166)
  (= (select temp___165 1) temp___167))
  (and
  (and
  (and (= (select temp___165 2) temp___168)
  (= (select temp___165 3) temp___169)) (= (select temp___165 4) temp___170))
  (and (= (select temp___165 5) temp___171)
  (= (select temp___165 6) temp___172)))))))

;; def_axiom
  (assert
  (forall ((temp___176 us_rep2) (temp___177 us_rep2) (temp___178 us_rep2))
  (let ((temp___175 (temp_____aggregate_def_174 temp___176 temp___177
                    temp___178)))
  (forall ((temp___179 Int))
  (ite (= temp___179 2) (= (select temp___175 temp___179) temp___177)
  (ite (= temp___179 1) (= (select temp___175 temp___179) temp___176)
  (= (select temp___175 temp___179) temp___178)))))))

;; def_axiom
  (assert
  (forall ((temp___182 us_rep2) (temp___183 us_rep2))
  (let ((temp___181 (temp_____aggregate_def_180 temp___182 temp___183)))
  (forall ((temp___184 Int))
  (ite (= temp___184 1) (= (select temp___181 temp___184) temp___182)
  (= (select temp___181 temp___184) temp___183))))))

;; def_axiom
  (assert
  (forall ((temp___187 us_rep2) (temp___188 us_rep2) (temp___189 us_rep2))
  (let ((temp___186 (temp_____aggregate_def_185 temp___187 temp___188
                    temp___189)))
  (forall ((temp___190 Int))
  (ite (= temp___190 1) (= (select temp___186 temp___190) temp___188)
  (ite (= temp___190 4) (= (select temp___186 temp___190) temp___187)
  (= (select temp___186 temp___190) temp___189)))))))

;; def_axiom
  (assert
  (forall ((temp___193 us_rep2) (temp___194 us_rep2) (temp___195 us_rep2))
  (let ((temp___192 (temp_____aggregate_def_191 temp___193 temp___194
                    temp___195)))
  (forall ((temp___196 Int))
  (ite (= temp___196 1) (= (select temp___192 temp___196) temp___194)
  (ite (= temp___196 4) (= (select temp___192 temp___196) temp___193)
  (= (select temp___192 temp___196) temp___195)))))))

;; def_axiom
  (assert
  (forall ((temp___199 us_rep1) (temp___200 us_rep1) (temp___201 us_rep1)
  (temp___202 us_rep1) (temp___203 us_rep1) (temp___204 us_rep1)
  (temp___205 us_rep1) (temp___206 us_rep1) (temp___207 us_rep1)
  (temp___208 us_rep1) (temp___209 us_rep1) (temp___210 us_rep1)
  (temp___211 us_rep1) (temp___212 us_rep1) (temp___213 us_rep1)
  (temp___214 us_rep1) (temp___215 us_rep1) (temp___216 us_rep1)
  (temp___217 us_rep1) (temp___218 us_rep1) (temp___219 us_rep1)
  (temp___220 us_rep1) (temp___221 us_rep1) (temp___222 us_rep1)
  (temp___223 us_rep1) (temp___224 us_rep1) (temp___225 us_rep1)
  (temp___226 us_rep1) (temp___227 us_rep1) (temp___228 us_rep1)
  (temp___229 us_rep1) (temp___230 us_rep1) (temp___231 us_rep1)
  (temp___232 us_rep1) (temp___233 us_rep1) (temp___234 us_rep1)
  (temp___235 us_rep1) (temp___236 us_rep1) (temp___237 us_rep1)
  (temp___238 us_rep1) (temp___239 us_rep1) (temp___240 us_rep1)
  (temp___241 us_rep1) (temp___242 us_rep1) (temp___243 us_rep1)
  (temp___244 us_rep1) (temp___245 us_rep1) (temp___246 us_rep1)
  (temp___247 us_rep1) (temp___248 us_rep1) (temp___249 us_rep1)
  (temp___250 us_rep1) (temp___251 us_rep1) (temp___252 us_rep1)
  (temp___253 us_rep1) (temp___254 us_rep1) (temp___255 us_rep1)
  (temp___256 us_rep1))
  (let ((temp___198 (temp_____aggregate_def_197 temp___199 temp___200
                    temp___201 temp___202 temp___203 temp___204 temp___205
                    temp___206 temp___207 temp___208 temp___209 temp___210
                    temp___211 temp___212 temp___213 temp___214 temp___215
                    temp___216 temp___217 temp___218 temp___219 temp___220
                    temp___221 temp___222 temp___223 temp___224 temp___225
                    temp___226 temp___227 temp___228 temp___229 temp___230
                    temp___231 temp___232 temp___233 temp___234 temp___235
                    temp___236 temp___237 temp___238 temp___239 temp___240
                    temp___241 temp___242 temp___243 temp___244 temp___245
                    temp___246 temp___247 temp___248 temp___249 temp___250
                    temp___251 temp___252 temp___253 temp___254 temp___255
                    temp___256)))
  (forall ((temp___257 Int))
  (ite (= temp___257 59) (= (select temp___198 temp___257) temp___255)
  (ite (= temp___257 58) (= (select temp___198 temp___257) temp___254)
  (ite (= temp___257 57) (= (select temp___198 temp___257) temp___253)
  (ite (= temp___257 56) (= (select temp___198 temp___257) temp___252)
  (ite (= temp___257 55) (= (select temp___198 temp___257) temp___251)
  (ite (= temp___257 54) (= (select temp___198 temp___257) temp___250)
  (ite (= temp___257 53) (= (select temp___198 temp___257) temp___249)
  (ite (= temp___257 52) (= (select temp___198 temp___257) temp___248)
  (ite (= temp___257 51) (= (select temp___198 temp___257) temp___247)
  (ite (= temp___257 50) (= (select temp___198 temp___257) temp___246)
  (ite (= temp___257 49) (= (select temp___198 temp___257) temp___245)
  (ite (= temp___257 48) (= (select temp___198 temp___257) temp___244)
  (ite (= temp___257 47) (= (select temp___198 temp___257) temp___243)
  (ite (= temp___257 46) (= (select temp___198 temp___257) temp___242)
  (ite (= temp___257 45) (= (select temp___198 temp___257) temp___241)
  (ite (= temp___257 44) (= (select temp___198 temp___257) temp___240)
  (ite (= temp___257 43) (= (select temp___198 temp___257) temp___239)
  (ite (= temp___257 41) (= (select temp___198 temp___257) temp___238)
  (ite (= temp___257 40) (= (select temp___198 temp___257) temp___237)
  (ite (= temp___257 39) (= (select temp___198 temp___257) temp___236)
  (ite (= temp___257 37) (= (select temp___198 temp___257) temp___235)
  (ite (= temp___257 36) (= (select temp___198 temp___257) temp___234)
  (ite (= temp___257 34) (= (select temp___198 temp___257) temp___233)
  (ite (= temp___257 33) (= (select temp___198 temp___257) temp___232)
  (ite (= temp___257 32) (= (select temp___198 temp___257) temp___231)
  (ite (= temp___257 31) (= (select temp___198 temp___257) temp___230)
  (ite (= temp___257 30) (= (select temp___198 temp___257) temp___229)
  (ite (= temp___257 29) (= (select temp___198 temp___257) temp___228)
  (ite (= temp___257 28) (= (select temp___198 temp___257) temp___227)
  (ite (= temp___257 27) (= (select temp___198 temp___257) temp___226)
  (ite (= temp___257 26) (= (select temp___198 temp___257) temp___225)
  (ite (= temp___257 25) (= (select temp___198 temp___257) temp___224)
  (ite (= temp___257 24) (= (select temp___198 temp___257) temp___223)
  (ite (= temp___257 23) (= (select temp___198 temp___257) temp___222)
  (ite (= temp___257 22) (= (select temp___198 temp___257) temp___221)
  (ite (= temp___257 21) (= (select temp___198 temp___257) temp___220)
  (ite (= temp___257 20) (= (select temp___198 temp___257) temp___219)
  (ite (= temp___257 19) (= (select temp___198 temp___257) temp___218)
  (ite (= temp___257 18) (= (select temp___198 temp___257) temp___217)
  (ite (= temp___257 17) (= (select temp___198 temp___257) temp___216)
  (ite (= temp___257 16) (= (select temp___198 temp___257) temp___215)
  (ite (= temp___257 15) (= (select temp___198 temp___257) temp___214)
  (ite (= temp___257 14) (= (select temp___198 temp___257) temp___213)
  (ite (= temp___257 13) (= (select temp___198 temp___257) temp___212)
  (ite (= temp___257 12) (= (select temp___198 temp___257) temp___211)
  (ite (= temp___257 11) (= (select temp___198 temp___257) temp___210)
  (ite (= temp___257 10) (= (select temp___198 temp___257) temp___209)
  (ite (= temp___257 9) (= (select temp___198 temp___257) temp___208)
  (ite (= temp___257 8) (= (select temp___198 temp___257) temp___207)
  (ite (= temp___257 7) (= (select temp___198 temp___257) temp___206)
  (ite (= temp___257 6) (= (select temp___198 temp___257) temp___205)
  (ite (= temp___257 5) (= (select temp___198 temp___257) temp___204)
  (ite (= temp___257 4) (= (select temp___198 temp___257) temp___203)
  (ite (= temp___257 3) (= (select temp___198 temp___257) temp___202)
  (ite (= temp___257 2) (= (select temp___198 temp___257) temp___201)
  (ite (= temp___257 1) (= (select temp___198 temp___257) temp___200)
  (ite (= temp___257 0) (= (select temp___198 temp___257) temp___199)
  (= (select temp___198 temp___257) temp___256))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

;; def_axiom
  (assert
  (forall ((temp___260 us_rep2) (temp___261 us_rep2))
  (let ((temp___259 (temp_____aggregate_def_258 temp___260 temp___261)))
  (forall ((temp___262 Int))
  (ite (= temp___262 1) (= (select temp___259 temp___262) temp___260)
  (= (select temp___259 temp___262) temp___261))))))

;; def_axiom
  (assert
  (forall ((temp___265 us_rep1) (temp___266 us_rep1) (temp___267 us_rep1)
  (temp___268 us_rep1) (temp___269 us_rep1) (temp___270 us_rep1)
  (temp___271 us_rep1) (temp___272 us_rep1) (temp___273 us_rep1)
  (temp___274 us_rep1) (temp___275 us_rep1) (temp___276 us_rep1)
  (temp___277 us_rep1) (temp___278 us_rep1) (temp___279 us_rep1)
  (temp___280 us_rep1) (temp___281 us_rep1) (temp___282 us_rep1)
  (temp___283 us_rep1) (temp___284 us_rep1) (temp___285 us_rep1)
  (temp___286 us_rep1) (temp___287 us_rep1) (temp___288 us_rep1)
  (temp___289 us_rep1) (temp___290 us_rep1) (temp___291 us_rep1)
  (temp___292 us_rep1) (temp___293 us_rep1) (temp___294 us_rep1)
  (temp___295 us_rep1) (temp___296 us_rep1) (temp___297 us_rep1)
  (temp___298 us_rep1) (temp___299 us_rep1) (temp___300 us_rep1)
  (temp___301 us_rep1) (temp___302 us_rep1) (temp___303 us_rep1)
  (temp___304 us_rep1) (temp___305 us_rep1) (temp___306 us_rep1)
  (temp___307 us_rep1) (temp___308 us_rep1) (temp___309 us_rep1)
  (temp___310 us_rep1) (temp___311 us_rep1) (temp___312 us_rep1)
  (temp___313 us_rep1) (temp___314 us_rep1) (temp___315 us_rep1)
  (temp___316 us_rep1) (temp___317 us_rep1) (temp___318 us_rep1)
  (temp___319 us_rep1) (temp___320 us_rep1) (temp___321 us_rep1)
  (temp___322 us_rep1))
  (let ((temp___264 (temp_____aggregate_def_263 temp___265 temp___266
                    temp___267 temp___268 temp___269 temp___270 temp___271
                    temp___272 temp___273 temp___274 temp___275 temp___276
                    temp___277 temp___278 temp___279 temp___280 temp___281
                    temp___282 temp___283 temp___284 temp___285 temp___286
                    temp___287 temp___288 temp___289 temp___290 temp___291
                    temp___292 temp___293 temp___294 temp___295 temp___296
                    temp___297 temp___298 temp___299 temp___300 temp___301
                    temp___302 temp___303 temp___304 temp___305 temp___306
                    temp___307 temp___308 temp___309 temp___310 temp___311
                    temp___312 temp___313 temp___314 temp___315 temp___316
                    temp___317 temp___318 temp___319 temp___320 temp___321
                    temp___322)))
  (forall ((temp___323 Int))
  (ite (= temp___323 59) (= (select temp___264 temp___323) temp___321)
  (ite (= temp___323 58) (= (select temp___264 temp___323) temp___320)
  (ite (= temp___323 57) (= (select temp___264 temp___323) temp___319)
  (ite (= temp___323 56) (= (select temp___264 temp___323) temp___318)
  (ite (= temp___323 55) (= (select temp___264 temp___323) temp___317)
  (ite (= temp___323 54) (= (select temp___264 temp___323) temp___316)
  (ite (= temp___323 53) (= (select temp___264 temp___323) temp___315)
  (ite (= temp___323 52) (= (select temp___264 temp___323) temp___314)
  (ite (= temp___323 51) (= (select temp___264 temp___323) temp___313)
  (ite (= temp___323 50) (= (select temp___264 temp___323) temp___312)
  (ite (= temp___323 49) (= (select temp___264 temp___323) temp___311)
  (ite (= temp___323 48) (= (select temp___264 temp___323) temp___310)
  (ite (= temp___323 47) (= (select temp___264 temp___323) temp___309)
  (ite (= temp___323 46) (= (select temp___264 temp___323) temp___308)
  (ite (= temp___323 45) (= (select temp___264 temp___323) temp___307)
  (ite (= temp___323 44) (= (select temp___264 temp___323) temp___306)
  (ite (= temp___323 43) (= (select temp___264 temp___323) temp___305)
  (ite (= temp___323 41) (= (select temp___264 temp___323) temp___304)
  (ite (= temp___323 40) (= (select temp___264 temp___323) temp___303)
  (ite (= temp___323 39) (= (select temp___264 temp___323) temp___302)
  (ite (= temp___323 37) (= (select temp___264 temp___323) temp___301)
  (ite (= temp___323 36) (= (select temp___264 temp___323) temp___300)
  (ite (= temp___323 34) (= (select temp___264 temp___323) temp___299)
  (ite (= temp___323 33) (= (select temp___264 temp___323) temp___298)
  (ite (= temp___323 32) (= (select temp___264 temp___323) temp___297)
  (ite (= temp___323 31) (= (select temp___264 temp___323) temp___296)
  (ite (= temp___323 30) (= (select temp___264 temp___323) temp___295)
  (ite (= temp___323 29) (= (select temp___264 temp___323) temp___294)
  (ite (= temp___323 28) (= (select temp___264 temp___323) temp___293)
  (ite (= temp___323 27) (= (select temp___264 temp___323) temp___292)
  (ite (= temp___323 26) (= (select temp___264 temp___323) temp___291)
  (ite (= temp___323 25) (= (select temp___264 temp___323) temp___290)
  (ite (= temp___323 24) (= (select temp___264 temp___323) temp___289)
  (ite (= temp___323 23) (= (select temp___264 temp___323) temp___288)
  (ite (= temp___323 22) (= (select temp___264 temp___323) temp___287)
  (ite (= temp___323 21) (= (select temp___264 temp___323) temp___286)
  (ite (= temp___323 20) (= (select temp___264 temp___323) temp___285)
  (ite (= temp___323 19) (= (select temp___264 temp___323) temp___284)
  (ite (= temp___323 18) (= (select temp___264 temp___323) temp___283)
  (ite (= temp___323 17) (= (select temp___264 temp___323) temp___282)
  (ite (= temp___323 16) (= (select temp___264 temp___323) temp___281)
  (ite (= temp___323 15) (= (select temp___264 temp___323) temp___280)
  (ite (= temp___323 14) (= (select temp___264 temp___323) temp___279)
  (ite (= temp___323 13) (= (select temp___264 temp___323) temp___278)
  (ite (= temp___323 12) (= (select temp___264 temp___323) temp___277)
  (ite (= temp___323 11) (= (select temp___264 temp___323) temp___276)
  (ite (= temp___323 10) (= (select temp___264 temp___323) temp___275)
  (ite (= temp___323 9) (= (select temp___264 temp___323) temp___274)
  (ite (= temp___323 8) (= (select temp___264 temp___323) temp___273)
  (ite (= temp___323 7) (= (select temp___264 temp___323) temp___272)
  (ite (= temp___323 6) (= (select temp___264 temp___323) temp___271)
  (ite (= temp___323 5) (= (select temp___264 temp___323) temp___270)
  (ite (= temp___323 4) (= (select temp___264 temp___323) temp___269)
  (ite (= temp___323 3) (= (select temp___264 temp___323) temp___268)
  (ite (= temp___323 2) (= (select temp___264 temp___323) temp___267)
  (ite (= temp___323 1) (= (select temp___264 temp___323) temp___266)
  (ite (= temp___323 0) (= (select temp___264 temp___323) temp___265)
  (= (select temp___264 temp___323) temp___322))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

;; def_axiom
  (assert
  (forall ((temp___326 us_rep2) (temp___327 us_rep2))
  (let ((temp___325 (temp_____aggregate_def_324 temp___326 temp___327)))
  (forall ((temp___328 Int))
  (ite (= temp___328 1) (= (select temp___325 temp___328) temp___326)
  (= (select temp___325 temp___328) temp___327))))))

(define-fun dynamic_invariant1 ((temp___expr_333 Int)
  (temp___is_init_329 Bool) (temp___skip_constant_330 Bool)
  (temp___do_toplevel_331 Bool)
  (temp___do_typ_inv_332 Bool)) Bool (=>
                                     (or (= temp___is_init_329 true)
                                     (<= 0 1)) (in_range1 temp___expr_333)))

(declare-const rliteral16 dst_subject_type)

;; rliteral_axiom
  (assert (= (dst_subject_typeqtint rliteral16) 7))

;; null_trap__def_axiom
  (assert
  (= null_trap (us_repqtmk1 (us_split_fieldsqtmk1 rliteral16 rliteral8))))

;; null_event__def_axiom
  (assert
  (= null_event (us_repqtmk2
                (us_split_fieldsqtmk2 rliteral16 rliteral8 (distinct 0 0)
                (distinct 0 0)))))

(define-fun dynamic_invariant2 ((temp___expr_447 Int)
  (temp___is_init_443 Bool) (temp___skip_constant_444 Bool)
  (temp___do_toplevel_445 Bool)
  (temp___do_typ_inv_446 Bool)) Bool (=>
                                     (or (= temp___is_init_443 true)
                                     (<= 0 3)) (in_range4 temp___expr_447)))

(define-fun dynamic_invariant3 ((temp___expr_340 Int)
  (temp___is_init_336 Bool) (temp___skip_constant_337 Bool)
  (temp___do_toplevel_338 Bool)
  (temp___do_typ_inv_339 Bool)) Bool (=>
                                     (or (= temp___is_init_336 true)
                                     (<= 0 7)) (in_range2 temp___expr_340)))

(define-fun dynamic_invariant4 ((temp___expr_347 Int)
  (temp___is_init_343 Bool) (temp___skip_constant_344 Bool)
  (temp___do_toplevel_345 Bool)
  (temp___do_typ_inv_346 Bool)) Bool (=>
                                     (or (= temp___is_init_343 true)
                                     (<= 0 256)) (in_range3 temp___expr_347)))

(define-fun dynamic_invariant5 ((temp___expr_388 (_ BitVec 32))
  (temp___is_init_384 Bool) (temp___skip_constant_385 Bool)
  (temp___do_toplevel_386 Bool) (temp___do_typ_inv_387 Bool)) Bool true)

(define-fun dynamic_invariant6 ((temp___expr_407 (_ BitVec 64))
  (temp___is_init_403 Bool) (temp___skip_constant_404 Bool)
  (temp___do_toplevel_405 Bool) (temp___do_typ_inv_406 Bool)) Bool true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant subject_id true false true true))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 0)))) #x0000000000001000) #x0000000000000000))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 1)))) #x0000000000001000) #x0000000000000000))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 2)))) #x0000000000001000) #x0000000000000000))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 3)))) #x0000000000001000) #x0000000000000000))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 4)))) #x0000000000001000) #x0000000000000000))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 5)))) #x0000000000001000) #x0000000000000000))

;; Assert
  (assert
  (= (bvurem (to_rep2
             (rec__ada___skp__subjects__subject_spec_type__pml4_address
             (us_split_fields7 (select subject_specs 6)))) #x0000000000001000) #x0000000000000000))

(declare-const usf Int)

;; H
  (assert
  (= (and (ite (<= 0 usf) true false) (ite (<= usf 6) true false)) true))

(declare-const o (_ BitVec 64))

;; Ensures
  (assert
  (= (to_rep2
     (rec__ada___skp__subjects__subject_spec_type__pml4_address
     (us_split_fields7 (select subject_specs usf)))) o))

(assert
;; defqtvc
 ;; File "skp-subjects.ads", line 44, characters 0-0
  (not (not (= #x0000000000001000 #x0000000000000000))))
(check-sat)
