(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort r 0)

(declare-fun user_eq4 (r r) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const dummy4 r)

(declare-datatypes () ((r__ref (r__refqtmk (r__content r)))))
(define-fun r__ref_r__content__projection ((a r__ref)) r (r__content a))

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-datatypes ()
((us_split_discrs (us_split_discrsqtmk (rec__size_attr__r1__a Bool)))))
(define-fun us_split_discrs_rec__size_attr__r1__a__projection ((a us_split_discrs)) Bool 
  (rec__size_attr__r1__a a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__size_attr__r1__x character)))))
(define-fun us_split_fields_rec__size_attr__r1__x__projection ((a us_split_fields)) character 
  (rec__size_attr__r1__x a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun size_attr__r1__x__pred ((a us_rep)) Bool (= (ite (rec__size_attr__r1__a
                                                             (us_split_discrs1
                                                             a)) 1 0) 1))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__size_attr__r1__a (us_split_discrs1 a)) 1 0) (ite 
                        (rec__size_attr__r1__a (us_split_discrs1 b)) 1 0))
                        (=> (size_attr__r1__x__pred a)
                        (= (to_rep
                           (rec__size_attr__r1__x (us_split_fields1 a))) 
                        (to_rep (rec__size_attr__r1__x (us_split_fields1 b))))))
                   true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const size_attr__r1__a__first__bit Int)

(declare-const size_attr__r1__a__last__bit Int)

(declare-const size_attr__r1__a__position Int)

;; size_attr__r1__a__first__bit_axiom
  (assert (<= 0 size_attr__r1__a__first__bit))

;; size_attr__r1__a__last__bit_axiom
  (assert (< size_attr__r1__a__first__bit size_attr__r1__a__last__bit))

;; size_attr__r1__a__position_axiom
  (assert (<= 0 size_attr__r1__a__position))

(declare-const size_attr__r1__x__first__bit Int)

(declare-const size_attr__r1__x__last__bit Int)

(declare-const size_attr__r1__x__position Int)

;; size_attr__r1__x__first__bit_axiom
  (assert (<= 0 size_attr__r1__x__first__bit))

;; size_attr__r1__x__last__bit_axiom
  (assert (< size_attr__r1__x__first__bit size_attr__r1__x__last__bit))

;; size_attr__r1__x__position_axiom
  (assert (<= 0 size_attr__r1__x__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes () ((tv1S__ref (tv1S__refqtmk (tv1S__content us_rep)))))
(define-fun tv1S__ref_tv1S__content__projection ((a tv1S__ref)) us_rep 
  (tv1S__content a))

(define-fun in_range4 ((rec__size_attr__r1__a1 Bool)
  (a us_split_discrs)) Bool (= rec__size_attr__r1__a1 (rec__size_attr__r1__a
                                                      a)))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const size_attr__r1__a__first__bit1 Int)

(declare-const size_attr__r1__a__last__bit1 Int)

(declare-const size_attr__r1__a__position1 Int)

;; size_attr__r1__a__first__bit_axiom
  (assert (<= 0 size_attr__r1__a__first__bit1))

;; size_attr__r1__a__last__bit_axiom
  (assert (< size_attr__r1__a__first__bit1 size_attr__r1__a__last__bit1))

;; size_attr__r1__a__position_axiom
  (assert (<= 0 size_attr__r1__a__position1))

(declare-const size_attr__r1__x__first__bit1 Int)

(declare-const size_attr__r1__x__last__bit1 Int)

(declare-const size_attr__r1__x__position1 Int)

;; size_attr__r1__x__first__bit_axiom
  (assert (<= 0 size_attr__r1__x__first__bit1))

;; size_attr__r1__x__last__bit_axiom
  (assert (< size_attr__r1__x__first__bit1 size_attr__r1__x__last__bit1))

;; size_attr__r1__x__position_axiom
  (assert (<= 0 size_attr__r1__x__position1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes () ((r1__ref (r1__refqtmk (r1__content us_rep)))))
(define-fun r1__ref_r1__content__projection ((a r1__ref)) us_rep (r1__content
                                                                 a))

(declare-const v1__split_discrs us_split_discrs)

(declare-const v1__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun dynamic_invariant1 ((temp___expr_340 us_rep)
  (temp___is_init_336 Bool) (temp___skip_constant_337 Bool)
  (temp___do_toplevel_338 Bool)
  (temp___do_typ_inv_339 Bool)) Bool (=>
                                     (not (= temp___skip_constant_337 true))
                                     (in_range4 (distinct 0 0)
                                     (us_split_discrs1 temp___expr_340))))

(define-fun default_initial_assumption ((temp___expr_342 us_rep)
  (temp___skip_top_level_343 Bool)) Bool (= (rec__size_attr__r1__a
                                            (us_split_discrs1
                                            temp___expr_342)) (distinct 0 0)))

(define-fun default_initial_assumption1 ((temp___expr_205 us_rep)
  (temp___skip_top_level_206 Bool)) Bool (= (rec__size_attr__r1__a
                                            (us_split_discrs1
                                            temp___expr_205)) (distinct 0 0)))

(declare-const v2__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const size_attr__r1__a__first__bit2 Int)

(declare-const size_attr__r1__a__last__bit2 Int)

(declare-const size_attr__r1__a__position2 Int)

;; size_attr__r1__a__first__bit_axiom
  (assert (<= 0 size_attr__r1__a__first__bit2))

;; size_attr__r1__a__last__bit_axiom
  (assert (< size_attr__r1__a__first__bit2 size_attr__r1__a__last__bit2))

;; size_attr__r1__a__position_axiom
  (assert (<= 0 size_attr__r1__a__position2))

(declare-const size_attr__r1__x__first__bit2 Int)

(declare-const size_attr__r1__x__last__bit2 Int)

(declare-const size_attr__r1__x__position2 Int)

;; size_attr__r1__x__first__bit_axiom
  (assert (<= 0 size_attr__r1__x__first__bit2))

;; size_attr__r1__x__last__bit_axiom
  (assert (< size_attr__r1__x__first__bit2 size_attr__r1__x__last__bit2))

;; size_attr__r1__x__position_axiom
  (assert (<= 0 size_attr__r1__x__position2))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((r1f__ref (r1f__refqtmk (r1f__content us_rep)))))
(define-fun r1f__ref_r1f__content__projection ((a r1f__ref)) us_rep (r1f__content
                                                                    a))

(declare-const v3__split_discrs us_split_discrs)

(declare-const v3__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant2 ((temp___expr_213 us_rep)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)
  (temp___do_typ_inv_212 Bool)) Bool (=>
                                     (not (= temp___skip_constant_210 true))
                                     (in_range4 (distinct 0 0)
                                     (us_split_discrs1 temp___expr_213))))

(define-fun default_initial_assumption2 ((temp___expr_215 us_rep)
  (temp___skip_top_level_216 Bool)) Bool (= (rec__size_attr__r1__a
                                            (us_split_discrs1
                                            temp___expr_215)) (distinct 0 0)))

(declare-datatypes ()
((us_split_fields2 (us_split_fieldsqtmk1 (rec__size_attr__r2__x integer)))))
(define-fun us_split_fields_rec__size_attr__r2__x__projection ((a us_split_fields2)) integer 
  (rec__size_attr__r2__x a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep1
                            (rec__size_attr__r2__x (us_split_fields3 a))) 
                    (to_rep1 (rec__size_attr__r2__x (us_split_fields3 b))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const size_attr__r2__x__first__bit Int)

(declare-const size_attr__r2__x__last__bit Int)

(declare-const size_attr__r2__x__position Int)

;; size_attr__r2__x__first__bit_axiom
  (assert (<= 0 size_attr__r2__x__first__bit))

;; size_attr__r2__x__last__bit_axiom
  (assert (< size_attr__r2__x__first__bit size_attr__r2__x__last__bit))

;; size_attr__r2__x__position_axiom
  (assert (<= 0 size_attr__r2__x__position))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes () ((r2__ref (r2__refqtmk (r2__content us_rep1)))))
(define-fun r2__ref_r2__content__projection ((a r2__ref)) us_rep1 (r2__content
                                                                  a))

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__size_attr__r3__x integer)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__size_attr__r3__x__projection ((a us_split_fields4)) integer 
  (rec__size_attr__r3__x a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields4)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)(attr__tag Int)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun us_rep_attr__tag__projection ((a us_rep2)) Int (attr__tag a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (= (to_rep1
                            (rec__size_attr__r3__x (us_split_fields5 a))) 
                    (to_rep1 (rec__size_attr__r3__x (us_split_fields5 b))))
                    true false))

(declare-fun us_dispatch_eq (us_rep2 us_rep2) Bool)

(declare-const us_tag Int)

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const size_attr__r3__x__first__bit Int)

(declare-const size_attr__r3__x__last__bit Int)

(declare-const size_attr__r3__x__position Int)

;; size_attr__r3__x__first__bit_axiom
  (assert (<= 0 size_attr__r3__x__first__bit))

;; size_attr__r3__x__last__bit_axiom
  (assert (< size_attr__r3__x__first__bit size_attr__r3__x__last__bit))

;; size_attr__r3__x__position_axiom
  (assert (<= 0 size_attr__r3__x__position))

(declare-fun user_eq9 (us_rep2 us_rep2) Bool)

(declare-const dummy9 us_rep2)

(declare-datatypes () ((r3__ref (r3__refqtmk (r3__content us_rep2)))))
(define-fun r3__ref_r3__content__projection ((a r3__ref)) us_rep2 (r3__content
                                                                  a))

(declare-const v5__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun default_initial_assumption3 ((temp___expr_232 us_rep2)
  (temp___skip_top_level_233 Bool)) Bool (= (attr__tag temp___expr_232) 
  us_tag))

(declare-datatypes ()
((us_split_fields6
 (us_split_fieldsqtmk3
 (rec__size_attr__r4__y integer)(rec__size_attr__r3__x1 integer)(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__size_attr__r4__y__projection ((a us_split_fields6)) integer 
  (rec__size_attr__r4__y a))

(define-fun us_split_fields_rec__size_attr__r3__x__2__projection ((a us_split_fields6)) integer 
  (rec__size_attr__r3__x1 a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields6)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref3
 (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep3)) Int (attr__tag1 a))

(declare-fun hide_ext__ (integer us_private) us_private)

(declare-fun extract__size_attr__r4__y (us_private) integer)

;; extract__size_attr__r4__y__conv
  (assert
  (forall ((size_attr__r4__y integer))
  (forall ((rec__ext__2 us_private))
  (= (extract__size_attr__r4__y (hide_ext__ size_attr__r4__y rec__ext__2)) size_attr__r4__y))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep3)) us_rep2 (us_repqtmk2
                                          (us_split_fieldsqtmk2
                                          (rec__size_attr__r3__x1
                                          (us_split_fields7 a))
                                          (hide_ext__
                                          (rec__size_attr__r4__y
                                          (us_split_fields7 a))
                                          (rec__ext__1 (us_split_fields7 a))))
                                          (attr__tag1 a)))

(define-fun of_base ((r1 us_rep2)) us_rep3 (us_repqtmk3
                                           (us_split_fieldsqtmk3
                                           (extract__size_attr__r4__y
                                           (rec__ext__ (us_split_fields5 r1)))
                                           (rec__size_attr__r3__x
                                           (us_split_fields5 r1))
                                           (extract__ext__
                                           (rec__ext__ (us_split_fields5 r1))))
                                           (attr__tag r1)))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (and
                         (= (to_rep1
                            (rec__size_attr__r4__y (us_split_fields7 a))) 
                         (to_rep1
                         (rec__size_attr__r4__y (us_split_fields7 b))))
                         (= (to_rep1
                            (rec__size_attr__r3__x1 (us_split_fields7 a))) 
                         (to_rep1
                         (rec__size_attr__r3__x1 (us_split_fields7 b)))))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-const size_attr__r4__y__first__bit Int)

(declare-const size_attr__r4__y__last__bit Int)

(declare-const size_attr__r4__y__position Int)

;; size_attr__r4__y__first__bit_axiom
  (assert (<= 0 size_attr__r4__y__first__bit))

;; size_attr__r4__y__last__bit_axiom
  (assert (< size_attr__r4__y__first__bit size_attr__r4__y__last__bit))

;; size_attr__r4__y__position_axiom
  (assert (<= 0 size_attr__r4__y__position))

(declare-const size_attr__r3__x__first__bit1 Int)

(declare-const size_attr__r3__x__last__bit1 Int)

(declare-const size_attr__r3__x__position1 Int)

;; size_attr__r3__x__first__bit_axiom
  (assert (<= 0 size_attr__r3__x__first__bit1))

;; size_attr__r3__x__last__bit_axiom
  (assert (< size_attr__r3__x__first__bit1 size_attr__r3__x__last__bit1))

;; size_attr__r3__x__position_axiom
  (assert (<= 0 size_attr__r3__x__position1))

(declare-fun user_eq10 (us_rep3 us_rep3) Bool)

(declare-const dummy10 us_rep3)

(declare-datatypes () ((r4__ref (r4__refqtmk (r4__content us_rep3)))))
(define-fun r4__ref_r4__content__projection ((a r4__ref)) us_rep3 (r4__content
                                                                  a))

(declare-const v6__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun default_initial_assumption4 ((temp___expr_240 us_rep3)
  (temp___skip_top_level_241 Bool)) Bool (= (attr__tag1 temp___expr_240) 
  us_tag1))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq11 (natural natural) Bool)

(declare-const dummy11 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep2 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int natural))))))
(declare-fun slide1 ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq6 ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-const attr__ATTRIBUTE_ADDRESS14 Int)

(declare-const attr__ATTRIBUTE_ADDRESS15 Int)

(declare-sort map1 0)

(declare-datatypes () ((map__ref2 (map__refqtmk2 (map__content2 map1)))))
(declare-fun get (map1 Int Int) natural)

(declare-fun set (map1 Int Int natural) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a natural))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a natural))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide2 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide2 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide2 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq7 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_155 Int)
                             (temp___idx_156 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_155)
                             (<= temp___idx_155 a__last))
                             (and (<= a__first_2 temp___idx_156)
                             (<= temp___idx_156 a__last_2)))
                             (= (to_rep2
                                (get a temp___idx_155 temp___idx_156)) 
                             (to_rep2
                             (get b (+ (- b__first a__first) temp___idx_155)
                             (+ (- b__first_2 a__first_2) temp___idx_156)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq7 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_155 Int) (temp___idx_156 Int))
  (=>
  (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2)))
  (= (to_rep2 (get a temp___idx_155 temp___idx_156)) (to_rep2
                                                     (get b
                                                     (+ (- b__first a__first) temp___idx_155)
                                                     (+ (- b__first_2 a__first_2) temp___idx_156)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS16 Int)

(declare-sort map2 0)

(declare-datatypes () ((map__ref3 (map__refqtmk3 (map__content3 map2)))))
(declare-fun get1 (map2 Int Int Int) natural)

(declare-fun set1 (map2 Int Int Int natural) map2)

;; Select_eq
  (assert
  (forall ((m map2))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((k Int))
  (forall ((a natural))
  (! (= (get1 (set1 m i j k a) i j k) a) :pattern ((set1 m i j k a)) )))))))

;; Select_neq
  (assert
  (forall ((m map2))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((k Int) (k2 Int))
  (forall ((a natural))
  (! (=> (not (and (= i i2) (and (= j j2) (= k k2))))
     (= (get1 (set1 m i j k a) i2 j2 k2) (get1 m i2 j2 k2))) :pattern (
  (get1 (set1 m i j k a) i2 j2 k2)) :pattern ((set1 m i j k a)
  (get1 m i2 j2 k2)) )))))))

(declare-fun slide3 (map2 Int Int Int Int Int Int) map2)

;; slide_def
  (assert
  (forall ((a map2))
  (forall ((old_first Int) (new_first Int))
  (forall ((old_first_2 Int) (new_first_2 Int))
  (forall ((old_first_3 Int) (new_first_3 Int))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((k Int))
  (! (= (get1
        (slide3 a old_first new_first old_first_2 new_first_2 old_first_3
        new_first_3) i j k) (get1 a (- i (- new_first old_first))
                            (- j (- new_first_2 old_first_2))
                            (- k (- new_first_3 old_first_3)))) :pattern (
  (get1
  (slide3 a old_first new_first old_first_2 new_first_2 old_first_3
  new_first_3) i j k)) )))))))))

(define-fun bool_eq8 ((a map2) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (b map2) (b__first Int)
  (b__last Int) (b__first_2 Int) (b__last_2 Int) (b__first_3 Int)
  (b__last_3 Int)) Bool (ite (and
                             (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (ite (<= a__first_3 a__last_3)
                             (and (<= b__first_3 b__last_3)
                             (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
                             (< b__last_3 b__first_3)))
                             (forall ((temp___idx_157 Int)
                             (temp___idx_158 Int) (temp___idx_159 Int))
                             (=>
                             (and
                             (and
                             (and (<= a__first temp___idx_157)
                             (<= temp___idx_157 a__last))
                             (and (<= a__first_2 temp___idx_158)
                             (<= temp___idx_158 a__last_2)))
                             (and (<= a__first_3 temp___idx_159)
                             (<= temp___idx_159 a__last_3)))
                             (= (to_rep2
                                (get1 a temp___idx_157 temp___idx_158
                                temp___idx_159)) (to_rep2
                                                 (get1 b
                                                 (+ (- b__first a__first) temp___idx_157)
                                                 (+ (- b__first_2 a__first_2) temp___idx_158)
                                                 (+ (- b__first_3 a__first_3) temp___idx_159)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map2) (b map2))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (a__first_3 Int) (a__last_3 Int) (b__first Int) (b__last Int)
  (b__first_2 Int) (b__last_2 Int) (b__first_3 Int) (b__last_3 Int))
  (=>
  (= (bool_eq8 b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3 a
     a__first a__last a__first_2 a__last_2 a__first_3 a__last_3) true)
  (and
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (ite (<= a__first_3 a__last_3)
  (and (<= b__first_3 b__last_3)
  (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
  (< b__last_3 b__first_3)))
  (forall ((temp___idx_157 Int) (temp___idx_158 Int) (temp___idx_159 Int))
  (=>
  (and
  (and (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (and (<= a__first_2 temp___idx_158) (<= temp___idx_158 a__last_2)))
  (and (<= a__first_3 temp___idx_159) (<= temp___idx_159 a__last_3)))
  (= (to_rep2 (get1 a temp___idx_157 temp___idx_158 temp___idx_159)) 
  (to_rep2
  (get1 b (+ (- b__first a__first) temp___idx_157)
  (+ (- b__first_2 a__first_2) temp___idx_158)
  (+ (- b__first_3 a__first_3) temp___idx_159)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS17 Int)

(declare-sort map3 0)

(declare-datatypes () ((map__ref4 (map__refqtmk4 (map__content4 map3)))))
(declare-fun get2 (map3 Int Int Int Int) natural)

(declare-fun set2 (map3 Int Int Int Int natural) map3)

;; Select_eq
  (assert
  (forall ((m map3))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((k Int))
  (forall ((l Int))
  (forall ((a natural))
  (! (= (get2 (set2 m i j k l a) i j k l) a) :pattern ((set2 m i j k l a)) ))))))))

;; Select_neq
  (assert
  (forall ((m map3))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((k Int) (k2 Int))
  (forall ((l Int) (l2 Int))
  (forall ((a natural))
  (! (=> (not (and (= i i2) (and (= j j2) (and (= k k2) (= l l2)))))
     (= (get2 (set2 m i j k l a) i2 j2 k2 l2) (get2 m i2 j2 k2 l2))) :pattern (
  (get2 (set2 m i j k l a) i2 j2 k2 l2)) :pattern ((set2 m i j k l a)
  (get2 m i2 j2 k2 l2)) ))))))))

(declare-fun slide4 (map3 Int Int Int Int Int Int Int Int) map3)

;; slide_def
  (assert
  (forall ((a map3))
  (forall ((old_first Int) (new_first Int))
  (forall ((old_first_2 Int) (new_first_2 Int))
  (forall ((old_first_3 Int) (new_first_3 Int))
  (forall ((old_first_4 Int) (new_first_4 Int))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((k Int))
  (forall ((l Int))
  (! (= (get2
        (slide4 a old_first new_first old_first_2 new_first_2 old_first_3
        new_first_3 old_first_4 new_first_4) i j k l) (get2 a
                                                      (- i (- new_first old_first))
                                                      (- j (- new_first_2 old_first_2))
                                                      (- k (- new_first_3 old_first_3))
                                                      (- l (- new_first_4 old_first_4)))) :pattern (
  (get2
  (slide4 a old_first new_first old_first_2 new_first_2 old_first_3
  new_first_3 old_first_4 new_first_4) i j k l)) )))))))))))

(define-fun bool_eq9 ((a map3) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (a__first_3 Int) (a__last_3 Int) (a__first_4 Int)
  (a__last_4 Int) (b map3) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int) (b__first_3 Int) (b__last_3 Int) (b__first_4 Int)
  (b__last_4 Int)) Bool (ite (and
                             (and
                             (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (ite (<= a__first_3 a__last_3)
                             (and (<= b__first_3 b__last_3)
                             (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
                             (< b__last_3 b__first_3)))
                             (ite (<= a__first_4 a__last_4)
                             (and (<= b__first_4 b__last_4)
                             (= (- a__last_4 a__first_4) (- b__last_4 b__first_4)))
                             (< b__last_4 b__first_4)))
                             (forall ((temp___idx_160 Int)
                             (temp___idx_161 Int) (temp___idx_162 Int)
                             (temp___idx_163 Int))
                             (=>
                             (and
                             (and
                             (and
                             (and (<= a__first temp___idx_160)
                             (<= temp___idx_160 a__last))
                             (and (<= a__first_2 temp___idx_161)
                             (<= temp___idx_161 a__last_2)))
                             (and (<= a__first_3 temp___idx_162)
                             (<= temp___idx_162 a__last_3)))
                             (and (<= a__first_4 temp___idx_163)
                             (<= temp___idx_163 a__last_4)))
                             (= (to_rep2
                                (get2 a temp___idx_160 temp___idx_161
                                temp___idx_162 temp___idx_163)) (to_rep2
                                                                (get2 b
                                                                (+ (- b__first a__first) temp___idx_160)
                                                                (+ (- b__first_2 a__first_2) temp___idx_161)
                                                                (+ (- b__first_3 a__first_3) temp___idx_162)
                                                                (+ (- b__first_4 a__first_4) temp___idx_163)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map3) (b map3))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (a__first_3 Int) (a__last_3 Int) (a__first_4 Int) (a__last_4 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int)
  (b__first_3 Int) (b__last_3 Int) (b__first_4 Int) (b__last_4 Int))
  (=>
  (= (bool_eq9 b b__first b__last b__first_2 b__last_2 b__first_3 b__last_3
     b__first_4 b__last_4 a a__first a__last a__first_2 a__last_2 a__first_3
     a__last_3 a__first_4 a__last_4) true)
  (and
  (and
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (ite (<= a__first_3 a__last_3)
  (and (<= b__first_3 b__last_3)
  (= (- a__last_3 a__first_3) (- b__last_3 b__first_3)))
  (< b__last_3 b__first_3)))
  (ite (<= a__first_4 a__last_4)
  (and (<= b__first_4 b__last_4)
  (= (- a__last_4 a__first_4) (- b__last_4 b__first_4)))
  (< b__last_4 b__first_4)))
  (forall ((temp___idx_160 Int) (temp___idx_161 Int) (temp___idx_162 Int)
  (temp___idx_163 Int))
  (=>
  (and
  (and
  (and (and (<= a__first temp___idx_160) (<= temp___idx_160 a__last))
  (and (<= a__first_2 temp___idx_161) (<= temp___idx_161 a__last_2)))
  (and (<= a__first_3 temp___idx_162) (<= temp___idx_162 a__last_3)))
  (and (<= a__first_4 temp___idx_163) (<= temp___idx_163 a__last_4)))
  (= (to_rep2
     (get2 a temp___idx_160 temp___idx_161 temp___idx_162 temp___idx_163)) 
  (to_rep2
  (get2 b (+ (- b__first a__first) temp___idx_160)
  (+ (- b__first_2 a__first_2) temp___idx_161)
  (+ (- b__first_3 a__first_3) temp___idx_162)
  (+ (- b__first_4 a__first_4) temp___idx_163)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS18 Int)

(declare-sort my_int 0)

(declare-fun my_intqtint (my_int) Int)

;; my_int'axiom
  (assert
  (forall ((i my_int)) (and (<= 1 (my_intqtint i)) (<= (my_intqtint i) 10))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq12 (my_int my_int) Bool)

(declare-const dummy12 my_int)

(declare-datatypes ()
((my_int__ref (my_int__refqtmk (my_int__content my_int)))))
(define-fun my_int__ref_my_int__content__projection ((a my_int__ref)) my_int 
  (my_int__content a))

(define-fun dynamic_invariant3 ((temp___expr_189 Int)
  (temp___is_init_185 Bool) (temp___skip_constant_186 Bool)
  (temp___do_toplevel_187 Bool)
  (temp___do_typ_inv_188 Bool)) Bool (=>
                                     (or (= temp___is_init_185 true)
                                     (<= 1 10)) (in_range6 temp___expr_189)))

(declare-const dummy13 (Array Int natural))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size1 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq13 ((Array Int natural) (Array Int natural)) Bool)

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t1 (us_tqtmk1 (elts1 (Array Int natural))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int natural) (elts1 a))

(define-fun of_array1 ((a (Array Int natural)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const component__size2 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment9))

(define-fun bool_eq10 ((x us_t1)
  (y us_t1)) Bool (bool_eq6 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq14 (us_t1 us_t1) Bool)

(declare-const dummy14 us_t1)

(declare-datatypes ()
((unconstrained_array__ref
 (unconstrained_array__refqtmk (unconstrained_array__content us_t1)))))
(define-fun unconstrained_array__ref_unconstrained_array__content__projection ((a unconstrained_array__ref)) us_t1 
  (unconstrained_array__content a))

(declare-const dummy15 map1)

(declare-const value__size10 Int)

(declare-const object__size10 Int)

(declare-const component__size3 Int)

(declare-const alignment10 Int)

;; value__size_axiom
  (assert (<= 0 value__size10))

;; object__size_axiom
  (assert (<= 0 object__size10))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment10))

(declare-fun user_eq15 (map1 map1) Bool)

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-sort t3 0)

(declare-fun first5 (t3) integer)

(declare-fun last5 (t3) integer)

(declare-fun mk3 (Int Int) t3)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first5 (mk3 f l))) f)
     (= (to_rep1 (last5 (mk3 f l))) l)))) :pattern ((mk3 f l)) )))

(define-fun dynamic_property3 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t2 (us_tqtmk2 (elts2 map1)(rt2 t2)(rt_2 t3)))))
(define-fun to_array2 ((a us_t2)) map1 (elts2 a))

(define-fun of_array2 ((a map1) (f Int) (l Int) (f2 Int)
  (l2 Int)) us_t2 (us_tqtmk2 a (mk2 f l) (mk3 f2 l2)))

(define-fun first6 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last6 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first6 a) (last6 a))
                                    (+ (- (last6 a) (first6 a)) 1) 0))

(define-fun first_2 ((a us_t2)) Int (to_rep1 (first5 (rt_2 a))))

(define-fun last_2 ((a us_t2)) Int (to_rep1 (last5 (rt_2 a))))

(define-fun length_2 ((a us_t2)) Int (ite (<= (first_2 a) (last_2 a))
                                     (+ (- (last_2 a) (first_2 a)) 1) 0))

(define-fun dynamic_property4 ((range_first1 Int) (range_last1 Int) (f1 Int)
  (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int)
  (l2 Int)) Bool (and (dynamic_property2 range_first1 range_last1 f1 l1)
                 (dynamic_property3 range_first2 range_last2 f2 l2)))

(declare-const value__size11 Int)

(declare-const object__size11 Int)

(declare-const component__size4 Int)

(declare-const alignment11 Int)

;; value__size_axiom
  (assert (<= 0 value__size11))

;; object__size_axiom
  (assert (<= 0 object__size11))

;; component__size_axiom
  (assert (<= 0 component__size4))

;; alignment_axiom
  (assert (<= 0 alignment11))

(define-fun bool_eq11 ((x us_t2)
  (y us_t2)) Bool (bool_eq7 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (to_rep1 (first5 (rt_2 x)))
                  (to_rep1 (last5 (rt_2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))
                  (to_rep1 (first5 (rt_2 y))) (to_rep1 (last5 (rt_2 y)))))

(declare-fun user_eq16 (us_t2 us_t2) Bool)

(declare-const dummy16 us_t2)

(declare-datatypes ()
((unconstrained_array_2__ref
 (unconstrained_array_2__refqtmk (unconstrained_array_2__content us_t2)))))
(define-fun unconstrained_array_2__ref_unconstrained_array_2__content__projection ((a unconstrained_array_2__ref)) us_t2 
  (unconstrained_array_2__content a))

(declare-const dummy17 map2)

(declare-const value__size12 Int)

(declare-const object__size12 Int)

(declare-const component__size5 Int)

(declare-const alignment12 Int)

;; value__size_axiom
  (assert (<= 0 value__size12))

;; object__size_axiom
  (assert (<= 0 object__size12))

;; component__size_axiom
  (assert (<= 0 component__size5))

;; alignment_axiom
  (assert (<= 0 alignment12))

(declare-fun user_eq17 (map2 map2) Bool)

(declare-sort t4 0)

(declare-fun first7 (t4) integer)

(declare-fun last7 (t4) integer)

(declare-fun mk4 (Int Int) t4)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first7 (mk4 f l))) f)
     (= (to_rep1 (last7 (mk4 f l))) l)))) :pattern ((mk4 f l)) )))

(define-fun dynamic_property5 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-sort t5 0)

(declare-fun first8 (t5) integer)

(declare-fun last8 (t5) integer)

(declare-fun mk5 (Int Int) t5)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first8 (mk5 f l))) f)
     (= (to_rep1 (last8 (mk5 f l))) l)))) :pattern ((mk5 f l)) )))

(define-fun dynamic_property6 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-sort t6 0)

(declare-fun first9 (t6) integer)

(declare-fun last9 (t6) integer)

(declare-fun mk6 (Int Int) t6)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first9 (mk6 f l))) f)
     (= (to_rep1 (last9 (mk6 f l))) l)))) :pattern ((mk6 f l)) )))

(define-fun dynamic_property7 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t3 (us_tqtmk3 (elts3 map2)(rt3 t4)(rt_21 t5)(rt_3 t6)))))
(define-fun to_array3 ((a us_t3)) map2 (elts3 a))

(define-fun of_array3 ((a map2) (f Int) (l Int) (f2 Int) (l2 Int) (f3 Int)
  (l3 Int)) us_t3 (us_tqtmk3 a (mk4 f l) (mk5 f2 l2) (mk6 f3 l3)))

(define-fun first10 ((a us_t3)) Int (to_rep1 (first7 (rt3 a))))

(define-fun last10 ((a us_t3)) Int (to_rep1 (last7 (rt3 a))))

(define-fun length3 ((a us_t3)) Int (ite (<= (first10 a) (last10 a))
                                    (+ (- (last10 a) (first10 a)) 1) 0))

(define-fun first_21 ((a us_t3)) Int (to_rep1 (first8 (rt_21 a))))

(define-fun last_21 ((a us_t3)) Int (to_rep1 (last8 (rt_21 a))))

(define-fun length_21 ((a us_t3)) Int (ite (<= (first_21 a) (last_21 a))
                                      (+ (- (last_21 a) (first_21 a)) 1) 0))

(define-fun first_3 ((a us_t3)) Int (to_rep1 (first9 (rt_3 a))))

(define-fun last_3 ((a us_t3)) Int (to_rep1 (last9 (rt_3 a))))

(define-fun length_3 ((a us_t3)) Int (ite (<= (first_3 a) (last_3 a))
                                     (+ (- (last_3 a) (first_3 a)) 1) 0))

(define-fun dynamic_property8 ((range_first1 Int) (range_last1 Int) (f1 Int)
  (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int) (l2 Int)
  (range_first3 Int) (range_last3 Int) (f3 Int)
  (l3 Int)) Bool (and (dynamic_property5 range_first1 range_last1 f1 l1)
                 (and (dynamic_property6 range_first2 range_last2 f2 l2)
                 (dynamic_property7 range_first3 range_last3 f3 l3))))

(declare-const value__size13 Int)

(declare-const object__size13 Int)

(declare-const component__size6 Int)

(declare-const alignment13 Int)

;; value__size_axiom
  (assert (<= 0 value__size13))

;; object__size_axiom
  (assert (<= 0 object__size13))

;; component__size_axiom
  (assert (<= 0 component__size6))

;; alignment_axiom
  (assert (<= 0 alignment13))

(define-fun bool_eq12 ((x us_t3)
  (y us_t3)) Bool (bool_eq8 (elts3 x) (to_rep1 (first7 (rt3 x)))
                  (to_rep1 (last7 (rt3 x))) (to_rep1 (first8 (rt_21 x)))
                  (to_rep1 (last8 (rt_21 x))) (to_rep1 (first9 (rt_3 x)))
                  (to_rep1 (last9 (rt_3 x))) (elts3 y)
                  (to_rep1 (first7 (rt3 y))) (to_rep1 (last7 (rt3 y)))
                  (to_rep1 (first8 (rt_21 y))) (to_rep1 (last8 (rt_21 y)))
                  (to_rep1 (first9 (rt_3 y))) (to_rep1 (last9 (rt_3 y)))))

(declare-fun user_eq18 (us_t3 us_t3) Bool)

(declare-const dummy18 us_t3)

(declare-datatypes ()
((unconstrained_array_3__ref
 (unconstrained_array_3__refqtmk (unconstrained_array_3__content us_t3)))))
(define-fun unconstrained_array_3__ref_unconstrained_array_3__content__projection ((a unconstrained_array_3__ref)) us_t3 
  (unconstrained_array_3__content a))

(declare-const dummy19 map3)

(declare-const value__size14 Int)

(declare-const object__size14 Int)

(declare-const component__size7 Int)

(declare-const alignment14 Int)

;; value__size_axiom
  (assert (<= 0 value__size14))

;; object__size_axiom
  (assert (<= 0 object__size14))

;; component__size_axiom
  (assert (<= 0 component__size7))

;; alignment_axiom
  (assert (<= 0 alignment14))

(declare-fun user_eq19 (map3 map3) Bool)

(declare-sort t7 0)

(declare-fun first11 (t7) integer)

(declare-fun last11 (t7) integer)

(declare-fun mk7 (Int Int) t7)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first11 (mk7 f l))) f)
     (= (to_rep1 (last11 (mk7 f l))) l)))) :pattern ((mk7 f l)) )))

(define-fun dynamic_property9 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-sort t8 0)

(declare-fun first12 (t8) integer)

(declare-fun last12 (t8) integer)

(declare-fun mk8 (Int Int) t8)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first12 (mk8 f l))) f)
     (= (to_rep1 (last12 (mk8 f l))) l)))) :pattern ((mk8 f l)) )))

(define-fun dynamic_property10 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-sort t9 0)

(declare-fun first13 (t9) integer)

(declare-fun last13 (t9) integer)

(declare-fun mk9 (Int Int) t9)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first13 (mk9 f l))) f)
     (= (to_rep1 (last13 (mk9 f l))) l)))) :pattern ((mk9 f l)) )))

(define-fun dynamic_property11 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-sort t10 0)

(declare-fun first14 (t10) integer)

(declare-fun last14 (t10) integer)

(declare-fun mk10 (Int Int) t10)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first14 (mk10 f l))) f)
     (= (to_rep1 (last14 (mk10 f l))) l)))) :pattern ((mk10 f l)) )))

(define-fun dynamic_property12 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t4 (us_tqtmk4 (elts4 map3)(rt4 t7)(rt_22 t8)(rt_31 t9)(rt_4 t10)))))
(define-fun to_array4 ((a us_t4)) map3 (elts4 a))

(define-fun of_array4 ((a map3) (f Int) (l Int) (f2 Int) (l2 Int) (f3 Int)
  (l3 Int) (f4 Int)
  (l4 Int)) us_t4 (us_tqtmk4 a (mk7 f l) (mk8 f2 l2) (mk9 f3 l3)
                  (mk10 f4 l4)))

(define-fun first15 ((a us_t4)) Int (to_rep1 (first11 (rt4 a))))

(define-fun last15 ((a us_t4)) Int (to_rep1 (last11 (rt4 a))))

(define-fun length4 ((a us_t4)) Int (ite (<= (first15 a) (last15 a))
                                    (+ (- (last15 a) (first15 a)) 1) 0))

(define-fun first_22 ((a us_t4)) Int (to_rep1 (first12 (rt_22 a))))

(define-fun last_22 ((a us_t4)) Int (to_rep1 (last12 (rt_22 a))))

(define-fun length_22 ((a us_t4)) Int (ite (<= (first_22 a) (last_22 a))
                                      (+ (- (last_22 a) (first_22 a)) 1) 0))

(define-fun first_31 ((a us_t4)) Int (to_rep1 (first13 (rt_31 a))))

(define-fun last_31 ((a us_t4)) Int (to_rep1 (last13 (rt_31 a))))

(define-fun length_31 ((a us_t4)) Int (ite (<= (first_31 a) (last_31 a))
                                      (+ (- (last_31 a) (first_31 a)) 1) 0))

(define-fun first_4 ((a us_t4)) Int (to_rep1 (first14 (rt_4 a))))

(define-fun last_4 ((a us_t4)) Int (to_rep1 (last14 (rt_4 a))))

(define-fun length_4 ((a us_t4)) Int (ite (<= (first_4 a) (last_4 a))
                                     (+ (- (last_4 a) (first_4 a)) 1) 0))

(define-fun dynamic_property13 ((range_first1 Int) (range_last1 Int) (f1 Int)
  (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int) (l2 Int)
  (range_first3 Int) (range_last3 Int) (f3 Int) (l3 Int) (range_first4 Int)
  (range_last4 Int) (f4 Int)
  (l4 Int)) Bool (and (dynamic_property9 range_first1 range_last1 f1 l1)
                 (and (dynamic_property10 range_first2 range_last2 f2 l2)
                 (and (dynamic_property11 range_first3 range_last3 f3 l3)
                 (dynamic_property12 range_first4 range_last4 f4 l4)))))

(declare-const value__size15 Int)

(declare-const object__size15 Int)

(declare-const component__size8 Int)

(declare-const alignment15 Int)

;; value__size_axiom
  (assert (<= 0 value__size15))

;; object__size_axiom
  (assert (<= 0 object__size15))

;; component__size_axiom
  (assert (<= 0 component__size8))

;; alignment_axiom
  (assert (<= 0 alignment15))

(define-fun bool_eq13 ((x us_t4)
  (y us_t4)) Bool (bool_eq9 (elts4 x) (to_rep1 (first11 (rt4 x)))
                  (to_rep1 (last11 (rt4 x))) (to_rep1 (first12 (rt_22 x)))
                  (to_rep1 (last12 (rt_22 x))) (to_rep1 (first13 (rt_31 x)))
                  (to_rep1 (last13 (rt_31 x))) (to_rep1 (first14 (rt_4 x)))
                  (to_rep1 (last14 (rt_4 x))) (elts4 y)
                  (to_rep1 (first11 (rt4 y))) (to_rep1 (last11 (rt4 y)))
                  (to_rep1 (first12 (rt_22 y))) (to_rep1 (last12 (rt_22 y)))
                  (to_rep1 (first13 (rt_31 y))) (to_rep1 (last13 (rt_31 y)))
                  (to_rep1 (first14 (rt_4 y))) (to_rep1 (last14 (rt_4 y)))))

(declare-fun user_eq20 (us_t4 us_t4) Bool)

(declare-const dummy20 us_t4)

(declare-datatypes ()
((unconstrained_array_4__ref
 (unconstrained_array_4__refqtmk (unconstrained_array_4__content us_t4)))))
(define-fun unconstrained_array_4__ref_unconstrained_array_4__content__projection ((a unconstrained_array_4__ref)) us_t4 
  (unconstrained_array_4__content a))

(declare-const dummy21 (Array Int character))

(declare-const value__size16 Int)

(declare-const object__size16 Int)

(declare-const component__size9 Int)

(declare-const alignment16 Int)

;; value__size_axiom
  (assert (<= 0 value__size16))

;; object__size_axiom
  (assert (<= 0 object__size16))

;; component__size_axiom
  (assert (<= 0 component__size9))

;; alignment_axiom
  (assert (<= 0 alignment16))

(declare-fun user_eq21 ((Array Int character) (Array Int character)) Bool)

(declare-const dummy22 (Array Int natural))

(declare-const value__size17 Int)

(declare-const object__size17 Int)

(declare-const component__size10 Int)

(declare-const alignment17 Int)

;; value__size_axiom
  (assert (<= 0 value__size17))

;; object__size_axiom
  (assert (<= 0 object__size17))

;; component__size_axiom
  (assert (<= 0 component__size10))

;; alignment_axiom
  (assert (<= 0 alignment17))

(declare-fun user_eq22 ((Array Int natural) (Array Int natural)) Bool)

(declare-const dummy23 map1)

(declare-const value__size18 Int)

(declare-const object__size18 Int)

(declare-const component__size11 Int)

(declare-const alignment18 Int)

;; value__size_axiom
  (assert (<= 0 value__size18))

;; object__size_axiom
  (assert (<= 0 object__size18))

;; component__size_axiom
  (assert (<= 0 component__size11))

;; alignment_axiom
  (assert (<= 0 alignment18))

(declare-fun user_eq23 (map1 map1) Bool)

(declare-const dummy24 map2)

(declare-const value__size19 Int)

(declare-const object__size19 Int)

(declare-const component__size12 Int)

(declare-const alignment19 Int)

;; value__size_axiom
  (assert (<= 0 value__size19))

;; object__size_axiom
  (assert (<= 0 object__size19))

;; component__size_axiom
  (assert (<= 0 component__size12))

;; alignment_axiom
  (assert (<= 0 alignment19))

(declare-fun user_eq24 (map2 map2) Bool)

(declare-const dummy25 map3)

(declare-const value__size20 Int)

(declare-const object__size20 Int)

(declare-const component__size13 Int)

(declare-const alignment20 Int)

;; value__size_axiom
  (assert (<= 0 value__size20))

;; object__size_axiom
  (assert (<= 0 object__size20))

;; component__size_axiom
  (assert (<= 0 component__size13))

;; alignment_axiom
  (assert (<= 0 alignment20))

(declare-fun user_eq25 (map3 map3) Bool)

(declare-fun temp___String_Literal_405 (tuple0) (Array Int character))

;; temp___String_Literal_405__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_405 us_void_param) 1)) 97)
     (= (to_rep (select (temp___String_Literal_405 us_void_param) 2)) 98))
     (= (to_rep (select (temp___String_Literal_405 us_void_param) 3)) 99)) :pattern (
  (temp___String_Literal_405 us_void_param)) )))

(declare-fun size_attr__ca__aggregate_def (Int) (Array Int natural))

(declare-fun size_attr__ua__aggregate_def (Int) (Array Int natural))

(declare-fun size_attr__ca2__aggregate_def (Int) (Array Int natural))

(declare-fun size_attr__ca3__aggregate_def (Int) (Array Int natural))

(declare-fun size_attr__ca4__aggregate_def (Int) (Array Int natural))

(declare-fun size_attr__ua2__aggregate_def (Int) map1)

(declare-fun size_attr__ua3__aggregate_def (Int) map2)

(declare-fun size_attr__ua4__aggregate_def (Int) map3)

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range5
                                    temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant7 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant8 ((temp___expr_258 us_t1)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)
  (temp___do_typ_inv_257 Bool)) Bool (=>
                                     (not (= temp___skip_constant_255 true))
                                     (dynamic_property1 1 2147483647
                                     (first3 temp___expr_258)
                                     (last3 temp___expr_258))))

(define-fun dynamic_invariant9 ((temp___expr_276 us_t2)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)
  (temp___do_typ_inv_275 Bool)) Bool (=>
                                     (not (= temp___skip_constant_273 true))
                                     (dynamic_property4 1 2147483647
                                     (first6 temp___expr_276)
                                     (last6 temp___expr_276) 1 2147483647
                                     (first_2 temp___expr_276)
                                     (last_2 temp___expr_276))))

(define-fun dynamic_invariant10 ((temp___expr_297 us_t3)
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool)
  (temp___do_typ_inv_296 Bool)) Bool (=>
                                     (not (= temp___skip_constant_294 true))
                                     (dynamic_property8 1 2147483647
                                     (first10 temp___expr_297)
                                     (last10 temp___expr_297) 1 2147483647
                                     (first_21 temp___expr_297)
                                     (last_21 temp___expr_297) 1 2147483647
                                     (first_3 temp___expr_297)
                                     (last_3 temp___expr_297))))

(define-fun dynamic_invariant11 ((temp___expr_321 us_t4)
  (temp___is_init_317 Bool) (temp___skip_constant_318 Bool)
  (temp___do_toplevel_319 Bool)
  (temp___do_typ_inv_320 Bool)) Bool (=>
                                     (not (= temp___skip_constant_318 true))
                                     (dynamic_property13 1 2147483647
                                     (first15 temp___expr_321)
                                     (last15 temp___expr_321) 1 2147483647
                                     (first_22 temp___expr_321)
                                     (last_22 temp___expr_321) 1 2147483647
                                     (first_31 temp___expr_321)
                                     (last_31 temp___expr_321) 1 2147483647
                                     (first_4 temp___expr_321)
                                     (last_4 temp___expr_321))))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 1))

;; def_axiom
  (assert
  (forall ((temp___422 Int))
  (=> (dynamic_invariant4 temp___422 true true true true)
  (forall ((temp___423 Int))
  (= (select (size_attr__ca__aggregate_def temp___422) temp___423) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___425 Int))
  (=> (dynamic_invariant4 temp___425 true true true true)
  (forall ((temp___426 Int))
  (= (select (size_attr__ua__aggregate_def temp___425) temp___426) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___428 Int))
  (=> (dynamic_invariant4 temp___428 true true true true)
  (forall ((temp___429 Int))
  (= (select (size_attr__ca2__aggregate_def temp___428) temp___429) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___431 Int))
  (=> (dynamic_invariant4 temp___431 true true true true)
  (forall ((temp___432 Int))
  (= (select (size_attr__ca3__aggregate_def temp___431) temp___432) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___434 Int))
  (=> (dynamic_invariant4 temp___434 true true true true)
  (forall ((temp___435 Int))
  (= (select (size_attr__ca4__aggregate_def temp___434) temp___435) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___437 Int))
  (=> (dynamic_invariant4 temp___437 true true true true)
  (forall ((temp___438 Int) (temp___439 Int))
  (= (get (size_attr__ua2__aggregate_def temp___437) temp___438 temp___439) 
  rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___441 Int))
  (=> (dynamic_invariant4 temp___441 true true true true)
  (forall ((temp___442 Int) (temp___443 Int) (temp___444 Int))
  (= (get1 (size_attr__ua3__aggregate_def temp___441) temp___442 temp___443
     temp___444) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___446 Int))
  (=> (dynamic_invariant4 temp___446 true true true true)
  (forall ((temp___447 Int) (temp___448 Int) (temp___449 Int)
  (temp___450 Int))
  (= (get2 (size_attr__ua4__aggregate_def temp___446) temp___447 temp___448
     temp___449 temp___450) rliteral)))))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 1))

(declare-const v r)

(declare-const v1__split_fields character)

(declare-const v2__split_fields character)

(declare-const v2__split_discrs Bool)

(declare-const v3__split_fields character)

(declare-const v5__split_fields us_split_fields4)

(declare-const v6__split_fields us_split_fields6)

(declare-const b Bool)

;; H
  (assert (= b (distinct 0 0)))

(declare-const i Int)

;; H
  (assert (= i 0))

;; Assume
  (assert (dynamic_invariant i true false true true))

(declare-const s (Array Int character))

;; H
  (assert (= s (temp___String_Literal_405 Tuple0)))

;; Assume
  (assert true)

(declare-const mi Int)

;; H
  (assert (= mi 1))

;; Assume
  (assert (dynamic_invariant3 mi true false true true))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (= v1__attr__constrained true))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk v1__split_discrs (us_split_fieldsqtmk v1__split_fields))
  false))

;; Assume
  (assert (dynamic_invariant1
  (us_repqtmk v1__split_discrs (us_split_fieldsqtmk v1__split_fields)) false
  false true true))

;; Assume
  (assert (= v2__attr__constrained false))

;; Assume
  (assert (default_initial_assumption1
  (us_repqtmk (us_split_discrsqtmk v2__split_discrs)
  (us_split_fieldsqtmk v2__split_fields)) false))

;; Assume
  (assert true)

;; Assume
  (assert (= v3__attr__constrained true))

;; Assume
  (assert (default_initial_assumption2
  (us_repqtmk v3__split_discrs (us_split_fieldsqtmk v3__split_fields))
  false))

;; Assume
  (assert (dynamic_invariant2
  (us_repqtmk v3__split_discrs (us_split_fieldsqtmk v3__split_fields)) false
  false true true))

(declare-const v4__split_fields integer)

;; H
  (assert (= v4__split_fields rliteral1))

;; Assume
  (assert true)

;; Assume
  (assert (default_initial_assumption3
  (us_repqtmk2 v5__split_fields v5__attr__tag) false))

;; Assume
  (assert true)

;; Assume
  (assert (default_initial_assumption4
  (us_repqtmk3 v6__split_fields v6__attr__tag) false))

;; Assume
  (assert true)

(declare-const ca (Array Int natural))

;; H
  (assert (= ca (size_attr__ca__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ua (Array Int natural))

;; H
  (assert (= ua (size_attr__ua__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ca2 (Array Int natural))

;; H
  (assert (= ca2 (size_attr__ca2__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ca3 (Array Int natural))

;; H
  (assert (= ca3 (size_attr__ca3__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ca4 (Array Int natural))

;; H
  (assert (= ca4 (size_attr__ca4__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ua2 map1)

;; H
  (assert (= ua2 (size_attr__ua2__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ua3 map2)

;; H
  (assert (= ua3 (size_attr__ua3__aggregate_def 1)))

;; Assume
  (assert true)

(declare-const ua4 map3)

;; H
  (assert (= ua4 (size_attr__ua4__aggregate_def 1)))

;; Assume
  (assert true)

;; Assert
  (assert (<= 0 value__size1))

;; Assert
  (assert (<= 0 value__size3))

;; Assert
  (assert (<= 0 value__size4))

;; Assert
  (assert (<= 0 value__size5))

;; Assert
  (assert (<= 0 value__size6))

;; Assert
  (assert (<= 0 value__size7))

;; Assert
  (assert (<= 0 value__size8))

;; Assert
  (assert (<= 0 value__size9))

;; Assert
  (assert (<= 0 value__size))

;; Assert
  (assert (<= 0 value__size10))

(assert
;; defqtvc
 ;; File "size_attr.adb", line 3, characters 0-0
  (not (<= 0 value__size12)))
(check-sat)
