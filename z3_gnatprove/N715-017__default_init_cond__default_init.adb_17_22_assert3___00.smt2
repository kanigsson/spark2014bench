(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes ()
((simple_priv__ref (simple_priv__refqtmk (simple_priv__content us_rep)))))
(define-fun simple_priv__ref_simple_priv__content__projection ((a simple_priv__ref)) us_rep 
  (simple_priv__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ()
((wrong_priv__ref (wrong_priv__refqtmk (wrong_priv__content us_rep1)))))
(define-fun wrong_priv__ref_wrong_priv__content__projection ((a wrong_priv__ref)) us_rep1 
  (wrong_priv__content a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq2 (us_rep2 us_rep2) Bool)

(declare-const dummy2 us_rep2)

(declare-datatypes ()
((priv_with_glob__ref
 (priv_with_glob__refqtmk (priv_with_glob__content us_rep2)))))
(define-fun priv_with_glob__ref_priv_with_glob__content__projection ((a priv_with_glob__ref)) us_rep2 
  (priv_with_glob__content a))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun simple_priv_ok (us_rep) Bool)

(declare-fun simple_priv_ok__function_guard (Bool us_rep) Bool)

(declare-fun wrong_priv_ok (us_rep1) Bool)

(declare-fun wrong_priv_ok__function_guard (Bool us_rep1) Bool)

(declare-fun priv_with_glob_ok (us_rep2 us_private) Bool)

(declare-fun priv_with_glob_ok__function_guard (Bool us_rep2
  us_private) Bool)

;; temp___result_278'def
  (assert
  (forall ((temp___277 us_rep)) (simple_priv_ok__function_guard
  (simple_priv_ok temp___277) temp___277)))

(define-fun default_initial_assumption ((temp___expr_275 us_rep)
  (temp___skip_top_level_276 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_276 true))
                                         (= (simple_priv_ok temp___expr_275) true)))

;; temp___result_287'def
  (assert
  (forall ((temp___286 us_rep1)) (wrong_priv_ok__function_guard
  (wrong_priv_ok temp___286) temp___286)))

(define-fun default_initial_assumption1 ((temp___expr_284 us_rep1)
  (temp___skip_top_level_285 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_285 true))
                                         (= (wrong_priv_ok temp___expr_284) true)))

;; temp___result_296'def
  (assert
  (forall ((private_default__glob us_private) (temp___295 us_rep2))
  (priv_with_glob_ok__function_guard
  (priv_with_glob_ok temp___295 private_default__glob) temp___295
  private_default__glob)))

(define-fun default_initial_assumption2 ((temp___expr_293 us_rep2)
  (temp___skip_top_level_294 Bool)
  (private_default__glob us_private)) Bool (=>
                                           (not
                                           (= temp___skip_top_level_294 true))
                                           (= (priv_with_glob_ok
                                              temp___expr_293
                                              private_default__glob) true)))

(declare-const p1 us_rep)

(declare-const p2 us_rep1)

(declare-const p3 us_rep2)

(declare-const glob us_private)

;; Assume
  (assert (default_initial_assumption p1 false))

;; Assume
  (assert true)

;; Assume
  (assert (default_initial_assumption1 p2 false))

;; Assume
  (assert true)

;; Assume
  (assert (default_initial_assumption2 p3 false glob))

;; Assume
  (assert true)

;; H
  (assert
  (forall ((p11 us_rep)) (simple_priv_ok__function_guard (simple_priv_ok p11)
  p11)))

;; Assert
  (assert (= (simple_priv_ok p1) true))

;; H
  (assert
  (forall ((p21 us_rep1)) (wrong_priv_ok__function_guard (wrong_priv_ok p21)
  p21)))

;; Assert
  (assert (= (wrong_priv_ok p2) true))

;; H
  (assert
  (forall ((p31 us_rep2) (glob1 us_private))
  (priv_with_glob_ok__function_guard (priv_with_glob_ok p31 glob1) p31
  glob1)))

(assert
;; defqtvc
 ;; File "default_init.ads", line 34, characters 0-0
  (not (= (priv_with_glob_ok p3 glob) true)))
(check-sat)

(exit)
