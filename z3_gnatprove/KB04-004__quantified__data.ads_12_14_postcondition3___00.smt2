(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int Bool))))))
(declare-fun slide ((Array Int Bool) Int Int) (Array Int Bool))

;; slide_eq
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int Bool)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int Bool)) (a__first Int) (a__last Int)
  (b (Array Int Bool)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (ite (select a temp___idx_154) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_154)) 1 0)))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int Bool)) (b (Array Int Bool)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (ite (select a temp___idx_154) 1 0) (ite (select b (+ (- b__first a__first) temp___idx_154)) 1 0)))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x (Array Int Bool))

(declare-const x1 (Array Int Bool))

;; H
  (assert (= x1 x))

;; Assume
  (assert true)

(declare-const i Int)

;; H
  (assert (= i 1))

(declare-const x2 (Array Int Bool))

;; H
  (assert (= x2 (store x i (ite (= (select x i) true) false true))))

(declare-const i1 Int)

;; H
  (assert (= i1 2))

(declare-const x3 (Array Int Bool))

;; H
  (assert (= x3 (store x2 i1 (ite (= (select x2 i1) true) false true))))

(declare-const i2 Int)

;; H
  (assert (= i2 3))

(declare-const x4 (Array Int Bool))

;; H
  (assert (= x4 (store x3 i2 (ite (= (select x3 i2) true) false true))))

(declare-const i3 Int)

;; H
  (assert (= i3 4))

(declare-const x5 (Array Int Bool))

;; H
  (assert (= x5 (store x4 i3 (ite (= (select x4 i3) true) false true))))

(declare-const i4 Int)

;; H
  (assert (= i4 5))

(declare-const x6 (Array Int Bool))

;; H
  (assert (= x6 (store x5 i4 (ite (= (select x5 i4) true) false true))))

(declare-const i5 Int)

;; H
  (assert (= i5 6))

(declare-const x7 (Array Int Bool))

;; H
  (assert (= x7 (store x6 i5 (ite (= (select x6 i5) true) false true))))

(declare-const i6 Int)

;; H
  (assert (= i6 7))

(declare-const x8 (Array Int Bool))

;; H
  (assert (= x8 (store x7 i6 (ite (= (select x7 i6) true) false true))))

(declare-const i7 Int)

;; H
  (assert (= i7 8))

(declare-const x9 (Array Int Bool))

;; H
  (assert (= x9 (store x8 i7 (ite (= (select x8 i7) true) false true))))

(declare-const i8 Int)

;; H
  (assert (= i8 9))

(declare-const x10 (Array Int Bool))

;; H
  (assert (= x10 (store x9 i8 (ite (= (select x9 i8) true) false true))))

(declare-const i9 Int)

;; H
  (assert (= i9 10))

(declare-const x11 (Array Int Bool))

;; H
  (assert (= x11 (store x10 i9 (ite (= (select x10 i9) true) false true))))

(declare-const i10 Int)

;; H
  (assert (<= 1 i10))

;; H
  (assert (<= i10 10))

;; H
  (assert (= (select x11 i10) true))

(assert
;; defqtvc
 ;; File "data.ads", line 11, characters 0-0
  (not (not (= (select x1 i10) true))))
(check-sat)
