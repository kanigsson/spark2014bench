;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort name_t 0)

(declare-fun name_tqtint (name_t) Int)

;; name_t'axiom
  (assert
  (forall ((i name_t))
  (and (<= 0 (name_tqtint i)) (<= (name_tqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (name_t name_t) Bool)

(declare-const dummy name_t)

(declare-datatypes ()
((name_t__ref (name_t__refqtmk (name_t__content name_t)))))
(define-fun name_t__ref_name_t__content__projection ((a name_t__ref)) name_t 
  (name_t__content a))

(define-fun to_rep ((x name_t)) Int (name_tqtint x))

(declare-fun of_rep (Int) name_t)

;; inversion_axiom
  (assert
  (forall ((x name_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x name_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__model__uml_state__name_data name_t)))))
(define-fun us_split_fields_rec__model__uml_state__name_data__projection ((a us_split_fields)) name_t 
  (rec__model__uml_state__name_data a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__model__uml_state__name_data
                           (us_split_fields1 a))) (to_rep
                                                  (rec__model__uml_state__name_data
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const model__uml_state__name_data__first__bit Int)

(declare-const model__uml_state__name_data__last__bit Int)

(declare-const model__uml_state__name_data__position Int)

;; model__uml_state__name_data__first__bit_axiom
  (assert (<= 0 model__uml_state__name_data__first__bit))

;; model__uml_state__name_data__last__bit_axiom
  (assert
  (< model__uml_state__name_data__first__bit model__uml_state__name_data__last__bit))

;; model__uml_state__name_data__position_axiom
  (assert (<= 0 model__uml_state__name_data__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((uml_state__ref (uml_state__refqtmk (uml_state__content us_rep)))))
(define-fun uml_state__ref_uml_state__content__projection ((a uml_state__ref)) us_rep 
  (uml_state__content a))

(declare-fun name (us_rep) Int)

(declare-fun name__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_181 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_181)))

;; name__post_axiom
  (assert
  (forall ((self us_rep))
  (! (let ((result (name self)))
     (=> (name__function_guard result self) (dynamic_invariant result true
     false true true))) :pattern ((name self)) )))

;; name__def_axiom
  (assert
  (forall ((self us_rep))
  (! (= (name self) (to_rep
                    (rec__model__uml_state__name_data
                    (us_split_fields1 self)))) :pattern ((name self)) )))

(declare-sort uml_state_access 0)

(declare-fun uml_state_accessqtint (uml_state_access) Int)

;; uml_state_access'axiom
  (assert
  (forall ((i uml_state_access))
  (and (<= 0 (uml_state_accessqtint i)) (<= (uml_state_accessqtint i) 100))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (uml_state_access uml_state_access) Bool)

(declare-const dummy2 uml_state_access)

(declare-datatypes ()
((uml_state_access__ref
 (uml_state_access__refqtmk (uml_state_access__content uml_state_access)))))
(define-fun uml_state_access__ref_uml_state_access__content__projection ((a uml_state_access__ref)) uml_state_access 
  (uml_state_access__content a))

(define-fun to_rep1 ((x uml_state_access)) Int (uml_state_accessqtint x))

(declare-fun of_rep1 (Int) uml_state_access)

;; inversion_axiom
  (assert
  (forall ((x uml_state_access))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x uml_state_access)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__model__uml_transition__from_data uml_state_access)(rec__model__uml_transition__to_data uml_state_access)))))
(define-fun us_split_fields_rec__model__uml_transition__from_data__projection ((a us_split_fields2)) uml_state_access 
  (rec__model__uml_transition__from_data a))

(define-fun us_split_fields_rec__model__uml_transition__to_data__projection ((a us_split_fields2)) uml_state_access 
  (rec__model__uml_transition__to_data a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep1
                            (rec__model__uml_transition__from_data
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__model__uml_transition__from_data
                                                   (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__model__uml_transition__to_data
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__model__uml_transition__to_data
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const model__uml_transition__from_data__first__bit Int)

(declare-const model__uml_transition__from_data__last__bit Int)

(declare-const model__uml_transition__from_data__position Int)

;; model__uml_transition__from_data__first__bit_axiom
  (assert (<= 0 model__uml_transition__from_data__first__bit))

;; model__uml_transition__from_data__last__bit_axiom
  (assert
  (< model__uml_transition__from_data__first__bit model__uml_transition__from_data__last__bit))

;; model__uml_transition__from_data__position_axiom
  (assert (<= 0 model__uml_transition__from_data__position))

(declare-const model__uml_transition__to_data__first__bit Int)

(declare-const model__uml_transition__to_data__last__bit Int)

(declare-const model__uml_transition__to_data__position Int)

;; model__uml_transition__to_data__first__bit_axiom
  (assert (<= 0 model__uml_transition__to_data__first__bit))

;; model__uml_transition__to_data__last__bit_axiom
  (assert
  (< model__uml_transition__to_data__first__bit model__uml_transition__to_data__last__bit))

;; model__uml_transition__to_data__position_axiom
  (assert (<= 0 model__uml_transition__to_data__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((uml_transition__ref
 (uml_transition__refqtmk (uml_transition__content us_rep1)))))
(define-fun uml_transition__ref_uml_transition__content__projection ((a uml_transition__ref)) us_rep1 
  (uml_transition__content a))

(declare-fun from (us_rep1) Int)

(declare-fun from__function_guard (Int us_rep1) Bool)

(define-fun dynamic_invariant1 ((temp___expr_196 Int)
  (temp___is_init_192 Bool) (temp___skip_constant_193 Bool)
  (temp___do_toplevel_194 Bool)
  (temp___do_typ_inv_195 Bool)) Bool (=>
                                     (or (= temp___is_init_192 true)
                                     (<= 0 100)) (in_range2 temp___expr_196)))

;; from__post_axiom
  (assert
  (forall ((self us_rep1))
  (! (let ((result (from self)))
     (=> (from__function_guard result self) (dynamic_invariant1 result true
     false true true))) :pattern ((from self)) )))

;; from__def_axiom
  (assert
  (forall ((self us_rep1))
  (! (= (from self) (to_rep1
                    (rec__model__uml_transition__from_data
                    (us_split_fields3 self)))) :pattern ((from self)) )))

(declare-fun to__ (us_rep1) Int)

(declare-fun to____function_guard (Int us_rep1) Bool)

;; to____post_axiom
  (assert
  (forall ((self us_rep1))
  (! (let ((result (to__ self)))
     (=> (to____function_guard result self) (dynamic_invariant1 result true
     false true true))) :pattern ((to__ self)) )))

;; to____def_axiom
  (assert
  (forall ((self us_rep1))
  (! (= (to__ self) (to_rep1
                    (rec__model__uml_transition__to_data
                    (us_split_fields3 self)))) :pattern ((to__ self)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy4 (Array Int us_rep))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq4 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int us_rep1))))))
(declare-fun slide1 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq1 (select a temp___idx_156)
                              (select b (+ (- b__first a__first) temp___idx_156))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq1 (select a temp___idx_156)
     (select b (+ (- b__first a__first) temp___idx_156))) true))))))))

(declare-const dummy5 (Array Int us_rep1))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size1 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq5 ((Array Int us_rep1) (Array Int us_rep1)) Bool)

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__model__uml_state_machine__owned_state_data (Array Int us_rep))(rec__model__uml_state_machine__owned_transition_data (Array Int us_rep1))))))
(define-fun us_split_fields_rec__model__uml_state_machine__owned_state_data__projection ((a us_split_fields4)) (Array Int us_rep) 
  (rec__model__uml_state_machine__owned_state_data a))

(define-fun us_split_fields_rec__model__uml_state_machine__owned_transition_data__projection ((a us_split_fields4)) (Array Int us_rep1) 
  (rec__model__uml_state_machine__owned_transition_data a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (bool_eq2
                            (rec__model__uml_state_machine__owned_state_data
                            (us_split_fields5 a)) 0 100
                            (rec__model__uml_state_machine__owned_state_data
                            (us_split_fields5 b)) 0 100) true)
                         (= (bool_eq3
                            (rec__model__uml_state_machine__owned_transition_data
                            (us_split_fields5 a)) 0 100
                            (rec__model__uml_state_machine__owned_transition_data
                            (us_split_fields5 b)) 0 100) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const model__uml_state_machine__owned_state_data__first__bit Int)

(declare-const model__uml_state_machine__owned_state_data__last__bit Int)

(declare-const model__uml_state_machine__owned_state_data__position Int)

;; model__uml_state_machine__owned_state_data__first__bit_axiom
  (assert (<= 0 model__uml_state_machine__owned_state_data__first__bit))

;; model__uml_state_machine__owned_state_data__last__bit_axiom
  (assert
  (< model__uml_state_machine__owned_state_data__first__bit model__uml_state_machine__owned_state_data__last__bit))

;; model__uml_state_machine__owned_state_data__position_axiom
  (assert (<= 0 model__uml_state_machine__owned_state_data__position))

(declare-const model__uml_state_machine__owned_transition_data__first__bit Int)

(declare-const model__uml_state_machine__owned_transition_data__last__bit Int)

(declare-const model__uml_state_machine__owned_transition_data__position Int)

;; model__uml_state_machine__owned_transition_data__first__bit_axiom
  (assert (<= 0 model__uml_state_machine__owned_transition_data__first__bit))

;; model__uml_state_machine__owned_transition_data__last__bit_axiom
  (assert
  (< model__uml_state_machine__owned_transition_data__first__bit model__uml_state_machine__owned_transition_data__last__bit))

;; model__uml_state_machine__owned_transition_data__position_axiom
  (assert (<= 0 model__uml_state_machine__owned_transition_data__position))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-const dummy6 us_rep2)

(declare-datatypes ()
((uml_state_machine__ref
 (uml_state_machine__refqtmk (uml_state_machine__content us_rep2)))))
(define-fun uml_state_machine__ref_uml_state_machine__content__projection ((a uml_state_machine__ref)) us_rep2 
  (uml_state_machine__content a))

(declare-fun owned_state (us_rep2) (Array Int us_rep))

(declare-fun owned_state__function_guard ((Array Int us_rep) us_rep2) Bool)

;; owned_state__post_axiom
  (assert true)

;; owned_state__def_axiom
  (assert
  (forall ((self us_rep2))
  (! (= (owned_state self) (rec__model__uml_state_machine__owned_state_data
                           (us_split_fields5 self))) :pattern ((owned_state
                                                               self)) )))

(declare-fun owned_transition (us_rep2) (Array Int us_rep1))

(declare-fun owned_transition__function_guard ((Array Int us_rep1)
  us_rep2) Bool)

;; owned_transition__post_axiom
  (assert true)

;; owned_transition__def_axiom
  (assert
  (forall ((self us_rep2))
  (! (= (owned_transition self) (rec__model__uml_state_machine__owned_transition_data
                                (us_split_fields5 self))) :pattern ((owned_transition
                                                                    self)) )))

(declare-datatypes ()
((us_split_fields6
 (us_split_fieldsqtmk3 (rec__model__uml_action__name_data name_t)))))
(define-fun us_split_fields_rec__model__uml_action__name_data__projection ((a us_split_fields6)) name_t 
  (rec__model__uml_action__name_data a))

(declare-datatypes ()
((us_split_fields__ref3
 (us_split_fields__refqtmk3 (us_split_fields__content3 us_split_fields6)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref3)) us_split_fields6 
  (us_split_fields__content3 a))

(declare-datatypes ()
((us_rep3 (us_repqtmk3 (us_split_fields7 us_split_fields6)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep3)) us_split_fields6 
  (us_split_fields7 a))

(define-fun bool_eq5 ((a us_rep3)
  (b us_rep3)) Bool (ite (= (to_rep
                            (rec__model__uml_action__name_data
                            (us_split_fields7 a))) (to_rep
                                                   (rec__model__uml_action__name_data
                                                   (us_split_fields7 b))))
                    true false))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-const model__uml_action__name_data__first__bit Int)

(declare-const model__uml_action__name_data__last__bit Int)

(declare-const model__uml_action__name_data__position Int)

;; model__uml_action__name_data__first__bit_axiom
  (assert (<= 0 model__uml_action__name_data__first__bit))

;; model__uml_action__name_data__last__bit_axiom
  (assert
  (< model__uml_action__name_data__first__bit model__uml_action__name_data__last__bit))

;; model__uml_action__name_data__position_axiom
  (assert (<= 0 model__uml_action__name_data__position))

(declare-fun user_eq7 (us_rep3 us_rep3) Bool)

(declare-const dummy7 us_rep3)

(declare-datatypes ()
((uml_action__ref (uml_action__refqtmk (uml_action__content us_rep3)))))
(define-fun uml_action__ref_uml_action__content__projection ((a uml_action__ref)) us_rep3 
  (uml_action__content a))

(declare-const no_uml_action us_rep3)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int us_rep3))))))
(declare-fun slide2 ((Array Int us_rep3) Int Int) (Array Int us_rep3))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep3)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq6 ((a (Array Int us_rep3)) (a__first Int) (a__last Int)
  (b (Array Int us_rep3)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_161 Int))
                           (=>
                           (and (<= a__first temp___idx_161)
                           (<= temp___idx_161 a__last))
                           (= (bool_eq5 (select a temp___idx_161)
                              (select b (+ (- b__first a__first) temp___idx_161))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep3)) (b (Array Int us_rep3)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_161 Int))
  (=> (and (<= a__first temp___idx_161) (<= temp___idx_161 a__last))
  (= (bool_eq5 (select a temp___idx_161)
     (select b (+ (- b__first a__first) temp___idx_161))) true))))))))

(declare-const no_uml_action_vector (Array Int us_rep3))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun name1 (us_rep3) Int)

(declare-fun name__function_guard1 (Int us_rep3) Bool)

;; name__post_axiom
  (assert
  (forall ((self us_rep3))
  (! (let ((result (name1 self)))
     (=> (name__function_guard1 result self) (dynamic_invariant result true
     false true true))) :pattern ((name1 self)) )))

;; name__def_axiom
  (assert
  (forall ((self us_rep3))
  (! (= (name1 self) (to_rep
                     (rec__model__uml_action__name_data
                     (us_split_fields7 self)))) :pattern ((name1 self)) )))

(declare-sort uml_action_access 0)

(declare-fun uml_action_accessqtint (uml_action_access) Int)

;; uml_action_access'axiom
  (assert
  (forall ((i uml_action_access))
  (and (<= 0 (uml_action_accessqtint i)) (<= (uml_action_accessqtint i) 100))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq8 (uml_action_access uml_action_access) Bool)

(declare-const dummy8 uml_action_access)

(declare-datatypes ()
((uml_action_access__ref
 (uml_action_access__refqtmk (uml_action_access__content uml_action_access)))))
(define-fun uml_action_access__ref_uml_action_access__content__projection ((a uml_action_access__ref)) uml_action_access 
  (uml_action_access__content a))

(define-fun to_rep2 ((x uml_action_access)) Int (uml_action_accessqtint x))

(declare-fun of_rep2 (Int) uml_action_access)

;; inversion_axiom
  (assert
  (forall ((x uml_action_access))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x uml_action_access)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields8
 (us_split_fieldsqtmk4
 (rec__model__uml_control_flow__from_data uml_action_access)(rec__model__uml_control_flow__to_data uml_action_access)))))
(define-fun us_split_fields_rec__model__uml_control_flow__from_data__projection ((a us_split_fields8)) uml_action_access 
  (rec__model__uml_control_flow__from_data a))

(define-fun us_split_fields_rec__model__uml_control_flow__to_data__projection ((a us_split_fields8)) uml_action_access 
  (rec__model__uml_control_flow__to_data a))

(declare-datatypes ()
((us_split_fields__ref4
 (us_split_fields__refqtmk4 (us_split_fields__content4 us_split_fields8)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref4)) us_split_fields8 
  (us_split_fields__content4 a))

(declare-datatypes ()
((us_rep4 (us_repqtmk4 (us_split_fields9 us_split_fields8)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep4)) us_split_fields8 
  (us_split_fields9 a))

(define-fun bool_eq7 ((a us_rep4)
  (b us_rep4)) Bool (ite (and
                         (= (to_rep2
                            (rec__model__uml_control_flow__from_data
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__model__uml_control_flow__from_data
                                                   (us_split_fields9 b))))
                         (= (to_rep2
                            (rec__model__uml_control_flow__to_data
                            (us_split_fields9 a))) (to_rep2
                                                   (rec__model__uml_control_flow__to_data
                                                   (us_split_fields9 b)))))
                    true false))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const model__uml_control_flow__from_data__first__bit Int)

(declare-const model__uml_control_flow__from_data__last__bit Int)

(declare-const model__uml_control_flow__from_data__position Int)

;; model__uml_control_flow__from_data__first__bit_axiom
  (assert (<= 0 model__uml_control_flow__from_data__first__bit))

;; model__uml_control_flow__from_data__last__bit_axiom
  (assert
  (< model__uml_control_flow__from_data__first__bit model__uml_control_flow__from_data__last__bit))

;; model__uml_control_flow__from_data__position_axiom
  (assert (<= 0 model__uml_control_flow__from_data__position))

(declare-const model__uml_control_flow__to_data__first__bit Int)

(declare-const model__uml_control_flow__to_data__last__bit Int)

(declare-const model__uml_control_flow__to_data__position Int)

;; model__uml_control_flow__to_data__first__bit_axiom
  (assert (<= 0 model__uml_control_flow__to_data__first__bit))

;; model__uml_control_flow__to_data__last__bit_axiom
  (assert
  (< model__uml_control_flow__to_data__first__bit model__uml_control_flow__to_data__last__bit))

;; model__uml_control_flow__to_data__position_axiom
  (assert (<= 0 model__uml_control_flow__to_data__position))

(declare-fun user_eq9 (us_rep4 us_rep4) Bool)

(declare-const dummy9 us_rep4)

(declare-datatypes ()
((uml_control_flow__ref
 (uml_control_flow__refqtmk (uml_control_flow__content us_rep4)))))
(define-fun uml_control_flow__ref_uml_control_flow__content__projection ((a uml_control_flow__ref)) us_rep4 
  (uml_control_flow__content a))

(declare-const no_uml_control_flow us_rep4)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-datatypes ()
((map__ref3 (map__refqtmk3 (map__content3 (Array Int us_rep4))))))
(declare-fun slide3 ((Array Int us_rep4) Int Int) (Array Int us_rep4))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep4)))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep4)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq8 ((a (Array Int us_rep4)) (a__first Int) (a__last Int)
  (b (Array Int us_rep4)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_166 Int))
                           (=>
                           (and (<= a__first temp___idx_166)
                           (<= temp___idx_166 a__last))
                           (= (bool_eq7 (select a temp___idx_166)
                              (select b (+ (- b__first a__first) temp___idx_166))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep4)) (b (Array Int us_rep4)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq8 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_166 Int))
  (=> (and (<= a__first temp___idx_166) (<= temp___idx_166 a__last))
  (= (bool_eq7 (select a temp___idx_166)
     (select b (+ (- b__first a__first) temp___idx_166))) true))))))))

(declare-const no_uml_control_flow_vector (Array Int us_rep4))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun from1 (us_rep4) Int)

(declare-fun from__function_guard1 (Int us_rep4) Bool)

(define-fun dynamic_invariant2 ((temp___expr_307 Int)
  (temp___is_init_303 Bool) (temp___skip_constant_304 Bool)
  (temp___do_toplevel_305 Bool)
  (temp___do_typ_inv_306 Bool)) Bool (=>
                                     (or (= temp___is_init_303 true)
                                     (<= 0 100)) (in_range3 temp___expr_307)))

;; from__post_axiom
  (assert
  (forall ((self us_rep4))
  (! (let ((result (from1 self)))
     (=> (from__function_guard1 result self) (dynamic_invariant2 result true
     false true true))) :pattern ((from1 self)) )))

;; from__def_axiom
  (assert
  (forall ((self us_rep4))
  (! (= (from1 self) (to_rep2
                     (rec__model__uml_control_flow__from_data
                     (us_split_fields9 self)))) :pattern ((from1 self)) )))

(declare-fun to__1 (us_rep4) Int)

(declare-fun to____function_guard1 (Int us_rep4) Bool)

;; to____post_axiom
  (assert
  (forall ((self us_rep4))
  (! (let ((result (to__1 self)))
     (=> (to____function_guard1 result self) (dynamic_invariant2 result true
     false true true))) :pattern ((to__1 self)) )))

;; to____def_axiom
  (assert
  (forall ((self us_rep4))
  (! (= (to__1 self) (to_rep2
                     (rec__model__uml_control_flow__to_data
                     (us_split_fields9 self)))) :pattern ((to__1 self)) )))

(declare-const dummy10 (Array Int us_rep3))

(declare-const value__size7 Int)

(declare-const object__size7 Int)

(declare-const component__size2 Int)

(declare-const alignment7 Int)

;; value__size_axiom
  (assert (<= 0 value__size7))

;; object__size_axiom
  (assert (<= 0 object__size7))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment7))

(declare-fun user_eq10 ((Array Int us_rep3) (Array Int us_rep3)) Bool)

(declare-const dummy11 (Array Int us_rep4))

(declare-const value__size8 Int)

(declare-const object__size8 Int)

(declare-const component__size3 Int)

(declare-const alignment8 Int)

;; value__size_axiom
  (assert (<= 0 value__size8))

;; object__size_axiom
  (assert (<= 0 object__size8))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment8))

(declare-fun user_eq11 ((Array Int us_rep4) (Array Int us_rep4)) Bool)

(declare-datatypes ()
((us_split_fields10
 (us_split_fieldsqtmk5
 (rec__model__uml_activity__owned_action_data (Array Int us_rep3))(rec__model__uml_activity__owned_flow_data (Array Int us_rep4))))))
(define-fun us_split_fields_rec__model__uml_activity__owned_action_data__projection ((a us_split_fields10)) (Array Int us_rep3) 
  (rec__model__uml_activity__owned_action_data a))

(define-fun us_split_fields_rec__model__uml_activity__owned_flow_data__projection ((a us_split_fields10)) (Array Int us_rep4) 
  (rec__model__uml_activity__owned_flow_data a))

(declare-datatypes ()
((us_split_fields__ref5
 (us_split_fields__refqtmk5 (us_split_fields__content5 us_split_fields10)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref5)) us_split_fields10 
  (us_split_fields__content5 a))

(declare-datatypes ()
((us_rep5 (us_repqtmk5 (us_split_fields11 us_split_fields10)))))
(define-fun us_rep___split_fields__6__projection ((a us_rep5)) us_split_fields10 
  (us_split_fields11 a))

(define-fun bool_eq9 ((a us_rep5)
  (b us_rep5)) Bool (ite (and
                         (= (bool_eq6
                            (rec__model__uml_activity__owned_action_data
                            (us_split_fields11 a)) 0 100
                            (rec__model__uml_activity__owned_action_data
                            (us_split_fields11 b)) 0 100) true)
                         (= (bool_eq8
                            (rec__model__uml_activity__owned_flow_data
                            (us_split_fields11 a)) 0 100
                            (rec__model__uml_activity__owned_flow_data
                            (us_split_fields11 b)) 0 100) true))
                    true false))

(declare-const value__size9 Int)

(declare-const object__size9 Int)

(declare-const alignment9 Int)

;; value__size_axiom
  (assert (<= 0 value__size9))

;; object__size_axiom
  (assert (<= 0 object__size9))

;; alignment_axiom
  (assert (<= 0 alignment9))

(declare-const model__uml_activity__owned_action_data__first__bit Int)

(declare-const model__uml_activity__owned_action_data__last__bit Int)

(declare-const model__uml_activity__owned_action_data__position Int)

;; model__uml_activity__owned_action_data__first__bit_axiom
  (assert (<= 0 model__uml_activity__owned_action_data__first__bit))

;; model__uml_activity__owned_action_data__last__bit_axiom
  (assert
  (< model__uml_activity__owned_action_data__first__bit model__uml_activity__owned_action_data__last__bit))

;; model__uml_activity__owned_action_data__position_axiom
  (assert (<= 0 model__uml_activity__owned_action_data__position))

(declare-const model__uml_activity__owned_flow_data__first__bit Int)

(declare-const model__uml_activity__owned_flow_data__last__bit Int)

(declare-const model__uml_activity__owned_flow_data__position Int)

;; model__uml_activity__owned_flow_data__first__bit_axiom
  (assert (<= 0 model__uml_activity__owned_flow_data__first__bit))

;; model__uml_activity__owned_flow_data__last__bit_axiom
  (assert
  (< model__uml_activity__owned_flow_data__first__bit model__uml_activity__owned_flow_data__last__bit))

;; model__uml_activity__owned_flow_data__position_axiom
  (assert (<= 0 model__uml_activity__owned_flow_data__position))

(declare-fun user_eq12 (us_rep5 us_rep5) Bool)

(declare-const dummy12 us_rep5)

(declare-datatypes ()
((uml_activity__ref (uml_activity__refqtmk (uml_activity__content us_rep5)))))
(define-fun uml_activity__ref_uml_activity__content__projection ((a uml_activity__ref)) us_rep5 
  (uml_activity__content a))

(declare-const no_uml_activity us_rep5)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun owned_action (us_rep5) (Array Int us_rep3))

(declare-fun owned_action__function_guard ((Array Int us_rep3) us_rep5) Bool)

;; owned_action__post_axiom
  (assert true)

;; owned_action__def_axiom
  (assert
  (forall ((self us_rep5))
  (! (= (owned_action self) (rec__model__uml_activity__owned_action_data
                            (us_split_fields11 self))) :pattern ((owned_action
                                                                 self)) )))

(declare-fun owned_flow (us_rep5) (Array Int us_rep4))

(declare-fun owned_flow__function_guard ((Array Int us_rep4) us_rep5) Bool)

;; owned_flow__post_axiom
  (assert true)

;; owned_flow__def_axiom
  (assert
  (forall ((self us_rep5))
  (! (= (owned_flow self) (rec__model__uml_activity__owned_flow_data
                          (us_split_fields11 self))) :pattern ((owned_flow
                                                               self)) )))

(declare-sort uml_control_flow_access 0)

(declare-fun uml_control_flow_accessqtint (uml_control_flow_access) Int)

;; uml_control_flow_access'axiom
  (assert
  (forall ((i uml_control_flow_access))
  (and (<= 0 (uml_control_flow_accessqtint i))
  (<= (uml_control_flow_accessqtint i) 100))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq13 (uml_control_flow_access
  uml_control_flow_access) Bool)

(declare-const dummy13 uml_control_flow_access)

(declare-datatypes ()
((uml_control_flow_access__ref
 (uml_control_flow_access__refqtmk
 (uml_control_flow_access__content uml_control_flow_access)))))
(define-fun uml_control_flow_access__ref_uml_control_flow_access__content__projection ((a uml_control_flow_access__ref)) uml_control_flow_access 
  (uml_control_flow_access__content a))

(declare-const sm us_rep2)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r1b (Array Int us_rep))

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const r7b (Array Int us_rep1))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-sort uml_transition_access 0)

(declare-fun uml_transition_accessqtint (uml_transition_access) Int)

;; uml_transition_access'axiom
  (assert
  (forall ((i uml_transition_access))
  (and (<= 0 (uml_transition_accessqtint i))
  (<= (uml_transition_accessqtint i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq14 (uml_transition_access uml_transition_access) Bool)

(declare-const dummy14 uml_transition_access)

(declare-datatypes ()
((uml_transition_access__ref
 (uml_transition_access__refqtmk
 (uml_transition_access__content uml_transition_access)))))
(define-fun uml_transition_access__ref_uml_transition_access__content__projection ((a uml_transition_access__ref)) uml_transition_access 
  (uml_transition_access__content a))

(declare-fun model__no_uml_action_vector__aggregate_def (us_rep3) (Array Int us_rep3))

(declare-fun model__no_uml_control_flow_vector__aggregate_def (us_rep4) (Array Int us_rep4))

(declare-sort t2b 0)

(declare-fun t2bqtint (t2b) Int)

;; t2b'axiom
  (assert (forall ((i t2b)) (and (<= 0 (t2bqtint i)) (<= (t2bqtint i) 100))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq15 (t2b t2b) Bool)

(declare-const dummy15 t2b)

(declare-datatypes () ((t2b__ref (t2b__refqtmk (t2b__content t2b)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) t2b (t2b__content
                                                                 a))

(declare-sort t8b 0)

(declare-fun t8bqtint (t8b) Int)

;; t8b'axiom
  (assert (forall ((i t8b)) (and (<= 0 (t8bqtint i)) (<= (t8bqtint i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq16 (t8b t8b) Bool)

(declare-const dummy16 t8b)

(declare-datatypes () ((t8b__ref (t8b__refqtmk (t8b__content t8b)))))
(define-fun t8b__ref_t8b__content__projection ((a t8b__ref)) t8b (t8b__content
                                                                 a))

(define-fun dynamic_invariant3 ((temp___expr_223 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)
  (temp___do_typ_inv_222 Bool)) Bool (=>
                                     (or (= temp___is_init_219 true)
                                     (<= 0 100)) (in_range5 temp___expr_223)))

(declare-const rliteral name_t)

;; rliteral_axiom
  (assert (= (name_tqtint rliteral) 0))

;; no_uml_action__def_axiom
  (assert (= no_uml_action (us_repqtmk3 (us_split_fieldsqtmk3 rliteral))))

;; no_uml_action_vector__def_axiom
  (assert
  (= no_uml_action_vector (model__no_uml_action_vector__aggregate_def
                          no_uml_action)))

;; def_axiom
  (assert
  (forall ((temp___163 us_rep3))
  (forall ((temp___164 Int))
  (= (select (model__no_uml_action_vector__aggregate_def temp___163) temp___164) temp___163))))

(declare-const rliteral1 uml_action_access)

;; rliteral_axiom
  (assert (= (uml_action_accessqtint rliteral1) 0))

;; no_uml_control_flow__def_axiom
  (assert
  (= no_uml_control_flow (us_repqtmk4
                         (us_split_fieldsqtmk4 rliteral1 rliteral1))))

(define-fun dynamic_invariant4 ((temp___expr_334 Int)
  (temp___is_init_330 Bool) (temp___skip_constant_331 Bool)
  (temp___do_toplevel_332 Bool)
  (temp___do_typ_inv_333 Bool)) Bool (=>
                                     (or (= temp___is_init_330 true)
                                     (<= 0 100)) (in_range4 temp___expr_334)))

;; no_uml_control_flow_vector__def_axiom
  (assert
  (= no_uml_control_flow_vector (model__no_uml_control_flow_vector__aggregate_def
                                no_uml_control_flow)))

;; def_axiom
  (assert
  (forall ((temp___168 us_rep4))
  (forall ((temp___169 Int))
  (= (select (model__no_uml_control_flow_vector__aggregate_def temp___168) temp___169) temp___168))))

;; no_uml_activity__def_axiom
  (assert
  (= no_uml_activity (us_repqtmk5
                     (us_split_fieldsqtmk5 no_uml_action_vector
                     no_uml_control_flow_vector))))

;; r1b__def_axiom
  (assert
  (and (owned_state__function_guard (owned_state sm) sm)
  (= r1b (owned_state sm))))

;; r7b__def_axiom
  (assert
  (and (owned_transition__function_guard (owned_transition sm) sm)
  (= r7b (owned_transition sm))))

;; Assume
  (assert true)

;; Assume
  (assert
  (= (model__no_uml_action_vector__aggregate_def no_uml_action) no_uml_action_vector))

;; Assume
  (assert true)

;; Assume
  (assert
  (= (model__no_uml_control_flow_vector__aggregate_def no_uml_control_flow) 
  no_uml_control_flow_vector))

;; Assume
  (assert true)

;; Assume
  (assert
  (= (us_repqtmk5
     (us_split_fieldsqtmk5 no_uml_action_vector no_uml_control_flow_vector)) 
  no_uml_activity))

;; Assume
  (assert true)

(declare-const av (Array Int us_rep3))

;; H
  (assert (= av no_uml_action_vector))

;; Assume
  (assert true)

(declare-const cfv (Array Int us_rep4))

;; H
  (assert (= cfv no_uml_control_flow_vector))

;; Assume
  (assert true)

(declare-const act__split_fields us_split_fields10)

;; H
  (assert (= act__split_fields (us_split_fields11 no_uml_activity)))

;; Assume
  (assert true)

(define-fun o () us_rep2 sm)

(define-fun model__transform__L_1__R1b__assume () (Array Int us_rep) 
  (owned_state o))

;; H
  (assert (owned_state__function_guard model__transform__L_1__R1b__assume 
  o))

;; H
  (assert true)

;; H
  (assert
  (= model__transform__L_1__R1b__assume (rec__model__uml_state_machine__owned_state_data
                                        (us_split_fields5 o))))

;; Assume
  (assert (= model__transform__L_1__R1b__assume r1b))

;; Assume
  (assert true)

(declare-const av1 (Array Int us_rep3))

;; H
  (assert (owned_state__function_guard (owned_state sm) sm))

;; H
  (assert (owned_state__function_guard (owned_state sm) sm))

;; H
  (assert
  (forall ((t Int)) (name__function_guard (name (select (owned_state sm) t))
  (select (owned_state sm) t))))

;; H
  (assert
  (forall ((av2 (Array Int us_rep3)) (t Int)) (name__function_guard1
  (name1 (select av2 t)) (select av2 t))))

;; H
  (assert (owned_state__function_guard (owned_state sm) sm))

;; H
  (assert (owned_state__function_guard (owned_state sm) sm))

;; H
  (assert
  (forall ((t Int)) (name__function_guard (name (select (owned_state sm) t))
  (select (owned_state sm) t))))

;; H
  (assert
  (forall ((av2 (Array Int us_rep3)) (t Int)) (name__function_guard1
  (name1 (select av2 t)) (select av2 t))))

(declare-const s Int)

;; H
  (assert (= s 0))

;; H
  (assert
  (ite (= (and (ite (<= 0 s) true false) (ite (<= s 100) true false)) true)
  (exists ((av2 (Array Int us_rep3)) (s1 Int))
  (and
  (forall ((t Int))
  (=> (and (<= 0 t) (<= t (- s1 1)))
  (= (name (select (owned_state sm) t)) (name1 (select av2 t)))))
  (and
  (= (and (ite (in_range6 s1) true false) (ite (and (<= 0 s1) (<= s1 100))
                                          true false)) true)
  (let ((o1 sm))
  (let ((temp___596 (owned_state o1)))
  (and
  (and (owned_state__function_guard temp___596 o1)
  (= temp___596 (rec__model__uml_state_machine__owned_state_data
                (us_split_fields5 o1))))
  (let ((o2 (select temp___596 s1)))
  (let ((o3 (name o2)))
  (and
  (and (name__function_guard o3 o2)
  (and (dynamic_invariant o3 true false true true)
  (= o3 (to_rep (rec__model__uml_state__name_data (us_split_fields1 o2))))))
  (exists ((o4 name_t))
  (and (= (to_rep o4) o3)
  (and (= av1 (store av2 s1 (us_repqtmk3 (us_split_fieldsqtmk3 o4))))
  (= s1 100))))))))))))) (= av1 av)))

(define-fun o1 () us_rep2 sm)

(define-fun model__transform__L_2__R7b__assume () (Array Int us_rep1) 
  (owned_transition o1))

;; H
  (assert (owned_transition__function_guard
  model__transform__L_2__R7b__assume o1))

;; H
  (assert true)

;; H
  (assert
  (= model__transform__L_2__R7b__assume (rec__model__uml_state_machine__owned_transition_data
                                        (us_split_fields5 o1))))

;; Assume
  (assert (= model__transform__L_2__R7b__assume r7b))

;; Assume
  (assert true)

(declare-const s1 Int)

;; H
  (assert (= s1 0))

;; H
  (assert
  (= (and (ite (<= 0 s1) true false) (ite (<= s1 100) true false)) true))

(declare-const usf Int)

;; H
  (assert
  (= (and (ite (<= 0 usf) true false) (ite (<= usf (- s1 1)) true false)) true))

;; Ensures
  (assert (in_range4 usf))

(define-fun o2 () us_rep4 (select cfv usf))

(define-fun o3 () Int (to__1 o2))

;; H
  (assert (to____function_guard1 o3 o2))

;; H
  (assert (dynamic_invariant2 o3 true false true true))

;; H
  (assert
  (= o3 (to_rep2
        (rec__model__uml_control_flow__to_data (us_split_fields9 o2)))))

(define-fun o4 () us_rep3 (select av1 o3))

(define-fun o5 () Int (name1 o4))

;; H
  (assert (name__function_guard1 o5 o4))

;; H
  (assert (dynamic_invariant o5 true false true true))

;; H
  (assert
  (= o5 (to_rep (rec__model__uml_action__name_data (us_split_fields7 o4)))))

(define-fun o6 () us_rep2 sm)

(define-fun temp___620 () (Array Int us_rep) (owned_state o6))

;; H
  (assert (owned_state__function_guard temp___620 o6))

;; H
  (assert true)

;; H
  (assert
  (= temp___620 (rec__model__uml_state_machine__owned_state_data
                (us_split_fields5 o6))))

(define-fun o7 () us_rep2 sm)

(define-fun temp___621 () (Array Int us_rep1) (owned_transition o7))

;; H
  (assert (owned_transition__function_guard temp___621 o7))

;; H
  (assert true)

;; H
  (assert
  (= temp___621 (rec__model__uml_state_machine__owned_transition_data
                (us_split_fields5 o7))))

;; Assert
  (assert (and (<= 0 usf) (<= usf 100)))

(define-fun o8 () us_rep1 (select temp___621 usf))

(define-fun o9 () Int (to__ o8))

;; H
  (assert (to____function_guard o9 o8))

;; H
  (assert (dynamic_invariant1 o9 true false true true))

;; H
  (assert
  (= o9 (to_rep1 (rec__model__uml_transition__to_data (us_split_fields3 o8)))))

(define-fun o10 () us_rep (select temp___620 o9))

(define-fun o11 () Int (name o10))

;; H
  (assert (name__function_guard o11 o10))

;; H
  (assert (dynamic_invariant o11 true false true true))

;; H
  (assert
  (= o11 (to_rep (rec__model__uml_state__name_data (us_split_fields1 o10)))))

(assert
;; defqtvc
 ;; File "model.ads", line 160, characters 0-0
  (not (in_range4 usf)))
(check-sat)
