(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(declare-fun nth2 ((_ BitVec 32) Int) Bool)

(declare-fun lsr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl2 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_right3 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left3 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun to_int3 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range2 ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv2 ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv2 ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub2 ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth2 a j) (nth2 b j)))))

(declare-datatypes () ((t__ref2 (t__refqtmk2 (t__content2 (_ BitVec 32))))))
(declare-fun power2 ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max2 ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(declare-fun nth3 ((_ BitVec 64) Int) Bool)

(declare-fun lsr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl3 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right4 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left4 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int4 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range3 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv3 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv3 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub3 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth3 a j) (nth3 b j)))))

(declare-datatypes () ((t__ref3 (t__refqtmk3 (t__content3 (_ BitVec 64))))))
(declare-fun power3 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max3 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned_64 unsigned_64) Bool)

(declare-const dummy unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (unsigned_64__refqtmk (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref_unsigned_64__content__projection ((a unsigned_64__ref)) unsigned_64 
  (unsigned_64__content a))

(declare-fun to_rep (unsigned_64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int5 ((x unsigned_64)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range3
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort unsigned_32 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)

(declare-const dummy1 unsigned_32)

(declare-datatypes ()
((unsigned_32__ref (unsigned_32__refqtmk (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref_unsigned_32__content__projection ((a unsigned_32__ref)) unsigned_32 
  (unsigned_32__content a))

(declare-fun to_rep1 (unsigned_32) (_ BitVec 32))

(declare-fun of_rep1 ((_ BitVec 32)) unsigned_32)

;; inversion_axiom
  (assert
  (forall ((x unsigned_32))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int6 ((x unsigned_32)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_32)) (! (uint_in_range2
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort unsigned_16 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 16))

(declare-fun user_eq2 (unsigned_16 unsigned_16) Bool)

(declare-const dummy2 unsigned_16)

(declare-datatypes ()
((unsigned_16__ref (unsigned_16__refqtmk (unsigned_16__content unsigned_16)))))
(define-fun unsigned_16__ref_unsigned_16__content__projection ((a unsigned_16__ref)) unsigned_16 
  (unsigned_16__content a))

(declare-fun to_rep2 (unsigned_16) (_ BitVec 16))

(declare-fun of_rep2 ((_ BitVec 16)) unsigned_16)

;; inversion_axiom
  (assert
  (forall ((x unsigned_16))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int7 ((x unsigned_16)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_16)) (! (uint_in_range1
  (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort unsigned_8 0)

(declare-const attr__ATTRIBUTE_MODULUS3 (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq3 (unsigned_8 unsigned_8) Bool)

(declare-const dummy3 unsigned_8)

(declare-datatypes ()
((unsigned_8__ref (unsigned_8__refqtmk (unsigned_8__content unsigned_8)))))
(define-fun unsigned_8__ref_unsigned_8__content__projection ((a unsigned_8__ref)) unsigned_8 
  (unsigned_8__content a))

(declare-fun to_rep3 (unsigned_8) (_ BitVec 8))

(declare-fun of_rep3 ((_ BitVec 8)) unsigned_8)

;; inversion_axiom
  (assert
  (forall ((x unsigned_8))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep3 (of_rep3 x)) x) :pattern ((to_rep3 (of_rep3 x))) )))

(define-fun to_int8 ((x unsigned_8)) Int (bv2int (to_rep3 x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_8)) (! (uint_in_range
  (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-sort register_option 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (register_option register_option) Bool)

(declare-const dummy4 register_option)

(declare-datatypes ()
((register_option__ref
 (register_option__refqtmk (register_option__content register_option)))))
(define-fun register_option__ref_register_option__content__projection ((a register_option__ref)) register_option 
  (register_option__content a))

(declare-fun to_rep4 (register_option) Int)

(declare-fun of_rep4 (Int) register_option)

;; inversion_axiom
  (assert
  (forall ((x register_option))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x register_option)) (! (in_range
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                             (of_rep4 x))) )))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__discrimrec__register_type__option register_option)))))
(define-fun us_split_discrs_rec__discrimrec__register_type__option__projection ((a us_split_discrs)) register_option 
  (rec__discrimrec__register_type__option a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__discrimrec__register_type__value_64 unsigned_64)(rec__discrimrec__register_type__ignore_32a unsigned_32)(rec__discrimrec__register_type__value_32 unsigned_32)(rec__discrimrec__register_type__ignore_32b unsigned_32)(rec__discrimrec__register_type__ignore_16a unsigned_16)(rec__discrimrec__register_type__value_16 unsigned_16)(rec__discrimrec__register_type__ignore_32c unsigned_32)(rec__discrimrec__register_type__ignore_16b unsigned_16)(rec__discrimrec__register_type__value_high unsigned_8)(rec__discrimrec__register_type__value_low unsigned_8)))))
(define-fun us_split_fields_rec__discrimrec__register_type__value_64__projection ((a us_split_fields)) unsigned_64 
  (rec__discrimrec__register_type__value_64 a))

(define-fun us_split_fields_rec__discrimrec__register_type__ignore_32a__projection ((a us_split_fields)) unsigned_32 
  (rec__discrimrec__register_type__ignore_32a a))

(define-fun us_split_fields_rec__discrimrec__register_type__value_32__projection ((a us_split_fields)) unsigned_32 
  (rec__discrimrec__register_type__value_32 a))

(define-fun us_split_fields_rec__discrimrec__register_type__ignore_32b__projection ((a us_split_fields)) unsigned_32 
  (rec__discrimrec__register_type__ignore_32b a))

(define-fun us_split_fields_rec__discrimrec__register_type__ignore_16a__projection ((a us_split_fields)) unsigned_16 
  (rec__discrimrec__register_type__ignore_16a a))

(define-fun us_split_fields_rec__discrimrec__register_type__value_16__projection ((a us_split_fields)) unsigned_16 
  (rec__discrimrec__register_type__value_16 a))

(define-fun us_split_fields_rec__discrimrec__register_type__ignore_32c__projection ((a us_split_fields)) unsigned_32 
  (rec__discrimrec__register_type__ignore_32c a))

(define-fun us_split_fields_rec__discrimrec__register_type__ignore_16b__projection ((a us_split_fields)) unsigned_16 
  (rec__discrimrec__register_type__ignore_16b a))

(define-fun us_split_fields_rec__discrimrec__register_type__value_high__projection ((a us_split_fields)) unsigned_8 
  (rec__discrimrec__register_type__value_high a))

(define-fun us_split_fields_rec__discrimrec__register_type__value_low__projection ((a us_split_fields)) unsigned_8 
  (rec__discrimrec__register_type__value_low a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun discrimrec__register_type__value_64__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 0))

(define-fun discrimrec__register_type__ignore_32a__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 1))

(define-fun discrimrec__register_type__value_32__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 1))

(define-fun discrimrec__register_type__ignore_32b__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 2))

(define-fun discrimrec__register_type__ignore_16a__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 2))

(define-fun discrimrec__register_type__value_16__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 2))

(define-fun discrimrec__register_type__ignore_32c__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))

(define-fun discrimrec__register_type__ignore_16b__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))

(define-fun discrimrec__register_type__value_high__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))

(define-fun discrimrec__register_type__value_low__pred ((a us_rep)) Bool (= 
  (to_rep4 (rec__discrimrec__register_type__option (us_split_discrs1 a))) 3))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep4
                           (rec__discrimrec__register_type__option
                           (us_split_discrs1 a))) (to_rep4
                                                  (rec__discrimrec__register_type__option
                                                  (us_split_discrs1 b))))
                        (and
                        (and
                        (=> (discrimrec__register_type__value_64__pred a)
                        (= (to_rep
                           (rec__discrimrec__register_type__value_64
                           (us_split_fields1 a))) (to_rep
                                                  (rec__discrimrec__register_type__value_64
                                                  (us_split_fields1 b)))))
                        (=> (discrimrec__register_type__ignore_32a__pred a)
                        (= (to_rep1
                           (rec__discrimrec__register_type__ignore_32a
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__discrimrec__register_type__ignore_32a
                                                  (us_split_fields1 b))))))
                        (and
                        (and
                        (and
                        (=> (discrimrec__register_type__value_32__pred a)
                        (= (to_rep1
                           (rec__discrimrec__register_type__value_32
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__discrimrec__register_type__value_32
                                                  (us_split_fields1 b)))))
                        (=> (discrimrec__register_type__ignore_32b__pred a)
                        (= (to_rep1
                           (rec__discrimrec__register_type__ignore_32b
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__discrimrec__register_type__ignore_32b
                                                  (us_split_fields1 b))))))
                        (and
                        (=> (discrimrec__register_type__ignore_16a__pred a)
                        (= (to_rep2
                           (rec__discrimrec__register_type__ignore_16a
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__discrimrec__register_type__ignore_16a
                                                  (us_split_fields1 b)))))
                        (=> (discrimrec__register_type__value_16__pred a)
                        (= (to_rep2
                           (rec__discrimrec__register_type__value_16
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__discrimrec__register_type__value_16
                                                  (us_split_fields1 b)))))))
                        (and
                        (and
                        (=> (discrimrec__register_type__ignore_32c__pred a)
                        (= (to_rep1
                           (rec__discrimrec__register_type__ignore_32c
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__discrimrec__register_type__ignore_32c
                                                  (us_split_fields1 b)))))
                        (=> (discrimrec__register_type__ignore_16b__pred a)
                        (= (to_rep2
                           (rec__discrimrec__register_type__ignore_16b
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__discrimrec__register_type__ignore_16b
                                                  (us_split_fields1 b))))))
                        (and
                        (=> (discrimrec__register_type__value_high__pred a)
                        (= (to_rep3
                           (rec__discrimrec__register_type__value_high
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__discrimrec__register_type__value_high
                                                  (us_split_fields1 b)))))
                        (=> (discrimrec__register_type__value_low__pred a)
                        (= (to_rep3
                           (rec__discrimrec__register_type__value_low
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__discrimrec__register_type__value_low
                                                  (us_split_fields1 b))))))))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const discrimrec__register_type__option__first__bit Int)

(declare-const discrimrec__register_type__option__last__bit Int)

(declare-const discrimrec__register_type__option__position Int)

;; discrimrec__register_type__option__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__option__first__bit))

;; discrimrec__register_type__option__last__bit_axiom
  (assert
  (< discrimrec__register_type__option__first__bit discrimrec__register_type__option__last__bit))

;; discrimrec__register_type__option__position_axiom
  (assert (<= 0 discrimrec__register_type__option__position))

(declare-const discrimrec__register_type__ignore_32a__first__bit Int)

(declare-const discrimrec__register_type__ignore_32a__last__bit Int)

(declare-const discrimrec__register_type__ignore_32a__position Int)

;; discrimrec__register_type__ignore_32a__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32a__first__bit))

;; discrimrec__register_type__ignore_32a__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_32a__first__bit discrimrec__register_type__ignore_32a__last__bit))

;; discrimrec__register_type__ignore_32a__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32a__position))

(declare-const discrimrec__register_type__value_32__first__bit Int)

(declare-const discrimrec__register_type__value_32__last__bit Int)

(declare-const discrimrec__register_type__value_32__position Int)

;; discrimrec__register_type__value_32__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_32__first__bit))

;; discrimrec__register_type__value_32__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_32__first__bit discrimrec__register_type__value_32__last__bit))

;; discrimrec__register_type__value_32__position_axiom
  (assert (<= 0 discrimrec__register_type__value_32__position))

(declare-const discrimrec__register_type__ignore_32b__first__bit Int)

(declare-const discrimrec__register_type__ignore_32b__last__bit Int)

(declare-const discrimrec__register_type__ignore_32b__position Int)

;; discrimrec__register_type__ignore_32b__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32b__first__bit))

;; discrimrec__register_type__ignore_32b__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_32b__first__bit discrimrec__register_type__ignore_32b__last__bit))

;; discrimrec__register_type__ignore_32b__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32b__position))

(declare-const discrimrec__register_type__ignore_16a__first__bit Int)

(declare-const discrimrec__register_type__ignore_16a__last__bit Int)

(declare-const discrimrec__register_type__ignore_16a__position Int)

;; discrimrec__register_type__ignore_16a__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16a__first__bit))

;; discrimrec__register_type__ignore_16a__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_16a__first__bit discrimrec__register_type__ignore_16a__last__bit))

;; discrimrec__register_type__ignore_16a__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16a__position))

(declare-const discrimrec__register_type__value_16__first__bit Int)

(declare-const discrimrec__register_type__value_16__last__bit Int)

(declare-const discrimrec__register_type__value_16__position Int)

;; discrimrec__register_type__value_16__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_16__first__bit))

;; discrimrec__register_type__value_16__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_16__first__bit discrimrec__register_type__value_16__last__bit))

;; discrimrec__register_type__value_16__position_axiom
  (assert (<= 0 discrimrec__register_type__value_16__position))

(declare-const discrimrec__register_type__ignore_32c__first__bit Int)

(declare-const discrimrec__register_type__ignore_32c__last__bit Int)

(declare-const discrimrec__register_type__ignore_32c__position Int)

;; discrimrec__register_type__ignore_32c__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32c__first__bit))

;; discrimrec__register_type__ignore_32c__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_32c__first__bit discrimrec__register_type__ignore_32c__last__bit))

;; discrimrec__register_type__ignore_32c__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32c__position))

(declare-const discrimrec__register_type__ignore_16b__first__bit Int)

(declare-const discrimrec__register_type__ignore_16b__last__bit Int)

(declare-const discrimrec__register_type__ignore_16b__position Int)

;; discrimrec__register_type__ignore_16b__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16b__first__bit))

;; discrimrec__register_type__ignore_16b__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_16b__first__bit discrimrec__register_type__ignore_16b__last__bit))

;; discrimrec__register_type__ignore_16b__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16b__position))

(declare-const discrimrec__register_type__value_high__first__bit Int)

(declare-const discrimrec__register_type__value_high__last__bit Int)

(declare-const discrimrec__register_type__value_high__position Int)

;; discrimrec__register_type__value_high__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_high__first__bit))

;; discrimrec__register_type__value_high__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_high__first__bit discrimrec__register_type__value_high__last__bit))

;; discrimrec__register_type__value_high__position_axiom
  (assert (<= 0 discrimrec__register_type__value_high__position))

(declare-const discrimrec__register_type__value_low__first__bit Int)

(declare-const discrimrec__register_type__value_low__last__bit Int)

(declare-const discrimrec__register_type__value_low__position Int)

;; discrimrec__register_type__value_low__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_low__first__bit))

;; discrimrec__register_type__value_low__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_low__first__bit discrimrec__register_type__value_low__last__bit))

;; discrimrec__register_type__value_low__position_axiom
  (assert (<= 0 discrimrec__register_type__value_low__position))

(declare-const discrimrec__register_type__value_64__first__bit Int)

(declare-const discrimrec__register_type__value_64__last__bit Int)

(declare-const discrimrec__register_type__value_64__position Int)

;; discrimrec__register_type__value_64__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_64__first__bit))

;; discrimrec__register_type__value_64__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_64__first__bit discrimrec__register_type__value_64__last__bit))

;; discrimrec__register_type__value_64__position_axiom
  (assert (<= 0 discrimrec__register_type__value_64__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((traxS__ref (traxS__refqtmk (traxS__content us_rep)))))
(define-fun traxS__ref_traxS__content__projection ((a traxS__ref)) us_rep 
  (traxS__content a))

(define-fun in_range1 ((rec__discrimrec__register_type__option1 Int)
  (a us_split_discrs)) Bool (= rec__discrimrec__register_type__option1 
  (to_rep4 (rec__discrimrec__register_type__option a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const discrimrec__register_type__option__first__bit1 Int)

(declare-const discrimrec__register_type__option__last__bit1 Int)

(declare-const discrimrec__register_type__option__position1 Int)

;; discrimrec__register_type__option__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__option__first__bit1))

;; discrimrec__register_type__option__last__bit_axiom
  (assert
  (< discrimrec__register_type__option__first__bit1 discrimrec__register_type__option__last__bit1))

;; discrimrec__register_type__option__position_axiom
  (assert (<= 0 discrimrec__register_type__option__position1))

(declare-const discrimrec__register_type__value_64__first__bit1 Int)

(declare-const discrimrec__register_type__value_64__last__bit1 Int)

(declare-const discrimrec__register_type__value_64__position1 Int)

;; discrimrec__register_type__value_64__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_64__first__bit1))

;; discrimrec__register_type__value_64__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_64__first__bit1 discrimrec__register_type__value_64__last__bit1))

;; discrimrec__register_type__value_64__position_axiom
  (assert (<= 0 discrimrec__register_type__value_64__position1))

(declare-const discrimrec__register_type__ignore_32a__first__bit1 Int)

(declare-const discrimrec__register_type__ignore_32a__last__bit1 Int)

(declare-const discrimrec__register_type__ignore_32a__position1 Int)

;; discrimrec__register_type__ignore_32a__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32a__first__bit1))

;; discrimrec__register_type__ignore_32a__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_32a__first__bit1 discrimrec__register_type__ignore_32a__last__bit1))

;; discrimrec__register_type__ignore_32a__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32a__position1))

(declare-const discrimrec__register_type__value_32__first__bit1 Int)

(declare-const discrimrec__register_type__value_32__last__bit1 Int)

(declare-const discrimrec__register_type__value_32__position1 Int)

;; discrimrec__register_type__value_32__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_32__first__bit1))

;; discrimrec__register_type__value_32__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_32__first__bit1 discrimrec__register_type__value_32__last__bit1))

;; discrimrec__register_type__value_32__position_axiom
  (assert (<= 0 discrimrec__register_type__value_32__position1))

(declare-const discrimrec__register_type__ignore_32b__first__bit1 Int)

(declare-const discrimrec__register_type__ignore_32b__last__bit1 Int)

(declare-const discrimrec__register_type__ignore_32b__position1 Int)

;; discrimrec__register_type__ignore_32b__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32b__first__bit1))

;; discrimrec__register_type__ignore_32b__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_32b__first__bit1 discrimrec__register_type__ignore_32b__last__bit1))

;; discrimrec__register_type__ignore_32b__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32b__position1))

(declare-const discrimrec__register_type__ignore_16a__first__bit1 Int)

(declare-const discrimrec__register_type__ignore_16a__last__bit1 Int)

(declare-const discrimrec__register_type__ignore_16a__position1 Int)

;; discrimrec__register_type__ignore_16a__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16a__first__bit1))

;; discrimrec__register_type__ignore_16a__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_16a__first__bit1 discrimrec__register_type__ignore_16a__last__bit1))

;; discrimrec__register_type__ignore_16a__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16a__position1))

(declare-const discrimrec__register_type__value_16__first__bit1 Int)

(declare-const discrimrec__register_type__value_16__last__bit1 Int)

(declare-const discrimrec__register_type__value_16__position1 Int)

;; discrimrec__register_type__value_16__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_16__first__bit1))

;; discrimrec__register_type__value_16__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_16__first__bit1 discrimrec__register_type__value_16__last__bit1))

;; discrimrec__register_type__value_16__position_axiom
  (assert (<= 0 discrimrec__register_type__value_16__position1))

(declare-const discrimrec__register_type__ignore_32c__first__bit1 Int)

(declare-const discrimrec__register_type__ignore_32c__last__bit1 Int)

(declare-const discrimrec__register_type__ignore_32c__position1 Int)

;; discrimrec__register_type__ignore_32c__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32c__first__bit1))

;; discrimrec__register_type__ignore_32c__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_32c__first__bit1 discrimrec__register_type__ignore_32c__last__bit1))

;; discrimrec__register_type__ignore_32c__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_32c__position1))

(declare-const discrimrec__register_type__ignore_16b__first__bit1 Int)

(declare-const discrimrec__register_type__ignore_16b__last__bit1 Int)

(declare-const discrimrec__register_type__ignore_16b__position1 Int)

;; discrimrec__register_type__ignore_16b__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16b__first__bit1))

;; discrimrec__register_type__ignore_16b__last__bit_axiom
  (assert
  (< discrimrec__register_type__ignore_16b__first__bit1 discrimrec__register_type__ignore_16b__last__bit1))

;; discrimrec__register_type__ignore_16b__position_axiom
  (assert (<= 0 discrimrec__register_type__ignore_16b__position1))

(declare-const discrimrec__register_type__value_high__first__bit1 Int)

(declare-const discrimrec__register_type__value_high__last__bit1 Int)

(declare-const discrimrec__register_type__value_high__position1 Int)

;; discrimrec__register_type__value_high__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_high__first__bit1))

;; discrimrec__register_type__value_high__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_high__first__bit1 discrimrec__register_type__value_high__last__bit1))

;; discrimrec__register_type__value_high__position_axiom
  (assert (<= 0 discrimrec__register_type__value_high__position1))

(declare-const discrimrec__register_type__value_low__first__bit1 Int)

(declare-const discrimrec__register_type__value_low__last__bit1 Int)

(declare-const discrimrec__register_type__value_low__position1 Int)

;; discrimrec__register_type__value_low__first__bit_axiom
  (assert (<= 0 discrimrec__register_type__value_low__first__bit1))

;; discrimrec__register_type__value_low__last__bit_axiom
  (assert
  (< discrimrec__register_type__value_low__first__bit1 discrimrec__register_type__value_low__last__bit1))

;; discrimrec__register_type__value_low__position_axiom
  (assert (<= 0 discrimrec__register_type__value_low__position1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((register_type__ref
 (register_type__refqtmk (register_type__content us_rep)))))
(define-fun register_type__ref_register_type__content__projection ((a register_type__ref)) us_rep 
  (register_type__content a))

(declare-const rax__split_discrs us_split_discrs)

(declare-const rax__attr__constrained Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun dynamic_invariant ((temp___expr_213 us_rep)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)
  (temp___do_typ_inv_212 Bool)) Bool (=>
                                     (not (= temp___skip_constant_210 true))
                                     (in_range1 0
                                     (us_split_discrs1 temp___expr_213))))

(define-fun default_initial_assumption ((temp___expr_215 us_rep)
  (temp___skip_top_level_216 Bool)) Bool (= (to_rep4
                                            (rec__discrimrec__register_type__option
                                            (us_split_discrs1
                                            temp___expr_215))) 0))

(define-fun dynamic_invariant1 ((temp___expr_159 (_ BitVec 64))
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)

(define-fun dynamic_invariant2 ((temp___expr_166 (_ BitVec 32))
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool true)

(define-fun dynamic_invariant3 ((temp___expr_173 (_ BitVec 16))
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool) (temp___do_typ_inv_172 Bool)) Bool true)

(define-fun dynamic_invariant4 ((temp___expr_180 (_ BitVec 8))
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool) (temp___do_typ_inv_179 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_187 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)
  (temp___do_typ_inv_186 Bool)) Bool (=>
                                     (or (= temp___is_init_183 true)
                                     (<= 0 3)) (in_range temp___expr_187)))

(define-fun default_initial_assumption1 ((temp___expr_196 us_rep)
  (temp___skip_top_level_197 Bool)) Bool (= (to_rep4
                                            (rec__discrimrec__register_type__option
                                            (us_split_discrs1
                                            temp___expr_196))) 0))

(declare-const rax__split_fields us_split_fields)

;; Ensures
  (assert (in_range 0))

;; Assume
  (assert (= rax__attr__constrained true))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk rax__split_discrs rax__split_fields) false))

;; Assume
  (assert (dynamic_invariant (us_repqtmk rax__split_discrs rax__split_fields)
  false false true true))

(assert
;; defqtvc
 ;; File "discrimrec.ads", line 1, characters 0-0
  (not (in_range 0)))
(check-sat)

(exit)
