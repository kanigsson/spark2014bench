(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort nat 0)

(declare-fun natqtint (nat) Int)

;; nat'axiom
  (assert
  (forall ((i nat)) (and (<= 0 (natqtint i)) (<= (natqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (nat nat) Bool)

(declare-const dummy1 nat)

(declare-datatypes () ((nat__ref (nat__refqtmk (nat__content nat)))))
(define-fun nat__ref_nat__content__projection ((a nat__ref)) nat (nat__content
                                                                 a))

(define-fun to_rep ((x nat)) Int (natqtint x))

(declare-fun of_rep (Int) nat)

;; inversion_axiom
  (assert
  (forall ((x nat)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x nat)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int nat))))))
(declare-fun slide ((Array Int nat) Int Int) (Array Int nat))

;; slide_eq
  (assert
  (forall ((a (Array Int nat)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int nat)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int nat)) (a__first Int) (a__last Int)
  (b (Array Int nat)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep (select a temp___idx_155)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int nat)) (b (Array Int nat)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep (select a temp___idx_155)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort trteD1 0)

(declare-fun trteD1qtint (trteD1) Int)

;; trteD1'axiom
  (assert
  (forall ((i trteD1)) (and (<= 1 (trteD1qtint i)) (<= (trteD1qtint i) 3))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (trteD1 trteD1) Bool)

(declare-const dummy2 trteD1)

(declare-datatypes ()
((trteD1__ref (trteD1__refqtmk (trteD1__content trteD1)))))
(define-fun trteD1__ref_trteD1__content__projection ((a trteD1__ref)) trteD1 
  (trteD1__content a))

(declare-fun nat_ok (Int) Bool)

(declare-fun nat_ok__function_guard (Bool Int) Bool)

(declare-fun rte_ok ((Array Int nat) Int) Bool)

(declare-fun rte_ok__function_guard (Bool (Array Int nat) Int) Bool)

;; temp___result_219'def
  (assert
  (forall ((temp___218 nat)) (nat_ok__function_guard
  (nat_ok (to_rep temp___218)) (to_rep temp___218))))

;; temp___result_221'def
  (assert
  (forall ((default_init__n Int) (temp___220 (Array Int nat)))
  (rte_ok__function_guard (rte_ok temp___220 default_init__n) temp___220
  default_init__n)))

(define-fun default_initial_assumption ((temp___expr_214 (Array Int nat))
  (temp___skip_top_level_215 Bool)
  (default_init__n Int)) Bool (and
                              (forall ((temp___216 Int))
                              (=> (and (<= 1 temp___216) (<= temp___216 3))
                              (let ((temp___217 (select temp___expr_214 temp___216)))
                              (and (= (to_rep temp___217) 0)
                              (= (nat_ok (to_rep temp___217)) true)))))
                              (=> (not (= temp___skip_top_level_215 true))
                              (= (rte_ok temp___expr_214 default_init__n) true))))

(define-fun dynamic_invariant1 ((temp___expr_194 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)
  (temp___do_typ_inv_193 Bool)) Bool (=>
                                     (or (= temp___is_init_190 true)
                                     (<= 0 2147483647)) (in_range2
                                     temp___expr_194)))

;; temp___result_198'def
  (assert
  (forall ((temp___197 Int)) (nat_ok__function_guard (nat_ok temp___197)
  temp___197)))

(define-fun default_initial_assumption1 ((temp___expr_195 Int)
  (temp___skip_top_level_196 Bool)) Bool (and (= temp___expr_195 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_196 true))
                                         (= (nat_ok temp___expr_195) true))))

;; nat_ok__post_axiom
  (assert true)

;; nat_ok__def_axiom
  (assert
  (forall ((x Int))
  (! (= (= (nat_ok x) true) (= x 0)) :pattern ((nat_ok x)) )))

(declare-fun pre_rte_ok (Int) Bool)

(declare-fun pre_rte_ok__function_guard (Bool Int) Bool)

;; pre_rte_ok__post_axiom
  (assert true)

;; pre_rte_ok__def_axiom
  (assert
  (forall ((default_init__n Int))
  (! (= (= (pre_rte_ok default_init__n) true)
     (and (<= 1 default_init__n) (<= default_init__n 3))) :pattern ((pre_rte_ok
                                                                    default_init__n)) )))

;; rte_ok__post_axiom
  (assert
  (forall ((default_init__n Int)) (pre_rte_ok__function_guard
  (pre_rte_ok default_init__n) default_init__n)))

;; rte_ok__def_axiom
  (assert
  (forall ((x (Array Int nat)))
  (forall ((default_init__n Int))
  (! (= (= (rte_ok x default_init__n) true) (= (to_rep (select x 1)) 0)) :pattern (
  (rte_ok x default_init__n)) ))))

(declare-const n Int)

(declare-const r (Array Int nat))

;; Assume
  (assert (dynamic_invariant n true false true true))

;; Assume
  (assert (default_initial_assumption r false n))

;; Assume
  (assert true)

(declare-const spark__branch Bool)

;; H
  (assert
  (= spark__branch (and (ite (<= 1 n) true false) (ite (<= n 3) true false))))

;; H
  (assert (= spark__branch true))

(assert
;; defqtvc
 ;; File "default_init.ads", line 40, characters 0-0
  (not (= (to_rep (select r n)) 0)))
(check-sat)
