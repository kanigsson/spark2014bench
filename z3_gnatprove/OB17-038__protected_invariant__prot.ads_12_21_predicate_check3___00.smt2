;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__prot__int__v integer)))))
(define-fun us_split_fields_rec__prot__int__v__projection ((a us_split_fields)) integer 
  (rec__prot__int__v a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep (rec__prot__int__v (us_split_fields1 a))) 
                   (to_rep (rec__prot__int__v (us_split_fields1 b)))) true
                   false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const prot__int__v__first__bit Int)

(declare-const prot__int__v__last__bit Int)

(declare-const prot__int__v__position Int)

;; prot__int__v__first__bit_axiom
  (assert (<= 0 prot__int__v__first__bit))

;; prot__int__v__last__bit_axiom
  (assert (< prot__int__v__first__bit prot__int__v__last__bit))

;; prot__int__v__position_axiom
  (assert (<= 0 prot__int__v__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((int____ref (int____refqtmk (int____content us_rep)))))
(define-fun int____ref_int____content__projection ((a int____ref)) us_rep 
  (int____content a))

(declare-datatypes () ((nat__ref (nat__refqtmk (nat__content us_rep)))))
(define-fun nat__ref_nat__content__projection ((a nat__ref)) us_rep (nat__content
                                                                    a))

(declare-datatypes ()
((us_split_fields2 (us_split_fieldsqtmk1 (rec__prot__t__data us_rep)))))
(define-fun us_split_fields_rec__prot__t__data__projection ((a us_split_fields2)) us_rep 
  (rec__prot__t__data a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const prot__t__data__first__bit Int)

(declare-const prot__t__data__last__bit Int)

(declare-const prot__t__data__position Int)

;; prot__t__data__first__bit_axiom
  (assert (<= 0 prot__t__data__first__bit))

;; prot__t__data__last__bit_axiom
  (assert (< prot__t__data__first__bit prot__t__data__last__bit))

;; prot__t__data__position_axiom
  (assert (<= 0 prot__t__data__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep1)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep1 (t__content a))

(define-fun dynamic_invariant ((temp___expr_167 us_rep)
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=> (= temp___do_toplevel_165 true)
                                     (=> (= temp___is_init_163 true)
                                     (<= 0 (to_rep
                                           (rec__prot__int__v
                                           (us_split_fields1 temp___expr_167)))))))

(define-fun dynamic_predicate ((temp___172 us_rep)) Bool (<= 0 (to_rep
                                                               (rec__prot__int__v
                                                               (us_split_fields1
                                                               temp___172)))))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_199 us_rep1)
  (temp___is_init_195 Bool) (temp___skip_constant_196 Bool)
  (temp___do_toplevel_197 Bool)
  (temp___do_typ_inv_198 Bool)) Bool (<= 0 (to_rep
                                           (rec__prot__int__v
                                           (us_split_fields1
                                           (rec__prot__t__data
                                           (us_split_fields3 temp___expr_199)))))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

(define-fun default_initial_assumption ((temp___expr_201 us_rep1)
  (temp___skip_top_level_202 Bool)) Bool (= (rec__prot__t__data
                                            (us_split_fields3
                                            temp___expr_201)) (us_repqtmk
                                                              (us_split_fieldsqtmk
                                                              rliteral))))

(declare-const self__ us_rep1)

(assert
;; defqtvc
 ;; File "prot.ads", line 9, characters 0-0
  (not (dynamic_predicate (us_repqtmk (us_split_fieldsqtmk rliteral)))))
(check-sat)
