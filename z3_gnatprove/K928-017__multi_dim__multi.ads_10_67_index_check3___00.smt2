;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort map1 0)

(declare-datatypes () ((map__ref (map__refqtmk (map__content map1)))))
(declare-fun get (map1 Int Int) integer)

(declare-fun set (map1 Int Int integer) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a integer))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_155 Int)
                             (temp___idx_156 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_155)
                             (<= temp___idx_155 a__last))
                             (and (<= a__first_2 temp___idx_156)
                             (<= temp___idx_156 a__last_2)))
                             (= (to_rep
                                (get a temp___idx_155 temp___idx_156)) 
                             (to_rep
                             (get b (+ (- b__first a__first) temp___idx_155)
                             (+ (- b__first_2 a__first_2) temp___idx_156)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_155 Int) (temp___idx_156 Int))
  (=>
  (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2)))
  (= (to_rep (get a temp___idx_155 temp___idx_156)) (to_rep
                                                    (get b
                                                    (+ (- b__first a__first) temp___idx_155)
                                                    (+ (- b__first_2 a__first_2) temp___idx_156)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort ta4D2 0)

(declare-fun ta4D2qtint (ta4D2) Int)

;; ta4D2'axiom
  (assert
  (forall ((i ta4D2)) (and (<= 1 (ta4D2qtint i)) (<= (ta4D2qtint i) 2))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (ta4D2 ta4D2) Bool)

(declare-const dummy1 ta4D2)

(declare-datatypes () ((ta4D2__ref (ta4D2__refqtmk (ta4D2__content ta4D2)))))
(define-fun ta4D2__ref_ta4D2__content__projection ((a ta4D2__ref)) ta4D2 
  (ta4D2__content a))

(declare-fun temp_____aggregate_def_183 (Int Int Int Int) map1)

(declare-fun temp_____aggregate_def_191 (Int) map1)

(declare-fun temp_____aggregate_def_196 (Int Int Int) map1)

(declare-fun temp_____aggregate_def_203 (Int Int Int) map1)

(declare-fun temp_____aggregate_def_210 (Int Int Int Int) map1)

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 2))

;; def_axiom
  (assert
  (forall ((temp___185 Int) (temp___186 Int) (temp___187 Int)
  (temp___188 Int))
  (let ((temp___184 (temp_____aggregate_def_183 temp___185 temp___186
                    temp___187 temp___188)))
  (=>
  (and
  (and (dynamic_invariant temp___185 true true true true) (dynamic_invariant
  temp___186 true true true true))
  (and (dynamic_invariant temp___187 true true true true) (dynamic_invariant
  temp___188 true true true true)))
  (and
  (and (= (to_rep (get temp___184 1 1)) temp___185)
  (= (get temp___184 1 2) rliteral))
  (and (= (to_rep (get temp___184 2 1)) temp___187)
  (= (get temp___184 2 2) rliteral)))))))

;; def_axiom
  (assert
  (forall ((temp___193 Int))
  (=> (dynamic_invariant temp___193 true true true true)
  (forall ((temp___194 Int) (temp___195 Int))
  (= (to_rep
     (get (temp_____aggregate_def_191 temp___193) temp___194 temp___195)) temp___193)))))

;; def_axiom
  (assert
  (forall ((temp___198 Int) (temp___199 Int) (temp___200 Int))
  (let ((temp___197 (temp_____aggregate_def_196 temp___198 temp___199
                    temp___200)))
  (=>
  (and
  (and (dynamic_invariant temp___198 true true true true) (dynamic_invariant
  temp___199 true true true true)) (dynamic_invariant temp___200 true true
  true true))
  (forall ((temp___201 Int) (temp___202 Int))
  (ite (= temp___201 1)
  (ite (= temp___202 1)
  (= (to_rep (get temp___197 temp___201 temp___202)) temp___198)
  (= (to_rep (get temp___197 temp___201 temp___202)) temp___199))
  (=> (= temp___201 2)
  (= (to_rep (get temp___197 temp___201 temp___202)) temp___200))))))))

;; def_axiom
  (assert
  (forall ((temp___205 Int) (temp___206 Int) (temp___207 Int))
  (let ((temp___204 (temp_____aggregate_def_203 temp___205 temp___206
                    temp___207)))
  (=>
  (and
  (and (dynamic_invariant temp___205 true true true true) (dynamic_invariant
  temp___206 true true true true)) (dynamic_invariant temp___207 true true
  true true))
  (forall ((temp___208 Int) (temp___209 Int))
  (ite (= temp___208 1)
  (ite (= temp___209 1) (= (get temp___204 temp___208 temp___209) rliteral)
  (= (to_rep (get temp___204 temp___208 temp___209)) temp___206))
  (=> (= temp___208 2)
  (= (to_rep (get temp___204 temp___208 temp___209)) temp___207))))))))

;; def_axiom
  (assert
  (forall ((temp___212 Int) (temp___213 Int) (temp___214 Int)
  (temp___215 Int))
  (let ((temp___211 (temp_____aggregate_def_210 temp___212 temp___213
                    temp___214 temp___215)))
  (=>
  (and
  (and (dynamic_invariant temp___212 true true true true) (dynamic_invariant
  temp___213 true true true true))
  (and (dynamic_invariant temp___214 true true true true) (dynamic_invariant
  temp___215 true true true true)))
  (forall ((temp___216 Int) (temp___217 Int))
  (ite (= temp___216 2)
  (ite (= temp___217 1) (= (get temp___211 temp___216 temp___217) rliteral)
  (=> (= temp___217 2)
  (= (to_rep (get temp___211 temp___216 temp___217)) temp___213)))
  (ite (= temp___217 1)
  (= (to_rep (get temp___211 temp___216 temp___217)) temp___214)
  (=> (= temp___217 2)
  (= (to_rep (get temp___211 temp___216 temp___217)) temp___215)))))))))

(declare-const one Int)

(declare-const a map1)

;; Assume
  (assert (dynamic_invariant one true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant b true false true true))

;; Assume
  (assert (= one 1))

(declare-const a1 map1)

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= b 1) true false)))

(declare-const spark__branch1 Bool)

(declare-const spark__branch2 Bool)

(declare-const spark__branch3 Bool)

;; H
  (assert
  (ite (= spark__branch true) (= a1 (temp_____aggregate_def_183 one 2 one 2))
  (and (= spark__branch1 (ite (= b 2) true false))
  (ite (= spark__branch1 true) (= a1 (temp_____aggregate_def_191 one))
  (and (= spark__branch2 (ite (= b 3) true false))
  (ite (= spark__branch2 true)
  (= a1 (temp_____aggregate_def_196 one one one))
  (and (= spark__branch3 (ite (= b 4) true false))
  (ite (= spark__branch3 true) (= a1 (temp_____aggregate_def_203 2 one one))
  (= a1 (temp_____aggregate_def_210 2 one one one))))))))))

;; H
  (assert (= b 1))

(declare-const usf Int)

;; H
  (assert
  (= (and (ite (<= 1 usf) true false) (ite (<= usf 2) true false)) true))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep (get a1 usf 2)) o))

(assert
;; defqtvc
 ;; File "multi.ads", line 8, characters 0-0
  (not (<= 1 one)))
(check-sat)
