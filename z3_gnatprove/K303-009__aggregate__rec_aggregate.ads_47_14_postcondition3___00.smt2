(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__rec_aggregate__r2__x integer)(rec__rec_aggregate__r2__y integer)))))
(define-fun us_split_fields_rec__rec_aggregate__r2__x__projection ((a us_split_fields)) integer 
  (rec__rec_aggregate__r2__x a))

(define-fun us_split_fields_rec__rec_aggregate__r2__y__projection ((a us_split_fields)) integer 
  (rec__rec_aggregate__r2__y a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__rec_aggregate__r2__x (us_split_fields1 a))) 
                        (to_rep
                        (rec__rec_aggregate__r2__x (us_split_fields1 b))))
                        (= (to_rep
                           (rec__rec_aggregate__r2__y (us_split_fields1 a))) 
                        (to_rep
                        (rec__rec_aggregate__r2__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const rec_aggregate__r2__x__first__bit Int)

(declare-const rec_aggregate__r2__x__last__bit Int)

(declare-const rec_aggregate__r2__x__position Int)

;; rec_aggregate__r2__x__first__bit_axiom
  (assert (<= 0 rec_aggregate__r2__x__first__bit))

;; rec_aggregate__r2__x__last__bit_axiom
  (assert
  (< rec_aggregate__r2__x__first__bit rec_aggregate__r2__x__last__bit))

;; rec_aggregate__r2__x__position_axiom
  (assert (<= 0 rec_aggregate__r2__x__position))

(declare-const rec_aggregate__r2__y__first__bit Int)

(declare-const rec_aggregate__r2__y__last__bit Int)

(declare-const rec_aggregate__r2__y__position Int)

;; rec_aggregate__r2__y__first__bit_axiom
  (assert (<= 0 rec_aggregate__r2__y__first__bit))

;; rec_aggregate__r2__y__last__bit_axiom
  (assert
  (< rec_aggregate__r2__y__first__bit rec_aggregate__r2__y__last__bit))

;; rec_aggregate__r2__y__position_axiom
  (assert (<= 0 rec_aggregate__r2__y__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((r2__ref (r2__refqtmk (r2__content us_rep)))))
(define-fun r2__ref_r2__content__projection ((a r2__ref)) us_rep (r2__content
                                                                 a))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__rec_aggregate__r3__x integer)(rec__rec_aggregate__r3__y integer)(rec__rec_aggregate__r3__z us_rep)))))
(define-fun us_split_fields_rec__rec_aggregate__r3__x__projection ((a us_split_fields2)) integer 
  (rec__rec_aggregate__r3__x a))

(define-fun us_split_fields_rec__rec_aggregate__r3__y__projection ((a us_split_fields2)) integer 
  (rec__rec_aggregate__r3__y a))

(define-fun us_split_fields_rec__rec_aggregate__r3__z__projection ((a us_split_fields2)) us_rep 
  (rec__rec_aggregate__r3__z a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__rec_aggregate__r3__x (us_split_fields3 a))) 
                         (to_rep
                         (rec__rec_aggregate__r3__x (us_split_fields3 b))))
                         (= (to_rep
                            (rec__rec_aggregate__r3__y (us_split_fields3 a))) 
                         (to_rep
                         (rec__rec_aggregate__r3__y (us_split_fields3 b)))))
                         (= (bool_eq
                            (rec__rec_aggregate__r3__z (us_split_fields3 a))
                            (rec__rec_aggregate__r3__z (us_split_fields3 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const rec_aggregate__r3__x__first__bit Int)

(declare-const rec_aggregate__r3__x__last__bit Int)

(declare-const rec_aggregate__r3__x__position Int)

;; rec_aggregate__r3__x__first__bit_axiom
  (assert (<= 0 rec_aggregate__r3__x__first__bit))

;; rec_aggregate__r3__x__last__bit_axiom
  (assert
  (< rec_aggregate__r3__x__first__bit rec_aggregate__r3__x__last__bit))

;; rec_aggregate__r3__x__position_axiom
  (assert (<= 0 rec_aggregate__r3__x__position))

(declare-const rec_aggregate__r3__y__first__bit Int)

(declare-const rec_aggregate__r3__y__last__bit Int)

(declare-const rec_aggregate__r3__y__position Int)

;; rec_aggregate__r3__y__first__bit_axiom
  (assert (<= 0 rec_aggregate__r3__y__first__bit))

;; rec_aggregate__r3__y__last__bit_axiom
  (assert
  (< rec_aggregate__r3__y__first__bit rec_aggregate__r3__y__last__bit))

;; rec_aggregate__r3__y__position_axiom
  (assert (<= 0 rec_aggregate__r3__y__position))

(declare-const rec_aggregate__r3__z__first__bit Int)

(declare-const rec_aggregate__r3__z__last__bit Int)

(declare-const rec_aggregate__r3__z__position Int)

;; rec_aggregate__r3__z__first__bit_axiom
  (assert (<= 0 rec_aggregate__r3__z__first__bit))

;; rec_aggregate__r3__z__last__bit_axiom
  (assert
  (< rec_aggregate__r3__z__first__bit rec_aggregate__r3__z__last__bit))

;; rec_aggregate__r3__z__position_axiom
  (assert (<= 0 rec_aggregate__r3__z__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-const dummy2 us_rep1)

(declare-datatypes () ((r3__ref (r3__refqtmk (r3__content us_rep1)))))
(define-fun r3__ref_r3__content__projection ((a r3__ref)) us_rep1 (r3__content
                                                                  a))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 2))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 1))

(declare-const one Int)

(declare-const r__split_fields us_split_fields2)

;; Assume
  (assert (dynamic_invariant one true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant b true false true true))

;; Assume
  (assert (= one 1))

(declare-const r__split_fields1 us_split_fields2)

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= b 1) true false)))

(declare-const spark__branch1 Bool)

(declare-const spark__branch2 Bool)

(declare-const spark__branch3 Bool)

(declare-const o integer)

(declare-const o1 integer)

(declare-const o2 integer)

(declare-const o3 integer)

(declare-const o4 integer)

(declare-const o5 integer)

(declare-const o6 integer)

(declare-const o7 integer)

(declare-const o8 integer)

(declare-const o9 integer)

(declare-const o10 integer)

(declare-const o11 integer)

(declare-const o12 integer)

;; H
  (assert
  (ite (= spark__branch true)
  (and (= (to_rep o11) one)
  (and (= (to_rep o12) one)
  (= r__split_fields1 (us_split_fieldsqtmk1 o12 rliteral
                      (us_repqtmk (us_split_fieldsqtmk o11 rliteral))))))
  (and (= spark__branch1 (ite (= b 2) true false))
  (ite (= spark__branch1 true)
  (and (= (to_rep o7) one)
  (and (= (to_rep o8) one)
  (and (= (to_rep o9) one)
  (and (= (to_rep o10) one)
  (= r__split_fields1 (us_split_fieldsqtmk1 o10 o9
                      (us_repqtmk (us_split_fieldsqtmk o8 o7))))))))
  (and (= spark__branch2 (ite (= b 3) true false))
  (ite (= spark__branch2 true)
  (and (= (to_rep o4) one)
  (and (= (to_rep o5) one)
  (and (= (to_rep o6) one)
  (= r__split_fields1 (us_split_fieldsqtmk1 o6 o5
                      (us_repqtmk (us_split_fieldsqtmk rliteral1 o4)))))))
  (and (= spark__branch3 (ite (= b 4) true false))
  (ite (= spark__branch3 true)
  (and (= (to_rep o2) one)
  (and (= (to_rep o3) one)
  (= r__split_fields1 (us_split_fieldsqtmk1 rliteral o3
                      (us_repqtmk (us_split_fieldsqtmk rliteral o2))))))
  (and (= (to_rep o) one)
  (and (= (to_rep o1) one)
  (= r__split_fields1 (us_split_fieldsqtmk1 o1 rliteral
                      (us_repqtmk (us_split_fieldsqtmk o rliteral))))))))))))))

;; H
  (assert (= b 1))

(assert
;; defqtvc
 ;; File "rec_aggregate.ads", line 45, characters 0-0
  (not
  (= (bool_eq1 (us_repqtmk1 r__split_fields1)
     (us_repqtmk1
     (us_split_fieldsqtmk1 (of_rep one) rliteral
     (us_repqtmk (us_split_fieldsqtmk (of_rep one) rliteral))))) true)))
(check-sat)
