;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort long_long_integer 0)

(declare-fun long_long_integerqtint (long_long_integer) Int)

;; long_long_integer'axiom
  (assert
  (forall ((i long_long_integer))
  (and (<= (- 9223372036854775808) (long_long_integerqtint i))
  (<= (long_long_integerqtint i) 9223372036854775807))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (long_long_integer long_long_integer) Bool)

(declare-const dummy1 long_long_integer)

(declare-datatypes ()
((long_long_integer__ref
 (long_long_integer__refqtmk (long_long_integer__content long_long_integer)))))
(define-fun long_long_integer__ref_long_long_integer__content__projection ((a long_long_integer__ref)) long_long_integer 
  (long_long_integer__content a))

(declare-fun pgcd (Int Int) Int)

(declare-fun pgcd__function_guard (Int Int Int) Bool)

;; pgcd__post_axiom
  (assert
  (forall ((a Int) (b Int))
  (! (=>
     (and
     (and (dynamic_invariant a true true true true) (dynamic_invariant b true
     true true true))
     (and (not (= a (- 2147483648))) (not (= b (- 2147483648)))))
     (let ((result (pgcd a b)))
     (=> (pgcd__function_guard result a b)
     (and
     (or (or (= result 0) (and (<= 1 result) (<= result (abs1 a))))
     (and (<= 1 result) (<= result (abs1 b)))) (dynamic_invariant result true
     false true true))))) :pattern ((pgcd a b)) )))

(declare-const a Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const b Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_32 Int) (temp___is_init_28 Bool)
  (temp___skip_constant_29 Bool) (temp___do_toplevel_30 Bool)
  (temp___do_typ_inv_31 Bool)) Bool (=>
                                    (or (= temp___is_init_28 true)
                                    (<= (- 9223372036854775808) 9223372036854775807))
                                    (in_range2 temp___expr_32)))

;; Assume
  (assert (dynamic_invariant a true false true true))

;; Assume
  (assert (dynamic_invariant b true false true true))

;; Assume
  (assert
  (and (not (= a (- 2147483648)))
  (and (not (= b (- 2147483648))) (<= (abs1 (* a b)) 2147483647))))

(define-fun o () Int b)

(define-fun o1 () Int a)

(define-fun o2 () Int (pgcd o1 o))

;; H
  (assert (pgcd__function_guard o2 o1 o))

;; H
  (assert (dynamic_invariant o2 true false true true))

;; H
  (assert
  (or (or (= o2 0) (and (<= 1 o2) (<= o2 (abs1 o1))))
  (and (<= 1 o2) (<= o2 (abs1 o)))))

(declare-const r Int)

;; H
  (assert (= r o2))

;; Assume
  (assert (dynamic_invariant r true false true true))

(declare-const r1 Int)

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= r 0) false true)))

;; H
  (assert
  (ite (= spark__branch true)
  (let ((o3 (* a b)))
  (and (in_range1 o3)
  (let ((o4 (div1 o3 r))) (and (in_range1 o4) (= r1 o4))))) (= r1 r)))

(define-fun o3 () Int (abs1 r1))

;; Ensures
  (assert (in_range1 o3))

(declare-const a__ppcm__result Int)

;; H
  (assert (= a__ppcm__result o3))

;; H
  (assert (not (= a__ppcm__result 0)))

(define-fun o4 () Int (* a b))

;; Ensures
  (assert (in_range1 o4))

(define-fun o5 () Int (abs1 o4))

;; Ensures
  (assert (in_range1 o5))

(assert
;; defqtvc
 ;; File "a.ads", line 11, characters 0-0
  (not (in_range1 (abs1 a))))
(check-sat)
