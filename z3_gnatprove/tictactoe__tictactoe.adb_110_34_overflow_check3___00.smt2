(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort slot 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (slot slot) Bool)

(declare-const dummy1 slot)

(declare-datatypes () ((slot__ref (slot__refqtmk (slot__content slot)))))
(define-fun slot__ref_slot__content__projection ((a slot__ref)) slot 
  (slot__content a))

(declare-fun to_rep1 (slot) Int)

(declare-fun of_rep1 (Int) slot)

;; inversion_axiom
  (assert
  (forall ((x slot)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x slot)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int slot))))))
(declare-fun slide ((Array Int slot) Int Int) (Array Int slot))

;; slide_eq
  (assert
  (forall ((a (Array Int slot)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int slot)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int slot)) (a__first Int) (a__last Int)
  (b (Array Int slot)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy2 (Array Int slot))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 ((Array Int slot) (Array Int slot)) Bool)

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int (Array Int slot)))))))
(declare-fun slide1 ((Array Int (Array Int slot)) Int
  Int) (Array Int (Array Int slot)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int (Array Int slot))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int slot))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155) 1 3
                              (select b (+ (- b__first a__first) temp___idx_155))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155) 1 3
     (select b (+ (- b__first a__first) temp___idx_155)) 1 3) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)

(declare-fun num_free_slots__function_guard (Int
  (Array Int (Array Int slot))) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (natural natural) Bool)

(declare-const dummy3 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range3
                                    temp___expr_39)))

(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)

(declare-fun count_free_slots__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; num_free_slots__post_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (let ((result (num_free_slots tictactoe__my_board)))
     (=> (num_free_slots__function_guard result tictactoe__my_board)
     (dynamic_invariant1 result true false true true))) :pattern ((num_free_slots
                                                                  tictactoe__my_board)) )))

;; num_free_slots__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (count_free_slots__function_guard
     (count_free_slots 3 3 tictactoe__my_board1) 3 3 tictactoe__my_board1))
     (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3
                                             tictactoe__my_board))) :pattern (
  (num_free_slots tictactoe__my_board)) )))

(declare-fun is_full ((Array Int (Array Int slot))) Bool)

(declare-fun is_full__function_guard (Bool
  (Array Int (Array Int slot))) Bool)

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (num_free_slots__function_guard (num_free_slots tictactoe__my_board1)
     tictactoe__my_board1))
     (= (= (is_full tictactoe__my_board) true)
     (= (num_free_slots tictactoe__my_board) 0))) :pattern ((is_full
                                                            tictactoe__my_board)) )))

(declare-sort pos 0)

(declare-fun posqtint (pos) Int)

;; pos'axiom
  (assert (forall ((i pos)) (and (<= 1 (posqtint i)) (<= (posqtint i) 3))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (pos pos) Bool)

(declare-const dummy4 pos)

(declare-datatypes () ((pos__ref (pos__refqtmk (pos__content pos)))))
(define-fun pos__ref_pos__content__projection ((a pos__ref)) pos (pos__content
                                                                 a))

(define-fun to_rep2 ((x pos)) Int (posqtint x))

(declare-fun of_rep2 (Int) pos)

;; inversion_axiom
  (assert
  (forall ((x pos)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x pos)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__tictactoe__position__x pos)(rec__tictactoe__position__y pos)))))
(define-fun us_split_fields_rec__tictactoe__position__x__projection ((a us_split_fields)) pos 
  (rec__tictactoe__position__x a))

(define-fun us_split_fields_rec__tictactoe__position__y__projection ((a us_split_fields)) pos 
  (rec__tictactoe__position__y a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__tictactoe__position__x (us_split_fields1 a))) 
                        (to_rep2
                        (rec__tictactoe__position__x (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__tictactoe__position__y (us_split_fields1 a))) 
                        (to_rep2
                        (rec__tictactoe__position__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const tictactoe__position__x__first__bit Int)

(declare-const tictactoe__position__x__last__bit Int)

(declare-const tictactoe__position__x__position Int)

;; tictactoe__position__x__first__bit_axiom
  (assert (<= 0 tictactoe__position__x__first__bit))

;; tictactoe__position__x__last__bit_axiom
  (assert
  (< tictactoe__position__x__first__bit tictactoe__position__x__last__bit))

;; tictactoe__position__x__position_axiom
  (assert (<= 0 tictactoe__position__x__position))

(declare-const tictactoe__position__y__first__bit Int)

(declare-const tictactoe__position__y__last__bit Int)

(declare-const tictactoe__position__y__position Int)

;; tictactoe__position__y__first__bit_axiom
  (assert (<= 0 tictactoe__position__y__first__bit))

;; tictactoe__position__y__last__bit_axiom
  (assert
  (< tictactoe__position__y__first__bit tictactoe__position__y__last__bit))

;; tictactoe__position__y__position_axiom
  (assert (<= 0 tictactoe__position__y__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((position__ref (position__refqtmk (position__content us_rep)))))
(define-fun position__ref_position__content__projection ((a position__ref)) us_rep 
  (position__content a))

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int us_rep))))))
(declare-fun slide2 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_163 Int))
                           (=>
                           (and (<= a__first temp___idx_163)
                           (<= temp___idx_163 a__last))
                           (= (bool_eq2 (select a temp___idx_163)
                              (select b (+ (- b__first a__first) temp___idx_163))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_163 Int))
  (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last))
  (= (bool_eq2 (select a temp___idx_163)
     (select b (+ (- b__first a__first) temp___idx_163))) true))))))))

(declare-const dummy6 (Array Int us_rep))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq6 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((map__ref3 (map__refqtmk3 (map__content3 (Array Int (Array Int us_rep)))))))
(declare-fun slide3 ((Array Int (Array Int us_rep)) Int
  Int) (Array Int (Array Int us_rep)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((first Int))
  (! (= (slide3 a first first) a) :pattern ((slide3 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int (Array Int us_rep))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int us_rep))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (bool_eq3 (select a temp___idx_164) 1 3
                              (select b (+ (- b__first a__first) temp___idx_164))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int us_rep)))
  (b (Array Int (Array Int us_rep))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (bool_eq3 (select a temp___idx_164) 1 3
     (select b (+ (- b__first a__first) temp___idx_164)) 1 3) true))))))))

(declare-fun won ((Array Int (Array Int us_rep))
  (Array Int (Array Int slot))) Int)

(declare-fun won__function_guard (Int (Array Int (Array Int us_rep))
  (Array Int (Array Int slot))) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 0 2)) (in_range2 temp___expr_171)))

;; won__post_axiom
  (assert
  (forall ((tictactoe__all_solutions (Array Int (Array Int us_rep))))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (let ((result (won tictactoe__all_solutions tictactoe__my_board)))
     (=> (won__function_guard result tictactoe__all_solutions
     tictactoe__my_board) (dynamic_invariant2 result true false true true))) :pattern (
  (won tictactoe__all_solutions tictactoe__my_board)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-datatypes ()
((map__ref4 (map__refqtmk4 (map__content4 (Array Int integer))))))
(declare-fun slide4 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide4 a first first) a) :pattern ((slide4 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_166 Int))
                           (=>
                           (and (<= a__first temp___idx_166)
                           (<= temp___idx_166 a__last))
                           (= (to_rep (select a temp___idx_166)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_166)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_166 Int))
  (=> (and (<= a__first temp___idx_166) (<= temp___idx_166 a__last))
  (= (to_rep (select a temp___idx_166)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_166)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun tictactoe__computer_play__target_scores__aggregate_def (Int
  Int) (Array Int integer))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 2))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 20))

;; def_axiom
  (assert
  (forall ((temp___520 Int) (temp___521 Int))
  (let ((temp___519 (tictactoe__computer_play__target_scores__aggregate_def
                    temp___520 temp___521)))
  (=>
  (and (dynamic_invariant temp___520 true true true true) (dynamic_invariant
  temp___521 true true true true))
  (and (= (select temp___519 1) rliteral)
  (= (select temp___519 2) rliteral1))))))

(define-fun dynamic_invariant3 ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 1 3)) (in_range4 temp___expr_178)))

(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)

(declare-fun one_free_slot__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; one_free_slot__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y
     true true true true))
     (let ((result (one_free_slot x y tictactoe__my_board)))
     (=> (one_free_slot__function_guard result x y tictactoe__my_board)
     (dynamic_invariant result true false true true)))) :pattern ((one_free_slot
                                                                  x y
                                                                  tictactoe__my_board)) ))))

;; one_free_slot__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y
     true true true true))
     (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep1
                                                        (let ((temp___209 (select tictactoe__my_board x)))
                                                        (select temp___209 y))) 0)
                                                1 0))) :pattern ((one_free_slot
                                                                 x y
                                                                 tictactoe__my_board)) ))))

;; count_free_slots__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y
     true true true true))
     (let ((result (count_free_slots x y tictactoe__my_board)))
     (=> (count_free_slots__function_guard result x y tictactoe__my_board)
     (dynamic_invariant result true false true true)))) :pattern ((count_free_slots
                                                                  x y
                                                                  tictactoe__my_board)) ))))

;; count_free_slots__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant3 x true true true true) (dynamic_invariant3 y
     true true true true))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 1 tictactoe__my_board1)
     1 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 2 tictactoe__my_board1)
     1 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 3 tictactoe__my_board1)
     1 3 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 1 tictactoe__my_board1)
     2 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 2 tictactoe__my_board1)
     2 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 3 tictactoe__my_board1)
     2 3 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 1 tictactoe__my_board1)
     3 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 2 tictactoe__my_board1)
     3 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 3 tictactoe__my_board1)
     3 3 tictactoe__my_board1))
     (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot
                                                               1 1
                                                               tictactoe__my_board) 
     (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y)
                                                               (one_free_slot
                                                               1 3
                                                               tictactoe__my_board)
                                                               0)) (ite (<= 2 x)
                                                                   (+ (+ 
                                                                   (one_free_slot
                                                                   2 1
                                                                   tictactoe__my_board) 
                                                                   (ite (<= 2 y)
                                                                   (one_free_slot
                                                                   2 2
                                                                   tictactoe__my_board)
                                                                   0)) 
                                                                   (ite (<= 3 y)
                                                                   (one_free_slot
                                                                   2 3
                                                                   tictactoe__my_board)
                                                                   0)) 0)) 
     (ite (<= 3 x)
     (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y)
                                                   (one_free_slot 3 2
                                                   tictactoe__my_board) 0)) 
     (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0))))))))))))) :pattern (
  (count_free_slots x y tictactoe__my_board)) ))))

(declare-const rliteral2 pos)

;; rliteral_axiom
  (assert (= (posqtint rliteral2) 1))

(declare-const my_board (Array Int (Array Int slot)))

(declare-const all_solutions (Array Int (Array Int us_rep)))

(declare-const score Int)

(declare-const c41b Int)

(declare-const my_board1 (Array Int (Array Int slot)))

;; H
  (assert (= my_board1 my_board))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; H
  (assert
  (forall ((my_board2 (Array Int (Array Int slot)))) (is_full__function_guard
  (is_full my_board2) my_board2)))

;; H
  (assert
  (forall ((my_board2 (Array Int (Array Int slot)))
  (all_solutions1 (Array Int (Array Int us_rep)))) (won__function_guard
  (won all_solutions1 my_board2) all_solutions1 my_board2)))

;; Assume
  (assert
  (and (not (= (is_full my_board) true)) (= (won all_solutions my_board) 0)))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant score false false true true))

(declare-const target_scores (Array Int integer))

;; H
  (assert
  (= target_scores (tictactoe__computer_play__target_scores__aggregate_def 2
                   20)))

(declare-const p__split_fields us_split_fields)

;; H
  (assert (= p__split_fields (us_split_fieldsqtmk rliteral2 rliteral2)))

;; Assume
  (assert true)

(declare-const found Bool)

;; H
  (assert (= found (distinct 0 0)))

(declare-const target_score Int)

;; H
  (assert (= target_score 1))

(declare-const c38b Int)

;; H
  (assert (= c38b 1))

(declare-const score1 Int)

;; H
  (assert (= score1 0))

(declare-const i Int)

;; H
  (assert (= i 1))

(declare-const p__split_fields1 us_split_fields)

;; H
  (assert
  (= p__split_fields1 (us_split_fields1
                      (select (select all_solutions c38b) i))))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep2 (rec__tictactoe__position__x p__split_fields1)) 
  o))

(declare-const o1 Int)

;; Ensures
  (assert (= (to_rep2 (rec__tictactoe__position__y p__split_fields1)) 
  o1))

(declare-const o2 Int)

;; Ensures
  (assert (= (to_rep1 (select (select my_board o) o1)) o2))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= o2 2) true false)))

;; H
  (assert (not (= spark__branch true)))

(declare-const o3 Int)

;; Ensures
  (assert (= (to_rep2 (rec__tictactoe__position__x p__split_fields1)) 
  o3))

(declare-const o4 Int)

;; Ensures
  (assert (= (to_rep2 (rec__tictactoe__position__y p__split_fields1)) 
  o4))

(declare-const o5 Int)

;; Ensures
  (assert (= (to_rep1 (select (select my_board o3) o4)) o5))

(declare-const spark__branch1 Bool)

;; H
  (assert (= spark__branch1 (ite (= o5 1) true false)))

;; H
  (assert (= spark__branch1 true))

(assert
;; defqtvc
 ;; File "tictactoe.ads", line 42, characters 0-0
  (not (in_range1 (+ score1 10))))
(check-sat)
