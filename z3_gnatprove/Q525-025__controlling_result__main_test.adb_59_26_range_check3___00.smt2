(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort long_integer 0)

(declare-fun long_integerqtint (long_integer) Int)

;; long_integer'axiom
  (assert
  (forall ((i long_integer))
  (and (<= (- 9223372036854775808) (long_integerqtint i))
  (<= (long_integerqtint i) 9223372036854775807))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (long_integer long_integer) Bool)

(declare-const dummy1 long_integer)

(declare-datatypes ()
((long_integer__ref
 (long_integer__refqtmk (long_integer__content long_integer)))))
(define-fun long_integer__ref_long_integer__content__projection ((a long_integer__ref)) long_integer 
  (long_integer__content a))

(define-fun dynamic_invariant1 ((temp___expr_25 Int) (temp___is_init_21 Bool)
  (temp___skip_constant_22 Bool) (temp___do_toplevel_23 Bool)
  (temp___do_typ_inv_24 Bool)) Bool (=>
                                    (or (= temp___is_init_21 true)
                                    (<= (- 9223372036854775808) 9223372036854775807))
                                    (in_range1 temp___expr_25)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (natural natural) Bool)

(declare-const dummy2 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (positive positive) Bool)

(declare-const dummy3 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (character character) Bool)

(declare-const dummy4 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (character Int (Array Int character) Int
  Int) (Array Int character))

;; concat_singleton_left_def
  (assert
  (forall ((a character))
  (forall ((b (Array Int character)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int character) Int Int
  character) (Array Int character))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((b character))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (character Int
  character) (Array Int character))

;; concat_singletons_def
  (assert
  (forall ((a character) (b character))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(define-fun to_rep2 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-const dummy6 (Array Int character))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq6 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__fixed_string__object__width natural)(rec__fixed_string__object__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__fixed_string__object__width__projection ((a us_split_fields)) natural 
  (rec__fixed_string__object__width a))

(define-fun us_split_fields_rec__fixed_string__object__name__projection ((a us_split_fields)) (Array Int character) 
  (rec__fixed_string__object__name a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep2
                           (rec__fixed_string__object__width
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__fixed_string__object__width
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__fixed_string__object__name
                           (us_split_fields1 a)) 1 20
                           (rec__fixed_string__object__name
                           (us_split_fields1 b)) 1 20) true))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const fixed_string__object__width__first__bit Int)

(declare-const fixed_string__object__width__last__bit Int)

(declare-const fixed_string__object__width__position Int)

;; fixed_string__object__width__first__bit_axiom
  (assert (<= 0 fixed_string__object__width__first__bit))

;; fixed_string__object__width__last__bit_axiom
  (assert
  (< fixed_string__object__width__first__bit fixed_string__object__width__last__bit))

;; fixed_string__object__width__position_axiom
  (assert (<= 0 fixed_string__object__width__position))

(declare-const fixed_string__object__name__first__bit Int)

(declare-const fixed_string__object__name__last__bit Int)

(declare-const fixed_string__object__name__position Int)

;; fixed_string__object__name__first__bit_axiom
  (assert (<= 0 fixed_string__object__name__first__bit))

;; fixed_string__object__name__last__bit_axiom
  (assert
  (< fixed_string__object__name__first__bit fixed_string__object__name__last__bit))

;; fixed_string__object__name__position_axiom
  (assert (<= 0 fixed_string__object__name__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ()
((object__ref (object__refqtmk (object__content us_rep)))))
(define-fun object__ref_object__content__projection ((a object__ref)) us_rep 
  (object__content a))

(declare-fun elements (us_rep) Int)

(declare-fun elements__function_guard (Int us_rep) Bool)

(declare-fun elements1 (Int us_rep) Int)

(declare-fun elements__function_guard1 (Int Int us_rep) Bool)

(declare-fun temp_____aggregate_def_193 (Int) (Array Int character))

(define-fun default_initial_assumption ((temp___expr_191 us_rep)
  (temp___skip_top_level_192 Bool)) Bool (and
                                         (= (attr__tag temp___expr_191) 
                                         us_tag)
                                         (and
                                         (= (to_rep2
                                            (rec__fixed_string__object__width
                                            (us_split_fields1
                                            temp___expr_191))) 0)
                                         (= (rec__fixed_string__object__name
                                            (us_split_fields1
                                            temp___expr_191)) (temp_____aggregate_def_193
                                                              0)))))

;; elements__post_axiom
  (assert
  (forall ((this us_rep))
  (! (let ((result (elements this)))
     (=> (elements__function_guard result this) (dynamic_invariant2 result
     true false true true))) :pattern ((elements this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((this us_rep))
  (! (let ((result (elements1 attr__tag1 this)))
     (=> (elements__function_guard1 result attr__tag1 this)
     (dynamic_invariant2 result true false true true))) :pattern ((elements1
                                                                  attr__tag1
                                                                  this)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (=> (elements__function_guard1 (elements1 us_tag this) us_tag this)
     (and
     (forall ((this1 us_rep)) (elements__function_guard (elements this1)
     this1)) (= (elements this) (elements1 us_tag this)))) :pattern (
  (elements1 us_tag this)) )))

(define-fun dynamic_invariant3 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-fun create (Int us_t) us_rep)

(declare-fun create__function_guard (us_rep Int us_t) Bool)

(declare-fun create1 (Int Int us_t) us_rep)

(declare-fun create__function_guard1 (us_rep Int Int us_t) Bool)

;; create__post_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true true)
     (dynamic_invariant3 name true true true true))
     (let ((result (create elem_width name)))
     (and
     (forall ((result1 us_rep)) (elements__function_guard (elements result1)
     result1))
     (=> (create__function_guard result elem_width name)
     (and (= (elements result) elem_width) (= (attr__tag result) us_tag)))))) :pattern (
  (create elem_width name)) ))))

;; create__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int) (elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true true)
     (dynamic_invariant3 name true true true true))
     (let ((result (create1 attr__tag1 elem_width name)))
     (=> (create__function_guard1 result attr__tag1 elem_width name)
     (= (attr__tag result) attr__tag1)))) :pattern ((create1 attr__tag1
                                                    elem_width name)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (=> (create__function_guard1 (create1 us_tag elem_width name) us_tag
     elem_width name)
     (and
     (forall ((elem_width1 Int) (name1 us_t)) (create__function_guard
     (create elem_width1 name1) elem_width1 name1))
     (= (create elem_width name) (create1 us_tag elem_width name)))) :pattern (
  (create1 us_tag elem_width name)) ))))

(declare-const field_10__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const field_06__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const dummy8 (Array Int character))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq8 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__fixed_stream__object__width natural)(rec__fixed_stream__object__name (Array Int character))(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__fixed_stream__object__width__projection ((a us_split_fields2)) natural 
  (rec__fixed_stream__object__width a))

(define-fun us_split_fields_rec__fixed_stream__object__name__projection ((a us_split_fields2)) (Array Int character) 
  (rec__fixed_stream__object__name a))

(define-fun us_split_fields_rec__ext____2__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__2__projection ((a us_rep1)) Int (attr__tag1 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep2
                            (rec__fixed_stream__object__width
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__fixed_stream__object__width
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__fixed_stream__object__name
                            (us_split_fields3 a)) 1 20
                            (rec__fixed_stream__object__name
                            (us_split_fields3 b)) 1 20) true))
                    true false))

(declare-fun us_dispatch_eq1 (us_rep1 us_rep1) Bool)

(declare-const us_tag1 Int)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const fixed_stream__object__width__first__bit Int)

(declare-const fixed_stream__object__width__last__bit Int)

(declare-const fixed_stream__object__width__position Int)

;; fixed_stream__object__width__first__bit_axiom
  (assert (<= 0 fixed_stream__object__width__first__bit))

;; fixed_stream__object__width__last__bit_axiom
  (assert
  (< fixed_stream__object__width__first__bit fixed_stream__object__width__last__bit))

;; fixed_stream__object__width__position_axiom
  (assert (<= 0 fixed_stream__object__width__position))

(declare-const fixed_stream__object__name__first__bit Int)

(declare-const fixed_stream__object__name__last__bit Int)

(declare-const fixed_stream__object__name__position Int)

;; fixed_stream__object__name__first__bit_axiom
  (assert (<= 0 fixed_stream__object__name__first__bit))

;; fixed_stream__object__name__last__bit_axiom
  (assert
  (< fixed_stream__object__name__first__bit fixed_stream__object__name__last__bit))

;; fixed_stream__object__name__position_axiom
  (assert (<= 0 fixed_stream__object__name__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-const dummy9 us_rep1)

(declare-datatypes ()
((object__ref1 (object__refqtmk1 (object__content1 us_rep1)))))
(define-fun object__ref_object__content__2__projection ((a object__ref1)) us_rep1 
  (object__content1 a))

(declare-fun elements2 (us_rep1) Int)

(declare-fun elements__function_guard2 (Int us_rep1) Bool)

(declare-fun elements3 (Int us_rep1) Int)

(declare-fun elements__function_guard3 (Int Int us_rep1) Bool)

(declare-fun temp_____aggregate_def_215 (Int) (Array Int character))

(define-fun default_initial_assumption1 ((temp___expr_213 us_rep1)
  (temp___skip_top_level_214 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_213) 
                                         us_tag1)
                                         (and
                                         (= (to_rep2
                                            (rec__fixed_stream__object__width
                                            (us_split_fields3
                                            temp___expr_213))) 0)
                                         (= (rec__fixed_stream__object__name
                                            (us_split_fields3
                                            temp___expr_213)) (temp_____aggregate_def_215
                                                              0)))))

;; elements__post_axiom
  (assert
  (forall ((this us_rep1))
  (! (let ((result (elements2 this)))
     (=> (elements__function_guard2 result this) (dynamic_invariant2 result
     true false true true))) :pattern ((elements2 this)) )))

;; elements__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep1))
  (! (let ((result (elements3 attr__tag2 this)))
     (=> (elements__function_guard3 result attr__tag2 this)
     (dynamic_invariant2 result true false true true))) :pattern ((elements3
                                                                  attr__tag2
                                                                  this)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep1))
  (! (=> (elements__function_guard3 (elements3 us_tag1 this) us_tag1 this)
     (and
     (forall ((this1 us_rep1)) (elements__function_guard2 (elements2 this1)
     this1)) (= (elements2 this) (elements3 us_tag1 this)))) :pattern (
  (elements3 us_tag1 this)) )))

(declare-fun create2 (Int us_t) us_rep1)

(declare-fun create__function_guard2 (us_rep1 Int us_t) Bool)

(declare-fun create3 (Int Int us_t) us_rep1)

(declare-fun create__function_guard3 (us_rep1 Int Int us_t) Bool)

;; create__post_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true true)
     (dynamic_invariant3 name true true true true))
     (let ((result (create2 elem_width name)))
     (and
     (forall ((result1 us_rep1)) (elements__function_guard2
     (elements2 result1) result1))
     (=> (create__function_guard2 result elem_width name)
     (and (= (elements2 result) elem_width) (= (attr__tag1 result) us_tag1)))))) :pattern (
  (create2 elem_width name)) ))))

;; create__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int) (elem_width Int))
  (forall ((name us_t))
  (! (=>
     (and (dynamic_invariant2 elem_width true true true true)
     (dynamic_invariant3 name true true true true))
     (let ((result (create3 attr__tag2 elem_width name)))
     (=> (create__function_guard3 result attr__tag2 elem_width name)
     (= (attr__tag1 result) attr__tag2)))) :pattern ((create3 attr__tag2
                                                     elem_width name)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((elem_width Int))
  (forall ((name us_t))
  (! (=> (create__function_guard3 (create3 us_tag1 elem_width name) us_tag1
     elem_width name)
     (and
     (forall ((elem_width1 Int) (name1 us_t)) (create__function_guard2
     (create2 elem_width1 name1) elem_width1 name1))
     (= (create2 elem_width name) (create3 us_tag1 elem_width name)))) :pattern (
  (create3 us_tag1 elem_width name)) ))))

(declare-const stream_10__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const stream_06__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-fun null_string (us_rep) us_t)

(declare-fun null_string__function_guard (us_t us_rep) Bool)

(declare-fun null_string1 (Int us_rep) us_t)

(declare-fun null_string__function_guard1 (us_t Int us_rep) Bool)

;; null_string__post_axiom
  (assert
  (forall ((this us_rep))
  (! (let ((result (null_string this)))
     (and
     (forall ((this1 us_rep)) (elements__function_guard (elements this1)
     this1))
     (=> (null_string__function_guard result this)
     (and (= (length1 result) (elements this)) (dynamic_invariant3 result
     true false true true))))) :pattern ((null_string this)) )))

;; null_string__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep))
  (! (let ((result (null_string1 attr__tag2 this)))
     (=> (null_string__function_guard1 result attr__tag2 this)
     (dynamic_invariant3 result true false true true))) :pattern ((null_string1
                                                                  attr__tag2
                                                                  this)) ))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (! (=> (null_string__function_guard1 (null_string1 us_tag this) us_tag
     this)
     (and
     (forall ((this1 us_rep)) (null_string__function_guard
     (null_string this1) this1))
     (= (null_string this) (null_string1 us_tag this)))) :pattern ((null_string1
                                                                   us_tag
                                                                   this)) )))

(declare-const total_string__first integer)

(declare-const total_string__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-sort tstream_element_offsetB 0)

(declare-fun tstream_element_offsetBqtint (tstream_element_offsetB) Int)

;; tstream_element_offsetB'axiom
  (assert
  (forall ((i tstream_element_offsetB))
  (and (<= (- 9223372036854775808) (tstream_element_offsetBqtint i))
  (<= (tstream_element_offsetBqtint i) 9223372036854775807))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq10 (tstream_element_offsetB
  tstream_element_offsetB) Bool)

(declare-const dummy10 tstream_element_offsetB)

(declare-datatypes ()
((tstream_element_offsetB__ref
 (tstream_element_offsetB__refqtmk
 (tstream_element_offsetB__content tstream_element_offsetB)))))
(define-fun tstream_element_offsetB__ref_tstream_element_offsetB__content__projection ((a tstream_element_offsetB__ref)) tstream_element_offsetB 
  (tstream_element_offsetB__content a))

(define-fun to_rep3 ((x tstream_element_offsetB)) Int (tstream_element_offsetBqtint
                                                      x))

(declare-fun of_rep3 (Int) tstream_element_offsetB)

;; inversion_axiom
  (assert
  (forall ((x tstream_element_offsetB))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x tstream_element_offsetB)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort stream_element_offset 0)

(declare-fun stream_element_offsetqtint (stream_element_offset) Int)

;; stream_element_offset'axiom
  (assert
  (forall ((i stream_element_offset))
  (and (<= (- 9223372036854775808) (stream_element_offsetqtint i))
  (<= (stream_element_offsetqtint i) 9223372036854775807))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq11 (stream_element_offset stream_element_offset) Bool)

(declare-const dummy11 stream_element_offset)

(declare-datatypes ()
((stream_element_offset__ref
 (stream_element_offset__refqtmk
 (stream_element_offset__content stream_element_offset)))))
(define-fun stream_element_offset__ref_stream_element_offset__content__projection ((a stream_element_offset__ref)) stream_element_offset 
  (stream_element_offset__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort stream_element 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq12 (stream_element stream_element) Bool)

(declare-const dummy12 stream_element)

(declare-datatypes ()
((stream_element__ref
 (stream_element__refqtmk (stream_element__content stream_element)))))
(define-fun stream_element__ref_stream_element__content__projection ((a stream_element__ref)) stream_element 
  (stream_element__content a))

(declare-fun to_rep4 (stream_element) (_ BitVec 8))

(declare-fun of_rep4 ((_ BitVec 8)) stream_element)

;; inversion_axiom
  (assert
  (forall ((x stream_element))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep4 (of_rep4 x)) x) :pattern ((to_rep4 (of_rep4 x))) )))

(define-fun to_int2 ((x stream_element)) Int (bv2int (to_rep4 x)))

;; range_int_axiom
  (assert
  (forall ((x stream_element)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int stream_element))))))
(declare-fun slide1 ((Array Int stream_element) Int
  Int) (Array Int stream_element))

;; slide_eq
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int stream_element)) (a__first Int)
  (a__last Int) (b (Array Int stream_element)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_159 Int))
                           (=>
                           (and (<= a__first temp___idx_159)
                           (<= temp___idx_159 a__last))
                           (= (to_rep4 (select a temp___idx_159)) (to_rep4
                                                                  (select b (+ (- b__first a__first) temp___idx_159)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_159 Int))
  (=> (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last))
  (= (to_rep4 (select a temp___idx_159)) (to_rep4
                                         (select b (+ (- b__first a__first) temp___idx_159)))))))))))

(declare-sort t1 0)

(declare-fun first2 (t1) tstream_element_offsetB)

(declare-fun last2 (t1) tstream_element_offsetB)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range5 f)
     (=> (in_range5 l)
     (and (= (to_rep3 (first2 (mk1 f l))) f)
     (= (to_rep3 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range5 low)
                   (and (in_range5 high)
                   (=> (<= low high) (and (in_range6 low) (in_range6 high))))))

(declare-datatypes ()
((us_t1 (us_tqtmk1 (elts1 (Array Int stream_element))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int stream_element) (elts1 a))

(define-fun of_array1 ((a (Array Int stream_element)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep3 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep3 (last2 (rt1 a))))

(define-fun length2 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size3 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; component__size_axiom
  (assert (<= 0 component__size3))

;; alignment_axiom
  (assert (<= 0 alignment5))

(define-fun bool_eq5 ((x us_t1)
  (y us_t1)) Bool (bool_eq4 (elts1 x) (to_rep3 (first2 (rt1 x)))
                  (to_rep3 (last2 (rt1 x))) (elts1 y)
                  (to_rep3 (first2 (rt1 y))) (to_rep3 (last2 (rt1 y)))))

(declare-fun user_eq13 (us_t1 us_t1) Bool)

(declare-const dummy13 us_t1)

(declare-datatypes ()
((stream_element_array__ref
 (stream_element_array__refqtmk (stream_element_array__content us_t1)))))
(define-fun stream_element_array__ref_stream_element_array__content__projection ((a stream_element_array__ref)) us_t1 
  (stream_element_array__content a))

(declare-fun null_string2 (us_rep1) us_t1)

(declare-fun null_string__function_guard2 (us_t1 us_rep1) Bool)

(declare-fun null_string3 (Int us_rep1) us_t1)

(declare-fun null_string__function_guard3 (us_t1 Int us_rep1) Bool)

(define-fun dynamic_invariant4 ((temp___expr_274 us_t1)
  (temp___is_init_270 Bool) (temp___skip_constant_271 Bool)
  (temp___do_toplevel_272 Bool)
  (temp___do_typ_inv_273 Bool)) Bool (=>
                                     (not (= temp___skip_constant_271 true))
                                     (dynamic_property1
                                     (- 9223372036854775808)
                                     9223372036854775807
                                     (first3 temp___expr_274)
                                     (last3 temp___expr_274))))

;; null_string__post_axiom
  (assert
  (forall ((this us_rep1))
  (! (let ((result (null_string2 this)))
     (and
     (forall ((this1 us_rep1)) (elements__function_guard2 (elements2 this1)
     this1))
     (=> (null_string__function_guard2 result this)
     (and (= (length2 result) (elements2 this)) (dynamic_invariant4 result
     true false true true))))) :pattern ((null_string2 this)) )))

;; null_string__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep1))
  (! (let ((result (null_string3 attr__tag2 this)))
     (=> (null_string__function_guard3 result attr__tag2 this)
     (dynamic_invariant4 result true false true true))) :pattern ((null_string3
                                                                  attr__tag2
                                                                  this)) ))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep1))
  (! (=> (null_string__function_guard3 (null_string3 us_tag1 this) us_tag1
     this)
     (and
     (forall ((this1 us_rep1)) (null_string__function_guard2
     (null_string2 this1) this1))
     (= (null_string2 this) (null_string3 us_tag1 this)))) :pattern (
  (null_string3 us_tag1 this)) )))

(declare-const total_stream__first tstream_element_offsetB)

(declare-const total_stream__last tstream_element_offsetB)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-fun convert (us_rep us_t) us_t)

(declare-fun convert__function_guard (us_t us_rep us_t) Bool)

(declare-fun convert1 (Int us_rep us_t) us_t)

(declare-fun convert__function_guard1 (us_t Int us_rep us_t) Bool)

;; convert__post_axiom
  (assert
  (forall ((this us_rep))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true true)
     (let ((result (convert this in_string)))
     (and
     (forall ((this1 us_rep)) (elements__function_guard (elements this1)
     this1))
     (=> (convert__function_guard result this in_string)
     (and (= (length1 result) (elements this)) (dynamic_invariant3 result
     true false true true)))))) :pattern ((convert this in_string)) ))))

;; convert__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true true)
     (let ((result (convert1 attr__tag2 this in_string)))
     (=> (convert__function_guard1 result attr__tag2 this in_string)
     (dynamic_invariant3 result true false true true)))) :pattern ((convert1
                                                                   attr__tag2
                                                                   this
                                                                   in_string)) )))))

;; fixed_string__object__compat_axiom
  (assert
  (forall ((this us_rep))
  (forall ((in_string us_t))
  (! (=> (convert__function_guard1 (convert1 us_tag this in_string) us_tag
     this in_string)
     (and
     (forall ((this1 us_rep) (in_string1 us_t)) (convert__function_guard
     (convert this1 in_string1) this1 in_string1))
     (= (convert this in_string) (convert1 us_tag this in_string)))) :pattern (
  (convert1 us_tag this in_string)) ))))

(declare-fun convert2 (us_rep1 us_t) us_t1)

(declare-fun convert__function_guard2 (us_t1 us_rep1 us_t) Bool)

(declare-fun convert3 (Int us_rep1 us_t) us_t1)

(declare-fun convert__function_guard3 (us_t1 Int us_rep1 us_t) Bool)

;; convert__post_axiom
  (assert
  (forall ((this us_rep1))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true true)
     (let ((result (convert2 this in_string)))
     (and
     (forall ((this1 us_rep1)) (elements__function_guard2 (elements2 this1)
     this1))
     (=> (convert__function_guard2 result this in_string)
     (and (= (length2 result) (elements2 this)) (dynamic_invariant4 result
     true false true true)))))) :pattern ((convert2 this in_string)) ))))

;; convert__post__dispatch_axiom
  (assert
  (forall ((attr__tag2 Int))
  (forall ((this us_rep1))
  (forall ((in_string us_t))
  (! (=> (dynamic_invariant3 in_string true true true true)
     (let ((result (convert3 attr__tag2 this in_string)))
     (=> (convert__function_guard3 result attr__tag2 this in_string)
     (dynamic_invariant4 result true false true true)))) :pattern ((convert3
                                                                   attr__tag2
                                                                   this
                                                                   in_string)) )))))

;; fixed_stream__object__compat_axiom
  (assert
  (forall ((this us_rep1))
  (forall ((in_string us_t))
  (! (=> (convert__function_guard3 (convert3 us_tag1 this in_string) 
     us_tag1 this in_string)
     (and
     (forall ((this1 us_rep1) (in_string1 us_t)) (convert__function_guard2
     (convert2 this1 in_string1) this1 in_string1))
     (= (convert2 this in_string) (convert3 us_tag1 this in_string)))) :pattern (
  (convert3 us_tag1 this in_string)) ))))

(declare-sort tTref_stringSP1 0)

(declare-fun tTref_stringSP1qtint (tTref_stringSP1) Int)

;; tTref_stringSP1'axiom
  (assert
  (forall ((i tTref_stringSP1))
  (and (<= 1 (tTref_stringSP1qtint i)) (<= (tTref_stringSP1qtint i) 12))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 12)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq14 (tTref_stringSP1 tTref_stringSP1) Bool)

(declare-const dummy14 tTref_stringSP1)

(declare-datatypes ()
((tTref_stringSP1__ref
 (tTref_stringSP1__refqtmk (tTref_stringSP1__content tTref_stringSP1)))))
(define-fun tTref_stringSP1__ref_tTref_stringSP1__content__projection ((a tTref_stringSP1__ref)) tTref_stringSP1 
  (tTref_stringSP1__content a))

(declare-sort tTshort_stringSP1 0)

(declare-fun tTshort_stringSP1qtint (tTshort_stringSP1) Int)

;; tTshort_stringSP1'axiom
  (assert
  (forall ((i tTshort_stringSP1))
  (and (<= 1 (tTshort_stringSP1qtint i)) (<= (tTshort_stringSP1qtint i) 3))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq15 (tTshort_stringSP1 tTshort_stringSP1) Bool)

(declare-const dummy15 tTshort_stringSP1)

(declare-datatypes ()
((tTshort_stringSP1__ref
 (tTshort_stringSP1__refqtmk (tTshort_stringSP1__content tTshort_stringSP1)))))
(define-fun tTshort_stringSP1__ref_tTshort_stringSP1__content__projection ((a tTshort_stringSP1__ref)) tTshort_stringSP1 
  (tTshort_stringSP1__content a))

(declare-fun concat2 ((Array Int stream_element) Int Int
  (Array Int stream_element) Int Int) (Array Int stream_element))

;; concat_def
  (assert
  (forall ((a (Array Int stream_element)) (b (Array Int stream_element)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat2 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat2 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left1 (stream_element Int
  (Array Int stream_element) Int Int) (Array Int stream_element))

;; concat_singleton_left_def
  (assert
  (forall ((a stream_element))
  (forall ((b (Array Int stream_element)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left1 a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left1 a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left1 a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left1 a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right1 ((Array Int stream_element) Int Int
  stream_element) (Array Int stream_element))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int stream_element)))
  (forall ((b stream_element))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right1 a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right1 a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right1 a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right1 a a_first a_last b)) )))))

(declare-fun concat_singletons1 (stream_element Int
  stream_element) (Array Int stream_element))

;; concat_singletons_def
  (assert
  (forall ((a stream_element) (b stream_element))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons1 a a_first b) a_first) a)
     (= (select (concat_singletons1 a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons1 a a_first b)) ))))

(declare-fun singleton2 (stream_element Int) (Array Int stream_element))

;; singleton_def
  (assert
  (forall ((v stream_element))
  (forall ((i Int))
  (! (= (select (singleton2 v i) i) v) :pattern ((select (singleton2 v i) i)) ))))

(declare-fun temp___String_Literal_304 (tuple0) (Array Int character))

;; temp___String_Literal_304__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_304 us_void_param) 1)) 76)
     (= (to_rep (select (temp___String_Literal_304 us_void_param) 2)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_304 us_void_param) 3)) 110)
     (= (to_rep (select (temp___String_Literal_304 us_void_param) 4)) 103))) :pattern (
  (temp___String_Literal_304 us_void_param)) )))

(declare-fun temp___String_Literal_305 (tuple0) (Array Int character))

;; temp___String_Literal_305__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 2)) 104))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 3)) 111)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 5)) 116))) :pattern (
  (temp___String_Literal_305 us_void_param)) )))

(declare-fun temp___String_Literal_306 (tuple0) (Array Int character))

;; temp___String_Literal_306__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 1)) 76)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 2)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 3)) 110)
     (= (to_rep (select (temp___String_Literal_306 us_void_param) 4)) 103))) :pattern (
  (temp___String_Literal_306 us_void_param)) )))

(declare-fun temp___String_Literal_307 (tuple0) (Array Int character))

;; temp___String_Literal_307__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 1)) 83)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 2)) 104))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 3)) 111)
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 4)) 114))
     (= (to_rep (select (temp___String_Literal_307 us_void_param) 5)) 116))) :pattern (
  (temp___String_Literal_307 us_void_param)) )))

(declare-fun temp___String_Literal_308 (tuple0) (Array Int character))

;; temp___String_Literal_308__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 1)) 97)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 2)) 98))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 3)) 99)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 4)) 100))
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 5)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 6)) 102)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 7)) 103)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 8)) 104)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 9)) 105))
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 10)) 106))
     (and
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 11)) 107)
     (= (to_rep (select (temp___String_Literal_308 us_void_param) 12)) 108))))) :pattern (
  (temp___String_Literal_308 us_void_param)) )))

(declare-fun temp___String_Literal_309 (tuple0) (Array Int character))

;; temp___String_Literal_309__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_309 us_void_param) 1)) 102)
     (= (to_rep (select (temp___String_Literal_309 us_void_param) 2)) 111))
     (= (to_rep (select (temp___String_Literal_309 us_void_param) 3)) 111)) :pattern (
  (temp___String_Literal_309 us_void_param)) )))

(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(define-fun dynamic_invariant7 ((temp___expr_267 (_ BitVec 8))
  (temp___is_init_263 Bool) (temp___skip_constant_264 Bool)
  (temp___do_toplevel_265 Bool) (temp___do_typ_inv_266 Bool)) Bool true)

(define-fun dynamic_invariant8 ((temp___expr_260 Int)
  (temp___is_init_256 Bool) (temp___skip_constant_257 Bool)
  (temp___do_toplevel_258 Bool)
  (temp___do_typ_inv_259 Bool)) Bool (=>
                                     (or (= temp___is_init_256 true)
                                     (<= (- 9223372036854775808) 9223372036854775807))
                                     (in_range6 temp___expr_260)))

;; def_axiom
  (assert
  (forall ((temp___195 Int))
  (=> (dynamic_invariant6 temp___195 true true true true)
  (forall ((temp___196 Int))
  (= (to_rep (select (temp_____aggregate_def_193 temp___195) temp___196)) temp___195)))))

;; def_axiom
  (assert
  (forall ((temp___217 Int))
  (=> (dynamic_invariant6 temp___217 true true true true)
  (forall ((temp___218 Int))
  (= (to_rep (select (temp_____aggregate_def_215 temp___217) temp___218)) temp___217)))))

(declare-const len_n Int)

(declare-const len_i Int)

(declare-const len_l Int)

(declare-const total_len Int)

(define-fun o () us_t (of_array (temp___String_Literal_304 Tuple0) 1 4))

(define-fun main_test__field_10__assume () us_rep (create 10 o))

;; H
  (assert
  (forall ((main_test__field_10__assume1 us_rep)) (elements__function_guard
  (elements main_test__field_10__assume1) main_test__field_10__assume1)))

;; H
  (assert (create__function_guard main_test__field_10__assume 10 o))

;; H
  (assert true)

;; H
  (assert (= (elements main_test__field_10__assume) 10))

(declare-const field_10__split_fields us_split_fields)

;; H
  (assert
  (= field_10__split_fields (us_split_fields1 main_test__field_10__assume)))

;; Assume
  (assert (= field_10__attr__tag us_tag))

;; Assume
  (assert true)

(define-fun o1 () us_t (of_array (temp___String_Literal_305 Tuple0) 1 5))

(define-fun main_test__field_06__assume () us_rep (create 6 o1))

;; H
  (assert
  (forall ((main_test__field_06__assume1 us_rep)) (elements__function_guard
  (elements main_test__field_06__assume1) main_test__field_06__assume1)))

;; H
  (assert (create__function_guard main_test__field_06__assume 6 o1))

;; H
  (assert true)

;; H
  (assert (= (elements main_test__field_06__assume) 6))

(declare-const field_06__split_fields us_split_fields)

;; H
  (assert
  (= field_06__split_fields (us_split_fields1 main_test__field_06__assume)))

;; Assume
  (assert (= field_06__attr__tag us_tag))

;; Assume
  (assert true)

(define-fun o2 () us_t (of_array (temp___String_Literal_306 Tuple0) 1 4))

(define-fun main_test__stream_10__assume () us_rep1 (create2 10 o2))

;; H
  (assert
  (forall ((main_test__stream_10__assume1 us_rep1))
  (elements__function_guard2 (elements2 main_test__stream_10__assume1)
  main_test__stream_10__assume1)))

;; H
  (assert (create__function_guard2 main_test__stream_10__assume 10 o2))

;; H
  (assert true)

;; H
  (assert (= (elements2 main_test__stream_10__assume) 10))

(declare-const stream_10__split_fields us_split_fields2)

;; H
  (assert
  (= stream_10__split_fields (us_split_fields3 main_test__stream_10__assume)))

;; Assume
  (assert (= stream_10__attr__tag us_tag1))

;; Assume
  (assert true)

(define-fun o3 () us_t (of_array (temp___String_Literal_307 Tuple0) 1 5))

(define-fun main_test__stream_06__assume () us_rep1 (create2 6 o3))

;; H
  (assert
  (forall ((main_test__stream_06__assume1 us_rep1))
  (elements__function_guard2 (elements2 main_test__stream_06__assume1)
  main_test__stream_06__assume1)))

;; H
  (assert (create__function_guard2 main_test__stream_06__assume 6 o3))

;; H
  (assert true)

;; H
  (assert (= (elements2 main_test__stream_06__assume) 6))

(declare-const stream_06__split_fields us_split_fields2)

;; H
  (assert
  (= stream_06__split_fields (us_split_fields3 main_test__stream_06__assume)))

;; Assume
  (assert (= stream_06__attr__tag us_tag1))

;; Assume
  (assert true)

(declare-const ref_string (Array Int character))

;; H
  (assert (= ref_string (temp___String_Literal_308 Tuple0)))

;; Assume
  (assert true)

(declare-const short_string (Array Int character))

;; H
  (assert (= short_string (temp___String_Literal_309 Tuple0)))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 len_n false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant len_i false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 len_l false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 total_len false false true true))

(declare-const main_test__total_string__assume us_t)

;; H
  (assert (forall ((o4 us_rep)) (elements__function_guard (elements o4) o4)))

;; H
  (assert (forall ((o4 us_rep)) (elements__function_guard (elements o4) o4)))

;; H
  (assert
  (let ((o4 (us_repqtmk field_06__split_fields field_06__attr__tag)))
  (null_string__function_guard (null_string o4) o4)))

;; H
  (assert (dynamic_invariant3
  (null_string (us_repqtmk field_06__split_fields field_06__attr__tag)) true
  false true true))

;; H
  (assert
  (let ((o4 (us_repqtmk field_06__split_fields field_06__attr__tag)))
  (= (length1 (null_string o4)) (elements o4))))

;; H
  (assert
  (let ((o4 (us_repqtmk field_10__split_fields field_10__attr__tag)))
  (null_string__function_guard (null_string o4) o4)))

;; H
  (assert (dynamic_invariant3
  (null_string (us_repqtmk field_10__split_fields field_10__attr__tag)) true
  false true true))

;; H
  (assert
  (let ((o4 (us_repqtmk field_10__split_fields field_10__attr__tag)))
  (= (length1 (null_string o4)) (elements o4))))

;; H
  (assert
  (let ((temp___311 (null_string
                    (us_repqtmk field_06__split_fields field_06__attr__tag))))
  (let ((temp___310 (null_string
                    (us_repqtmk field_10__split_fields field_10__attr__tag))))
  (ite (= (length1 temp___310) 0)
  (= main_test__total_string__assume (of_array (to_array temp___311)
                                     (first1 temp___311) (last1 temp___311)))
  (let ((o4 (- (+ (first1 temp___310) (+ (length (first1 temp___310)
                                         (last1 temp___310)) (length
                                                             (first1
                                                             temp___311)
                                                             (last1
                                                             temp___311)))) 1)))
  (and (in_range3 o4)
  (= main_test__total_string__assume (of_array
                                     (concat1 (to_array temp___310)
                                     (first1 temp___310) (last1 temp___310)
                                     (to_array temp___311)
                                     (first1 temp___311) (last1 temp___311))
                                     (first1 temp___310) o4))))))))

(declare-const total_string (Array Int character))

;; H
  (assert (= total_string (to_array main_test__total_string__assume)))

;; Assume
  (assert
  (= (to_rep1 total_string__first) (first1 main_test__total_string__assume)))

;; Assume
  (assert
  (= (to_rep1 total_string__last) (last1 main_test__total_string__assume)))

;; Assume
  (assert (dynamic_property 1 2147483647 (to_rep1 total_string__first)
  (to_rep1 total_string__last)))

(declare-const main_test__total_stream__assume us_t1)

;; H
  (assert
  (forall ((o4 us_rep1)) (elements__function_guard2 (elements2 o4) o4)))

;; H
  (assert
  (forall ((o4 us_rep1)) (elements__function_guard2 (elements2 o4) o4)))

;; H
  (assert
  (let ((o4 (us_repqtmk1 stream_06__split_fields stream_06__attr__tag)))
  (null_string__function_guard2 (null_string2 o4) o4)))

;; H
  (assert (dynamic_invariant4
  (null_string2 (us_repqtmk1 stream_06__split_fields stream_06__attr__tag))
  true false true true))

;; H
  (assert
  (let ((o4 (us_repqtmk1 stream_06__split_fields stream_06__attr__tag)))
  (= (length2 (null_string2 o4)) (elements2 o4))))

;; H
  (assert
  (let ((o4 (us_repqtmk1 stream_10__split_fields stream_10__attr__tag)))
  (null_string__function_guard2 (null_string2 o4) o4)))

;; H
  (assert (dynamic_invariant4
  (null_string2 (us_repqtmk1 stream_10__split_fields stream_10__attr__tag))
  true false true true))

;; H
  (assert
  (let ((o4 (us_repqtmk1 stream_10__split_fields stream_10__attr__tag)))
  (= (length2 (null_string2 o4)) (elements2 o4))))

;; H
  (assert
  (let ((temp___314 (null_string2
                    (us_repqtmk1 stream_06__split_fields
                    stream_06__attr__tag))))
  (let ((temp___313 (null_string2
                    (us_repqtmk1 stream_10__split_fields
                    stream_10__attr__tag))))
  (ite (= (length2 temp___313) 0)
  (= main_test__total_stream__assume (of_array1 (to_array1 temp___314)
                                     (first3 temp___314) (last3 temp___314)))
  (let ((o4 (- (+ (first3 temp___313) (+ (length (first3 temp___313)
                                         (last3 temp___313)) (length
                                                             (first3
                                                             temp___314)
                                                             (last3
                                                             temp___314)))) 1)))
  (and (in_range6 o4)
  (= main_test__total_stream__assume (of_array1
                                     (concat2 (to_array1 temp___313)
                                     (first3 temp___313) (last3 temp___313)
                                     (to_array1 temp___314)
                                     (first3 temp___314) (last3 temp___314))
                                     (first3 temp___313) o4))))))))

(declare-const total_stream (Array Int stream_element))

;; H
  (assert (= total_stream (to_array1 main_test__total_stream__assume)))

;; Assume
  (assert
  (= (to_rep3 total_stream__first) (first3 main_test__total_stream__assume)))

;; Assume
  (assert
  (= (to_rep3 total_stream__last) (last3 main_test__total_stream__assume)))

;; Assume
  (assert (dynamic_property1 (- 9223372036854775808) 9223372036854775807
  (to_rep3 total_stream__first) (to_rep3 total_stream__last)))

;; H
  (assert
  (forall ((field_10__split_fields1 us_split_fields))
  (elements__function_guard
  (elements (us_repqtmk field_10__split_fields1 field_10__attr__tag))
  (us_repqtmk field_10__split_fields1 field_10__attr__tag))))

;; Assert
  (assert
  (= (elements (us_repqtmk field_10__split_fields field_10__attr__tag)) 10))

;; H
  (assert
  (forall ((field_06__split_fields1 us_split_fields))
  (elements__function_guard
  (elements (us_repqtmk field_06__split_fields1 field_06__attr__tag))
  (us_repqtmk field_06__split_fields1 field_06__attr__tag))))

;; Assert
  (assert
  (= (elements (us_repqtmk field_06__split_fields field_06__attr__tag)) 6))

(declare-const o4 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__last) o4))

(declare-const o5 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__first) o5))

(define-fun o6 () Int (length o5 o4))

;; Ensures
  (assert (in_range2 o6))

(declare-const o7 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__last) o7))

(declare-const o8 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__first) o8))

(define-fun o9 () Int (length o8 o7))

;; Ensures
  (assert (in_range o9))

(declare-const o10 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__last) o10))

(declare-const o11 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__first) o11))

(define-fun o12 () Int (length o11 o10))

;; Ensures
  (assert (in_range1 o12))

(declare-const o13 Int)

;; Ensures
  (assert (= (to_rep1 total_string__last) o13))

(declare-const o14 Int)

;; Ensures
  (assert (= (to_rep1 total_string__first) o14))

(define-fun o15 () Int (length o14 o13))

;; Ensures
  (assert (in_range2 o15))

(declare-const o16 Int)

;; Ensures
  (assert (= (to_rep1 total_string__last) o16))

(declare-const o17 Int)

;; Ensures
  (assert (= (to_rep1 total_string__first) o17))

(define-fun o18 () Int (length o17 o16))

;; Ensures
  (assert (in_range o18))

(declare-const o19 Int)

;; Ensures
  (assert (= (to_rep1 total_string__last) o19))

(declare-const o20 Int)

;; Ensures
  (assert (= (to_rep1 total_string__first) o20))

(define-fun o21 () us_rep (us_repqtmk field_06__split_fields
                          field_06__attr__tag))

(define-fun o22 () Int (elements o21))

;; H
  (assert (elements__function_guard o22 o21))

;; H
  (assert (dynamic_invariant2 o22 true false true true))

(define-fun o23 () us_rep (us_repqtmk field_10__split_fields
                          field_10__attr__tag))

(define-fun o24 () Int (elements o23))

;; H
  (assert (elements__function_guard o24 o23))

;; H
  (assert (dynamic_invariant2 o24 true false true true))

(define-fun o25 () Int (+ o24 o22))

;; Ensures
  (assert (in_range o25))

(declare-const total_len1 Int)

;; H
  (assert (= total_len1 o25))

(declare-const temp___320 us_t)

;; H
  (assert
  (forall ((o26 us_rep)) (elements__function_guard (elements o26) o26)))

;; H
  (assert
  (forall ((o26 us_rep)) (elements__function_guard (elements o26) o26)))

;; H
  (assert
  (let ((o26 (of_array short_string 1 3)))
  (let ((o27 (us_repqtmk field_06__split_fields field_06__attr__tag)))
  (convert__function_guard (convert o27 o26) o27 o26))))

;; H
  (assert (dynamic_invariant3
  (convert (us_repqtmk field_06__split_fields field_06__attr__tag)
  (of_array short_string 1 3)) true false true true))

;; H
  (assert
  (let ((o26 (us_repqtmk field_06__split_fields field_06__attr__tag)))
  (= (length1 (convert o26 (of_array short_string 1 3))) (elements o26))))

;; H
  (assert
  (let ((o26 (of_array ref_string 1 12)))
  (let ((o27 (us_repqtmk field_10__split_fields field_10__attr__tag)))
  (convert__function_guard (convert o27 o26) o27 o26))))

;; H
  (assert (dynamic_invariant3
  (convert (us_repqtmk field_10__split_fields field_10__attr__tag)
  (of_array ref_string 1 12)) true false true true))

;; H
  (assert
  (let ((o26 (us_repqtmk field_10__split_fields field_10__attr__tag)))
  (= (length1 (convert o26 (of_array ref_string 1 12))) (elements o26))))

;; H
  (assert
  (let ((temp___319 (convert
                    (us_repqtmk field_06__split_fields field_06__attr__tag)
                    (of_array short_string 1 3))))
  (let ((temp___318 (convert
                    (us_repqtmk field_10__split_fields field_10__attr__tag)
                    (of_array ref_string 1 12))))
  (ite (= (length1 temp___318) 0)
  (= temp___320 (of_array (to_array temp___319) (first1 temp___319)
                (last1 temp___319)))
  (let ((o26 (- (+ (first1 temp___318) (+ (length (first1 temp___318)
                                          (last1 temp___318)) (length
                                                              (first1
                                                              temp___319)
                                                              (last1
                                                              temp___319)))) 1)))
  (and (in_range3 o26)
  (= temp___320 (of_array
                (concat1 (to_array temp___318) (first1 temp___318)
                (last1 temp___318) (to_array temp___319) (first1 temp___319)
                (last1 temp___319)) (first1 temp___318) o26))))))))

;; Assert
  (assert
  (ite (<= (first1 temp___320) (last1 temp___320))
  (and (<= (to_rep1 total_string__first) (to_rep1 total_string__last))
  (= (- (last1 temp___320) (first1 temp___320)) (- (to_rep1
                                                   total_string__last) 
  (to_rep1 total_string__first))))
  (< (to_rep1 total_string__last) (to_rep1 total_string__first))))

(declare-const total_string1 (Array Int character))

;; H
  (assert (= total_string1 (to_array temp___320)))

;; Assert
  (assert
  (= (length (to_rep1 total_string__first) (to_rep1 total_string__last)) 
  total_len1))

(define-fun o26 () us_rep1 (us_repqtmk1 stream_06__split_fields
                           stream_06__attr__tag))

(define-fun o27 () Int (elements2 o26))

;; H
  (assert (elements__function_guard2 o27 o26))

;; H
  (assert (dynamic_invariant2 o27 true false true true))

(define-fun o28 () us_rep1 (us_repqtmk1 stream_10__split_fields
                           stream_10__attr__tag))

(define-fun o29 () Int (elements2 o28))

;; H
  (assert (elements__function_guard2 o29 o28))

;; H
  (assert (dynamic_invariant2 o29 true false true true))

(define-fun o30 () Int (+ o29 o27))

;; Ensures
  (assert (in_range o30))

(declare-const temp___323 us_t1)

;; H
  (assert
  (forall ((o31 us_rep1)) (elements__function_guard2 (elements2 o31) o31)))

;; H
  (assert
  (forall ((o31 us_rep1)) (elements__function_guard2 (elements2 o31) o31)))

;; H
  (assert
  (let ((o31 (of_array short_string 1 3)))
  (let ((o32 (us_repqtmk1 stream_06__split_fields stream_06__attr__tag)))
  (convert__function_guard2 (convert2 o32 o31) o32 o31))))

;; H
  (assert (dynamic_invariant4
  (convert2 (us_repqtmk1 stream_06__split_fields stream_06__attr__tag)
  (of_array short_string 1 3)) true false true true))

;; H
  (assert
  (let ((o31 (us_repqtmk1 stream_06__split_fields stream_06__attr__tag)))
  (= (length2 (convert2 o31 (of_array short_string 1 3))) (elements2 o31))))

;; H
  (assert
  (let ((o31 (of_array ref_string 1 12)))
  (let ((o32 (us_repqtmk1 stream_10__split_fields stream_10__attr__tag)))
  (convert__function_guard2 (convert2 o32 o31) o32 o31))))

;; H
  (assert (dynamic_invariant4
  (convert2 (us_repqtmk1 stream_10__split_fields stream_10__attr__tag)
  (of_array ref_string 1 12)) true false true true))

;; H
  (assert
  (let ((o31 (us_repqtmk1 stream_10__split_fields stream_10__attr__tag)))
  (= (length2 (convert2 o31 (of_array ref_string 1 12))) (elements2 o31))))

;; H
  (assert
  (let ((temp___322 (convert2
                    (us_repqtmk1 stream_06__split_fields
                    stream_06__attr__tag) (of_array short_string 1 3))))
  (let ((temp___321 (convert2
                    (us_repqtmk1 stream_10__split_fields
                    stream_10__attr__tag) (of_array ref_string 1 12))))
  (ite (= (length2 temp___321) 0)
  (= temp___323 (of_array1 (to_array1 temp___322) (first3 temp___322)
                (last3 temp___322)))
  (let ((o31 (- (+ (first3 temp___321) (+ (length (first3 temp___321)
                                          (last3 temp___321)) (length
                                                              (first3
                                                              temp___322)
                                                              (last3
                                                              temp___322)))) 1)))
  (and (in_range6 o31)
  (= temp___323 (of_array1
                (concat2 (to_array1 temp___321) (first3 temp___321)
                (last3 temp___321) (to_array1 temp___322) (first3 temp___322)
                (last3 temp___322)) (first3 temp___321) o31))))))))

;; Assert
  (assert
  (ite (<= (first3 temp___323) (last3 temp___323))
  (and (<= (to_rep3 total_stream__first) (to_rep3 total_stream__last))
  (= (- (last3 temp___323) (first3 temp___323)) (- (to_rep3
                                                   total_stream__last) 
  (to_rep3 total_stream__first))))
  (< (to_rep3 total_stream__last) (to_rep3 total_stream__first))))

(declare-const total_stream1 (Array Int stream_element))

;; H
  (assert (= total_stream1 (to_array1 temp___323)))

(declare-const o31 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__last) o31))

(declare-const o32 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__first) o32))

(define-fun o33 () Int (length o32 o31))

;; Ensures
  (assert (in_range2 o33))

(declare-const o34 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__last) o34))

(declare-const o35 Int)

;; Ensures
  (assert (= (to_rep3 total_stream__first) o35))

(define-fun o36 () Int (length o35 o34))

(assert
;; defqtvc
 ;; File "main_test.adb", line 8, characters 0-0
  (not (in_range o36)))
(check-sat)
