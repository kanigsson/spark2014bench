;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (positive positive) Bool)

(declare-const dummy positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float32)))))
(declare-sort my_positive 0)

(declare-fun my_positiveqtint (my_positive) Int)

;; my_positive'axiom
  (assert
  (forall ((i my_positive))
  (and (<= 1 (my_positiveqtint i)) (<= (my_positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (my_positive my_positive) Bool)

(declare-const dummy2 my_positive)

(declare-datatypes ()
((my_positive__ref (my_positive__refqtmk (my_positive__content my_positive)))))
(define-fun my_positive__ref_my_positive__content__projection ((a my_positive__ref)) my_positive 
  (my_positive__content a))

(declare-datatypes ()
((my_positive__init_wrapper
 (my_positive__init_wrapperqtmk (rec__value my_positive)(attr__init Bool)))))
(define-fun my_positive__init_wrapper_rec__value__projection ((a my_positive__init_wrapper)) my_positive 
  (rec__value a))

(define-fun my_positive__init_wrapper_attr__init__projection ((a my_positive__init_wrapper)) Bool 
  (attr__init a))

(define-fun to_rep1 ((x my_positive)) Int (my_positiveqtint x))

(declare-fun of_rep1 (Int) my_positive)

;; inversion_axiom
  (assert
  (forall ((x my_positive))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x my_positive)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort my_float 0)

(define-fun in_range4 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10011110 #b00000000000000000000000)))))

(declare-fun user_eq3 (my_float my_float) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float32)

(declare-const dummy3 my_float)

(declare-datatypes ()
((my_float__ref (my_float__refqtmk (my_float__content my_float)))))
(define-fun my_float__ref_my_float__content__projection ((a my_float__ref)) my_float 
  (my_float__content a))

(declare-datatypes ()
((my_float__init_wrapper
 (my_float__init_wrapperqtmk (rec__value1 my_float)(attr__init1 Bool)))))
(define-fun my_float__init_wrapper_rec__value__projection ((a my_float__init_wrapper)) my_float 
  (rec__value1 a))

(define-fun my_float__init_wrapper_attr__init__projection ((a my_float__init_wrapper)) Bool 
  (attr__init1 a))

(declare-fun to_rep2 (my_float) Float32)

(declare-fun of_rep2 (Float32) my_float)

;; inversion_axiom
  (assert
  (forall ((x my_float))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x my_float)) (! (in_range4 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort my_duration 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 60000000000)))

(declare-const dummy4 my_duration)

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (my_duration my_duration) Bool)

(declare-datatypes ()
((my_duration__ref (my_duration__refqtmk (my_duration__content my_duration)))))
(define-fun my_duration__ref_my_duration__content__projection ((a my_duration__ref)) my_duration 
  (my_duration__content a))

(declare-datatypes ()
((my_duration__init_wrapper
 (my_duration__init_wrapperqtmk (rec__value2 my_duration)(attr__init2 Bool)))))
(define-fun my_duration__init_wrapper_rec__value__projection ((a my_duration__init_wrapper)) my_duration 
  (rec__value2 a))

(define-fun my_duration__init_wrapper_attr__init__projection ((a my_duration__init_wrapper)) Bool 
  (attr__init2 a))

(declare-fun to_rep3 (my_duration) Int)

(declare-fun of_rep3 (Int) my_duration)

;; inversion_axiom
  (assert
  (forall ((x my_duration))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x my_duration)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk (rec__relaxed_initialization__rec__d Bool)))))
(define-fun us_split_discrs_rec__relaxed_initialization__rec__d__projection ((a us_split_discrs)) Bool 
  (rec__relaxed_initialization__rec__d a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__relaxed_initialization__rec__x my_positive__init_wrapper)(rec__relaxed_initialization__rec__y my_float__init_wrapper)(rec__relaxed_initialization__rec__z my_duration__init_wrapper)))))
(define-fun us_split_fields_rec__relaxed_initialization__rec__x__projection ((a us_split_fields)) my_positive__init_wrapper 
  (rec__relaxed_initialization__rec__x a))

(define-fun us_split_fields_rec__relaxed_initialization__rec__y__projection ((a us_split_fields)) my_float__init_wrapper 
  (rec__relaxed_initialization__rec__y a))

(define-fun us_split_fields_rec__relaxed_initialization__rec__z__projection ((a us_split_fields)) my_duration__init_wrapper 
  (rec__relaxed_initialization__rec__z a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun relaxed_initialization__rec__y__pred ((a us_rep)) Bool (= (ite 
  (rec__relaxed_initialization__rec__d (us_split_discrs1 a)) 1 0) 1))

(define-fun relaxed_initialization__rec__z__pred ((a us_rep)) Bool (= (ite 
  (rec__relaxed_initialization__rec__d (us_split_discrs1 a)) 1 0) 0))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__relaxed_initialization__rec__d
                                (us_split_discrs1 a)) 1 0) (ite (rec__relaxed_initialization__rec__d
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (and
                        (and
                        (= (to_rep1
                           (rec__value
                           (rec__relaxed_initialization__rec__x
                           (us_split_fields1 a)))) (to_rep1
                                                   (rec__value
                                                   (rec__relaxed_initialization__rec__x
                                                   (us_split_fields1 b)))))
                        (=> (relaxed_initialization__rec__y__pred a)
                        (fp.eq (to_rep2
                               (rec__value1
                               (rec__relaxed_initialization__rec__y
                               (us_split_fields1 a)))) (to_rep2
                                                       (rec__value1
                                                       (rec__relaxed_initialization__rec__y
                                                       (us_split_fields1 b)))))))
                        (=> (relaxed_initialization__rec__z__pred a)
                        (= (to_rep3
                           (rec__value2
                           (rec__relaxed_initialization__rec__z
                           (us_split_fields1 a)))) (to_rep3
                                                   (rec__value2
                                                   (rec__relaxed_initialization__rec__z
                                                   (us_split_fields1 b))))))))
                   true false))

(define-fun in_range6 ((rec__relaxed_initialization__rec__d1 Bool)
  (a us_split_discrs)) Bool (= rec__relaxed_initialization__rec__d1 (rec__relaxed_initialization__rec__d
                                                                    a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const relaxed_initialization__rec__d__first__bit Int)

(declare-const relaxed_initialization__rec__d__last__bit Int)

(declare-const relaxed_initialization__rec__d__position Int)

;; relaxed_initialization__rec__d__first__bit_axiom
  (assert (<= 0 relaxed_initialization__rec__d__first__bit))

;; relaxed_initialization__rec__d__last__bit_axiom
  (assert
  (< relaxed_initialization__rec__d__first__bit relaxed_initialization__rec__d__last__bit))

;; relaxed_initialization__rec__d__position_axiom
  (assert (<= 0 relaxed_initialization__rec__d__position))

(declare-const relaxed_initialization__rec__x__first__bit Int)

(declare-const relaxed_initialization__rec__x__last__bit Int)

(declare-const relaxed_initialization__rec__x__position Int)

;; relaxed_initialization__rec__x__first__bit_axiom
  (assert (<= 0 relaxed_initialization__rec__x__first__bit))

;; relaxed_initialization__rec__x__last__bit_axiom
  (assert
  (< relaxed_initialization__rec__x__first__bit relaxed_initialization__rec__x__last__bit))

;; relaxed_initialization__rec__x__position_axiom
  (assert (<= 0 relaxed_initialization__rec__x__position))

(declare-const relaxed_initialization__rec__y__first__bit Int)

(declare-const relaxed_initialization__rec__y__last__bit Int)

(declare-const relaxed_initialization__rec__y__position Int)

;; relaxed_initialization__rec__y__first__bit_axiom
  (assert (<= 0 relaxed_initialization__rec__y__first__bit))

;; relaxed_initialization__rec__y__last__bit_axiom
  (assert
  (< relaxed_initialization__rec__y__first__bit relaxed_initialization__rec__y__last__bit))

;; relaxed_initialization__rec__y__position_axiom
  (assert (<= 0 relaxed_initialization__rec__y__position))

(declare-const relaxed_initialization__rec__z__first__bit Int)

(declare-const relaxed_initialization__rec__z__last__bit Int)

(declare-const relaxed_initialization__rec__z__position Int)

;; relaxed_initialization__rec__z__first__bit_axiom
  (assert (<= 0 relaxed_initialization__rec__z__first__bit))

;; relaxed_initialization__rec__z__last__bit_axiom
  (assert
  (< relaxed_initialization__rec__z__first__bit relaxed_initialization__rec__z__last__bit))

;; relaxed_initialization__rec__z__position_axiom
  (assert (<= 0 relaxed_initialization__rec__z__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((rec____ref (rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__projection ((a rec____ref)) us_rep 
  (rec____content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const obj__first integer)

(declare-const obj__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun default_initial_assumption ((temp___expr_203 us_rep)
  (temp___skip_top_level_204 Bool)) Bool (and
                                         (= (rec__relaxed_initialization__rec__d
                                            (us_split_discrs1
                                            temp___expr_203)) (distinct 0 0))
                                         (and
                                         (and
                                         (= (attr__init
                                            (rec__relaxed_initialization__rec__x
                                            (us_split_fields1
                                            temp___expr_203))) false)
                                         (=>
                                         (relaxed_initialization__rec__y__pred
                                         temp___expr_203)
                                         (= (attr__init1
                                            (rec__relaxed_initialization__rec__y
                                            (us_split_fields1
                                            temp___expr_203))) false)))
                                         (=>
                                         (relaxed_initialization__rec__z__pred
                                         temp___expr_203)
                                         (= (attr__init2
                                            (rec__relaxed_initialization__rec__z
                                            (us_split_fields1
                                            temp___expr_203))) false)))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range2 f)
     (=> (in_range2 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int us_rep))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int us_rep) (elts a))

(define-fun of_array ((a (Array Int us_rep)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq2 ((x us_t)
  (y us_t)) Bool (bool_eq1 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq6 (us_t us_t) Bool)

(declare-const dummy6 us_t)

(declare-datatypes () ((vec__ref (vec__refqtmk (vec__content us_t)))))
(define-fun vec__ref_vec__content__projection ((a vec__ref)) us_t (vec__content
                                                                  a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes () ((t20b__ref (t20b__refqtmk (t20b__content integer)))))
(define-fun t20b__ref_t20b__content__projection ((a t20b__ref)) integer 
  (t20b__content a))

(define-fun dynamic_invariant ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range2 temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_180 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)
  (temp___do_typ_inv_179 Bool)) Bool (=>
                                     (or (= temp___is_init_176 true)
                                     (<= 1 2147483647)) (in_range3
                                     temp___expr_180)))

(define-fun dynamic_invariant3 ((temp___expr_187 Float32)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)
  (temp___do_typ_inv_186 Bool)) Bool (=>
                                     (or (= temp___is_init_183 true)
                                     (fp.leq (fp #b0 #b01111111 #b00000000000000000000000) (fp #b0 #b10011110 #b00000000000000000000000)))
                                     (in_range4 temp___expr_187)))

(define-fun dynamic_invariant4 ((temp___expr_194 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)
  (temp___do_typ_inv_193 Bool)) Bool (=>
                                     (or (= temp___is_init_190 true)
                                     (<= 0 60000000000)) (in_range5
                                     temp___expr_194)))

(define-fun dynamic_invariant5 ((temp___expr_213 us_t)
  (temp___is_init_209 Bool) (temp___skip_constant_210 Bool)
  (temp___do_toplevel_211 Bool)
  (temp___do_typ_inv_212 Bool)) Bool (=>
                                     (not (= temp___skip_constant_210 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_213)
                                     (last1 temp___expr_213))))

(declare-const rliteral my_positive)

;; rliteral_axiom
  (assert (= (my_positiveqtint rliteral) 1))

(declare-const obj (Array Int us_rep))

(declare-const obj1 (Array Int us_rep))

;; H
  (assert (= obj1 obj))

;; Assume
  (assert (dynamic_property 1 2147483647 (to_rep obj__first)
  (to_rep obj__last)))

;; Assume
  (assert
  (forall ((idx Int))
  (=> (and (<= (to_rep obj__first) idx) (<= idx (to_rep obj__last)))
  (ite (= (rec__relaxed_initialization__rec__d
          (us_split_discrs1 (select obj idx))) true)
  (= (attr__init1
     (rec__relaxed_initialization__rec__y
     (us_split_fields1 (select obj idx)))) true)
  (= (attr__init2
     (rec__relaxed_initialization__rec__z
     (us_split_fields1 (select obj idx)))) true)))))

(declare-const temp___354 Int)

;; Ensures
  (assert (= (to_rep obj__first) temp___354))

(declare-const temp___355 Int)

;; Ensures
  (assert (= (to_rep obj__last) temp___355))

(declare-const idx Int)

;; H
  (assert (= idx temp___354))

;; H
  (assert
  (= (and (ite (<= temp___354 idx) true false) (ite (<= idx temp___355) true
                                               false)) true))

(declare-const temp___loop_entry_369 (Array Int us_rep))

;; H
  (assert (= temp___loop_entry_369 obj))

(define-fun temp___356 () us_rep (select obj idx))

(define-fun q_ () us_split_fields (us_split_fields1 temp___356))

(declare-const obj2 (Array Int us_rep))

;; H
  (assert
  (= obj2 (store obj idx (us_repqtmk (us_split_discrs1 temp___356)
                         (us_split_fieldsqtmk
                         (my_positive__init_wrapperqtmk rliteral true)
                         (rec__relaxed_initialization__rec__y q_)
                         (rec__relaxed_initialization__rec__z q_))))))

(declare-const usf Int)

(declare-const o Int)

;; Ensures
  (assert (= (to_rep obj__first) o))

;; H
  (assert
  (= (and (ite (<= o usf) true false) (ite (<= usf idx) true false)) true))

;; Assert
  (assert (and (<= (to_rep obj__first) usf) (<= usf (to_rep obj__last))))

;; Assert
  (assert (and (<= (to_rep obj__first) usf) (<= usf (to_rep obj__last))))

(define-fun temp___371 () us_rep (select temp___loop_entry_369 usf))

(define-fun q_1 () us_split_fields (us_split_fields1 temp___371))

(define-fun temp___378 () us_rep (us_repqtmk (us_split_discrs1 temp___371)
                                 (us_split_fieldsqtmk
                                 (my_positive__init_wrapperqtmk rliteral
                                 true)
                                 (rec__relaxed_initialization__rec__y q_1)
                                 (rec__relaxed_initialization__rec__z q_1))))

;; H
  (assert (relaxed_initialization__rec__y__pred temp___378))

(assert
;; defqtvc
 ;; File "relaxed_initialization.adb", line 45, characters 0-0
  (not (= (attr__init1 (rec__relaxed_initialization__rec__y q_1)) true)))
(check-sat)
