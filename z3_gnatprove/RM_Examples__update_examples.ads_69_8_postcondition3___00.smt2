(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__update_examples__rec__x integer)(rec__update_examples__rec__y integer)))))
(define-fun us_split_fields_rec__update_examples__rec__x__projection ((a us_split_fields)) integer 
  (rec__update_examples__rec__x a))

(define-fun us_split_fields_rec__update_examples__rec__y__projection ((a us_split_fields)) integer 
  (rec__update_examples__rec__y a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__update_examples__rec__x
                           (us_split_fields1 a))) (to_rep
                                                  (rec__update_examples__rec__x
                                                  (us_split_fields1 b))))
                        (= (to_rep
                           (rec__update_examples__rec__y
                           (us_split_fields1 a))) (to_rep
                                                  (rec__update_examples__rec__y
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const update_examples__rec__x__first__bit Int)

(declare-const update_examples__rec__x__last__bit Int)

(declare-const update_examples__rec__x__position Int)

;; update_examples__rec__x__first__bit_axiom
  (assert (<= 0 update_examples__rec__x__first__bit))

;; update_examples__rec__x__last__bit_axiom
  (assert
  (< update_examples__rec__x__first__bit update_examples__rec__x__last__bit))

;; update_examples__rec__x__position_axiom
  (assert (<= 0 update_examples__rec__x__position))

(declare-const update_examples__rec__y__first__bit Int)

(declare-const update_examples__rec__y__last__bit Int)

(declare-const update_examples__rec__y__position Int)

;; update_examples__rec__y__first__bit_axiom
  (assert (<= 0 update_examples__rec__y__first__bit))

;; update_examples__rec__y__last__bit_axiom
  (assert
  (< update_examples__rec__y__first__bit update_examples__rec__y__last__bit))

;; update_examples__rec__y__position_axiom
  (assert (<= 0 update_examples__rec__y__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((rec____ref (rec____refqtmk (rec____content us_rep)))))
(define-fun rec____ref_rec____content__projection ((a rec____ref)) us_rep 
  (rec____content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy2 (Array Int integer))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 ((Array Int integer) (Array Int integer)) Bool)

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (map__refqtmk1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) integer)

(declare-fun set (map1 Int Int integer) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a integer))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a integer))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide1 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_155 Int)
                             (temp___idx_156 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_155)
                             (<= temp___idx_155 a__last))
                             (and (<= a__first_2 temp___idx_156)
                             (<= temp___idx_156 a__last_2)))
                             (= (to_rep
                                (get a temp___idx_155 temp___idx_156)) 
                             (to_rep
                             (get b (+ (- b__first a__first) temp___idx_155)
                             (+ (- b__first_2 a__first_2) temp___idx_156)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_155 Int) (temp___idx_156 Int))
  (=>
  (and (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (and (<= a__first_2 temp___idx_156) (<= temp___idx_156 a__last_2)))
  (= (to_rep (get a temp___idx_155 temp___idx_156)) (to_rep
                                                    (get b
                                                    (+ (- b__first a__first) temp___idx_155)
                                                    (+ (- b__first_2 a__first_2) temp___idx_156)))))))))))

(declare-const dummy3 map1)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq3 (map1 map1) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__update_examples__nested_rec__a integer)(rec__update_examples__nested_rec__b us_rep)(rec__update_examples__nested_rec__c (Array Int integer))(rec__update_examples__nested_rec__d map1)))))
(define-fun us_split_fields_rec__update_examples__nested_rec__a__projection ((a us_split_fields2)) integer 
  (rec__update_examples__nested_rec__a a))

(define-fun us_split_fields_rec__update_examples__nested_rec__b__projection ((a us_split_fields2)) us_rep 
  (rec__update_examples__nested_rec__b a))

(define-fun us_split_fields_rec__update_examples__nested_rec__c__projection ((a us_split_fields2)) (Array Int integer) 
  (rec__update_examples__nested_rec__c a))

(define-fun us_split_fields_rec__update_examples__nested_rec__d__projection ((a us_split_fields2)) map1 
  (rec__update_examples__nested_rec__d a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__update_examples__nested_rec__a
                            (us_split_fields3 a))) (to_rep
                                                   (rec__update_examples__nested_rec__a
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__update_examples__nested_rec__b
                            (us_split_fields3 a))
                            (rec__update_examples__nested_rec__b
                            (us_split_fields3 b))) true))
                         (and
                         (= (bool_eq1
                            (rec__update_examples__nested_rec__c
                            (us_split_fields3 a)) 1 3
                            (rec__update_examples__nested_rec__c
                            (us_split_fields3 b)) 1 3) true)
                         (= (bool_eq2
                            (rec__update_examples__nested_rec__d
                            (us_split_fields3 a)) 1 3 1 3
                            (rec__update_examples__nested_rec__d
                            (us_split_fields3 b)) 1 3 1 3) true)))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const update_examples__nested_rec__a__first__bit Int)

(declare-const update_examples__nested_rec__a__last__bit Int)

(declare-const update_examples__nested_rec__a__position Int)

;; update_examples__nested_rec__a__first__bit_axiom
  (assert (<= 0 update_examples__nested_rec__a__first__bit))

;; update_examples__nested_rec__a__last__bit_axiom
  (assert
  (< update_examples__nested_rec__a__first__bit update_examples__nested_rec__a__last__bit))

;; update_examples__nested_rec__a__position_axiom
  (assert (<= 0 update_examples__nested_rec__a__position))

(declare-const update_examples__nested_rec__b__first__bit Int)

(declare-const update_examples__nested_rec__b__last__bit Int)

(declare-const update_examples__nested_rec__b__position Int)

;; update_examples__nested_rec__b__first__bit_axiom
  (assert (<= 0 update_examples__nested_rec__b__first__bit))

;; update_examples__nested_rec__b__last__bit_axiom
  (assert
  (< update_examples__nested_rec__b__first__bit update_examples__nested_rec__b__last__bit))

;; update_examples__nested_rec__b__position_axiom
  (assert (<= 0 update_examples__nested_rec__b__position))

(declare-const update_examples__nested_rec__c__first__bit Int)

(declare-const update_examples__nested_rec__c__last__bit Int)

(declare-const update_examples__nested_rec__c__position Int)

;; update_examples__nested_rec__c__first__bit_axiom
  (assert (<= 0 update_examples__nested_rec__c__first__bit))

;; update_examples__nested_rec__c__last__bit_axiom
  (assert
  (< update_examples__nested_rec__c__first__bit update_examples__nested_rec__c__last__bit))

;; update_examples__nested_rec__c__position_axiom
  (assert (<= 0 update_examples__nested_rec__c__position))

(declare-const update_examples__nested_rec__d__first__bit Int)

(declare-const update_examples__nested_rec__d__last__bit Int)

(declare-const update_examples__nested_rec__d__position Int)

;; update_examples__nested_rec__d__first__bit_axiom
  (assert (<= 0 update_examples__nested_rec__d__first__bit))

;; update_examples__nested_rec__d__last__bit_axiom
  (assert
  (< update_examples__nested_rec__d__first__bit update_examples__nested_rec__d__last__bit))

;; update_examples__nested_rec__d__position_axiom
  (assert (<= 0 update_examples__nested_rec__d__position))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((nested_rec__ref (nested_rec__refqtmk (nested_rec__content us_rep1)))))
(define-fun nested_rec__ref_nested_rec__content__projection ((a nested_rec__ref)) us_rep1 
  (nested_rec__content a))

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int us_rep1))))))
(declare-fun slide2 ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide2 a first first) a) :pattern ((slide2 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (bool_eq3 (select a temp___idx_157)
                              (select b (+ (- b__first a__first) temp___idx_157))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (bool_eq3 (select a temp___idx_157)
     (select b (+ (- b__first a__first) temp___idx_157))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort tnested_arrD1 0)

(declare-fun tnested_arrD1qtint (tnested_arrD1) Int)

;; tnested_arrD1'axiom
  (assert
  (forall ((i tnested_arrD1))
  (and (<= 1 (tnested_arrD1qtint i)) (<= (tnested_arrD1qtint i) 3))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq5 (tnested_arrD1 tnested_arrD1) Bool)

(declare-const dummy5 tnested_arrD1)

(declare-datatypes ()
((tnested_arrD1__ref
 (tnested_arrD1__refqtmk (tnested_arrD1__content tnested_arrD1)))))
(define-fun tnested_arrD1__ref_tnested_arrD1__content__projection ((a tnested_arrD1__ref)) tnested_arrD1 
  (tnested_arrD1__content a))

(declare-fun temp_____aggregate_def_264 (map1 Int Int Int) map1)

(declare-fun temp_____aggregate_def_279 ((Array Int integer) Int
  Int) (Array Int integer))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort tarr_2dD1 0)

(declare-fun tarr_2dD1qtint (tarr_2dD1) Int)

;; tarr_2dD1'axiom
  (assert
  (forall ((i tarr_2dD1))
  (and (<= 1 (tarr_2dD1qtint i)) (<= (tarr_2dD1qtint i) 3))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq6 (tarr_2dD1 tarr_2dD1) Bool)

(declare-const dummy6 tarr_2dD1)

(declare-datatypes ()
((tarr_2dD1__ref (tarr_2dD1__refqtmk (tarr_2dD1__content tarr_2dD1)))))
(define-fun tarr_2dD1__ref_tarr_2dD1__content__projection ((a tarr_2dD1__ref)) tarr_2dD1 
  (tarr_2dD1__content a))

(declare-sort tarr_2dD2 0)

(declare-fun tarr_2dD2qtint (tarr_2dD2) Int)

;; tarr_2dD2'axiom
  (assert
  (forall ((i tarr_2dD2))
  (and (<= 1 (tarr_2dD2qtint i)) (<= (tarr_2dD2qtint i) 3))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (tarr_2dD2 tarr_2dD2) Bool)

(declare-const dummy7 tarr_2dD2)

(declare-datatypes ()
((tarr_2dD2__ref (tarr_2dD2__refqtmk (tarr_2dD2__content tarr_2dD2)))))
(define-fun tarr_2dD2__ref_tarr_2dD2__content__projection ((a tarr_2dD2__ref)) tarr_2dD2 
  (tarr_2dD2__content a))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___266 map1))
  (forall ((temp___267 Int) (temp___268 Int) (temp___269 Int))
  (let ((temp___265 (temp_____aggregate_def_264 temp___266 temp___267
                    temp___268 temp___269)))
  (=>
  (and (in_range2 temp___267)
  (and (in_range3 temp___268) (dynamic_invariant temp___269 true true true
  true)))
  (forall ((temp___270 Int) (temp___271 Int))
  (ite (and (= temp___270 temp___267) (= temp___271 temp___268))
  (= (get temp___265 temp___270 temp___271) rliteral)
  (= (get temp___265 temp___270 temp___271) (get temp___266 temp___270
                                            temp___271)))))))))

(declare-sort tarrD1 0)

(declare-fun tarrD1qtint (tarrD1) Int)

;; tarrD1'axiom
  (assert
  (forall ((i tarrD1)) (and (<= 1 (tarrD1qtint i)) (<= (tarrD1qtint i) 3))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (tarrD1 tarrD1) Bool)

(declare-const dummy8 tarrD1)

(declare-datatypes ()
((tarrD1__ref (tarrD1__refqtmk (tarrD1__content tarrD1)))))
(define-fun tarrD1__ref_tarrD1__content__projection ((a tarrD1__ref)) tarrD1 
  (tarrD1__content a))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 5))

;; def_axiom
  (assert
  (forall ((temp___281 (Array Int integer)))
  (forall ((temp___282 Int) (temp___283 Int))
  (let ((temp___280 (temp_____aggregate_def_279 temp___281 temp___282
                    temp___283)))
  (=>
  (and (in_range4 temp___282) (dynamic_invariant temp___283 true true true
  true))
  (forall ((temp___284 Int))
  (ite (= temp___284 temp___282) (= (select temp___280 temp___284) rliteral1)
  (= (select temp___280 temp___284) (select temp___281 temp___284)))))))))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 1))

(declare-const rliteral3 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral3) 2))

(declare-const na (Array Int us_rep1))

(declare-const na1 (Array Int us_rep1))

;; H
  (assert (= na1 na))

;; Assume
  (assert true)

(define-fun q_ () us_split_fields2 (us_split_fields3 (select na 1)))

(declare-const na2 (Array Int us_rep1))

;; H
  (assert
  (= na2 (store na 1 (us_repqtmk1
                     (us_split_fieldsqtmk1 rliteral2
                     (rec__update_examples__nested_rec__b q_)
                     (rec__update_examples__nested_rec__c q_)
                     (rec__update_examples__nested_rec__d q_))))))

(define-fun q_1 () us_split_fields2 (us_split_fields3 (select na2 1)))

(declare-const na3 (Array Int us_rep1))

;; H
  (assert
  (= na3 (store na2 1 (us_repqtmk1
                      (us_split_fieldsqtmk1
                      (rec__update_examples__nested_rec__a q_1)
                      (rec__update_examples__nested_rec__b q_1)
                      (rec__update_examples__nested_rec__c q_1)
                      (set
                      (rec__update_examples__nested_rec__d
                      (us_split_fields3 (select na2 1))) 2 2 rliteral))))))

(define-fun q_2 () us_split_fields2 (us_split_fields3 (select na3 2)))

(declare-const na4 (Array Int us_rep1))

;; H
  (assert
  (= na4 (store na3 2 (us_repqtmk1
                      (us_split_fieldsqtmk1
                      (rec__update_examples__nested_rec__a q_2)
                      (us_repqtmk
                      (us_split_fieldsqtmk rliteral3
                      (rec__update_examples__rec__y
                      (us_split_fields1
                      (rec__update_examples__nested_rec__b
                      (us_split_fields3 (select na3 2)))))))
                      (rec__update_examples__nested_rec__c q_2)
                      (rec__update_examples__nested_rec__d q_2))))))

(define-fun q_3 () us_split_fields2 (us_split_fields3 (select na4 3)))

(declare-const na5 (Array Int us_rep1))

;; H
  (assert
  (= na5 (store na4 3 (us_repqtmk1
                      (us_split_fieldsqtmk1
                      (rec__update_examples__nested_rec__a q_3)
                      (rec__update_examples__nested_rec__b q_3)
                      (store (rec__update_examples__nested_rec__c
                             (us_split_fields3 (select na4 3))) 1 rliteral1)
                      (rec__update_examples__nested_rec__d q_3))))))

(declare-const temp___index_378 Int)

;; H
  (assert (<= 1 temp___index_378))

;; H
  (assert (<= temp___index_378 3))

(assert
;; defqtvc
 ;; File "update_examples.ads", line 67, characters 0-0
  (not
  (= (bool_eq3 (select na5 temp___index_378)
     (ite (= temp___index_378 3)
     (us_repqtmk1
     (let ((q_4 (us_split_fields3 (select na1 3))))
     (us_split_fieldsqtmk1 (rec__update_examples__nested_rec__a q_4)
     (rec__update_examples__nested_rec__b q_4)
     (temp_____aggregate_def_279
     (rec__update_examples__nested_rec__c (us_split_fields3 (select na1 3)))
     1 5) (rec__update_examples__nested_rec__d q_4))))
     (ite (= temp___index_378 2)
     (us_repqtmk1
     (let ((q_4 (us_split_fields3 (select na1 2))))
     (us_split_fieldsqtmk1 (rec__update_examples__nested_rec__a q_4)
     (us_repqtmk
     (us_split_fieldsqtmk rliteral3
     (rec__update_examples__rec__y
     (us_split_fields1
     (rec__update_examples__nested_rec__b (us_split_fields3 (select na1 2)))))))
     (rec__update_examples__nested_rec__c q_4)
     (rec__update_examples__nested_rec__d q_4))))
     (ite (= temp___index_378 1)
     (us_repqtmk1
     (let ((q_4 (us_split_fields3 (select na1 1))))
     (us_split_fieldsqtmk1 rliteral2
     (rec__update_examples__nested_rec__b q_4)
     (rec__update_examples__nested_rec__c q_4)
     (temp_____aggregate_def_264
     (rec__update_examples__nested_rec__d (us_split_fields3 (select na1 1)))
     2 2 0)))) (select na1 temp___index_378))))) true)))
(check-sat)

(exit)
