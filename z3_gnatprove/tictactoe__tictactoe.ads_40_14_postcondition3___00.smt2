(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (positive positive) Bool)

(declare-const dummy3 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort slot 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (slot slot) Bool)

(declare-const dummy5 slot)

(declare-datatypes () ((slot__ref (slot__refqtmk (slot__content slot)))))
(define-fun slot__ref_slot__content__projection ((a slot__ref)) slot 
  (slot__content a))

(declare-fun to_rep2 (slot) Int)

(declare-fun of_rep2 (Int) slot)

;; inversion_axiom
  (assert
  (forall ((x slot)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x slot)) (! (in_range5 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int slot))))))
(declare-fun slide1 ((Array Int slot) Int Int) (Array Int slot))

;; slide_eq
  (assert
  (forall ((a (Array Int slot)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int slot)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int slot)) (a__first Int) (a__last Int)
  (b (Array Int slot)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int slot)) (b (Array Int slot)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy6 (Array Int slot))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq6 ((Array Int slot) (Array Int slot)) Bool)

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int (Array Int slot)))))))
(declare-fun slide2 ((Array Int (Array Int slot)) Int
  Int) (Array Int (Array Int slot)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((first2 Int))
  (! (= (slide2 a first2 first2) a) :pattern ((slide2 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int slot))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int (Array Int slot))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int slot))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq2 (select a temp___idx_155) 1 3
                              (select b (+ (- b__first a__first) temp___idx_155))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int slot))) (b (Array Int (Array Int slot))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq2 (select a temp___idx_155) 1 3
     (select b (+ (- b__first a__first) temp___idx_155)) 1 3) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun num_free_slots ((Array Int (Array Int slot))) Int)

(declare-fun num_free_slots__function_guard (Int
  (Array Int (Array Int slot))) Bool)

(declare-fun count_free_slots (Int Int (Array Int (Array Int slot))) Int)

(declare-fun count_free_slots__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; num_free_slots__post_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (let ((result (num_free_slots tictactoe__my_board)))
     (=> (num_free_slots__function_guard result tictactoe__my_board)
     (dynamic_invariant result true false true true))) :pattern ((num_free_slots
                                                                 tictactoe__my_board)) )))

;; num_free_slots__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (count_free_slots__function_guard
     (count_free_slots 3 3 tictactoe__my_board1) 3 3 tictactoe__my_board1))
     (= (num_free_slots tictactoe__my_board) (count_free_slots 3 3
                                             tictactoe__my_board))) :pattern (
  (num_free_slots tictactoe__my_board)) )))

(declare-fun is_full ((Array Int (Array Int slot))) Bool)

(declare-fun is_full__function_guard (Bool
  (Array Int (Array Int slot))) Bool)

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (num_free_slots__function_guard (num_free_slots tictactoe__my_board1)
     tictactoe__my_board1))
     (= (= (is_full tictactoe__my_board) true)
     (= (num_free_slots tictactoe__my_board) 0))) :pattern ((is_full
                                                            tictactoe__my_board)) )))

(declare-sort pos 0)

(declare-fun posqtint (pos) Int)

;; pos'axiom
  (assert (forall ((i pos)) (and (<= 1 (posqtint i)) (<= (posqtint i) 3))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (pos pos) Bool)

(declare-const dummy7 pos)

(declare-datatypes () ((pos__ref (pos__refqtmk (pos__content pos)))))
(define-fun pos__ref_pos__content__projection ((a pos__ref)) pos (pos__content
                                                                 a))

(define-fun to_rep3 ((x pos)) Int (posqtint x))

(declare-fun of_rep3 (Int) pos)

;; inversion_axiom
  (assert
  (forall ((x pos)) (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x pos)) (! (in_range6 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__tictactoe__position__x pos)(rec__tictactoe__position__y pos)))))
(define-fun us_split_fields_rec__tictactoe__position__x__projection ((a us_split_fields)) pos 
  (rec__tictactoe__position__x a))

(define-fun us_split_fields_rec__tictactoe__position__y__projection ((a us_split_fields)) pos 
  (rec__tictactoe__position__y a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq4 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep3
                           (rec__tictactoe__position__x (us_split_fields1 a))) 
                        (to_rep3
                        (rec__tictactoe__position__x (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__tictactoe__position__y (us_split_fields1 a))) 
                        (to_rep3
                        (rec__tictactoe__position__y (us_split_fields1 b)))))
                   true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const tictactoe__position__x__first__bit Int)

(declare-const tictactoe__position__x__last__bit Int)

(declare-const tictactoe__position__x__position Int)

;; tictactoe__position__x__first__bit_axiom
  (assert (<= 0 tictactoe__position__x__first__bit))

;; tictactoe__position__x__last__bit_axiom
  (assert
  (< tictactoe__position__x__first__bit tictactoe__position__x__last__bit))

;; tictactoe__position__x__position_axiom
  (assert (<= 0 tictactoe__position__x__position))

(declare-const tictactoe__position__y__first__bit Int)

(declare-const tictactoe__position__y__last__bit Int)

(declare-const tictactoe__position__y__position Int)

;; tictactoe__position__y__first__bit_axiom
  (assert (<= 0 tictactoe__position__y__first__bit))

;; tictactoe__position__y__last__bit_axiom
  (assert
  (< tictactoe__position__y__first__bit tictactoe__position__y__last__bit))

;; tictactoe__position__y__position_axiom
  (assert (<= 0 tictactoe__position__y__position))

(declare-fun user_eq8 (us_rep us_rep) Bool)

(declare-const dummy8 us_rep)

(declare-datatypes ()
((position__ref (position__refqtmk (position__content us_rep)))))
(define-fun position__ref_position__content__projection ((a position__ref)) us_rep 
  (position__content a))

(declare-datatypes ()
((map__ref3 (map__refqtmk3 (map__content3 (Array Int us_rep))))))
(declare-fun slide3 ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first2 Int))
  (! (= (slide3 a first2 first2) a) :pattern ((slide3 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide3 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide3 a old_first new_first) i)) ))))))

(define-fun bool_eq5 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_163 Int))
                           (=>
                           (and (<= a__first temp___idx_163)
                           (<= temp___idx_163 a__last))
                           (= (bool_eq4 (select a temp___idx_163)
                              (select b (+ (- b__first a__first) temp___idx_163))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq5 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_163 Int))
  (=> (and (<= a__first temp___idx_163) (<= temp___idx_163 a__last))
  (= (bool_eq4 (select a temp___idx_163)
     (select b (+ (- b__first a__first) temp___idx_163))) true))))))))

(declare-const dummy9 (Array Int us_rep))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size2 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq9 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((map__ref4 (map__refqtmk4 (map__content4 (Array Int (Array Int us_rep)))))))
(declare-fun slide4 ((Array Int (Array Int us_rep)) Int
  Int) (Array Int (Array Int us_rep)))

;; slide_eq
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((first2 Int))
  (! (= (slide4 a first2 first2) a) :pattern ((slide4 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int (Array Int us_rep))))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide4 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide4 a old_first new_first) i)) ))))))

(define-fun bool_eq6 ((a (Array Int (Array Int us_rep))) (a__first Int)
  (a__last Int) (b (Array Int (Array Int us_rep))) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (bool_eq5 (select a temp___idx_164) 1 3
                              (select b (+ (- b__first a__first) temp___idx_164))
                              1 3) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int (Array Int us_rep)))
  (b (Array Int (Array Int us_rep))))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq6 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (bool_eq5 (select a temp___idx_164) 1 3
     (select b (+ (- b__first a__first) temp___idx_164)) 1 3) true))))))))

(declare-fun won ((Array Int (Array Int us_rep))
  (Array Int (Array Int slot))) Int)

(declare-fun won__function_guard (Int (Array Int (Array Int us_rep))
  (Array Int (Array Int slot))) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant2 ((temp___expr_171 Int)
  (temp___is_init_167 Bool) (temp___skip_constant_168 Bool)
  (temp___do_toplevel_169 Bool)
  (temp___do_typ_inv_170 Bool)) Bool (=>
                                     (or (= temp___is_init_167 true)
                                     (<= 0 2)) (in_range5 temp___expr_171)))

;; won__post_axiom
  (assert
  (forall ((tictactoe__all_solutions (Array Int (Array Int us_rep))))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (let ((result (won tictactoe__all_solutions tictactoe__my_board)))
     (=> (won__function_guard result tictactoe__all_solutions
     tictactoe__my_board) (dynamic_invariant2 result true false true true))) :pattern (
  (won tictactoe__all_solutions tictactoe__my_board)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-sort tTsSP1 0)

(declare-fun tTsSP1qtint (tTsSP1) Int)

;; tTsSP1'axiom
  (assert
  (forall ((i tTsSP1)) (and (<= 1 (tTsSP1qtint i)) (<= (tTsSP1qtint i) 1))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq10 (tTsSP1 tTsSP1) Bool)

(declare-const dummy10 tTsSP1)

(declare-datatypes ()
((tTsSP1__ref (tTsSP1__refqtmk (tTsSP1__content tTsSP1)))))
(define-fun tTsSP1__ref_tTsSP1__content__projection ((a tTsSP1__ref)) tTsSP1 
  (tTsSP1__content a))

(define-fun dynamic_invariant3 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range4
                                    temp___expr_46)))

(define-fun dynamic_invariant5 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant6 ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 1 3)) (in_range6 temp___expr_178)))

(declare-fun one_free_slot (Int Int (Array Int (Array Int slot))) Int)

(declare-fun one_free_slot__function_guard (Int Int Int
  (Array Int (Array Int slot))) Bool)

;; one_free_slot__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (let ((result (one_free_slot x y tictactoe__my_board)))
     (=> (one_free_slot__function_guard result x y tictactoe__my_board)
     (dynamic_invariant3 result true false true true)))) :pattern ((one_free_slot
                                                                   x y
                                                                   tictactoe__my_board)) ))))

;; one_free_slot__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (= (one_free_slot x y tictactoe__my_board) (ite (= (to_rep2
                                                        (let ((temp___209 (select tictactoe__my_board x)))
                                                        (select temp___209 y))) 0)
                                                1 0))) :pattern ((one_free_slot
                                                                 x y
                                                                 tictactoe__my_board)) ))))

;; count_free_slots__post_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (let ((result (count_free_slots x y tictactoe__my_board)))
     (=> (count_free_slots__function_guard result x y tictactoe__my_board)
     (dynamic_invariant3 result true false true true)))) :pattern ((count_free_slots
                                                                   x y
                                                                   tictactoe__my_board)) ))))

;; count_free_slots__def_axiom
  (assert
  (forall ((x Int) (y Int))
  (forall ((tictactoe__my_board (Array Int (Array Int slot))))
  (! (=>
     (and (dynamic_invariant6 x true true true true) (dynamic_invariant6 y
     true true true true))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 1 tictactoe__my_board1)
     1 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 2 tictactoe__my_board1)
     1 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 1 3 tictactoe__my_board1)
     1 3 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 1 tictactoe__my_board1)
     2 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 2 tictactoe__my_board1)
     2 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 2 3 tictactoe__my_board1)
     2 3 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 1 tictactoe__my_board1)
     3 1 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 2 tictactoe__my_board1)
     3 2 tictactoe__my_board1))
     (and
     (forall ((tictactoe__my_board1 (Array Int (Array Int slot))))
     (one_free_slot__function_guard (one_free_slot 3 3 tictactoe__my_board1)
     3 3 tictactoe__my_board1))
     (= (count_free_slots x y tictactoe__my_board) (+ (+ (+ (+ (one_free_slot
                                                               1 1
                                                               tictactoe__my_board) 
     (ite (<= 2 y) (one_free_slot 1 2 tictactoe__my_board) 0)) (ite (<= 3 y)
                                                               (one_free_slot
                                                               1 3
                                                               tictactoe__my_board)
                                                               0)) (ite (<= 2 x)
                                                                   (+ (+ 
                                                                   (one_free_slot
                                                                   2 1
                                                                   tictactoe__my_board) 
                                                                   (ite (<= 2 y)
                                                                   (one_free_slot
                                                                   2 2
                                                                   tictactoe__my_board)
                                                                   0)) 
                                                                   (ite (<= 3 y)
                                                                   (one_free_slot
                                                                   2 3
                                                                   tictactoe__my_board)
                                                                   0)) 0)) 
     (ite (<= 3 x)
     (+ (+ (one_free_slot 3 1 tictactoe__my_board) (ite (<= 2 y)
                                                   (one_free_slot 3 2
                                                   tictactoe__my_board) 0)) 
     (ite (<= 3 y) (one_free_slot 3 3 tictactoe__my_board) 0)) 0))))))))))))) :pattern (
  (count_free_slots x y tictactoe__my_board)) ))))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq11 (count count) Bool)

(declare-const dummy11 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant7 ((temp___expr_283 Int)
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)
  (temp___do_typ_inv_282 Bool)) Bool (=>
                                     (or (= temp___is_init_279 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_283)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(declare-const rliteral pos)

;; rliteral_axiom
  (assert (= (posqtint rliteral) 1))

(declare-const rliteral1 pos)

;; rliteral_axiom
  (assert (= (posqtint rliteral1) 2))

(declare-const rliteral2 pos)

;; rliteral_axiom
  (assert (= (posqtint rliteral2) 3))

(declare-const my_board (Array Int (Array Int slot)))

(declare-const all_solutions (Array Int (Array Int us_rep)))

(declare-const p__split_fields us_split_fields)

(declare-const my_board1 (Array Int (Array Int slot)))

;; H
  (assert (= my_board1 my_board))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; H
  (assert
  (forall ((my_board2 (Array Int (Array Int slot)))) (is_full__function_guard
  (is_full my_board2) my_board2)))

;; H
  (assert
  (forall ((my_board2 (Array Int (Array Int slot)))
  (all_solutions1 (Array Int (Array Int us_rep)))) (won__function_guard
  (won all_solutions1 my_board2) all_solutions1 my_board2)))

;; Assume
  (assert
  (and (not (= (is_full my_board) true)) (= (won all_solutions my_board) 0)))

;; Assume
  (assert true)

;; Assume
  (assert true)

(declare-const p__split_fields1 us_split_fields)

;; H
  (assert
  (exists ((last2 Int) (standard_in us_private) (file_system us_private)
  (standard_out us_private) (standard_err us_private) (current_in us_private)
  (current_out us_private) (current_err us_private))
  (and (dynamic_invariant last2 false false true true)
  (exists ((found Bool))
  (and (= found (distinct 1 0))
  (exists ((o integer))
  (and (= (to_rep1 o) 1)
  (exists ((o1 integer))
  (and (= (to_rep1 o1) 1)
  (exists ((last3 Int) (standard_in1 us_private) (file_system1 us_private)
  (standard_out1 us_private) (standard_err1 us_private)
  (current_in1 us_private) (current_out1 us_private)
  (current_err1 us_private)
  (ada___ada__text_io__get_line__2__item (Array Int character)))
  (and
  (and
  (and
  (and
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1))
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))
  (ite (< 0 (length1 (to_rep1 o1) (to_rep1 o)))
  (and (<= (- (to_rep1 o1) 1) last3) (<= last3 (to_rep1 o)))
  (= last3 (- (to_rep1 o1) 1)))) (dynamic_invariant last3 true true true
  true))
  (let ((temp___494 (of_array ada___ada__text_io__get_line__2__item 1 1)))
  (exists ((s (Array Int character)))
  (and (= s (slide (to_array temp___494) (first1 temp___494) 1))
  (exists ((standard_in2 us_private) (file_system2 us_private)
  (standard_out2 us_private) (standard_err2 us_private)
  (current_in2 us_private) (current_out2 us_private)
  (current_err2 us_private))
  (and
  (and
  (= (line_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (line_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2))
  (= (page_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (page_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2)))
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (<= 1 last3) true false))
  (and (= spark__branch true)
  (exists ((o2 Int))
  (and (= (to_rep (select s 1)) o2)
  (exists ((c Int))
  (and (= c o2)
  (and (dynamic_invariant1 c true false true true)
  (exists ((p__split_fields2 us_split_fields))
  (and (= p__split_fields2 (us_split_fieldsqtmk rliteral rliteral))
  (exists ((spark__branch1 Bool) (found1 Bool))
  (and
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 (ite (= c 49) true false))
  (ite (= spark__branch2 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral rliteral))
  (= spark__branch1 spark__branch2)) (= found1 found))
  (exists ((spark__branch3 Bool))
  (and (= spark__branch3 (ite (= c 50) true false))
  (ite (= spark__branch3 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral1 rliteral))
  (= spark__branch1 spark__branch3)) (= found1 found))
  (exists ((spark__branch4 Bool))
  (and (= spark__branch4 (ite (= c 51) true false))
  (ite (= spark__branch4 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral2 rliteral))
  (= spark__branch1 spark__branch4)) (= found1 found))
  (exists ((spark__branch5 Bool))
  (and (= spark__branch5 (ite (= c 52) true false))
  (ite (= spark__branch5 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral rliteral1))
  (= spark__branch1 spark__branch5)) (= found1 found))
  (exists ((spark__branch6 Bool))
  (and (= spark__branch6 (ite (= c 53) true false))
  (ite (= spark__branch6 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral1 rliteral1))
  (= spark__branch1 spark__branch6)) (= found1 found))
  (exists ((spark__branch7 Bool))
  (and (= spark__branch7 (ite (= c 54) true false))
  (ite (= spark__branch7 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral2 rliteral1))
  (= spark__branch1 spark__branch7)) (= found1 found))
  (exists ((spark__branch8 Bool))
  (and (= spark__branch8 (ite (= c 55) true false))
  (ite (= spark__branch8 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral rliteral2))
  (= spark__branch1 spark__branch8)) (= found1 found))
  (exists ((spark__branch9 Bool))
  (and (= spark__branch9 (ite (= c 56) true false))
  (ite (= spark__branch9 true)
  (and
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral1 rliteral2))
  (= spark__branch1 spark__branch9)) (= found1 found))
  (and (= spark__branch1 (ite (= c 57) true false))
  (ite (= spark__branch1 true)
  (and (= p__split_fields1 (us_split_fieldsqtmk rliteral2 rliteral2))
  (= found1 found))
  (and (= found1 (distinct 0 0)) (= p__split_fields1 p__split_fields2))))))))))))))))))))))))))))
  (exists ((o3 Bool))
  (and
  (ite (= found1 true)
  (exists ((o4 Int))
  (and (= (to_rep3 (rec__tictactoe__position__x p__split_fields1)) o4)
  (exists ((o5 Int))
  (and (= (to_rep3 (rec__tictactoe__position__y p__split_fields1)) o5)
  (exists ((o6 Int))
  (and (= (to_rep2 (select (select my_board o4) o5)) o6)
  (= o3 (ite (= o6 0) true false)))))))) (= o3 false))
  (exists ((spark__branch2 Bool))
  (and (= spark__branch2 o3) (= spark__branch2 true)))))))))))))))))))))))))))))))))

(declare-const my_board2 (Array Int (Array Int slot)))

;; H
  (assert (= my_board2 my_board))

(declare-const my_board3 (Array Int (Array Int slot)))

;; H
  (assert
  (forall ((my_board4 (Array Int (Array Int slot))))
  (num_free_slots__function_guard (num_free_slots my_board4) my_board4)))

;; H
  (assert
  (forall ((my_board4 (Array Int (Array Int slot))))
  (num_free_slots__function_guard (num_free_slots my_board4) my_board4)))

;; H
  (assert (= (num_free_slots my_board3) (- (num_free_slots my_board2) 1)))

;; H
  (assert true)

;; H
  (assert
  (forall ((my_board4 (Array Int (Array Int slot))))
  (num_free_slots__function_guard (num_free_slots my_board4) my_board4)))

;; H
  (assert
  (forall ((my_board4 (Array Int (Array Int slot))))
  (num_free_slots__function_guard (num_free_slots my_board4) my_board4)))

(assert
;; defqtvc
 ;; File "tictactoe.ads", line 38, characters 0-0
  (not (= (num_free_slots my_board3) (- (num_free_slots my_board1) 1))))
(check-sat)

(exit)
