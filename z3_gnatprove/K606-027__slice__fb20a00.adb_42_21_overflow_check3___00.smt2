(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(define-fun dynamic_invariant1 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-const str us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const sub us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const new_str__first integer)

(declare-const new_str__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const new_sub__first integer)

(declare-const new_sub__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun upper_case (us_t) us_t)

(declare-fun upper_case__function_guard (us_t us_t) Bool)

;; upper_case__post_axiom
  (assert
  (forall ((str1 us_t))
  (! (=> (dynamic_invariant1 str1 true true true true)
     (let ((result (upper_case str1)))
     (=> (upper_case__function_guard result str1) (dynamic_invariant1 result
     true false true true)))) :pattern ((upper_case str1)) )))

(declare-datatypes ()
((tnew_strS__ref (tnew_strS__refqtmk (tnew_strS__content us_t)))))
(define-fun tnew_strS__ref_tnew_strS__content__projection ((a tnew_strS__ref)) us_t 
  (tnew_strS__content a))

(declare-datatypes ()
((tnew_subS__ref (tnew_subS__refqtmk (tnew_subS__content us_t)))))
(define-fun tnew_subS__ref_tnew_subS__content__projection ((a tnew_subS__ref)) us_t 
  (tnew_subS__content a))

(declare-datatypes () ((t11b__ref (t11b__refqtmk (t11b__content us_t)))))
(define-fun t11b__ref_t11b__content__projection ((a t11b__ref)) us_t 
  (t11b__content a))

(define-fun dynamic_invariant2 ((temp___expr_182 us_t)
  (temp___is_init_178 Bool) (temp___skip_constant_179 Bool)
  (temp___do_toplevel_180 Bool)
  (temp___do_typ_inv_181 Bool)) Bool (=>
                                     (not (= temp___skip_constant_179 true))
                                     (and (dynamic_property (first1 str)
                                     (last1 str) (first1 temp___expr_182)
                                     (last1 temp___expr_182))
                                     (and
                                     (= (first1 temp___expr_182) (first1 str))
                                     (= (last1 temp___expr_182) (last1 str))))))

(define-fun default_initial_assumption ((temp___expr_184 us_t)
  (temp___skip_top_level_185 Bool)) Bool (and
                                         (= (first1 temp___expr_184) 
                                         (first1 str))
                                         (= (last1 temp___expr_184) (last1
                                                                    str))))

(define-fun dynamic_invariant3 ((temp___expr_192 us_t)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)
  (temp___do_typ_inv_191 Bool)) Bool (=>
                                     (not (= temp___skip_constant_189 true))
                                     (and (dynamic_property (first1 sub)
                                     (last1 sub) (first1 temp___expr_192)
                                     (last1 temp___expr_192))
                                     (and
                                     (= (first1 temp___expr_192) (first1 sub))
                                     (= (last1 temp___expr_192) (last1 sub))))))

(define-fun default_initial_assumption1 ((temp___expr_194 us_t)
  (temp___skip_top_level_195 Bool)) Bool (and
                                         (= (first1 temp___expr_194) 
                                         (first1 sub))
                                         (= (last1 temp___expr_194) (last1
                                                                    sub))))

(define-fun dynamic_invariant4 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant5 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(declare-const new_str (Array Int character))

(declare-const new_sub (Array Int character))

;; Assume
  (assert (dynamic_invariant1 str true false true true))

;; Assume
  (assert (dynamic_invariant1 sub true false true true))

;; Assume
  (assert (default_initial_assumption
  (of_array new_str (to_rep1 new_str__first) (to_rep1 new_str__last)) false))

;; Assume
  (assert
  (and (dynamic_property (first1 str) (last1 str) (to_rep1 new_str__first)
  (to_rep1 new_str__last))
  (and (= (to_rep1 new_str__first) (first1 str))
  (= (to_rep1 new_str__last) (last1 str)))))

;; Assume
  (assert (default_initial_assumption1
  (of_array new_sub (to_rep1 new_sub__first) (to_rep1 new_sub__last)) false))

;; Assume
  (assert
  (and (dynamic_property (first1 sub) (last1 sub) (to_rep1 new_sub__first)
  (to_rep1 new_sub__last))
  (and (= (to_rep1 new_sub__first) (first1 sub))
  (= (to_rep1 new_sub__last) (last1 sub)))))

(declare-const pos Int)

;; H
  (assert (= pos (first1 str)))

;; Assume
  (assert (dynamic_invariant pos true false true true))

(define-fun o () us_t str)

(define-fun temp___236 () us_t (upper_case o))

;; H
  (assert (upper_case__function_guard temp___236 o))

;; H
  (assert (dynamic_invariant1 temp___236 true false true true))

;; Assert
  (assert
  (ite (<= (first1 temp___236) (last1 temp___236))
  (and (<= (first1 str) (last1 str))
  (= (- (last1 temp___236) (first1 temp___236)) (- (last1 str) (first1 str))))
  (< (last1 str) (first1 str))))

(define-fun temp___237 () us_t (of_array
                               (slide (to_array temp___236)
                               (first1 temp___236) (first1 str)) (first1 str)
                               (last1 str)))

;; Assert
  (assert
  (ite (<= (first1 temp___237) (last1 temp___237))
  (and (<= (to_rep1 new_str__first) (to_rep1 new_str__last))
  (= (- (last1 temp___237) (first1 temp___237)) (- (to_rep1 new_str__last) 
  (to_rep1 new_str__first))))
  (< (to_rep1 new_str__last) (to_rep1 new_str__first))))

(declare-const new_str1 (Array Int character))

;; H
  (assert (= new_str1 (to_array temp___237)))

(define-fun o1 () us_t sub)

(define-fun temp___238 () us_t (upper_case o1))

;; H
  (assert (upper_case__function_guard temp___238 o1))

;; H
  (assert (dynamic_invariant1 temp___238 true false true true))

;; Assert
  (assert
  (ite (<= (first1 temp___238) (last1 temp___238))
  (and (<= (first1 sub) (last1 sub))
  (= (- (last1 temp___238) (first1 temp___238)) (- (last1 sub) (first1 sub))))
  (< (last1 sub) (first1 sub))))

(define-fun temp___239 () us_t (of_array
                               (slide (to_array temp___238)
                               (first1 temp___238) (first1 sub)) (first1 sub)
                               (last1 sub)))

;; Assert
  (assert
  (ite (<= (first1 temp___239) (last1 temp___239))
  (and (<= (to_rep1 new_sub__first) (to_rep1 new_sub__last))
  (= (- (last1 temp___239) (first1 temp___239)) (- (to_rep1 new_sub__last) 
  (to_rep1 new_sub__first))))
  (< (to_rep1 new_sub__last) (to_rep1 new_sub__first))))

(declare-const new_sub1 (Array Int character))

;; H
  (assert (= new_sub1 (to_array temp___239)))

(declare-const o2 Bool)

(declare-const o3 Int)

;; Ensures
  (assert (= (to_rep1 new_sub__last) o3))

(declare-const o4 Int)

;; Ensures
  (assert (= (to_rep1 new_sub__first) o4))

;; H
  (assert (in_range1 (length o4 o3)))

(declare-const o5 Int)

;; H
  (assert (= (to_rep1 new_str__last) o5))

;; H
  (assert (in_range1 (- o5 (length o4 o3))))

;; H
  (assert (in_range1 (+ (- o5 (length o4 o3)) 1)))

(declare-const o6 Int)

(declare-const o7 Int)

(declare-const o8 Int)

(declare-const o9 Int)

;; H
  (assert
  (ite (<= pos (+ (- o5 (length o4 o3)) 1))
  (and (= (to_rep1 new_sub__last) o6)
  (and (= (to_rep1 new_sub__first) o7)
  (let ((o10 (length o7 o6)))
  (and (in_range1 o10)
  (let ((o11 (+ pos o10)))
  (and (in_range1 o11)
  (let ((o12 (- o11 1)))
  (and (in_range1 o12)
  (and
  (=> (<= pos o12)
  (and
  (and (<= (to_rep1 new_str__first) pos) (<= pos (to_rep1 new_str__last)))
  (and (<= (to_rep1 new_str__first) o12) (<= o12 (to_rep1 new_str__last)))))
  (let ((temp___243 (of_array new_str1 pos o12)))
  (and (= (to_rep1 new_sub__last) o8)
  (and (= (to_rep1 new_sub__first) o9)
  (= o2 (ite (= (bool_eq (to_array temp___243) (first1 temp___243)
                (last1 temp___243) new_sub1 o9 o8) true)
        false true))))))))))))))
  (= o2 false)))

;; H
  (assert (= o2 true))

(declare-const pos1 Int)

;; H
  (assert
  (= (and (ite (dynamic_invariant pos1 true true true true) true false) 
  (ite (and
       (<= pos1 (+ (- (to_rep1 new_str__last) (length
                                              (to_rep1 new_sub__first)
                                              (to_rep1 new_sub__last))) 1))
       (not
       (= (let ((temp___246 (of_array new_str1 pos1
                            (- (+ pos1 (length (to_rep1 new_sub__first)
                                       (to_rep1 new_sub__last))) 1))))
          (bool_eq (to_array temp___246) (first1 temp___246)
          (last1 temp___246) new_sub1 (to_rep1 new_sub__first)
          (to_rep1 new_sub__last))) true)))
  true false)) true))

(define-fun o10 () Int (+ pos1 1))

(assert
;; defqtvc
 ;; File "fb20a00.ads", line 43, characters 0-0
  (not (in_range1 o10)))
(check-sat)
