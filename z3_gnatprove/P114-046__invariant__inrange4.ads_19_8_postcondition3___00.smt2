(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 64) Int) Bool)

(declare-fun lsr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i)
                                         (<= i 18446744073709551615)))

(declare-fun nth_bv ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 64))))))
(declare-fun power ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const var (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const bottom (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const range_size (_ BitVec 64))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-sort unsigned64 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq (unsigned64 unsigned64) Bool)

(declare-const dummy unsigned64)

(declare-datatypes ()
((unsigned64__ref (unsigned64__refqtmk (unsigned64__content unsigned64)))))
(define-fun unsigned64__ref_unsigned64__content__projection ((a unsigned64__ref)) unsigned64 
  (unsigned64__content a))

(define-fun dynamic_invariant ((temp___expr_166 (_ BitVec 64))
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool true)

(declare-sort unsigned_64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (unsigned_64 unsigned_64) Bool)

(declare-const dummy1 unsigned_64)

(declare-datatypes ()
((unsigned_64__ref (unsigned_64__refqtmk (unsigned_64__content unsigned_64)))))
(define-fun unsigned_64__ref_unsigned_64__content__projection ((a unsigned_64__ref)) unsigned_64 
  (unsigned_64__content a))

(declare-fun to_rep (unsigned_64) (_ BitVec 64))

(declare-fun of_rep ((_ BitVec 64)) unsigned_64)

;; inversion_axiom
  (assert
  (forall ((x unsigned_64))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x unsigned_64)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x unsigned_64)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(define-fun dynamic_property ((first_int (_ BitVec 64))
  (last_int (_ BitVec 64))
  (x (_ BitVec 64))) Bool (and (bvule first_int x) (bvule x last_int)))

(define-fun dynamic_property_int ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (unsigned_64 unsigned_64) Bool)

(declare-const dummy2 unsigned_64)

(declare-datatypes () ((t1b__ref (t1b__refqtmk (t1b__content unsigned_64)))))
(define-fun t1b__ref_t1b__content__projection ((a t1b__ref)) unsigned_64 
  (t1b__content a))

(define-fun dynamic_invariant1 ((temp___expr_159 (_ BitVec 64))
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)

;; Assume
  (assert (dynamic_invariant var true false true true))

;; Assume
  (assert (dynamic_invariant bottom true false true true))

;; Assume
  (assert (dynamic_invariant range_size true false true true))

;; Assume
  (assert
  (and (bvuge range_size #x0000000000000002)
  (bvule range_size #x000000000000FFFF)))

(declare-const matched Bool)

;; H
  (assert (= matched (distinct 0 0)))

(declare-const i (_ BitVec 64))

;; H
  (assert (= i #x0000000000000000))

;; Assume
  (assert (dynamic_invariant i true false true true))

(declare-const matched1 Bool)

(declare-const i1 (_ BitVec 64))

;; H
  (assert (= i1 #x0000000000000000))

;; H
  (assert
  (let ((temp___170 (bvsub range_size #x0000000000000001)))
  (ite (= (and (ite (bvule #x0000000000000000 i1) true false) (ite (bvule 
                                                              i1 temp___170)
                                                              true false)) true)
  (or
  (and
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= var (bvadd bottom i1)) true false))
  (and (not (= spark__branch true))
  (exists ((i2 (_ BitVec 64)))
  (and
  (and
  (forall ((k (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 k) (bvule k i2))
  (not (= var (bvadd bottom k))))) (not (= matched true)))
  (and
  (= (and (ite (dynamic_property #x0000000000000000
          (bvsub range_size #x0000000000000001) i2) true false) (ite 
                                                                (and
                                                                (bvule #x0000000000000000 i2)
                                                                (bvule i2 (bvsub 
                                                                range_size #x0000000000000001)))
                                                                true false)) true)
  (= i2 temp___170))))))) (= matched1 matched))
  (and
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= var (bvadd bottom i1)) true false))
  (or (= spark__branch true)
  (exists ((i2 (_ BitVec 64)))
  (and
  (and
  (forall ((k (_ BitVec 64)))
  (=> (and (bvule #x0000000000000000 k) (bvule k i2))
  (not (= var (bvadd bottom k))))) (not (= matched true)))
  (and
  (= (and (ite (dynamic_property #x0000000000000000
          (bvsub range_size #x0000000000000001) i2) true false) (ite 
                                                                (and
                                                                (bvule #x0000000000000000 i2)
                                                                (bvule i2 (bvsub 
                                                                range_size #x0000000000000001)))
                                                                true false)) true)
  (and (not (= i2 temp___170))
  (exists ((i3 (_ BitVec 64)))
  (and (= i3 (bvadd i2 #x0000000000000001))
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (= var (bvadd bottom i3)) true false))
  (= spark__branch1 true)))))))))))) (= matched1 (distinct 1 0))))
  (= matched1 matched))))

(declare-const inrange4__inrange64__result Bool)

;; H
  (assert (= inrange4__inrange64__result matched1))

;; H
  (assert (= inrange4__inrange64__result true))

(assert
;; defqtvc
 ;; File "inrange4.ads", line 15, characters 0-0
  (not
  (exists ((k (_ BitVec 64)))
  (and
  (and (bvule #x0000000000000000 k)
  (bvule k (bvsub range_size #x0000000000000001))) (= var (bvadd bottom k))))))
(check-sat)
