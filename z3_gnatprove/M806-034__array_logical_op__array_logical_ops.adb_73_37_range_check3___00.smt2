;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort only_true 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (only_true only_true) Bool)

(declare-const dummy1 only_true)

(declare-datatypes ()
((only_true__ref (only_true__refqtmk (only_true__content only_true)))))
(define-fun only_true__ref_only_true__content__projection ((a only_true__ref)) only_true 
  (only_true__content a))

(declare-fun to_rep1 (only_true) Int)

(declare-fun of_rep1 (Int) only_true)

;; inversion_axiom
  (assert
  (forall ((x only_true))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x only_true)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int only_true))))))
(declare-fun slide ((Array Int only_true) Int Int) (Array Int only_true))

;; slide_eq
  (assert
  (forall ((a (Array Int only_true)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int only_true)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int only_true)) (a__first Int) (a__last Int)
  (b (Array Int only_true)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep1 (select a temp___idx_155)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int only_true)) (b (Array Int only_true)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep1 (select a temp___idx_155)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int only_true))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int only_true) (elts a))

(define-fun of_array ((a (Array Int only_true)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ()
((true_array__ref (true_array__refqtmk (true_array__content us_t)))))
(define-fun true_array__ref_true_array__content__projection ((a true_array__ref)) us_t 
  (true_array__content a))

(declare-const w us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const v us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const r1 us_t)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const r2 us_t)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun to_bool ((x only_true)) Bool (distinct (to_rep1 x) 0))

(define-fun of_bool ((x Bool)) only_true (of_rep1 (ite x 1 0)))

(declare-fun xorb ((Array Int only_true) Int Int (Array Int only_true) Int
  Int) (Array Int only_true))

(declare-fun andb ((Array Int only_true) Int Int (Array Int only_true) Int
  Int) (Array Int only_true))

(declare-fun orb ((Array Int only_true) Int Int (Array Int only_true) Int
  Int) (Array Int only_true))

(declare-fun notb ((Array Int only_true) Int Int) (Array Int only_true))

;; op_def
  (assert
  (forall ((a (Array Int only_true)) (b (Array Int only_true)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (orb a a_first a_last b b_first b_last) i) (of_bool
                                                           (or (to_bool
                                                               (select a i)) 
                                                           (to_bool
                                                           (select b (+ (- i a_first) b_first))))))) :pattern ((select 
  (orb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int only_true)) (b (Array Int only_true)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (andb a a_first a_last b b_first b_last) i) (of_bool
                                                            (and (to_bool
                                                                 (select a i)) 
                                                            (to_bool
                                                            (select b (+ (- i a_first) b_first))))))) :pattern ((select 
  (andb a a_first a_last b b_first b_last) i)) )))))

;; op_def
  (assert
  (forall ((a (Array Int only_true)) (b (Array Int only_true)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (xorb a a_first a_last b b_first b_last) i) (of_bool
                                                            (xor (to_bool
                                                                 (select a i)) 
                                                            (to_bool
                                                            (select b (+ (- i a_first) b_first))))))) :pattern ((select 
  (xorb a a_first a_last b b_first b_last) i)) )))))

;; notb_def
  (assert
  (forall ((a (Array Int only_true)))
  (forall ((a_first Int) (a_last Int))
  (forall ((i Int))
  (! (=> (and (<= a_first i) (<= i a_last))
     (= (select (notb a a_first a_last) i) (of_bool
                                           (not (to_bool (select a i)))))) :pattern ((select 
  (notb a a_first a_last) i)) )))))

(define-fun dynamic_invariant ((temp___expr_248 us_t)
  (temp___is_init_244 Bool) (temp___skip_constant_245 Bool)
  (temp___do_toplevel_246 Bool)
  (temp___do_typ_inv_247 Bool)) Bool (=>
                                     (not (= temp___skip_constant_245 true))
                                     (dynamic_property (- 2147483648)
                                     2147483647 (first1 temp___expr_248)
                                     (last1 temp___expr_248))))

(declare-sort t46b 0)

(declare-fun t46bqtint (t46b) Int)

;; t46b'axiom
  (assert
  (forall ((i t46b)) (and (<= 1 (t46bqtint i)) (<= (t46bqtint i) 20))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (t46b t46b) Bool)

(declare-const dummy3 t46b)

(declare-datatypes () ((t46b__ref (t46b__refqtmk (t46b__content t46b)))))
(define-fun t46b__ref_t46b__content__projection ((a t46b__ref)) t46b 
  (t46b__content a))

(declare-fun array_logical_ops__failing_content_check__w__aggregate_def (Int) (Array Int only_true))

(declare-sort t48b 0)

(declare-fun t48bqtint (t48b) Int)

;; t48b'axiom
  (assert
  (forall ((i t48b)) (and (<= 6 (t48bqtint i)) (<= (t48bqtint i) 25))))

(define-fun in_range4 ((x Int)) Bool (and (<= 6 x) (<= x 25)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (t48b t48b) Bool)

(declare-const dummy4 t48b)

(declare-datatypes () ((t48b__ref (t48b__refqtmk (t48b__content t48b)))))
(define-fun t48b__ref_t48b__content__projection ((a t48b__ref)) t48b 
  (t48b__content a))

(declare-fun array_logical_ops__failing_content_check__v__aggregate_def (Int) (Array Int only_true))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

;; w__def_axiom
  (assert
  (= w (of_array
       (array_logical_ops__failing_content_check__w__aggregate_def 1) 1 20)))

(define-fun dynamic_invariant2 ((temp___expr_241 Int)
  (temp___is_init_237 Bool) (temp___skip_constant_238 Bool)
  (temp___do_toplevel_239 Bool)
  (temp___do_typ_inv_240 Bool)) Bool (=>
                                     (or (= temp___is_init_237 true)
                                     (<= 1 1)) (in_range2 temp___expr_241)))

;; def_axiom
  (assert
  (forall ((temp___216 Int))
  (=> (dynamic_invariant2 temp___216 true true true true)
  (forall ((temp___217 Int))
  (= (to_rep1
     (select (array_logical_ops__failing_content_check__w__aggregate_def
             temp___216) temp___217)) temp___216)))))

;; v__def_axiom
  (assert
  (= v (of_array
       (array_logical_ops__failing_content_check__v__aggregate_def 1) 6 25)))

;; def_axiom
  (assert
  (forall ((temp___219 Int))
  (=> (dynamic_invariant2 temp___219 true true true true)
  (forall ((temp___220 Int))
  (= (to_rep1
     (select (array_logical_ops__failing_content_check__v__aggregate_def
             temp___219) temp___220)) temp___219)))))

;; r1__def_axiom
  (assert
  (= r1 (of_array
        (xorb (to_array v) (first1 v) (last1 v) (to_array w) (first1 w)
        (last1 w)) (first1 v) (last1 v))))

;; r2__def_axiom
  (assert
  (= r2 (of_array (notb (to_array v) (first1 v) (last1 v)) (first1 v)
        (last1 v))))

;; Assume
  (assert
  (= (of_array (array_logical_ops__failing_content_check__w__aggregate_def 1)
     1 20) w))

;; Assume
  (assert (dynamic_invariant w true false true true))

;; Assume
  (assert
  (= (of_array (array_logical_ops__failing_content_check__v__aggregate_def 1)
     6 25) v))

;; Assume
  (assert (dynamic_invariant v true false true true))

;; H
  (assert (< 0 (length (first1 v) (last1 v))))

(assert
;; defqtvc
 ;; File "array_logical_ops.ads", line 24, characters 0-0
  (not false))
(check-sat)
