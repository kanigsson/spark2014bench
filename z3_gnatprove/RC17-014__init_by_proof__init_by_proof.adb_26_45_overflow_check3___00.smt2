(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort my_int 0)

(declare-fun my_intqtint (my_int) Int)

;; my_int'axiom
  (assert
  (forall ((i my_int))
  (and (<= (- 2147483648) (my_intqtint i)) (<= (my_intqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (my_int my_int) Bool)

(declare-const dummy3 my_int)

(declare-datatypes ()
((my_int__ref (my_int__refqtmk (my_int__content my_int)))))
(define-fun my_int__ref_my_int__content__projection ((a my_int__ref)) my_int 
  (my_int__content a))

(declare-datatypes ()
((my_int__init_wrapper
 (my_int__init_wrapperqtmk (rec__value my_int)(attr__init Bool)))))
(define-fun my_int__init_wrapper_rec__value__projection ((a my_int__init_wrapper)) my_int 
  (rec__value a))

(define-fun my_int__init_wrapper_attr__init__projection ((a my_int__init_wrapper)) Bool 
  (attr__init a))

(define-fun to_rep1 ((x my_int)) Int (my_intqtint x))

(declare-fun of_rep1 (Int) my_int)

;; inversion_axiom
  (assert
  (forall ((x my_int))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x my_int)) (! (in_range4 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int my_int__init_wrapper))))))
(declare-fun slide ((Array Int my_int__init_wrapper) Int
  Int) (Array Int my_int__init_wrapper))

;; slide_eq
  (assert
  (forall ((a (Array Int my_int__init_wrapper)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int my_int__init_wrapper)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int my_int__init_wrapper)) (a__first Int)
  (a__last Int) (b (Array Int my_int__init_wrapper)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep1
                              (rec__value (select a temp___idx_156))) 
                           (to_rep1
                           (rec__value
                           (select b (+ (- b__first a__first) temp___idx_156))))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int my_int__init_wrapper))
  (b (Array Int my_int__init_wrapper)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep1 (rec__value (select a temp___idx_156))) (to_rep1
                                                      (rec__value
                                                      (select b (+ (- b__first a__first) temp___idx_156))))))))))))

(declare-const buf__first integer)

(declare-const buf__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const size Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r16b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes ()
((us_t (us_tqtmk (elts (Array Int my_int__init_wrapper))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int my_int__init_wrapper) (elts a))

(define-fun of_array ((a (Array Int my_int__init_wrapper)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((int_array__ref (int_array__refqtmk (int_array__content us_t)))))
(define-fun int_array__ref_int_array__content__projection ((a int_array__ref)) us_t 
  (int_array__content a))

(declare-datatypes () ((t13b__ref (t13b__refqtmk (t13b__content us_t)))))
(define-fun t13b__ref_t13b__content__projection ((a t13b__ref)) us_t 
  (t13b__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (integer integer) Bool)

(declare-const dummy5 integer)

(declare-datatypes () ((t17b__ref (t17b__refqtmk (t17b__content integer)))))
(define-fun t17b__ref_t17b__content__projection ((a t17b__ref)) integer 
  (t17b__content a))

(declare-datatypes () ((t21b__ref (t21b__refqtmk (t21b__content us_t)))))
(define-fun t21b__ref_t21b__content__projection ((a t21b__ref)) us_t 
  (t21b__content a))

(declare-datatypes () ((t23b__ref (t23b__refqtmk (t23b__content us_t)))))
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) us_t 
  (t23b__content a))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_190 Int)
  (temp___is_init_186 Bool) (temp___skip_constant_187 Bool)
  (temp___do_toplevel_188 Bool)
  (temp___do_typ_inv_189 Bool)) Bool (=>
                                     (or (= temp___is_init_186 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range4 temp___expr_190)))

(define-fun dynamic_invariant4 ((temp___expr_197 us_t)
  (temp___is_init_193 Bool) (temp___skip_constant_194 Bool)
  (temp___do_toplevel_195 Bool)
  (temp___do_typ_inv_196 Bool)) Bool (=>
                                     (not (= temp___skip_constant_194 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_197)
                                     (last1 temp___expr_197))))

(declare-const buf (Array Int my_int__init_wrapper))

(declare-const error Bool)

;; Assume
  (assert (dynamic_property 1 2147483647 (to_rep buf__first)
  (to_rep buf__last)))

;; Assume
  (assert (dynamic_invariant size true false true true))

;; Assume
  (assert (<= size (length (to_rep buf__first) (to_rep buf__last))))

(declare-const buf1 (Array Int my_int__init_wrapper))

(declare-const error1 Bool)

;; H
  (assert (in_range2 (mod2 size 4)))

(declare-const offset Int)

;; H
  (assert (= offset (mod2 size 4)))

;; H
  (assert (dynamic_invariant offset true false true true))

;; H
  (assert (in_range2 (div1 size 4)))

(declare-const nb_chunks Int)

;; H
  (assert (= nb_chunks (div1 size 4)))

;; H
  (assert (dynamic_invariant nb_chunks true false true true))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= offset 0) false true)))

(declare-const loop_var Int)

;; H
  (assert
  (ite (= spark__branch true) (and (= error1 (distinct 1 0)) (= buf1 buf))
  (and (= (- nb_chunks 1) r16b)
  (and (dynamic_invariant1 r16b true false true true)
  (let ((temp___301 r16b))
  (and (= loop_var 0)
  (ite (= (and (ite (<= 0 loop_var) true false) (ite (<= loop_var temp___301)
                                                true false)) true)
  (let ((o (* loop_var 4)))
  (and (in_range1 o)
  (exists ((o1 Int))
  (and (= (to_rep buf__first) o1)
  (let ((o2 (+ o1 o)))
  (and (in_range1 o2)
  (let ((o3 (- o2 1)))
  (and (in_range1 o3)
  (exists ((temp___315 Int))
  (and (= (to_rep buf__first) temp___315)
  (and
  (=> (<= temp___315 o3)
  (and
  (and (<= (to_rep buf__first) temp___315)
  (<= temp___315 (to_rep buf__last)))
  (and (<= (to_rep buf__first) o3) (<= o3 (to_rep buf__last)))))
  (exists ((buf2 (Array Int my_int__init_wrapper)) (loop_var1 Int))
  (and
  (let ((temp___322 (of_array buf2 (to_rep buf__first)
                    (- (+ (to_rep buf__first) (* loop_var1 4)) 1))))
  (forall ((temp___323 Int))
  (=>
  (and (<= (first1 temp___322) temp___323)
  (<= temp___323 (last1 temp___322)))
  (= (attr__init (select (to_array temp___322) temp___323)) true))))
  (and
  (= (and (ite (dynamic_property1 0 r16b loop_var1) true false) (ite 
                                                                (and
                                                                (<= 0 loop_var1)
                                                                (<= loop_var1 
                                                                r16b)) true
                                                                false)) true)
  (let ((o4 (* loop_var1 4)))
  (and (in_range1 o4)
  (exists ((o5 Int))
  (and (= (to_rep buf__first) o5)
  (let ((o6 (+ o5 o4)))
  (and (in_range1 o6)
  (let ((o7 (+ o6 3)))
  (and (in_range1 o7)
  (let ((o8 (* loop_var1 4)))
  (and (in_range1 o8)
  (exists ((o9 Int))
  (and (= (to_rep buf__first) o9)
  (let ((o10 (+ o9 o8)))
  (and (in_range1 o10)
  (and
  (=> (<= o10 o7)
  (and (and (<= (to_rep buf__first) o10) (<= o10 (to_rep buf__last)))
  (and (<= (to_rep buf__first) o7) (<= o7 (to_rep buf__last)))))
  (let ((init_by_proof__init_by_4__a__compl (of_array buf2 o10 o7)))
  (exists ((o11 integer))
  (and (= (to_rep o11) (last1 init_by_proof__init_by_4__a__compl))
  (exists ((o12 integer))
  (and (= (to_rep o12) (first1 init_by_proof__init_by_4__a__compl))
  (exists ((init_by_proof__init_by_4__a (Array Int my_int__init_wrapper))
  (o13 (Array Int my_int__init_wrapper)))
  (and (= o13 init_by_proof__init_by_4__a)
  (and
  (=> (not (= error1 true))
  (forall ((temp___206 Int))
  (=> (and (<= (to_rep o12) temp___206) (<= temp___206 (to_rep o11)))
  (= (attr__init (select o13 temp___206)) true))))
  (let ((temp___304 (of_array init_by_proof__init_by_4__a
                    (first1 init_by_proof__init_by_4__a__compl)
                    (last1 init_by_proof__init_by_4__a__compl))))
  (exists ((o14 Int))
  (and (= (to_rep buf__first) o14)
  (exists ((o15 Int))
  (and (= (to_rep buf__first) o15)
  (exists ((o16 Int))
  (and (= (to_rep buf__first) o16)
  (exists ((usf (Array Int my_int__init_wrapper)))
  (and
  (forall ((temp___306 Int))
  (ite (and (<= (+ (to_rep buf__first) (* loop_var1 4)) temp___306)
       (<= temp___306 (+ (+ (to_rep buf__first) (* loop_var1 4)) 3)))
  (= (select usf temp___306) (select (to_array
                                     (of_array
                                     (slide (to_array temp___304)
                                     (first1 temp___304)
                                     (+ o16 (* loop_var1 4)))
                                     (+ o15 (* loop_var1 4))
                                     (+ (+ o14 (* loop_var1 4)) 3))) temp___306))
  (= (select usf temp___306) (select buf2 temp___306))))
  (and (= buf1 usf) (or (= error1 true) (= loop_var1 temp___301)))))))))))))))))))))))))))))))))))))))))))))))))
  (and (= buf1 buf) (= error1 error)))))))))

;; H
  (assert (not (= error1 true)))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep buf__first) o))

(define-fun o1 () Int (+ o (- size 1)))

(assert
;; defqtvc
 ;; File "init_by_proof.adb", line 21, characters 0-0
  (not (in_range1 o1)))
(check-sat)

(exit)
