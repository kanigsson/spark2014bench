;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 16) Int) Bool)

(declare-fun lsr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 16))))))
(declare-fun power ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-const c (_ BitVec 16))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort mod_16 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 16))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 16))

(declare-fun user_eq1 (mod_16 mod_16) Bool)

(declare-const dummy1 mod_16)

(declare-datatypes ()
((mod_16__ref (mod_16__refqtmk (mod_16__content mod_16)))))
(define-fun mod_16__ref_mod_16__content__projection ((a mod_16__ref)) mod_16 
  (mod_16__content a))

(declare-fun to_rep (mod_16) (_ BitVec 16))

(declare-fun of_rep ((_ BitVec 16)) mod_16)

;; inversion_axiom
  (assert
  (forall ((x mod_16)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x mod_16)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x mod_16)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(define-fun to_rep1 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep1 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array (_ BitVec 16) natural))))))
(declare-fun slide ((Array (_ BitVec 16) natural) (_ BitVec 16)
  (_ BitVec 16)) (Array (_ BitVec 16) natural))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (forall ((first (_ BitVec 16)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 16) natural)))
  (forall ((old_first (_ BitVec 16)))
  (forall ((new_first (_ BitVec 16)))
  (forall ((i (_ BitVec 16)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 16) natural))
  (a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b (Array (_ BitVec 16) natural)) (b__first (_ BitVec 16))
  (b__last (_ BitVec 16))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_154 (_ BitVec 16)))
                                     (=>
                                     (and (bvule a__first temp___idx_154)
                                     (bvule temp___idx_154 a__last))
                                     (= (to_rep1 (select a temp___idx_154)) 
                                     (to_rep1
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 16) natural))
  (b (Array (_ BitVec 16) natural)))
  (forall ((a__first (_ BitVec 16)) (a__last (_ BitVec 16))
  (b__first (_ BitVec 16)) (b__last (_ BitVec 16)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 16)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep1 (select a temp___idx_154)) (to_rep1
                                         (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) mod_16)

(declare-fun last (t) mod_16)

(declare-fun mk ((_ BitVec 16) (_ BitVec 16)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 16)) (l (_ BitVec 16)))
  (! (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 16))
  (range_last (_ BitVec 16)) (low (_ BitVec 16))
  (high (_ BitVec 16))) Bool true)

(declare-datatypes ()
((us_t (us_tqtmk (elts (Array (_ BitVec 16) natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 16) natural) (elts a))

(define-fun of_array ((a (Array (_ BitVec 16) natural)) (f (_ BitVec 16))
  (l (_ BitVec 16))) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 16) (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 16) (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                  (+ (- (bv2int (last1 a)) (bv2int (first1 a))) 1)
                                  0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ()
((my_array__ref (my_array__refqtmk (my_array__content us_t)))))
(define-fun my_array__ref_my_array__content__projection ((a my_array__ref)) us_t 
  (my_array__content a))

(declare-const a__first mod_16)

(declare-const a__last mod_16)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant ((temp___expr_168 (_ BitVec 16))
  (temp___is_init_164 Bool) (temp___skip_constant_165 Bool)
  (temp___do_toplevel_166 Bool) (temp___do_typ_inv_167 Bool)) Bool true)

(declare-datatypes () ((taS__ref (taS__refqtmk (taS__content us_t)))))
(define-fun taS__ref_taS__content__projection ((a taS__ref)) us_t (taS__content
                                                                  a))

(declare-datatypes () ((t2b__ref (t2b__refqtmk (t2b__content us_t)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) us_t (t2b__content
                                                                  a))

(declare-fun bv_arrays__create__a__aggregate_def (Int (_ BitVec 16)
  (_ BitVec 16)) us_t)

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 0))

;; def_axiom
  (assert
  (forall ((temp___190 Int))
  (forall ((temp___191 (_ BitVec 16)) (temp___192 (_ BitVec 16)))
  (let ((temp___189 (bv_arrays__create__a__aggregate_def temp___190
                    temp___191 temp___192)))
  (=> (dynamic_invariant1 temp___190 true true true true)
  (and
  (=> (dynamic_property #x0000 #xFFFF temp___191 temp___192)
  (and (= (first1 temp___189) temp___191) (= (last1 temp___189) temp___192)))
  (forall ((temp___193 (_ BitVec 16)))
  (= (select (to_array temp___189) temp___193) rliteral))))))))

(define-fun dynamic_invariant2 ((temp___expr_175 us_t)
  (temp___is_init_171 Bool) (temp___skip_constant_172 Bool)
  (temp___do_toplevel_173 Bool)
  (temp___do_typ_inv_174 Bool)) Bool (=>
                                     (not (= temp___skip_constant_172 true))
                                     (dynamic_property #x0000 #xFFFF
                                     (first1 temp___expr_175)
                                     (last1 temp___expr_175))))

(define-fun dynamic_invariant3 ((temp___expr_183 us_t)
  (temp___is_init_179 Bool) (temp___skip_constant_180 Bool)
  (temp___do_toplevel_181 Bool)
  (temp___do_typ_inv_182 Bool)) Bool (=>
                                     (not (= temp___skip_constant_180 true))
                                     (and (dynamic_property #x0000 c
                                     (first1 temp___expr_183)
                                     (last1 temp___expr_183))
                                     (and (= (first1 temp___expr_183) #x0000)
                                     (= (last1 temp___expr_183) c)))))

(define-fun default_initial_assumption ((temp___expr_185 us_t)
  (temp___skip_top_level_186 Bool)) Bool (and
                                         (= (first1 temp___expr_185) #x0000)
                                         (= (last1 temp___expr_185) c)))

;; Assume
  (assert (dynamic_invariant c true false true true))

(define-fun temp___194 () us_t (bv_arrays__create__a__aggregate_def 0 #x0000
                               c))

;; Assume
  (assert (= (first1 temp___194) #x0000))

;; Assume
  (assert (= (last1 temp___194) c))

;; Assert
  (assert
  (ite (bvule (first1 temp___194) (last1 temp___194))
  (and (bvule #x0000 c)
  (= (bvsub (last1 temp___194) (first1 temp___194)) (bvsub c #x0000)))
  (bvult c #x0000)))

(define-fun bv_arrays__create__a__assume () us_t (of_array
                                                 (to_array temp___194)
                                                 (first1 temp___194)
                                                 (last1 temp___194)))

(declare-const a (Array (_ BitVec 16) natural))

;; H
  (assert (= a (to_array bv_arrays__create__a__assume)))

;; Assume
  (assert (= (to_rep a__first) (first1 bv_arrays__create__a__assume)))

;; Assume
  (assert (= (to_rep a__last) (last1 bv_arrays__create__a__assume)))

;; Assume
  (assert
  (and (dynamic_property #x0000 c (to_rep a__first) (to_rep a__last))
  (and (= (to_rep a__first) #x0000) (= (to_rep a__last) c))))

(declare-const o (_ BitVec 16))

;; Ensures
  (assert (= (to_rep a__last) o))

(declare-const o1 (_ BitVec 16))

;; Ensures
  (assert (= (to_rep a__first) o1))

(declare-const bv_arrays__create__result us_t)

;; H
  (assert (= bv_arrays__create__result (of_array a o1 o)))

(assert
;; defqtvc
 ;; File "bv_arrays.ads", line 9, characters 0-0
  (not (= (first1 bv_arrays__create__result) #x0000)))
(check-sat)
