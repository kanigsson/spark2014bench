;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite64 ((x Float64)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral64 ((x Float64)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float64)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float64)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float64)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float64)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 9007199254740992) i)
                                             (<= i 9007199254740992)))

(define-fun same_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float64)
  (y Float64)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float64) (x Float64)
  (y Float64)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float64)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float64)))))
(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort coordinate_type 0)

(define-fun in_range3 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq4 (coordinate_type coordinate_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE3 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Float64)

(declare-const dummy4 coordinate_type)

(declare-datatypes ()
((coordinate_type__ref
 (coordinate_type__refqtmk (coordinate_type__content coordinate_type)))))
(define-fun coordinate_type__ref_coordinate_type__content__projection ((a coordinate_type__ref)) coordinate_type 
  (coordinate_type__content a))

(declare-fun to_rep2 (coordinate_type) Float64)

(declare-fun of_rep2 (Float64) coordinate_type)

;; inversion_axiom
  (assert
  (forall ((x coordinate_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x coordinate_type)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort radius_type 0)

(define-fun in_range4 ((x Float64)) Bool (and (fp.isFinite64 x)
                                         (and
                                         (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) x)
                                         (fp.leq x (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))))

(declare-fun user_eq5 (radius_type radius_type) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE4 (Float64) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Float64)

(declare-const dummy5 radius_type)

(declare-datatypes ()
((radius_type__ref (radius_type__refqtmk (radius_type__content radius_type)))))
(define-fun radius_type__ref_radius_type__content__projection ((a radius_type__ref)) radius_type 
  (radius_type__content a))

(declare-fun to_rep3 (radius_type) Float64)

(declare-fun of_rep3 (Float64) radius_type)

;; inversion_axiom
  (assert
  (forall ((x radius_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x radius_type)) (! (in_range4
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float64))
  (! (=> (in_range4 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__shapes5__circle__center_x coordinate_type)(rec__shapes5__circle__center_y coordinate_type)(rec__shapes5__circle__radius radius_type)))))
(define-fun us_split_fields_rec__shapes5__circle__center_x__projection ((a us_split_fields)) coordinate_type 
  (rec__shapes5__circle__center_x a))

(define-fun us_split_fields_rec__shapes5__circle__center_y__projection ((a us_split_fields)) coordinate_type 
  (rec__shapes5__circle__center_y a))

(define-fun us_split_fields_rec__shapes5__circle__radius__projection ((a us_split_fields)) radius_type 
  (rec__shapes5__circle__radius a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (fp.eq (to_rep2
                               (rec__shapes5__circle__center_x
                               (us_split_fields1 a))) (to_rep2
                                                      (rec__shapes5__circle__center_x
                                                      (us_split_fields1 b))))
                        (fp.eq (to_rep2
                               (rec__shapes5__circle__center_y
                               (us_split_fields1 a))) (to_rep2
                                                      (rec__shapes5__circle__center_y
                                                      (us_split_fields1 b)))))
                        (fp.eq (to_rep3
                               (rec__shapes5__circle__radius
                               (us_split_fields1 a))) (to_rep3
                                                      (rec__shapes5__circle__radius
                                                      (us_split_fields1 b)))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const shapes5__circle__center_x__first__bit Int)

(declare-const shapes5__circle__center_x__last__bit Int)

(declare-const shapes5__circle__center_x__position Int)

;; shapes5__circle__center_x__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_x__first__bit))

;; shapes5__circle__center_x__last__bit_axiom
  (assert
  (< shapes5__circle__center_x__first__bit shapes5__circle__center_x__last__bit))

;; shapes5__circle__center_x__position_axiom
  (assert (<= 0 shapes5__circle__center_x__position))

(declare-const shapes5__circle__center_y__first__bit Int)

(declare-const shapes5__circle__center_y__last__bit Int)

(declare-const shapes5__circle__center_y__position Int)

;; shapes5__circle__center_y__first__bit_axiom
  (assert (<= 0 shapes5__circle__center_y__first__bit))

;; shapes5__circle__center_y__last__bit_axiom
  (assert
  (< shapes5__circle__center_y__first__bit shapes5__circle__center_y__last__bit))

;; shapes5__circle__center_y__position_axiom
  (assert (<= 0 shapes5__circle__center_y__position))

(declare-const shapes5__circle__radius__first__bit Int)

(declare-const shapes5__circle__radius__last__bit Int)

(declare-const shapes5__circle__radius__position Int)

;; shapes5__circle__radius__first__bit_axiom
  (assert (<= 0 shapes5__circle__radius__first__bit))

;; shapes5__circle__radius__last__bit_axiom
  (assert
  (< shapes5__circle__radius__first__bit shapes5__circle__radius__last__bit))

;; shapes5__circle__radius__position_axiom
  (assert (<= 0 shapes5__circle__radius__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((circle__ref (circle__refqtmk (circle__content us_rep)))))
(define-fun circle__ref_circle__content__projection ((a circle__ref)) us_rep 
  (circle__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun in_bounds (us_rep Int) Bool)

(declare-fun in_bounds__function_guard (Bool us_rep Int) Bool)

(declare-fun make_circle (Float64 Float64 Float64 Int) us_rep)

(declare-fun make_circle__function_guard (us_rep Float64 Float64 Float64
  Int) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(define-fun dynamic_invariant1 ((temp___expr_191 Float64)
  (temp___is_init_187 Bool) (temp___skip_constant_188 Bool)
  (temp___do_toplevel_189 Bool)
  (temp___do_typ_inv_190 Bool)) Bool (=>
                                     (or (= temp___is_init_187 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)) (fp #b0 #b10000000101 #b1001000000000000000000000000000000000000000000000000)))
                                     (in_range3 temp___expr_191)))

(define-fun dynamic_invariant2 ((temp___expr_198 Float64)
  (temp___is_init_194 Bool) (temp___skip_constant_195 Bool)
  (temp___do_toplevel_196 Bool)
  (temp___do_typ_inv_197 Bool)) Bool (=>
                                     (or (= temp___is_init_194 true)
                                     (fp.leq (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000) (fp #b0 #b10000000010 #b0100000000000000000000000000000000000000000000000000)))
                                     (in_range4 temp___expr_198)))

;; make_circle__post_axiom
  (assert
  (forall ((x Float64) (y Float64) (radius Float64))
  (forall ((shapes5__wild_man Int))
  (! (=>
     (and
     (and
     (and (dynamic_invariant1 x true true true true) (dynamic_invariant1 y
     true true true true)) (dynamic_invariant2 radius true true true true))
     (dynamic_invariant shapes5__wild_man true true true true))
     (let ((result (make_circle x y radius shapes5__wild_man)))
     (and
     (forall ((shapes5__wild_man1 Int) (result1 us_rep))
     (in_bounds__function_guard (in_bounds result1 shapes5__wild_man1)
     result1 shapes5__wild_man1))
     (=> (make_circle__function_guard result x y radius shapes5__wild_man)
     (= (in_bounds result shapes5__wild_man) true))))) :pattern ((make_circle
                                                                 x y radius
                                                                 shapes5__wild_man)) ))))

(declare-fun inside_circle (Float64 Float64 us_rep Int) Bool)

(declare-fun inside_circle__function_guard (Bool Float64 Float64 us_rep
  Int) Bool)

;; inside_circle__post_axiom
  (assert
  (forall ((c us_rep) (shapes5__wild_man Int)) (in_bounds__function_guard
  (in_bounds c shapes5__wild_man) c shapes5__wild_man)))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun temp___String_Literal_219 (tuple0) (Array Int character))

;; temp___String_Literal_219__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 2)) 104))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 3)) 101)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 4)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 5)) 111)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 6)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 7)) 105)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 8)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 9)) 105)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 10)) 110))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 11)) 32)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 12)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 13)) 115)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 14)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 15)) 105)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 16)) 110))
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 17)) 115))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 18)) 105)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 19)) 100))
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 20)) 101)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 21)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 22)) 116)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 23)) 104))
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 24)) 101)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 25)) 32)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 26)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 27)) 105)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 28)) 114)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 29)) 99)
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 30)) 108))
     (= (to_rep (select (temp___String_Literal_219 us_void_param) 31)) 101)))))) :pattern (
  (temp___String_Literal_219 us_void_param)) )))

(declare-fun temp___String_Literal_220 (tuple0) (Array Int character))

;; temp___String_Literal_220__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 1)) 84)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 2)) 104))
     (and
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 3)) 101)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 5)) 111))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 6)) 114)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 7)) 105)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 8)) 103)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 9)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 10)) 110)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 11)) 32))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 12)) 105)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 13)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 14)) 32)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 15)) 110)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 16)) 111)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 17)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 18)) 32)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 19)) 105)))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 20)) 110)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 21)) 115))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 22)) 105)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 23)) 100)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 24)) 101)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 25)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 26)) 116)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 27)) 104))))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 28)) 101)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 29)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 30)) 99)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 31)) 105)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 32)) 114)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 33)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 34)) 108)
     (= (to_rep (select (temp___String_Literal_220 us_void_param) 35)) 101))))))) :pattern (
  (temp___String_Literal_220 us_void_param)) )))

(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun dynamic_invariant5 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (count count) Bool)

(declare-const dummy7 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant6 ((temp___expr_163 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)
  (temp___do_typ_inv_162 Bool)) Bool (=>
                                     (or (= temp___is_init_159 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_163)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant6
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant6
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; in_bounds__post_axiom
  (assert true)

(declare-const my_circle__split_fields us_split_fields)

(declare-const wild_man Int)

;; Assume
  (assert (dynamic_invariant wild_man true false true true))

;; Assume
  (assert true)

;; Assume
  (assert true)

(define-fun temp___218 () us_rep (make_circle
                                 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                                 (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
                                 (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)
                                 wild_man))

;; H
  (assert
  (forall ((wild_man1 Int) (temp___2181 us_rep)) (in_bounds__function_guard
  (in_bounds temp___2181 wild_man1) temp___2181 wild_man1)))

;; H
  (assert (make_circle__function_guard temp___218
  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
  (fp #b0 #b00000000000 #b0000000000000000000000000000000000000000000000000000)
  (fp #b0 #b10000000001 #b0100000000000000000000000000000000000000000000000000)
  wild_man))

;; H
  (assert true)

;; H
  (assert (= (in_bounds temp___218 wild_man) true))

(declare-const my_circle__split_fields1 us_split_fields)

;; H
  (assert (= my_circle__split_fields1 (us_split_fields1 temp___218)))

(declare-const wild_man1 Int)

;; H
  (assert (= wild_man1 (- 1)))

(define-fun o () us_rep (us_repqtmk my_circle__split_fields1))

;; H
  (assert
  (forall ((wild_man2 Int) (o1 us_rep)) (in_bounds__function_guard
  (in_bounds o1 wild_man2) o1 wild_man2)))

(assert
;; defqtvc
 ;; File "circle_demo.adb", line 8, characters 0-0
  (not (= (in_bounds o wild_man1) true)))
(check-sat)
