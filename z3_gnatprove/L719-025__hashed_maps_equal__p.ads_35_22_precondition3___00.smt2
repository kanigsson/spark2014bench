(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort hash_type 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq (hash_type hash_type) Bool)

(declare-const dummy hash_type)

(declare-datatypes ()
((hash_type__ref (hash_type__refqtmk (hash_type__content hash_type)))))
(define-fun hash_type__ref_hash_type__content__projection ((a hash_type__ref)) hash_type 
  (hash_type__content a))

(declare-fun to_rep (hash_type) (_ BitVec 32))

(declare-fun of_rep ((_ BitVec 32)) hash_type)

;; inversion_axiom
  (assert
  (forall ((x hash_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 32)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int2 ((x hash_type)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x hash_type)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (count_type count_type) Bool)

(declare-const dummy1 count_type)

(declare-datatypes ()
((count_type__ref (count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep1 ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep1 (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__p__my_maps__map__capacity count_type)(rec__p__my_maps__map__modulus hash_type)))))
(define-fun us_split_discrs_rec__p__my_maps__map__capacity__projection ((a us_split_discrs)) count_type 
  (rec__p__my_maps__map__capacity a))

(define-fun us_split_discrs_rec__p__my_maps__map__modulus__projection ((a us_split_discrs)) hash_type 
  (rec__p__my_maps__map__modulus a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__p__my_maps__map us_main_type)))))
(define-fun us_split_fields_rec__p__my_maps__map__projection ((a us_split_fields)) us_main_type 
  (rec__p__my_maps__map a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__p__my_maps__map__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__p__my_maps__map__capacity
                                                  (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__p__my_maps__map__modulus
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__p__my_maps__map__modulus
                                                  (us_split_discrs1 b)))))
                        (= (us_main_eq
                           (rec__p__my_maps__map (us_split_fields1 a))
                           (rec__p__my_maps__map (us_split_fields1 b))) true))
                   true false))

(define-fun in_range2 ((rec__p__my_maps__map__capacity1 Int)
  (rec__p__my_maps__map__modulus1 (_ BitVec 32))
  (a us_split_discrs)) Bool (and
                            (= rec__p__my_maps__map__capacity1 (to_rep1
                                                               (rec__p__my_maps__map__capacity
                                                               a)))
                            (= rec__p__my_maps__map__modulus1 (to_rep
                                                              (rec__p__my_maps__map__modulus
                                                              a)))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const p__my_maps__map__capacity__first__bit Int)

(declare-const p__my_maps__map__capacity__last__bit Int)

(declare-const p__my_maps__map__capacity__position Int)

;; p__my_maps__map__capacity__first__bit_axiom
  (assert (<= 0 p__my_maps__map__capacity__first__bit))

;; p__my_maps__map__capacity__last__bit_axiom
  (assert
  (< p__my_maps__map__capacity__first__bit p__my_maps__map__capacity__last__bit))

;; p__my_maps__map__capacity__position_axiom
  (assert (<= 0 p__my_maps__map__capacity__position))

(declare-const p__my_maps__map__modulus__first__bit Int)

(declare-const p__my_maps__map__modulus__last__bit Int)

(declare-const p__my_maps__map__modulus__position Int)

;; p__my_maps__map__modulus__first__bit_axiom
  (assert (<= 0 p__my_maps__map__modulus__first__bit))

;; p__my_maps__map__modulus__last__bit_axiom
  (assert
  (< p__my_maps__map__modulus__first__bit p__my_maps__map__modulus__last__bit))

;; p__my_maps__map__modulus__position_axiom
  (assert (<= 0 p__my_maps__map__modulus__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((map__ref (map__refqtmk (map__content us_rep)))))
(define-fun map__ref_map__content__projection ((a map__ref)) us_rep (map__content
                                                                    a))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1 (rec__p__my_maps__cursor__node count_type)))))
(define-fun us_split_fields_rec__p__my_maps__cursor__node__projection ((a us_split_fields2)) count_type 
  (rec__p__my_maps__cursor__node a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (to_rep1
                            (rec__p__my_maps__cursor__node
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__p__my_maps__cursor__node
                                                   (us_split_fields3 b))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const p__my_maps__cursor__node__first__bit Int)

(declare-const p__my_maps__cursor__node__last__bit Int)

(declare-const p__my_maps__cursor__node__position Int)

;; p__my_maps__cursor__node__first__bit_axiom
  (assert (<= 0 p__my_maps__cursor__node__first__bit))

;; p__my_maps__cursor__node__last__bit_axiom
  (assert
  (< p__my_maps__cursor__node__first__bit p__my_maps__cursor__node__last__bit))

;; p__my_maps__cursor__node__position_axiom
  (assert (<= 0 p__my_maps__cursor__node__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((cursor__ref (cursor__refqtmk (cursor__content us_rep1)))))
(define-fun cursor__ref_cursor__content__projection ((a cursor__ref)) us_rep1 
  (cursor__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq4 (us_rep2 us_rep2) Bool)

(declare-const dummy4 us_rep2)

(declare-datatypes () ((map__ref1 (map__refqtmk1 (map__content1 us_rep2)))))
(define-fun map__ref_map__content__2__projection ((a map__ref1)) us_rep2 
  (map__content1 a))

(declare-fun oeq1 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep2 us_rep2) Bool)

(declare-fun model1 (us_rep) us_rep2)

(declare-fun model__function_guard (us_rep2 us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq3 (us_rep3 us_rep3) Bool)

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq5 (us_rep3 us_rep3) Bool)

(declare-const dummy5 us_rep3)

(declare-datatypes () ((map__ref2 (map__refqtmk2 (map__content2 us_rep3)))))
(define-fun map__ref_map__content__3__projection ((a map__ref2)) us_rep3 
  (map__content2 a))

(declare-datatypes ()
((key_type__ref (key_type__refqtmk (key_type__content us_rep1)))))
(define-fun key_type__ref_key_type__content__4__projection ((a key_type__ref)) us_rep1 
  (key_type__content a))

(declare-fun has_key (us_rep3 us_rep1) Bool)

(declare-fun has_key__function_guard (Bool us_rep3 us_rep1) Bool)

(declare-fun positions (us_rep) us_rep3)

(declare-fun positions__function_guard (us_rep3 us_rep) Bool)

(define-fun has_element ((container us_rep)
  (position us_rep1)) Bool (has_key (positions container) position))

(declare-fun has_element__function_guard (Bool us_rep us_rep1) Bool)

(declare-fun get (us_rep2 Int) Int)

(declare-fun get__function_guard (Int us_rep2 Int) Bool)

(declare-sort us_main_type3 0)

(declare-fun us_main_eq3 (us_main_type3 us_main_type3) Bool)

(declare-sort us_rep4 0)

(declare-fun bool_eq4 (us_rep4 us_rep4) Bool)

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-fun user_eq6 (us_rep4 us_rep4) Bool)

(declare-const dummy6 us_rep4)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep4)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep4 
  (sequence__content a))

(declare-fun get1 (us_rep4 Int) Int)

(declare-fun get__function_guard1 (Int us_rep4 Int) Bool)

(declare-fun get2 (us_rep3 us_rep1) Int)

(declare-fun get__function_guard2 (Int us_rep3 us_rep1) Bool)

(declare-fun keys (us_rep) us_rep4)

(declare-fun keys__function_guard (us_rep4 us_rep) Bool)

(define-fun key ((container us_rep)
  (position us_rep1)) Int (get1 (keys container)
                          (get2 (positions container) position)))

(declare-fun key__function_guard (Int us_rep us_rep1) Bool)

(define-fun element ((container us_rep)
  (position us_rep1)) Int (get (model1 container) (key container position)))

(declare-fun element__function_guard (Int us_rep us_rep1) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 100))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq7 (element_type element_type) Bool)

(declare-const dummy7 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant ((temp___expr_276 Int)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)
  (temp___do_typ_inv_275 Bool)) Bool (=>
                                     (or (= temp___is_init_272 true)
                                     (<= 1 100)) (in_range3 temp___expr_276)))

(declare-fun has_key1 (us_rep2 Int) Bool)

(declare-fun has_key__function_guard1 (Bool us_rep2 Int) Bool)

(define-fun contains ((container us_rep)
  (key1 Int)) Bool (has_key1 (model1 container) key1))

(declare-fun contains__function_guard (Bool us_rep Int) Bool)

(declare-fun find (us_rep Int) us_rep1)

(declare-fun find__function_guard (us_rep1 us_rep Int) Bool)

(declare-fun my_eq (Int Int) Bool)

(declare-fun my_eq__function_guard (Bool Int Int) Bool)

(declare-const no_element us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun find1 (us_rep4 Int) Int)

(declare-fun find__function_guard1 (Int us_rep4 Int) Bool)

(declare-sort key_type 0)

(declare-fun key_typeqtint (key_type) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type))
  (and (<= 1 (key_typeqtint i)) (<= (key_typeqtint i) 100))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq8 (key_type key_type) Bool)

(declare-const dummy8 key_type)

(declare-datatypes ()
((key_type__ref1 (key_type__refqtmk1 (key_type__content1 key_type)))))
(define-fun key_type__ref_key_type__content__2__projection ((a key_type__ref1)) key_type 
  (key_type__content1 a))

(define-fun dynamic_invariant1 ((temp___expr_269 Int)
  (temp___is_init_265 Bool) (temp___skip_constant_266 Bool)
  (temp___do_toplevel_267 Bool)
  (temp___do_typ_inv_268 Bool)) Bool (=>
                                     (or (= temp___is_init_265 true)
                                     (<= 1 100)) (in_range4 temp___expr_269)))

;; find__post_axiom
  (assert
  (forall ((container us_rep))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant1 key1 true true true true)
     (let ((result (find container key1)))
     (and
     (forall ((container1 us_rep) (key2 Int) (result1 us_rep1))
     (my_eq__function_guard (my_eq (key container1 result1) key2)
     (key container1 result1) key2))
     (ite (not (= (has_key1 (model1 container) key1) true))
     (= (bool_eq1 result no_element) true)
     (and
     (and (= (has_key (positions container) result) true)
     (= (get2 (positions container) result) (find1 (keys container) key1)))
     (= (my_eq (key container result) key1) true)))))) :pattern ((find
                                                                 container
                                                                 key1)) ))))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun ole (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

(declare-fun keys_included_except (us_rep2 us_rep2 Int) Bool)

(declare-fun keys_included_except__function_guard (Bool us_rep2 us_rep2
  Int) Bool)

(declare-fun keys_included_except1 (us_rep3 us_rep3 us_rep1) Bool)

(declare-fun keys_included_except__function_guard1 (Bool us_rep3 us_rep3
  us_rep1) Bool)

(declare-fun mapping_preserved (us_rep4 us_rep4 us_rep3 us_rep3) Bool)

(declare-fun mapping_preserved__function_guard (Bool us_rep4 us_rep4 us_rep3
  us_rep3) Bool)

(define-fun element1 ((container us_rep)
  (key1 Int)) Int (get (model1 container) key1))

(declare-fun element__function_guard1 (Int us_rep Int) Bool)

(declare-const l__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const k Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (element_type1 element_type1) Bool)

(declare-const dummy9 element_type1)

(declare-datatypes ()
((element_type__ref1
 (element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_248 Int)
  (temp___is_init_244 Bool) (temp___skip_constant_245 Bool)
  (temp___do_toplevel_246 Bool)
  (temp___do_typ_inv_247 Bool)) Bool (=>
                                     (or (= temp___is_init_244 true)
                                     (<= 1 100)) (in_range5 temp___expr_248)))

(declare-sort key_type1 0)

(declare-fun key_typeqtint1 (key_type1) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type1))
  (and (<= 1 (key_typeqtint1 i)) (<= (key_typeqtint1 i) 100))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (key_type1 key_type1) Bool)

(declare-const dummy10 key_type1)

(declare-datatypes ()
((key_type__ref2 (key_type__refqtmk2 (key_type__content2 key_type1)))))
(define-fun key_type__ref_key_type__content__projection ((a key_type__ref2)) key_type1 
  (key_type__content2 a))

(define-fun dynamic_invariant3 ((temp___expr_255 Int)
  (temp___is_init_251 Bool) (temp___skip_constant_252 Bool)
  (temp___do_toplevel_253 Bool)
  (temp___do_typ_inv_254 Bool)) Bool (=>
                                     (or (= temp___is_init_251 true)
                                     (<= 1 100)) (in_range6 temp___expr_255)))

;; my_eq__post_axiom
  (assert true)

;; my_eq__def_axiom
  (assert
  (forall ((i1 Int) (i2 Int))
  (! (= (= (my_eq i1 i2) true) (= i1 i2)) :pattern ((my_eq i1 i2)) )))

(define-fun dynamic_invariant4 ((temp___expr_262 (_ BitVec 32))
  (temp___is_init_258 Bool) (temp___skip_constant_259 Bool)
  (temp___do_toplevel_260 Bool) (temp___do_typ_inv_261 Bool)) Bool true)

(define-fun dynamic_invariant5 ((temp___expr_283 Int)
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)
  (temp___do_typ_inv_282 Bool)) Bool (=>
                                     (or (= temp___is_init_279 true)
                                     (<= 0 2147483647)) (in_range1
                                     temp___expr_283)))

(declare-const rliteral count_type)

;; rliteral_axiom
  (assert (= (count_typeqtint rliteral) 0))

;; no_element__def_axiom
  (assert (= no_element (us_repqtmk1 (us_split_fieldsqtmk1 rliteral))))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep1
                (rec__p__my_maps__map__capacity (us_split_discrs1 container))))
     (dynamic_invariant5 result true false true true))) :pattern ((length
                                                                  container)) )))

(declare-fun length1 (us_rep4) Int)

(declare-fun length__function_guard1 (Int us_rep4) Bool)

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun last ((container us_rep4)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep4) Bool)

(define-fun oeq2 ((left us_rep4)
  (right us_rep4)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get1 left
                                                                   n) 
                                                                (get1 right
                                                                n)))) true
                                                                false)))

(declare-fun oeq__function_guard2 (Bool us_rep4 us_rep4) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep4) (b us_rep4))
  (! (= (user_eq6 a b) (oeq2 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption ((temp___expr_383 us_rep4)
  (temp___skip_top_level_384 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_384 true))
                                         (= (length1 temp___expr_383) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant1 key1 true true true true)
     (let ((result (find1 container key1)))
     (and
     (and
     (forall ((container1 us_rep4) (key2 Int) (result1 Int))
     (my_eq__function_guard (my_eq key2 (get1 container1 result1)) key2
     (get1 container1 result1)))
     (=> (< 0 result)
     (and (<= result (length1 container))
     (= (my_eq key1 (get1 container result)) true)))) (dynamic_invariant5
     result true false true true)))) :pattern ((find1 container key1)) ))))

(declare-fun k_keys_included (us_rep4 us_rep4) Bool)

(declare-fun k_keys_included__function_guard (Bool us_rep4 us_rep4) Bool)

;; k_keys_included__post_axiom
  (assert
  (forall ((left us_rep4) (right us_rep4))
  (! (= (= (k_keys_included left right) true)
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length1 left)))
     (and (< 0 (find1 right (get1 left i)))
     (= (get1 right (find1 right (get1 left i))) (get1 left i)))))) :pattern (
  (k_keys_included left right)) )))

(declare-fun keys_included (us_rep3 us_rep3) Bool)

(declare-fun keys_included__function_guard (Bool us_rep3 us_rep3) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(declare-fun oeq3 (us_rep3 us_rep3) Bool)

(declare-fun oeq__function_guard3 (Bool us_rep3 us_rep3) Bool)

(declare-fun is_empty (us_rep3) Bool)

(declare-fun is_empty__function_guard (Bool us_rep3) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep3) (b us_rep3))
  (! (= (user_eq5 a b) (oeq3 a b)) :pattern ((user_eq5 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_408 us_rep3)
  (temp___skip_top_level_409 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_409 true))
                                         (and
                                         (= (is_empty temp___expr_408) true)
                                         (= (length3 temp___expr_408) 0))))

;; mapping_preserved__post_axiom
  (assert
  (forall ((k_left us_rep4) (k_right us_rep4))
  (forall ((p_left us_rep3) (p_right us_rep3))
  (! (=> (= (mapping_preserved k_left k_right p_left p_right) true)
     (and
     (and (= (keys_included p_left p_right) true)
     (= (k_keys_included k_left k_right) true))
     (forall ((c us_rep1))
     (=> (= (has_key p_left c) true)
     (= (get1 k_left (get2 p_left c)) (get1 k_right (get2 p_right c))))))) :pattern (
  (mapping_preserved k_left k_right p_left p_right)) ))))

(declare-fun length4 (us_rep2) Int)

(declare-fun length__function_guard3 (Int us_rep2) Bool)

(declare-fun is_empty1 (us_rep2) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption2 ((temp___expr_331 us_rep2)
  (temp___skip_top_level_332 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_332 true))
                                         (and
                                         (= (is_empty1 temp___expr_331) true)
                                         (= (length4 temp___expr_331) 0))))

;; model__post_axiom
  (assert true)

(define-fun iter_has_element ((container us_rep4)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep4 Int) Bool)

(declare-sort key_type2 0)

(declare-fun key_typeqtint2 (key_type2) Int)

;; key_type'axiom
  (assert
  (forall ((i key_type2))
  (and (<= 1 (key_typeqtint2 i)) (<= (key_typeqtint2 i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (key_type2 key_type2) Bool)

(declare-const dummy11 key_type2)

(declare-datatypes ()
((key_type__ref3 (key_type__refqtmk3 (key_type__content3 key_type2)))))
(define-fun key_type__ref_key_type__content__3__projection ((a key_type__ref3)) key_type2 
  (key_type__content3 a))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq12 (extended_index extended_index) Bool)

(declare-const dummy12 extended_index)

(declare-datatypes ()
((extended_index__ref
 (extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

;; keys__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (keys container)))
     (and
     (and
     (and
     (and (= (length1 result) (length container))
     (forall ((temp___460 Int))
     (=>
     (and (in_range8 temp___460)
     (= (iter_has_element result temp___460) true))
     (= (has_key1 (model1 container) (get1 result temp___460)) true))))
     (forall ((key1 Int))
     (=> (and (in_range7 key1) (= (has_key1 (model1 container) key1) true))
     (and (< 0 (find1 result key1))
     (and
     (forall ((result1 us_rep4) (key2 Int)) (my_eq__function_guard
     (my_eq (get1 result1 (find1 result1 key2)) key2)
     (get1 result1 (find1 result1 key2)) key2))
     (= (my_eq (get1 result (find1 result key1)) key1) true))))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (= (find1 result (get1 result i)) i))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (forall ((j Int))
     (=> (and (<= 1 j) (<= j (length container)))
     (and
     (forall ((result1 us_rep4) (i1 Int) (j1 Int)) (my_eq__function_guard
     (my_eq (get1 result1 i1) (get1 result1 j1)) (get1 result1 i1)
     (get1 result1 j1)))
     (=> (= (my_eq (get1 result i) (get1 result j)) true) (= i j))))))))) :pattern (
  (keys container)) )))

;; positions__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (positions container)))
     (and (not (= (has_key result no_element) true))
     (forall ((i us_rep1))
     (=> (= (has_key result i) true)
     (and
     (let ((temp___471 (get2 result i)))
     (and (<= 1 temp___471) (<= temp___471 (length container))))
     (forall ((j us_rep1))
     (=> (= (has_key result j) true)
     (=> (= (get2 result i) (get2 result j)) (= (bool_eq1 i j) true))))))))) :pattern (
  (positions container)) )))

(define-fun dynamic_invariant6 ((temp___expr_316 Int)
  (temp___is_init_312 Bool) (temp___skip_constant_313 Bool)
  (temp___do_toplevel_314 Bool)
  (temp___do_typ_inv_315 Bool)) Bool (=>
                                     (or (= temp___is_init_312 true)
                                     (<= 1 100)) (in_range7 temp___expr_316)))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=> (dynamic_invariant6 key1 true true true true)
     (and
     (forall ((key2 Int) (k1 Int)) (my_eq__function_guard (my_eq k1 key2) k1
     key2))
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((k1 Int))
     (and (and (in_range7 k1) (= (has_key1 container k1) true))
     (= (my_eq k1 key1) true))) (= (has_key1 container key1) true))))) :pattern (
  (has_key1 container key1)) ))))

(declare-fun witness (us_rep2 Int) Int)

(declare-fun witness__function_guard (Int us_rep2 Int) Bool)

(declare-fun w_get (us_rep2 Int) Int)

(declare-fun w_get__function_guard (Int us_rep2 Int) Bool)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 100))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq13 (element_type2 element_type2) Bool)

(declare-const dummy13 element_type2)

(declare-datatypes ()
((element_type__ref2
 (element_type__refqtmk2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(define-fun dynamic_invariant7 ((temp___expr_323 Int)
  (temp___is_init_319 Bool) (temp___skip_constant_320 Bool)
  (temp___do_toplevel_321 Bool)
  (temp___do_typ_inv_322 Bool)) Bool (=>
                                     (or (= temp___is_init_319 true)
                                     (<= 1 100)) (in_range9 temp___expr_323)))

;; get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant6 key1 true true true true)
     (= (has_key1 container key1) true))
     (let ((result (get container key1)))
     (and
     (and
     (forall ((key2 Int) (k1 Int)) (my_eq__function_guard (my_eq k1 key2) k1
     key2))
     (=> (= (distinct 1 0) true)
     (and (= result (w_get container (witness container key1)))
     (forall ((k1 Int))
     (=> (and (in_range7 k1) (= (has_key1 container k1) true))
     (= (= (my_eq k1 key1) true)
     (= (witness container key1) (witness container k1))))))))
     (dynamic_invariant7 result true false true true)))) :pattern ((get
                                                                   container
                                                                   key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant5 (length4 container)
  true false true true) :pattern ((length4 container)) )))

;; ole__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (ole left right) true)
     (forall ((key1 Int))
     (=> (and (in_range7 key1) (= (has_key1 left key1) true))
     (and (= (has_key1 right key1) true)
     (= (get right key1) (get left key1)))))) :pattern ((ole left right)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (! (= (= (oeq1 left right) true)
     (and
     (forall ((key1 Int))
     (=> (and (in_range7 key1) (= (has_key1 left key1) true))
     (and (= (has_key1 right key1) true)
     (= (get right key1) (get left key1)))))
     (forall ((key1 Int))
     (=> (and (in_range7 key1) (= (has_key1 right key1) true))
     (= (has_key1 left key1) true))))) :pattern ((oeq1 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (= (is_empty1 container) true)
     (forall ((key1 Int))
     (not (and (in_range7 key1) (= (has_key1 container key1) true))))) :pattern (
  (is_empty1 container)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep2) (right us_rep2))
  (forall ((new_key Int))
  (! (=> (dynamic_invariant6 new_key true true true true)
     (and
     (forall ((new_key1 Int) (key1 Int)) (my_eq__function_guard
     (my_eq key1 new_key1) key1 new_key1))
     (= (= (keys_included_except left right new_key) true)
     (forall ((key1 Int))
     (=> (and (in_range7 key1) (= (has_key1 left key1) true))
     (=> (not (= (my_eq key1 new_key) true)) (= (has_key1 right key1) true))))))) :pattern (
  (keys_included_except left right new_key)) ))))

(declare-fun has_witness (us_rep2 Int) Bool)

(declare-fun has_witness__function_guard (Bool us_rep2 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((key1 Int))
  (! (=>
     (and (dynamic_invariant6 key1 true true true true)
     (= (has_key1 container key1) true))
     (let ((result (witness container key1)))
     (and (= (has_witness container result) true) (dynamic_invariant5 result
     true false true true)))) :pattern ((witness container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((witness1 Int))
  (! (=>
     (and (dynamic_invariant5 witness1 true true true true)
     (= (has_witness container witness1) true)) (dynamic_invariant7
     (w_get container witness1) true false true true)) :pattern ((w_get
                                                                 container
                                                                 witness1)) ))))

(define-fun dynamic_invariant8 ((temp___expr_375 Int)
  (temp___is_init_371 Bool) (temp___skip_constant_372 Bool)
  (temp___do_toplevel_373 Bool)
  (temp___do_typ_inv_374 Bool)) Bool (=>
                                     (or (= temp___is_init_371 true)
                                     (<= 0 2147483647)) (in_range8
                                     temp___expr_375)))

;; length__post_axiom
  (assert
  (forall ((container us_rep4))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant5 result true false
     true true))) :pattern ((length1 container)) )))

(declare-sort element_type3 0)

(declare-fun element_typeqtint3 (element_type3) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type3))
  (and (<= 1 (element_typeqtint3 i)) (<= (element_typeqtint3 i) 100))))

(define-fun in_range10 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq14 (element_type3 element_type3) Bool)

(declare-const dummy14 element_type3)

(declare-datatypes ()
((element_type__ref3
 (element_type__refqtmk3 (element_type__content3 element_type3)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref3)) element_type3 
  (element_type__content3 a))

(define-fun dynamic_invariant9 ((temp___expr_368 Int)
  (temp___is_init_364 Bool) (temp___skip_constant_365 Bool)
  (temp___do_toplevel_366 Bool)
  (temp___do_typ_inv_367 Bool)) Bool (=>
                                     (or (= temp___is_init_364 true)
                                     (<= 1 100)) (in_range10
                                     temp___expr_368)))

;; get__post_axiom
  (assert
  (forall ((container us_rep4))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant8 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant9 (get1 container position) true false true true)) :pattern (
  (get1 container position)) ))))

;; has_key__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 us_rep1))
  (! (=> (= (distinct 0 0) true)
     (=>
     (exists ((k1 us_rep1))
     (and (= (has_key container k1) true) (= (bool_eq1 k1 key1) true)))
     (= (has_key container key1) true))) :pattern ((has_key container key1)) ))))

(declare-fun witness1 (us_rep3 us_rep1) Int)

(declare-fun witness__function_guard1 (Int us_rep3 us_rep1) Bool)

(declare-fun w_get1 (us_rep3 Int) Int)

(declare-fun w_get__function_guard1 (Int us_rep3 Int) Bool)

(declare-sort element_type4 0)

(declare-fun element_typeqtint4 (element_type4) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type4))
  (and (<= 1 (element_typeqtint4 i)) (<= (element_typeqtint4 i) 2147483647))))

(define-fun in_range11 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq15 (element_type4 element_type4) Bool)

(declare-const dummy15 element_type4)

(declare-datatypes ()
((element_type__ref4
 (element_type__refqtmk4 (element_type__content4 element_type4)))))
(define-fun element_type__ref_element_type__content__5__projection ((a element_type__ref4)) element_type4 
  (element_type__content4 a))

(define-fun dynamic_invariant10 ((temp___expr_400 Int)
  (temp___is_init_396 Bool) (temp___skip_constant_397 Bool)
  (temp___do_toplevel_398 Bool)
  (temp___do_typ_inv_399 Bool)) Bool (=>
                                     (or (= temp___is_init_396 true)
                                     (<= 1 2147483647)) (in_range11
                                     temp___expr_400)))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 us_rep1))
  (! (=> (= (has_key container key1) true)
     (let ((result (get2 container key1)))
     (and
     (=> (= (distinct 0 0) true)
     (and (= result (w_get1 container (witness1 container key1)))
     (forall ((k1 us_rep1))
     (=> (= (has_key container k1) true)
     (= (= (bool_eq1 k1 key1) true)
     (= (witness1 container key1) (witness1 container k1)))))))
     (dynamic_invariant10 result true false true true)))) :pattern ((get2
                                                                    container
                                                                    key1)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep3)) (! (dynamic_invariant5 (length3 container)
  true false true true) :pattern ((length3 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (oeq3 left right) true)
     (and
     (forall ((key1 us_rep1))
     (=> (= (has_key left key1) true)
     (and (= (has_key right key1) true)
     (= (get2 right key1) (get2 left key1)))))
     (forall ((key1 us_rep1))
     (=> (= (has_key right key1) true) (= (has_key left key1) true))))) :pattern (
  (oeq3 left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (= (= (is_empty container) true)
     (forall ((key1 us_rep1)) (not (= (has_key container key1) true)))) :pattern (
  (is_empty container)) )))

;; keys_included__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (! (= (= (keys_included left right) true)
     (forall ((key1 us_rep1))
     (=> (= (has_key left key1) true) (= (has_key right key1) true)))) :pattern (
  (keys_included left right)) )))

;; keys_included_except__post_axiom
  (assert
  (forall ((left us_rep3) (right us_rep3))
  (forall ((new_key us_rep1))
  (! (= (= (keys_included_except1 left right new_key) true)
     (forall ((key1 us_rep1))
     (=> (= (has_key left key1) true)
     (=> (not (= (bool_eq1 key1 new_key) true))
     (= (has_key right key1) true))))) :pattern ((keys_included_except1 left
                                                 right new_key)) ))))

(declare-fun has_witness1 (us_rep3 Int) Bool)

(declare-fun has_witness__function_guard1 (Bool us_rep3 Int) Bool)

;; has_witness__post_axiom
  (assert true)

;; witness__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((key1 us_rep1))
  (! (=> (= (has_key container key1) true)
     (let ((result (witness1 container key1)))
     (and (= (has_witness1 container result) true) (dynamic_invariant5 result
     true false true true)))) :pattern ((witness1 container key1)) ))))

;; w_get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((witness2 Int))
  (! (=>
     (and (dynamic_invariant5 witness2 true true true true)
     (= (has_witness1 container witness2) true)) (dynamic_invariant10
     (w_get1 container witness2) true false true true)) :pattern ((w_get1
                                                                  container
                                                                  witness2)) ))))

(declare-const l__split_fields us_main_type)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 k true false true true))

;; Assume
  (assert
  (= (contains
     (us_repqtmk l__split_discrs (us_split_fieldsqtmk l__split_fields)) 
     k) true))

(define-fun usf () us_rep (us_repqtmk l__split_discrs
                          (us_split_fieldsqtmk l__split_fields)))

(define-fun usf1 () us_rep (us_repqtmk l__split_discrs
                           (us_split_fieldsqtmk l__split_fields)))

(define-fun usf2 () us_rep (us_repqtmk l__split_discrs
                           (us_split_fieldsqtmk l__split_fields)))

(define-fun o () Int k)

(define-fun o1 () us_rep (us_repqtmk l__split_discrs
                         (us_split_fieldsqtmk l__split_fields)))

(define-fun o2 () Int (element1 o1 o))

;; H
  (assert (dynamic_invariant o2 true false true true))

;; H
  (assert (= o2 (get (model1 o1) o)))

(declare-const e Int)

;; H
  (assert (= e o2))

;; Assume
  (assert (dynamic_invariant2 e true false true true))

(define-fun o3 () Int k)

(define-fun o4 () us_split_discrs l__split_discrs)

(declare-const l__split_fields1 us_main_type)

;; H
  (assert
  (= (length (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1))) (- 
  (length (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields))) 1)))

;; H
  (assert
  (not
  (= (contains (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1)) o3) true)))

;; H
  (assert
  (= (ole (model1 (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1)))
     (model1 (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields)))) true))

;; H
  (assert
  (= (keys_included_except
     (model1 (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields)))
     (model1 (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1))) 
     o3) true))

;; H
  (assert
  (= (mapping_preserved
     (keys (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1)))
     (keys (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields)))
     (positions (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1)))
     (positions (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields)))) true))

;; H
  (assert
  (= (keys_included_except1
     (positions (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields)))
     (positions (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields1)))
     (find (us_repqtmk o4 (us_split_fieldsqtmk l__split_fields)) o3)) true))

;; H
  (assert true)

(define-fun o5 () Int k)

(define-fun o6 () us_split_discrs l__split_discrs)

(declare-const l__split_fields2 us_main_type)

;; H
  (assert
  (= (length (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2))) (+ 
  (length (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields1))) 1)))

;; H
  (assert
  (= (contains (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)) o5) true))

;; H
  (assert
  (= (key (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2))
     (find (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)) o5)) 
  o5))

;; H
  (assert
  (= (get (model1 (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2))) o5) 
  e))

;; H
  (assert
  (= (ole (model1 (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields1)))
     (model1 (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)))) true))

;; H
  (assert
  (= (keys_included_except
     (model1 (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)))
     (model1 (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields1))) 
     o5) true))

;; H
  (assert
  (= (mapping_preserved
     (keys (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields1)))
     (keys (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)))
     (positions (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields1)))
     (positions (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)))) true))

;; H
  (assert
  (= (keys_included_except1
     (positions (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)))
     (positions (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields1)))
     (find (us_repqtmk o6 (us_split_fieldsqtmk l__split_fields2)) o5)) true))

;; H
  (assert true)

(define-fun o7 () Int k)

(define-fun o8 () us_rep1 (find usf1 o7))

;; H
  (assert
  (forall ((usf3 us_rep) (o9 Int) (o10 us_rep1)) (my_eq__function_guard
  (my_eq (key usf3 o10) o9) (key usf3 o10) o9)))

;; H
  (assert true)

;; H
  (assert
  (ite (= (not (has_key1 (model1 usf1) o7)) true)
  (= (bool_eq1 o8 no_element) true)
  (and
  (and (= (has_key (positions usf1) o8) true)
  (= (get2 (positions usf1) o8) (find1 (keys usf1) o7)))
  (= (my_eq (key usf1 o8) o7) true))))

(define-fun o9 () Int k)

(define-fun o10 () us_rep (us_repqtmk l__split_discrs
                          (us_split_fieldsqtmk l__split_fields2)))

(define-fun o11 () us_rep1 (find o10 o9))

;; H
  (assert
  (forall ((o12 Int) (o13 us_rep) (o14 us_rep1)) (my_eq__function_guard
  (my_eq (key o13 o14) o12) (key o13 o14) o12)))

;; H
  (assert true)

;; H
  (assert
  (ite (= (not (has_key1 (model1 o10) o9)) true)
  (= (bool_eq1 o11 no_element) true)
  (and
  (and (= (has_key (positions o10) o11) true)
  (= (get2 (positions o10) o11) (find1 (keys o10) o9)))
  (= (my_eq (key o10 o11) o9) true))))

;; H
  (assert (= (bool_eq1 o11 o8) true))

(define-fun temp___838 () us_rep (us_repqtmk l__split_discrs
                                 (us_split_fieldsqtmk l__split_fields2)))

(declare-const usf3 count_type)

(define-fun usf4 () us_rep1 (us_repqtmk1 (us_split_fieldsqtmk1 usf3)))

(define-fun o12 () Bool (has_element temp___838 usf4))

;; Ensures
  (assert (= (= o12 true) (= (has_key (positions temp___838) usf4) true)))

;; H
  (assert (= (and (ite true true false) o12) true))

(define-fun o13 () Int (element usf2 usf4))

;; H
  (assert (dynamic_invariant o13 true false true true))

;; H
  (assert (= o13 (get (model1 usf2) (key usf2 usf4))))

(define-fun o14 () us_rep (us_repqtmk l__split_discrs
                          (us_split_fieldsqtmk l__split_fields2)))

(assert
;; defqtvc
 ;; File "p.ads", line 28, characters 0-0
  (not (= (has_element o14 usf4) true)))
(check-sat)
