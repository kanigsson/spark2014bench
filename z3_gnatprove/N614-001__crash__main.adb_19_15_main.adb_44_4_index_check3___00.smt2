;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_string (us_image Int) us_t)

(declare-fun from_string (us_t) us_image)

;; to_string__first
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (= (first1 (to_string x s)) 1) :pattern ((to_string x s)) ))))

;; to_string__length
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (=> (<= 0 s) (<= (length (to_string x s)) s)) :pattern ((to_string x s)) ))))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range4
                                    temp___expr_39)))

(define-fun to_rep2 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep2 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-sort t1 0)

(declare-fun first2 (t1) integer)

(declare-fun last2 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first2 (mk1 f l))) f)
     (= (to_rep1 (last2 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property1 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t1 (us_tqtmk1 (elts1 (Array Int integer))(rt1 t1)))))
(define-fun to_array1 ((a us_t1)) (Array Int integer) (elts1 a))

(define-fun of_array1 ((a (Array Int integer)) (f Int)
  (l Int)) us_t1 (us_tqtmk1 a (mk1 f l)))

(define-fun first3 ((a us_t1)) Int (to_rep1 (first2 (rt1 a))))

(define-fun last3 ((a us_t1)) Int (to_rep1 (last2 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first3 a) (last3 a))
                                    (+ (- (last3 a) (first3 a)) 1) 0))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first2 (rt1 x)))
                  (to_rep1 (last2 (rt1 x))) (elts1 y)
                  (to_rep1 (first2 (rt1 y))) (to_rep1 (last2 (rt1 y)))))

(declare-fun user_eq5 (us_t1 us_t1) Bool)

(declare-const dummy5 us_t1)

(declare-datatypes () ((set__ref (set__refqtmk (set__content us_t1)))))
(define-fun set__ref_set__content__projection ((a set__ref)) us_t1 (set__content
                                                                   a))

(declare-datatypes ()
((map__ref2 (map__refqtmk2 (map__content2 (Array Int positive))))))
(declare-fun slide2 ((Array Int positive) Int Int) (Array Int positive))

;; slide_eq
  (assert
  (forall ((a (Array Int positive)))
  (forall ((first4 Int))
  (! (= (slide2 a first4 first4) a) :pattern ((slide2 a first4 first4)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int positive)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide2 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide2 a old_first new_first) i)) ))))))

(define-fun bool_eq4 ((a (Array Int positive)) (a__first Int) (a__last Int)
  (b (Array Int positive)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep2 (select a temp___idx_157)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int positive)) (b (Array Int positive)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq4 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep2 (select a temp___idx_157)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-sort t2 0)

(declare-fun first4 (t2) integer)

(declare-fun last4 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk2 f l))) f)
     (= (to_rep1 (last4 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property2 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes ()
((us_t2 (us_tqtmk2 (elts2 (Array Int positive))(rt2 t2)))))
(define-fun to_array2 ((a us_t2)) (Array Int positive) (elts2 a))

(define-fun of_array2 ((a (Array Int positive)) (f Int)
  (l Int)) us_t2 (us_tqtmk2 a (mk2 f l)))

(define-fun first5 ((a us_t2)) Int (to_rep1 (first4 (rt2 a))))

(define-fun last5 ((a us_t2)) Int (to_rep1 (last4 (rt2 a))))

(define-fun length2 ((a us_t2)) Int (ite (<= (first5 a) (last5 a))
                                    (+ (- (last5 a) (first5 a)) 1) 0))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(define-fun bool_eq5 ((x us_t2)
  (y us_t2)) Bool (bool_eq4 (elts2 x) (to_rep1 (first4 (rt2 x)))
                  (to_rep1 (last4 (rt2 x))) (elts2 y)
                  (to_rep1 (first4 (rt2 y))) (to_rep1 (last4 (rt2 y)))))

(declare-fun user_eq6 (us_t2 us_t2) Bool)

(declare-const dummy6 us_t2)

(declare-datatypes ()
((partition__ref (partition__refqtmk (partition__content us_t2)))))
(define-fun partition__ref_partition__content__projection ((a partition__ref)) us_t2 
  (partition__content a))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-const a__first integer)

(declare-const a__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const x__first integer)

(declare-const x__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const part__first integer)

(declare-const part__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun length3 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun subset1 (us_t1 us_t1) Bool)

(declare-fun subset__function_guard (Bool us_t1 us_t1) Bool)

(declare-fun is_partition (us_t1 us_t2) Bool)

(declare-fun is_partition__function_guard (Bool us_t1 us_t2) Bool)

(declare-fun same_set (us_t1 us_t1) Bool)

(declare-fun same_set__function_guard (Bool us_t1 us_t1) Bool)

(declare-fun get_part (us_t1 us_t2 Int) us_t1)

(declare-fun get_part__function_guard (us_t1 us_t1 us_t2 Int) Bool)

(declare-fun disjoint_or_subset (us_t1 us_t1) Bool)

(declare-fun disjoint_or_subset__function_guard (Bool us_t1 us_t1) Bool)

(declare-datatypes () ((t51s__ref (t51s__refqtmk (t51s__content us_t2)))))
(define-fun t51s__ref_t51s__content__projection ((a t51s__ref)) us_t2 
  (t51s__content a))

(declare-datatypes () ((t49s__ref (t49s__refqtmk (t49s__content us_t2)))))
(define-fun t49s__ref_t49s__content__projection ((a t49s__ref)) us_t2 
  (t49s__content a))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const r37b Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-datatypes () ((t39b__ref (t39b__refqtmk (t39b__content us_t2)))))
(define-fun t39b__ref_t39b__content__projection ((a t39b__ref)) us_t2 
  (t39b__content a))

(declare-const c41b us_t2)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r93b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-sort t19b 0)

(declare-fun t19bqtint (t19b) Int)

;; t19b'axiom
  (assert
  (forall ((i t19b)) (and (<= 1 (t19bqtint i)) (<= (t19bqtint i) 6))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (t19b t19b) Bool)

(declare-const dummy7 t19b)

(declare-datatypes () ((t19b__ref (t19b__refqtmk (t19b__content t19b)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) t19b 
  (t19b__content a))

(declare-sort t21b 0)

(declare-fun t21bqtint (t21b) Int)

;; t21b'axiom
  (assert
  (forall ((i t21b)) (and (<= 1 (t21bqtint i)) (<= (t21bqtint i) 3))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (t21b t21b) Bool)

(declare-const dummy8 t21b)

(declare-datatypes () ((t21b__ref (t21b__refqtmk (t21b__content t21b)))))
(define-fun t21b__ref_t21b__content__projection ((a t21b__ref)) t21b 
  (t21b__content a))

(declare-sort t23b 0)

(declare-fun t23bqtint (t23b) Int)

;; t23b'axiom
  (assert
  (forall ((i t23b)) (and (<= 1 (t23bqtint i)) (<= (t23bqtint i) 1))))

(define-fun in_range7 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (t23b t23b) Bool)

(declare-const dummy9 t23b)

(declare-datatypes () ((t23b__ref (t23b__refqtmk (t23b__content t23b)))))
(define-fun t23b__ref_t23b__content__projection ((a t23b__ref)) t23b 
  (t23b__content a))

(declare-sort tTnpSP1 0)

(declare-fun tTnpSP1qtint (tTnpSP1) Int)

;; tTnpSP1'axiom
  (assert
  (forall ((i tTnpSP1))
  (and (<= 1 (tTnpSP1qtint i)) (<= (tTnpSP1qtint i) 5))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq10 (tTnpSP1 tTnpSP1) Bool)

(declare-const dummy10 tTnpSP1)

(declare-datatypes ()
((tTnpSP1__ref (tTnpSP1__refqtmk (tTnpSP1__content tTnpSP1)))))
(define-fun tTnpSP1__ref_tTnpSP1__content__projection ((a tTnpSP1__ref)) tTnpSP1 
  (tTnpSP1__content a))

(declare-datatypes () ((t91b__ref (t91b__refqtmk (t91b__content us_t2)))))
(define-fun t91b__ref_t91b__content__projection ((a t91b__ref)) us_t2 
  (t91b__content a))

(declare-datatypes () ((t100b__ref (t100b__refqtmk (t100b__content us_t2)))))
(define-fun t100b__ref_t100b__content__projection ((a t100b__ref)) us_t2 
  (t100b__content a))

(declare-fun main__a__aggregate_def (Int Int Int Int Int
  Int) (Array Int integer))

(declare-fun main__x__aggregate_def (Int Int Int) (Array Int integer))

(declare-fun main__part__aggregate_def (Int) (Array Int positive))

(declare-fun temp___String_Literal_338 (tuple0) (Array Int character))

;; temp___String_Literal_338__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_338 us_void_param) 1)) 123)
     (= (to_rep (select (temp___String_Literal_338 us_void_param) 2)) 32)) :pattern (
  (temp___String_Literal_338 us_void_param)) )))

(declare-fun temp___String_Literal_341 (tuple0) (Array Int character))

;; temp___String_Literal_341__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_341 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_341 us_void_param) 2)) 125)) :pattern (
  (temp___String_Literal_341 us_void_param)) )))

(declare-fun temp___String_Literal_343 (tuple0) (Array Int character))

;; temp___String_Literal_343__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_343 us_void_param) 1)) 123)
     (= (to_rep (select (temp___String_Literal_343 us_void_param) 2)) 32)) :pattern (
  (temp___String_Literal_343 us_void_param)) )))

(declare-fun temp___String_Literal_346 (tuple0) (Array Int character))

;; temp___String_Literal_346__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_346 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_346 us_void_param) 2)) 125)) :pattern (
  (temp___String_Literal_346 us_void_param)) )))

(declare-fun temp___String_Literal_349 (tuple0) (Array Int character))

;; temp___String_Literal_349__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_349 us_void_param) 1)) 91)
     (= (to_rep (select (temp___String_Literal_349 us_void_param) 2)) 32)) :pattern (
  (temp___String_Literal_349 us_void_param)) )))

(declare-fun temp___String_Literal_355 (tuple0) (Array Int character))

;; temp___String_Literal_355__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_355 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_355 us_void_param) 2)) 93)) :pattern (
  (temp___String_Literal_355 us_void_param)) )))

(define-fun dynamic_invariant2 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant3 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant4 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-const rliteral integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral) 22))

(declare-const rliteral1 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral1) 33))

(declare-const rliteral2 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral2) 100))

(declare-const rliteral3 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral3) 55))

(declare-const rliteral4 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral4) 44))

(declare-const rliteral5 integer)

;; rliteral_axiom
  (assert (= (integerqtint rliteral5) 11))

;; def_axiom
  (assert
  (forall ((temp___320 Int) (temp___321 Int) (temp___322 Int)
  (temp___323 Int) (temp___324 Int) (temp___325 Int))
  (let ((temp___319 (main__a__aggregate_def temp___320 temp___321 temp___322
                    temp___323 temp___324 temp___325)))
  (=>
  (and
  (and (dynamic_invariant1 temp___320 true true true true)
  (dynamic_invariant1 temp___321 true true true true))
  (and
  (and (dynamic_invariant1 temp___322 true true true true)
  (dynamic_invariant1 temp___323 true true true true))
  (and (dynamic_invariant1 temp___324 true true true true)
  (dynamic_invariant1 temp___325 true true true true))))
  (and
  (and (= (select temp___319 1) rliteral)
  (= (select temp___319 2) rliteral1))
  (and
  (and (= (select temp___319 3) rliteral2)
  (= (select temp___319 4) rliteral3))
  (and (= (select temp___319 5) rliteral4)
  (= (select temp___319 6) rliteral5))))))))

;; def_axiom
  (assert
  (forall ((temp___329 Int) (temp___330 Int) (temp___331 Int))
  (let ((temp___328 (main__x__aggregate_def temp___329 temp___330 temp___331)))
  (=>
  (and
  (and (dynamic_invariant1 temp___329 true true true true)
  (dynamic_invariant1 temp___330 true true true true)) (dynamic_invariant1
  temp___331 true true true true))
  (and
  (and (= (select temp___328 1) rliteral5)
  (= (select temp___328 2) rliteral)) (= (select temp___328 3) rliteral4))))))

(declare-const rliteral6 positive)

;; rliteral_axiom
  (assert (= (positiveqtint rliteral6) 4))

;; def_axiom
  (assert
  (forall ((temp___335 Int))
  (=> (dynamic_invariant2 temp___335 true true true true)
  (= (select (main__part__aggregate_def temp___335) 1) rliteral6))))

(define-fun dynamic_invariant5 ((temp___expr_200 us_t1)
  (temp___is_init_196 Bool) (temp___skip_constant_197 Bool)
  (temp___do_toplevel_198 Bool)
  (temp___do_typ_inv_199 Bool)) Bool (=>
                                     (not (= temp___skip_constant_197 true))
                                     (dynamic_property1 1 2147483647
                                     (first3 temp___expr_200)
                                     (last3 temp___expr_200))))

(declare-fun mem (us_t1 Int) Bool)

(declare-fun mem__function_guard (Bool us_t1 Int) Bool)

;; mem__post_axiom
  (assert true)

;; mem__def_axiom
  (assert
  (forall ((x us_t1))
  (forall ((elt Int))
  (! (= (= (mem x elt) true)
     (exists ((i Int))
     (and (and (<= (first3 x) i) (<= i (last3 x)))
     (= elt (to_rep1 (select (to_array1 x) i)))))) :pattern ((mem x elt)) ))))

;; subset__post_axiom
  (assert true)

;; subset__def_axiom
  (assert
  (forall ((x us_t1) (y us_t1))
  (! (and
     (forall ((x1 us_t1) (y1 us_t1) (i Int)) (mem__function_guard
     (mem y1 (to_rep1 (select (to_array1 x1) i))) y1
     (to_rep1 (select (to_array1 x1) i))))
     (= (= (subset1 x y) true)
     (forall ((i Int))
     (=> (and (<= (first3 x) i) (<= i (last3 x)))
     (= (mem y (to_rep1 (select (to_array1 x) i))) true))))) :pattern (
  (subset1 x y)) )))

;; same_set__post_axiom
  (assert true)

;; same_set__def_axiom
  (assert
  (forall ((x us_t1) (y us_t1))
  (! (and
     (forall ((x1 us_t1) (y1 us_t1)) (subset__function_guard (subset1 x1 y1)
     x1 y1))
     (and
     (forall ((x1 us_t1) (y1 us_t1)) (subset__function_guard (subset1 y1 x1)
     y1 x1))
     (= (= (same_set x y) true)
     (and (= (subset1 x y) true) (= (subset1 y x) true))))) :pattern (
  (same_set x y)) )))

(declare-fun disjoint (us_t1 us_t1) Bool)

(declare-fun disjoint__function_guard (Bool us_t1 us_t1) Bool)

;; disjoint__post_axiom
  (assert true)

;; disjoint__def_axiom
  (assert
  (forall ((x us_t1) (y us_t1))
  (! (and
     (forall ((x1 us_t1) (y1 us_t1) (i Int)) (mem__function_guard
     (mem y1 (to_rep1 (select (to_array1 x1) i))) y1
     (to_rep1 (select (to_array1 x1) i))))
     (= (= (disjoint x y) true)
     (forall ((i Int))
     (=> (and (<= (first3 x) i) (<= i (last3 x)))
     (not (= (mem y (to_rep1 (select (to_array1 x) i))) true)))))) :pattern (
  (disjoint x y)) )))

(define-fun dynamic_invariant6 ((temp___expr_206 us_t2)
  (temp___is_init_202 Bool) (temp___skip_constant_203 Bool)
  (temp___do_toplevel_204 Bool)
  (temp___do_typ_inv_205 Bool)) Bool (=>
                                     (not (= temp___skip_constant_203 true))
                                     (dynamic_property2 1 2147483647
                                     (first5 temp___expr_206)
                                     (last5 temp___expr_206))))

(declare-fun ascending (us_t2) Bool)

(declare-fun ascending__function_guard (Bool us_t2) Bool)

;; ascending__post_axiom
  (assert true)

;; ascending__def_axiom
  (assert
  (forall ((p us_t2))
  (! (= (= (ascending p) true)
     (or (< (length2 p) 2)
     (forall ((i Int))
     (=> (and (<= (first5 p) i) (<= i (- (last5 p) 1)))
     (< (to_rep2 (select (to_array2 p) i)) (to_rep2
                                           (select (to_array2 p) (+ i 1)))))))) :pattern (
  (ascending p)) )))

;; is_partition__post_axiom
  (assert true)

;; is_partition__def_axiom
  (assert
  (forall ((s us_t1))
  (forall ((p us_t2))
  (! (and (forall ((p1 us_t2)) (ascending__function_guard (ascending p1) p1))
     (= (= (is_partition s p) true)
     (and (and (< (length2 p) (length1 s)) (= (ascending p) true))
     (forall ((i Int))
     (=> (and (<= (first5 p) i) (<= i (last5 p)))
     (let ((temp___257 (to_rep2 (select (to_array2 p) i))))
     (and (<= (first3 s) temp___257) (<= temp___257 (last3 s))))))))) :pattern (
  (is_partition s p)) ))))

;; disjoint_or_subset__post_axiom
  (assert true)

;; disjoint_or_subset__def_axiom
  (assert
  (forall ((a us_t1) (b us_t1))
  (! (and
     (forall ((a1 us_t1) (b1 us_t1)) (disjoint__function_guard
     (disjoint a1 b1) a1 b1))
     (and
     (forall ((a1 us_t1) (b1 us_t1)) (subset__function_guard (subset1 a1 b1)
     a1 b1))
     (= (= (disjoint_or_subset a b) true)
     (or (= (disjoint a b) true) (= (subset1 a b) true))))) :pattern (
  (disjoint_or_subset a b)) )))

(declare-datatypes () ((t23s__ref (t23s__refqtmk (t23s__content us_t1)))))
(define-fun t23s__ref_t23s__content__projection ((a t23s__ref)) us_t1 
  (t23s__content a))

(declare-datatypes () ((t26s__ref (t26s__refqtmk (t26s__content us_t1)))))
(define-fun t26s__ref_t26s__content__projection ((a t26s__ref)) us_t1 
  (t26s__content a))

;; get_part__post_axiom
  (assert
  (forall ((a us_t1))
  (forall ((p us_t2))
  (forall ((i Int))
  (! (and
     (forall ((a1 us_t1) (p1 us_t2)) (is_partition__function_guard
     (is_partition a1 p1) a1 p1))
     (=>
     (and
     (and
     (and (dynamic_invariant5 a true true true true) (dynamic_invariant6 p
     true true true true)) (dynamic_invariant2 i true true true true))
     (and (= (is_partition a p) true)
     (and (<= (first5 p) i) (<= i (last5 p)))))
     (let ((result (get_part a p i)))
     (=> (get_part__function_guard result a p i) (dynamic_invariant5 result
     true false true true))))) :pattern ((get_part a p i)) )))))

;; get_part__def_axiom
  (assert
  (forall ((a us_t1))
  (forall ((p us_t2))
  (forall ((i Int))
  (! (=>
     (and
     (and (dynamic_invariant5 a true true true true) (dynamic_invariant6 p
     true true true true)) (dynamic_invariant2 i true true true true))
     (= (get_part a p i) (ite (= i (first5 p))
                         (let ((temp___282 (let ((temp___281 (- (to_rep2
                                                                (select 
                                                                (to_array2 p) i)) 1)))
                                           (let ((temp___280 (first3 a)))
                                           (of_array1 (to_array1 a)
                                           temp___280 temp___281)))))
                         (of_array1 (to_array1 temp___282)
                         (first3 temp___282) (last3 temp___282)))
                         (let ((temp___285 (let ((temp___284 (- (to_rep2
                                                                (select 
                                                                (to_array2 p) i)) 1)))
                                           (let ((temp___283 (to_rep2
                                                             (select 
                                                             (to_array2 p) (- i 1)))))
                                           (of_array1 (to_array1 a)
                                           temp___283 temp___284)))))
                         (of_array1 (to_array1 temp___285)
                         (first3 temp___285) (last3 temp___285)))))) :pattern (
  (get_part a p i)) )))))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (count count) Bool)

(declare-const dummy11 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant7 ((temp___expr_172 Int)
  (temp___is_init_168 Bool) (temp___skip_constant_169 Bool)
  (temp___do_toplevel_170 Bool)
  (temp___do_typ_inv_171 Bool)) Bool (=>
                                     (or (= temp___is_init_168 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_172)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant7
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(declare-const standard_in us_private)

(declare-const file_system us_private)

(declare-const standard_out us_private)

(declare-const standard_err us_private)

(declare-const current_in us_private)

(declare-const current_out us_private)

(declare-const current_err us_private)

(declare-const np (Array Int positive))

(declare-const count1 Int)

(define-fun main__a__assume () us_t1 (of_array1
                                     (main__a__aggregate_def 22 33 100 55 44
                                     11) 1 6))

(declare-const a (Array Int integer))

;; H
  (assert (= a (to_array1 main__a__assume)))

;; Assume
  (assert (= (to_rep1 a__first) (first3 main__a__assume)))

;; Assume
  (assert (= (to_rep1 a__last) (last3 main__a__assume)))

;; Assume
  (assert (dynamic_property1 1 2147483647 (to_rep1 a__first)
  (to_rep1 a__last)))

(define-fun main__x__assume () us_t1 (of_array1
                                     (main__x__aggregate_def 11 22 44) 1 3))

(declare-const x (Array Int integer))

;; H
  (assert (= x (to_array1 main__x__assume)))

;; Assume
  (assert (= (to_rep1 x__first) (first3 main__x__assume)))

;; Assume
  (assert (= (to_rep1 x__last) (last3 main__x__assume)))

;; Assume
  (assert (dynamic_property1 1 2147483647 (to_rep1 x__first)
  (to_rep1 x__last)))

(define-fun main__part__assume () us_t2 (of_array2
                                        (main__part__aggregate_def 4) 1 1))

(declare-const part (Array Int positive))

;; H
  (assert (= part (to_array2 main__part__assume)))

;; Assume
  (assert (= (to_rep1 part__first) (first5 main__part__assume)))

;; Assume
  (assert (= (to_rep1 part__last) (last5 main__part__assume)))

;; Assume
  (assert (dynamic_property2 1 2147483647 (to_rep1 part__first)
  (to_rep1 part__last)))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant count1 false false true true))

(declare-const standard_in1 us_private)

(declare-const file_system1 us_private)

(declare-const standard_out1 us_private)

(declare-const standard_err1 us_private)

(declare-const current_in1 us_private)

(declare-const current_out1 us_private)

(declare-const current_err1 us_private)

;; H
  (assert
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))

;; H
  (assert
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))

(declare-const standard_in2 us_private)

(declare-const file_system2 us_private)

(declare-const standard_out2 us_private)

(declare-const standard_err2 us_private)

(declare-const current_in2 us_private)

(declare-const current_out2 us_private)

(declare-const current_err2 us_private)

(declare-const temp___339 Int)

;; Ensures
  (assert (= (to_rep1 a__first) temp___339))

(declare-const temp___340 Int)

;; Ensures
  (assert (= (to_rep1 a__last) temp___340))

(declare-const c28b Int)

;; H
  (assert (= c28b temp___339))

;; H
  (assert
  (ite (= (and (ite (<= temp___339 c28b) true false) (ite (<= c28b temp___340)
                                                     true false)) true)
  (exists ((standard_in3 us_private) (file_system3 us_private)
  (standard_out3 us_private) (standard_err3 us_private)
  (current_in3 us_private) (current_out3 us_private)
  (current_err3 us_private) (c28b1 Int))
  (and (and (<= (to_rep1 a__first) c28b1) (<= c28b1 (to_rep1 a__last)))
  (and (and (<= (to_rep1 a__first) c28b1) (<= c28b1 (to_rep1 a__last)))
  (exists ((o Int))
  (and (= (to_rep1 (select a c28b1)) o)
  (and
  (and
  (= (line_length standard_in3 file_system3 standard_out3 standard_err3
     current_in3 current_out3 current_err3) (line_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2))
  (= (page_length standard_in3 file_system3 standard_out3 standard_err3
     current_in3 current_out3 current_err3) (page_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2)))
  (= c28b1 temp___340)))))))
  (and
  (and
  (and
  (and
  (and (and (= standard_in2 standard_in1) (= file_system2 file_system1))
  (= standard_out2 standard_out1)) (= standard_err2 standard_err1))
  (= current_in2 current_in1)) (= current_out2 current_out1))
  (= current_err2 current_err1))))

(declare-const standard_in3 us_private)

(declare-const file_system3 us_private)

(declare-const standard_out3 us_private)

(declare-const standard_err3 us_private)

(declare-const current_in3 us_private)

(declare-const current_out3 us_private)

(declare-const current_err3 us_private)

;; H
  (assert
  (= (line_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (line_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))

;; H
  (assert
  (= (page_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (page_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))

(declare-const o integer)

;; Ensures
  (assert (= (to_rep1 o) 5))

(declare-const o1 integer)

;; Ensures
  (assert (= (to_rep1 o1) 1))

(declare-const o2 Int)

;; Ensures
  (assert (= (to_rep1 x__last) o2))

(declare-const o3 Int)

;; Ensures
  (assert (= (to_rep1 x__first) o3))

(define-fun o4 () us_t1 (of_array1 x o3 o2))

(declare-const o5 Int)

;; Ensures
  (assert (= (to_rep1 part__last) o5))

(declare-const o6 Int)

;; Ensures
  (assert (= (to_rep1 part__first) o6))

(define-fun o7 () us_t2 (of_array2 part o6 o5))

(define-fun o8 () integer a__last)

(define-fun o9 () integer a__first)

(declare-const a1 (Array Int integer))

(declare-const count2 Int)

(declare-const part__refine__np (Array Int positive))

;; H
  (assert
  (forall ((o10 integer) (o11 integer) (o12 integer) (a2 (Array Int integer))
  (count3 Int) (part__refine__np1 (Array Int positive)))
  (is_partition__function_guard
  (is_partition (of_array1 a2 (to_rep1 o12) (to_rep1 o11))
  (let ((temp___304 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___304) (first5 temp___304) (last5 temp___304))))
  (of_array1 a2 (to_rep1 o12) (to_rep1 o11))
  (let ((temp___304 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___304) (first5 temp___304) (last5 temp___304))))))

;; H
  (assert
  (forall ((a2 (Array Int integer)) (o10 integer) (o11 integer)
  (a3 (Array Int integer))) (same_set__function_guard
  (same_set (of_array1 a2 (to_rep1 o11) (to_rep1 o10))
  (of_array1 a3 (to_rep1 o11) (to_rep1 o10)))
  (of_array1 a2 (to_rep1 o11) (to_rep1 o10))
  (of_array1 a3 (to_rep1 o11) (to_rep1 o10)))))

;; H
  (assert
  (forall ((o10 integer) (o11 integer) (o12 integer) (a2 (Array Int integer))
  (count3 Int) (part__refine__np1 (Array Int positive)) (i Int))
  (get_part__function_guard
  (get_part (of_array1 a2 (to_rep1 o12) (to_rep1 o11))
  (let ((temp___309 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___309) (first5 temp___309) (last5 temp___309)))
  i) (of_array1 a2 (to_rep1 o12) (to_rep1 o11))
  (let ((temp___309 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___309) (first5 temp___309) (last5 temp___309)))
  i)))

;; H
  (assert
  (forall ((o10 integer) (o11 integer) (o12 integer) (a2 (Array Int integer))
  (count3 Int) (part__refine__np1 (Array Int positive)) (i Int))
  (get_part__function_guard
  (get_part (of_array1 a2 (to_rep1 o12) (to_rep1 o11))
  (let ((temp___309 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___309) (first5 temp___309) (last5 temp___309)))
  i) (of_array1 a2 (to_rep1 o12) (to_rep1 o11))
  (let ((temp___309 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___309) (first5 temp___309) (last5 temp___309)))
  i)))

;; H
  (assert
  (forall ((o10 integer) (o11 us_t1) (o12 integer) (o13 integer)
  (a2 (Array Int integer)) (count3 Int)
  (part__refine__np1 (Array Int positive)) (i Int))
  (disjoint_or_subset__function_guard
  (disjoint_or_subset
  (get_part (of_array1 a2 (to_rep1 o13) (to_rep1 o12))
  (let ((temp___309 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___309) (first5 temp___309) (last5 temp___309)))
  i) o11)
  (get_part (of_array1 a2 (to_rep1 o13) (to_rep1 o12))
  (let ((temp___309 (of_array2 part__refine__np1 (to_rep1 o10)
                    (- (+ (to_rep1 o10) count3) 1))))
  (of_array2 (to_array2 temp___309) (first5 temp___309) (last5 temp___309)))
  i) o11)))

;; H
  (assert
  (= (is_partition (of_array1 a1 (to_rep1 o9) (to_rep1 o8))
     (let ((temp___304 (of_array2 part__refine__np (to_rep1 o1)
                       (- (+ (to_rep1 o1) count2) 1))))
     (of_array2 (to_array2 temp___304) (first5 temp___304)
     (last5 temp___304)))) true))

;; H
  (assert
  (= (same_set (of_array1 a (to_rep1 o9) (to_rep1 o8))
     (of_array1 a1 (to_rep1 o9) (to_rep1 o8))) true))

;; H
  (assert
  (forall ((i Int))
  (=> (and (<= (to_rep1 o1) i) (<= i (- (+ (to_rep1 o1) count2) 1)))
  (= (disjoint_or_subset
     (get_part (of_array1 a1 (to_rep1 o9) (to_rep1 o8))
     (let ((temp___309 (of_array2 part__refine__np (to_rep1 o1)
                       (- (+ (to_rep1 o1) count2) 1))))
     (of_array2 (to_array2 temp___309) (first5 temp___309)
     (last5 temp___309))) i) o4) true))))

;; H
  (assert (dynamic_invariant count2 true true true true))

(define-fun temp___342 () us_t2 (of_array2 part__refine__np 1 5))

(declare-const np1 (Array Int positive))

;; H
  (assert (= np1 (slide2 (to_array2 temp___342) (first5 temp___342) 1)))

(declare-const standard_in4 us_private)

(declare-const file_system4 us_private)

(declare-const standard_out4 us_private)

(declare-const standard_err4 us_private)

(declare-const current_in4 us_private)

(declare-const current_out4 us_private)

(declare-const current_err4 us_private)

;; H
  (assert
  (= (line_length standard_in3 file_system3 standard_out3 standard_err3
     current_in3 current_out3 current_err3) (line_length standard_in4
                                            file_system4 standard_out4
                                            standard_err4 current_in4
                                            current_out4 current_err4)))

;; H
  (assert
  (= (page_length standard_in3 file_system3 standard_out3 standard_err3
     current_in3 current_out3 current_err3) (page_length standard_in4
                                            file_system4 standard_out4
                                            standard_err4 current_in4
                                            current_out4 current_err4)))

(declare-const temp___344 Int)

;; Ensures
  (assert (= (to_rep1 a__first) temp___344))

(declare-const temp___345 Int)

;; Ensures
  (assert (= (to_rep1 a__last) temp___345))

(declare-const c34b Int)

;; H
  (assert (= c34b temp___344))

;; H
  (assert
  (= (and (ite (<= temp___344 c34b) true false) (ite (<= c34b temp___345)
                                                true false)) true))

(declare-const c34b1 Int)

;; Assume
  (assert (and (<= (to_rep1 a__first) c34b1) (<= c34b1 (to_rep1 a__last))))

(assert
;; defqtvc
 ;; File "main.adb", line 4, characters 0-0
  (not (<= (to_rep1 a__first) c34b1)))
(check-sat)
