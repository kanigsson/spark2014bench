;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__dic_pred__t__f natural)))))
(define-fun us_split_fields_rec__dic_pred__t__f__projection ((a us_split_fields)) natural 
  (rec__dic_pred__t__f a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__dic_pred__t__f (us_split_fields1 a))) 
                   (to_rep (rec__dic_pred__t__f (us_split_fields1 b)))) true
                   false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const dic_pred__t__f__first__bit Int)

(declare-const dic_pred__t__f__last__bit Int)

(declare-const dic_pred__t__f__position Int)

;; dic_pred__t__f__first__bit_axiom
  (assert (<= 0 dic_pred__t__f__first__bit))

;; dic_pred__t__f__last__bit_axiom
  (assert (< dic_pred__t__f__first__bit dic_pred__t__f__last__bit))

;; dic_pred__t__f__position_axiom
  (assert (<= 0 dic_pred__t__f__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-fun get (us_rep) Int)

(declare-fun get__function_guard (Int us_rep) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (integer integer) Bool)

(declare-const dummy2 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-fun id (Int) Int)

(declare-fun id__function_guard (Int Int) Bool)

;; temp___result_164'def
  (assert
  (forall ((temp___163 us_rep)) (id__function_guard
  (id (to_rep (rec__dic_pred__t__f (us_split_fields1 temp___163))))
  (to_rep (rec__dic_pred__t__f (us_split_fields1 temp___163))))))

(define-fun dynamic_invariant1 ((temp___expr_162 us_rep)
  (temp___is_init_158 Bool) (temp___skip_constant_159 Bool)
  (temp___do_toplevel_160 Bool)
  (temp___do_typ_inv_161 Bool)) Bool (=> (= temp___do_toplevel_160 true)
                                     (< 0 (id
                                          (to_rep
                                          (rec__dic_pred__t__f
                                          (us_split_fields1 temp___expr_162)))))))

;; temp___result_168'def
  (assert
  (forall ((temp___167 us_rep)) (get__function_guard (get temp___167)
  temp___167)))

(define-fun default_initial_assumption ((temp___expr_165 us_rep)
  (temp___skip_top_level_166 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__dic_pred__t__f
                                            (us_split_fields1
                                            temp___expr_165))) 0)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_166 true))
                                         (< 0 (get temp___expr_165)))))

;; temp___result_171'def
  (assert
  (forall ((temp___170 us_rep)) (id__function_guard
  (id (to_rep (rec__dic_pred__t__f (us_split_fields1 temp___170))))
  (to_rep (rec__dic_pred__t__f (us_split_fields1 temp___170))))))

(define-fun dynamic_predicate ((temp___169 us_rep)) Bool (< 0 (id
                                                              (to_rep
                                                              (rec__dic_pred__t__f
                                                              (us_split_fields1
                                                              temp___169))))))

;; get__post_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (dynamic_invariant1 x true true true true)
     (let ((result (get x)))
     (=> (get__function_guard result x) (dynamic_invariant result true false
     true true)))) :pattern ((get x)) )))

;; get__def_axiom
  (assert
  (forall ((x us_rep))
  (! (=> (dynamic_invariant1 x true true true true)
     (and
     (forall ((x1 us_rep)) (id__function_guard
     (id (to_rep (rec__dic_pred__t__f (us_split_fields1 x1))))
     (to_rep (rec__dic_pred__t__f (us_split_fields1 x1)))))
     (= (get x) (id (to_rep (rec__dic_pred__t__f (us_split_fields1 x))))))) :pattern (
  (get x)) )))

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

;; id__post_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true)
     (let ((result (id x)))
     (=> (id__function_guard result x) (dynamic_invariant result true false
     true true)))) :pattern ((id x)) )))

;; id__def_axiom
  (assert
  (forall ((x Int))
  (! (=> (dynamic_invariant x true true true true) (= (id x) x)) :pattern (
  (id x)) )))

(declare-const usf natural)

(define-fun usf1 () us_rep (us_repqtmk (us_split_fieldsqtmk usf)))

;; H
  (assert (forall ((usf2 us_rep)) (get__function_guard (get usf2) usf2)))

;; H
  (assert (= (to_rep usf) 0))

;; H
  (assert true)

(assert
;; defqtvc
 ;; File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-PA12-001__DIC-25055/src/gnatprove/dic_pred__t.mlw", line 470, characters 5-8
  (not (dynamic_predicate usf1)))
(check-sat)
