;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(declare-datatypes ()
((us_split_discrs (us_split_discrsqtmk (rec__test_dic__nested__p5__x Bool)))))
(define-fun us_split_discrs_rec__test_dic__nested__p5__x__projection ((a us_split_discrs)) Bool 
  (rec__test_dic__nested__p5__x a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__5__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__test_dic__nested__p5__c integer)))))
(define-fun us_split_fields_rec__test_dic__nested__p5__c__projection ((a us_split_fields)) integer 
  (rec__test_dic__nested__p5__c a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__5__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__5__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (ite (rec__test_dic__nested__p5__x
                                (us_split_discrs1 a)) 1 0) (ite (rec__test_dic__nested__p5__x
                                                                (us_split_discrs1
                                                                b)) 1 0))
                        (= (to_rep
                           (rec__test_dic__nested__p5__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__test_dic__nested__p5__c
                                                  (us_split_fields1 b)))))
                   true false))

(define-fun in_range2 ((rec__test_dic__nested__p5__x1 Bool)
  (a us_split_discrs)) Bool (= rec__test_dic__nested__p5__x1 (rec__test_dic__nested__p5__x
                                                             a)))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const test_dic__nested__p5__x__first__bit Int)

(declare-const test_dic__nested__p5__x__last__bit Int)

(declare-const test_dic__nested__p5__x__position Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit test_dic__nested__p5__x__last__bit))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position))

(declare-const test_dic__nested__p5__c__first__bit Int)

(declare-const test_dic__nested__p5__c__last__bit Int)

(declare-const test_dic__nested__p5__c__position Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit test_dic__nested__p5__c__last__bit))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((p5__ref (p5__refqtmk (p5__content us_rep)))))
(define-fun p5__ref_p5__content__projection ((a p5__ref)) us_rep (p5__content
                                                                 a))

(declare-fun id (us_rep) us_rep)

(declare-fun id__function_guard (us_rep us_rep) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const test_dic__nested__p5__x__first__bit1 Int)

(declare-const test_dic__nested__p5__x__last__bit1 Int)

(declare-const test_dic__nested__p5__x__position1 Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit1))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit1 test_dic__nested__p5__x__last__bit1))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position1))

(declare-const test_dic__nested__p5__c__first__bit1 Int)

(declare-const test_dic__nested__p5__c__last__bit1 Int)

(declare-const test_dic__nested__p5__c__position1 Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit1))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit1 test_dic__nested__p5__c__last__bit1))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position1))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((t4b__ref (t4b__refqtmk (t4b__content us_rep)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_rep (t4b__content
                                                                    a))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const test_dic__nested__p5__x__first__bit2 Int)

(declare-const test_dic__nested__p5__x__last__bit2 Int)

(declare-const test_dic__nested__p5__x__position2 Int)

;; test_dic__nested__p5__x__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__x__first__bit2))

;; test_dic__nested__p5__x__last__bit_axiom
  (assert
  (< test_dic__nested__p5__x__first__bit2 test_dic__nested__p5__x__last__bit2))

;; test_dic__nested__p5__x__position_axiom
  (assert (<= 0 test_dic__nested__p5__x__position2))

(declare-const test_dic__nested__p5__c__first__bit2 Int)

(declare-const test_dic__nested__p5__c__last__bit2 Int)

(declare-const test_dic__nested__p5__c__position2 Int)

;; test_dic__nested__p5__c__first__bit_axiom
  (assert (<= 0 test_dic__nested__p5__c__first__bit2))

;; test_dic__nested__p5__c__last__bit_axiom
  (assert
  (< test_dic__nested__p5__c__first__bit2 test_dic__nested__p5__c__last__bit2))

;; test_dic__nested__p5__c__position_axiom
  (assert (<= 0 test_dic__nested__p5__c__position2))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes () ((t5b__ref (t5b__refqtmk (t5b__content us_rep)))))
(define-fun t5b__ref_t5b__content__projection ((a t5b__ref)) us_rep (t5b__content
                                                                    a))

;; id__post_axiom
  (assert true)

;; id__def_axiom
  (assert
  (forall ((x us_rep))
  (! (= (id x) (ite (and
                    (= (rec__test_dic__nested__p5__x (us_split_discrs1 x)) true)
                    (= (to_rep
                       (rec__test_dic__nested__p5__c (us_split_fields1 x))) 0))
               (us_repqtmk (us_split_discrsqtmk (distinct 1 0))
               (us_split_fieldsqtmk
               (rec__test_dic__nested__p5__c (us_split_fields1 x))))
               (us_repqtmk (us_split_discrsqtmk (distinct 0 0))
               (us_split_fieldsqtmk
               (rec__test_dic__nested__p5__c (us_split_fields1 x)))))) :pattern (
  (id x)) )))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const usf us_rep)

;; H
  (assert (forall ((usf1 us_rep)) (id__function_guard (id usf1) usf1)))

;; H
  (assert true)

;; H
  (assert
  (= (to_rep (rec__test_dic__nested__p5__c (us_split_fields1 usf))) 0))

;; H
  (assert true)

;; H
  (assert (forall ((usf1 us_rep)) (id__function_guard (id usf1) usf1)))

(assert
;; defqtvc
 ;; File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-S730-045__dic_with_discrs-13998/src/gnatprove/test_dic__nested__p5.mlw", line 615, characters 5-8
  (not (= (rec__test_dic__nested__p5__x (us_split_discrs1 (id usf))) true)))
(check-sat)
