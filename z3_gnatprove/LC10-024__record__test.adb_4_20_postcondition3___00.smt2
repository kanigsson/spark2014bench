;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-sort length_type 0)

(declare-fun length_typeqtint (length_type) Int)

;; length_type'axiom
  (assert
  (forall ((i length_type))
  (and (<= 0 (length_typeqtint i)) (<= (length_typeqtint i) 5))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (length_type length_type) Bool)

(declare-const dummy1 length_type)

(declare-datatypes ()
((length_type__ref (length_type__refqtmk (length_type__content length_type)))))
(define-fun length_type__ref_length_type__content__projection ((a length_type__ref)) length_type 
  (length_type__content a))

(define-fun to_rep1 ((x length_type)) Int (length_typeqtint x))

(declare-fun of_rep1 (Int) length_type)

;; inversion_axiom
  (assert
  (forall ((x length_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x length_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort entry_id 0)

(define-fun in_range2 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x04)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (entry_id entry_id) Bool)

(declare-const dummy2 entry_id)

(declare-datatypes ()
((entry_id__ref (entry_id__refqtmk (entry_id__content entry_id)))))
(define-fun entry_id__ref_entry_id__content__projection ((a entry_id__ref)) entry_id 
  (entry_id__content a))

(declare-fun to_rep2 (entry_id) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) entry_id)

;; inversion_axiom
  (assert
  (forall ((x entry_id))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x entry_id)) (! (in_range2 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x05)))
     (=> (in_range2 y) (= (to_rep2 (of_rep2 x)) y))) :pattern ((to_rep2
                                                               (of_rep2 x))) )))

(define-fun to_int2 ((x entry_id)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x entry_id)) (! (in_range_int
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array (_ BitVec 8) integer))))))
(declare-fun slide ((Array (_ BitVec 8) integer) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) integer))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) integer)))
  (forall ((first (_ BitVec 8)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) integer)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 8) integer)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) integer))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_154 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_154)
                                    (bvule temp___idx_154 a__last))
                                    (= (to_rep (select a temp___idx_154)) 
                                    (to_rep
                                    (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) integer)) (b (Array (_ BitVec 8) integer)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-const dummy3 (Array (_ BitVec 8) integer))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq3 ((Array (_ BitVec 8) integer)
  (Array (_ BitVec 8) integer)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__test__t__remaining length_type)(rec__test__t__index entry_id)(rec__test__t__cards (Array (_ BitVec 8) integer))))))
(define-fun us_split_fields_rec__test__t__remaining__projection ((a us_split_fields)) length_type 
  (rec__test__t__remaining a))

(define-fun us_split_fields_rec__test__t__index__projection ((a us_split_fields)) entry_id 
  (rec__test__t__index a))

(define-fun us_split_fields_rec__test__t__cards__projection ((a us_split_fields)) (Array (_ BitVec 8) integer) 
  (rec__test__t__cards a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__test__t__remaining (us_split_fields1 a))) 
                        (to_rep1
                        (rec__test__t__remaining (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__test__t__index (us_split_fields1 a))) 
                        (to_rep2 (rec__test__t__index (us_split_fields1 b)))))
                        (= (bool_eq
                           (rec__test__t__cards (us_split_fields1 a)) #x00
                           #x04 (rec__test__t__cards (us_split_fields1 b))
                           #x00 #x04) true))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const test__t__remaining__first__bit Int)

(declare-const test__t__remaining__last__bit Int)

(declare-const test__t__remaining__position Int)

;; test__t__remaining__first__bit_axiom
  (assert (<= 0 test__t__remaining__first__bit))

;; test__t__remaining__last__bit_axiom
  (assert (< test__t__remaining__first__bit test__t__remaining__last__bit))

;; test__t__remaining__position_axiom
  (assert (<= 0 test__t__remaining__position))

(declare-const test__t__index__first__bit Int)

(declare-const test__t__index__last__bit Int)

(declare-const test__t__index__position Int)

;; test__t__index__first__bit_axiom
  (assert (<= 0 test__t__index__first__bit))

;; test__t__index__last__bit_axiom
  (assert (< test__t__index__first__bit test__t__index__last__bit))

;; test__t__index__position_axiom
  (assert (<= 0 test__t__index__position))

(declare-const test__t__cards__first__bit Int)

(declare-const test__t__cards__last__bit Int)

(declare-const test__t__cards__position Int)

;; test__t__cards__first__bit_axiom
  (assert (<= 0 test__t__cards__first__bit))

;; test__t__cards__last__bit_axiom
  (assert (< test__t__cards__first__bit test__t__cards__last__bit))

;; test__t__cards__position_axiom
  (assert (<= 0 test__t__cards__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref1)) us_rep (t__content1
                                                               a))

(declare-fun get_remaining (us_rep) Int)

(declare-fun get_remaining__function_guard (Int us_rep) Bool)

;; get_remaining__post_axiom
  (assert
  (forall ((s us_rep))
  (! (let ((result (get_remaining s)))
     (=> (get_remaining__function_guard result s) (dynamic_invariant result
     true false true true))) :pattern ((get_remaining s)) )))

;; get_remaining__def_axiom
  (assert
  (forall ((s us_rep))
  (! (= (get_remaining s) (to_rep1
                          (rec__test__t__remaining (us_split_fields1 s)))) :pattern (
  (get_remaining s)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const i1 (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const i2 (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun dynamic_invariant1 ((temp___expr_167 (_ BitVec 8))
  (temp___is_init_163 Bool) (temp___skip_constant_164 Bool)
  (temp___do_toplevel_165 Bool)
  (temp___do_typ_inv_166 Bool)) Bool (=>
                                     (or (= temp___is_init_163 true)
                                     (bvule #x00 #x04)) (in_range2
                                     temp___expr_167)))

(define-fun dynamic_invariant2 ((temp___expr_160 Int)
  (temp___is_init_156 Bool) (temp___skip_constant_157 Bool)
  (temp___do_toplevel_158 Bool)
  (temp___do_typ_inv_159 Bool)) Bool (=>
                                     (or (= temp___is_init_156 true)
                                     (<= 0 5)) (in_range1 temp___expr_160)))

(declare-const s__split_fields us_split_fields)

(declare-const s__split_fields1 us_split_fields)

;; H
  (assert (= s__split_fields1 s__split_fields))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 i1 true false true true))

;; Assume
  (assert (dynamic_invariant1 i2 true false true true))

(define-fun usf () us_rep (us_repqtmk s__split_fields))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep (select (rec__test__t__cards s__split_fields) i1)) 
  o))

(declare-const tmp Int)

;; H
  (assert (= tmp o))

;; Assume
  (assert (dynamic_invariant tmp true false true true))

(declare-const o1 Int)

;; Ensures
  (assert (= (to_rep (select (rec__test__t__cards s__split_fields) i2)) 
  o1))

(declare-const o2 integer)

;; Ensures
  (assert (= (to_rep o2) o1))

(declare-const s__split_fields2 us_split_fields)

;; H
  (assert
  (= s__split_fields2 (us_split_fieldsqtmk
                      (rec__test__t__remaining s__split_fields)
                      (rec__test__t__index s__split_fields)
                      (store (rec__test__t__cards s__split_fields) i1 
                      o2))))

(declare-const o3 integer)

;; Ensures
  (assert (= (to_rep o3) tmp))

(declare-const s__split_fields3 us_split_fields)

;; H
  (assert
  (= s__split_fields3 (us_split_fieldsqtmk
                      (rec__test__t__remaining s__split_fields2)
                      (rec__test__t__index s__split_fields2)
                      (store (rec__test__t__cards s__split_fields2) i2 
                      o3))))

;; H
  (assert
  (forall ((s__split_fields4 us_split_fields)) (get_remaining__function_guard
  (get_remaining (us_repqtmk s__split_fields4))
  (us_repqtmk s__split_fields4))))

;; H
  (assert
  (forall ((s__split_fields4 us_split_fields)) (get_remaining__function_guard
  (get_remaining (us_repqtmk s__split_fields4))
  (us_repqtmk s__split_fields4))))

(assert
;; defqtvc
 ;; File "test.adb", line 3, characters 0-0
  (not
  (= (get_remaining (us_repqtmk s__split_fields3)) (get_remaining
                                                   (us_repqtmk
                                                   s__split_fields1)))))
(check-sat)
