;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun g (Int) Int)

(declare-fun g__function_guard (Int Int) Bool)

(declare-fun f (Int) Int)

(declare-fun f__function_guard (Int Int) Bool)

;; g__post_axiom
  (assert
  (forall ((j Int))
  (! (=> (dynamic_invariant j true true true true)
     (let ((result (g j)))
     (=> (g__function_guard result j) (dynamic_invariant result true false
     true true)))) :pattern ((g j)) )))

;; g__def_axiom
  (assert
  (forall ((j Int))
  (! (=> (dynamic_invariant j true true true true)
     (and (forall ((j1 Int)) (f__function_guard (f j1) j1))
     (= (g j) (* 2 (f j))))) :pattern ((g j)) )))

;; f__post_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true true)
     (let ((result (f i)))
     (=> (f__function_guard result i) (dynamic_invariant result true false
     true true)))) :pattern ((f i)) )))

;; f__def_axiom
  (assert
  (forall ((i Int))
  (! (=> (dynamic_invariant i true true true true) (= (f i) (+ i 1))) :pattern (
  (f i)) )))

(declare-const z Int)

(declare-const z1 Int)

;; H
  (assert (= z1 z))

;; Assume
  (assert (dynamic_invariant z true false true true))

(define-fun o () Int (g z))

;; H
  (assert (forall ((z2 Int)) (f__function_guard (f z2) z2)))

;; H
  (assert (g__function_guard o z))

;; H
  (assert (dynamic_invariant o true false true true))

;; H
  (assert (= o (* 2 (f z))))

(declare-const z2 Int)

;; H
  (assert (= z2 o))

;; H
  (assert (forall ((z3 Int)) (g__function_guard (g z3) z3)))

(assert
;; defqtvc
 ;; File "intra_unit_elaboration_order_examples.ads", line 19, characters 0-0
  (not (= z2 (g z1))))
(check-sat)
