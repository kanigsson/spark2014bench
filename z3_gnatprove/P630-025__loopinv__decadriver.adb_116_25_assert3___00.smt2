(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 16) Int) Bool)

(declare-fun lsr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun asr1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun lsl1 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_right2 ((_ BitVec 16) Int) (_ BitVec 16))

(declare-fun rotate_left2 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun to_int2 ((x (_ BitVec 16))) Int (ite (bvsge x (_ bv0 16))
                                            (bv2int x)
                                            (- (- 65536 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i) (<= i 65535)))

(declare-fun nth_bv1 ((_ BitVec 16) (_ BitVec 16)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 16) (_ BitVec 16) (_ BitVec 16)
  (_ BitVec 16)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 16)) (b (_ BitVec 16)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 (_ BitVec 16))))))
(declare-fun power1 ((_ BitVec 16) Int) (_ BitVec 16))

(define-fun bv_min1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 16))
  (y (_ BitVec 16))) (_ BitVec 16) (ite (bvule x y) y x))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort bits_8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE3 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) (_ BitVec 8))

(declare-fun user_eq2 (bits_8 bits_8) Bool)

(declare-const dummy2 bits_8)

(declare-datatypes ()
((bits_8__ref (bits_8__refqtmk (bits_8__content bits_8)))))
(define-fun bits_8__ref_bits_8__content__projection ((a bits_8__ref)) bits_8 
  (bits_8__content a))

(declare-fun to_rep2 (bits_8) (_ BitVec 8))

(declare-fun of_rep2 ((_ BitVec 8)) bits_8)

;; inversion_axiom
  (assert
  (forall ((x bits_8))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int3 ((x bits_8)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_8)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int bits_8))))))
(declare-fun slide ((Array Int bits_8) Int Int) (Array Int bits_8))

;; slide_eq
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int bits_8)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int bits_8)) (a__first Int) (a__last Int)
  (b (Array Int bits_8)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int bits_8)) (b (Array Int bits_8)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep2 (select a temp___idx_154)) (to_rep2
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int bits_8))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int bits_8) (elts a))

(define-fun of_array ((a (Array Int bits_8)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((byte_array__ref (byte_array__refqtmk (byte_array__content us_t)))))
(define-fun byte_array__ref_byte_array__content__projection ((a byte_array__ref)) us_t 
  (byte_array__content a))

(declare-sort frame_length 0)

(declare-fun frame_lengthqtint (frame_length) Int)

;; frame_length'axiom
  (assert
  (forall ((i frame_length))
  (and (<= 0 (frame_lengthqtint i)) (<= (frame_lengthqtint i) 1024))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 1024)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (frame_length frame_length) Bool)

(declare-const dummy4 frame_length)

(declare-datatypes ()
((frame_length__ref
 (frame_length__refqtmk (frame_length__content frame_length)))))
(define-fun frame_length__ref_frame_length__content__projection ((a frame_length__ref)) frame_length 
  (frame_length__content a))

(define-fun to_rep3 ((x frame_length)) Int (frame_lengthqtint x))

(declare-fun of_rep3 (Int) frame_length)

;; inversion_axiom
  (assert
  (forall ((x frame_length))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x frame_length)) (! (in_range3
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort rx_errors 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 5)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (rx_errors rx_errors) Bool)

(declare-const dummy5 rx_errors)

(declare-datatypes ()
((rx_errors__ref (rx_errors__refqtmk (rx_errors__content rx_errors)))))
(define-fun rx_errors__ref_rx_errors__content__projection ((a rx_errors__ref)) rx_errors 
  (rx_errors__content a))

(declare-fun to_rep4 (rx_errors) Int)

(declare-fun of_rep4 (Int) rx_errors)

;; inversion_axiom
  (assert
  (forall ((x rx_errors))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x rx_errors)) (! (in_range4
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-const dummy6 (Array Int bits_8))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq6 ((Array Int bits_8) (Array Int bits_8)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__decadriver__rx_frame_type__size frame_length)(rec__decadriver__rx_frame_type__frame (Array Int bits_8))(rec__decadriver__rx_frame_type__error rx_errors)(rec__decadriver__rx_frame_type__overrun Bool)))))
(define-fun us_split_fields_rec__decadriver__rx_frame_type__size__projection ((a us_split_fields)) frame_length 
  (rec__decadriver__rx_frame_type__size a))

(define-fun us_split_fields_rec__decadriver__rx_frame_type__frame__projection ((a us_split_fields)) (Array Int bits_8) 
  (rec__decadriver__rx_frame_type__frame a))

(define-fun us_split_fields_rec__decadriver__rx_frame_type__error__projection ((a us_split_fields)) rx_errors 
  (rec__decadriver__rx_frame_type__error a))

(define-fun us_split_fields_rec__decadriver__rx_frame_type__overrun__projection ((a us_split_fields)) Bool 
  (rec__decadriver__rx_frame_type__overrun a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep3
                           (rec__decadriver__rx_frame_type__size
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__decadriver__rx_frame_type__size
                                                  (us_split_fields1 b))))
                        (= (bool_eq
                           (rec__decadriver__rx_frame_type__frame
                           (us_split_fields1 a)) 0 1024
                           (rec__decadriver__rx_frame_type__frame
                           (us_split_fields1 b)) 0 1024) true))
                        (and
                        (= (to_rep4
                           (rec__decadriver__rx_frame_type__error
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__decadriver__rx_frame_type__error
                                                  (us_split_fields1 b))))
                        (= (ite (rec__decadriver__rx_frame_type__overrun
                                (us_split_fields1 a)) 1 0) (ite (rec__decadriver__rx_frame_type__overrun
                                                                (us_split_fields1
                                                                b)) 1 0))))
                   true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const decadriver__rx_frame_type__size__first__bit Int)

(declare-const decadriver__rx_frame_type__size__last__bit Int)

(declare-const decadriver__rx_frame_type__size__position Int)

;; decadriver__rx_frame_type__size__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__size__first__bit))

;; decadriver__rx_frame_type__size__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__size__first__bit decadriver__rx_frame_type__size__last__bit))

;; decadriver__rx_frame_type__size__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__size__position))

(declare-const decadriver__rx_frame_type__frame__first__bit Int)

(declare-const decadriver__rx_frame_type__frame__last__bit Int)

(declare-const decadriver__rx_frame_type__frame__position Int)

;; decadriver__rx_frame_type__frame__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__frame__first__bit))

;; decadriver__rx_frame_type__frame__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__frame__first__bit decadriver__rx_frame_type__frame__last__bit))

;; decadriver__rx_frame_type__frame__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__frame__position))

(declare-const decadriver__rx_frame_type__error__first__bit Int)

(declare-const decadriver__rx_frame_type__error__last__bit Int)

(declare-const decadriver__rx_frame_type__error__position Int)

;; decadriver__rx_frame_type__error__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__error__first__bit))

;; decadriver__rx_frame_type__error__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__error__first__bit decadriver__rx_frame_type__error__last__bit))

;; decadriver__rx_frame_type__error__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__error__position))

(declare-const decadriver__rx_frame_type__overrun__first__bit Int)

(declare-const decadriver__rx_frame_type__overrun__last__bit Int)

(declare-const decadriver__rx_frame_type__overrun__position Int)

;; decadriver__rx_frame_type__overrun__first__bit_axiom
  (assert (<= 0 decadriver__rx_frame_type__overrun__first__bit))

;; decadriver__rx_frame_type__overrun__last__bit_axiom
  (assert
  (< decadriver__rx_frame_type__overrun__first__bit decadriver__rx_frame_type__overrun__last__bit))

;; decadriver__rx_frame_type__overrun__position_axiom
  (assert (<= 0 decadriver__rx_frame_type__overrun__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ()
((rx_frame_type__ref
 (rx_frame_type__refqtmk (rx_frame_type__content us_rep)))))
(define-fun rx_frame_type__ref_rx_frame_type__content__projection ((a rx_frame_type__ref)) us_rep 
  (rx_frame_type__content a))

(declare-sort rx_frame_queue_index 0)

(define-fun in_range5 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x01)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 8))

(declare-fun user_eq8 (rx_frame_queue_index rx_frame_queue_index) Bool)

(declare-const dummy8 rx_frame_queue_index)

(declare-datatypes ()
((rx_frame_queue_index__ref
 (rx_frame_queue_index__refqtmk
 (rx_frame_queue_index__content rx_frame_queue_index)))))
(define-fun rx_frame_queue_index__ref_rx_frame_queue_index__content__projection ((a rx_frame_queue_index__ref)) rx_frame_queue_index 
  (rx_frame_queue_index__content a))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array (_ BitVec 8) us_rep))))))
(declare-fun slide1 ((Array (_ BitVec 8) us_rep) (_ BitVec 8)
  (_ BitVec 8)) (Array (_ BitVec 8) us_rep))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((first2 (_ BitVec 8)))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)))
  (forall ((old_first (_ BitVec 8)))
  (forall ((new_first (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (! (= (select (slide1 a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array (_ BitVec 8) us_rep)) (a__first (_ BitVec 8))
  (a__last (_ BitVec 8)) (b (Array (_ BitVec 8) us_rep))
  (b__first (_ BitVec 8))
  (b__last (_ BitVec 8))) Bool (ite (and
                                    (ite (bvule a__first a__last)
                                    (and (bvule b__first b__last)
                                    (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                    (bvugt b__first b__last))
                                    (forall ((temp___idx_155 (_ BitVec 8)))
                                    (=>
                                    (and (bvule a__first temp___idx_155)
                                    (bvule temp___idx_155 a__last))
                                    (= (bool_eq2 (select a temp___idx_155)
                                       (select b (bvadd (bvsub b__first a__first) temp___idx_155))) true))))
                               true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 8) us_rep)) (b (Array (_ BitVec 8) us_rep)))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_155 (_ BitVec 8)))
  (=> (and (bvule a__first temp___idx_155) (bvule temp___idx_155 a__last))
  (= (bool_eq2 (select a temp___idx_155)
     (select b (bvadd (bvsub b__first a__first) temp___idx_155))) true))))))))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__decadriver__receiver_type__frame_queue (Array (_ BitVec 8) us_rep))(rec__decadriver__receiver_type__queue_head rx_frame_queue_index)(rec__decadriver__receiver_type__rx_count natural)(rec__decadriver__receiver_type__overrun_occurred Bool)(rec__decadriver__receiver_type__frame_ready Bool)))))
(define-fun us_split_fields_rec__decadriver__receiver_type__frame_queue__projection ((a us_split_fields2)) (Array (_ BitVec 8) us_rep) 
  (rec__decadriver__receiver_type__frame_queue a))

(define-fun us_split_fields_rec__decadriver__receiver_type__queue_head__projection ((a us_split_fields2)) rx_frame_queue_index 
  (rec__decadriver__receiver_type__queue_head a))

(define-fun us_split_fields_rec__decadriver__receiver_type__rx_count__projection ((a us_split_fields2)) natural 
  (rec__decadriver__receiver_type__rx_count a))

(define-fun us_split_fields_rec__decadriver__receiver_type__overrun_occurred__projection ((a us_split_fields2)) Bool 
  (rec__decadriver__receiver_type__overrun_occurred a))

(define-fun us_split_fields_rec__decadriver__receiver_type__frame_ready__projection ((a us_split_fields2)) Bool 
  (rec__decadriver__receiver_type__frame_ready a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__3__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__3__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const decadriver__receiver_type__frame_queue__first__bit Int)

(declare-const decadriver__receiver_type__frame_queue__last__bit Int)

(declare-const decadriver__receiver_type__frame_queue__position Int)

;; decadriver__receiver_type__frame_queue__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__frame_queue__first__bit))

;; decadriver__receiver_type__frame_queue__last__bit_axiom
  (assert
  (< decadriver__receiver_type__frame_queue__first__bit decadriver__receiver_type__frame_queue__last__bit))

;; decadriver__receiver_type__frame_queue__position_axiom
  (assert (<= 0 decadriver__receiver_type__frame_queue__position))

(declare-const decadriver__receiver_type__queue_head__first__bit Int)

(declare-const decadriver__receiver_type__queue_head__last__bit Int)

(declare-const decadriver__receiver_type__queue_head__position Int)

;; decadriver__receiver_type__queue_head__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__queue_head__first__bit))

;; decadriver__receiver_type__queue_head__last__bit_axiom
  (assert
  (< decadriver__receiver_type__queue_head__first__bit decadriver__receiver_type__queue_head__last__bit))

;; decadriver__receiver_type__queue_head__position_axiom
  (assert (<= 0 decadriver__receiver_type__queue_head__position))

(declare-const decadriver__receiver_type__rx_count__first__bit Int)

(declare-const decadriver__receiver_type__rx_count__last__bit Int)

(declare-const decadriver__receiver_type__rx_count__position Int)

;; decadriver__receiver_type__rx_count__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__rx_count__first__bit))

;; decadriver__receiver_type__rx_count__last__bit_axiom
  (assert
  (< decadriver__receiver_type__rx_count__first__bit decadriver__receiver_type__rx_count__last__bit))

;; decadriver__receiver_type__rx_count__position_axiom
  (assert (<= 0 decadriver__receiver_type__rx_count__position))

(declare-const decadriver__receiver_type__overrun_occurred__first__bit Int)

(declare-const decadriver__receiver_type__overrun_occurred__last__bit Int)

(declare-const decadriver__receiver_type__overrun_occurred__position Int)

;; decadriver__receiver_type__overrun_occurred__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__overrun_occurred__first__bit))

;; decadriver__receiver_type__overrun_occurred__last__bit_axiom
  (assert
  (< decadriver__receiver_type__overrun_occurred__first__bit decadriver__receiver_type__overrun_occurred__last__bit))

;; decadriver__receiver_type__overrun_occurred__position_axiom
  (assert (<= 0 decadriver__receiver_type__overrun_occurred__position))

(declare-const decadriver__receiver_type__frame_ready__first__bit Int)

(declare-const decadriver__receiver_type__frame_ready__last__bit Int)

(declare-const decadriver__receiver_type__frame_ready__position Int)

;; decadriver__receiver_type__frame_ready__first__bit_axiom
  (assert (<= 0 decadriver__receiver_type__frame_ready__first__bit))

;; decadriver__receiver_type__frame_ready__last__bit_axiom
  (assert
  (< decadriver__receiver_type__frame_ready__first__bit decadriver__receiver_type__frame_ready__last__bit))

;; decadriver__receiver_type__frame_ready__position_axiom
  (assert (<= 0 decadriver__receiver_type__frame_ready__position))

(declare-fun user_eq9 (us_rep1 us_rep1) Bool)

(declare-datatypes ()
((receiver_type__ref
 (receiver_type__refqtmk (receiver_type__content us_rep1)))))
(define-fun receiver_type__ref_receiver_type__content__projection ((a receiver_type__ref)) us_rep1 
  (receiver_type__content a))

(declare-fun to_rep5 (rx_frame_queue_index) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) rx_frame_queue_index)

;; inversion_axiom
  (assert
  (forall ((x rx_frame_queue_index))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x rx_frame_queue_index)) (! (in_range5
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x02)))
     (=> (in_range5 y) (= (to_rep5 (of_rep5 x)) y))) :pattern ((to_rep5
                                                               (of_rep5 x))) )))

(define-fun to_int4 ((x rx_frame_queue_index)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x rx_frame_queue_index)) (! (in_range_int
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-fun temp_____aggregate_def_403 (us_rep) (Array (_ BitVec 8) us_rep))

(declare-fun temp_____aggregate_def_407 ((_ BitVec 8)) (Array Int bits_8))

(define-fun dynamic_invariant1 ((temp___expr_397 us_rep1)
  (temp___is_init_393 Bool) (temp___skip_constant_394 Bool)
  (temp___do_toplevel_395 Bool)
  (temp___do_typ_inv_396 Bool)) Bool (forall ((temp___398 (_ BitVec 8)))
                                     (=>
                                     (and (bvule #x00 temp___398)
                                     (bvule temp___398 #x01))
                                     (let ((temp___399 (select (rec__decadriver__receiver_type__frame_queue
                                                               (us_split_fields3
                                                               temp___expr_397)) temp___398)))
                                     (ite (= (to_rep4
                                             (rec__decadriver__rx_frame_type__error
                                             (us_split_fields1 temp___399))) 0)
                                     (< 0 (to_rep3
                                          (rec__decadriver__rx_frame_type__size
                                          (us_split_fields1 temp___399))))
                                     (= (to_rep3
                                        (rec__decadriver__rx_frame_type__size
                                        (us_split_fields1 temp___399))) 0))))))

(declare-const rliteral frame_length)

;; rliteral_axiom
  (assert (= (frame_lengthqtint rliteral) 0))

(define-fun default_initial_assumption ((temp___expr_401 us_rep1)
  (temp___skip_top_level_402 Bool)) Bool (and
                                         (and
                                         (= (rec__decadriver__receiver_type__frame_queue
                                            (us_split_fields3
                                            temp___expr_401)) (temp_____aggregate_def_403
                                                              (us_repqtmk
                                                              (us_split_fieldsqtmk
                                                              rliteral
                                                              (temp_____aggregate_def_407
                                                              #x00)
                                                              (of_rep4 0)
                                                              (distinct 0 0)))))
                                         (= (to_rep5
                                            (rec__decadriver__receiver_type__queue_head
                                            (us_split_fields3
                                            temp___expr_401))) #x01))
                                         (and
                                         (and
                                         (= (to_rep
                                            (rec__decadriver__receiver_type__rx_count
                                            (us_split_fields3
                                            temp___expr_401))) 0)
                                         (= (rec__decadriver__receiver_type__overrun_occurred
                                            (us_split_fields3
                                            temp___expr_401)) (distinct 0 0)))
                                         (= (rec__decadriver__receiver_type__frame_ready
                                            (us_split_fields3
                                            temp___expr_401)) (distinct 0 0)))))

(declare-sort bits_1 0)

(define-fun in_range6 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x01)))

(define-fun in_range_int1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq10 (bits_1 bits_1) Bool)

(declare-const dummy9 bits_1)

(declare-datatypes ()
((bits_1__ref (bits_1__refqtmk (bits_1__content bits_1)))))
(define-fun bits_1__ref_bits_1__content__projection ((a bits_1__ref)) bits_1 
  (bits_1__content a))

(declare-fun to_rep6 (bits_1) (_ BitVec 8))

(declare-fun of_rep6 ((_ BitVec 8)) bits_1)

;; inversion_axiom
  (assert
  (forall ((x bits_1))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_1)) (! (in_range6 (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x02)))
     (=> (in_range6 y) (= (to_rep6 (of_rep6 x)) y))) :pattern ((to_rep6
                                                               (of_rep6 x))) )))

(define-fun to_int5 ((x bits_1)) Int (bv2int (to_rep6 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_1)) (! (in_range_int1
  (to_int5 x)) :pattern ((to_int5 x)) )))

(declare-sort bits_2 0)

(define-fun in_range7 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x03)))

(define-fun in_range_int2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE8 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) (_ BitVec 8))

(declare-fun user_eq11 (bits_2 bits_2) Bool)

(declare-const dummy10 bits_2)

(declare-datatypes ()
((bits_2__ref (bits_2__refqtmk (bits_2__content bits_2)))))
(define-fun bits_2__ref_bits_2__content__projection ((a bits_2__ref)) bits_2 
  (bits_2__content a))

(declare-fun to_rep7 (bits_2) (_ BitVec 8))

(declare-fun of_rep7 ((_ BitVec 8)) bits_2)

;; inversion_axiom
  (assert
  (forall ((x bits_2))
  (! (= (of_rep7 (to_rep7 x)) x) :pattern ((to_rep7 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_2)) (! (in_range7 (to_rep7 x)) :pattern ((to_rep7 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x04)))
     (=> (in_range7 y) (= (to_rep7 (of_rep7 x)) y))) :pattern ((to_rep7
                                                               (of_rep7 x))) )))

(define-fun to_int6 ((x bits_2)) Int (bv2int (to_rep7 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_2)) (! (in_range_int2
  (to_int6 x)) :pattern ((to_int6 x)) )))

(declare-sort bits_3 0)

(define-fun in_range8 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x07)))

(define-fun in_range_int3 ((x Int)) Bool (and (<= 0 x) (<= x 7)))

(declare-fun attr__ATTRIBUTE_IMAGE9 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) (_ BitVec 8))

(declare-fun user_eq12 (bits_3 bits_3) Bool)

(declare-const dummy11 bits_3)

(declare-datatypes ()
((bits_3__ref (bits_3__refqtmk (bits_3__content bits_3)))))
(define-fun bits_3__ref_bits_3__content__projection ((a bits_3__ref)) bits_3 
  (bits_3__content a))

(declare-fun to_rep8 (bits_3) (_ BitVec 8))

(declare-fun of_rep8 ((_ BitVec 8)) bits_3)

;; inversion_axiom
  (assert
  (forall ((x bits_3))
  (! (= (of_rep8 (to_rep8 x)) x) :pattern ((to_rep8 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_3)) (! (in_range8 (to_rep8 x)) :pattern ((to_rep8 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x08)))
     (=> (in_range8 y) (= (to_rep8 (of_rep8 x)) y))) :pattern ((to_rep8
                                                               (of_rep8 x))) )))

(define-fun to_int7 ((x bits_3)) Int (bv2int (to_rep8 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_3)) (! (in_range_int3
  (to_int7 x)) :pattern ((to_int7 x)) )))

(declare-sort bits_7 0)

(define-fun in_range9 ((x (_ BitVec 8))) Bool (and (bvule #x00 x)
                                              (bvule x #x7F)))

(define-fun in_range_int4 ((x Int)) Bool (and (<= 0 x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE10 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) (_ BitVec 8))

(declare-fun user_eq13 (bits_7 bits_7) Bool)

(declare-const dummy12 bits_7)

(declare-datatypes ()
((bits_7__ref (bits_7__refqtmk (bits_7__content bits_7)))))
(define-fun bits_7__ref_bits_7__content__projection ((a bits_7__ref)) bits_7 
  (bits_7__content a))

(declare-fun to_rep9 (bits_7) (_ BitVec 8))

(declare-fun of_rep9 ((_ BitVec 8)) bits_7)

;; inversion_axiom
  (assert
  (forall ((x bits_7))
  (! (= (of_rep9 (to_rep9 x)) x) :pattern ((to_rep9 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_7)) (! (in_range9 (to_rep9 x)) :pattern ((to_rep9 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (let ((y (bvurem x #x80)))
     (=> (in_range9 y) (= (to_rep9 (of_rep9 x)) y))) :pattern ((to_rep9
                                                               (of_rep9 x))) )))

(define-fun to_int8 ((x bits_7)) Int (bv2int (to_rep9 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_7)) (! (in_range_int4
  (to_int8 x)) :pattern ((to_int8 x)) )))

(declare-sort bits_12 0)

(define-fun in_range10 ((x (_ BitVec 16))) Bool (and (bvule #x0000 x)
                                                (bvule x #x0FFF)))

(define-fun in_range_int5 ((x Int)) Bool (and (<= 0 x) (<= x 4095)))

(declare-fun attr__ATTRIBUTE_IMAGE11 ((_ BitVec 16)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) (_ BitVec 16))

(declare-fun user_eq14 (bits_12 bits_12) Bool)

(declare-const dummy13 bits_12)

(declare-datatypes ()
((bits_12__ref (bits_12__refqtmk (bits_12__content bits_12)))))
(define-fun bits_12__ref_bits_12__content__projection ((a bits_12__ref)) bits_12 
  (bits_12__content a))

(declare-fun to_rep10 (bits_12) (_ BitVec 16))

(declare-fun of_rep10 ((_ BitVec 16)) bits_12)

;; inversion_axiom
  (assert
  (forall ((x bits_12))
  (! (= (of_rep10 (to_rep10 x)) x) :pattern ((to_rep10 x)) )))

;; range_axiom
  (assert
  (forall ((x bits_12)) (! (in_range10
  (to_rep10 x)) :pattern ((to_rep10 x)) )))

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 16)))
  (! (let ((y (bvurem x #x1000)))
     (=> (in_range10 y) (= (to_rep10 (of_rep10 x)) y))) :pattern ((to_rep10
                                                                  (of_rep10
                                                                  x))) )))

(define-fun to_int9 ((x bits_12)) Int (bv2int (to_rep10 x)))

;; range_int_axiom
  (assert
  (forall ((x bits_12)) (! (in_range_int5
  (to_int9 x)) :pattern ((to_int9 x)) )))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2
 (rec__ada___dw1000__register_types__rx_finfo_type__rxflen bits_7)(rec__ada___dw1000__register_types__rx_finfo_type__rxfle bits_3)(rec__ada___dw1000__register_types__rx_finfo_type__rxnspl bits_2)(rec__ada___dw1000__register_types__rx_finfo_type__rxbr bits_2)(rec__ada___dw1000__register_types__rx_finfo_type__rng bits_1)(rec__ada___dw1000__register_types__rx_finfo_type__rxprf bits_2)(rec__ada___dw1000__register_types__rx_finfo_type__rxpsr bits_2)(rec__ada___dw1000__register_types__rx_finfo_type__rxpacc bits_12)(rec__ada___dw1000__register_types__rx_finfo_type__reserved bits_1)))))
(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxflen__projection ((a us_split_fields4)) bits_7 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxflen a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxfle__projection ((a us_split_fields4)) bits_3 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxfle a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxnspl__projection ((a us_split_fields4)) bits_2 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxnspl a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxbr__projection ((a us_split_fields4)) bits_2 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxbr a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rng__projection ((a us_split_fields4)) bits_1 
  (rec__ada___dw1000__register_types__rx_finfo_type__rng a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxprf__projection ((a us_split_fields4)) bits_2 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxprf a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxpsr__projection ((a us_split_fields4)) bits_2 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxpsr a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__rxpacc__projection ((a us_split_fields4)) bits_12 
  (rec__ada___dw1000__register_types__rx_finfo_type__rxpacc a))

(define-fun us_split_fields_rec__ada___dw1000__register_types__rx_finfo_type__reserved__projection ((a us_split_fields4)) bits_1 
  (rec__ada___dw1000__register_types__rx_finfo_type__reserved a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__7__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk2 (us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_fields__7__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (and
                         (= (to_rep9
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxflen
                            (us_split_fields5 a))) (to_rep9
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxflen
                                                   (us_split_fields5 b))))
                         (= (to_rep8
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxfle
                            (us_split_fields5 a))) (to_rep8
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxfle
                                                   (us_split_fields5 b)))))
                         (and
                         (and
                         (and
                         (= (to_rep7
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxnspl
                            (us_split_fields5 a))) (to_rep7
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxnspl
                                                   (us_split_fields5 b))))
                         (= (to_rep7
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxbr
                            (us_split_fields5 a))) (to_rep7
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxbr
                                                   (us_split_fields5 b)))))
                         (and
                         (= (to_rep6
                            (rec__ada___dw1000__register_types__rx_finfo_type__rng
                            (us_split_fields5 a))) (to_rep6
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rng
                                                   (us_split_fields5 b))))
                         (= (to_rep7
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxprf
                            (us_split_fields5 a))) (to_rep7
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxprf
                                                   (us_split_fields5 b))))))
                         (and
                         (and
                         (= (to_rep7
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxpsr
                            (us_split_fields5 a))) (to_rep7
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxpsr
                                                   (us_split_fields5 b))))
                         (= (to_rep10
                            (rec__ada___dw1000__register_types__rx_finfo_type__rxpacc
                            (us_split_fields5 a))) (to_rep10
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__rxpacc
                                                   (us_split_fields5 b)))))
                         (= (to_rep6
                            (rec__ada___dw1000__register_types__rx_finfo_type__reserved
                            (us_split_fields5 a))) (to_rep6
                                                   (rec__ada___dw1000__register_types__rx_finfo_type__reserved
                                                   (us_split_fields5 b)))))))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxflen__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxflen__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxflen__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxflen__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxflen__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxflen__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxflen__first__bit 
  ada___dw1000__register_types__rx_finfo_type__rxflen__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxflen__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxflen__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxfle__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxfle__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxfle__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxfle__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxfle__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxfle__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxfle__first__bit ada___dw1000__register_types__rx_finfo_type__rxfle__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxfle__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxfle__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxnspl__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxnspl__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxnspl__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxnspl__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxnspl__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxnspl__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxnspl__first__bit 
  ada___dw1000__register_types__rx_finfo_type__rxnspl__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxnspl__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxnspl__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxbr__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxbr__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxbr__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxbr__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxbr__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxbr__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxbr__first__bit ada___dw1000__register_types__rx_finfo_type__rxbr__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxbr__position_axiom
  (assert (<= 0 ada___dw1000__register_types__rx_finfo_type__rxbr__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rng__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rng__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rng__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rng__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rng__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rng__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rng__first__bit ada___dw1000__register_types__rx_finfo_type__rng__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rng__position_axiom
  (assert (<= 0 ada___dw1000__register_types__rx_finfo_type__rng__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxprf__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxprf__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxprf__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxprf__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxprf__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxprf__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxprf__first__bit ada___dw1000__register_types__rx_finfo_type__rxprf__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxprf__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxprf__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxpsr__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxpsr__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxpsr__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxpsr__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxpsr__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxpsr__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxpsr__first__bit ada___dw1000__register_types__rx_finfo_type__rxpsr__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxpsr__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxpsr__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__rxpacc__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxpacc__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__rxpacc__position Int)

;; ada___dw1000__register_types__rx_finfo_type__rxpacc__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxpacc__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxpacc__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__rxpacc__first__bit 
  ada___dw1000__register_types__rx_finfo_type__rxpacc__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__rxpacc__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__rxpacc__position))

(declare-const ada___dw1000__register_types__rx_finfo_type__reserved__first__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__reserved__last__bit Int)

(declare-const ada___dw1000__register_types__rx_finfo_type__reserved__position Int)

;; ada___dw1000__register_types__rx_finfo_type__reserved__first__bit_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__reserved__first__bit))

;; ada___dw1000__register_types__rx_finfo_type__reserved__last__bit_axiom
  (assert
  (< ada___dw1000__register_types__rx_finfo_type__reserved__first__bit 
  ada___dw1000__register_types__rx_finfo_type__reserved__last__bit))

;; ada___dw1000__register_types__rx_finfo_type__reserved__position_axiom
  (assert
  (<= 0 ada___dw1000__register_types__rx_finfo_type__reserved__position))

(declare-fun user_eq15 (us_rep2 us_rep2) Bool)

(declare-const dummy14 us_rep2)

(declare-datatypes ()
((rx_finfo_type__ref
 (rx_finfo_type__refqtmk (rx_finfo_type__content us_rep2)))))
(define-fun rx_finfo_type__ref_rx_finfo_type__content__projection ((a rx_finfo_type__ref)) us_rep2 
  (rx_finfo_type__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-datatypes ()
((register_type__ref
 (register_type__refqtmk (register_type__content us_rep2)))))
(define-fun register_type__ref_register_type__content__projection ((a register_type__ref)) us_rep2 
  (register_type__content a))

(declare-const r15b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun dynamic_invariant2 ((temp___expr_310 us_rep)
  (temp___is_init_306 Bool) (temp___skip_constant_307 Bool)
  (temp___do_toplevel_308 Bool)
  (temp___do_typ_inv_309 Bool)) Bool (=> (= temp___do_toplevel_308 true)
                                     (=> (= temp___is_init_306 true)
                                     (ite (= (to_rep4
                                             (rec__decadriver__rx_frame_type__error
                                             (us_split_fields1
                                             temp___expr_310))) 0)
                                     (< 0 (to_rep3
                                          (rec__decadriver__rx_frame_type__size
                                          (us_split_fields1 temp___expr_310))))
                                     (= (to_rep3
                                        (rec__decadriver__rx_frame_type__size
                                        (us_split_fields1 temp___expr_310))) 0)))))

(define-fun dynamic_predicate ((temp___321 us_rep)) Bool (ite (= (to_rep4
                                                                 (rec__decadriver__rx_frame_type__error
                                                                 (us_split_fields1
                                                                 temp___321))) 0)
                                                         (< 0 (to_rep3
                                                              (rec__decadriver__rx_frame_type__size
                                                              (us_split_fields1
                                                              temp___321))))
                                                         (= (to_rep3
                                                            (rec__decadriver__rx_frame_type__size
                                                            (us_split_fields1
                                                            temp___321))) 0)))

(define-fun dynamic_invariant3 ((temp___expr_327 (_ BitVec 8))
  (temp___is_init_323 Bool) (temp___skip_constant_324 Bool)
  (temp___do_toplevel_325 Bool)
  (temp___do_typ_inv_326 Bool)) Bool (=>
                                     (or (= temp___is_init_323 true)
                                     (bvule #x00 #x01)) (in_range5
                                     temp___expr_327)))

(declare-datatypes () ((t17b__ref (t17b__refqtmk (t17b__content us_t)))))
(define-fun t17b__ref_t17b__content__projection ((a t17b__ref)) us_t 
  (t17b__content a))

(define-fun dynamic_invariant4 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant5 ((temp___expr_276 Int)
  (temp___is_init_272 Bool) (temp___skip_constant_273 Bool)
  (temp___do_toplevel_274 Bool)
  (temp___do_typ_inv_275 Bool)) Bool (=>
                                     (or (= temp___is_init_272 true)
                                     (<= 0 1024)) (in_range3
                                     temp___expr_276)))

(define-fun dynamic_invariant6 ((temp___expr_283 Int)
  (temp___is_init_279 Bool) (temp___skip_constant_280 Bool)
  (temp___do_toplevel_281 Bool)
  (temp___do_typ_inv_282 Bool)) Bool (=>
                                     (or (= temp___is_init_279 true)
                                     (<= 0 5)) (in_range4 temp___expr_283)))

;; def_axiom
  (assert
  (forall ((temp___405 us_rep))
  (=> (dynamic_invariant2 temp___405 true true true true)
  (forall ((temp___406 (_ BitVec 8)))
  (= (select (temp_____aggregate_def_403 temp___405) temp___406) temp___405)))))

(define-fun dynamic_invariant7 ((temp___expr_468 (_ BitVec 8))
  (temp___is_init_464 Bool) (temp___skip_constant_465 Bool)
  (temp___do_toplevel_466 Bool)
  (temp___do_typ_inv_467 Bool)) Bool (=>
                                     (or (= temp___is_init_464 true)
                                     (bvule #x00 #x01)) (in_range6
                                     temp___expr_468)))

(define-fun dynamic_invariant8 ((temp___expr_475 (_ BitVec 8))
  (temp___is_init_471 Bool) (temp___skip_constant_472 Bool)
  (temp___do_toplevel_473 Bool)
  (temp___do_typ_inv_474 Bool)) Bool (=>
                                     (or (= temp___is_init_471 true)
                                     (bvule #x00 #x03)) (in_range7
                                     temp___expr_475)))

(define-fun dynamic_invariant9 ((temp___expr_482 (_ BitVec 8))
  (temp___is_init_478 Bool) (temp___skip_constant_479 Bool)
  (temp___do_toplevel_480 Bool)
  (temp___do_typ_inv_481 Bool)) Bool (=>
                                     (or (= temp___is_init_478 true)
                                     (bvule #x00 #x07)) (in_range8
                                     temp___expr_482)))

(define-fun dynamic_invariant10 ((temp___expr_544 (_ BitVec 8))
  (temp___is_init_540 Bool) (temp___skip_constant_541 Bool)
  (temp___do_toplevel_542 Bool)
  (temp___do_typ_inv_543 Bool)) Bool (=>
                                     (or (= temp___is_init_540 true)
                                     (bvule #x00 #x7F)) (in_range9
                                     temp___expr_544)))

(define-fun dynamic_invariant11 ((temp___expr_297 (_ BitVec 8))
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool) (temp___do_typ_inv_296 Bool)) Bool true)

(define-fun dynamic_invariant12 ((temp___expr_551 (_ BitVec 16))
  (temp___is_init_547 Bool) (temp___skip_constant_548 Bool)
  (temp___do_toplevel_549 Bool)
  (temp___do_typ_inv_550 Bool)) Bool (=>
                                     (or (= temp___is_init_547 true)
                                     (bvule #x0000 #x0FFF)) (in_range10
                                     temp___expr_551)))

(define-fun dynamic_invariant13 ((temp___expr_304 us_t)
  (temp___is_init_300 Bool) (temp___skip_constant_301 Bool)
  (temp___do_toplevel_302 Bool)
  (temp___do_typ_inv_303 Bool)) Bool (=>
                                     (not (= temp___skip_constant_301 true))
                                     (dynamic_property 0 2147483647
                                     (first1 temp___expr_304)
                                     (last1 temp___expr_304))))

;; def_axiom
  (assert
  (forall ((temp___409 (_ BitVec 8)))
  (=> (dynamic_invariant11 temp___409 true true true true)
  (forall ((temp___410 Int))
  (= (to_rep2 (select (temp_____aggregate_def_407 temp___409) temp___410)) temp___409)))))

(declare-const rx_finfo_reg__split_fields us_split_fields4)

(declare-const frame_length1 Int)

(declare-const next_idx (_ BitVec 8))

(declare-const self__ us_split_fields2)

;; Assume
  (assert (dynamic_invariant1 (us_repqtmk1 self__) true false true true))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant frame_length1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 next_idx false false true true))

(declare-const ada___dw1000__registers__rx_finfo__read__reg__fields us_split_fields4)

;; Ensures
  (assert true)

(declare-const rx_finfo_reg__split_fields1 us_split_fields4)

;; H
  (assert
  (= rx_finfo_reg__split_fields1 ada___dw1000__registers__rx_finfo__read__reg__fields))

(declare-const o (_ BitVec 8))

;; Ensures
  (assert
  (= (to_rep8
     (rec__ada___dw1000__register_types__rx_finfo_type__rxfle
     rx_finfo_reg__split_fields1)) o))

(define-fun o1 () Int (* (bv2int o) 128))

;; Ensures
  (assert (in_range1 o1))

(declare-const o2 (_ BitVec 8))

;; Ensures
  (assert
  (= (to_rep9
     (rec__ada___dw1000__register_types__rx_finfo_type__rxflen
     rx_finfo_reg__split_fields1)) o2))

(define-fun o3 () Int (+ (bv2int o2) o1))

;; Ensures
  (assert (in_range1 o3))

;; Ensures
  (assert (in_range2 o3))

(declare-const frame_length2 Int)

;; H
  (assert (= frame_length2 o3))

(assert
;; defqtvc
 ;; File "decadriver.ads", line 127, characters 0-0
  (not (<= frame_length2 1024)))
(check-sat)
