(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(define-fun dynamic_invariant ((temp___expr_201 (Array Int natural))
  (temp___is_init_197 Bool) (temp___skip_constant_198 Bool)
  (temp___do_toplevel_199 Bool)
  (temp___do_typ_inv_200 Bool)) Bool (=> (= temp___do_toplevel_199 true)
                                     (=> (= temp___is_init_197 true)
                                     (not
                                     (= (to_rep (select temp___expr_201 3)) 0)))))

(define-fun dynamic_predicate ((temp___208 (Array Int natural))) Bool 
  (not (= (to_rep (select temp___208 3)) 0)))

(define-fun dynamic_invariant1 ((temp___expr_224 (Array Int natural))
  (temp___is_init_220 Bool) (temp___skip_constant_221 Bool)
  (temp___do_toplevel_222 Bool)
  (temp___do_typ_inv_223 Bool)) Bool (=> (= temp___do_toplevel_222 true)
                                     (=> (= temp___is_init_220 true)
                                     (not
                                     (= (to_rep (select temp___expr_224 3)) 0)))))

(define-fun dynamic_predicate1 ((temp___231 (Array Int natural))) Bool 
  (not (= (to_rep (select temp___231 3)) 0)))

(declare-sort constr_int 0)

(declare-fun constr_intqtint (constr_int) Int)

;; constr_int'axiom
  (assert
  (forall ((i constr_int))
  (and (<= (- 10) (constr_intqtint i)) (<= (constr_intqtint i) 10))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (constr_int constr_int) Bool)

(declare-const dummy1 constr_int)

(declare-datatypes ()
((constr_int__ref (constr_int__refqtmk (constr_int__content constr_int)))))
(define-fun constr_int__ref_constr_int__content__projection ((a constr_int__ref)) constr_int 
  (constr_int__content a))

(define-fun dynamic_invariant2 ((temp___expr_214 Int)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)
  (temp___do_typ_inv_213 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_210 true)
                                     (<= (- 10) 10)) (in_range1
                                     temp___expr_214))
                                     (=> (= temp___do_toplevel_212 true)
                                     (=> (= temp___is_init_210 true)
                                     (or
                                     (and (<= (- 10) temp___expr_214)
                                     (<= temp___expr_214 (- 1)))
                                     (and (<= 1 temp___expr_214)
                                     (<= temp___expr_214 10)))))))

(define-fun dynamic_predicate2 ((temp___218 Int)) Bool (or
                                                       (and
                                                       (<= (- 10) temp___218)
                                                       (<= temp___218 (- 1)))
                                                       (and (<= 1 temp___218)
                                                       (<= temp___218 10))))

(declare-sort constr_int_2 0)

(declare-fun constr_int_2qtint (constr_int_2) Int)

;; constr_int_2'axiom
  (assert
  (forall ((i constr_int_2))
  (and (<= (- 10) (constr_int_2qtint i)) (<= (constr_int_2qtint i) 10))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (constr_int_2 constr_int_2) Bool)

(declare-const dummy2 constr_int_2)

(declare-datatypes ()
((constr_int_2__ref
 (constr_int_2__refqtmk (constr_int_2__content constr_int_2)))))
(define-fun constr_int_2__ref_constr_int_2__content__projection ((a constr_int_2__ref)) constr_int_2 
  (constr_int_2__content a))

(define-fun dynamic_invariant3 ((temp___expr_237 Int)
  (temp___is_init_233 Bool) (temp___skip_constant_234 Bool)
  (temp___do_toplevel_235 Bool)
  (temp___do_typ_inv_236 Bool)) Bool (and
                                     (=>
                                     (or (= temp___is_init_233 true)
                                     (<= (- 10) 10)) (in_range2
                                     temp___expr_237))
                                     (=> (= temp___do_toplevel_235 true)
                                     (=> (= temp___is_init_233 true)
                                     (or
                                     (and (<= (- 10) temp___expr_237)
                                     (<= temp___expr_237 (- 1)))
                                     (and (<= 1 temp___expr_237)
                                     (<= temp___expr_237 10)))))))

(define-fun dynamic_predicate3 ((temp___241 Int)) Bool (or
                                                       (and
                                                       (<= (- 10) temp___241)
                                                       (<= temp___241 (- 1)))
                                                       (and (<= 1 temp___241)
                                                       (<= temp___241 10))))

(declare-sort my_int 0)

(declare-fun my_intqtint (my_int) Int)

;; my_int'axiom
  (assert
  (forall ((i my_int))
  (and (<= (- 10) (my_intqtint i)) (<= (my_intqtint i) 10))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 10) x) (<= x 10)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (my_int my_int) Bool)

(declare-const dummy3 my_int)

(declare-datatypes ()
((my_int__ref (my_int__refqtmk (my_int__content my_int)))))
(define-fun my_int__ref_my_int__content__projection ((a my_int__ref)) my_int 
  (my_int__content a))

(define-fun dynamic_invariant4 ((temp___expr_194 Int)
  (temp___is_init_190 Bool) (temp___skip_constant_191 Bool)
  (temp___do_toplevel_192 Bool)
  (temp___do_typ_inv_193 Bool)) Bool (=>
                                     (or (= temp___is_init_190 true)
                                     (<= (- 10) 10)) (in_range3
                                     temp___expr_194)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(define-fun to_rep1 ((x my_int)) Int (my_intqtint x))

(declare-fun of_rep1 (Int) my_int)

;; inversion_axiom
  (assert
  (forall ((x my_int))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x my_int)) (! (in_range3 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(define-fun to_rep2 ((x constr_int)) Int (constr_intqtint x))

(declare-fun of_rep2 (Int) constr_int)

;; inversion_axiom
  (assert
  (forall ((x constr_int))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x constr_int)) (! (in_range1
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun to_rep3 ((x constr_int_2)) Int (constr_int_2qtint x))

(declare-fun of_rep3 (Int) constr_int_2)

;; inversion_axiom
  (assert
  (forall ((x constr_int_2))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x constr_int_2)) (! (in_range2
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(define-fun dynamic_predicate4 ((temp___243 (Array Int natural))) Bool 
  (not (= (to_rep (select temp___243 3)) 0)))

(define-fun dynamic_predicate5 ((temp___245 (Array Int natural))) Bool 
  (not (= (to_rep (select temp___245 3)) 0)))

(declare-fun formals__x__aggregate_def (Int) (Array Int natural))

(declare-fun formals__y__aggregate_def (Int) (Array Int natural))

(declare-fun formals__u__aggregate_def (Int) (Array Int natural))

(define-fun dynamic_invariant5 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-const rliteral natural)

;; rliteral_axiom
  (assert (= (naturalqtint rliteral) 1))

;; def_axiom
  (assert
  (forall ((temp___248 Int))
  (=> (dynamic_invariant5 temp___248 true true true true)
  (forall ((temp___249 Int))
  (= (select (formals__x__aggregate_def temp___248) temp___249) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___251 Int))
  (=> (dynamic_invariant5 temp___251 true true true true)
  (forall ((temp___252 Int))
  (= (select (formals__y__aggregate_def temp___251) temp___252) rliteral)))))

;; def_axiom
  (assert
  (forall ((temp___256 Int))
  (=> (dynamic_invariant5 temp___256 true true true true)
  (forall ((temp___257 Int))
  (= (select (formals__u__aggregate_def temp___256) temp___257) rliteral)))))

(declare-const x (Array Int natural))

;; H
  (assert (= x (formals__x__aggregate_def 1)))

;; Assume
  (assert true)

(define-fun temp___253 () (Array Int natural) (formals__y__aggregate_def 1))

;; Assert
  (assert (dynamic_predicate4 temp___253))

;; Assert
  (assert (dynamic_predicate temp___253))

(declare-const y (Array Int natural))

;; H
  (assert (= y temp___253))

;; Assume
  (assert (dynamic_invariant y true false true true))

(define-fun temp___258 () (Array Int natural) (formals__u__aggregate_def 1))

;; Assert
  (assert (dynamic_predicate5 temp___258))

;; Assert
  (assert (dynamic_predicate1 temp___258))

(declare-const u (Array Int natural))

;; H
  (assert (= u temp___258))

;; Assume
  (assert (dynamic_invariant1 u true false true true))

(declare-const z Int)

;; H
  (assert (= z 1))

;; Assume
  (assert (dynamic_invariant4 z true false true true))

;; Assert
  (assert (or (and (<= (- 10) 1) (<= 1 (- 1))) (and (<= 1 1) (<= 1 10))))

(declare-const w Int)

;; H
  (assert (= w 1))

;; Assume
  (assert (dynamic_invariant2 w true false true true))

;; Assert
  (assert (or (and (<= (- 10) 1) (<= 1 (- 1))) (and (<= 1 1) (<= 1 10))))

(declare-const v Int)

;; H
  (assert (= v 1))

;; Assume
  (assert (dynamic_invariant3 v true false true true))

;; Assert
  (assert (or (and (<= (- 10) z) (<= z (- 1))) (and (<= 1 z) (<= z 10))))

(declare-const formals__p__3__a Int)

;; Ensures
  (assert (dynamic_invariant2 formals__p__3__a true true true true))

(declare-const z1 Int)

;; H
  (assert (= z1 formals__p__3__a))

(declare-const z2 Int)

;; Ensures
  (assert (dynamic_invariant4 z2 true true true true))

(declare-const z3 Int)

;; Ensures
  (assert (dynamic_invariant4 z3 true true true true))

;; Assert
  (assert (or (and (<= (- 10) z3) (<= z3 (- 1))) (and (<= 1 z3) (<= z3 10))))

(declare-const formals__p__3__a1 Int)

;; Ensures
  (assert (dynamic_invariant2 formals__p__3__a1 true true true true))

(declare-const z4 Int)

;; H
  (assert (= z4 formals__p__3__a1))

(declare-const z5 Int)

;; Ensures
  (assert (dynamic_invariant4 z5 true true true true))

;; Assert
  (assert (or (and (<= (- 10) z5) (<= z5 (- 1))) (and (<= 1 z5) (<= z5 10))))

(declare-const formals__p__3__a2 Int)

;; Ensures
  (assert (dynamic_invariant2 formals__p__3__a2 true true true true))

(declare-const o my_int)

;; Ensures
  (assert (= (to_rep1 o) formals__p__3__a2))

(declare-const o1 Int)

;; Ensures
  (assert (= (to_rep1 o) o1))

(declare-const z6 Int)

;; H
  (assert (= z6 o1))

(declare-const w1 Int)

;; Ensures
  (assert (dynamic_invariant2 w1 true true true true))

(declare-const formals__p2__2__a Int)

;; Ensures
  (assert (dynamic_invariant4 formals__p2__2__a true true true true))

(declare-const temp___270 constr_int)

;; Ensures
  (assert (= (to_rep2 temp___270) formals__p2__2__a))

;; Assert
  (assert
  (let ((temp___272 (to_rep2 temp___270)))
  (or (and (<= (- 10) temp___272) (<= temp___272 (- 1)))
  (and (<= 1 temp___272) (<= temp___272 10)))))

(declare-const o2 Int)

;; Ensures
  (assert (= (to_rep2 temp___270) o2))

(declare-const w2 Int)

;; H
  (assert (= w2 o2))

(declare-const z7 Int)

;; Ensures
  (assert (dynamic_invariant4 z7 true true true true))

(assert
;; defqtvc
 ;; File "formals.adb", line 1, characters 0-0
  (not (or (and (<= (- 10) z7) (<= z7 (- 1))) (and (<= 1 z7) (<= z7 10)))))
(check-sat)

(exit)
