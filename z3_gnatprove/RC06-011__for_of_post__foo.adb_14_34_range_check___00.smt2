(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort potato_size_limit 0)

(define-fun in_range1 ((x Float32)) Bool (and (fp.isFinite32 x)
                                         (and
                                         (fp.leq (fp.neg (fp #b0 #b10000010 #b11100000000000000000000)) x)
                                         (fp.leq x (fp #b0 #b10000010 #b01000000000000000000000)))))

(declare-fun user_eq (potato_size_limit potato_size_limit) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy potato_size_limit)

(declare-datatypes ()
((potato_size_limit__ref
 (potato_size_limit__refqtmk (potato_size_limit__content potato_size_limit)))))
(define-fun potato_size_limit__ref_potato_size_limit__content__projection ((a potato_size_limit__ref)) potato_size_limit 
  (potato_size_limit__content a))

(declare-fun to_rep (potato_size_limit) Float32)

(declare-fun of_rep (Float32) potato_size_limit)

;; inversion_axiom
  (assert
  (forall ((x potato_size_limit))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x potato_size_limit)) (! (in_range1
  (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Float32))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__foo__potato_shape__size_demand_min potato_size_limit)(rec__foo__potato_shape__size_demand_max potato_size_limit)))))
(define-fun us_split_fields_rec__foo__potato_shape__size_demand_min__projection ((a us_split_fields)) potato_size_limit 
  (rec__foo__potato_shape__size_demand_min a))

(define-fun us_split_fields_rec__foo__potato_shape__size_demand_max__projection ((a us_split_fields)) potato_size_limit 
  (rec__foo__potato_shape__size_demand_max a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (fp.eq (to_rep
                               (rec__foo__potato_shape__size_demand_min
                               (us_split_fields1 a))) (to_rep
                                                      (rec__foo__potato_shape__size_demand_min
                                                      (us_split_fields1 b))))
                        (fp.eq (to_rep
                               (rec__foo__potato_shape__size_demand_max
                               (us_split_fields1 a))) (to_rep
                                                      (rec__foo__potato_shape__size_demand_max
                                                      (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const foo__potato_shape__size_demand_min__first__bit Int)

(declare-const foo__potato_shape__size_demand_min__last__bit Int)

(declare-const foo__potato_shape__size_demand_min__position Int)

;; foo__potato_shape__size_demand_min__first__bit_axiom
  (assert (<= 0 foo__potato_shape__size_demand_min__first__bit))

;; foo__potato_shape__size_demand_min__last__bit_axiom
  (assert
  (< foo__potato_shape__size_demand_min__first__bit foo__potato_shape__size_demand_min__last__bit))

;; foo__potato_shape__size_demand_min__position_axiom
  (assert (<= 0 foo__potato_shape__size_demand_min__position))

(declare-const foo__potato_shape__size_demand_max__first__bit Int)

(declare-const foo__potato_shape__size_demand_max__last__bit Int)

(declare-const foo__potato_shape__size_demand_max__position Int)

;; foo__potato_shape__size_demand_max__first__bit_axiom
  (assert (<= 0 foo__potato_shape__size_demand_max__first__bit))

;; foo__potato_shape__size_demand_max__last__bit_axiom
  (assert
  (< foo__potato_shape__size_demand_max__first__bit foo__potato_shape__size_demand_max__last__bit))

;; foo__potato_shape__size_demand_max__position_axiom
  (assert (<= 0 foo__potato_shape__size_demand_max__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((potato_shape__ref (potato_shape__refqtmk (potato_shape__content us_rep)))))
(define-fun potato_shape__ref_potato_shape__content__projection ((a potato_shape__ref)) us_rep 
  (potato_shape__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (bool_eq (select a temp___idx_154)
                              (select b (+ (- b__first a__first) temp___idx_154))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (bool_eq (select a temp___idx_154)
     (select b (+ (- b__first a__first) temp___idx_154))) true))))))))

(declare-const dummy2 (Array Int us_rep))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq2 ((Array Int us_rep) (Array Int us_rep)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__foo__potato_metrics_t__parameters (Array Int us_rep))))))
(define-fun us_split_fields_rec__foo__potato_metrics_t__parameters__projection ((a us_split_fields2)) (Array Int us_rep) 
  (rec__foo__potato_metrics_t__parameters a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (bool_eq1
                            (rec__foo__potato_metrics_t__parameters
                            (us_split_fields3 a)) 0 2
                            (rec__foo__potato_metrics_t__parameters
                            (us_split_fields3 b)) 0 2) true)
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const foo__potato_metrics_t__parameters__first__bit Int)

(declare-const foo__potato_metrics_t__parameters__last__bit Int)

(declare-const foo__potato_metrics_t__parameters__position Int)

;; foo__potato_metrics_t__parameters__first__bit_axiom
  (assert (<= 0 foo__potato_metrics_t__parameters__first__bit))

;; foo__potato_metrics_t__parameters__last__bit_axiom
  (assert
  (< foo__potato_metrics_t__parameters__first__bit foo__potato_metrics_t__parameters__last__bit))

;; foo__potato_metrics_t__parameters__position_axiom
  (assert (<= 0 foo__potato_metrics_t__parameters__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((potato_metrics_t__ref
 (potato_metrics_t__refqtmk (potato_metrics_t__content us_rep1)))))
(define-fun potato_metrics_t__ref_potato_metrics_t__content__projection ((a potato_metrics_t__ref)) us_rep1 
  (potato_metrics_t__content a))

(declare-const metrics us_rep1)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-sort potato_kind 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (potato_kind potato_kind) Bool)

(declare-const dummy4 potato_kind)

(declare-datatypes ()
((potato_kind__ref (potato_kind__refqtmk (potato_kind__content potato_kind)))))
(define-fun potato_kind__ref_potato_kind__content__projection ((a potato_kind__ref)) potato_kind 
  (potato_kind__content a))

(define-fun dynamic_invariant ((temp___expr_166 Float32)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (fp.leq (fp.neg (fp #b0 #b10000010 #b11100000000000000000000)) (fp #b0 #b10000010 #b01000000000000000000000)))
                                     (in_range1 temp___expr_166)))

(define-fun dynamic_invariant1 ((temp___expr_159 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)
  (temp___do_typ_inv_158 Bool)) Bool (=>
                                     (or (= temp___is_init_155 true)
                                     (<= 0 2)) (in_range2 temp___expr_159)))

(declare-const max Float32)

(declare-const min Float32)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant max false false true true))

;; Assume
  (assert (dynamic_invariant min false false true true))

(declare-const o Float32)

;; Ensures
  (assert
  (= (to_rep
     (rec__foo__potato_shape__size_demand_max
     (us_split_fields1
     (select (rec__foo__potato_metrics_t__parameters
             (us_split_fields3 metrics)) 0)))) o))

(declare-const max1 Float32)

;; H
  (assert (= max1 o))

(declare-const o1 Float32)

;; Ensures
  (assert
  (= (to_rep
     (rec__foo__potato_shape__size_demand_min
     (us_split_fields1
     (select (rec__foo__potato_metrics_t__parameters
             (us_split_fields3 metrics)) 0)))) o1))

(declare-const min1 Float32)

;; H
  (assert (= min1 o1))

(declare-const i Int)

;; H
  (assert (= i 1))

(declare-const o2 Float32)

;; Ensures
  (assert
  (= (to_rep
     (rec__foo__potato_shape__size_demand_max
     (us_split_fields1
     (select (rec__foo__potato_metrics_t__parameters
             (us_split_fields3 metrics)) i)))) o2))

(define-fun o3 () Float32 (fp.max max1 o2))

(assert
;; defqtvc
 ;; File "foo.ads", line 18, characters 0-0
  (not (in_range1 o3)))
(check-sat)

(exit)
