;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort enum_t 0)

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (enum_t enum_t) Bool)

(declare-const dummy enum_t)

(declare-datatypes ()
((enum_t__ref (enum_t__refqtmk (enum_t__content enum_t)))))
(define-fun enum_t__ref_enum_t__content__projection ((a enum_t__ref)) enum_t 
  (enum_t__content a))

(declare-fun to_rep (enum_t) Int)

(declare-fun of_rep (Int) enum_t)

;; inversion_axiom
  (assert
  (forall ((x enum_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x enum_t)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int enum_t))))))
(declare-fun slide ((Array Int enum_t) Int Int) (Array Int enum_t))

;; slide_eq
  (assert
  (forall ((a (Array Int enum_t)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int enum_t)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int enum_t)) (a__first Int) (a__last Int)
  (b (Array Int enum_t)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (to_rep (select a temp___idx_155)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_155)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int enum_t)) (b (Array Int enum_t)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (to_rep (select a temp___idx_155)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_155)))))))))))

(declare-const zero_enum_map (Array Int enum_t))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun arrays__zero_enum_map__aggregate_def (Int
  Int) (Array Int enum_t))

(define-fun dynamic_invariant ((temp___expr_181 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (<= 0 2)) (in_range temp___expr_181)))

;; zero_enum_map__def_axiom
  (assert (= zero_enum_map (arrays__zero_enum_map__aggregate_def 2 0)))

;; def_axiom
  (assert
  (forall ((temp___159 Int) (temp___160 Int))
  (let ((temp___158 (arrays__zero_enum_map__aggregate_def temp___159
                    temp___160)))
  (=>
  (and (dynamic_invariant temp___159 true true true true) (dynamic_invariant
  temp___160 true true true true))
  (forall ((temp___161 Int))
  (ite (= temp___161 2)
  (= (to_rep (select temp___158 temp___161)) temp___159)
  (= (to_rep (select temp___158 temp___161)) temp___160)))))))

(declare-const m (Array Int enum_t))

;; Assume
  (assert true)

;; Assume
  (assert (= (arrays__zero_enum_map__aggregate_def 2 0) zero_enum_map))

;; Assume
  (assert true)

(declare-const m1 (Array Int enum_t))

;; H
  (assert (= m1 zero_enum_map))

(assert
;; defqtvc
 ;; File "arrays.adb", line 131, characters 0-0
  (not (= (to_rep (select m1 1)) 0)))
(check-sat)
