(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun get_state (Int) Int)

(declare-fun get_state__function_guard (Int Int) Bool)

(declare-sort states_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (states_t states_t) Bool)

(declare-const dummy states_t)

(declare-datatypes ()
((states_t__ref (states_t__refqtmk (states_t__content states_t)))))
(define-fun states_t__ref_states_t__content__projection ((a states_t__ref)) states_t 
  (states_t__content a))

(define-fun dynamic_invariant ((temp___expr_173 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)
  (temp___do_typ_inv_172 Bool)) Bool (=>
                                     (or (= temp___is_init_169 true)
                                     (<= 0 3)) (in_range1 temp___expr_173)))

;; get_state__post_axiom
  (assert
  (forall ((sm_using_case_expression__state Int))
  (! (=> (dynamic_invariant sm_using_case_expression__state true true true
     true)
     (let ((result (get_state sm_using_case_expression__state)))
     (=> (get_state__function_guard result sm_using_case_expression__state)
     (dynamic_invariant result true false true true)))) :pattern ((get_state
                                                                  sm_using_case_expression__state)) )))

;; get_state__def_axiom
  (assert
  (forall ((sm_using_case_expression__state Int))
  (! (=> (dynamic_invariant sm_using_case_expression__state true true true
     true)
     (= (get_state sm_using_case_expression__state) sm_using_case_expression__state)) :pattern (
  (get_state sm_using_case_expression__state)) )))

(declare-fun to_rep (states_t) Int)

(declare-fun of_rep (Int) states_t)

;; inversion_axiom
  (assert
  (forall ((x states_t))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x states_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort triggers_t 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 4)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (triggers_t triggers_t) Bool)

(declare-const dummy1 triggers_t)

(declare-datatypes ()
((triggers_t__ref (triggers_t__refqtmk (triggers_t__content triggers_t)))))
(define-fun triggers_t__ref_triggers_t__content__projection ((a triggers_t__ref)) triggers_t 
  (triggers_t__content a))

(declare-fun to_rep1 (triggers_t) Int)

(declare-fun of_rep1 (Int) triggers_t)

;; inversion_axiom
  (assert
  (forall ((x triggers_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x triggers_t)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__sm_using_case_expression__invalid_transition_record_t__initial_state states_t)(rec__sm_using_case_expression__invalid_transition_record_t__trigger triggers_t)))))
(define-fun us_split_fields_rec__sm_using_case_expression__invalid_transition_record_t__initial_state__projection ((a us_split_fields)) states_t 
  (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
  a))

(define-fun us_split_fields_rec__sm_using_case_expression__invalid_transition_record_t__trigger__projection ((a us_split_fields)) triggers_t 
  (rec__sm_using_case_expression__invalid_transition_record_t__trigger a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
                           (us_split_fields1 a))) (to_rep
                                                  (rec__sm_using_case_expression__invalid_transition_record_t__initial_state
                                                  (us_split_fields1 b))))
                        (= (to_rep1
                           (rec__sm_using_case_expression__invalid_transition_record_t__trigger
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__sm_using_case_expression__invalid_transition_record_t__trigger
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit Int)

(declare-const sm_using_case_expression__invalid_transition_record_t__initial_state__last__bit Int)

(declare-const sm_using_case_expression__invalid_transition_record_t__initial_state__position Int)

;; sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit))

;; sm_using_case_expression__invalid_transition_record_t__initial_state__last__bit_axiom
  (assert
  (< sm_using_case_expression__invalid_transition_record_t__initial_state__first__bit 
  sm_using_case_expression__invalid_transition_record_t__initial_state__last__bit))

;; sm_using_case_expression__invalid_transition_record_t__initial_state__position_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__initial_state__position))

(declare-const sm_using_case_expression__invalid_transition_record_t__trigger__first__bit Int)

(declare-const sm_using_case_expression__invalid_transition_record_t__trigger__last__bit Int)

(declare-const sm_using_case_expression__invalid_transition_record_t__trigger__position Int)

;; sm_using_case_expression__invalid_transition_record_t__trigger__first__bit_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__trigger__first__bit))

;; sm_using_case_expression__invalid_transition_record_t__trigger__last__bit_axiom
  (assert
  (< sm_using_case_expression__invalid_transition_record_t__trigger__first__bit 
  sm_using_case_expression__invalid_transition_record_t__trigger__last__bit))

;; sm_using_case_expression__invalid_transition_record_t__trigger__position_axiom
  (assert
  (<= 0 sm_using_case_expression__invalid_transition_record_t__trigger__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((invalid_transition_record_t__ref
 (invalid_transition_record_t__refqtmk
 (invalid_transition_record_t__content us_rep)))))
(define-fun invalid_transition_record_t__ref_invalid_transition_record_t__content__projection ((a invalid_transition_record_t__ref)) us_rep 
  (invalid_transition_record_t__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_155 Int))
                           (=>
                           (and (<= a__first temp___idx_155)
                           (<= temp___idx_155 a__last))
                           (= (bool_eq (select a temp___idx_155)
                              (select b (+ (- b__first a__first) temp___idx_155))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_155 Int))
  (=> (and (<= a__first temp___idx_155) (<= temp___idx_155 a__last))
  (= (bool_eq (select a temp___idx_155)
     (select b (+ (- b__first a__first) temp___idx_155))) true))))))))

(declare-const invalid_transition_array (Array Int us_rep))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun my_sm (Int Int) Int)

(declare-fun my_sm__function_guard (Int Int Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_181 Int)
  (temp___is_init_177 Bool) (temp___skip_constant_178 Bool)
  (temp___do_toplevel_179 Bool)
  (temp___do_typ_inv_180 Bool)) Bool (=>
                                     (or (= temp___is_init_177 true)
                                     (<= 0 4)) (in_range2 temp___expr_181)))

;; my_sm__post_axiom
  (assert
  (forall ((state Int) (trigger Int))
  (! (=>
     (and (dynamic_invariant state true true true true) (dynamic_invariant1
     trigger true true true true))
     (let ((result (my_sm state trigger)))
     (=> (my_sm__function_guard result state trigger) (dynamic_invariant
     result true false true true)))) :pattern ((my_sm state trigger)) )))

;; my_sm__def_axiom
  (assert
  (forall ((state Int) (trigger Int))
  (! (=>
     (and (dynamic_invariant state true true true true) (dynamic_invariant1
     trigger true true true true))
     (= (my_sm state trigger) (ite (= state 0)
                              (ite (= trigger 2) 0
                              (ite (= trigger 3) 2
                              (ite (= trigger 0) 1 (ite (= trigger 1) 0 3))))
                              (ite (= state 1)
                              (ite (= trigger 2) 0
                              (ite (= trigger 3) 2
                              (ite (= trigger 0) 2 (ite (= trigger 1) 1 3))))
                              (ite (= state 2)
                              (ite (= trigger 2) 0
                              (ite (= trigger 3) 2
                              (ite (= trigger 0) 2 (ite (= trigger 1) 2 3))))
                              (ite (= trigger 2) 0 (ite (= trigger 3) 2 3))))))) :pattern (
  (my_sm state trigger)) )))

(declare-const trigger Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const old_state Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun sm_using_case_expression__invalid_transition_array__aggregate_def (us_rep
  us_rep us_rep us_rep us_rep us_rep us_rep us_rep
  us_rep) (Array Int us_rep))

;; invalid_transition_array__def_axiom
  (assert
  (= invalid_transition_array (sm_using_case_expression__invalid_transition_array__aggregate_def
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 0) (of_rep1 4)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 1) (of_rep1 4)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 2) (of_rep1 4)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 3) (of_rep1 0)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 3) (of_rep1 1)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 3) (of_rep1 2)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 3) (of_rep1 3)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 3) (of_rep1 4)))
                              (us_repqtmk
                              (us_split_fieldsqtmk (of_rep 3) (of_rep1 4))))))

;; def_axiom
  (assert
  (forall ((temp___157 us_rep) (temp___158 us_rep) (temp___159 us_rep)
  (temp___160 us_rep) (temp___161 us_rep) (temp___162 us_rep)
  (temp___163 us_rep) (temp___164 us_rep) (temp___165 us_rep))
  (let ((temp___156 (sm_using_case_expression__invalid_transition_array__aggregate_def
                    temp___157 temp___158 temp___159 temp___160 temp___161
                    temp___162 temp___163 temp___164 temp___165)))
  (forall ((temp___166 Int))
  (ite (= temp___166 8) (= (select temp___156 temp___166) temp___164)
  (ite (= temp___166 7) (= (select temp___156 temp___166) temp___163)
  (ite (= temp___166 6) (= (select temp___156 temp___166) temp___162)
  (ite (= temp___166 5) (= (select temp___156 temp___166) temp___161)
  (ite (= temp___166 4) (= (select temp___156 temp___166) temp___160)
  (ite (= temp___166 3) (= (select temp___156 temp___166) temp___159)
  (ite (= temp___166 2) (= (select temp___156 temp___166) temp___158)
  (ite (= temp___166 1) (= (select temp___156 temp___166) temp___157)
  (= (select temp___156 temp___166) temp___165)))))))))))))

(declare-const state Int)

(declare-const state1 Int)

;; H
  (assert (= state1 state))

;; Assume
  (assert true)

(declare-const o triggers_t)

;; Ensures
  (assert (= (to_rep1 o) 4))

(declare-const o1 states_t)

;; Ensures
  (assert (= (to_rep o1) 3))

(declare-const o2 triggers_t)

;; Ensures
  (assert (= (to_rep1 o2) 4))

(declare-const o3 states_t)

;; Ensures
  (assert (= (to_rep o3) 3))

(declare-const o4 triggers_t)

;; Ensures
  (assert (= (to_rep1 o4) 3))

(declare-const o5 states_t)

;; Ensures
  (assert (= (to_rep o5) 3))

(declare-const o6 triggers_t)

;; Ensures
  (assert (= (to_rep1 o6) 2))

(declare-const o7 states_t)

;; Ensures
  (assert (= (to_rep o7) 3))

(declare-const o8 triggers_t)

;; Ensures
  (assert (= (to_rep1 o8) 1))

(declare-const o9 states_t)

;; Ensures
  (assert (= (to_rep o9) 3))

(declare-const o10 triggers_t)

;; Ensures
  (assert (= (to_rep1 o10) 0))

(declare-const o11 states_t)

;; Ensures
  (assert (= (to_rep o11) 3))

(declare-const o12 triggers_t)

;; Ensures
  (assert (= (to_rep1 o12) 4))

(declare-const o13 states_t)

;; Ensures
  (assert (= (to_rep o13) 2))

(declare-const o14 triggers_t)

;; Ensures
  (assert (= (to_rep1 o14) 4))

(declare-const o15 states_t)

;; Ensures
  (assert (= (to_rep o15) 1))

(declare-const o16 triggers_t)

;; Ensures
  (assert (= (to_rep1 o16) 4))

(declare-const o17 states_t)

;; Ensures
  (assert (= (to_rep o17) 0))

;; Assume
  (assert
  (= (sm_using_case_expression__invalid_transition_array__aggregate_def
     (us_repqtmk (us_split_fieldsqtmk o17 o16))
     (us_repqtmk (us_split_fieldsqtmk o15 o14))
     (us_repqtmk (us_split_fieldsqtmk o13 o12))
     (us_repqtmk (us_split_fieldsqtmk o11 o10))
     (us_repqtmk (us_split_fieldsqtmk o9 o8))
     (us_repqtmk (us_split_fieldsqtmk o7 o6))
     (us_repqtmk (us_split_fieldsqtmk o5 o4))
     (us_repqtmk (us_split_fieldsqtmk o3 o2))
     (us_repqtmk (us_split_fieldsqtmk o1 o))) invalid_transition_array))

;; Assume
  (assert (dynamic_invariant state true false true true))

;; Assume
  (assert (dynamic_invariant1 trigger true false true true))

;; H
  (assert
  (forall ((state2 Int)) (get_state__function_guard (get_state state2)
  state2)))

(define-fun usf () Int (get_state state))

;; Assume
  (assert (= state old_state))

;; Assume
  (assert (dynamic_invariant old_state true false true true))

(declare-const final_state Int)

;; H
  (assert (<= 0 final_state))

;; H
  (assert (<= final_state 3))

;; H
  (assert
  (forall ((initial_state Int) (trigger2 Int)) (my_sm__function_guard
  (my_sm initial_state trigger2) initial_state trigger2)))

(assert
;; defqtvc
 ;; File "sm_using_case_expression.ads", line 88, characters 0-0
  (not
  (exists ((initial_state Int))
  (and (and (<= 0 initial_state) (<= initial_state 3))
  (exists ((trigger2 Int))
  (and (and (<= 0 trigger2) (<= trigger2 4))
  (= final_state (my_sm initial_state trigger2))))))))
(check-sat)
