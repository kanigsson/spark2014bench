;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-const dividend Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const divisor Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const quotient Int)

(declare-const remainder Int)

;; Assume
  (assert (dynamic_invariant dividend true false true true))

;; Assume
  (assert (dynamic_invariant divisor true false true true))

;; Assume
  (assert (dynamic_invariant quotient false false true true))

;; Assume
  (assert (dynamic_invariant remainder false false true true))

;; Assume
  (assert (and (< 0 divisor) (<= 0 dividend)))

(declare-const quotient1 Int)

;; H
  (assert (= quotient1 0))

(declare-const remainder1 Int)

;; H
  (assert (= remainder1 dividend))

;; H
  (assert (<= divisor remainder1))

(declare-const quotient2 Int)

(declare-const remainder2 Int)

;; LoopInvariant
  (assert
  (and (and (<= 0 remainder2) (<= 0 quotient2))
  (= (+ (* divisor quotient2) remainder2) dividend)))

;; H
  (assert
  (= (and (ite (and (dynamic_invariant remainder2 false true true true)
               (dynamic_invariant quotient2 false true true true))
          true false) (ite (<= divisor remainder2) true false)) true))

(define-fun o () Int (+ quotient2 1))

;; Ensures
  (assert (in_range1 o))

(declare-const quotient3 Int)

;; H
  (assert (= quotient3 o))

(define-fun o1 () Int (- remainder2 divisor))

;; Ensures
  (assert (in_range1 o1))

(declare-const remainder3 Int)

;; H
  (assert (= remainder3 o1))

;; H
  (assert (<= divisor remainder3))

(assert
;; defqtvc
 ;; File "linear_div.adb", line 3, characters 0-0
  (not (<= 0 remainder3)))
(check-sat)
