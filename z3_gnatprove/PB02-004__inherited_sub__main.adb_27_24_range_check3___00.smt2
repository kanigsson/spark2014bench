;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range1
                                    temp___expr_39)))

(define-fun to_rep ((x natural)) Int (naturalqtint x))

(declare-fun of_rep (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-const f Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const l Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (integer integer) Bool)

(declare-const dummy1 integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int natural))))))
(declare-fun slide ((Array Int natural) Int Int) (Array Int natural))

;; slide_eq
  (assert
  (forall ((a (Array Int natural)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int natural)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int natural)) (a__first Int) (a__last Int)
  (b (Array Int natural)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep (select a temp___idx_156)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int natural)) (b (Array Int natural)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep (select a temp___idx_156)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f1 Int) (l1 Int))
  (! (=> (in_range2 f1)
     (=> (in_range2 l1)
     (and (= (to_rep1 (first (mk f1 l1))) f1)
     (= (to_rep1 (last (mk f1 l1))) l1)))) :pattern ((mk f1 l1)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range2 low)
                   (and (in_range2 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int natural))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int natural) (elts a))

(define-fun of_array ((a (Array Int natural)) (f1 Int)
  (l1 Int)) us_t (us_tqtmk a (mk f1 l1)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((my_array__ref (my_array__refqtmk (my_array__content us_t)))))
(define-fun my_array__ref_my_array__content__projection ((a my_array__ref)) us_t 
  (my_array__content a))

(declare-datatypes () ((t6s__ref (t6s__refqtmk (t6s__content us_t)))))
(define-fun t6s__ref_t6s__content__projection ((a t6s__ref)) us_t (t6s__content
                                                                  a))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__rec__sub_arr__f natural)(rec__rec__sub_arr__l natural)))))
(define-fun us_split_discrs_rec__rec__sub_arr__f__projection ((a us_split_discrs)) natural 
  (rec__rec__sub_arr__f a))

(define-fun us_split_discrs_rec__rec__sub_arr__l__projection ((a us_split_discrs)) natural 
  (rec__rec__sub_arr__l a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__4__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__rec__sub_arr__content us_t)))))
(define-fun us_split_fields_rec__rec__sub_arr__content__projection ((a us_split_fields)) us_t 
  (rec__rec__sub_arr__content a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__6__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__6__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__6__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep
                           (rec__rec__sub_arr__f (us_split_discrs1 a))) 
                        (to_rep (rec__rec__sub_arr__f (us_split_discrs1 b))))
                        (= (to_rep
                           (rec__rec__sub_arr__l (us_split_discrs1 a))) 
                        (to_rep (rec__rec__sub_arr__l (us_split_discrs1 b)))))
                        (= (bool_eq1
                           (rec__rec__sub_arr__content (us_split_fields1 a))
                           (rec__rec__sub_arr__content (us_split_fields1 b))) true))
                   true false))

(define-fun in_range4 ((rec__rec__sub_arr__f1 Int)
  (rec__rec__sub_arr__l1 Int)
  (a us_split_discrs)) Bool (and
                            (= rec__rec__sub_arr__f1 (to_rep
                                                     (rec__rec__sub_arr__f a)))
                            (= rec__rec__sub_arr__l1 (to_rep
                                                     (rec__rec__sub_arr__l a)))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const rec__sub_arr__f__first__bit Int)

(declare-const rec__sub_arr__f__last__bit Int)

(declare-const rec__sub_arr__f__position Int)

;; rec__sub_arr__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr__f__first__bit))

;; rec__sub_arr__f__last__bit_axiom
  (assert (< rec__sub_arr__f__first__bit rec__sub_arr__f__last__bit))

;; rec__sub_arr__f__position_axiom
  (assert (<= 0 rec__sub_arr__f__position))

(declare-const rec__sub_arr__l__first__bit Int)

(declare-const rec__sub_arr__l__last__bit Int)

(declare-const rec__sub_arr__l__position Int)

;; rec__sub_arr__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr__l__first__bit))

;; rec__sub_arr__l__last__bit_axiom
  (assert (< rec__sub_arr__l__first__bit rec__sub_arr__l__last__bit))

;; rec__sub_arr__l__position_axiom
  (assert (<= 0 rec__sub_arr__l__position))

(declare-const rec__sub_arr__content__first__bit Int)

(declare-const rec__sub_arr__content__last__bit Int)

(declare-const rec__sub_arr__content__position Int)

;; rec__sub_arr__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr__content__first__bit))

;; rec__sub_arr__content__last__bit_axiom
  (assert
  (< rec__sub_arr__content__first__bit rec__sub_arr__content__last__bit))

;; rec__sub_arr__content__position_axiom
  (assert (<= 0 rec__sub_arr__content__position))

(declare-fun user_eq4 (us_rep us_rep) Bool)

(declare-const dummy4 us_rep)

(declare-datatypes ()
((sub_arr__ref (sub_arr__refqtmk (sub_arr__content us_rep)))))
(define-fun sub_arr__ref_sub_arr__content__projection ((a sub_arr__ref)) us_rep 
  (sub_arr__content a))

(declare-datatypes () ((t8b__ref (t8b__refqtmk (t8b__content us_t)))))
(define-fun t8b__ref_t8b__content__projection ((a t8b__ref)) us_t (t8b__content
                                                                  a))

(declare-datatypes ()
((us_split_fields2 (us_split_fieldsqtmk1 (rec__rec__sub_arr__content1 us_t)))))
(define-fun us_split_fields_rec__rec__sub_arr__content__2__projection ((a us_split_fields2)) us_t 
  (rec__rec__sub_arr__content1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__7__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (us_repqtmk1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__7__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__7__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (let ((temp___159 (rec__rec__sub_arr__content1
                                                           (us_split_fields3
                                                           a))))
                                         (of_array (to_array temp___159)
                                         (first1 temp___159)
                                         (last1 temp___159))))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (let ((temp___158 (rec__rec__sub_arr__content
                                                           (us_split_fields1
                                                           r))))
                                         (of_array (to_array temp___158)
                                         (first1 temp___158)
                                         (last1 temp___158))))))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep
                            (rec__rec__sub_arr__f (us_split_discrs2 a))) 
                         (to_rep (rec__rec__sub_arr__f (us_split_discrs2 b))))
                         (= (to_rep
                            (rec__rec__sub_arr__l (us_split_discrs2 a))) 
                         (to_rep (rec__rec__sub_arr__l (us_split_discrs2 b)))))
                         (= (bool_eq1
                            (rec__rec__sub_arr__content1
                            (us_split_fields3 a))
                            (rec__rec__sub_arr__content1
                            (us_split_fields3 b))) true))
                    true false))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const rec__sub_arr__f__first__bit1 Int)

(declare-const rec__sub_arr__f__last__bit1 Int)

(declare-const rec__sub_arr__f__position1 Int)

;; rec__sub_arr__f__first__bit_axiom
  (assert (<= 0 rec__sub_arr__f__first__bit1))

;; rec__sub_arr__f__last__bit_axiom
  (assert (< rec__sub_arr__f__first__bit1 rec__sub_arr__f__last__bit1))

;; rec__sub_arr__f__position_axiom
  (assert (<= 0 rec__sub_arr__f__position1))

(declare-const rec__sub_arr__l__first__bit1 Int)

(declare-const rec__sub_arr__l__last__bit1 Int)

(declare-const rec__sub_arr__l__position1 Int)

;; rec__sub_arr__l__first__bit_axiom
  (assert (<= 0 rec__sub_arr__l__first__bit1))

;; rec__sub_arr__l__last__bit_axiom
  (assert (< rec__sub_arr__l__first__bit1 rec__sub_arr__l__last__bit1))

;; rec__sub_arr__l__position_axiom
  (assert (<= 0 rec__sub_arr__l__position1))

(declare-const rec__sub_arr__content__first__bit1 Int)

(declare-const rec__sub_arr__content__last__bit1 Int)

(declare-const rec__sub_arr__content__position1 Int)

;; rec__sub_arr__content__first__bit_axiom
  (assert (<= 0 rec__sub_arr__content__first__bit1))

;; rec__sub_arr__content__last__bit_axiom
  (assert
  (< rec__sub_arr__content__first__bit1 rec__sub_arr__content__last__bit1))

;; rec__sub_arr__content__position_axiom
  (assert (<= 0 rec__sub_arr__content__position1))

(declare-fun user_eq5 (us_rep1 us_rep1) Bool)

(declare-const dummy5 us_rep1)

(declare-datatypes () ((tzS__ref (tzS__refqtmk (tzS__content us_rep1)))))
(define-fun tzS__ref_tzS__content__3__projection ((a tzS__ref)) us_rep1 
  (tzS__content a))

(declare-const z__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_261 us_rep1)
  (temp___is_init_257 Bool) (temp___skip_constant_258 Bool)
  (temp___do_toplevel_259 Bool)
  (temp___do_typ_inv_260 Bool)) Bool (and
                                     (=>
                                     (not (= temp___skip_constant_258 true))
                                     (in_range4 f l
                                     (us_split_discrs1
                                     (to_base temp___expr_261))))
                                     (and (dynamic_property f l
                                     (first1
                                     (rec__rec__sub_arr__content1
                                     (us_split_fields3 temp___expr_261)))
                                     (last1
                                     (rec__rec__sub_arr__content1
                                     (us_split_fields3 temp___expr_261))))
                                     (and
                                     (= (first1
                                        (rec__rec__sub_arr__content1
                                        (us_split_fields3 temp___expr_261))) 
                                     f)
                                     (= (last1
                                        (rec__rec__sub_arr__content1
                                        (us_split_fields3 temp___expr_261))) 
                                     l)))))

(define-fun default_initial_assumption ((temp___expr_265 us_rep1)
  (temp___skip_top_level_266 Bool)) Bool (and
                                         (and
                                         (= (to_rep
                                            (rec__rec__sub_arr__f
                                            (us_split_discrs2
                                            temp___expr_265))) f)
                                         (= (to_rep
                                            (rec__rec__sub_arr__l
                                            (us_split_discrs2
                                            temp___expr_265))) l))
                                         (and
                                         (= (first1
                                            (rec__rec__sub_arr__content1
                                            (us_split_fields3
                                            temp___expr_265))) f)
                                         (= (last1
                                            (rec__rec__sub_arr__content1
                                            (us_split_fields3
                                            temp___expr_265))) l))))

(define-fun dynamic_invariant2 ((temp___expr_253 us_rep)
  (temp___is_init_249 Bool) (temp___skip_constant_250 Bool)
  (temp___do_toplevel_251 Bool)
  (temp___do_typ_inv_252 Bool)) Bool (let ((temp___255 (rec__rec__sub_arr__l
                                                       (us_split_discrs1
                                                       temp___expr_253))))
                                     (let ((temp___254 (rec__rec__sub_arr__f
                                                       (us_split_discrs1
                                                       temp___expr_253))))
                                     (and (dynamic_property
                                     (to_rep temp___254) (to_rep temp___255)
                                     (first1
                                     (rec__rec__sub_arr__content
                                     (us_split_fields1 temp___expr_253)))
                                     (last1
                                     (rec__rec__sub_arr__content
                                     (us_split_fields1 temp___expr_253))))
                                     (and
                                     (= (first1
                                        (rec__rec__sub_arr__content
                                        (us_split_fields1 temp___expr_253))) 
                                     (to_rep temp___254))
                                     (= (last1
                                        (rec__rec__sub_arr__content
                                        (us_split_fields1 temp___expr_253))) 
                                     (to_rep temp___255)))))))

;; Assume
  (assert (dynamic_invariant f true false true true))

;; Assume
  (assert (dynamic_invariant l true false true true))

(define-fun o () Int l)

;; Ensures
  (assert (in_range1 o))

(define-fun o1 () Int f)

(assert
;; defqtvc
 ;; File "main.adb", line 23, characters 0-0
  (not (in_range1 o1)))
(check-sat)
