(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range2 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                             (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range f)
     (=> (in_range l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range low)
                   (and (in_range high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun to_rep2 ((x natural)) Int (naturalqtint x))

(declare-fun of_rep2 (Int) natural)

;; inversion_axiom
  (assert
  (forall ((x natural))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x natural)) (! (in_range3 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(define-fun to_rep3 ((x positive)) Int (positiveqtint x))

(declare-fun of_rep3 (Int) positive)

;; inversion_axiom
  (assert
  (forall ((x positive))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x positive)) (! (in_range1 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes () ((t2s__ref (t2s__refqtmk (t2s__content us_t)))))
(define-fun t2s__ref_t2s__content__projection ((a t2s__ref)) us_t (t2s__content
                                                                  a))

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk
 (rec__ada___ada___ada__strings__superbounded__super_string__max_length positive)))))
(define-fun us_split_discrs_rec__ada___ada___ada__strings__superbounded__super_string__max_length__projection ((a us_split_discrs)) positive 
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__2__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__ada___ada___ada__strings__superbounded__super_string__current_length natural)(rec__ada___ada___ada__strings__superbounded__super_string__data us_t)))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__projection ((a us_split_fields)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__projection ((a us_split_fields)) us_t 
  (rec__ada___ada___ada__strings__superbounded__super_string__data a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__2__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__2__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep3
                           (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                           (us_split_discrs1 a))) (to_rep3
                                                  (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                  (us_split_discrs1 b))))
                        (and
                        (= (to_rep2
                           (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                                  (us_split_fields1 b))))
                        (= (bool_eq1
                           (rec__ada___ada___ada__strings__superbounded__super_string__data
                           (us_split_fields1 a))
                           (rec__ada___ada___ada__strings__superbounded__super_string__data
                           (us_split_fields1 b))) true)))
                   true false))

(define-fun in_range4 ((rec__ada___ada___ada__strings__superbounded__super_string__max_length1 Int)
  (a us_split_discrs)) Bool (= rec__ada___ada___ada__strings__superbounded__super_string__max_length1 
  (to_rep3
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length a))))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position))

(declare-fun user_eq5 (us_rep us_rep) Bool)

(declare-const dummy5 us_rep)

(declare-datatypes ()
((super_string__ref (super_string__refqtmk (super_string__content us_rep)))))
(define-fun super_string__ref_super_string__content__projection ((a super_string__ref)) us_rep 
  (super_string__content a))

(declare-sort tT92sP1 0)

(declare-fun tT92sP1qtint (tT92sP1) Int)

;; tT92sP1'axiom
  (assert
  (forall ((i tT92sP1))
  (and (<= 1 (tT92sP1qtint i)) (<= (tT92sP1qtint i) 20))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq6 (tT92sP1 tT92sP1) Bool)

(declare-const dummy6 tT92sP1)

(declare-datatypes ()
((tT92sP1__ref (tT92sP1__refqtmk (tT92sP1__content tT92sP1)))))
(define-fun tT92sP1__ref_tT92sP1__content__projection ((a tT92sP1__ref)) tT92sP1 
  (tT92sP1__content a))

(declare-const dummy7 (Array Int character))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq7 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__ada___ada___ada__strings__superbounded__super_string__current_length1 natural)(rec__ada___ada___ada__strings__superbounded__super_string__data1 (Array Int character))))))
(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__3__projection ((a us_split_fields2)) natural 
  (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
  a))

(define-fun us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__3__projection ((a us_split_fields2)) (Array Int character) 
  (rec__ada___ada___ada__strings__superbounded__super_string__data1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1
 (us_repqtmk1
 (us_split_discrs2 us_split_discrs)(us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_discrs__4__projection ((a us_rep1)) us_split_discrs 
  (us_split_discrs2 a))

(define-fun us_rep___split_fields__4__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk (us_split_discrs2 a)
                                         (us_split_fieldsqtmk
                                         (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                         (us_split_fields3 a))
                                         (of_array
                                         (rec__ada___ada___ada__strings__superbounded__super_string__data1
                                         (us_split_fields3 a)) 1 20))))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1 (us_split_discrs1 r)
                                         (us_split_fieldsqtmk1
                                         (rec__ada___ada___ada__strings__superbounded__super_string__current_length
                                         (us_split_fields1 r))
                                         (let ((temp___156 (rec__ada___ada___ada__strings__superbounded__super_string__data
                                                           (us_split_fields1
                                                           r))))
                                         (to_array temp___156)))))

(define-fun bool_eq3 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (to_rep3
                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                            (us_split_discrs2 a))) (to_rep3
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                   (us_split_discrs2 b))))
                         (and
                         (= (to_rep2
                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                            (us_split_fields3 a))) (to_rep2
                                                   (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                                   (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__ada___ada___ada__strings__superbounded__super_string__data1
                            (us_split_fields3 a)) 1 20
                            (rec__ada___ada___ada__strings__superbounded__super_string__data1
                            (us_split_fields3 b)) 1 20) true)))
                    true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__max_length__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__max_length__position1))

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__current_length__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__current_length__position1))

(declare-const ada___ada___ada__strings__superbounded__super_string__data__first__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__last__bit1 Int)

(declare-const ada___ada___ada__strings__superbounded__super_string__data__position1 Int)

;; ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__first__bit1))

;; ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom
  (assert
  (< ada___ada___ada__strings__superbounded__super_string__data__first__bit1 
  ada___ada___ada__strings__superbounded__super_string__data__last__bit1))

;; ada___ada___ada__strings__superbounded__super_string__data__position_axiom
  (assert
  (<= 0 ada___ada___ada__strings__superbounded__super_string__data__position1))

(declare-fun user_eq8 (us_rep1 us_rep1) Bool)

(declare-const dummy8 us_rep1)

(declare-datatypes ()
((bounded_string__ref
 (bounded_string__refqtmk (bounded_string__content us_rep1)))))
(define-fun bounded_string__ref_bounded_string__content__projection ((a bounded_string__ref)) us_rep1 
  (bounded_string__content a))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun dynamic_invariant ((temp___expr_96 us_t) (temp___is_init_92 Bool)
  (temp___skip_constant_93 Bool) (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard (Int us_rep1) Bool)

(declare-fun to_bounded_string (us_t Int) us_rep1)

(declare-fun to_bounded_string__function_guard (us_rep1 us_t Int) Bool)

(define-fun dynamic_invariant1 ((temp___expr_210 us_rep1)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)
  (temp___do_typ_inv_209 Bool)) Bool (=>
                                     (not (= temp___skip_constant_207 true))
                                     (in_range4 20
                                     (us_split_discrs1
                                     (to_base temp___expr_210)))))

(define-fun default_initial_assumption ((temp___expr_213 us_rep1)
  (temp___skip_top_level_214 Bool)) Bool (and
                                         (= (to_rep3
                                            (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                            (us_split_discrs2
                                            temp___expr_213))) 20)
                                         (= (to_rep2
                                            (rec__ada___ada___ada__strings__superbounded__super_string__current_length1
                                            (us_split_fields3
                                            temp___expr_213))) 0)))

(declare-sort truncation 0)

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq9 (truncation truncation) Bool)

(declare-const dummy9 truncation)

(declare-datatypes ()
((truncation__ref (truncation__refqtmk (truncation__content truncation)))))
(define-fun truncation__ref_truncation__content__projection ((a truncation__ref)) truncation 
  (truncation__content a))

(define-fun dynamic_invariant2 ((temp___expr_223 Int)
  (temp___is_init_219 Bool) (temp___skip_constant_220 Bool)
  (temp___do_toplevel_221 Bool)
  (temp___do_typ_inv_222 Bool)) Bool (=>
                                     (or (= temp___is_init_219 true)
                                     (<= 0 2)) (in_range6 temp___expr_223)))

;; to_bounded_string__post_axiom
  (assert
  (forall ((source us_t))
  (forall ((drop Int))
  (! (=>
     (and
     (and (dynamic_invariant source true true true true) (dynamic_invariant2
     drop true true true true)) (=> (< 20 (length source)) (not (= drop 2))))
     (let ((result (to_bounded_string source drop)))
     (and (= (length1 result) (min 20 (length source))) (dynamic_invariant1
     result true false true true)))) :pattern ((to_bounded_string source
                                               drop)) ))))

(declare-datatypes ()
((element_type__ref (element_type__refqtmk (element_type__content us_rep1)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) us_rep1 
  (element_type__content a))

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq10 (capacity_range capacity_range) Bool)

(declare-const dummy10 capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep4 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep4 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range7
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs3
 (us_split_discrsqtmk1 (rec__repr2__vec__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__repr2__vec__vector__capacity__projection ((a us_split_discrs3)) capacity_range 
  (rec__repr2__vec__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref1
 (us_split_discrs__refqtmk1 (us_split_discrs__content1 us_split_discrs3)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref1)) us_split_discrs3 
  (us_split_discrs__content1 a))

(declare-datatypes ()
((us_split_fields4
 (us_split_fieldsqtmk2 (rec__repr2__vec__vector us_main_type)))))
(define-fun us_split_fields_rec__repr2__vec__vector__projection ((a us_split_fields4)) us_main_type 
  (rec__repr2__vec__vector a))

(declare-datatypes ()
((us_split_fields__ref2
 (us_split_fields__refqtmk2 (us_split_fields__content2 us_split_fields4)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref2)) us_split_fields4 
  (us_split_fields__content2 a))

(declare-datatypes ()
((us_rep2
 (us_repqtmk2
 (us_split_discrs4 us_split_discrs3)(us_split_fields5 us_split_fields4)))))
(define-fun us_rep___split_discrs__projection ((a us_rep2)) us_split_discrs3 
  (us_split_discrs4 a))

(define-fun us_rep___split_fields__projection ((a us_rep2)) us_split_fields4 
  (us_split_fields5 a))

(define-fun bool_eq4 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep4
                            (rec__repr2__vec__vector__capacity
                            (us_split_discrs4 a))) (to_rep4
                                                   (rec__repr2__vec__vector__capacity
                                                   (us_split_discrs4 b))))
                         (= (us_main_eq
                            (rec__repr2__vec__vector (us_split_fields5 a))
                            (rec__repr2__vec__vector (us_split_fields5 b))) true))
                    true false))

(define-fun in_range8 ((rec__repr2__vec__vector__capacity1 Int)
  (a us_split_discrs3)) Bool (= rec__repr2__vec__vector__capacity1 (to_rep4
                                                                   (rec__repr2__vec__vector__capacity
                                                                   a))))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const repr2__vec__vector__capacity__first__bit Int)

(declare-const repr2__vec__vector__capacity__last__bit Int)

(declare-const repr2__vec__vector__capacity__position Int)

;; repr2__vec__vector__capacity__first__bit_axiom
  (assert (<= 0 repr2__vec__vector__capacity__first__bit))

;; repr2__vec__vector__capacity__last__bit_axiom
  (assert
  (< repr2__vec__vector__capacity__first__bit repr2__vec__vector__capacity__last__bit))

;; repr2__vec__vector__capacity__position_axiom
  (assert (<= 0 repr2__vec__vector__capacity__position))

(declare-fun user_eq11 (us_rep2 us_rep2) Bool)

(declare-const dummy11 us_rep2)

(declare-datatypes ()
((vector__ref (vector__refqtmk (vector__content us_rep2)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep2 
  (vector__content a))

(declare-fun length2 (us_rep2) Int)

(declare-fun length__function_guard1 (Int us_rep2) Bool)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep3 0)

(declare-fun bool_eq5 (us_rep3 us_rep3) Bool)

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; alignment_axiom
  (assert (<= 0 alignment5))

(declare-fun user_eq12 (us_rep3 us_rep3) Bool)

(declare-const dummy12 us_rep3)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep3)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep3 
  (sequence__content a))

(declare-datatypes ()
((element_type__ref1
 (element_type__refqtmk1 (element_type__content1 us_rep1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) us_rep1 
  (element_type__content1 a))

(declare-fun model1 (us_rep2) us_rep3)

(declare-fun model__function_guard (us_rep3 us_rep2) Bool)

(declare-fun length3 (us_rep3) Int)

(declare-fun length__function_guard2 (Int us_rep3) Bool)

(define-fun last2 ((container us_rep3)) Int (+ 0 (length3 container)))

(declare-fun last__function_guard (Int us_rep3) Bool)

(define-fun last_index ((container us_rep2)) Int (last2 (model1 container)))

(declare-fun last_index__function_guard (Int us_rep2) Bool)

(declare-fun get (us_rep3 Int) us_rep1)

(declare-fun get__function_guard (us_rep1 us_rep3 Int) Bool)

(declare-fun oeq (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard (Bool us_rep1 us_rep1) Bool)

(define-fun constant_range ((container us_rep3) (fst Int) (lst Int)
  (item us_rep1)) Bool (ite (forall ((i Int))
                            (=> (and (<= fst i) (<= i lst))
                            (= (oeq (of_base (to_base (get container i)))
                               (of_base (to_base item))) true)))
                       true false))

(declare-fun constant_range__function_guard (Bool us_rep3 Int Int
  us_rep1) Bool)

(declare-fun to_vector (us_rep1 Int) us_rep2)

(declare-fun to_vector__function_guard (us_rep2 us_rep1 Int) Bool)

(define-fun dynamic_invariant3 ((temp___expr_184 Int)
  (temp___is_init_180 Bool) (temp___skip_constant_181 Bool)
  (temp___do_toplevel_182 Bool)
  (temp___do_typ_inv_183 Bool)) Bool (=>
                                     (or (= temp___is_init_180 true)
                                     (<= 0 100)) (in_range7 temp___expr_184)))

;; to_vector__post_axiom
  (assert
  (forall ((new_item us_rep1))
  (forall ((length4 Int))
  (! (=> (dynamic_invariant3 length4 true true true true)
     (let ((result (to_vector new_item length4)))
     (and (= (length2 result) length4)
     (= (constant_range (model1 result) 1 (last_index result)
        (of_base (to_base new_item))) true)))) :pattern ((to_vector new_item
                                                         length4)) ))))

(declare-const value__size6 Int)

(declare-const object__size6 Int)

(declare-const alignment6 Int)

;; value__size_axiom
  (assert (<= 0 value__size6))

;; object__size_axiom
  (assert (<= 0 object__size6))

;; alignment_axiom
  (assert (<= 0 alignment6))

(declare-const repr2__vec__vector__capacity__first__bit1 Int)

(declare-const repr2__vec__vector__capacity__last__bit1 Int)

(declare-const repr2__vec__vector__capacity__position1 Int)

;; repr2__vec__vector__capacity__first__bit_axiom
  (assert (<= 0 repr2__vec__vector__capacity__first__bit1))

;; repr2__vec__vector__capacity__last__bit_axiom
  (assert
  (< repr2__vec__vector__capacity__first__bit1 repr2__vec__vector__capacity__last__bit1))

;; repr2__vec__vector__capacity__position_axiom
  (assert (<= 0 repr2__vec__vector__capacity__position1))

(declare-fun user_eq13 (us_rep2 us_rep2) Bool)

(declare-const dummy13 us_rep2)

(declare-datatypes ()
((vec_t__ref (vec_t__refqtmk (vec_t__content us_rep2)))))
(define-fun vec_t__ref_vec_t__content__projection ((a vec_t__ref)) us_rep2 
  (vec_t__content a))

(declare-const x__split_discrs us_split_discrs3)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun temp___String_Literal_327 (tuple0) (Array Int character))

;; temp___String_Literal_327__def_axiom
  (assert true)

(define-fun dynamic_invariant4 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range3
                                    temp___expr_39)))

(define-fun dynamic_invariant5 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range1
                                    temp___expr_46)))

(define-fun dynamic_invariant6 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range2 temp___expr_74)))

(define-fun dynamic_invariant7 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq14 (count_type count_type) Bool)

(declare-const dummy14 count_type)

(declare-datatypes ()
((count_type__ref (count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_177 Int)
  (temp___is_init_173 Bool) (temp___skip_constant_174 Bool)
  (temp___do_toplevel_175 Bool)
  (temp___do_typ_inv_176 Bool)) Bool (=>
                                     (or (= temp___is_init_173 true)
                                     (<= 0 2147483647)) (in_range9
                                     temp___expr_177)))

(define-fun dynamic_invariant9 ((temp___expr_203 us_rep)
  (temp___is_init_199 Bool) (temp___skip_constant_200 Bool)
  (temp___do_toplevel_201 Bool)
  (temp___do_typ_inv_202 Bool)) Bool (let ((temp___204 (rec__ada___ada___ada__strings__superbounded__super_string__max_length
                                                       (us_split_discrs1
                                                       temp___expr_203))))
                                     (and (dynamic_property 1
                                     (to_rep3 temp___204)
                                     (first1
                                     (rec__ada___ada___ada__strings__superbounded__super_string__data
                                     (us_split_fields1 temp___expr_203)))
                                     (last1
                                     (rec__ada___ada___ada__strings__superbounded__super_string__data
                                     (us_split_fields1 temp___expr_203))))
                                     (and
                                     (= (first1
                                        (rec__ada___ada___ada__strings__superbounded__super_string__data
                                        (us_split_fields1 temp___expr_203))) 1)
                                     (= (last1
                                        (rec__ada___ada___ada__strings__superbounded__super_string__data
                                        (us_split_fields1 temp___expr_203))) 
                                     (to_rep3 temp___204))))))

(declare-sort length_range 0)

(declare-fun length_rangeqtint (length_range) Int)

;; length_range'axiom
  (assert
  (forall ((i length_range))
  (and (<= 0 (length_rangeqtint i)) (<= (length_rangeqtint i) 20))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq15 (length_range length_range) Bool)

(declare-const dummy15 length_range)

(declare-datatypes ()
((length_range__ref
 (length_range__refqtmk (length_range__content length_range)))))
(define-fun length_range__ref_length_range__content__projection ((a length_range__ref)) length_range 
  (length_range__content a))

(define-fun dynamic_invariant10 ((temp___expr_230 Int)
  (temp___is_init_226 Bool) (temp___skip_constant_227 Bool)
  (temp___do_toplevel_228 Bool)
  (temp___do_typ_inv_229 Bool)) Bool (=>
                                     (or (= temp___is_init_226 true)
                                     (<= 0 20)) (in_range10 temp___expr_230)))

;; length__post_axiom
  (assert
  (forall ((source us_rep1))
  (! (=> (dynamic_invariant1 source true true true true) (dynamic_invariant10
     (length1 source) true false true true)) :pattern ((length1 source)) )))

;; oeq__post_axiom
  (assert true)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 101))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 101)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq16 (extended_index extended_index) Bool)

(declare-const dummy16 extended_index)

(declare-datatypes ()
((extended_index__ref
 (extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant11 ((temp___expr_297 Int)
  (temp___is_init_293 Bool) (temp___skip_constant_294 Bool)
  (temp___do_toplevel_295 Bool)
  (temp___do_typ_inv_296 Bool)) Bool (=>
                                     (or (= temp___is_init_293 true)
                                     (<= 0 101)) (in_range11
                                     temp___expr_297)))

(define-fun capacity ((container us_rep2)) Int (to_rep4
                                               (rec__repr2__vec__vector__capacity
                                               (us_split_discrs4 container))))

(declare-fun capacity__function_guard (Int us_rep2) Bool)

;; length__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (length2 container)))
     (and (<= result (capacity container)) (dynamic_invariant3 result true
     false true true))) :pattern ((length2 container)) )))

(define-fun default_initial_assumption1 ((temp___expr_252 us_rep3)
  (temp___skip_top_level_253 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_253 true))
                                         (= (length3 temp___expr_252) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (= (length3 (model1 container)) (length2 container)) :pattern ((model1
                                                                    container)) )))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq8 a b) (oeq (of_base (to_base a)) (of_base (to_base b)))) :pattern (
  (user_eq8 a b)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 100))))

(define-fun in_range12 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq17 (extended_index1 extended_index1) Bool)

(declare-const dummy17 extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant12 ((temp___expr_280 Int)
  (temp___is_init_276 Bool) (temp___skip_constant_277 Bool)
  (temp___do_toplevel_278 Bool)
  (temp___do_typ_inv_279 Bool)) Bool (=>
                                     (or (= temp___is_init_276 true)
                                     (<= 0 100)) (in_range12
                                     temp___expr_280)))

;; length__post_axiom
  (assert
  (forall ((container us_rep3))
  (! (let ((result (length3 container)))
     (and (<= (+ 0 result) 100) (dynamic_invariant8 result true false true
     true))) :pattern ((length3 container)) )))

;; get__post_axiom
  (assert
  (forall ((container us_rep3))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant12 position true true true true)
     (and (<= 1 position) (<= position (last2 container)))) (in_range4 20
     (us_split_discrs1 (to_base (get container position))))) :pattern (
  (get container position)) ))))

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq8 a b) (oeq (of_base (to_base a)) (of_base (to_base b)))) :pattern (
  (user_eq8 a b)) )))

(define-fun o () us_t (of_array (temp___String_Literal_327 Tuple0) 1 0))

;; H
  (assert (< 20 (length o)))

(assert
;; defqtvc
 ;; File "repr3.ads", line 5, characters 0-0
  (not false))
(check-sat)

(exit)
