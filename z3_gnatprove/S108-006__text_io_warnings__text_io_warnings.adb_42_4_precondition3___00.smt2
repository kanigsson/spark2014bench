(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_string (us_image Int) us_t)

(declare-fun from_string (us_t) us_image)

;; to_string__first
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (= (first1 (to_string x s)) 1) :pattern ((to_string x s)) ))))

;; to_string__length
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (=> (<= 0 s) (<= (length (to_string x s)) s)) :pattern ((to_string x s)) ))))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant1 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range4
                                    temp___expr_39)))

(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (count count) Bool)

(declare-const dummy5 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant3 ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_178)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)) (! (dynamic_invariant3
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__standard_out ada___ada__text_io__standard_err
  ada___ada__text_io__current_err ada___ada__text_io__file_system
  ada___ada__text_io__current_in ada___ada__text_io__current_out) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_err
                  ada___ada__text_io__file_system
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out)) )))

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)) (! (dynamic_invariant3
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__standard_out ada___ada__text_io__standard_err
  ada___ada__text_io__current_err ada___ada__text_io__file_system
  ada___ada__text_io__current_in ada___ada__text_io__current_out) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_err
                  ada___ada__text_io__file_system
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out)) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq2 (us_rep us_rep) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((file_type__ref (file_type__refqtmk (file_type__content us_rep)))))
(define-fun file_type__ref_file_type__content__projection ((a file_type__ref)) us_rep 
  (file_type__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun is_open (us_rep) Bool)

(declare-fun is_open__function_guard (Bool us_rep) Bool)

(define-fun default_initial_assumption ((temp___expr_207 us_rep)
  (temp___skip_top_level_208 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_208 true))
                                         (not
                                         (= (is_open temp___expr_207) true))))

;; is_open__post_axiom
  (assert true)

(declare-fun mode (us_rep) Int)

(declare-fun mode__function_guard (Int us_rep) Bool)

(declare-sort file_mode 0)

(define-fun pos_to_rep ((x Int)) Int (ite (= x 2) 3 (ite (= x 1) 2 0)))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq7 (file_mode file_mode) Bool)

(declare-const dummy7 file_mode)

(declare-datatypes ()
((file_mode__ref (file_mode__refqtmk (file_mode__content file_mode)))))
(define-fun file_mode__ref_file_mode__content__projection ((a file_mode__ref)) file_mode 
  (file_mode__content a))

(define-fun dynamic_invariant4 ((temp___expr_242 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (<= 0 2)) (in_range6 temp___expr_242)))

;; mode__post_axiom
  (assert
  (forall ((file us_rep))
  (! (=> (= (is_open file) true) (dynamic_invariant4 (mode file) true false
     true true)) :pattern ((mode file)) )))

(declare-sort num 0)

(declare-fun numqtint (num) Int)

;; num'axiom
  (assert
  (forall ((i num)) (and (<= (- 20) (numqtint i)) (<= (numqtint i) 20))))

(define-fun in_range7 ((x Int)) Bool (and (<= (- 20) x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (num num) Bool)

(declare-const dummy8 num)

(declare-datatypes () ((num__ref (num__refqtmk (num__content num)))))
(define-fun num__ref_num__content__projection ((a num__ref)) num (num__content
                                                                 a))

(define-fun dynamic_invariant5 ((temp___expr_221 Int)
  (temp___is_init_217 Bool) (temp___skip_constant_218 Bool)
  (temp___do_toplevel_219 Bool)
  (temp___do_typ_inv_220 Bool)) Bool (=>
                                     (or (= temp___is_init_217 true)
                                     (<= (- 20) 20)) (in_range7
                                     temp___expr_221)))

(declare-fun line_length1 (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard1 (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; line_length__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private))
  (! (=> (and (= (is_open file) true) (not (= (mode file) 0)))
     (dynamic_invariant3
     (line_length1 file ada___ada__text_io__standard_in
     ada___ada__text_io__standard_out ada___ada__text_io__standard_err
     ada___ada__text_io__current_err ada___ada__text_io__file_system
     ada___ada__text_io__current_in ada___ada__text_io__current_out) true
     false true true)) :pattern ((line_length1 file
                                 ada___ada__text_io__standard_in
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_err
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out)) ))))

(declare-fun page_length1 (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard1 (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; page_length__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private))
  (! (=> (and (= (is_open file) true) (not (= (mode file) 0)))
     (dynamic_invariant3
     (page_length1 file ada___ada__text_io__standard_in
     ada___ada__text_io__standard_out ada___ada__text_io__standard_err
     ada___ada__text_io__current_err ada___ada__text_io__file_system
     ada___ada__text_io__current_in ada___ada__text_io__current_out) true
     false true true)) :pattern ((page_length1 file
                                 ada___ada__text_io__standard_in
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_err
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun length1 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(define-fun dynamic_invariant6 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-fun name (us_rep) us_t)

(declare-fun name__function_guard (us_t us_rep) Bool)

;; name__post_axiom
  (assert
  (forall ((file us_rep))
  (! (=> (= (is_open file) true) (dynamic_invariant6 (name file) true false
     true true)) :pattern ((name file)) )))

(declare-fun form (us_rep) us_t)

(declare-fun form__function_guard (us_t us_rep) Bool)

;; form__post_axiom
  (assert
  (forall ((file us_rep))
  (! (=> (= (is_open file) true) (dynamic_invariant6 (form file) true false
     true true)) :pattern ((form file)) )))

(declare-fun end_of_line (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Bool)

(declare-fun end_of_line__function_guard (Bool us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; end_of_line__post_axiom
  (assert true)

(declare-fun end_of_line1 (us_private us_private us_private us_private
  us_private us_private us_private) Bool)

(declare-fun end_of_line__function_guard1 (Bool us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; end_of_line__post_axiom
  (assert true)

(declare-fun end_of_page (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Bool)

(declare-fun end_of_page__function_guard (Bool us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; end_of_page__post_axiom
  (assert true)

(declare-fun end_of_page1 (us_private us_private us_private us_private
  us_private us_private us_private) Bool)

(declare-fun end_of_page__function_guard1 (Bool us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; end_of_page__post_axiom
  (assert true)

(declare-fun end_of_file (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Bool)

(declare-fun end_of_file__function_guard (Bool us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; end_of_file__post_axiom
  (assert true)

(declare-fun end_of_file1 (us_private us_private us_private us_private
  us_private us_private us_private) Bool)

(declare-fun end_of_file__function_guard1 (Bool us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; end_of_file__post_axiom
  (assert true)

(declare-fun col (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun col__function_guard (Int us_rep us_private us_private us_private
  us_private us_private us_private us_private) Bool)

(declare-sort positive_count 0)

(declare-fun positive_countqtint (positive_count) Int)

;; positive_count'axiom
  (assert
  (forall ((i positive_count))
  (and (<= 1 (positive_countqtint i))
  (<= (positive_countqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (positive_count positive_count) Bool)

(declare-const dummy9 positive_count)

(declare-datatypes ()
((positive_count__ref
 (positive_count__refqtmk (positive_count__content positive_count)))))
(define-fun positive_count__ref_positive_count__content__projection ((a positive_count__ref)) positive_count 
  (positive_count__content a))

(define-fun dynamic_invariant7 ((temp___expr_272 Int)
  (temp___is_init_268 Bool) (temp___skip_constant_269 Bool)
  (temp___do_toplevel_270 Bool)
  (temp___do_typ_inv_271 Bool)) Bool (=>
                                     (or (= temp___is_init_268 true)
                                     (<= 1 2147483647)) (in_range8
                                     temp___expr_272)))

;; col__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private))
  (! (=> (= (is_open file) true) (dynamic_invariant7
     (col file ada___ada__text_io__standard_in
     ada___ada__text_io__standard_out ada___ada__text_io__standard_err
     ada___ada__text_io__current_err ada___ada__text_io__file_system
     ada___ada__text_io__current_in ada___ada__text_io__current_out) true
     false true true)) :pattern ((col file ada___ada__text_io__standard_in
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_err
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out)) ))))

(declare-fun col1 (us_private us_private us_private us_private us_private
  us_private us_private) Int)

(declare-fun col__function_guard1 (Int us_private us_private us_private
  us_private us_private us_private us_private) Bool)

;; col__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)) (! (dynamic_invariant7
  (col1 ada___ada__text_io__standard_in ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_err
  ada___ada__text_io__file_system ada___ada__text_io__current_in
  ada___ada__text_io__current_out) true false true
  true) :pattern ((col1 ada___ada__text_io__standard_in
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_err
                  ada___ada__text_io__file_system
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out)) )))

(declare-fun line (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line__function_guard (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; line__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private))
  (! (=> (= (is_open file) true) (dynamic_invariant7
     (line file ada___ada__text_io__standard_in
     ada___ada__text_io__standard_out ada___ada__text_io__standard_err
     ada___ada__text_io__current_err ada___ada__text_io__file_system
     ada___ada__text_io__current_in ada___ada__text_io__current_out) true
     false true true)) :pattern ((line file ada___ada__text_io__standard_in
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_err
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out)) ))))

(declare-fun line1 (us_private us_private us_private us_private us_private
  us_private us_private) Int)

(declare-fun line__function_guard1 (Int us_private us_private us_private
  us_private us_private us_private us_private) Bool)

;; line__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)) (! (dynamic_invariant7
  (line1 ada___ada__text_io__standard_in ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_err
  ada___ada__text_io__file_system ada___ada__text_io__current_in
  ada___ada__text_io__current_out) true false true
  true) :pattern ((line1 ada___ada__text_io__standard_in
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_err
                  ada___ada__text_io__file_system
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out)) )))

(declare-fun page (us_rep us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page__function_guard (Int us_rep us_private us_private
  us_private us_private us_private us_private us_private) Bool)

;; page__post_axiom
  (assert
  (forall ((file us_rep))
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private))
  (! (=> (= (is_open file) true) (dynamic_invariant7
     (page file ada___ada__text_io__standard_in
     ada___ada__text_io__standard_out ada___ada__text_io__standard_err
     ada___ada__text_io__current_err ada___ada__text_io__file_system
     ada___ada__text_io__current_in ada___ada__text_io__current_out) true
     false true true)) :pattern ((page file ada___ada__text_io__standard_in
                                 ada___ada__text_io__standard_out
                                 ada___ada__text_io__standard_err
                                 ada___ada__text_io__current_err
                                 ada___ada__text_io__file_system
                                 ada___ada__text_io__current_in
                                 ada___ada__text_io__current_out)) ))))

(declare-fun page1 (us_private us_private us_private us_private us_private
  us_private us_private) Int)

(declare-fun page__function_guard1 (Int us_private us_private us_private
  us_private us_private us_private us_private) Bool)

;; page__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_err us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)) (! (dynamic_invariant7
  (page1 ada___ada__text_io__standard_in ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_err
  ada___ada__text_io__file_system ada___ada__text_io__current_in
  ada___ada__text_io__current_out) true false true
  true) :pattern ((page1 ada___ada__text_io__standard_in
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_err
                  ada___ada__text_io__file_system
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out)) )))

(declare-const r14b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const r17b Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-sort int_num 0)

(declare-fun int_numqtint (int_num) Int)

;; int_num'axiom
  (assert
  (forall ((i int_num))
  (and (<= (- 20) (int_numqtint i)) (<= (int_numqtint i) 20))))

(define-fun in_range9 ((x Int)) Bool (and (<= (- 20) x) (<= x 20)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (int_num int_num) Bool)

(declare-const dummy10 int_num)

(declare-datatypes ()
((int_num__ref (int_num__refqtmk (int_num__content int_num)))))
(define-fun int_num__ref_int_num__content__projection ((a int_num__ref)) int_num 
  (int_num__content a))

(define-fun dynamic_invariant8 ((temp___expr_214 Int)
  (temp___is_init_210 Bool) (temp___skip_constant_211 Bool)
  (temp___do_toplevel_212 Bool)
  (temp___do_typ_inv_213 Bool)) Bool (=>
                                     (or (= temp___is_init_210 true)
                                     (<= (- 20) 20)) (in_range9
                                     temp___expr_214)))

(declare-sort field 0)

(declare-fun fieldqtint (field) Int)

;; field'axiom
  (assert
  (forall ((i field)) (and (<= 0 (fieldqtint i)) (<= (fieldqtint i) 255))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq11 (field field) Bool)

(declare-const dummy11 field)

(declare-datatypes () ((field__ref (field__refqtmk (field__content field)))))
(define-fun field__ref_field__content__projection ((a field__ref)) field 
  (field__content a))

(define-fun dynamic_invariant9 ((temp___expr_228 Int)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)
  (temp___do_typ_inv_227 Bool)) Bool (=>
                                     (or (= temp___is_init_224 true)
                                     (<= 0 255)) (in_range10
                                     temp___expr_228)))

(declare-sort number_base 0)

(declare-fun number_baseqtint (number_base) Int)

;; number_base'axiom
  (assert
  (forall ((i number_base))
  (and (<= 2 (number_baseqtint i)) (<= (number_baseqtint i) 16))))

(define-fun in_range11 ((x Int)) Bool (and (<= 2 x) (<= x 16)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq12 (number_base number_base) Bool)

(declare-const dummy12 number_base)

(declare-datatypes ()
((number_base__ref (number_base__refqtmk (number_base__content number_base)))))
(define-fun number_base__ref_number_base__content__projection ((a number_base__ref)) number_base 
  (number_base__content a))

(define-fun dynamic_invariant10 ((temp___expr_235 Int)
  (temp___is_init_231 Bool) (temp___skip_constant_232 Bool)
  (temp___do_toplevel_233 Bool)
  (temp___do_typ_inv_234 Bool)) Bool (=>
                                     (or (= temp___is_init_231 true)
                                     (<= 2 16)) (in_range11 temp___expr_235)))

(declare-sort tTstrSP1 0)

(declare-fun tTstrSP1qtint (tTstrSP1) Int)

;; tTstrSP1'axiom
  (assert
  (forall ((i tTstrSP1))
  (and (<= 1 (tTstrSP1qtint i)) (<= (tTstrSP1qtint i) 6))))

(define-fun in_range12 ((x Int)) Bool (and (<= 1 x) (<= x 6)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq13 (tTstrSP1 tTstrSP1) Bool)

(declare-const dummy13 tTstrSP1)

(declare-datatypes ()
((tTstrSP1__ref (tTstrSP1__refqtmk (tTstrSP1__content tTstrSP1)))))
(define-fun tTstrSP1__ref_tTstrSP1__content__projection ((a tTstrSP1__ref)) tTstrSP1 
  (tTstrSP1__content a))

(declare-sort tTa_lineSP1 0)

(declare-fun tTa_lineSP1qtint (tTa_lineSP1) Int)

;; tTa_lineSP1'axiom
  (assert
  (forall ((i tTa_lineSP1))
  (and (<= 1 (tTa_lineSP1qtint i)) (<= (tTa_lineSP1qtint i) 40))))

(define-fun in_range13 ((x Int)) Bool (and (<= 1 x) (<= x 40)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq14 (tTa_lineSP1 tTa_lineSP1) Bool)

(declare-const dummy14 tTa_lineSP1)

(declare-datatypes ()
((tTa_lineSP1__ref (tTa_lineSP1__refqtmk (tTa_lineSP1__content tTa_lineSP1)))))
(define-fun tTa_lineSP1__ref_tTa_lineSP1__content__projection ((a tTa_lineSP1__ref)) tTa_lineSP1 
  (tTa_lineSP1__content a))

(declare-sort t9b 0)

(declare-fun t9bqtint (t9b) Int)

;; t9b'axiom
  (assert (forall ((i t9b)) (and (<= 1 (t9bqtint i)) (<= (t9bqtint i) 100))))

(define-fun in_range14 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE14 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check14 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE14 (us_image) Int)

(declare-fun user_eq15 (t9b t9b) Bool)

(declare-const dummy15 t9b)

(declare-datatypes () ((t9b__ref (t9b__refqtmk (t9b__content t9b)))))
(define-fun t9b__ref_t9b__content__projection ((a t9b__ref)) t9b (t9b__content
                                                                 a))

(declare-datatypes () ((t16b__ref (t16b__refqtmk (t16b__content us_t)))))
(define-fun t16b__ref_t16b__content__projection ((a t16b__ref)) us_t 
  (t16b__content a))

(declare-datatypes () ((t19b__ref (t19b__refqtmk (t19b__content us_t)))))
(define-fun t19b__ref_t19b__content__projection ((a t19b__ref)) us_t 
  (t19b__content a))

(declare-fun temp___String_Literal_295 (tuple0) (Array Int character))

;; temp___String_Literal_295__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 2)) 111))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 3)) 117)
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 4)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 5)) 99)
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 7)) 46)
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 8)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 9)) 120)
     (= (to_rep (select (temp___String_Literal_295 us_void_param) 10)) 116))))) :pattern (
  (temp___String_Literal_295 us_void_param)) )))

(declare-fun temp___String_Literal_296 (tuple0) (Array Int character))

;; temp___String_Literal_296__def_axiom
  (assert true)

(declare-fun temp___String_Literal_303 (tuple0) (Array Int character))

;; temp___String_Literal_303__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 1)) 116)
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 2)) 97))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 3)) 114)
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 4)) 103))
     (and
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 5)) 101)
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 6)) 116)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 7)) 46)
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 8)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 9)) 120)
     (= (to_rep (select (temp___String_Literal_303 us_void_param) 10)) 116))))) :pattern (
  (temp___String_Literal_303 us_void_param)) )))

(declare-fun temp___String_Literal_304 (tuple0) (Array Int character))

;; temp___String_Literal_304__def_axiom
  (assert true)

(declare-fun temp___String_Literal_305 (tuple0) (Array Int character))

;; temp___String_Literal_305__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 2)) 111))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 3)) 117)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 4)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 5)) 99)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 6)) 101)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 7)) 46)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 8)) 116))
     (and
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 9)) 120)
     (= (to_rep (select (temp___String_Literal_305 us_void_param) 10)) 116))))) :pattern (
  (temp___String_Literal_305 us_void_param)) )))

(declare-fun temp___String_Literal_306 (tuple0) (Array Int character))

;; temp___String_Literal_306__def_axiom
  (assert true)

(define-fun dynamic_invariant11 ((temp___expr_46 Int)
  (temp___is_init_42 Bool) (temp___skip_constant_43 Bool)
  (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(declare-const standard_in us_private)

(declare-const standard_out us_private)

(declare-const standard_err us_private)

(declare-const current_err us_private)

(declare-const file_system us_private)

(declare-const current_in us_private)

(declare-const current_out us_private)

(declare-const source us_rep)

(declare-const default_width Int)

(declare-const default_base Int)

(declare-const int_get Int)

(declare-const target us_rep)

(declare-const nat Int)

(declare-const ch Int)

(declare-const str (Array Int character))

(declare-const a_line (Array Int character))

;; Ensures
  (assert
  (and
  (= (line_length standard_in standard_out standard_err current_err
     file_system current_in current_out) 0)
  (= (page_length standard_in standard_out standard_err current_err
     file_system current_in current_out) 0)))

;; Assume
  (assert (default_initial_assumption source false))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant9 default_width true false true true))

;; Assume
  (assert (dynamic_invariant10 default_base true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant8 int_get false false true true))

(declare-const sum Int)

;; H
  (assert (= sum 0))

;; Assume
  (assert (dynamic_invariant sum true false true true))

;; Assume
  (assert (default_initial_assumption target false))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 nat false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 ch false false true true))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

(declare-const standard_in1 us_private)

(declare-const standard_out1 us_private)

(declare-const standard_err1 us_private)

(declare-const current_err1 us_private)

(declare-const file_system1 us_private)

(declare-const current_in1 us_private)

(declare-const current_out1 us_private)

(declare-const source1 us_rep)

;; H
  (assert (= (is_open source1) true))

;; H
  (assert (= (mode source1) 0))

;; H
  (assert true)

;; H
  (assert true)

(declare-const standard_in2 us_private)

(declare-const standard_out2 us_private)

(declare-const standard_err2 us_private)

(declare-const current_err2 us_private)

(declare-const file_system2 us_private)

(declare-const current_in2 us_private)

(declare-const current_out2 us_private)

;; Ensures
  (assert
  (=> (= (not (= (mode source1) 0)) true)
  (and
  (= (line_length1 source1 standard_in1 standard_out1 standard_err1
     current_err1 file_system1 current_in1 current_out1) (line_length1
                                                         source1 standard_in2
                                                         standard_out2
                                                         standard_err2
                                                         current_err2
                                                         file_system2
                                                         current_in2
                                                         current_out2))
  (= (page_length1 source1 standard_in1 standard_out1 standard_err1
     current_err1 file_system1 current_in1 current_out1) (page_length1
                                                         source1 standard_in2
                                                         standard_out2
                                                         standard_err2
                                                         current_err2
                                                         file_system2
                                                         current_in2
                                                         current_out2)))))

(declare-const standard_in3 us_private)

(declare-const standard_out3 us_private)

(declare-const standard_err3 us_private)

(declare-const current_err3 us_private)

(declare-const file_system3 us_private)

(declare-const current_in3 us_private)

(declare-const current_out3 us_private)

(declare-const sum1 Int)

(declare-const j Int)

;; H
  (assert (= j 1))

;; H
  (assert
  (ite (= (and (ite (<= 1 j) true false) (ite (<= j 100) true false)) true)
  (exists ((text_io_warnings__int_io__get__item Int))
  (and (dynamic_invariant5 text_io_warnings__int_io__get__item true true true
  true)
  (exists ((int_get1 Int))
  (and (= int_get1 text_io_warnings__int_io__get__item)
  (let ((o (+ sum int_get1)))
  (and (in_range1 o)
  (exists ((sum2 Int))
  (and (= sum2 o)
  (and (in_range1 (* j 20))
  (and (in_range1 (* j (- 20)))
  (exists ((int_get2 Int) (j1 Int))
  (and (and (<= (* j1 (- 20)) sum1) (<= sum1 (* j1 20)))
  (and
  (= (and (ite (and
               (and (in_range14 j1) (dynamic_invariant8 int_get2 false true
               true true)) (dynamic_invariant sum1 true true true true))
          true false) (ite (and (<= 1 j1) (<= j1 100)) true false)) true)
  (= j1 100))))))))))))))
  (and
  (and
  (and
  (and
  (and
  (and (and (= standard_in3 standard_in2) (= standard_out3 standard_out2))
  (= standard_err3 standard_err2)) (= current_err3 current_err2))
  (= file_system3 file_system2)) (= current_in3 current_in2))
  (= current_out3 current_out2)) (= sum1 sum))))

(declare-const standard_in4 us_private)

(declare-const standard_out4 us_private)

(declare-const standard_err4 us_private)

(declare-const current_err4 us_private)

(declare-const file_system4 us_private)

(declare-const current_in4 us_private)

(declare-const current_out4 us_private)

(declare-const source2 us_rep)

;; H
  (assert (= (is_open source2) true))

;; H
  (assert (= (mode source2) 2))

;; H
  (assert
  (=> (not (= 2 0))
  (and
  (= (line_length1 source2 standard_in4 standard_out4 standard_err4
     current_err4 file_system4 current_in4 current_out4) 0)
  (= (page_length1 source2 standard_in4 standard_out4 standard_err4
     current_err4 file_system4 current_in4 current_out4) 0))))

;; H
  (assert true)

(declare-const standard_in5 us_private)

(declare-const standard_out5 us_private)

(declare-const standard_err5 us_private)

(declare-const current_err5 us_private)

(declare-const file_system5 us_private)

(declare-const current_in5 us_private)

(declare-const current_out5 us_private)

;; Ensures
  (assert
  (=> (= (not (= (mode source2) 0)) true)
  (and
  (= (line_length1 source2 standard_in4 standard_out4 standard_err4
     current_err4 file_system4 current_in4 current_out4) (line_length1
                                                         source2 standard_in5
                                                         standard_out5
                                                         standard_err5
                                                         current_err5
                                                         file_system5
                                                         current_in5
                                                         current_out5))
  (= (page_length1 source2 standard_in4 standard_out4 standard_err4
     current_err4 file_system4 current_in4 current_out4) (page_length1
                                                         source2 standard_in5
                                                         standard_out5
                                                         standard_err5
                                                         current_err5
                                                         file_system5
                                                         current_in5
                                                         current_out5)))))

(declare-const standard_in6 us_private)

(declare-const standard_out6 us_private)

(declare-const standard_err6 us_private)

(declare-const current_err6 us_private)

(declare-const file_system6 us_private)

(declare-const current_in6 us_private)

(declare-const current_out6 us_private)

;; H
  (assert
  (= (line_length1 source2 standard_in6 standard_out6 standard_err6
     current_err6 file_system6 current_in6 current_out6) 30))

;; H
  (assert
  (= (page_length1 source2 standard_in5 standard_out5 standard_err5
     current_err5 file_system5 current_in5 current_out5) (page_length1
                                                         source2 standard_in6
                                                         standard_out6
                                                         standard_err6
                                                         current_err6
                                                         file_system6
                                                         current_in6
                                                         current_out6)))

(declare-const standard_in7 us_private)

(declare-const standard_out7 us_private)

(declare-const standard_err7 us_private)

(declare-const current_err7 us_private)

(declare-const file_system7 us_private)

(declare-const current_in7 us_private)

(declare-const current_out7 us_private)

;; Ensures
  (assert
  (=> (= (not (= (mode source2) 0)) true)
  (and
  (= (line_length1 source2 standard_in6 standard_out6 standard_err6
     current_err6 file_system6 current_in6 current_out6) (line_length1
                                                         source2 standard_in7
                                                         standard_out7
                                                         standard_err7
                                                         current_err7
                                                         file_system7
                                                         current_in7
                                                         current_out7))
  (= (page_length1 source2 standard_in6 standard_out6 standard_err6
     current_err6 file_system6 current_in6 current_out6) (page_length1
                                                         source2 standard_in7
                                                         standard_out7
                                                         standard_err7
                                                         current_err7
                                                         file_system7
                                                         current_in7
                                                         current_out7)))))

(declare-const standard_in8 us_private)

(declare-const standard_out8 us_private)

(declare-const standard_err8 us_private)

(declare-const current_err8 us_private)

(declare-const file_system8 us_private)

(declare-const current_in8 us_private)

(declare-const current_out8 us_private)

;; Ensures
  (assert
  (=> (= (not (= (mode source2) 0)) true)
  (and
  (= (line_length1 source2 standard_in7 standard_out7 standard_err7
     current_err7 file_system7 current_in7 current_out7) (line_length1
                                                         source2 standard_in8
                                                         standard_out8
                                                         standard_err8
                                                         current_err8
                                                         file_system8
                                                         current_in8
                                                         current_out8))
  (= (page_length1 source2 standard_in7 standard_out7 standard_err7
     current_err7 file_system7 current_in7 current_out7) (page_length1
                                                         source2 standard_in8
                                                         standard_out8
                                                         standard_err8
                                                         current_err8
                                                         file_system8
                                                         current_in8
                                                         current_out8)))))

(declare-const spark__branch Bool)

(declare-const standard_in9 us_private)

(declare-const standard_out9 us_private)

(declare-const standard_err9 us_private)

(declare-const current_err9 us_private)

(declare-const file_system9 us_private)

(declare-const current_in9 us_private)

(declare-const current_out9 us_private)

;; H
  (assert
  (= spark__branch (and (ite (<= (- 20) sum1) true false) (ite (<= sum1 20)
                                                          true false))))

;; H
  (assert
  (ite (= spark__branch true)
  (and (in_range9 sum1)
  (and
  (= (line_length1 source2 standard_in8 standard_out8 standard_err8
     current_err8 file_system8 current_in8 current_out8) (line_length1
                                                         source2 standard_in9
                                                         standard_out9
                                                         standard_err9
                                                         current_err9
                                                         file_system9
                                                         current_in9
                                                         current_out9))
  (= (page_length1 source2 standard_in8 standard_out8 standard_err8
     current_err8 file_system8 current_in8 current_out8) (page_length1
                                                         source2 standard_in9
                                                         standard_out9
                                                         standard_err9
                                                         current_err9
                                                         file_system9
                                                         current_in9
                                                         current_out9))))
  (and
  (and
  (and
  (and
  (and (and (= standard_in9 standard_in8) (= standard_out9 standard_out8))
  (= standard_err9 standard_err8)) (= current_err9 current_err8))
  (= file_system9 file_system8)) (= current_in9 current_in8))
  (= current_out9 current_out8))))

(declare-const standard_in10 us_private)

(declare-const standard_out10 us_private)

(declare-const standard_err10 us_private)

(declare-const current_err10 us_private)

(declare-const file_system10 us_private)

(declare-const current_in10 us_private)

(declare-const current_out10 us_private)

;; H
  (assert
  (= (line_length1 source2 standard_in9 standard_out9 standard_err9
     current_err9 file_system9 current_in9 current_out9) (line_length1
                                                         source2
                                                         standard_in10
                                                         standard_out10
                                                         standard_err10
                                                         current_err10
                                                         file_system10
                                                         current_in10
                                                         current_out10)))

;; H
  (assert
  (= (page_length1 source2 standard_in9 standard_out9 standard_err9
     current_err9 file_system9 current_in9 current_out9) (page_length1
                                                         source2
                                                         standard_in10
                                                         standard_out10
                                                         standard_err10
                                                         current_err10
                                                         file_system10
                                                         current_in10
                                                         current_out10)))

(declare-const source3 us_rep)

;; H
  (assert (not (= (is_open source3) true)))

;; H
  (assert true)

(declare-const standard_in11 us_private)

(declare-const standard_out11 us_private)

(declare-const standard_err11 us_private)

(declare-const current_err11 us_private)

(declare-const file_system11 us_private)

(declare-const current_in11 us_private)

(declare-const current_out11 us_private)

(declare-const target1 us_rep)

;; H
  (assert (= (is_open target1) true))

;; H
  (assert (= (mode target1) 1))

;; H
  (assert
  (=> (not (= 1 0))
  (and
  (= (line_length1 target1 standard_in11 standard_out11 standard_err11
     current_err11 file_system11 current_in11 current_out11) 0)
  (= (page_length1 target1 standard_in11 standard_out11 standard_err11
     current_err11 file_system11 current_in11 current_out11) 0))))

;; H
  (assert true)

(declare-const standard_in12 us_private)

(declare-const standard_out12 us_private)

(declare-const standard_err12 us_private)

(declare-const current_err12 us_private)

(declare-const file_system12 us_private)

(declare-const current_in12 us_private)

(declare-const current_out12 us_private)

;; Ensures
  (assert
  (=> (= (not (= (mode target1) 0)) true)
  (and
  (= (line_length1 target1 standard_in11 standard_out11 standard_err11
     current_err11 file_system11 current_in11 current_out11) (line_length1
                                                             target1
                                                             standard_in12
                                                             standard_out12
                                                             standard_err12
                                                             current_err12
                                                             file_system12
                                                             current_in12
                                                             current_out12))
  (= (page_length1 target1 standard_in11 standard_out11 standard_err11
     current_err11 file_system11 current_in11 current_out11) (page_length1
                                                             target1
                                                             standard_in12
                                                             standard_out12
                                                             standard_err12
                                                             current_err12
                                                             file_system12
                                                             current_in12
                                                             current_out12)))))

(assert
;; defqtvc
 ;; File "text_io_warnings.adb", line 3, characters 0-0
  (not (not (= (is_open source3) true))))
(check-sat)

(exit)
