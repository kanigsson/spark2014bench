(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (natural natural) Bool)

(declare-const dummy natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range
                                    temp___expr_39)))

(declare-const v Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const m Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const d Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-sort tuint_64B 0)

(declare-fun tuint_64Bqtint (tuint_64B) Int)

;; tuint_64B'axiom
  (assert
  (forall ((i tuint_64B))
  (and (<= (- 9223372036854775808) (tuint_64Bqtint i))
  (<= (tuint_64Bqtint i) 9223372036854775807))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 9223372036854775808) x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (tuint_64B tuint_64B) Bool)

(declare-const dummy1 tuint_64B)

(declare-datatypes ()
((tuint_64B__ref (tuint_64B__refqtmk (tuint_64B__content tuint_64B)))))
(define-fun tuint_64B__ref_tuint_64B__content__projection ((a tuint_64B__ref)) tuint_64B 
  (tuint_64B__content a))

(declare-sort uint_64 0)

(declare-fun uint_64qtint (uint_64) Int)

;; uint_64'axiom
  (assert
  (forall ((i uint_64))
  (and (<= 0 (uint_64qtint i)) (<= (uint_64qtint i) 9223372036854775807))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x)
                                     (<= x 9223372036854775807)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (uint_64 uint_64) Bool)

(declare-const dummy2 uint_64)

(declare-datatypes ()
((uint_64__ref (uint_64__refqtmk (uint_64__content uint_64)))))
(define-fun uint_64__ref_uint_64__content__projection ((a uint_64__ref)) uint_64 
  (uint_64__content a))

(define-fun dynamic_invariant1 ((temp___expr_159 Int)
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool)
  (temp___do_typ_inv_158 Bool)) Bool (=>
                                     (or (= temp___is_init_155 true)
                                     (<= 0 9223372036854775807)) (in_range2
                                     temp___expr_159)))

(declare-const result_hi Int)

(declare-const result_lo Int)

(declare-const remainder Int)

;; Assume
  (assert (dynamic_invariant1 v true false true true))

;; Assume
  (assert (dynamic_invariant m true false true true))

;; Assume
  (assert (dynamic_invariant d true false true true))

;; Assume
  (assert (not (= d 0)))

(define-fun o () Int (div1 v 4294967296))

;; Ensures
  (assert (in_range2 o))

(declare-const v_hi Int)

;; H
  (assert (= v_hi o))

;; Assume
  (assert (dynamic_invariant1 v_hi true false true true))

(define-fun o1 () Int (mod1 v 4294967296))

;; Ensures
  (assert (in_range2 o1))

(declare-const v_lo Int)

;; H
  (assert (= v_lo o1))

;; Assume
  (assert (dynamic_invariant1 v_lo true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 result_hi false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 result_lo false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 remainder false false true true))

(define-fun o2 () Int (* v_hi m))

;; Ensures
  (assert (in_range1 o2))

;; Ensures
  (assert (in_range2 o2))

(declare-const v_hi1 Int)

;; H
  (assert (= v_hi1 o2))

(define-fun o3 () Int (* v_lo m))

;; Ensures
  (assert (in_range1 o3))

;; Ensures
  (assert (in_range2 o3))

(declare-const v_lo1 Int)

;; H
  (assert (= v_lo1 o3))

(define-fun o4 () Int (+ v_hi1 (div1 v_lo1 4294967296)))

;; Ensures
  (assert (in_range1 o4))

(declare-const v_hi2 Int)

;; H
  (assert (= v_hi2 o4))

(declare-const v_lo2 Int)

;; H
  (assert (= v_lo2 (mod1 v_lo1 4294967296)))

(define-fun o5 () Int d)

(define-fun o6 () Int (div1 v_hi2 o5))

;; Ensures
  (assert (in_range2 o6))

(declare-const result_hi1 Int)

;; H
  (assert (= result_hi1 o6))

;; Assert
  (assert (< result_hi1 2147483647))

(define-fun o7 () Int (* result_hi1 d))

(assert
;; defqtvc
 ;; File "pck.ads", line 4, characters 0-0
  (not (in_range1 o7)))
(check-sat)

(exit)
