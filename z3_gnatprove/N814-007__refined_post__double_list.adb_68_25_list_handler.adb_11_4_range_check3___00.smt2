(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 0 (index_typeqtint i)) (<= (index_typeqtint i) 128))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 128)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (index_type index_type) Bool)

(declare-const dummy index_type)

(declare-datatypes ()
((index_type__ref (index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun to_rep ((x index_type)) Int (index_typeqtint x))

(declare-fun of_rep (Int) index_type)

;; inversion_axiom
  (assert
  (forall ((x index_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x index_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__list_handler__integer_list__iterator__pointer index_type)))))
(define-fun us_split_fields_rec__list_handler__integer_list__iterator__pointer__projection ((a us_split_fields)) index_type 
  (rec__list_handler__integer_list__iterator__pointer a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (= (to_rep
                           (rec__list_handler__integer_list__iterator__pointer
                           (us_split_fields1 a))) (to_rep
                                                  (rec__list_handler__integer_list__iterator__pointer
                                                  (us_split_fields1 b))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const list_handler__integer_list__iterator__pointer__first__bit Int)

(declare-const list_handler__integer_list__iterator__pointer__last__bit Int)

(declare-const list_handler__integer_list__iterator__pointer__position Int)

;; list_handler__integer_list__iterator__pointer__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__iterator__pointer__first__bit))

;; list_handler__integer_list__iterator__pointer__last__bit_axiom
  (assert
  (< list_handler__integer_list__iterator__pointer__first__bit list_handler__integer_list__iterator__pointer__last__bit))

;; list_handler__integer_list__iterator__pointer__position_axiom
  (assert (<= 0 list_handler__integer_list__iterator__pointer__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes ()
((iterator__ref (iterator__refqtmk (iterator__content us_rep)))))
(define-fun iterator__ref_iterator__content__projection ((a iterator__ref)) us_rep 
  (iterator__content a))

(declare-const it us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const item Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (element_type element_type) Bool)

(declare-const dummy2 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun to_rep1 ((x element_type)) Int (element_typeqtint x))

(declare-fun of_rep1 (Int) element_type)

;; inversion_axiom
  (assert
  (forall ((x element_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x element_type)) (! (in_range1
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__list_handler__integer_list__list_node__value element_type)(rec__list_handler__integer_list__list_node__next index_type)(rec__list_handler__integer_list__list_node__previous index_type)))))
(define-fun us_split_fields_rec__list_handler__integer_list__list_node__value__projection ((a us_split_fields2)) element_type 
  (rec__list_handler__integer_list__list_node__value a))

(define-fun us_split_fields_rec__list_handler__integer_list__list_node__next__projection ((a us_split_fields2)) index_type 
  (rec__list_handler__integer_list__list_node__next a))

(define-fun us_split_fields_rec__list_handler__integer_list__list_node__previous__projection ((a us_split_fields2)) index_type 
  (rec__list_handler__integer_list__list_node__previous a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__list_handler__integer_list__list_node__value
                            (us_split_fields3 a))) (to_rep1
                                                   (rec__list_handler__integer_list__list_node__value
                                                   (us_split_fields3 b))))
                         (= (to_rep
                            (rec__list_handler__integer_list__list_node__next
                            (us_split_fields3 a))) (to_rep
                                                   (rec__list_handler__integer_list__list_node__next
                                                   (us_split_fields3 b)))))
                         (= (to_rep
                            (rec__list_handler__integer_list__list_node__previous
                            (us_split_fields3 a))) (to_rep
                                                   (rec__list_handler__integer_list__list_node__previous
                                                   (us_split_fields3 b)))))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const list_handler__integer_list__list_node__value__first__bit Int)

(declare-const list_handler__integer_list__list_node__value__last__bit Int)

(declare-const list_handler__integer_list__list_node__value__position Int)

;; list_handler__integer_list__list_node__value__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__value__first__bit))

;; list_handler__integer_list__list_node__value__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__value__first__bit list_handler__integer_list__list_node__value__last__bit))

;; list_handler__integer_list__list_node__value__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__value__position))

(declare-const list_handler__integer_list__list_node__next__first__bit Int)

(declare-const list_handler__integer_list__list_node__next__last__bit Int)

(declare-const list_handler__integer_list__list_node__next__position Int)

;; list_handler__integer_list__list_node__next__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__next__first__bit))

;; list_handler__integer_list__list_node__next__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__next__first__bit list_handler__integer_list__list_node__next__last__bit))

;; list_handler__integer_list__list_node__next__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__next__position))

(declare-const list_handler__integer_list__list_node__previous__first__bit Int)

(declare-const list_handler__integer_list__list_node__previous__last__bit Int)

(declare-const list_handler__integer_list__list_node__previous__position Int)

;; list_handler__integer_list__list_node__previous__first__bit_axiom
  (assert (<= 0 list_handler__integer_list__list_node__previous__first__bit))

;; list_handler__integer_list__list_node__previous__last__bit_axiom
  (assert
  (< list_handler__integer_list__list_node__previous__first__bit list_handler__integer_list__list_node__previous__last__bit))

;; list_handler__integer_list__list_node__previous__position_axiom
  (assert (<= 0 list_handler__integer_list__list_node__previous__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((list_node__ref (list_node__refqtmk (list_node__content us_rep1)))))
(define-fun list_node__ref_list_node__content__projection ((a list_node__ref)) us_rep1 
  (list_node__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep1))))))
(declare-fun slide ((Array Int us_rep1) Int Int) (Array Int us_rep1))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep1)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int us_rep1)) (a__first Int) (a__last Int)
  (b (Array Int us_rep1)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (bool_eq1 (select a temp___idx_156)
                              (select b (+ (- b__first a__first) temp___idx_156))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep1)) (b (Array Int us_rep1)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (bool_eq1 (select a temp___idx_156)
     (select b (+ (- b__first a__first) temp___idx_156))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int index_type))))))
(declare-fun slide1 ((Array Int index_type) Int Int) (Array Int index_type))

;; slide_eq
  (assert
  (forall ((a (Array Int index_type)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int index_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq3 ((a (Array Int index_type)) (a__first Int) (a__last Int)
  (b (Array Int index_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_157 Int))
                           (=>
                           (and (<= a__first temp___idx_157)
                           (<= temp___idx_157 a__last))
                           (= (to_rep (select a temp___idx_157)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_157)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int index_type)) (b (Array Int index_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq3 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_157 Int))
  (=> (and (<= a__first temp___idx_157) (<= temp___idx_157 a__last))
  (= (to_rep (select a temp___idx_157)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_157)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(define-fun dynamic_invariant ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range1 temp___expr_166)))

(declare-sort status_type 0)

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (status_type status_type) Bool)

(declare-const dummy4 status_type)

(declare-datatypes ()
((status_type__ref (status_type__refqtmk (status_type__content status_type)))))
(define-fun status_type__ref_status_type__content__projection ((a status_type__ref)) status_type 
  (status_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_173 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)
  (temp___do_typ_inv_172 Bool)) Bool (=>
                                     (or (= temp___is_init_169 true)
                                     (<= 0 3)) (in_range2 temp___expr_173)))

(define-fun dynamic_invariant2 ((temp___expr_180 Int)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)
  (temp___do_typ_inv_179 Bool)) Bool (=>
                                     (or (= temp___is_init_176 true)
                                     (<= 0 128)) (in_range temp___expr_180)))

(declare-const status Int)

(declare-const memory (Array Int us_rep1))

(declare-const count Int)

(declare-const free_list (Array Int index_type))

(declare-const free Int)

(declare-const new_pointer Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant item true false true true))

;; Assume
  (assert (dynamic_invariant1 status false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 count true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 free true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 new_pointer false false true true))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= count 128) true false)))

;; H
  (assert (not (= spark__branch true)))

(declare-const new_pointer1 Int)

;; H
  (assert (= new_pointer1 free))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep (select free_list free)) o))

(declare-const o1 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__iterator__pointer
     (us_split_fields1 it))) o1))

(declare-const o2 element_type)

;; Ensures
  (assert (= (to_rep1 o2) item))

(declare-const memory1 (Array Int us_rep1))

;; H
  (assert
  (= memory1 (store memory new_pointer1 (us_repqtmk1
                                        (us_split_fieldsqtmk1 o2
                                        (rec__list_handler__integer_list__iterator__pointer
                                        (us_split_fields1 it))
                                        (rec__list_handler__integer_list__list_node__previous
                                        (us_split_fields3 (select memory o1))))))))

(declare-const o3 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__iterator__pointer
     (us_split_fields1 it))) o3))

(declare-const o4 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__list_node__previous
     (us_split_fields3 (select memory1 o3)))) o4))

(define-fun q_ () us_split_fields2 (us_split_fields3 (select memory1 o4)))

(declare-const o5 index_type)

;; Ensures
  (assert (= (to_rep o5) new_pointer1))

(declare-const o6 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__iterator__pointer
     (us_split_fields1 it))) o6))

(declare-const o7 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__list_node__previous
     (us_split_fields3 (select memory1 o6)))) o7))

(declare-const memory2 (Array Int us_rep1))

;; H
  (assert
  (= memory2 (store memory1 o7 (us_repqtmk1
                               (us_split_fieldsqtmk1
                               (rec__list_handler__integer_list__list_node__value
                               q_) o5
                               (rec__list_handler__integer_list__list_node__previous
                               q_))))))

(declare-const o8 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__iterator__pointer
     (us_split_fields1 it))) o8))

(declare-const o9 index_type)

;; Ensures
  (assert (= (to_rep o9) new_pointer1))

(declare-const o10 Int)

;; Ensures
  (assert
  (= (to_rep
     (rec__list_handler__integer_list__iterator__pointer
     (us_split_fields1 it))) o10))

(assert
;; defqtvc
 ;; File "double_list.ads", line 20, characters 0-0
  (not (in_range (+ count 1))))
(check-sat)

(exit)
