(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (character character) Bool)

(declare-const dummy3 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range4 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range3 low) (in_range3 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq4 (us_t us_t) Bool)

(declare-const dummy4 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(define-fun dynamic_invariant1 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-fun is_subsequence (us_t us_t) Bool)

(declare-fun is_subsequence__function_guard (Bool us_t us_t) Bool)

(declare-fun head (us_t) Int)

(declare-fun head__function_guard (Int us_t) Bool)

(declare-fun tail (us_t) us_t)

(declare-fun tail__function_guard (us_t us_t) Bool)

(declare-fun temp___String_Literal_183 (tuple0) (Array Int character))

;; temp___String_Literal_183__def_axiom
  (assert true)

(declare-fun temp___String_Literal_187 (tuple0) (Array Int character))

;; temp___String_Literal_187__def_axiom
  (assert true)

(declare-fun slow_lcs_length (us_t us_t) Int)

(declare-fun slow_lcs_length__function_guard (Int us_t us_t) Bool)

(define-fun dynamic_invariant2 ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-fun temp___String_Literal_202 (tuple0) (Array Int character))

;; temp___String_Literal_202__def_axiom
  (assert true)

(declare-fun temp___String_Literal_206 (tuple0) (Array Int character))

;; temp___String_Literal_206__def_axiom
  (assert true)

(declare-const s1 us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const s2 us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tseq_lengthB 0)

(declare-fun tseq_lengthBqtint (tseq_lengthB) Int)

;; tseq_lengthB'axiom
  (assert
  (forall ((i tseq_lengthB))
  (and (<= (- 2147483648) (tseq_lengthBqtint i))
  (<= (tseq_lengthBqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (tseq_lengthB tseq_lengthB) Bool)

(declare-const dummy5 tseq_lengthB)

(declare-datatypes ()
((tseq_lengthB__ref
 (tseq_lengthB__refqtmk (tseq_lengthB__content tseq_lengthB)))))
(define-fun tseq_lengthB__ref_tseq_lengthB__content__projection ((a tseq_lengthB__ref)) tseq_lengthB 
  (tseq_lengthB__content a))

(define-fun to_rep2 ((x tseq_lengthB)) Int (tseq_lengthBqtint x))

(declare-fun of_rep2 (Int) tseq_lengthB)

;; inversion_axiom
  (assert
  (forall ((x tseq_lengthB))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x tseq_lengthB)) (! (in_range5
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-const last2 Int)

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (tseq_lengthB tseq_lengthB) Bool)

(declare-const dummy6 tseq_lengthB)

(declare-datatypes ()
((seq_length__ref (seq_length__refqtmk (seq_length__content tseq_lengthB)))))
(define-fun seq_length__ref_seq_length__content__projection ((a seq_length__ref)) tseq_lengthB 
  (seq_length__content a))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (map__refqtmk1 (map__content1 map1)))))
(declare-fun get (map1 Int Int) tseq_lengthB)

(declare-fun set (map1 Int Int tseq_lengthB) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i Int))
  (forall ((j Int))
  (forall ((a tseq_lengthB))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i Int) (i2 Int))
  (forall ((j Int) (j2 Int))
  (forall ((a tseq_lengthB))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 Int Int Int Int) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first Int) (old_first Int))
  (forall ((new_first_2 Int) (old_first_2 Int))
  (forall ((i Int))
  (forall ((j Int))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (- i (- new_first old_first)) (- j (- new_first_2 old_first_2)))) :pattern (
  (get (slide1 a old_first new_first old_first_2 new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first Int) (a__last Int) (a__first_2 Int)
  (a__last_2 Int) (b map1) (b__first Int) (b__last Int) (b__first_2 Int)
  (b__last_2 Int)) Bool (ite (and
                             (and
                             (ite (<= a__first a__last)
                             (and (<= b__first b__last)
                             (= (- a__last a__first) (- b__last b__first)))
                             (< b__last b__first))
                             (ite (<= a__first_2 a__last_2)
                             (and (<= b__first_2 b__last_2)
                             (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
                             (< b__last_2 b__first_2)))
                             (forall ((temp___idx_159 Int)
                             (temp___idx_160 Int))
                             (=>
                             (and
                             (and (<= a__first temp___idx_159)
                             (<= temp___idx_159 a__last))
                             (and (<= a__first_2 temp___idx_160)
                             (<= temp___idx_160 a__last_2)))
                             (= (to_rep2
                                (get a temp___idx_159 temp___idx_160)) 
                             (to_rep2
                             (get b (+ (- b__first a__first) temp___idx_159)
                             (+ (- b__first_2 a__first_2) temp___idx_160)))))))
                        true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first Int) (a__last Int) (a__first_2 Int) (a__last_2 Int)
  (b__first Int) (b__last Int) (b__first_2 Int) (b__last_2 Int))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (ite (<= a__first_2 a__last_2)
  (and (<= b__first_2 b__last_2)
  (= (- a__last_2 a__first_2) (- b__last_2 b__first_2)))
  (< b__last_2 b__first_2)))
  (forall ((temp___idx_159 Int) (temp___idx_160 Int))
  (=>
  (and (and (<= a__first temp___idx_159) (<= temp___idx_159 a__last))
  (and (<= a__first_2 temp___idx_160) (<= temp___idx_160 a__last_2)))
  (= (to_rep2 (get a temp___idx_159 temp___idx_160)) (to_rep2
                                                     (get b
                                                     (+ (- b__first a__first) temp___idx_159)
                                                     (+ (- b__first_2 a__first_2) temp___idx_160)))))))))))

(declare-const lengths__first integer)

(declare-const lengths__last integer)

(declare-const lengths__first_2 integer)

(declare-const lengths__last_2 integer)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun get_length (Int Int map1) Int)

(declare-fun get_length__function_guard (Int Int Int map1) Bool)

(declare-const first2 Int)

(declare-const last3 Int)

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq7 (integer integer) Bool)

(declare-const dummy7 integer)

(declare-datatypes ()
((s1_index__ref (s1_index__refqtmk (s1_index__content integer)))))
(define-fun s1_index__ref_s1_index__content__projection ((a s1_index__ref)) integer 
  (s1_index__content a))

(declare-const first3 Int)

(declare-const last4 Int)

(define-fun dynamic_property3 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq8 (integer integer) Bool)

(declare-const dummy8 integer)

(declare-datatypes ()
((s2_index__ref (s2_index__refqtmk (s2_index__content integer)))))
(define-fun s2_index__ref_s2_index__content__projection ((a s2_index__ref)) integer 
  (s2_index__content a))

(define-fun dynamic_invariant3 ((temp___expr_256 Int)
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool)
  (temp___do_typ_inv_255 Bool)) Bool (=>
                                     (or (= temp___is_init_252 true)
                                     (<= 0 last2)) (dynamic_property1 0 
                                     last2 temp___expr_256)))

;; last__def_axiom
  (assert (= last2 (max (length s1) (length s2))))

;; get_length__post_axiom
  (assert
  (forall ((x1 Int) (x2 Int))
  (forall ((string_utilities__longest_common_subsequence__lengths map1))
  (! (=>
     (and
     (and (dynamic_invariant x1 true true true true) (dynamic_invariant2 x2
     true true true true))
     (forall ((temp___261 Int) (temp___262 Int))
     (=>
     (and
     (and (<= (to_rep1 lengths__first) temp___261)
     (<= temp___261 (to_rep1 lengths__last)))
     (and (<= (to_rep1 lengths__first_2) temp___262)
     (<= temp___262 (to_rep1 lengths__last_2)))) (dynamic_property1 0 
     last2
     (to_rep2
     (get string_utilities__longest_common_subsequence__lengths temp___261
     temp___262))))))
     (let ((result (get_length x1 x2
                   string_utilities__longest_common_subsequence__lengths)))
     (=> (get_length__function_guard result x1 x2
     string_utilities__longest_common_subsequence__lengths)
     (dynamic_invariant3 result true false true true)))) :pattern ((get_length
                                                                   x1 x2
                                                                   string_utilities__longest_common_subsequence__lengths)) ))))

;; get_length__def_axiom
  (assert
  (forall ((x1 Int) (x2 Int))
  (forall ((string_utilities__longest_common_subsequence__lengths map1))
  (! (=>
     (and
     (and (dynamic_invariant x1 true true true true) (dynamic_invariant2 x2
     true true true true))
     (forall ((temp___265 Int) (temp___266 Int))
     (=>
     (and
     (and (<= (to_rep1 lengths__first) temp___265)
     (<= temp___265 (to_rep1 lengths__last)))
     (and (<= (to_rep1 lengths__first_2) temp___266)
     (<= temp___266 (to_rep1 lengths__last_2)))) (dynamic_property1 0 
     last2
     (to_rep2
     (get string_utilities__longest_common_subsequence__lengths temp___265
     temp___266))))))
     (= (get_length x1 x2
        string_utilities__longest_common_subsequence__lengths) (ite (and
                                                                    (dynamic_property2
                                                                    first2
                                                                    last3 x1)
                                                                    (dynamic_property3
                                                                    first3
                                                                    last4
                                                                    x2))
                                                               (to_rep2
                                                               (get
                                                               string_utilities__longest_common_subsequence__lengths
                                                               x1 x2)) 0))) :pattern (
  (get_length x1 x2 string_utilities__longest_common_subsequence__lengths)) ))))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const last5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const result____first integer)

(declare-const result____last integer)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(define-fun dynamic_invariant4 ((temp___expr_242 Int)
  (temp___is_init_238 Bool) (temp___skip_constant_239 Bool)
  (temp___do_toplevel_240 Bool)
  (temp___do_typ_inv_241 Bool)) Bool (=>
                                     (or (= temp___is_init_238 true)
                                     (<= first2 last3)) (dynamic_property2
                                     first2 last3 temp___expr_242)))

;; first__def_axiom
  (assert (= first2 (first1 s1)))

;; last__def_axiom
  (assert (= last3 (last1 s1)))

(define-fun dynamic_invariant5 ((temp___expr_249 Int)
  (temp___is_init_245 Bool) (temp___skip_constant_246 Bool)
  (temp___do_toplevel_247 Bool)
  (temp___do_typ_inv_248 Bool)) Bool (=>
                                     (or (= temp___is_init_245 true)
                                     (<= first3 last4)) (dynamic_property3
                                     first3 last4 temp___expr_249)))

;; first__def_axiom
  (assert (= first3 (first1 s2)))

;; last__def_axiom
  (assert (= last4 (last1 s2)))

(declare-sort t1 0)

(declare-fun first4 (t1) integer)

(declare-fun last6 (t1) integer)

(declare-fun mk1 (Int Int) t1)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first4 (mk1 f l))) f)
     (= (to_rep1 (last6 (mk1 f l))) l)))) :pattern ((mk1 f l)) )))

(define-fun dynamic_property4 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property2 range_first range_last low)
                   (dynamic_property2 range_first range_last high))))))

(declare-sort t2 0)

(declare-fun first5 (t2) integer)

(declare-fun last7 (t2) integer)

(declare-fun mk2 (Int Int) t2)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first5 (mk2 f l))) f)
     (= (to_rep1 (last7 (mk2 f l))) l)))) :pattern ((mk2 f l)) )))

(define-fun dynamic_property5 ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high)
                   (and (dynamic_property3 range_first range_last low)
                   (dynamic_property3 range_first range_last high))))))

(declare-datatypes () ((us_t1 (us_tqtmk1 (elts1 map1)(rt1 t1)(rt_2 t2)))))
(define-fun to_array1 ((a us_t1)) map1 (elts1 a))

(define-fun of_array1 ((a map1) (f Int) (l Int) (f2 Int)
  (l2 Int)) us_t1 (us_tqtmk1 a (mk1 f l) (mk2 f2 l2)))

(define-fun first6 ((a us_t1)) Int (to_rep1 (first4 (rt1 a))))

(define-fun last8 ((a us_t1)) Int (to_rep1 (last6 (rt1 a))))

(define-fun length1 ((a us_t1)) Int (ite (<= (first6 a) (last8 a))
                                    (+ (- (last8 a) (first6 a)) 1) 0))

(define-fun first_2 ((a us_t1)) Int (to_rep1 (first5 (rt_2 a))))

(define-fun last_2 ((a us_t1)) Int (to_rep1 (last7 (rt_2 a))))

(define-fun length_2 ((a us_t1)) Int (ite (<= (first_2 a) (last_2 a))
                                     (+ (- (last_2 a) (first_2 a)) 1) 0))

(define-fun dynamic_property6 ((range_first1 Int) (range_last1 Int) (f1 Int)
  (l1 Int) (range_first2 Int) (range_last2 Int) (f2 Int)
  (l2 Int)) Bool (and (dynamic_property4 range_first1 range_last1 f1 l1)
                 (dynamic_property5 range_first2 range_last2 f2 l2)))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(define-fun bool_eq3 ((x us_t1)
  (y us_t1)) Bool (bool_eq2 (elts1 x) (to_rep1 (first4 (rt1 x)))
                  (to_rep1 (last6 (rt1 x))) (to_rep1 (first5 (rt_2 x)))
                  (to_rep1 (last7 (rt_2 x))) (elts1 y)
                  (to_rep1 (first4 (rt1 y))) (to_rep1 (last6 (rt1 y)))
                  (to_rep1 (first5 (rt_2 y))) (to_rep1 (last7 (rt_2 y)))))

(declare-fun user_eq9 (us_t1 us_t1) Bool)

(declare-const dummy9 us_t1)

(declare-datatypes ()
((tlengthsB__ref (tlengthsB__refqtmk (tlengthsB__content us_t1)))))
(define-fun tlengthsB__ref_tlengthsB__content__projection ((a tlengthsB__ref)) us_t1 
  (tlengthsB__content a))

(declare-datatypes ()
((tlengthsT__ref (tlengthsT__refqtmk (tlengthsT__content us_t1)))))
(define-fun tlengthsT__ref_tlengthsT__content__projection ((a tlengthsT__ref)) us_t1 
  (tlengthsT__content a))

(declare-datatypes ()
((tresultS__ref (tresultS__refqtmk (tresultS__content us_t)))))
(define-fun tresultS__ref_tresultS__content__projection ((a tresultS__ref)) us_t 
  (tresultS__content a))

(declare-const last9 Int)

(define-fun dynamic_property7 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (integer integer) Bool)

(declare-const dummy10 integer)

(declare-datatypes () ((trxS__ref (trxS__refqtmk (trxS__content integer)))))
(define-fun trxS__ref_trxS__content__projection ((a trxS__ref)) integer 
  (trxS__content a))

(define-fun dynamic_invariant6 ((temp___expr_289 Int)
  (temp___is_init_285 Bool) (temp___skip_constant_286 Bool)
  (temp___do_toplevel_287 Bool)
  (temp___do_typ_inv_288 Bool)) Bool (=>
                                     (or (= temp___is_init_285 true)
                                     (<= 1 last9)) (dynamic_property7 1 
                                     last9 temp___expr_289)))

;; last__def_axiom
  (assert (= last9 (to_rep1 result____last)))

(define-fun dynamic_invariant7 ((temp___expr_279 us_t)
  (temp___is_init_275 Bool) (temp___skip_constant_276 Bool)
  (temp___do_toplevel_277 Bool)
  (temp___do_typ_inv_278 Bool)) Bool (=>
                                     (not (= temp___skip_constant_276 true))
                                     (and (dynamic_property 1 last5
                                     (first1 temp___expr_279)
                                     (last1 temp___expr_279))
                                     (and (= (first1 temp___expr_279) 1)
                                     (= (last1 temp___expr_279) last5)))))

(define-fun default_initial_assumption ((temp___expr_281 us_t)
  (temp___skip_top_level_282 Bool)) Bool (and (= (first1 temp___expr_281) 1)
                                         (= (last1 temp___expr_281) last5)))

(declare-fun temp___String_Literal_337 (tuple0) (Array Int character))

;; temp___String_Literal_337__def_axiom
  (assert true)

(define-fun dynamic_invariant8 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant9 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range4 temp___expr_74)))

(declare-const spark__branch Bool)

(declare-const lengths map1)

(declare-const result__ (Array Int character))

(declare-const string_utilities__longest_common_subsequence__result us_t)

;; Assume
  (assert (dynamic_invariant1 s1 true false true true))

;; Assume
  (assert (dynamic_invariant1 s2 true false true true))

;; Assume
  (assert
  (and
  (and
  (and
  (= (first6
     (of_array1 lengths (to_rep1 lengths__first) (to_rep1 lengths__last)
     (to_rep1 lengths__first_2) (to_rep1 lengths__last_2))) first2)
  (= (last8
     (of_array1 lengths (to_rep1 lengths__first) (to_rep1 lengths__last)
     (to_rep1 lengths__first_2) (to_rep1 lengths__last_2))) last3))
  (= (first_2
     (of_array1 lengths (to_rep1 lengths__first) (to_rep1 lengths__last)
     (to_rep1 lengths__first_2) (to_rep1 lengths__last_2))) first3))
  (= (last_2
     (of_array1 lengths (to_rep1 lengths__first) (to_rep1 lengths__last)
     (to_rep1 lengths__first_2) (to_rep1 lengths__last_2))) last4)))

;; Assume
  (assert
  (and
  (and
  (and (dynamic_property6 first2 last3 (to_rep1 lengths__first)
  (to_rep1 lengths__last) first3 last4 (to_rep1 lengths__first_2)
  (to_rep1 lengths__last_2))
  (and (= (to_rep1 lengths__first) (first1 s1))
  (= (to_rep1 lengths__last) (last1 s1))))
  (and (= (to_rep1 lengths__first_2) (first1 s2))
  (= (to_rep1 lengths__last_2) (last1 s2))))
  (forall ((temp___319 Int) (temp___320 Int))
  (=>
  (and
  (and (<= (to_rep1 lengths__first) temp___319)
  (<= temp___319 (to_rep1 lengths__last)))
  (and (<= (to_rep1 lengths__first_2) temp___320)
  (<= temp___320 (to_rep1 lengths__last_2))))
  (=> (<= 0 last2) (dynamic_property1 0 last2
  (to_rep2 (get lengths temp___319 temp___320))))))))

(declare-const spark__branch1 Bool)

(declare-const lengths1 map1)

(declare-const x1 Int)

;; H
  (assert (= x1 (first1 s1)))

;; H
  (assert
  (let ((temp___321 (first1 s1)))
  (let ((temp___322 (last1 s1)))
  (ite (= (and (ite (<= temp___321 x1) true false) (ite (<= x1 temp___322)
                                                   true false)) true)
  (exists ((spark__branch2 Bool) (lengths2 map1) (x11 Int))
  (and
  (= (and (ite (and
               (forall ((temp___332 Int) (temp___333 Int))
               (=>
               (and
               (and (<= (to_rep1 lengths__first) temp___332)
               (<= temp___332 (to_rep1 lengths__last)))
               (and (<= (to_rep1 lengths__first_2) temp___333)
               (<= temp___333 (to_rep1 lengths__last_2))))
               (=> (<= 0 last2) (dynamic_property1 0 last2
               (to_rep2 (get lengths2 temp___332 temp___333))))))
               (forall ((temp___335 Int) (temp___336 Int))
               (=>
               (and
               (and (<= (to_rep1 lengths__first) temp___335)
               (<= temp___335 (to_rep1 lengths__last)))
               (and (<= (to_rep1 lengths__first_2) temp___336)
               (<= temp___336 (to_rep1 lengths__last_2))))
               (=>
               (or (< temp___322 temp___335)
               (or (< temp___335 temp___321) (<= x11 temp___335)))
               (= (get lengths2 temp___335 temp___336) (get lengths
                                                       temp___335 temp___336))))))
          true false) (ite (and (<= (first1 s1) x11) (<= x11 (last1 s1)))
                      true false)) true)
  (and
  (let ((temp___323 (first1 s2)))
  (let ((temp___324 (last1 s2)))
  (exists ((x2 Int))
  (and (= x2 temp___323)
  (ite (= (and (ite (<= temp___323 x2) true false) (ite (<= x2 temp___324)
                                                   true false)) true)
  (exists ((lengths3 map1) (x21 Int))
  (and
  (= (and (ite (and
               (forall ((temp___327 Int) (temp___328 Int))
               (=>
               (and
               (and (<= (to_rep1 lengths__first) temp___327)
               (<= temp___327 (to_rep1 lengths__last)))
               (and (<= (to_rep1 lengths__first_2) temp___328)
               (<= temp___328 (to_rep1 lengths__last_2))))
               (=> (<= 0 last2) (dynamic_property1 0 last2
               (to_rep2 (get lengths3 temp___327 temp___328))))))
               (forall ((temp___330 Int) (temp___331 Int))
               (=>
               (and
               (and (<= (to_rep1 lengths__first) temp___330)
               (<= temp___330 (to_rep1 lengths__last)))
               (and (<= (to_rep1 lengths__first_2) temp___331)
               (<= temp___331 (to_rep1 lengths__last_2))))
               (=>
               (or (< temp___324 temp___331)
               (or (< temp___331 temp___323)
               (or (<= x21 temp___331) (not (= x11 temp___330)))))
               (= (get lengths3 temp___330 temp___331) (get lengths2
                                                       temp___330 temp___331))))))
          true false) (ite (and (<= (first1 s2) x21) (<= x21 (last1 s2)))
                      true false)) true)
  (and
  (exists ((o Int))
  (and (= (to_rep (select (to_array s2) x21)) o)
  (exists ((o1 Int))
  (and (= (to_rep (select (to_array s1) x11)) o1)
  (and (= spark__branch1 (ite (= o1 o) true false))
  (ite (= spark__branch1 true)
  (let ((o2 (- x21 1)))
  (and (in_range1 o2)
  (and (in_range2 o2)
  (let ((o3 (- x11 1)))
  (and (in_range1 o3)
  (let ((o4 (get_length o3 o2 lengths3)))
  (and
  (and (get_length__function_guard o4 o3 o2 lengths3)
  (and (dynamic_invariant3 o4 true false true true)
  (= o4 (ite (and (dynamic_property2 first2 last3 o3) (dynamic_property3
             first3 last4 o2))
        (to_rep2 (get lengths3 o3 o2)) 0))))
  (let ((o5 (+ 1 o4)))
  (and (in_range5 o5)
  (and (dynamic_property1 0 last2 o5)
  (= lengths1 (set lengths3 x11 x21 (of_rep2 o5)))))))))))))
  (let ((o2 (- x21 1)))
  (and (in_range1 o2)
  (and (in_range2 o2)
  (let ((o3 (get_length x11 o2 lengths3)))
  (and
  (and (get_length__function_guard o3 x11 o2 lengths3)
  (and (dynamic_invariant3 o3 true false true true)
  (= o3 (ite (and (dynamic_property2 first2 last3 x11) (dynamic_property3
             first3 last4 o2))
        (to_rep2 (get lengths3 x11 o2)) 0))))
  (and (in_range2 x21)
  (let ((o4 (- x11 1)))
  (and (in_range1 o4)
  (let ((o5 (get_length o4 x21 lengths3)))
  (and
  (and (get_length__function_guard o5 o4 x21 lengths3)
  (and (dynamic_invariant3 o5 true false true true)
  (= o5 (ite (and (dynamic_property2 first2 last3 o4) (dynamic_property3
             first3 last4 x21))
        (to_rep2 (get lengths3 o4 x21)) 0))))
  (let ((temp___326 (max o5 o3)))
  (and (dynamic_property1 0 last2 temp___326)
  (= lengths1 (set lengths3 x11 x21 (of_rep2 temp___326)))))))))))))))))))))
  (= x21 temp___324))))
  (and (= spark__branch1 spark__branch2) (= lengths1 lengths2)))))))
  (= x11 temp___322))))
  (and (= spark__branch1 spark__branch) (= lengths1 lengths))))))

(define-fun o () Int (last1 s2))

;; Ensures
  (assert (in_range2 o))

(define-fun o1 () Int (last1 s1))

(define-fun o2 () Int (get_length o1 o lengths1))

;; H
  (assert (get_length__function_guard o2 o1 o lengths1))

;; H
  (assert (dynamic_invariant3 o2 true false true true))

;; H
  (assert
  (= o2 (ite (and (dynamic_property2 first2 last3 o1) (dynamic_property3
             first3 last4 o))
        (to_rep2 (get lengths1 o1 o)) 0)))

(declare-const spark__branch2 Bool)

;; H
  (assert (= spark__branch2 (ite (= o2 0) true false)))

;; H
  (assert (not (= spark__branch2 true)))

(define-fun o3 () Int (last1 s2))

;; Ensures
  (assert (in_range2 o3))

(define-fun o4 () Int (last1 s1))

(define-fun string_utilities__longest_common_subsequence__B_4__last__assume () Int 
  (get_length o4 o3 lengths1))

;; H
  (assert (get_length__function_guard
  string_utilities__longest_common_subsequence__B_4__last__assume o4 
  o3 lengths1))

;; H
  (assert (dynamic_invariant3
  string_utilities__longest_common_subsequence__B_4__last__assume true false
  true true))

;; H
  (assert
  (= string_utilities__longest_common_subsequence__B_4__last__assume 
  (ite (and (dynamic_property2 first2 last3 o4) (dynamic_property3 first3
       last4 o3))
  (to_rep2 (get lengths1 o4 o3)) 0)))

;; Assume
  (assert
  (= string_utilities__longest_common_subsequence__B_4__last__assume 
  last5))

;; Assume
  (assert (dynamic_invariant last5 true false true true))

;; Assume
  (assert (default_initial_assumption
  (of_array result__ (to_rep1 result____first) (to_rep1 result____last))
  false))

;; Assume
  (assert
  (and (dynamic_property 1 last5 (to_rep1 result____first)
  (to_rep1 result____last))
  (and (= (to_rep1 result____first) 1) (= (to_rep1 result____last) last5))))

(declare-const temp___352 Int)

;; Ensures
  (assert (= (to_rep1 result____last) temp___352))

(define-fun o5 () Int last9)

(define-fun o6 () Int 1)

;; Ensures
  (assert (dynamic_property7 o6 o5 temp___352))

(declare-const rx Int)

;; H
  (assert (= rx temp___352))

;; Assume
  (assert (dynamic_invariant6 rx true false true true))

(define-fun temp___353 () Int last3)

(define-fun o7 () Int last3)

(define-fun o8 () Int first2)

;; Ensures
  (assert (dynamic_property2 o8 o7 temp___353))

(declare-const x11 Int)

;; H
  (assert (= x11 temp___353))

;; Assume
  (assert (dynamic_invariant4 x11 true false true true))

(define-fun temp___354 () Int last4)

(define-fun o9 () Int last4)

(define-fun o10 () Int first3)

;; Ensures
  (assert (dynamic_property3 o10 o9 temp___354))

(declare-const x2 Int)

;; H
  (assert (= x2 temp___354))

;; Assume
  (assert (dynamic_invariant5 x2 true false true true))

(declare-const result__1 (Array Int character))

(declare-const rx1 Int)

(declare-const x12 Int)

(declare-const x21 Int)

;; Assume
  (assert
  (and
  (and (dynamic_invariant6 rx1 true true true true) (dynamic_invariant4 
  x12 true true true true)) (dynamic_invariant5 x21 true true true true)))

(declare-const o11 Int)

;; Ensures
  (assert (= (to_rep (select (to_array s2) x21)) o11))

(declare-const o12 Int)

;; Ensures
  (assert (= (to_rep (select (to_array s1) x12)) o12))

(declare-const spark__branch3 Bool)

;; H
  (assert (= spark__branch3 (ite (= o12 o11) true false)))

;; H
  (assert (= spark__branch3 true))

(declare-const o13 Int)

;; Ensures
  (assert (= (to_rep (select (to_array s1) x12)) o13))

(declare-const o14 character)

;; Ensures
  (assert (= (to_rep o14) o13))

(declare-const result__2 (Array Int character))

;; H
  (assert (= result__2 (store result__1 rx1 o14)))

(declare-const spark__branch4 Bool)

;; H
  (assert (= spark__branch4 (ite (= rx1 1) true false)))

;; H
  (assert (not (= spark__branch4 true)))

(define-fun temp___339 () Int (- rx1 1))

(define-fun o15 () Int last9)

(define-fun o16 () Int 1)

;; Ensures
  (assert (dynamic_property7 o16 o15 temp___339))

(define-fun o17 () Int (- x12 1))

(assert
;; defqtvc
 ;; File "string_utilities.ads", line 22, characters 0-0
  (not (in_range1 o17)))
(check-sat)

(exit)
