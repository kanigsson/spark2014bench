;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (positive positive) Bool)

(declare-const dummy2 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range3
                                    temp___expr_46)))

(define-fun dynamic_invariant2 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort index_number 0)

(declare-fun index_numberqtint (index_number) Int)

;; index_number'axiom
  (assert
  (forall ((i index_number))
  (and (<= 0 (index_numberqtint i)) (<= (index_numberqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (index_number index_number) Bool)

(declare-const dummy3 index_number)

(declare-datatypes ()
((index_number__ref
 (index_number__refqtmk (index_number__content index_number)))))
(define-fun index_number__ref_index_number__content__projection ((a index_number__ref)) index_number 
  (index_number__content a))

(declare-sort byte 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE5 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) (_ BitVec 8))

(declare-fun user_eq4 (byte byte) Bool)

(declare-const dummy4 byte)

(declare-datatypes () ((byte__ref (byte__refqtmk (byte__content byte)))))
(define-fun byte__ref_byte__content__projection ((a byte__ref)) byte 
  (byte__content a))

(declare-fun to_rep1 (byte) (_ BitVec 8))

(declare-fun of_rep1 ((_ BitVec 8)) byte)

;; inversion_axiom
  (assert
  (forall ((x byte)) (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int2 ((x byte)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x byte)) (! (uint_in_range (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int byte))))))
(declare-fun slide ((Array Int byte) Int Int) (Array Int byte))

;; slide_eq
  (assert
  (forall ((a (Array Int byte)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int byte)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int byte)) (a__first Int) (a__last Int)
  (b (Array Int byte)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_183 Int))
                           (=>
                           (and (<= a__first temp___idx_183)
                           (<= temp___idx_183 a__last))
                           (= (to_rep1 (select a temp___idx_183)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_183)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int byte)) (b (Array Int byte)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_183 Int))
  (=> (and (<= a__first temp___idx_183) (<= temp___idx_183 a__last))
  (= (to_rep1 (select a temp___idx_183)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_183)))))))))))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range4 low) (in_range4 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int byte))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int byte) (elts a))

(define-fun of_array ((a (Array Int byte)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq5 (us_t us_t) Bool)

(declare-const dummy5 us_t)

(declare-datatypes ()
((byte_array__ref (byte_array__refqtmk (byte_array__content us_t)))))
(define-fun byte_array__ref_byte_array__content__projection ((a byte_array__ref)) us_t 
  (byte_array__content a))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int3 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort lane_type 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE6 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) (_ BitVec 64))

(declare-fun user_eq6 (lane_type lane_type) Bool)

(declare-const dummy6 lane_type)

(declare-datatypes ()
((lane_type__ref (lane_type__refqtmk (lane_type__content lane_type)))))
(define-fun lane_type__ref_lane_type__content__projection ((a lane_type__ref)) lane_type 
  (lane_type__content a))

(declare-fun to_rep2 (lane_type) (_ BitVec 64))

(declare-fun of_rep2 ((_ BitVec 64)) lane_type)

;; inversion_axiom
  (assert
  (forall ((x lane_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep2 (of_rep2 x)) x) :pattern ((to_rep2 (of_rep2 x))) )))

(define-fun to_int4 ((x lane_type)) Int (bv2int (to_rep2 x)))

;; range_int_axiom
  (assert
  (forall ((x lane_type)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort map1 0)

(declare-datatypes () ((map__ref1 (map__refqtmk1 (map__content1 map1)))))
(declare-fun get (map1 (_ BitVec 8) (_ BitVec 8)) lane_type)

(declare-fun set (map1 (_ BitVec 8) (_ BitVec 8) lane_type) map1)

;; Select_eq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (forall ((a lane_type))
  (! (= (get (set m i j a) i j) a) :pattern ((set m i j a)) ))))))

;; Select_neq
  (assert
  (forall ((m map1))
  (forall ((i (_ BitVec 8)) (i2 (_ BitVec 8)))
  (forall ((j (_ BitVec 8)) (j2 (_ BitVec 8)))
  (forall ((a lane_type))
  (! (=> (not (and (= i i2) (= j j2)))
     (= (get (set m i j a) i2 j2) (get m i2 j2))) :pattern ((get
                                                            (set m i j a) i2
                                                            j2)) :pattern (
  (set m i j a) (get m i2 j2)) ))))))

(declare-fun slide1 (map1 (_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) map1)

;; slide_def
  (assert
  (forall ((a map1))
  (forall ((new_first (_ BitVec 8)) (old_first (_ BitVec 8)))
  (forall ((new_first_2 (_ BitVec 8)) (old_first_2 (_ BitVec 8)))
  (forall ((i (_ BitVec 8)))
  (forall ((j (_ BitVec 8)))
  (! (= (get (slide1 a old_first new_first old_first_2 new_first_2) i j) 
  (get a (bvsub i (bvsub new_first old_first))
  (bvsub j (bvsub new_first_2 old_first_2)))) :pattern ((get
                                                        (slide1 a old_first
                                                        new_first old_first_2
                                                        new_first_2) i j)) )))))))

(define-fun bool_eq2 ((a map1) (a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b map1)
  (b__first (_ BitVec 8)) (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8))
  (b__last_2 (_ BitVec 8))) Bool (ite (and
                                      (and
                                      (ite (bvule a__first a__last)
                                      (and (bvule b__first b__last)
                                      (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                      (bvugt b__first b__last))
                                      (ite (bvule a__first_2 a__last_2)
                                      (and (bvule b__first_2 b__last_2)
                                      (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
                                      (bvugt b__first_2 b__last_2)))
                                      (forall ((temp___idx_154 (_ BitVec 8))
                                      (temp___idx_155 (_ BitVec 8)))
                                      (=>
                                      (and
                                      (and (bvule a__first temp___idx_154)
                                      (bvule temp___idx_154 a__last))
                                      (and (bvule a__first_2 temp___idx_155)
                                      (bvule temp___idx_155 a__last_2)))
                                      (= (to_rep2
                                         (get a temp___idx_154
                                         temp___idx_155)) (to_rep2
                                                          (get b
                                                          (bvadd (bvsub b__first a__first) temp___idx_154)
                                                          (bvadd (bvsub b__first_2 a__first_2) temp___idx_155)))))))
                                 true false))

;; bool_eq_rev
  (assert
  (forall ((a map1) (b map1))
  (forall ((a__first (_ BitVec 8)) (a__last (_ BitVec 8))
  (a__first_2 (_ BitVec 8)) (a__last_2 (_ BitVec 8)) (b__first (_ BitVec 8))
  (b__last (_ BitVec 8)) (b__first_2 (_ BitVec 8)) (b__last_2 (_ BitVec 8)))
  (=>
  (= (bool_eq2 b b__first b__last b__first_2 b__last_2 a a__first a__last
     a__first_2 a__last_2) true)
  (and
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (ite (bvule a__first_2 a__last_2)
  (and (bvule b__first_2 b__last_2)
  (= (bvsub a__last_2 a__first_2) (bvsub b__last_2 b__first_2)))
  (bvugt b__first_2 b__last_2)))
  (forall ((temp___idx_154 (_ BitVec 8)) (temp___idx_155 (_ BitVec 8)))
  (=>
  (and (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (and (bvule a__first_2 temp___idx_155) (bvule temp___idx_155 a__last_2)))
  (= (to_rep2 (get a temp___idx_154 temp___idx_155)) (to_rep2
                                                     (get b
                                                     (bvadd (bvsub b__first a__first) temp___idx_154)
                                                     (bvadd (bvsub b__first_2 a__first_2) temp___idx_155)))))))))))

(declare-const dummy7 map1)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq7 (map1 map1) Bool)

(declare-sort states 0)

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq8 (states states) Bool)

(declare-const dummy8 states)

(declare-datatypes ()
((states__ref (states__refqtmk (states__content states)))))
(define-fun states__ref_states__content__projection ((a states__ref)) states 
  (states__content a))

(declare-fun to_rep3 (states) Int)

(declare-fun of_rep3 (Int) states)

;; inversion_axiom
  (assert
  (forall ((x states))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x states)) (! (in_range5 (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-sort byte_absorption_number 0)

(declare-fun byte_absorption_numberqtint (byte_absorption_number) Int)

;; byte_absorption_number'axiom
  (assert
  (forall ((i byte_absorption_number))
  (and (<= 0 (byte_absorption_numberqtint i))
  (<= (byte_absorption_numberqtint i) 199))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (byte_absorption_number byte_absorption_number) Bool)

(declare-const dummy9 byte_absorption_number)

(declare-datatypes ()
((byte_absorption_number__ref
 (byte_absorption_number__refqtmk
 (byte_absorption_number__content byte_absorption_number)))))
(define-fun byte_absorption_number__ref_byte_absorption_number__content__projection ((a byte_absorption_number__ref)) byte_absorption_number 
  (byte_absorption_number__content a))

(define-fun to_rep4 ((x byte_absorption_number)) Int (byte_absorption_numberqtint
                                                     x))

(declare-fun of_rep4 (Int) byte_absorption_number)

;; inversion_axiom
  (assert
  (forall ((x byte_absorption_number))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x byte_absorption_number)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-const dummy10 (Array Int byte))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq10 ((Array Int byte) (Array Int byte)) Bool)

(declare-sort bit_absorption_number 0)

(declare-fun bit_absorption_numberqtint (bit_absorption_number) Int)

;; bit_absorption_number'axiom
  (assert
  (forall ((i bit_absorption_number))
  (and (<= 0 (bit_absorption_numberqtint i))
  (<= (bit_absorption_numberqtint i) 1599))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 1599)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq11 (bit_absorption_number bit_absorption_number) Bool)

(declare-const dummy11 bit_absorption_number)

(declare-datatypes ()
((bit_absorption_number__ref
 (bit_absorption_number__refqtmk
 (bit_absorption_number__content bit_absorption_number)))))
(define-fun bit_absorption_number__ref_bit_absorption_number__content__projection ((a bit_absorption_number__ref)) bit_absorption_number 
  (bit_absorption_number__content a))

(define-fun to_rep5 ((x bit_absorption_number)) Int (bit_absorption_numberqtint
                                                    x))

(declare-fun of_rep5 (Int) bit_absorption_number)

;; inversion_axiom
  (assert
  (forall ((x bit_absorption_number))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert
  (forall ((x bit_absorption_number)) (! (in_range7
  (to_rep5 x)) :pattern ((to_rep5 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep5 (of_rep5 x)) x)) :pattern ((to_rep5
                                                              (of_rep5 x))) )))

(declare-sort rate_number 0)

(declare-fun rate_numberqtint (rate_number) Int)

;; rate_number'axiom
  (assert
  (forall ((i rate_number))
  (and (<= 1 (rate_numberqtint i)) (<= (rate_numberqtint i) 199))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 199)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (rate_number rate_number) Bool)

(declare-const dummy12 rate_number)

(declare-datatypes ()
((rate_number__ref (rate_number__refqtmk (rate_number__content rate_number)))))
(define-fun rate_number__ref_rate_number__content__projection ((a rate_number__ref)) rate_number 
  (rate_number__content a))

(define-fun to_rep6 ((x rate_number)) Int (rate_numberqtint x))

(declare-fun of_rep6 (Int) rate_number)

;; inversion_axiom
  (assert
  (forall ((x rate_number))
  (! (= (of_rep6 (to_rep6 x)) x) :pattern ((to_rep6 x)) )))

;; range_axiom
  (assert
  (forall ((x rate_number)) (! (in_range8
  (to_rep6 x)) :pattern ((to_rep6 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range8 x) (= (to_rep6 (of_rep6 x)) x)) :pattern ((to_rep6
                                                              (of_rep6 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__ada___keccak__keccak_1600__sponge__context__state map1)(rec__ada___keccak__keccak_1600__sponge__context__block (Array Int byte))(rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed bit_absorption_number)(rec__ada___keccak__keccak_1600__sponge__context__bytes_squeezed byte_absorption_number)(rec__ada___keccak__keccak_1600__sponge__context__rate rate_number)(rec__ada___keccak__keccak_1600__sponge__context__curr_state states)))))
(define-fun us_split_fields_rec__ada___keccak__keccak_1600__sponge__context__state__projection ((a us_split_fields)) map1 
  (rec__ada___keccak__keccak_1600__sponge__context__state a))

(define-fun us_split_fields_rec__ada___keccak__keccak_1600__sponge__context__block__projection ((a us_split_fields)) (Array Int byte) 
  (rec__ada___keccak__keccak_1600__sponge__context__block a))

(define-fun us_split_fields_rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed__projection ((a us_split_fields)) bit_absorption_number 
  (rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed a))

(define-fun us_split_fields_rec__ada___keccak__keccak_1600__sponge__context__bytes_squeezed__projection ((a us_split_fields)) byte_absorption_number 
  (rec__ada___keccak__keccak_1600__sponge__context__bytes_squeezed a))

(define-fun us_split_fields_rec__ada___keccak__keccak_1600__sponge__context__rate__projection ((a us_split_fields)) rate_number 
  (rec__ada___keccak__keccak_1600__sponge__context__rate a))

(define-fun us_split_fields_rec__ada___keccak__keccak_1600__sponge__context__curr_state__projection ((a us_split_fields)) states 
  (rec__ada___keccak__keccak_1600__sponge__context__curr_state a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (bool_eq2
                           (rec__ada___keccak__keccak_1600__sponge__context__state
                           (us_split_fields1 a)) #x00 #x04 #x00 #x04
                           (rec__ada___keccak__keccak_1600__sponge__context__state
                           (us_split_fields1 b)) #x00 #x04 #x00 #x04) true)
                        (= (bool_eq
                           (rec__ada___keccak__keccak_1600__sponge__context__block
                           (us_split_fields1 a)) 0 199
                           (rec__ada___keccak__keccak_1600__sponge__context__block
                           (us_split_fields1 b)) 0 199) true))
                        (and
                        (and
                        (= (to_rep5
                           (rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed
                           (us_split_fields1 a))) (to_rep5
                                                  (rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed
                                                  (us_split_fields1 b))))
                        (= (to_rep4
                           (rec__ada___keccak__keccak_1600__sponge__context__bytes_squeezed
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__ada___keccak__keccak_1600__sponge__context__bytes_squeezed
                                                  (us_split_fields1 b)))))
                        (and
                        (= (to_rep6
                           (rec__ada___keccak__keccak_1600__sponge__context__rate
                           (us_split_fields1 a))) (to_rep6
                                                  (rec__ada___keccak__keccak_1600__sponge__context__rate
                                                  (us_split_fields1 b))))
                        (= (to_rep3
                           (rec__ada___keccak__keccak_1600__sponge__context__curr_state
                           (us_split_fields1 a))) (to_rep3
                                                  (rec__ada___keccak__keccak_1600__sponge__context__curr_state
                                                  (us_split_fields1 b)))))))
                   true false))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-const ada___keccak__keccak_1600__sponge__context__state__first__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__state__last__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__state__position Int)

;; ada___keccak__keccak_1600__sponge__context__state__first__bit_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__state__first__bit))

;; ada___keccak__keccak_1600__sponge__context__state__last__bit_axiom
  (assert
  (< ada___keccak__keccak_1600__sponge__context__state__first__bit ada___keccak__keccak_1600__sponge__context__state__last__bit))

;; ada___keccak__keccak_1600__sponge__context__state__position_axiom
  (assert (<= 0 ada___keccak__keccak_1600__sponge__context__state__position))

(declare-const ada___keccak__keccak_1600__sponge__context__block__first__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__block__last__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__block__position Int)

;; ada___keccak__keccak_1600__sponge__context__block__first__bit_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__block__first__bit))

;; ada___keccak__keccak_1600__sponge__context__block__last__bit_axiom
  (assert
  (< ada___keccak__keccak_1600__sponge__context__block__first__bit ada___keccak__keccak_1600__sponge__context__block__last__bit))

;; ada___keccak__keccak_1600__sponge__context__block__position_axiom
  (assert (<= 0 ada___keccak__keccak_1600__sponge__context__block__position))

(declare-const ada___keccak__keccak_1600__sponge__context__bits_absorbed__first__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__bits_absorbed__last__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__bits_absorbed__position Int)

;; ada___keccak__keccak_1600__sponge__context__bits_absorbed__first__bit_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__bits_absorbed__first__bit))

;; ada___keccak__keccak_1600__sponge__context__bits_absorbed__last__bit_axiom
  (assert
  (< ada___keccak__keccak_1600__sponge__context__bits_absorbed__first__bit 
  ada___keccak__keccak_1600__sponge__context__bits_absorbed__last__bit))

;; ada___keccak__keccak_1600__sponge__context__bits_absorbed__position_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__bits_absorbed__position))

(declare-const ada___keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__bytes_squeezed__position Int)

;; ada___keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit))

;; ada___keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit_axiom
  (assert
  (< ada___keccak__keccak_1600__sponge__context__bytes_squeezed__first__bit 
  ada___keccak__keccak_1600__sponge__context__bytes_squeezed__last__bit))

;; ada___keccak__keccak_1600__sponge__context__bytes_squeezed__position_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__bytes_squeezed__position))

(declare-const ada___keccak__keccak_1600__sponge__context__rate__first__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__rate__last__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__rate__position Int)

;; ada___keccak__keccak_1600__sponge__context__rate__first__bit_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__rate__first__bit))

;; ada___keccak__keccak_1600__sponge__context__rate__last__bit_axiom
  (assert
  (< ada___keccak__keccak_1600__sponge__context__rate__first__bit ada___keccak__keccak_1600__sponge__context__rate__last__bit))

;; ada___keccak__keccak_1600__sponge__context__rate__position_axiom
  (assert (<= 0 ada___keccak__keccak_1600__sponge__context__rate__position))

(declare-const ada___keccak__keccak_1600__sponge__context__curr_state__first__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__curr_state__last__bit Int)

(declare-const ada___keccak__keccak_1600__sponge__context__curr_state__position Int)

;; ada___keccak__keccak_1600__sponge__context__curr_state__first__bit_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__curr_state__first__bit))

;; ada___keccak__keccak_1600__sponge__context__curr_state__last__bit_axiom
  (assert
  (< ada___keccak__keccak_1600__sponge__context__curr_state__first__bit 
  ada___keccak__keccak_1600__sponge__context__curr_state__last__bit))

;; ada___keccak__keccak_1600__sponge__context__curr_state__position_axiom
  (assert
  (<= 0 ada___keccak__keccak_1600__sponge__context__curr_state__position))

(declare-fun user_eq13 (us_rep us_rep) Bool)

(declare-const dummy13 us_rep)

(declare-datatypes ()
((context__ref (context__refqtmk (context__content us_rep)))))
(define-fun context__ref_context__content__projection ((a context__ref)) us_rep 
  (context__content a))

(declare-fun state_of (us_rep) Int)

(declare-fun state_of__function_guard (Int us_rep) Bool)

(define-fun dynamic_invariant3 ((temp___expr_329 Int)
  (temp___is_init_325 Bool) (temp___skip_constant_326 Bool)
  (temp___do_toplevel_327 Bool)
  (temp___do_typ_inv_328 Bool)) Bool (=>
                                     (or (= temp___is_init_325 true)
                                     (<= 0 1)) (in_range5 temp___expr_329)))

;; state_of__post_axiom
  (assert
  (forall ((ctx us_rep))
  (! (let ((result (state_of ctx)))
     (=> (state_of__function_guard result ctx) (dynamic_invariant3 result
     true false true true))) :pattern ((state_of ctx)) )))

;; state_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (state_of ctx) (to_rep3
                       (rec__ada___keccak__keccak_1600__sponge__context__curr_state
                       (us_split_fields1 ctx)))) :pattern ((state_of ctx)) )))

(declare-fun rate_of (us_rep) Int)

(declare-fun rate_of__function_guard (Int us_rep) Bool)

;; rate_of__post_axiom
  (assert
  (forall ((ctx us_rep))
  (! (let ((result (rate_of ctx)))
     (=> (rate_of__function_guard result ctx)
     (and (< result 1600) (dynamic_invariant1 result true false true true)))) :pattern (
  (rate_of ctx)) )))

;; rate_of__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (rate_of ctx) (* (to_rep6
                         (rec__ada___keccak__keccak_1600__sponge__context__rate
                         (us_split_fields1 ctx))) 8)) :pattern ((rate_of ctx)) )))

(declare-fun in_queue_bit_length (us_rep) Int)

(declare-fun in_queue_bit_length__function_guard (Int us_rep) Bool)

;; in_queue_bit_length__post_axiom
  (assert
  (forall ((ctx us_rep))
  (! (let ((result (in_queue_bit_length ctx)))
     (=> (in_queue_bit_length__function_guard result ctx)
     (and (< result 1600) (dynamic_invariant result true false true true)))) :pattern (
  (in_queue_bit_length ctx)) )))

;; in_queue_bit_length__def_axiom
  (assert
  (forall ((ctx us_rep))
  (! (= (in_queue_bit_length ctx) (to_rep5
                                  (rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed
                                  (us_split_fields1 ctx)))) :pattern (
  (in_queue_bit_length ctx)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const message us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const bit_length Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const suffix (_ BitVec 8))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const suffix_len Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r88s Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const r91s Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant4 ((temp___expr_259 Int)
  (temp___is_init_255 Bool) (temp___skip_constant_256 Bool)
  (temp___do_toplevel_257 Bool)
  (temp___do_typ_inv_258 Bool)) Bool (=>
                                     (or (= temp___is_init_255 true)
                                     (<= 0 2147483647)) (in_range4
                                     temp___expr_259)))

(define-fun dynamic_invariant5 ((temp___expr_273 (_ BitVec 8))
  (temp___is_init_269 Bool) (temp___skip_constant_270 Bool)
  (temp___do_toplevel_271 Bool) (temp___do_typ_inv_272 Bool)) Bool true)

(define-fun dynamic_invariant6 ((temp___expr_280 us_t)
  (temp___is_init_276 Bool) (temp___skip_constant_277 Bool)
  (temp___do_toplevel_278 Bool)
  (temp___do_typ_inv_279 Bool)) Bool (=>
                                     (not (= temp___skip_constant_277 true))
                                     (dynamic_property 0 2147483647
                                     (first1 temp___expr_280)
                                     (last1 temp___expr_280))))

(declare-sort tTsuffix_arraySP1 0)

(declare-fun tTsuffix_arraySP1qtint (tTsuffix_arraySP1) Int)

;; tTsuffix_arraySP1'axiom
  (assert
  (forall ((i tTsuffix_arraySP1))
  (and (<= 0 (tTsuffix_arraySP1qtint i)) (<= (tTsuffix_arraySP1qtint i) 0))))

(define-fun in_range9 ((x Int)) Bool (and (<= 0 x) (<= x 0)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq14 (tTsuffix_arraySP1 tTsuffix_arraySP1) Bool)

(declare-const dummy14 tTsuffix_arraySP1)

(declare-datatypes ()
((tTsuffix_arraySP1__ref
 (tTsuffix_arraySP1__refqtmk (tTsuffix_arraySP1__content tTsuffix_arraySP1)))))
(define-fun tTsuffix_arraySP1__ref_tTsuffix_arraySP1__content__projection ((a tTsuffix_arraySP1__ref)) tTsuffix_arraySP1 
  (tTsuffix_arraySP1__content a))

(declare-datatypes () ((t90s__ref (t90s__refqtmk (t90s__content us_t)))))
(define-fun t90s__ref_t90s__content__projection ((a t90s__ref)) us_t 
  (t90s__content a))

(declare-datatypes () ((t93s__ref (t93s__refqtmk (t93s__content us_t)))))
(define-fun t93s__ref_t93s__content__projection ((a t93s__ref)) us_t 
  (t93s__content a))

(declare-fun ada___keccak__keccak_1600__sponge__absorb_with_suffix__suffix_array__aggregate_def ((_ BitVec 8)) (Array Int byte))

(define-fun dynamic_invariant7 ((temp___expr_360 Int)
  (temp___is_init_356 Bool) (temp___skip_constant_357 Bool)
  (temp___do_toplevel_358 Bool)
  (temp___do_typ_inv_359 Bool)) Bool (=>
                                     (or (= temp___is_init_356 true)
                                     (<= 1 199)) (in_range8 temp___expr_360)))

(define-fun dynamic_invariant8 ((temp___expr_336 Int)
  (temp___is_init_332 Bool) (temp___skip_constant_333 Bool)
  (temp___do_toplevel_334 Bool)
  (temp___do_typ_inv_335 Bool)) Bool (=>
                                     (or (= temp___is_init_332 true)
                                     (<= 0 199)) (in_range6 temp___expr_336)))

(define-fun dynamic_invariant9 ((temp___expr_353 Int)
  (temp___is_init_349 Bool) (temp___skip_constant_350 Bool)
  (temp___do_toplevel_351 Bool)
  (temp___do_typ_inv_352 Bool)) Bool (=>
                                     (or (= temp___is_init_349 true)
                                     (<= 0 1599)) (in_range7
                                     temp___expr_353)))

;; def_axiom
  (assert
  (forall ((temp___936 (_ BitVec 8)))
  (=> (dynamic_invariant5 temp___936 true true true true)
  (= (to_rep1
     (select (ada___keccak__keccak_1600__sponge__absorb_with_suffix__suffix_array__aggregate_def
             temp___936) 0)) temp___936))))

(declare-const ctx__split_fields us_split_fields)

(declare-const message_last Int)

(declare-const ctx__split_fields1 us_split_fields)

;; H
  (assert (= ctx__split_fields1 ctx__split_fields))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant6 message true false true true))

;; Assume
  (assert (dynamic_invariant bit_length true false true true))

;; Assume
  (assert (dynamic_invariant5 suffix true false true true))

;; Assume
  (assert (dynamic_invariant suffix_len true false true true))

;; H
  (assert
  (forall ((ctx__split_fields2 us_split_fields)) (state_of__function_guard
  (state_of (us_repqtmk ctx__split_fields2))
  (us_repqtmk ctx__split_fields2))))

;; H
  (assert
  (forall ((ctx__split_fields2 us_split_fields))
  (in_queue_bit_length__function_guard
  (in_queue_bit_length (us_repqtmk ctx__split_fields2))
  (us_repqtmk ctx__split_fields2))))

;; H
  (assert
  (forall ((ctx__split_fields2 us_split_fields))
  (in_queue_bit_length__function_guard
  (in_queue_bit_length (us_repqtmk ctx__split_fields2))
  (us_repqtmk ctx__split_fields2))))

;; H
  (assert
  (forall ((ctx__split_fields2 us_split_fields)) (rate_of__function_guard
  (rate_of (us_repqtmk ctx__split_fields2)) (us_repqtmk ctx__split_fields2))))

;; Assume
  (assert
  (and
  (and
  (and
  (and
  (and (= (state_of (us_repqtmk ctx__split_fields)) 0) (<= suffix_len 8))
  (<= bit_length 2147483639))
  (<= (div1 (+ bit_length 7) 8) (length message)))
  (= (mod2 (in_queue_bit_length (us_repqtmk ctx__split_fields)) 8) 0))
  (< (in_queue_bit_length (us_repqtmk ctx__split_fields)) (rate_of
                                                          (us_repqtmk
                                                          ctx__split_fields)))))

(define-fun usf () us_rep (us_repqtmk ctx__split_fields))

(declare-const suffix_array (Array Int byte))

;; H
  (assert
  (= suffix_array (ada___keccak__keccak_1600__sponge__absorb_with_suffix__suffix_array__aggregate_def
                  suffix)))

;; Assume
  (assert true)

(define-fun o () Int (+ bit_length 7))

;; Ensures
  (assert (in_range1 o))

(define-fun o1 () Int (div1 o 8))

;; Ensures
  (assert (in_range2 o1))

(declare-const message_byte_length Int)

;; H
  (assert (= message_byte_length o1))

;; Assume
  (assert (dynamic_invariant message_byte_length true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant4 message_last false false true true))

(define-fun o2 () us_rep (us_repqtmk ctx__split_fields))

(define-fun o3 () Int (rate_of o2))

;; H
  (assert (rate_of__function_guard o3 o2))

;; H
  (assert (dynamic_invariant1 o3 true false true true))

;; H
  (assert
  (= o3 (* (to_rep6
           (rec__ada___keccak__keccak_1600__sponge__context__rate
           ctx__split_fields)) 8)))

;; H
  (assert (< o3 1600))

(declare-const initial_rate Int)

;; H
  (assert (= initial_rate o3))

;; Assume
  (assert (dynamic_invariant1 initial_rate true false true true))

(declare-const spark__branch Bool)

;; H
  (assert
  (= spark__branch (and (ite (= bit_length 0) true false) (ite (< 0 suffix_len)
                                                          true false))))

;; H
  (assert (not (= spark__branch true)))

(declare-const spark__branch1 Bool)

;; H
  (assert (= spark__branch1 (ite (= suffix_len 0) true false)))

;; H
  (assert (not (= spark__branch1 true)))

(declare-const spark__branch2 Bool)

;; H
  (assert (= spark__branch2 (ite (= (mod2 bit_length 8) 0) true false)))

;; H
  (assert (not (= spark__branch2 true)))

(define-fun o4 () Int (+ bit_length 7))

;; Ensures
  (assert (in_range1 o4))

(define-fun o5 () Int (+ (first1 message) (- (div1 o4 8) 1)))

;; Ensures
  (assert (in_range1 o5))

;; Ensures
  (assert (in_range4 o5))

(declare-const message_last1 Int)

;; H
  (assert (= message_last1 o5))

;; Assert
  (assert
  (and (<= (first1 message) message_last1)
  (<= message_last1 (last1 message))))

(define-fun o6 () Int (+ (mod2 bit_length 8) suffix_len))

;; Ensures
  (assert (in_range1 o6))

(declare-const spark__branch3 Bool)

;; H
  (assert (= spark__branch3 (ite (<= o6 8) true false)))

;; H
  (assert (not (= spark__branch3 true)))

(declare-const ctx__split_fields2 us_split_fields)

(declare-const suffix_array1 (Array Int byte))

;; H
  (assert
  (forall ((ctx__split_fields3 us_split_fields)) (state_of__function_guard
  (state_of (us_repqtmk ctx__split_fields3))
  (us_repqtmk ctx__split_fields3))))

;; H
  (assert
  (forall ((ctx__split_fields3 us_split_fields))
  (in_queue_bit_length__function_guard
  (in_queue_bit_length (us_repqtmk ctx__split_fields3))
  (us_repqtmk ctx__split_fields3))))

;; H
  (assert
  (forall ((ctx__split_fields3 us_split_fields))
  (in_queue_bit_length__function_guard
  (in_queue_bit_length (us_repqtmk ctx__split_fields3))
  (us_repqtmk ctx__split_fields3))))

;; H
  (assert
  (forall ((ctx__split_fields3 us_split_fields)) (rate_of__function_guard
  (rate_of (us_repqtmk ctx__split_fields3)) (us_repqtmk ctx__split_fields3))))

;; H
  (assert
  (forall ((ctx__split_fields3 us_split_fields)) (rate_of__function_guard
  (rate_of (us_repqtmk ctx__split_fields3)) (us_repqtmk ctx__split_fields3))))

;; Ensures
  (assert
  (and
  (and
  (and (= (state_of (us_repqtmk ctx__split_fields2)) 0)
  (= (mod2 (in_queue_bit_length (us_repqtmk ctx__split_fields2)) 8) 0))
  (< (in_queue_bit_length (us_repqtmk ctx__split_fields2)) (rate_of
                                                           (us_repqtmk
                                                           ctx__split_fields2))))
  (= (rate_of (us_repqtmk ctx__split_fields2)) initial_rate)))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 initial_rate false true true true))

(declare-const o7 (_ BitVec 8))

;; H
  (assert
  (ite (< (- 8 (mod2 bit_length 8)) 8)
  (= o7 (bvlshr suffix ((_ int2bv 8) (- 8 (mod2 bit_length 8)))))
  (= o7 #x00)))

(declare-const o8 byte)

;; Ensures
  (assert (= (to_rep1 o8) o7))

(declare-const suffix_array2 (Array Int byte))

;; H
  (assert (= suffix_array2 (store suffix_array1 0 o8)))

(define-fun o9 () Int (+ bit_length suffix_len))

;; Ensures
  (assert (in_range1 o9))

(define-fun o10 () Int (mod2 o9 8))

(declare-const ctx__split_fields3 us_split_fields)

;; H
  (assert
  (forall ((ctx__split_fields4 us_split_fields)) (state_of__function_guard
  (state_of (us_repqtmk ctx__split_fields4))
  (us_repqtmk ctx__split_fields4))))

;; H
  (assert
  (forall ((ctx__split_fields4 us_split_fields)) (rate_of__function_guard
  (rate_of (us_repqtmk ctx__split_fields4)) (us_repqtmk ctx__split_fields4))))

;; H
  (assert
  (forall ((ctx__split_fields4 us_split_fields)) (rate_of__function_guard
  (rate_of (us_repqtmk ctx__split_fields4)) (us_repqtmk ctx__split_fields4))))

;; H
  (assert
  (forall ((ctx__split_fields4 us_split_fields))
  (in_queue_bit_length__function_guard
  (in_queue_bit_length (us_repqtmk ctx__split_fields4))
  (us_repqtmk ctx__split_fields4))))

;; H
  (assert
  (forall ((ctx__split_fields4 us_split_fields))
  (in_queue_bit_length__function_guard
  (in_queue_bit_length (us_repqtmk ctx__split_fields4))
  (us_repqtmk ctx__split_fields4))))

;; H
  (assert
  (forall ((ctx__split_fields4 us_split_fields)) (rate_of__function_guard
  (rate_of (us_repqtmk ctx__split_fields4)) (us_repqtmk ctx__split_fields4))))

;; H
  (assert (= (state_of (us_repqtmk ctx__split_fields3)) 0))

;; H
  (assert
  (= (rate_of (us_repqtmk ctx__split_fields3)) (rate_of
                                               (us_repqtmk
                                               ctx__split_fields2))))

;; H
  (assert
  (= (mod2 (in_queue_bit_length (us_repqtmk ctx__split_fields3)) 8) (mod2 
                                                                    o10 8)))

;; H
  (assert
  (< (in_queue_bit_length (us_repqtmk ctx__split_fields3)) (rate_of
                                                           (us_repqtmk
                                                           ctx__split_fields3))))

;; H
  (assert true)

(define-fun o11 () us_rep (us_repqtmk ctx__split_fields3))

(define-fun o12 () Int (rate_of o11))

;; H
  (assert (rate_of__function_guard o12 o11))

;; H
  (assert (dynamic_invariant1 o12 true false true true))

;; H
  (assert
  (= o12 (* (to_rep6
            (rec__ada___keccak__keccak_1600__sponge__context__rate
            ctx__split_fields3)) 8)))

;; H
  (assert (< o12 1600))

(define-fun o13 () us_rep (us_repqtmk ctx__split_fields3))

(define-fun o14 () Int (rate_of o13))

;; H
  (assert (rate_of__function_guard o14 o13))

;; H
  (assert (dynamic_invariant1 o14 true false true true))

;; H
  (assert
  (= o14 (* (to_rep6
            (rec__ada___keccak__keccak_1600__sponge__context__rate
            ctx__split_fields3)) 8)))

;; H
  (assert (< o14 1600))

(define-fun o15 () us_rep (us_repqtmk ctx__split_fields3))

(define-fun o16 () Int (in_queue_bit_length o15))

;; H
  (assert (in_queue_bit_length__function_guard o16 o15))

;; H
  (assert (dynamic_invariant o16 true false true true))

;; H
  (assert
  (= o16 (to_rep5
         (rec__ada___keccak__keccak_1600__sponge__context__bits_absorbed
         ctx__split_fields3))))

;; H
  (assert (< o16 1600))

(define-fun o17 () Int (+ bit_length suffix_len))

(assert
;; defqtvc
 ;; File "keccak-sponge.ads", line 175, characters 0-0
  (not (in_range1 o17)))
(check-sat)
