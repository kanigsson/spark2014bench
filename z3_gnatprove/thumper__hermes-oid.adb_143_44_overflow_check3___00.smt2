(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (natural natural) Bool)

(declare-const dummy1 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range2
                                    temp___expr_39)))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort root_component_type 0)

(declare-fun root_component_typeqtint (root_component_type) Int)

;; root_component_type'axiom
  (assert
  (forall ((i root_component_type))
  (and (<= 0 (root_component_typeqtint i))
  (<= (root_component_typeqtint i) 2))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (root_component_type root_component_type) Bool)

(declare-const dummy2 root_component_type)

(declare-datatypes ()
((root_component_type__ref
 (root_component_type__refqtmk
 (root_component_type__content root_component_type)))))
(define-fun root_component_type__ref_root_component_type__content__projection ((a root_component_type__ref)) root_component_type 
  (root_component_type__content a))

(define-fun to_rep1 ((x root_component_type)) Int (root_component_typeqtint
                                                  x))

(declare-fun of_rep1 (Int) root_component_type)

;; inversion_axiom
  (assert
  (forall ((x root_component_type))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x root_component_type)) (! (in_range3
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort second_level_component_type 0)

(declare-fun second_level_component_typeqtint (second_level_component_type) Int)

;; second_level_component_type'axiom
  (assert
  (forall ((i second_level_component_type))
  (and (<= 0 (second_level_component_typeqtint i))
  (<= (second_level_component_typeqtint i) 175))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 175)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq3 (second_level_component_type
  second_level_component_type) Bool)

(declare-const dummy3 second_level_component_type)

(declare-datatypes ()
((second_level_component_type__ref
 (second_level_component_type__refqtmk
 (second_level_component_type__content second_level_component_type)))))
(define-fun second_level_component_type__ref_second_level_component_type__content__projection ((a second_level_component_type__ref)) second_level_component_type 
  (second_level_component_type__content a))

(define-fun to_rep2 ((x second_level_component_type)) Int (second_level_component_typeqtint
                                                          x))

(declare-fun of_rep2 (Int) second_level_component_type)

;; inversion_axiom
  (assert
  (forall ((x second_level_component_type))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x second_level_component_type)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-sort component_type 0)

(declare-fun component_typeqtint (component_type) Int)

;; component_type'axiom
  (assert
  (forall ((i component_type))
  (and (<= 0 (component_typeqtint i))
  (<= (component_typeqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq4 (component_type component_type) Bool)

(declare-const dummy4 component_type)

(declare-datatypes ()
((component_type__ref
 (component_type__refqtmk (component_type__content component_type)))))
(define-fun component_type__ref_component_type__content__projection ((a component_type__ref)) component_type 
  (component_type__content a))

(define-fun to_rep3 ((x component_type)) Int (component_typeqtint x))

(declare-fun of_rep3 (Int) component_type)

;; inversion_axiom
  (assert
  (forall ((x component_type))
  (! (= (of_rep3 (to_rep3 x)) x) :pattern ((to_rep3 x)) )))

;; range_axiom
  (assert
  (forall ((x component_type)) (! (in_range5
  (to_rep3 x)) :pattern ((to_rep3 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range5 x) (= (to_rep3 (of_rep3 x)) x)) :pattern ((to_rep3
                                                              (of_rep3 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int component_type))))))
(declare-fun slide ((Array Int component_type) Int
  Int) (Array Int component_type))

;; slide_eq
  (assert
  (forall ((a (Array Int component_type)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int component_type)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int component_type)) (a__first Int)
  (a__last Int) (b (Array Int component_type)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep3 (select a temp___idx_154)) (to_rep3
                                                                  (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int component_type)) (b (Array Int component_type)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep3 (select a temp___idx_154)) (to_rep3
                                         (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const dummy5 (Array Int component_type))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq5 ((Array Int component_type)
  (Array Int component_type)) Bool)

(declare-sort other_count_type 0)

(declare-fun other_count_typeqtint (other_count_type) Int)

;; other_count_type'axiom
  (assert
  (forall ((i other_count_type))
  (and (<= 0 (other_count_typeqtint i)) (<= (other_count_typeqtint i) 13))))

(define-fun in_range6 ((x Int)) Bool (and (<= 0 x) (<= x 13)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq6 (other_count_type other_count_type) Bool)

(declare-const dummy6 other_count_type)

(declare-datatypes ()
((other_count_type__ref
 (other_count_type__refqtmk (other_count_type__content other_count_type)))))
(define-fun other_count_type__ref_other_count_type__content__projection ((a other_count_type__ref)) other_count_type 
  (other_count_type__content a))

(define-fun to_rep4 ((x other_count_type)) Int (other_count_typeqtint x))

(declare-fun of_rep4 (Int) other_count_type)

;; inversion_axiom
  (assert
  (forall ((x other_count_type))
  (! (= (of_rep4 (to_rep4 x)) x) :pattern ((to_rep4 x)) )))

;; range_axiom
  (assert
  (forall ((x other_count_type)) (! (in_range6
  (to_rep4 x)) :pattern ((to_rep4 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range6 x) (= (to_rep4 (of_rep4 x)) x)) :pattern ((to_rep4
                                                              (of_rep4 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__ada___hermes__oid__object_identifier__root_component root_component_type)(rec__ada___hermes__oid__object_identifier__second_level_component second_level_component_type)(rec__ada___hermes__oid__object_identifier__other_components (Array Int component_type))(rec__ada___hermes__oid__object_identifier__other_component_count other_count_type)))))
(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__root_component__projection ((a us_split_fields)) root_component_type 
  (rec__ada___hermes__oid__object_identifier__root_component a))

(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__second_level_component__projection ((a us_split_fields)) second_level_component_type 
  (rec__ada___hermes__oid__object_identifier__second_level_component a))

(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__other_components__projection ((a us_split_fields)) (Array Int component_type) 
  (rec__ada___hermes__oid__object_identifier__other_components a))

(define-fun us_split_fields_rec__ada___hermes__oid__object_identifier__other_component_count__projection ((a us_split_fields)) other_count_type 
  (rec__ada___hermes__oid__object_identifier__other_component_count a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__ada___hermes__oid__object_identifier__root_component
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__ada___hermes__oid__object_identifier__root_component
                                                  (us_split_fields1 b))))
                        (= (to_rep2
                           (rec__ada___hermes__oid__object_identifier__second_level_component
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__ada___hermes__oid__object_identifier__second_level_component
                                                  (us_split_fields1 b)))))
                        (and
                        (= (bool_eq
                           (rec__ada___hermes__oid__object_identifier__other_components
                           (us_split_fields1 a)) 1 13
                           (rec__ada___hermes__oid__object_identifier__other_components
                           (us_split_fields1 b)) 1 13) true)
                        (= (to_rep4
                           (rec__ada___hermes__oid__object_identifier__other_component_count
                           (us_split_fields1 a))) (to_rep4
                                                  (rec__ada___hermes__oid__object_identifier__other_component_count
                                                  (us_split_fields1 b))))))
                   true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const ada___hermes__oid__object_identifier__root_component__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__root_component__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__root_component__position Int)

;; ada___hermes__oid__object_identifier__root_component__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__root_component__first__bit))

;; ada___hermes__oid__object_identifier__root_component__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__root_component__first__bit 
  ada___hermes__oid__object_identifier__root_component__last__bit))

;; ada___hermes__oid__object_identifier__root_component__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__root_component__position))

(declare-const ada___hermes__oid__object_identifier__second_level_component__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__second_level_component__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__second_level_component__position Int)

;; ada___hermes__oid__object_identifier__second_level_component__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__second_level_component__first__bit))

;; ada___hermes__oid__object_identifier__second_level_component__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__second_level_component__first__bit 
  ada___hermes__oid__object_identifier__second_level_component__last__bit))

;; ada___hermes__oid__object_identifier__second_level_component__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__second_level_component__position))

(declare-const ada___hermes__oid__object_identifier__other_components__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_components__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_components__position Int)

;; ada___hermes__oid__object_identifier__other_components__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_components__first__bit))

;; ada___hermes__oid__object_identifier__other_components__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__other_components__first__bit 
  ada___hermes__oid__object_identifier__other_components__last__bit))

;; ada___hermes__oid__object_identifier__other_components__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_components__position))

(declare-const ada___hermes__oid__object_identifier__other_component_count__first__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_component_count__last__bit Int)

(declare-const ada___hermes__oid__object_identifier__other_component_count__position Int)

;; ada___hermes__oid__object_identifier__other_component_count__first__bit_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_component_count__first__bit))

;; ada___hermes__oid__object_identifier__other_component_count__last__bit_axiom
  (assert
  (< ada___hermes__oid__object_identifier__other_component_count__first__bit 
  ada___hermes__oid__object_identifier__other_component_count__last__bit))

;; ada___hermes__oid__object_identifier__other_component_count__position_axiom
  (assert
  (<= 0 ada___hermes__oid__object_identifier__other_component_count__position))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes ()
((object_identifier__ref
 (object_identifier__refqtmk (object_identifier__content us_rep)))))
(define-fun object_identifier__ref_object_identifier__content__projection ((a object_identifier__ref)) us_rep 
  (object_identifier__content a))

(declare-const identifier us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort octet 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE7 ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) (_ BitVec 8))

(declare-fun user_eq8 (octet octet) Bool)

(declare-const dummy8 octet)

(declare-datatypes () ((octet__ref (octet__refqtmk (octet__content octet)))))
(define-fun octet__ref_octet__content__projection ((a octet__ref)) octet 
  (octet__content a))

(declare-fun to_rep5 (octet) (_ BitVec 8))

(declare-fun of_rep5 ((_ BitVec 8)) octet)

;; inversion_axiom
  (assert
  (forall ((x octet))
  (! (= (of_rep5 (to_rep5 x)) x) :pattern ((to_rep5 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep5 (of_rep5 x)) x) :pattern ((to_rep5 (of_rep5 x))) )))

(define-fun to_int2 ((x octet)) Int (bv2int (to_rep5 x)))

;; range_int_axiom
  (assert
  (forall ((x octet)) (! (uint_in_range
  (to_int2 x)) :pattern ((to_int2 x)) )))

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int octet))))))
(declare-fun slide1 ((Array Int octet) Int Int) (Array Int octet))

;; slide_eq
  (assert
  (forall ((a (Array Int octet)))
  (forall ((first Int))
  (! (= (slide1 a first first) a) :pattern ((slide1 a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int octet)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int octet)) (a__first Int) (a__last Int)
  (b (Array Int octet)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep5 (select a temp___idx_156)) (to_rep5
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int octet)) (b (Array Int octet)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep5 (select a temp___idx_156)) (to_rep5
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-const result____first integer)

(declare-const result____last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(declare-const r16b Int)

(declare-const attr__ATTRIBUTE_ADDRESS11 Int)

(declare-const r17b Int)

(declare-const attr__ATTRIBUTE_ADDRESS12 Int)

(declare-const attr__ATTRIBUTE_ADDRESS13 Int)

(declare-sort tcomponent_typeB 0)

(declare-fun tcomponent_typeBqtint (tcomponent_typeB) Int)

;; tcomponent_typeB'axiom
  (assert
  (forall ((i tcomponent_typeB))
  (and (<= (- 2147483648) (tcomponent_typeBqtint i))
  (<= (tcomponent_typeBqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq9 (tcomponent_typeB tcomponent_typeB) Bool)

(declare-const dummy9 tcomponent_typeB)

(declare-datatypes ()
((tcomponent_typeB__ref
 (tcomponent_typeB__refqtmk (tcomponent_typeB__content tcomponent_typeB)))))
(define-fun tcomponent_typeB__ref_tcomponent_typeB__content__projection ((a tcomponent_typeB__ref)) tcomponent_typeB 
  (tcomponent_typeB__content a))

(define-fun dynamic_invariant2 ((temp___expr_163 Int)
  (temp___is_init_159 Bool) (temp___skip_constant_160 Bool)
  (temp___do_toplevel_161 Bool)
  (temp___do_typ_inv_162 Bool)) Bool (=>
                                     (or (= temp___is_init_159 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_163)))

(declare-sort other_index_type 0)

(declare-fun other_index_typeqtint (other_index_type) Int)

;; other_index_type'axiom
  (assert
  (forall ((i other_index_type))
  (and (<= 1 (other_index_typeqtint i)) (<= (other_index_typeqtint i) 13))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 13)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq10 (other_index_type other_index_type) Bool)

(declare-const dummy10 other_index_type)

(declare-datatypes ()
((other_index_type__ref
 (other_index_type__refqtmk (other_index_type__content other_index_type)))))
(define-fun other_index_type__ref_other_index_type__content__projection ((a other_index_type__ref)) other_index_type 
  (other_index_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_256 (_ BitVec 8))
  (temp___is_init_252 Bool) (temp___skip_constant_253 Bool)
  (temp___do_toplevel_254 Bool) (temp___do_typ_inv_255 Bool)) Bool true)

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int octet))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int octet) (elts a))

(define-fun of_array ((a (Array Int octet)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const component__size1 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment2))

(define-fun bool_eq3 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq11 (us_t us_t) Bool)

(declare-const dummy11 us_t)

(declare-datatypes ()
((octet_array__ref (octet_array__refqtmk (octet_array__content us_t)))))
(define-fun octet_array__ref_octet_array__content__projection ((a octet_array__ref)) us_t 
  (octet_array__content a))

(declare-datatypes () ((t14b__ref (t14b__refqtmk (t14b__content us_t)))))
(define-fun t14b__ref_t14b__content__projection ((a t14b__ref)) us_t 
  (t14b__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq12 (integer integer) Bool)

(declare-const dummy12 integer)

(declare-datatypes () ((t15b__ref (t15b__refqtmk (t15b__content integer)))))
(define-fun t15b__ref_t15b__content__projection ((a t15b__ref)) integer 
  (t15b__content a))

(declare-fun temp_____aggregate_def_356 ((_ BitVec 8) Int Int) us_t)

;; def_axiom
  (assert
  (forall ((temp___358 (_ BitVec 8)))
  (forall ((temp___359 Int) (temp___360 Int))
  (let ((temp___357 (temp_____aggregate_def_356 temp___358 temp___359
                    temp___360)))
  (=> (dynamic_invariant3 temp___358 true true true true)
  (and
  (=> (dynamic_property 0 2147483647 temp___359 temp___360)
  (and (= (first1 temp___357) temp___359) (= (last1 temp___357) temp___360)))
  (forall ((temp___361 Int))
  (= (to_rep5 (select (to_array temp___357) temp___361)) temp___358))))))))

(define-fun dynamic_invariant4 ((temp___expr_197 Int)
  (temp___is_init_193 Bool) (temp___skip_constant_194 Bool)
  (temp___do_toplevel_195 Bool)
  (temp___do_typ_inv_196 Bool)) Bool (=>
                                     (or (= temp___is_init_193 true)
                                     (<= 0 2)) (in_range3 temp___expr_197)))

(define-fun dynamic_invariant5 ((temp___expr_204 Int)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)
  (temp___do_typ_inv_203 Bool)) Bool (=>
                                     (or (= temp___is_init_200 true)
                                     (<= 0 175)) (in_range4 temp___expr_204)))

(define-fun dynamic_invariant6 ((temp___expr_211 Int)
  (temp___is_init_207 Bool) (temp___skip_constant_208 Bool)
  (temp___do_toplevel_209 Bool)
  (temp___do_typ_inv_210 Bool)) Bool (=>
                                     (or (= temp___is_init_207 true)
                                     (<= 1 13)) (in_range8 temp___expr_211)))

(define-fun dynamic_invariant7 ((temp___expr_228 Int)
  (temp___is_init_224 Bool) (temp___skip_constant_225 Bool)
  (temp___do_toplevel_226 Bool)
  (temp___do_typ_inv_227 Bool)) Bool (=>
                                     (or (= temp___is_init_224 true)
                                     (<= 0 13)) (in_range6 temp___expr_228)))

(define-fun dynamic_invariant8 ((temp___expr_263 us_t)
  (temp___is_init_259 Bool) (temp___skip_constant_260 Bool)
  (temp___do_toplevel_261 Bool)
  (temp___do_typ_inv_262 Bool)) Bool (=>
                                     (not (= temp___skip_constant_260 true))
                                     (dynamic_property 0 2147483647
                                     (first1 temp___expr_263)
                                     (last1 temp___expr_263))))

(declare-const octet_count Int)

(declare-const result_index Int)

(declare-const start_index Int)

(declare-const left_index Int)

(declare-const right_index Int)

(declare-const current_component Int)

(declare-const temp (_ BitVec 8))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_property 0 2147483647 (to_rep result____first)
  (to_rep result____last)))

;; Assume
  (assert (dynamic_invariant octet_count false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant result_index false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant start_index false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant left_index false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant right_index false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 current_component false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant3 temp false false true true))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep result____last) o))

(declare-const o1 Int)

;; Ensures
  (assert (= (to_rep result____first) o1))

(define-fun temp___362 () us_t (temp_____aggregate_def_356 #x00 o1 o))

;; Assume
  (assert (= (first1 temp___362) (to_rep result____first)))

;; Assume
  (assert (= (last1 temp___362) (to_rep result____last)))

(define-fun temp___364 () us_t (of_array (to_array temp___362)
                               (first1 temp___362) (last1 temp___362)))

;; Assert
  (assert
  (ite (<= (first1 temp___364) (last1 temp___364))
  (and (<= (to_rep result____first) (to_rep result____last))
  (= (- (last1 temp___364) (first1 temp___364)) (- (to_rep result____last) 
  (to_rep result____first))))
  (< (to_rep result____last) (to_rep result____first))))

(declare-const o2 Int)

;; Ensures
  (assert (= (to_rep result____first) o2))

(declare-const result__ (Array Int octet))

;; H
  (assert (= result__ (slide1 (to_array temp___364) (first1 temp___364) o2)))

(declare-const octet_count1 Int)

;; H
  (assert (= octet_count1 0))

(declare-const o3 Int)

;; Ensures
  (assert (= (to_rep result____last) o3))

(declare-const o4 Int)

;; Ensures
  (assert (= (to_rep result____first) o4))

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (< 0 (length o4 o3)) true false)))

;; H
  (assert (= spark__branch true))

(declare-const o5 Int)

;; Ensures
  (assert (= (to_rep result____first) o5))

;; Ensures
  (assert (in_range2 o5))

(declare-const result_index1 Int)

;; H
  (assert (= result_index1 o5))

(declare-const octet_count2 Int)

;; H
  (assert (= octet_count2 1))

(declare-const o6 Int)

;; Ensures
  (assert
  (= (to_rep2
     (rec__ada___hermes__oid__object_identifier__second_level_component
     (us_split_fields1 identifier))) o6))

(declare-const o7 Int)

;; Ensures
  (assert
  (= (to_rep1
     (rec__ada___hermes__oid__object_identifier__root_component
     (us_split_fields1 identifier))) o7))

(define-fun o8 () Int (* o7 40))

;; Ensures
  (assert (in_range7 o8))

(define-fun o9 () Int (+ o8 o6))

;; Ensures
  (assert (in_range7 o9))

;; Ensures
  (assert (uint_in_range o9))

(declare-const o10 octet)

;; Ensures
  (assert (= (to_rep5 o10) ((_ int2bv 8) o9)))

;; Assert
  (assert
  (and (<= (to_rep result____first) result_index1)
  (<= result_index1 (to_rep result____last))))

(declare-const result__1 (Array Int octet))

;; H
  (assert (= result__1 (store result__ result_index1 o10)))

(declare-const temp___367 Int)

;; Ensures
  (assert
  (= (to_rep4
     (rec__ada___hermes__oid__object_identifier__other_component_count
     (us_split_fields1 identifier))) temp___367))

(declare-const other_index Int)

;; H
  (assert (= other_index 1))

;; H
  (assert
  (= (and (ite (<= 1 other_index) true false) (ite (<= other_index temp___367)
                                              true false)) true))

(declare-const o11 Int)

;; Ensures
  (assert (= (to_rep result____last) o11))

(declare-const o12 Int)

;; Ensures
  (assert (= (to_rep result____first) o12))

(declare-const spark__branch1 Bool)

(declare-const result__2 (Array Int octet))

(declare-const octet_count3 Int)

(declare-const result_index2 Int)

(declare-const start_index1 Int)

(declare-const left_index1 Int)

(declare-const right_index1 Int)

(declare-const current_component1 Int)

(declare-const temp1 (_ BitVec 8))

(declare-const other_index1 Int)

;; LoopInvariant
  (assert
  (and (<= (to_rep result____first) result_index2)
  (<= result_index2 (to_rep result____last))))

;; H
  (assert
  (= (and (ite (and
               (and
               (and
               (and
               (and
               (and
               (and (dynamic_invariant right_index1 false true true true)
               (dynamic_invariant octet_count3 false true true true))
               (dynamic_invariant2 current_component1 false true true true))
               (dynamic_property1 1
               (to_rep4
               (rec__ada___hermes__oid__object_identifier__other_component_count
               (us_split_fields1 identifier))) other_index1))
               (dynamic_invariant result_index2 false true true true))
               (dynamic_invariant3 temp1 false true true true))
               (dynamic_invariant start_index1 false true true true))
               (dynamic_invariant left_index1 false true true true))
          true false) (ite (and (<= 1 other_index1)
                           (<= other_index1 (to_rep4
                                            (rec__ada___hermes__oid__object_identifier__other_component_count
                                            (us_split_fields1 identifier)))))
                      true false)) true))

(declare-const o13 Int)

;; Ensures
  (assert
  (= (to_rep3
     (select (rec__ada___hermes__oid__object_identifier__other_components
             (us_split_fields1 identifier)) other_index1)) o13))

(declare-const current_component2 Int)

;; H
  (assert (= current_component2 o13))

(declare-const start_index2 Int)

;; H
  (assert (= start_index2 result_index2))

(declare-const out_of_space Bool)

;; H
  (assert (= out_of_space (distinct 0 0)))

(declare-const spark__branch2 Bool)

(declare-const result__3 (Array Int octet))

(declare-const result_index3 Int)

(declare-const out_of_space1 Bool)

;; H
  (assert
  (exists ((o14 Int))
  (and (= (to_rep result____last) o14)
  (exists ((o15 Int))
  (and (= (to_rep result____first) o15)
  (exists ((result__4 (Array Int octet)) (result_index4 Int)
  (current_component3 Int))
  (and
  (and (<= (to_rep result____first) result_index4)
  (<= result_index4 (to_rep result____last)))
  (and
  (and (dynamic_invariant2 current_component3 false true true true)
  (dynamic_invariant result_index4 false true true true))
  (exists ((o16 Int))
  (and (= (to_rep result____last) o16)
  (and (= spark__branch2 (ite (= result_index4 o16) true false))
  (ite (= spark__branch2 true)
  (and (and (= out_of_space1 (distinct 1 0)) (= result__3 result__4))
  (= result_index3 result_index4))
  (and
  (let ((o17 (+ result_index4 1)))
  (and (in_range1 o17)
  (and (= result_index3 o17)
  (let ((o18 (mod1 current_component3 128)))
  (and (uint_in_range o18)
  (exists ((o19 octet))
  (and (= (to_rep5 o19) ((_ int2bv 8) o18))
  (and
  (and (<= (to_rep result____first) result_index3)
  (<= result_index3 (to_rep result____last)))
  (and (= result__3 (store result__4 result_index3 o19))
  (exists ((current_component4 Int))
  (and (= current_component4 (div1 current_component3 128))
  (= current_component4 0)))))))))))) (= out_of_space1 out_of_space))))))))))))))

(declare-const spark__branch3 Bool)

;; H
  (assert (= spark__branch3 (ite (= out_of_space1 true) false true)))

;; H
  (assert (= spark__branch3 true))

(define-fun o14 () Int (- result_index3 start_index2))

(assert
;; defqtvc
 ;; File "hermes-oid.ads", line 52, characters 0-0
  (not (in_range1 o14)))
(check-sat)

(exit)
