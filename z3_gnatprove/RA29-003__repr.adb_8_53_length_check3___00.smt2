;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(declare-fun nth ((_ BitVec 8) Int) Bool)

(declare-fun lsr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun asr ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun lsl ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun rotate_left1 ((_ BitVec 8) Int) (_ BitVec 8))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 8))) Int (ite (bvsge x (_ bv0 8))
                                           (bv2int x) (- (- 256 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 255)))

(declare-fun nth_bv ((_ BitVec 8) (_ BitVec 8)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 8) (_ BitVec 8) (_ BitVec 8)
  (_ BitVec 8)) Bool)

(define-fun eq_sub ((a (_ BitVec 8)) (b (_ BitVec 8)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 8))))))
(declare-fun power ((_ BitVec 8) Int) (_ BitVec 8))

(define-fun bv_min ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 8))
  (y (_ BitVec 8))) (_ BitVec 8) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-fun nth1 ((_ BitVec 64) Int) Bool)

(declare-fun lsr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun asr1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun lsl1 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_right2 ((_ BitVec 64) Int) (_ BitVec 64))

(declare-fun rotate_left2 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun to_int2 ((x (_ BitVec 64))) Int (ite (bvsge x (_ bv0 64))
                                            (bv2int x)
                                            (- (- 18446744073709551616 (bv2int x)))))

(define-fun uint_in_range1 ((i Int)) Bool (and (<= 0 i)
                                          (<= i 18446744073709551615)))

(declare-fun nth_bv1 ((_ BitVec 64) (_ BitVec 64)) Bool)

(declare-fun eq_sub_bv1 ((_ BitVec 64) (_ BitVec 64) (_ BitVec 64)
  (_ BitVec 64)) Bool)

(define-fun eq_sub1 ((a (_ BitVec 64)) (b (_ BitVec 64)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth1 a j) (nth1 b j)))))

(declare-datatypes () ((t__ref1 (t__refqtmk1 (t__content1 (_ BitVec 64))))))
(declare-fun power1 ((_ BitVec 64) Int) (_ BitVec 64))

(define-fun bv_min1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) x y))

(define-fun bv_max1 ((x (_ BitVec 64))
  (y (_ BitVec 64))) (_ BitVec 64) (ite (bvule x y) y x))

(declare-sort uint8 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 8))

(declare-fun attr__ATTRIBUTE_IMAGE ((_ BitVec 8)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) (_ BitVec 8))

(declare-fun user_eq (uint8 uint8) Bool)

(declare-const dummy uint8)

(declare-datatypes () ((uint8__ref (uint8__refqtmk (uint8__content uint8)))))
(define-fun uint8__ref_uint8__content__projection ((a uint8__ref)) uint8 
  (uint8__content a))

(declare-fun to_rep (uint8) (_ BitVec 8))

(declare-fun of_rep ((_ BitVec 8)) uint8)

;; inversion_axiom
  (assert
  (forall ((x uint8)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 8)))
  (! (= (to_rep (of_rep x)) x) :pattern ((to_rep (of_rep x))) )))

(define-fun to_int3 ((x uint8)) Int (bv2int (to_rep x)))

;; range_int_axiom
  (assert
  (forall ((x uint8)) (! (uint_in_range
  (to_int3 x)) :pattern ((to_int3 x)) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array (_ BitVec 64) uint8))))))
(declare-fun slide ((Array (_ BitVec 64) uint8) (_ BitVec 64)
  (_ BitVec 64)) (Array (_ BitVec 64) uint8))

;; slide_eq
  (assert
  (forall ((a (Array (_ BitVec 64) uint8)))
  (forall ((first (_ BitVec 64)))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array (_ BitVec 64) uint8)))
  (forall ((old_first (_ BitVec 64)))
  (forall ((new_first (_ BitVec 64)))
  (forall ((i (_ BitVec 64)))
  (! (= (select (slide a old_first new_first) i) (select a (bvsub i (bvsub new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array (_ BitVec 64) uint8)) (a__first (_ BitVec 64))
  (a__last (_ BitVec 64)) (b (Array (_ BitVec 64) uint8))
  (b__first (_ BitVec 64))
  (b__last (_ BitVec 64))) Bool (ite (and
                                     (ite (bvule a__first a__last)
                                     (and (bvule b__first b__last)
                                     (= (bvsub a__last a__first) (bvsub b__last b__first)))
                                     (bvugt b__first b__last))
                                     (forall ((temp___idx_154 (_ BitVec 64)))
                                     (=>
                                     (and (bvule a__first temp___idx_154)
                                     (bvule temp___idx_154 a__last))
                                     (= (to_rep (select a temp___idx_154)) 
                                     (to_rep
                                     (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))
                                true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array (_ BitVec 64) uint8)) (b (Array (_ BitVec 64) uint8)))
  (forall ((a__first (_ BitVec 64)) (a__last (_ BitVec 64))
  (b__first (_ BitVec 64)) (b__last (_ BitVec 64)))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (bvule a__first a__last)
  (and (bvule b__first b__last)
  (= (bvsub a__last a__first) (bvsub b__last b__first)))
  (bvugt b__first b__last))
  (forall ((temp___idx_154 (_ BitVec 64)))
  (=> (and (bvule a__first temp___idx_154) (bvule temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (bvadd (bvsub b__first a__first) temp___idx_154)))))))))))

(declare-sort uint64 0)

(declare-const attr__ATTRIBUTE_MODULUS1 (_ BitVec 64))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 64))

(declare-fun user_eq1 (uint64 uint64) Bool)

(declare-const dummy1 uint64)

(declare-datatypes ()
((uint64__ref (uint64__refqtmk (uint64__content uint64)))))
(define-fun uint64__ref_uint64__content__projection ((a uint64__ref)) uint64 
  (uint64__content a))

(declare-const a__first uint64)

(declare-const a__last uint64)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun to_rep1 (uint64) (_ BitVec 64))

(declare-fun of_rep1 ((_ BitVec 64)) uint64)

;; inversion_axiom
  (assert
  (forall ((x uint64))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert true)

;; coerce_axiom
  (assert
  (forall ((x (_ BitVec 64)))
  (! (= (to_rep1 (of_rep1 x)) x) :pattern ((to_rep1 (of_rep1 x))) )))

(define-fun to_int4 ((x uint64)) Int (bv2int (to_rep1 x)))

;; range_int_axiom
  (assert
  (forall ((x uint64)) (! (uint_in_range1
  (to_int4 x)) :pattern ((to_int4 x)) )))

(declare-sort index_type 0)

(declare-const attr__ATTRIBUTE_MODULUS2 (_ BitVec 64))

(define-fun in_range ((x (_ BitVec 64))) Bool (and
                                              (bvule #x0000000000000000 x)
                                              (bvule x #xFFFFFFFFFFFFFFFE)))

(define-fun in_range_int ((x Int)) Bool (and (<= 0 x)
                                        (<= x 18446744073709551614)))

(declare-fun attr__ATTRIBUTE_IMAGE2 ((_ BitVec 64)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) (_ BitVec 64))

(declare-fun user_eq2 (index_type index_type) Bool)

(declare-const dummy2 index_type)

(declare-datatypes ()
((index_type__ref (index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(declare-sort t 0)

(declare-fun first (t) uint64)

(declare-fun last (t) uint64)

(declare-fun mk ((_ BitVec 64) (_ BitVec 64)) t)

;; mk_def
  (assert
  (forall ((f (_ BitVec 64)) (l (_ BitVec 64)))
  (! (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first (_ BitVec 64))
  (range_last (_ BitVec 64)) (low (_ BitVec 64))
  (high (_ BitVec 64))) Bool (=> (bvule low high)
                             (and (in_range low) (in_range high))))

(declare-datatypes ()
((us_t (us_tqtmk (elts (Array (_ BitVec 64) uint8))(rt t)))))
(define-fun to_array ((a us_t)) (Array (_ BitVec 64) uint8) (elts a))

(define-fun of_array ((a (Array (_ BitVec 64) uint8)) (f (_ BitVec 64))
  (l (_ BitVec 64))) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) (_ BitVec 64) (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) (_ BitVec 64) (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (bvule (first1 a) (last1 a))
                                   (+ (- (bv2int (last1 a)) (bv2int (first1
                                                                    a))) 1)
                                   0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((my_arry__ref (my_arry__refqtmk (my_arry__content us_t)))))
(define-fun my_arry__ref_my_arry__content__projection ((a my_arry__ref)) us_t 
  (my_arry__content a))

(declare-const b us_t)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const temp_buf__first uint64)

(declare-const temp_buf__last uint64)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(define-fun dynamic_invariant ((temp___expr_159 (_ BitVec 64))
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)

(define-fun dynamic_invariant1 ((temp___expr_180 us_t)
  (temp___is_init_176 Bool) (temp___skip_constant_177 Bool)
  (temp___do_toplevel_178 Bool)
  (temp___do_typ_inv_179 Bool)) Bool (=>
                                     (not (= temp___skip_constant_177 true))
                                     (dynamic_property #x0000000000000000
                                     #xFFFFFFFFFFFFFFFE
                                     (first1 temp___expr_180)
                                     (last1 temp___expr_180))))

(declare-datatypes ()
((ttemp_bufS__ref (ttemp_bufS__refqtmk (ttemp_bufS__content us_t)))))
(define-fun ttemp_bufS__ref_ttemp_bufS__content__projection ((a ttemp_bufS__ref)) us_t 
  (ttemp_bufS__content a))

(declare-datatypes () ((t4b__ref (t4b__refqtmk (t4b__content us_t)))))
(define-fun t4b__ref_t4b__content__projection ((a t4b__ref)) us_t (t4b__content
                                                                  a))

(declare-fun repr__p__temp_buf__aggregate_def ((_ BitVec 8) (_ BitVec 64)
  (_ BitVec 64)) us_t)

(define-fun dynamic_invariant2 ((temp___expr_166 (_ BitVec 8))
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool) (temp___do_typ_inv_165 Bool)) Bool true)

;; def_axiom
  (assert
  (forall ((temp___217 (_ BitVec 8)))
  (forall ((temp___218 (_ BitVec 64)) (temp___219 (_ BitVec 64)))
  (let ((temp___216 (repr__p__temp_buf__aggregate_def temp___217 temp___218
                    temp___219)))
  (=> (dynamic_invariant2 temp___217 true true true true)
  (and
  (=> (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFE temp___218
  temp___219)
  (and (= (first1 temp___216) temp___218) (= (last1 temp___216) temp___219)))
  (forall ((temp___220 (_ BitVec 64)))
  (= (to_rep (select (to_array temp___216) temp___220)) temp___217))))))))

(define-fun dynamic_invariant3 ((temp___expr_173 (_ BitVec 64))
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)
  (temp___do_typ_inv_172 Bool)) Bool (=>
                                     (or (= temp___is_init_169 true)
                                     (bvule #x0000000000000000 #xFFFFFFFFFFFFFFFE))
                                     (in_range temp___expr_173)))

(define-fun dynamic_invariant4 ((temp___expr_210 us_t)
  (temp___is_init_206 Bool) (temp___skip_constant_207 Bool)
  (temp___do_toplevel_208 Bool)
  (temp___do_typ_inv_209 Bool)) Bool (=>
                                     (not (= temp___skip_constant_207 true))
                                     (and (dynamic_property
                                     (to_rep1 a__first) (to_rep1 a__last)
                                     (first1 temp___expr_210)
                                     (last1 temp___expr_210))
                                     (and
                                     (= (first1 temp___expr_210) (to_rep1
                                                                 a__first))
                                     (= (last1 temp___expr_210) (to_rep1
                                                                a__last))))))

(define-fun default_initial_assumption ((temp___expr_212 us_t)
  (temp___skip_top_level_213 Bool)) Bool (and
                                         (= (first1 temp___expr_212) 
                                         (to_rep1 a__first))
                                         (= (last1 temp___expr_212) (to_rep1
                                                                    a__last))))

;; Assume
  (assert (dynamic_property #x0000000000000000 #xFFFFFFFFFFFFFFFE
  (to_rep1 a__first) (to_rep1 a__last)))

;; Assume
  (assert (dynamic_invariant1 b true false true true))

(declare-const o (_ BitVec 64))

;; Ensures
  (assert (= (to_rep1 a__last) o))

(declare-const o1 (_ BitVec 64))

;; Ensures
  (assert (= (to_rep1 a__first) o1))

(define-fun o2 () Int (length (bv2int o1) (bv2int o)))

;; Ensures
  (assert (uint_in_range1 o2))

(declare-const x (_ BitVec 64))

;; H
  (assert (= x ((_ int2bv 64) o2)))

;; Assume
  (assert (dynamic_invariant x true false true true))

(define-fun o3 () Int (length1 b))

;; Ensures
  (assert (uint_in_range1 o3))

(declare-const z (_ BitVec 64))

;; H
  (assert (= z (bvudiv ((_ int2bv 64) o3) #x0000000000000010)))

;; Assume
  (assert (dynamic_invariant z true false true true))

(declare-const o4 (_ BitVec 64))

;; Ensures
  (assert (= (to_rep1 a__last) o4))

(declare-const o5 (_ BitVec 64))

;; Ensures
  (assert (= (to_rep1 a__first) o5))

(define-fun temp___221 () us_t (repr__p__temp_buf__aggregate_def #x00 o5 o4))

;; Assume
  (assert (= (first1 temp___221) (to_rep1 a__first)))

;; Assume
  (assert (= (last1 temp___221) (to_rep1 a__last)))

;; H
  (assert (bvule (first1 temp___221) (last1 temp___221)))

(assert
;; defqtvc
 ;; File "repr.ads", line 10, characters 0-0
  (not (bvule (to_rep1 a__first) (to_rep1 a__last))))
(check-sat)
