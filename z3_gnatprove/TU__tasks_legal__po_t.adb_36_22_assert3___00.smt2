(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__po_t__p_intT__condition Bool)(rec__po_t__the_protected_int integer)))))
(define-fun us_split_fields_rec__po_t__p_intT__condition__projection ((a us_split_fields)) Bool 
  (rec__po_t__p_intT__condition a))

(define-fun us_split_fields_rec__po_t__the_protected_int__projection ((a us_split_fields)) integer 
  (rec__po_t__the_protected_int a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const po_t__p_intT__condition__first__bit Int)

(declare-const po_t__p_intT__condition__last__bit Int)

(declare-const po_t__p_intT__condition__position Int)

;; po_t__p_intT__condition__first__bit_axiom
  (assert (<= 0 po_t__p_intT__condition__first__bit))

;; po_t__p_intT__condition__last__bit_axiom
  (assert
  (< po_t__p_intT__condition__first__bit po_t__p_intT__condition__last__bit))

;; po_t__p_intT__condition__position_axiom
  (assert (<= 0 po_t__p_intT__condition__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-datatypes ()
((p_intT__ref (p_intT__refqtmk (p_intT__content us_rep)))))
(define-fun p_intT__ref_p_intT__content__projection ((a p_intT__ref)) us_rep 
  (p_intT__content a))

(declare-fun get (us_rep) Int)

(declare-fun get__function_guard (Int us_rep) Bool)

(define-fun in_range1 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Bool)

(define-fun default_initial_assumption ((temp___expr_184 us_rep)
  (temp___skip_top_level_185 Bool)) Bool (and
                                         (= (rec__po_t__p_intT__condition
                                            (us_split_fields1
                                            temp___expr_184)) (distinct 1 0))
                                         (= (to_rep
                                            (rec__po_t__the_protected_int
                                            (us_split_fields1
                                            temp___expr_184))) 0)))

;; get__post_axiom
  (assert
  (forall ((self__ us_rep))
  (! (let ((result (get self__)))
     (=> (get__function_guard result self__) (dynamic_invariant result true
     false true true))) :pattern ((get self__)) )))

;; get__def_axiom
  (assert
  (forall ((self__ us_rep))
  (! (= (get self__) (ite (<= 0 (to_rep
                                (rec__po_t__the_protected_int
                                (us_split_fields1 self__))))
                     (to_rep
                     (rec__po_t__the_protected_int (us_split_fields1 self__)))
                     (+ (to_rep
                        (rec__po_t__the_protected_int
                        (us_split_fields1 self__))) 10))) :pattern ((get
                                                                    self__)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__po_t__hidden_poT__the_protected_int integer)(rec__po_t__hidden_poT__switch Bool)))))
(define-fun us_split_fields_rec__po_t__hidden_poT__the_protected_int__projection ((a us_split_fields2)) integer 
  (rec__po_t__hidden_poT__the_protected_int a))

(define-fun us_split_fields_rec__po_t__hidden_poT__switch__projection ((a us_split_fields2)) Bool 
  (rec__po_t__hidden_poT__switch a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const po_t__hidden_poT__the_protected_int__first__bit Int)

(declare-const po_t__hidden_poT__the_protected_int__last__bit Int)

(declare-const po_t__hidden_poT__the_protected_int__position Int)

;; po_t__hidden_poT__the_protected_int__first__bit_axiom
  (assert (<= 0 po_t__hidden_poT__the_protected_int__first__bit))

;; po_t__hidden_poT__the_protected_int__last__bit_axiom
  (assert
  (< po_t__hidden_poT__the_protected_int__first__bit po_t__hidden_poT__the_protected_int__last__bit))

;; po_t__hidden_poT__the_protected_int__position_axiom
  (assert (<= 0 po_t__hidden_poT__the_protected_int__position))

(declare-const po_t__hidden_poT__switch__first__bit Int)

(declare-const po_t__hidden_poT__switch__last__bit Int)

(declare-const po_t__hidden_poT__switch__position Int)

;; po_t__hidden_poT__switch__first__bit_axiom
  (assert (<= 0 po_t__hidden_poT__switch__first__bit))

;; po_t__hidden_poT__switch__last__bit_axiom
  (assert
  (< po_t__hidden_poT__switch__first__bit po_t__hidden_poT__switch__last__bit))

;; po_t__hidden_poT__switch__position_axiom
  (assert (<= 0 po_t__hidden_poT__switch__position))

(declare-fun user_eq2 (us_rep1 us_rep1) Bool)

(declare-datatypes ()
((hidden_poT__ref (hidden_poT__refqtmk (hidden_poT__content us_rep1)))))
(define-fun hidden_poT__ref_hidden_poT__content__projection ((a hidden_poT__ref)) us_rep1 
  (hidden_poT__content a))

(declare-fun get1 (us_rep1) Int)

(declare-fun get__function_guard1 (Int us_rep1) Bool)

(define-fun default_initial_assumption1 ((temp___expr_191 us_rep1)
  (temp___skip_top_level_192 Bool)) Bool (and
                                         (= (to_rep
                                            (rec__po_t__hidden_poT__the_protected_int
                                            (us_split_fields3
                                            temp___expr_191))) 0)
                                         (= (rec__po_t__hidden_poT__switch
                                            (us_split_fields3
                                            temp___expr_191)) (distinct 1 0))))

;; get__post_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (let ((result (get1 self__)))
     (=> (get__function_guard1 result self__) (dynamic_invariant result true
     false true true))) :pattern ((get1 self__)) )))

;; get__def_axiom
  (assert
  (forall ((self__ us_rep1))
  (! (= (get1 self__) (ite (<= 0 (to_rep
                                 (rec__po_t__hidden_poT__the_protected_int
                                 (us_split_fields3 self__))))
                      (to_rep
                      (rec__po_t__hidden_poT__the_protected_int
                      (us_split_fields3 self__)))
                      (+ (to_rep
                         (rec__po_t__hidden_poT__the_protected_int
                         (us_split_fields3 self__))) 10))) :pattern (
  (get1 self__)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const y Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const p_int__split_fields us_split_fields)

(declare-const hidden_po__split_fields us_split_fields2)

;; Assume
  (assert (default_initial_assumption (us_repqtmk p_int__split_fields)
  false))

;; Assume
  (assert true)

;; Assume
  (assert (default_initial_assumption1 (us_repqtmk1 hidden_po__split_fields)
  false))

;; Assume
  (assert true)

(declare-const p_int__split_fields1 us_split_fields)

;; Assume
  (assert true)

(declare-const us_self__compl us_split_fields)

;; Ensures
  (assert true)

(declare-const p_int__split_fields2 us_split_fields)

;; H
  (assert (= p_int__split_fields2 us_self__compl))

(declare-const hidden_po__split_fields1 us_split_fields2)

;; Assume
  (assert true)

(declare-const us_self__compl1 us_split_fields2)

;; Ensures
  (assert true)

(declare-const hidden_po__split_fields2 us_split_fields2)

;; H
  (assert (= hidden_po__split_fields2 us_self__compl1))

(declare-const p_int__split_fields3 us_split_fields)

;; Assume
  (assert true)

(define-fun o () us_rep (us_repqtmk p_int__split_fields3))

(define-fun po_t__B_1__x__assume () Int (get o))

;; H
  (assert (get__function_guard po_t__B_1__x__assume o))

;; H
  (assert (dynamic_invariant po_t__B_1__x__assume true false true true))

;; H
  (assert
  (= po_t__B_1__x__assume (ite (<= 0 (to_rep
                                     (rec__po_t__the_protected_int
                                     p_int__split_fields3)))
                          (to_rep
                          (rec__po_t__the_protected_int p_int__split_fields3))
                          (+ (to_rep
                             (rec__po_t__the_protected_int
                             p_int__split_fields3)) 10))))

;; Assume
  (assert (= po_t__B_1__x__assume x))

;; Assume
  (assert (dynamic_invariant x true false true true))

(declare-const hidden_po__split_fields3 us_split_fields2)

;; Assume
  (assert true)

(define-fun o1 () us_rep1 (us_repqtmk1 hidden_po__split_fields3))

(define-fun po_t__B_1__y__assume () Int (get1 o1))

;; H
  (assert (get__function_guard1 po_t__B_1__y__assume o1))

;; H
  (assert (dynamic_invariant po_t__B_1__y__assume true false true true))

;; H
  (assert
  (= po_t__B_1__y__assume (ite (<= 0 (to_rep
                                     (rec__po_t__hidden_poT__the_protected_int
                                     hidden_po__split_fields3)))
                          (to_rep
                          (rec__po_t__hidden_poT__the_protected_int
                          hidden_po__split_fields3))
                          (+ (to_rep
                             (rec__po_t__hidden_poT__the_protected_int
                             hidden_po__split_fields3)) 10))))

;; Assume
  (assert (= po_t__B_1__y__assume y))

;; Assume
  (assert (dynamic_invariant y true false true true))

(assert
;; defqtvc
 ;; File "po_t.ads", line 1, characters 0-0
  (not (= x y)))
(check-sat)

(exit)
