;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                  (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-datatypes ()
((map__ref1 (map__refqtmk1 (map__content1 (Array Int integer))))))
(declare-fun slide1 ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first2 Int))
  (! (= (slide1 a first2 first2) a) :pattern ((slide1 a first2 first2)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide1 a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide1 a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-const dummy4 (Array Int integer))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const component__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 ((Array Int integer) (Array Int integer)) Bool)

(declare-sort stack_range 0)

(declare-fun stack_rangeqtint (stack_range) Int)

;; stack_range'axiom
  (assert
  (forall ((i stack_range))
  (and (<= 0 (stack_rangeqtint i)) (<= (stack_rangeqtint i) 100))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (stack_range stack_range) Bool)

(declare-const dummy5 stack_range)

(declare-datatypes ()
((stack_range__ref (stack_range__refqtmk (stack_range__content stack_range)))))
(define-fun stack_range__ref_stack_range__content__projection ((a stack_range__ref)) stack_range 
  (stack_range__content a))

(define-fun to_rep2 ((x stack_range)) Int (stack_rangeqtint x))

(declare-fun of_rep2 (Int) stack_range)

;; inversion_axiom
  (assert
  (forall ((x stack_range))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x stack_range)) (! (in_range4
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range4 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__adt_stack__stack__stack_vector (Array Int integer))(rec__adt_stack__stack__stack_top stack_range)(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__adt_stack__stack__stack_vector__projection ((a us_split_fields)) (Array Int integer) 
  (rec__adt_stack__stack__stack_vector a))

(define-fun us_split_fields_rec__adt_stack__stack__stack_top__projection ((a us_split_fields)) stack_range 
  (rec__adt_stack__stack__stack_top a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq3 ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (bool_eq2
                           (rec__adt_stack__stack__stack_vector
                           (us_split_fields1 a)) 1 100
                           (rec__adt_stack__stack__stack_vector
                           (us_split_fields1 b)) 1 100) true)
                        (= (to_rep2
                           (rec__adt_stack__stack__stack_top
                           (us_split_fields1 a))) (to_rep2
                                                  (rec__adt_stack__stack__stack_top
                                                  (us_split_fields1 b)))))
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const adt_stack__stack__stack_vector__first__bit Int)

(declare-const adt_stack__stack__stack_vector__last__bit Int)

(declare-const adt_stack__stack__stack_vector__position Int)

;; adt_stack__stack__stack_vector__first__bit_axiom
  (assert (<= 0 adt_stack__stack__stack_vector__first__bit))

;; adt_stack__stack__stack_vector__last__bit_axiom
  (assert
  (< adt_stack__stack__stack_vector__first__bit adt_stack__stack__stack_vector__last__bit))

;; adt_stack__stack__stack_vector__position_axiom
  (assert (<= 0 adt_stack__stack__stack_vector__position))

(declare-const adt_stack__stack__stack_top__first__bit Int)

(declare-const adt_stack__stack__stack_top__last__bit Int)

(declare-const adt_stack__stack__stack_top__position Int)

;; adt_stack__stack__stack_top__first__bit_axiom
  (assert (<= 0 adt_stack__stack__stack_top__first__bit))

;; adt_stack__stack__stack_top__last__bit_axiom
  (assert
  (< adt_stack__stack__stack_top__first__bit adt_stack__stack__stack_top__last__bit))

;; adt_stack__stack__stack_top__position_axiom
  (assert (<= 0 adt_stack__stack__stack_top__position))

(declare-fun user_eq6 (us_rep us_rep) Bool)

(declare-const dummy6 us_rep)

(declare-datatypes ()
((stack__ref (stack__refqtmk (stack__content us_rep)))))
(define-fun stack__ref_stack__content__projection ((a stack__ref)) us_rep 
  (stack__content a))

(declare-const my_stack__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun default_initial_assumption ((temp___expr_213 us_rep)
  (temp___skip_top_level_214 Bool)) Bool (= (attr__tag temp___expr_213) 
  us_tag))

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-fun pop1 (us_private us_private) Int)

(declare-fun pop__function_guard (Int us_private us_private) Bool)

;; pop__post_axiom
  (assert
  (forall ((asm_stack__stack_top us_private)
  (asm_stack__stack_vector us_private)) (! (in_range1
  (pop1 asm_stack__stack_top asm_stack__stack_vector)) :pattern ((pop1
                                                                 asm_stack__stack_top
                                                                 asm_stack__stack_vector)) )))

(declare-fun pop__specific_post (Int us_split_fields Int Int us_split_fields
  Int) Bool)

;; adt_stack__stack__compat_axiom
  (assert true)

(declare-fun is_empty (us_private) Bool)

(declare-fun is_empty__function_guard (Bool us_private) Bool)

;; is_empty__post_axiom
  (assert true)

(declare-fun is_empty1 (us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep) Bool)

(declare-fun is_empty2 (Int us_rep) Bool)

(declare-fun is_empty__function_guard2 (Bool Int us_rep) Bool)

;; is_empty__post_axiom
  (assert true)

;; is_empty__post__dispatch_axiom
  (assert true)

;; adt_stack__stack__compat_axiom
  (assert
  (forall ((s us_rep))
  (! (=> (is_empty__function_guard2 (is_empty2 us_tag s) us_tag s)
     (and
     (forall ((s1 us_rep)) (is_empty__function_guard1 (is_empty1 s1) s1))
     (= (ite (is_empty1 s) 1 0) (ite (is_empty2 us_tag s) 1 0)))) :pattern (
  (is_empty2 us_tag s)) )))

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun temp___String_Literal_245 (tuple0) (Array Int character))

;; temp___String_Literal_245__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 2)) 83))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 3)) 77)
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 5)) 83))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 6)) 116)
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 7)) 97))
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 8)) 99)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 9)) 107)
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 11)) 119))
     (and
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 12)) 111)
     (= (to_rep (select (temp___String_Literal_245 us_void_param) 13)) 110))))) :pattern (
  (temp___String_Literal_245 us_void_param)) )))

(declare-fun temp___String_Literal_246 (tuple0) (Array Int character))

;; temp___String_Literal_246__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 1)) 71)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 2)) 97))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 3)) 109)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 4)) 101))
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 5)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 6)) 111)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 7)) 118)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 8)) 101)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 9)) 114))
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 10)) 32)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 11)) 109))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 12)) 97)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 13)) 116))
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 14)) 99))
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 15)) 104)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 16)) 32)))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 17)) 110)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 18)) 117))
     (and
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 19)) 108)
     (= (to_rep (select (temp___String_Literal_246 us_void_param) 20)) 108)))))) :pattern (
  (temp___String_Literal_246 us_void_param)) )))

(declare-fun temp___String_Literal_247 (tuple0) (Array Int character))

;; temp___String_Literal_247__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 1)) 65)
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 2)) 83))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 3)) 77)
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 5)) 83))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 6)) 116)
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 7)) 97))
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 8)) 99)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 9)) 107)
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 11)) 119))
     (and
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 12)) 111)
     (= (to_rep (select (temp___String_Literal_247 us_void_param) 13)) 110))))) :pattern (
  (temp___String_Literal_247 us_void_param)) )))

(define-fun dynamic_invariant1 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant2 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(define-fun dynamic_invariant3 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(define-fun dynamic_invariant4 ((temp___expr_204 Int)
  (temp___is_init_200 Bool) (temp___skip_constant_201 Bool)
  (temp___do_toplevel_202 Bool)
  (temp___do_typ_inv_203 Bool)) Bool (=>
                                     (or (= temp___is_init_200 true)
                                     (<= 0 100)) (in_range4 temp___expr_204)))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (count count) Bool)

(declare-const dummy7 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant5 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_166)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant5
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant5
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(declare-const my_stack__split_fields us_split_fields)

(declare-const a Int)

(declare-const x Int)

;; H
  (assert (= x 0))

;; Assume
  (assert (dynamic_invariant x true false true true))

(declare-const y Int)

;; H
  (assert (= y 0))

;; Assume
  (assert (dynamic_invariant y true false true true))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk my_stack__split_fields my_stack__attr__tag) false))

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant a false false true true))

(declare-const stack_vector us_private)

(declare-const x1 Int)

(declare-const y1 Int)

(declare-const my_stack__split_fields1 us_split_fields)

(declare-const a1 Int)

;; Assume
  (assert
  (and
  (and (dynamic_invariant a1 false true true true) (dynamic_invariant 
  x1 true true true true)) (dynamic_invariant y1 true true true true)))

(declare-const stack_top us_private)

(define-fun o () Int (pop1 stack_top stack_vector))

;; H
  (assert (pop__function_guard o stack_top stack_vector))

;; H
  (assert (dynamic_invariant o true false true true))

(define-fun o1 () Int (+ x1 o))

;; Ensures
  (assert (in_range1 o1))

(declare-const x2 Int)

;; H
  (assert (= x2 o1))

(declare-const my_stack__split_fields2 us_split_fields)

(declare-const a2 Int)

;; H
  (assert true)

;; H
  (assert (dynamic_invariant a2 true true true true))

(define-fun o2 () Int (+ y1 a2))

(assert
;; defqtvc
 ;; File "main.adb", line 5, characters 0-0
  (not (in_range1 o2)))
(check-sat)
