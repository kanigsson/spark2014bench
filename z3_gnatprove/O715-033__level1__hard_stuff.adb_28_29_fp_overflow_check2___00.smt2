;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
;;; SMT-LIB2: real arithmetic
(define-fun fp.isFinite32 ((x Float32)) Bool (not (or (fp.isInfinite x) (fp.isNaN x))))
(define-fun fp.isIntegral32 ((x Float32)) Bool (or (fp.isZero x) (and (fp.isNormal x) (= x (fp.roundToIntegral RNE x)))))
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun pow2 (Int) Int)

(define-fun is_plus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                (fp.isPositive x)))

(define-fun is_minus_infinity ((x Float32)) Bool (and (fp.isInfinite x)
                                                 (fp.isNegative x)))

(define-fun is_plus_zero ((x Float32)) Bool (and (fp.isZero x)
                                            (fp.isPositive x)))

(define-fun is_minus_zero ((x Float32)) Bool (and (fp.isZero x)
                                             (fp.isNegative x)))

(declare-fun of_int (RoundingMode Int) Float32)

(declare-const max_int Int)

(define-fun in_int_range ((i Int)) Bool (and (<= (- max_int) i)
                                        (<= i max_int)))

(define-fun in_safe_int_range ((i Int)) Bool (and (<= (- 16777216) i)
                                             (<= i 16777216)))

(define-fun same_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isPositive y))
                    (and (fp.isNegative x) (fp.isNegative y))))

(define-fun diff_sign ((x Float32)
  (y Float32)) Bool (or (and (fp.isPositive x) (fp.isNegative y))
                    (and (fp.isNegative x) (fp.isPositive y))))

(define-fun product_sign ((z Float32) (x Float32)
  (y Float32)) Bool (and (=> (same_sign x y) (fp.isPositive z))
                    (=> (diff_sign x y) (fp.isNegative z))))

(define-fun sqr ((x Real)) Real (* x x))

(declare-fun sqrt1 (Real) Real)

(define-fun same_sign_real ((x Float32)
  (r Real)) Bool (or (and (fp.isPositive x) (< 0.0 r))
                 (and (fp.isNegative x) (< r 0.0))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content Float32)))))
(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort float__ 0)

(declare-fun user_eq (float__ float__) Bool)

(declare-fun attr__ATTRIBUTE_IMAGE1 (Float32) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Float32)

(declare-const dummy float__)

(declare-datatypes ()
((float____ref (float____refqtmk (float____content float__)))))
(define-fun float____ref_float____content__projection ((a float____ref)) float__ 
  (float____content a))

(define-fun dynamic_invariant ((temp___expr_60 Float32)
  (temp___is_init_56 Bool) (temp___skip_constant_57 Bool)
  (temp___do_toplevel_58 Bool)
  (temp___do_typ_inv_59 Bool)) Bool (=>
                                    (or (= temp___is_init_56 true)
                                    (fp.leq (fp.neg (fp #b0 #b11111110 #b11111111111111111111111)) (fp #b0 #b11111110 #b11111111111111111111111)))
                                    (fp.isFinite32 temp___expr_60)))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const copy Float32)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const x Float32)

;; Assume
  (assert (dynamic_invariant x true false true true))

(declare-const spark__branch Bool)

(declare-const x1 Float32)

;; H
  (assert
  (= spark__branch (and (ite (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) 
                        x) true false) (ite (fp.leq x (fp #b0 #b01111111 #b00000000000000000000000))
                                       true false))))

;; H
  (assert
  (ite (= spark__branch true)
  (let ((o (fp.add RNE x x)))
  (and (fp.isFinite32 o)
  (and (= x1 o)
  (and (fp.leq (fp.neg (fp #b0 #b10000000 #b00000000000000000000000)) 
  x1) (fp.leq x1 (fp #b0 #b10000000 #b00000000000000000000000)))))) (= 
  x1 x)))

(declare-const spark__branch1 Bool)

(declare-const x2 Float32)

;; H
  (assert
  (= spark__branch1 (and (ite (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) 
                         x1) true false) (ite (fp.leq x1 (fp #b0 #b01111111 #b00000000000000000000000))
                                         true false))))

;; H
  (assert
  (ite (= spark__branch1 true)
  (let ((o (fp.mul RNE x1 (fp #b0 #b10000000 #b00000000000000000000000))))
  (and (fp.isFinite32 o)
  (and (= x2 o)
  (and (fp.leq (fp.neg (fp #b0 #b10000000 #b00000000000000000000000)) 
  x2) (fp.leq x2 (fp #b0 #b10000000 #b00000000000000000000000))))))
  (= x2 x1)))

(declare-const spark__branch2 Bool)

(declare-const x3 Float32)

;; H
  (assert
  (= spark__branch2 (and (ite (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) 
                         x2) true false) (ite (fp.leq x2 (fp #b0 #b01111111 #b00000000000000000000000))
                                         true false))))

;; H
  (assert
  (ite (= spark__branch2 true)
  (let ((o (fp.mul RNE x2 x2)))
  (and (fp.isFinite32 o)
  (and (= x3 o)
  (and (fp.leq (fp.neg (fp #b0 #b01111111 #b00000000000000000000000)) 
  x3) (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))))))
  (= x3 x2)))

(declare-const spark__branch3 Bool)

;; H
  (assert
  (= spark__branch3 (ite (exists ((y Int))
                         (and (and (<= 0 y) (<= y 100000))
                         (fp.eq x3 (fp.mul RNE (fp.div RNE (of_int RNE y) (fp #b0 #b10001111 #b10000110101000000000000)) (fp.div RNE 
                         (of_int RNE y) (fp #b0 #b10001111 #b10000110101000000000000))))))
                    true false)))

;; H
  (assert
  (or (not (= spark__branch3 true))
  (and (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) x3)
  (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000)))))

;; Assume
  (assert (= x3 copy))

;; Assume
  (assert (dynamic_invariant copy true false true true))

(declare-const spark__branch4 Bool)

;; H
  (assert
  (= spark__branch4 (and (ite (fp.leq (fp #b0 #b00000000 #b00000000000000000000000) 
                         x3) true false) (ite (fp.leq x3 (fp #b0 #b01111111 #b00000000000000000000000))
                                         true false))))

;; H
  (assert (= spark__branch4 true))

(define-fun o () Float32 (fp.mul RNE x3 x3))

;; Ensures
  (assert (fp.isFinite32 o))

(define-fun o1 () Float32 (fp.mul RNE o x3))

;; Ensures
  (assert (fp.isFinite32 o1))

(define-fun o2 () Float32 (fp.mul RNE o1 x3))

(assert
;; defqtvc
 ;; File "hard_stuff.adb", line 1, characters 0-0
  (not (fp.isFinite32 o2)))
(check-sat)
