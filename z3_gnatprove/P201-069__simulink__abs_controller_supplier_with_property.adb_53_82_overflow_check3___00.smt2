(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun nth ((_ BitVec 32) Int) Bool)

(declare-fun lsr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun asr ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun lsl ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun rotate_right1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun rotate_left1 ((_ BitVec 32) Int) (_ BitVec 32))

(declare-fun pow2 (Int) Int)

(define-fun to_int1 ((x (_ BitVec 32))) Int (ite (bvsge x (_ bv0 32))
                                            (bv2int x)
                                            (- (- 4294967296 (bv2int x)))))

(define-fun uint_in_range ((i Int)) Bool (and (<= 0 i) (<= i 4294967295)))

(declare-fun nth_bv ((_ BitVec 32) (_ BitVec 32)) Bool)

(declare-fun eq_sub_bv ((_ BitVec 32) (_ BitVec 32) (_ BitVec 32)
  (_ BitVec 32)) Bool)

(define-fun eq_sub ((a (_ BitVec 32)) (b (_ BitVec 32)) (i Int)
  (n Int)) Bool (forall ((j Int))
                (=> (and (<= i j) (< j (+ i n))) (= (nth a j) (nth b j)))))

(declare-datatypes () ((t__ref (t__refqtmk (t__content (_ BitVec 32))))))
(declare-fun power ((_ BitVec 32) Int) (_ BitVec 32))

(define-fun bv_min ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) x y))

(define-fun bv_max ((x (_ BitVec 32))
  (y (_ BitVec 32))) (_ BitVec 32) (ite (bvule x y) y x))

(define-fun min ((x Int) (y Int)) Int (ite (<= x y) x y))

(define-fun max ((x Int) (y Int)) Int (ite (<= x y) y x))

;; Min_r
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (min x y) y))))

;; Max_l
  (assert (forall ((x Int) (y Int)) (=> (<= y x) (= (max x y) x))))

;; Min_comm
  (assert (forall ((x Int) (y Int)) (= (min x y) (min y x))))

;; Max_comm
  (assert (forall ((x Int) (y Int)) (= (max x y) (max y x))))

;; Min_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (min (min x y) z) (min x (min y z)))))

;; Max_assoc
  (assert
  (forall ((x Int) (y Int) (z Int)) (= (max (max x y) z) (max x (max y z)))))

(declare-const wheel_speed (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const vehicle_speed (_ BitVec 32))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun boolean_to_integer_8 (Bool) Int)

(declare-fun boolean_to_integer_8__function_guard (Int Bool) Bool)

(declare-sort integer_8 0)

(declare-fun integer_8qtint (integer_8) Int)

;; integer_8'axiom
  (assert
  (forall ((i integer_8))
  (and (<= (- 128) (integer_8qtint i)) (<= (integer_8qtint i) 127))))

(define-fun in_range ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer_8 integer_8) Bool)

(declare-const dummy integer_8)

(declare-datatypes ()
((integer_8__ref (integer_8__refqtmk (integer_8__content integer_8)))))
(define-fun integer_8__ref_integer_8__content__2__projection ((a integer_8__ref)) integer_8 
  (integer_8__content a))

(define-fun dynamic_invariant ((temp___expr_173 Int)
  (temp___is_init_169 Bool) (temp___skip_constant_170 Bool)
  (temp___do_toplevel_171 Bool)
  (temp___do_typ_inv_172 Bool)) Bool (=>
                                     (or (= temp___is_init_169 true)
                                     (<= (- 128) 127)) (in_range
                                     temp___expr_173)))

;; boolean_to_integer_8__post_axiom
  (assert
  (forall ((b Bool))
  (! (let ((result (boolean_to_integer_8 b)))
     (=> (boolean_to_integer_8__function_guard result b) (dynamic_invariant
     result true false true true))) :pattern ((boolean_to_integer_8 b)) )))

(declare-sort unsigned_32 0)

(declare-const attr__ATTRIBUTE_MODULUS (_ BitVec 32))

(declare-fun attr__ATTRIBUTE_IMAGE1 ((_ BitVec 32)) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) (_ BitVec 32))

(declare-fun user_eq1 (unsigned_32 unsigned_32) Bool)

(declare-const dummy1 unsigned_32)

(declare-datatypes ()
((unsigned_32__ref (unsigned_32__refqtmk (unsigned_32__content unsigned_32)))))
(define-fun unsigned_32__ref_unsigned_32__content__projection ((a unsigned_32__ref)) unsigned_32 
  (unsigned_32__content a))

(define-fun dynamic_invariant1 ((temp___expr_159 (_ BitVec 32))
  (temp___is_init_155 Bool) (temp___skip_constant_156 Bool)
  (temp___do_toplevel_157 Bool) (temp___do_typ_inv_158 Bool)) Bool true)

(declare-sort tinteger_32B 0)

(declare-fun tinteger_32Bqtint (tinteger_32B) Int)

;; tinteger_32B'axiom
  (assert
  (forall ((i tinteger_32B))
  (and (<= (- 2147483648) (tinteger_32Bqtint i))
  (<= (tinteger_32Bqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (tinteger_32B tinteger_32B) Bool)

(declare-const dummy2 tinteger_32B)

(declare-datatypes ()
((tinteger_32B__ref
 (tinteger_32B__refqtmk (tinteger_32B__content tinteger_32B)))))
(define-fun tinteger_32B__ref_tinteger_32B__content__projection ((a tinteger_32B__ref)) tinteger_32B 
  (tinteger_32B__content a))

(declare-sort integer_32 0)

(declare-fun integer_32qtint (integer_32) Int)

;; integer_32'axiom
  (assert
  (forall ((i integer_32))
  (and (<= (- 2147483648) (integer_32qtint i))
  (<= (integer_32qtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer_32 integer_32) Bool)

(declare-const dummy3 integer_32)

(declare-datatypes ()
((integer_32__ref (integer_32__refqtmk (integer_32__content integer_32)))))
(define-fun integer_32__ref_integer_32__content__2__projection ((a integer_32__ref)) integer_32 
  (integer_32__content a))

(define-fun dynamic_invariant2 ((temp___expr_166 Int)
  (temp___is_init_162 Bool) (temp___skip_constant_163 Bool)
  (temp___do_toplevel_164 Bool)
  (temp___do_typ_inv_165 Bool)) Bool (=>
                                     (or (= temp___is_init_162 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_166)))

(declare-sort tinteger_8B 0)

(declare-fun tinteger_8Bqtint (tinteger_8B) Int)

;; tinteger_8B'axiom
  (assert
  (forall ((i tinteger_8B))
  (and (<= (- 128) (tinteger_8Bqtint i)) (<= (tinteger_8Bqtint i) 127))))

(define-fun in_range3 ((x Int)) Bool (and (<= (- 128) x) (<= x 127)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (tinteger_8B tinteger_8B) Bool)

(declare-const dummy4 tinteger_8B)

(declare-datatypes ()
((tinteger_8B__ref (tinteger_8B__refqtmk (tinteger_8B__content tinteger_8B)))))
(define-fun tinteger_8B__ref_tinteger_8B__content__projection ((a tinteger_8B__ref)) tinteger_8B 
  (tinteger_8B__content a))

(declare-const apply_brakes Int)

(declare-const sum_out1 Int)

(declare-const sum_1_out1 Int)

(declare-const at_rest_switch_out1 Int)

(declare-const sum_1_out1_sat Int)

;; Assume
  (assert (dynamic_invariant1 wheel_speed true false true true))

;; Assume
  (assert (dynamic_invariant1 vehicle_speed true false true true))

;; Assume
  (assert (dynamic_invariant2 apply_brakes false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 sum_out1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant sum_1_out1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 at_rest_switch_out1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant2 sum_1_out1_sat false false true true))

(declare-const spark__branch Bool)

;; H
  (assert
  (= spark__branch (ite (bvugt vehicle_speed #x00000000) true false)))

;; H
  (assert (= spark__branch true))

(define-fun o () Int (bv2int (bvmul #x00000008 vehicle_speed)))

;; Ensures
  (assert (in_range2 o))

(define-fun o1 () Int (bv2int (bvmul #x0000000A wheel_speed)))

;; Ensures
  (assert (in_range2 o1))

(define-fun o2 () Int (- o1 o))

;; Ensures
  (assert (in_range1 o2))

(declare-const sum_out11 Int)

;; H
  (assert (= sum_out11 o2))

(define-fun o3 () Bool (ite (< sum_out11 0) true false))

(define-fun o4 () Int (boolean_to_integer_8 o3))

;; H
  (assert (boolean_to_integer_8__function_guard o4 o3))

;; H
  (assert (dynamic_invariant o4 true false true true))

(define-fun o5 () Bool (ite (< 0 sum_out11) true false))

(define-fun o6 () Int (boolean_to_integer_8 o5))

;; H
  (assert (boolean_to_integer_8__function_guard o6 o5))

;; H
  (assert (dynamic_invariant o6 true false true true))

(define-fun o7 () Int (- o6 o4))

(assert
;; defqtvc
 ;; File "abs_controller_supplier_with_property.ads", line 19, characters 0-0
  (not (in_range3 o7)))
(check-sat)
