(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort status 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (status status) Bool)

(declare-const dummy status)

(declare-datatypes ()
((status__ref (status__refqtmk (status__content status)))))
(define-fun status__ref_status__content__projection ((a status__ref)) status 
  (status__content a))

(declare-fun to_rep (status) Int)

(declare-fun of_rep (Int) status)

;; inversion_axiom
  (assert
  (forall ((x status)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x status)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int status))))))
(declare-fun slide ((Array Int status) Int Int) (Array Int status))

;; slide_eq
  (assert
  (forall ((a (Array Int status)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int status)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int status)) (a__first Int) (a__last Int)
  (b (Array Int status)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_154 Int))
                           (=>
                           (and (<= a__first temp___idx_154)
                           (<= temp___idx_154 a__last))
                           (= (to_rep (select a temp___idx_154)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_154)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int status)) (b (Array Int status)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_154 Int))
  (=> (and (<= a__first temp___idx_154) (<= temp___idx_154 a__last))
  (= (to_rep (select a temp___idx_154)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_154)))))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq1 (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((set__ref (set__refqtmk (set__content us_rep)))))
(define-fun set__ref_set__content__projection ((a set__ref)) us_rep (set__content
                                                                    a))

(declare-fun is_empty (us_rep) Bool)

(declare-fun is_empty__function_guard (Bool us_rep) Bool)

(declare-fun mem (us_rep Int) Bool)

(declare-fun mem__function_guard (Bool us_rep Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 0 (element_typeqtint i)) (<= (element_typeqtint i) 3))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq2 (element_type element_type) Bool)

(declare-const dummy2 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (and
     (forall ((a1 us_rep) (b1 us_rep)) (oeq__function_guard (oeq a1 b1) a1
     b1)) (= (user_eq1 a b) (oeq a b))) :pattern ((user_eq1 a b)) )))

;; temp___result_227'def
  (assert
  (forall ((temp___226 us_rep)) (is_empty__function_guard
  (is_empty temp___226) temp___226)))

(define-fun default_initial_assumption ((temp___expr_224 us_rep)
  (temp___skip_top_level_225 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_225 true))
                                         (= (is_empty temp___expr_224) true)))

;; is_empty__post_axiom
  (assert
  (forall ((s us_rep))
  (! (let ((result (is_empty s)))
     (and
     (forall ((s1 us_rep) (e Int)) (mem__function_guard (mem s1 e) s1 e))
     (=> (is_empty__function_guard result s)
     (= (= result true)
     (forall ((e Int)) (not (and (in_range2 e) (= (mem s e) true)))))))) :pattern (
  (is_empty s)) )))

(declare-fun is_add (us_rep Int us_rep) Bool)

(declare-fun is_add__function_guard (Bool us_rep Int us_rep) Bool)

(define-fun dynamic_invariant ((temp___expr_215 Int)
  (temp___is_init_211 Bool) (temp___skip_constant_212 Bool)
  (temp___do_toplevel_213 Bool)
  (temp___do_typ_inv_214 Bool)) Bool (=>
                                     (or (= temp___is_init_211 true)
                                     (<= 0 3)) (in_range2 temp___expr_215)))

;; is_add__post_axiom
  (assert
  (forall ((s us_rep) (result__ us_rep))
  (forall ((e Int))
  (! (=> (dynamic_invariant e true true true true)
     (let ((result (is_add s e result__)))
     (and
     (forall ((result__1 us_rep) (e1 Int)) (mem__function_guard
     (mem result__1 e1) result__1 e1))
     (and
     (forall ((s1 us_rep) (e1 Int)) (mem__function_guard (mem s1 e1) s1 e1))
     (and
     (forall ((result__1 us_rep) (f Int)) (mem__function_guard
     (mem result__1 f) result__1 f))
     (and
     (forall ((s1 us_rep) (f Int)) (mem__function_guard (mem s1 f) s1 f))
     (and
     (forall ((s1 us_rep) (e1 Int)) (mem__function_guard (mem s1 e1) s1 e1))
     (and
     (forall ((result__1 us_rep) (e1 Int)) (mem__function_guard
     (mem result__1 e1) result__1 e1))
     (=> (is_add__function_guard result s e result__)
     (= (= result true)
     (and
     (and
     (and (and (not (= e 0)) (= (mem result__ e) true))
     (not (= (mem s e) true)))
     (forall ((f Int))
     (=> (and (in_range2 f) (= (mem result__ f) true))
     (or (= (mem s f) true) (= f e)))))
     (forall ((e1 Int))
     (=> (and (in_range2 e1) (= (mem s e1) true)) (= (mem result__ e1) true)))))))))))))) :pattern (
  (is_add s e result__)) ))))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__allocator__m__t__available us_rep)(rec__allocator__m__t__allocated us_rep)))))
(define-fun us_split_fields_rec__allocator__m__t__available__projection ((a us_split_fields)) us_rep 
  (rec__allocator__m__t__available a))

(define-fun us_split_fields_rec__allocator__m__t__allocated__projection ((a us_split_fields)) us_rep 
  (rec__allocator__m__t__allocated a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (= (user_eq1
                            (rec__allocator__m__t__available
                            (us_split_fields1 a))
                            (rec__allocator__m__t__available
                            (us_split_fields1 b))) true)
                         (= (user_eq1
                            (rec__allocator__m__t__allocated
                            (us_split_fields1 a))
                            (rec__allocator__m__t__allocated
                            (us_split_fields1 b))) true))
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const allocator__m__t__available__first__bit Int)

(declare-const allocator__m__t__available__last__bit Int)

(declare-const allocator__m__t__available__position Int)

;; allocator__m__t__available__first__bit_axiom
  (assert (<= 0 allocator__m__t__available__first__bit))

;; allocator__m__t__available__last__bit_axiom
  (assert
  (< allocator__m__t__available__first__bit allocator__m__t__available__last__bit))

;; allocator__m__t__available__position_axiom
  (assert (<= 0 allocator__m__t__available__position))

(declare-const allocator__m__t__allocated__first__bit Int)

(declare-const allocator__m__t__allocated__last__bit Int)

(declare-const allocator__m__t__allocated__position Int)

;; allocator__m__t__allocated__first__bit_axiom
  (assert (<= 0 allocator__m__t__allocated__first__bit))

;; allocator__m__t__allocated__last__bit_axiom
  (assert
  (< allocator__m__t__allocated__first__bit allocator__m__t__allocated__last__bit))

;; allocator__m__t__allocated__position_axiom
  (assert (<= 0 allocator__m__t__allocated__position))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep1)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep1 (t__content a))

(declare-fun oeq1 (us_rep1 us_rep1) Bool)

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (and
     (forall ((a1 us_rep1) (b1 us_rep1)) (oeq__function_guard1 (oeq1 a1 b1)
     a1 b1)) (= (user_eq3 a b) (oeq1 a b))) :pattern ((user_eq3 a b)) )))

;; temp___result_297'def
  (assert
  (forall ((temp___296 us_rep)) (is_empty__function_guard
  (is_empty temp___296) temp___296)))

;; temp___result_300'def
  (assert
  (forall ((temp___299 us_rep)) (is_empty__function_guard
  (is_empty temp___299) temp___299)))

(define-fun default_initial_assumption1 ((temp___expr_293 us_rep1)
  (temp___skip_top_level_294 Bool)) Bool (and
                                         (= (is_empty
                                            (rec__allocator__m__t__available
                                            (us_split_fields1
                                            temp___expr_293))) true)
                                         (= (is_empty
                                            (rec__allocator__m__t__allocated
                                            (us_split_fields1
                                            temp___expr_293))) true)))

;; oeq__post_axiom
  (assert true)

;; oeq__def_axiom
  (assert
  (forall ((x us_rep1) (y us_rep1))
  (! (and
     (forall ((x1 us_rep1) (y1 us_rep1)) (oeq__function_guard
     (oeq (rec__allocator__m__t__available (us_split_fields1 x1))
     (rec__allocator__m__t__available (us_split_fields1 y1)))
     (rec__allocator__m__t__available (us_split_fields1 x1))
     (rec__allocator__m__t__available (us_split_fields1 y1))))
     (and
     (forall ((x1 us_rep1) (y1 us_rep1)) (oeq__function_guard
     (oeq (rec__allocator__m__t__allocated (us_split_fields1 x1))
     (rec__allocator__m__t__allocated (us_split_fields1 y1)))
     (rec__allocator__m__t__allocated (us_split_fields1 x1))
     (rec__allocator__m__t__allocated (us_split_fields1 y1))))
     (= (= (oeq1 x y) true)
     (and
     (= (oeq (rec__allocator__m__t__available (us_split_fields1 x))
        (rec__allocator__m__t__available (us_split_fields1 y))) true)
     (= (oeq (rec__allocator__m__t__allocated (us_split_fields1 x))
        (rec__allocator__m__t__allocated (us_split_fields1 y))) true))))) :pattern (
  (oeq1 x y)) )))

(declare-fun model1 ((Array Int status)) us_rep1)

(declare-fun model__function_guard (us_rep1 (Array Int status)) Bool)

(declare-fun is_valid (us_rep1 (Array Int status)) Bool)

(declare-fun is_valid__function_guard (Bool us_rep1 (Array Int status)) Bool)

;; model__post_axiom
  (assert
  (forall ((allocator__data (Array Int status)))
  (! (let ((result (model1 allocator__data)))
     (and
     (forall ((allocator__data1 (Array Int status)) (result1 us_rep1))
     (is_valid__function_guard (is_valid result1 allocator__data1) result1
     allocator__data1))
     (=> (model__function_guard result allocator__data)
     (= (is_valid result allocator__data) true)))) :pattern ((model1
                                                             allocator__data)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-sort resource 0)

(declare-fun resourceqtint (resource) Int)

;; resource'axiom
  (assert
  (forall ((i resource))
  (and (<= 0 (resourceqtint i)) (<= (resourceqtint i) 3))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (resource resource) Bool)

(declare-const dummy4 resource)

(declare-datatypes ()
((resource__ref (resource__refqtmk (resource__content resource)))))
(define-fun resource__ref_resource__content__projection ((a resource__ref)) resource 
  (resource__content a))

(define-fun dynamic_invariant1 ((temp___expr_178 Int)
  (temp___is_init_174 Bool) (temp___skip_constant_175 Bool)
  (temp___do_toplevel_176 Bool)
  (temp___do_typ_inv_177 Bool)) Bool (=>
                                     (or (= temp___is_init_174 true)
                                     (<= 0 3)) (in_range3 temp___expr_178)))

(declare-sort valid_resource 0)

(declare-fun valid_resourceqtint (valid_resource) Int)

;; valid_resource'axiom
  (assert
  (forall ((i valid_resource))
  (and (<= 1 (valid_resourceqtint i)) (<= (valid_resourceqtint i) 3))))

(define-fun in_range4 ((x Int)) Bool (and (<= 1 x) (<= x 3)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (valid_resource valid_resource) Bool)

(declare-const dummy5 valid_resource)

(declare-datatypes ()
((valid_resource__ref
 (valid_resource__refqtmk (valid_resource__content valid_resource)))))
(define-fun valid_resource__ref_valid_resource__content__projection ((a valid_resource__ref)) valid_resource 
  (valid_resource__content a))

(define-fun dynamic_invariant2 ((temp___expr_192 Int)
  (temp___is_init_188 Bool) (temp___skip_constant_189 Bool)
  (temp___do_toplevel_190 Bool)
  (temp___do_typ_inv_191 Bool)) Bool (=>
                                     (or (= temp___is_init_188 true)
                                     (<= 0 1)) (in_range1 temp___expr_192)))

(define-fun dynamic_invariant3 ((temp___expr_185 Int)
  (temp___is_init_181 Bool) (temp___skip_constant_182 Bool)
  (temp___do_toplevel_183 Bool)
  (temp___do_typ_inv_184 Bool)) Bool (=>
                                     (or (= temp___is_init_181 true)
                                     (<= 1 3)) (in_range4 temp___expr_185)))

;; is_valid__post_axiom
  (assert true)

;; is_valid__def_axiom
  (assert
  (forall ((m us_rep1))
  (forall ((allocator__data (Array Int status)))
  (! (and
     (forall ((temp___315 us_rep) (e Int)) (mem__function_guard
     (mem temp___315 e) temp___315 e))
     (and
     (forall ((temp___317 us_rep) (e Int)) (mem__function_guard
     (mem temp___317 e) temp___317 e))
     (and
     (forall ((m1 us_rep1) (r Int)) (mem__function_guard
     (mem (rec__allocator__m__t__available (us_split_fields1 m1)) r)
     (rec__allocator__m__t__available (us_split_fields1 m1)) r))
     (and
     (forall ((m1 us_rep1) (r Int)) (mem__function_guard
     (mem (rec__allocator__m__t__allocated (us_split_fields1 m1)) r)
     (rec__allocator__m__t__allocated (us_split_fields1 m1)) r))
     (and
     (forall ((m1 us_rep1) (r Int)) (mem__function_guard
     (mem (rec__allocator__m__t__available (us_split_fields1 m1)) r)
     (rec__allocator__m__t__available (us_split_fields1 m1)) r))
     (and
     (forall ((m1 us_rep1) (r Int)) (mem__function_guard
     (mem (rec__allocator__m__t__allocated (us_split_fields1 m1)) r)
     (rec__allocator__m__t__allocated (us_split_fields1 m1)) r))
     (= (= (is_valid m allocator__data) true)
     (and
     (and
     (forall ((e Int))
     (=>
     (and (in_range2 e)
     (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) e) true))
     (in_range4 e)))
     (forall ((e Int))
     (=>
     (and (in_range2 e)
     (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) e) true))
     (in_range4 e))))
     (forall ((r Int))
     (=> (and (<= 1 r) (<= r 3))
     (ite (= (to_rep (select allocator__data r)) 0)
     (and
     (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) r) true)
     (not
     (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) r) true)))
     (and
     (not
     (= (mem (rec__allocator__m__t__available (us_split_fields1 m)) r) true))
     (= (mem (rec__allocator__m__t__allocated (us_split_fields1 m)) r) true))))))))))))) :pattern (
  (is_valid m allocator__data)) ))))

;; mem__post_axiom
  (assert
  (forall ((s us_rep))
  (forall ((e Int))
  (! (=> (dynamic_invariant e true true true true)
     (let ((result (mem s e)))
     (=> (mem__function_guard result s e) (=> (= e 0) (not (= result true)))))) :pattern (
  (mem s e)) ))))

;; oeq__post_axiom
  (assert
  (forall ((s1 us_rep) (s2 us_rep))
  (! (let ((result (oeq s1 s2)))
     (and
     (forall ((s11 us_rep) (e Int)) (mem__function_guard (mem s11 e) s11 e))
     (and
     (forall ((s21 us_rep) (e Int)) (mem__function_guard (mem s21 e) s21 e))
     (and
     (forall ((s21 us_rep) (e Int)) (mem__function_guard (mem s21 e) s21 e))
     (and
     (forall ((s11 us_rep) (e Int)) (mem__function_guard (mem s11 e) s11 e))
     (=> (oeq__function_guard result s1 s2)
     (= (= result true)
     (and
     (forall ((e Int))
     (=> (and (in_range2 e) (= (mem s1 e) true)) (= (mem s2 e) true)))
     (forall ((e Int))
     (=> (and (in_range2 e) (= (mem s2 e) true)) (= (mem s1 e) true))))))))))) :pattern (
  (oeq s1 s2)) )))

(declare-const data (Array Int status))

(declare-const res Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 res false false true true))

;; H
  (assert
  (forall ((data1 (Array Int status))) (model__function_guard (model1 data1)
  data1)))

;; H
  (assert
  (forall ((data1 (Array Int status))) (model__function_guard (model1 data1)
  data1)))

;; H
  (assert
  (forall ((data1 (Array Int status))) (is_empty__function_guard
  (is_empty
  (rec__allocator__m__t__available (us_split_fields1 (model1 data1))))
  (rec__allocator__m__t__available (us_split_fields1 (model1 data1))))))

(define-fun usf () Bool (is_empty
                        (rec__allocator__m__t__available
                        (us_split_fields1 (model1 data)))))

;; H
  (assert
  (forall ((data1 (Array Int status))) (model__function_guard (model1 data1)
  data1)))

(define-fun usf1 () us_rep (rec__allocator__m__t__available
                           (us_split_fields1 (model1 data))))

;; H
  (assert
  (forall ((data1 (Array Int status))) (model__function_guard (model1 data1)
  data1)))

(define-fun usf2 () us_rep1 (model1 data))

;; H
  (assert
  (forall ((data1 (Array Int status))) (model__function_guard (model1 data1)
  data1)))

(define-fun usf3 () us_rep (rec__allocator__m__t__allocated
                           (us_split_fields1 (model1 data))))

(declare-const data1 (Array Int status))

(declare-const res1 Int)

;; H
  (assert
  (or
  (exists ((r Int))
  (and (= r 1)
  (and (= (and (ite (<= 1 r) true false) (ite (<= r 3) true false)) true)
  (exists ((r1 Int))
  (and
  (exists ((temp___loop_entry_415 (Array Int status)))
  (and (= temp___loop_entry_415 data)
  (exists ((o Int))
  (and (= (to_rep (select data r)) o)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o 0) true false))
  (ite (= spark__branch true) (= r1 r)
  (exists ((r2 Int))
  (and
  (and (= (bool_eq data 1 3 temp___loop_entry_415 1 3) true)
  (forall ((rr Int))
  (=> (and (<= 1 rr) (<= rr r2)) (= (to_rep (select data rr)) 1))))
  (and
  (= (and (ite (and (dynamic_invariant1 res false true true true) (in_range4
               r2))
          true false) (ite (and (<= 1 r2) (<= r2 3)) true false)) true)
  (and (not (= r2 3))
  (and (= r1 (+ r2 1))
  (exists ((o1 Int))
  (and (= (to_rep (select data r1)) o1)
  (exists ((spark__branch1 Bool))
  (and (= spark__branch1 (ite (= o1 0) true false)) (= spark__branch1 true)))))))))))))))))
  (exists ((o status))
  (and (= (to_rep o) 1) (and (= data1 (store data r1 o)) (= res1 r1)))))))))
  (and
  (and
  (exists ((r Int))
  (and (= r 1)
  (or
  (not (= (and (ite (<= 1 r) true false) (ite (<= r 3) true false)) true))
  (exists ((temp___loop_entry_415 (Array Int status)))
  (and (= temp___loop_entry_415 data)
  (exists ((o Int))
  (and (= (to_rep (select data r)) o)
  (exists ((spark__branch Bool))
  (and (= spark__branch (ite (= o 0) true false))
  (and (not (= spark__branch true))
  (exists ((r1 Int))
  (and
  (and (= (bool_eq data 1 3 temp___loop_entry_415 1 3) true)
  (forall ((rr Int))
  (=> (and (<= 1 rr) (<= rr r1)) (= (to_rep (select data rr)) 1))))
  (and
  (= (and (ite (and (dynamic_invariant1 res false true true true) (in_range4
               r1))
          true false) (ite (and (<= 1 r1) (<= r1 3)) true false)) true)
  (= r1 3)))))))))))))) (= res1 0)) (= data1 data))))

;; H
  (assert (= usf true))

(assert
;; defqtvc
 ;; File "allocator.ads", line 49, characters 0-0
  (not (= res1 0)))
(check-sat)
