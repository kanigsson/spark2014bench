;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-sort character 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq1 (character character) Bool)

(declare-const dummy1 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(declare-const dummy2 (Array Int character))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq2 ((Array Int character) (Array Int character)) Bool)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__instr__instrument__name (Array Int character))(rec__ext__ us_private)))))
(define-fun us_split_fields_rec__instr__instrument__name__projection ((a us_split_fields)) (Array Int character) 
  (rec__instr__instrument__name a))

(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq1 ((a us_rep)
  (b us_rep)) Bool (ite (= (bool_eq
                           (rec__instr__instrument__name
                           (us_split_fields1 a)) 1 14
                           (rec__instr__instrument__name
                           (us_split_fields1 b)) 1 14) true)
                   true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const instr__instrument__name__first__bit Int)

(declare-const instr__instrument__name__last__bit Int)

(declare-const instr__instrument__name__position Int)

;; instr__instrument__name__first__bit_axiom
  (assert (<= 0 instr__instrument__name__first__bit))

;; instr__instrument__name__last__bit_axiom
  (assert
  (< instr__instrument__name__first__bit instr__instrument__name__last__bit))

;; instr__instrument__name__position_axiom
  (assert (<= 0 instr__instrument__name__position))

(declare-fun user_eq3 (us_rep us_rep) Bool)

(declare-const dummy3 us_rep)

(declare-datatypes ()
((instrument__ref (instrument__refqtmk (instrument__content us_rep)))))
(define-fun instrument__ref_instrument__content__projection ((a instrument__ref)) us_rep 
  (instrument__content a))

(declare-sort sixty 0)

(declare-fun sixtyqtint (sixty) Int)

;; sixty'axiom
  (assert
  (forall ((i sixty)) (and (<= 0 (sixtyqtint i)) (<= (sixtyqtint i) 60))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 60)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq4 (sixty sixty) Bool)

(declare-const dummy4 sixty)

(declare-datatypes () ((sixty__ref (sixty__refqtmk (sixty__content sixty)))))
(define-fun sixty__ref_sixty__content__projection ((a sixty__ref)) sixty 
  (sixty__content a))

(define-fun to_rep1 ((x sixty)) Int (sixtyqtint x))

(declare-fun of_rep1 (Int) sixty)

;; inversion_axiom
  (assert
  (forall ((x sixty))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x sixty)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort twenty_four 0)

(declare-fun twenty_fourqtint (twenty_four) Int)

;; twenty_four'axiom
  (assert
  (forall ((i twenty_four))
  (and (<= 0 (twenty_fourqtint i)) (<= (twenty_fourqtint i) 24))))

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 24)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq5 (twenty_four twenty_four) Bool)

(declare-const dummy5 twenty_four)

(declare-datatypes ()
((twenty_four__ref (twenty_four__refqtmk (twenty_four__content twenty_four)))))
(define-fun twenty_four__ref_twenty_four__content__projection ((a twenty_four__ref)) twenty_four 
  (twenty_four__content a))

(define-fun to_rep2 ((x twenty_four)) Int (twenty_fourqtint x))

(declare-fun of_rep2 (Int) twenty_four)

;; inversion_axiom
  (assert
  (forall ((x twenty_four))
  (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x twenty_four)) (! (in_range3
  (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__instr__clock__seconds sixty)(rec__instr__clock__minutes sixty)(rec__instr__clock__hours twenty_four)(rec__instr__instrument__name1 (Array Int character))(rec__ext__1 us_private)))))
(define-fun us_split_fields_rec__instr__clock__seconds__projection ((a us_split_fields2)) sixty 
  (rec__instr__clock__seconds a))

(define-fun us_split_fields_rec__instr__clock__minutes__projection ((a us_split_fields2)) sixty 
  (rec__instr__clock__minutes a))

(define-fun us_split_fields_rec__instr__clock__hours__projection ((a us_split_fields2)) twenty_four 
  (rec__instr__clock__hours a))

(define-fun us_split_fields_rec__instr__instrument__name__5__projection ((a us_split_fields2)) (Array Int character) 
  (rec__instr__instrument__name1 a))

(define-fun us_split_fields_rec__ext____5__projection ((a us_split_fields2)) us_private 
  (rec__ext__1 a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__5__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep1 (us_repqtmk1 (us_split_fields3 us_split_fields2)(attr__tag1 Int)))))
(define-fun us_rep___split_fields__5__projection ((a us_rep1)) us_split_fields2 
  (us_split_fields3 a))

(define-fun us_rep_attr__tag__5__projection ((a us_rep1)) Int (attr__tag1 a))

(declare-fun hide_ext__ (sixty sixty twenty_four us_private) us_private)

(declare-fun extract__instr__clock__seconds (us_private) sixty)

;; extract__instr__clock__seconds__conv
  (assert
  (forall ((instr__clock__seconds sixty) (instr__clock__minutes sixty))
  (forall ((instr__clock__hours twenty_four))
  (forall ((rec__ext__2 us_private))
  (= (extract__instr__clock__seconds
     (hide_ext__ instr__clock__seconds instr__clock__minutes
     instr__clock__hours rec__ext__2)) instr__clock__seconds)))))

(declare-fun extract__instr__clock__minutes (us_private) sixty)

;; extract__instr__clock__minutes__conv
  (assert
  (forall ((instr__clock__seconds sixty) (instr__clock__minutes sixty))
  (forall ((instr__clock__hours twenty_four))
  (forall ((rec__ext__2 us_private))
  (= (extract__instr__clock__minutes
     (hide_ext__ instr__clock__seconds instr__clock__minutes
     instr__clock__hours rec__ext__2)) instr__clock__minutes)))))

(declare-fun extract__instr__clock__hours (us_private) twenty_four)

;; extract__instr__clock__hours__conv
  (assert
  (forall ((instr__clock__seconds sixty) (instr__clock__minutes sixty))
  (forall ((instr__clock__hours twenty_four))
  (forall ((rec__ext__2 us_private))
  (= (extract__instr__clock__hours
     (hide_ext__ instr__clock__seconds instr__clock__minutes
     instr__clock__hours rec__ext__2)) instr__clock__hours)))))

(declare-fun extract__ext__ (us_private) us_private)

(define-fun to_base ((a us_rep1)) us_rep (us_repqtmk
                                         (us_split_fieldsqtmk
                                         (rec__instr__instrument__name1
                                         (us_split_fields3 a))
                                         (hide_ext__
                                         (rec__instr__clock__seconds
                                         (us_split_fields3 a))
                                         (rec__instr__clock__minutes
                                         (us_split_fields3 a))
                                         (rec__instr__clock__hours
                                         (us_split_fields3 a))
                                         (rec__ext__1 (us_split_fields3 a))))
                                         (attr__tag1 a)))

(define-fun of_base ((r us_rep)) us_rep1 (us_repqtmk1
                                         (us_split_fieldsqtmk1
                                         (extract__instr__clock__seconds
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__instr__clock__minutes
                                         (rec__ext__ (us_split_fields1 r)))
                                         (extract__instr__clock__hours
                                         (rec__ext__ (us_split_fields1 r)))
                                         (rec__instr__instrument__name
                                         (us_split_fields1 r))
                                         (extract__ext__
                                         (rec__ext__ (us_split_fields1 r))))
                                         (attr__tag r)))

(define-fun bool_eq2 ((a us_rep1)
  (b us_rep1)) Bool (ite (and
                         (and
                         (= (to_rep1
                            (rec__instr__clock__seconds (us_split_fields3 a))) 
                         (to_rep1
                         (rec__instr__clock__seconds (us_split_fields3 b))))
                         (= (to_rep1
                            (rec__instr__clock__minutes (us_split_fields3 a))) 
                         (to_rep1
                         (rec__instr__clock__minutes (us_split_fields3 b)))))
                         (and
                         (= (to_rep2
                            (rec__instr__clock__hours (us_split_fields3 a))) 
                         (to_rep2
                         (rec__instr__clock__hours (us_split_fields3 b))))
                         (= (bool_eq
                            (rec__instr__instrument__name1
                            (us_split_fields3 a)) 1 14
                            (rec__instr__instrument__name1
                            (us_split_fields3 b)) 1 14) true)))
                    true false))

(declare-const us_tag1 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const instr__clock__seconds__first__bit Int)

(declare-const instr__clock__seconds__last__bit Int)

(declare-const instr__clock__seconds__position Int)

;; instr__clock__seconds__first__bit_axiom
  (assert (<= 0 instr__clock__seconds__first__bit))

;; instr__clock__seconds__last__bit_axiom
  (assert
  (< instr__clock__seconds__first__bit instr__clock__seconds__last__bit))

;; instr__clock__seconds__position_axiom
  (assert (<= 0 instr__clock__seconds__position))

(declare-const instr__clock__minutes__first__bit Int)

(declare-const instr__clock__minutes__last__bit Int)

(declare-const instr__clock__minutes__position Int)

;; instr__clock__minutes__first__bit_axiom
  (assert (<= 0 instr__clock__minutes__first__bit))

;; instr__clock__minutes__last__bit_axiom
  (assert
  (< instr__clock__minutes__first__bit instr__clock__minutes__last__bit))

;; instr__clock__minutes__position_axiom
  (assert (<= 0 instr__clock__minutes__position))

(declare-const instr__clock__hours__first__bit Int)

(declare-const instr__clock__hours__last__bit Int)

(declare-const instr__clock__hours__position Int)

;; instr__clock__hours__first__bit_axiom
  (assert (<= 0 instr__clock__hours__first__bit))

;; instr__clock__hours__last__bit_axiom
  (assert (< instr__clock__hours__first__bit instr__clock__hours__last__bit))

;; instr__clock__hours__position_axiom
  (assert (<= 0 instr__clock__hours__position))

(declare-const instr__instrument__name__first__bit1 Int)

(declare-const instr__instrument__name__last__bit1 Int)

(declare-const instr__instrument__name__position1 Int)

;; instr__instrument__name__first__bit_axiom
  (assert (<= 0 instr__instrument__name__first__bit1))

;; instr__instrument__name__last__bit_axiom
  (assert
  (< instr__instrument__name__first__bit1 instr__instrument__name__last__bit1))

;; instr__instrument__name__position_axiom
  (assert (<= 0 instr__instrument__name__position1))

(declare-fun user_eq6 (us_rep1 us_rep1) Bool)

(declare-const dummy6 us_rep1)

(declare-datatypes ()
((clock__ref (clock__refqtmk (clock__content us_rep1)))))
(define-fun clock__ref_clock__content__projection ((a clock__ref)) us_rep1 
  (clock__content a))

(declare-fun temp___String_Literal_177 (tuple0) (Array Int character))

;; temp___String_Literal_177__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 1)) 32)
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 2)) 32))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 3)) 32)
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 5)) 32))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 6)) 32)
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 7)) 32))
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 8)) 32)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 9)) 32)
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 11)) 32))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 12)) 32)
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 13)) 32))
     (= (to_rep (select (temp___String_Literal_177 us_void_param) 14)) 32))))) :pattern (
  (temp___String_Literal_177 us_void_param)) )))

(define-fun default_initial_assumption ((temp___expr_274 us_rep1)
  (temp___skip_top_level_275 Bool)) Bool (and
                                         (= (attr__tag1 temp___expr_274) 
                                         us_tag1)
                                         (and
                                         (and
                                         (= (to_rep1
                                            (rec__instr__clock__seconds
                                            (us_split_fields3
                                            temp___expr_274))) 0)
                                         (= (to_rep1
                                            (rec__instr__clock__minutes
                                            (us_split_fields3
                                            temp___expr_274))) 0))
                                         (and
                                         (= (to_rep2
                                            (rec__instr__clock__hours
                                            (us_split_fields3
                                            temp___expr_274))) 0)
                                         (= (rec__instr__instrument__name1
                                            (us_split_fields3
                                            temp___expr_274)) (temp___String_Literal_177
                                                              Tuple0))))))

(declare-const x__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const inc Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(define-fun dynamic_invariant1 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range1 temp___expr_74)))

(define-fun dynamic_invariant2 ((temp___expr_258 Int)
  (temp___is_init_254 Bool) (temp___skip_constant_255 Bool)
  (temp___do_toplevel_256 Bool)
  (temp___do_typ_inv_257 Bool)) Bool (=>
                                     (or (= temp___is_init_254 true)
                                     (<= 0 60)) (in_range2 temp___expr_258)))

(define-fun dynamic_invariant3 ((temp___expr_265 Int)
  (temp___is_init_261 Bool) (temp___skip_constant_262 Bool)
  (temp___do_toplevel_263 Bool)
  (temp___do_typ_inv_264 Bool)) Bool (=>
                                     (or (= temp___is_init_261 true)
                                     (<= 0 24)) (in_range3 temp___expr_265)))

(define-fun default_initial_assumption1 ((temp___expr_175 us_rep)
  (temp___skip_top_level_176 Bool)) Bool (and
                                         (= (attr__tag temp___expr_175) 
                                         us_tag)
                                         (= (rec__instr__instrument__name
                                            (us_split_fields1
                                            temp___expr_175)) (temp___String_Literal_177
                                                              Tuple0))))

(declare-const x__split_fields us_split_fields2)

(declare-const ninc Int)

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant inc true false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant ninc false false true true))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep1 (rec__instr__clock__seconds x__split_fields)) o))

(define-fun o1 () Int (+ o inc))

(assert
;; defqtvc
 ;; File "instr.ads", line 75, characters 0-0
  (not (in_range o1)))
(check-sat)
