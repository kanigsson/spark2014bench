(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort capacity_range 0)

(declare-fun capacity_rangeqtint (capacity_range) Int)

;; capacity_range'axiom
  (assert
  (forall ((i capacity_range))
  (and (<= 0 (capacity_rangeqtint i)) (<= (capacity_rangeqtint i) 100))))

(define-fun in_range2 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (capacity_range capacity_range) Bool)

(declare-const dummy1 capacity_range)

(declare-datatypes ()
((capacity_range__ref
 (capacity_range__refqtmk (capacity_range__content capacity_range)))))
(define-fun capacity_range__ref_capacity_range__content__projection ((a capacity_range__ref)) capacity_range 
  (capacity_range__content a))

(define-fun to_rep1 ((x capacity_range)) Int (capacity_rangeqtint x))

(declare-fun of_rep1 (Int) capacity_range)

;; inversion_axiom
  (assert
  (forall ((x capacity_range))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x capacity_range)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk (rec__list__my_lists__vector__capacity capacity_range)))))
(define-fun us_split_discrs_rec__list__my_lists__vector__capacity__projection ((a us_split_discrs)) capacity_range 
  (rec__list__my_lists__vector__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__list__my_lists__vector us_main_type)))))
(define-fun us_split_fields_rec__list__my_lists__vector__projection ((a us_split_fields)) us_main_type 
  (rec__list__my_lists__vector a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep1
                           (rec__list__my_lists__vector__capacity
                           (us_split_discrs1 a))) (to_rep1
                                                  (rec__list__my_lists__vector__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__list__my_lists__vector (us_split_fields1 a))
                           (rec__list__my_lists__vector (us_split_fields1 b))) true))
                   true false))

(define-fun in_range3 ((rec__list__my_lists__vector__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__list__my_lists__vector__capacity1 
  (to_rep1 (rec__list__my_lists__vector__capacity a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const list__my_lists__vector__capacity__first__bit Int)

(declare-const list__my_lists__vector__capacity__last__bit Int)

(declare-const list__my_lists__vector__capacity__position Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit list__my_lists__vector__capacity__last__bit))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((vector__ref (vector__refqtmk (vector__content us_rep)))))
(define-fun vector__ref_vector__content__projection ((a vector__ref)) us_rep 
  (vector__content a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(define-fun capacity ((container us_rep)) Int (to_rep1
                                              (rec__list__my_lists__vector__capacity
                                              (us_split_discrs1 container))))

(declare-fun capacity__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq2 a b) (oeq a b)) :pattern ((user_eq2 a b)) )))

(define-fun dynamic_invariant1 ((temp___expr_246 Int)
  (temp___is_init_242 Bool) (temp___skip_constant_243 Bool)
  (temp___do_toplevel_244 Bool)
  (temp___do_typ_inv_245 Bool)) Bool (=>
                                     (or (= temp___is_init_242 true)
                                     (<= 0 100)) (in_range2 temp___expr_246)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and (<= result (capacity container)) (dynamic_invariant1 result true
     false true true))) :pattern ((length container)) )))

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq3 (us_rep1 us_rep1) Bool)

(declare-const dummy3 us_rep1)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(declare-fun model1 (us_rep) us_rep1)

(declare-fun model__function_guard (us_rep1 us_rep) Bool)

(define-fun last_index ((container us_rep)) Int (last (model1 container)))

(declare-fun last_index__function_guard (Int us_rep) Bool)

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i)) (<= (extended_indexqtint i) 101))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 101)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq4 (extended_index extended_index) Bool)

(declare-const dummy4 extended_index)

(declare-datatypes ()
((extended_index__ref
 (extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

(define-fun dynamic_invariant2 ((temp___expr_232 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)
  (temp___do_typ_inv_231 Bool)) Bool (=>
                                     (or (= temp___is_init_228 true)
                                     (<= 0 101)) (in_range4 temp___expr_232)))

(declare-fun first_index__function_guard (Int us_rep) Bool)

(declare-sort index_type 0)

(declare-fun index_typeqtint (index_type) Int)

;; index_type'axiom
  (assert
  (forall ((i index_type))
  (and (<= 1 (index_typeqtint i)) (<= (index_typeqtint i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (index_type index_type) Bool)

(declare-const dummy5 index_type)

(declare-datatypes ()
((index_type__ref (index_type__refqtmk (index_type__content index_type)))))
(define-fun index_type__ref_index_type__content__projection ((a index_type__ref)) index_type 
  (index_type__content a))

(define-fun dynamic_invariant3 ((temp___expr_218 Int)
  (temp___is_init_214 Bool) (temp___skip_constant_215 Bool)
  (temp___do_toplevel_216 Bool)
  (temp___do_typ_inv_217 Bool)) Bool (=>
                                     (or (= temp___is_init_214 true)
                                     (<= 1 100)) (in_range5 temp___expr_218)))

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

(define-fun element ((container us_rep)
  (index Int)) Int (get (model1 container) index))

(declare-fun element__function_guard (Int us_rep Int) Bool)

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= (- 2147483648) (element_typeqtint i))
  (<= (element_typeqtint i) 2147483647))))

(define-fun in_range6 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq6 (element_type element_type) Bool)

(declare-const dummy6 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant4 ((temp___expr_225 Int)
  (temp___is_init_221 Bool) (temp___skip_constant_222 Bool)
  (temp___do_toplevel_223 Bool)
  (temp___do_typ_inv_224 Bool)) Bool (=>
                                     (or (= temp___is_init_221 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range6 temp___expr_225)))

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun olt ((left us_rep1)
  (right us_rep1)) Bool (and (< (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun olt__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-const list__my_lists__vector__capacity__first__bit1 Int)

(declare-const list__my_lists__vector__capacity__last__bit1 Int)

(declare-const list__my_lists__vector__capacity__position1 Int)

;; list__my_lists__vector__capacity__first__bit_axiom
  (assert (<= 0 list__my_lists__vector__capacity__first__bit1))

;; list__my_lists__vector__capacity__last__bit_axiom
  (assert
  (< list__my_lists__vector__capacity__first__bit1 list__my_lists__vector__capacity__last__bit1))

;; list__my_lists__vector__capacity__position_axiom
  (assert (<= 0 list__my_lists__vector__capacity__position1))

(declare-fun user_eq7 (us_rep us_rep) Bool)

(declare-const dummy7 us_rep)

(declare-datatypes () ((list__ref (list__refqtmk (list__content us_rep)))))
(define-fun list__ref_list__content__projection ((a list__ref)) us_rep 
  (list__content a))

(declare-const l us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-sort r1 0)

(declare-fun r1qtint (r1) Int)

;; r1'axiom
  (assert (forall ((i r1)) (and (<= 0 (r1qtint i)) (<= (r1qtint i) 100))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (r1 r1) Bool)

(declare-const dummy8 r1)

(declare-datatypes () ((r1__ref (r1__refqtmk (r1__content r1)))))
(define-fun r1__ref_r1__content__projection ((a r1__ref)) r1 (r1__content a))

(define-fun to_rep2 ((x r1)) Int (r1qtint x))

(declare-fun of_rep2 (Int) r1)

;; inversion_axiom
  (assert
  (forall ((x r1)) (! (= (of_rep2 (to_rep2 x)) x) :pattern ((to_rep2 x)) )))

;; range_axiom
  (assert
  (forall ((x r1)) (! (in_range7 (to_rep2 x)) :pattern ((to_rep2 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range7 x) (= (to_rep2 (of_rep2 x)) x)) :pattern ((to_rep2
                                                              (of_rep2 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int integer))))))
(declare-fun slide ((Array Int integer) Int Int) (Array Int integer))

;; slide_eq
  (assert
  (forall ((a (Array Int integer)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq2 ((a (Array Int integer)) (a__first Int) (a__last Int)
  (b (Array Int integer)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_201 Int))
                           (=>
                           (and (<= a__first temp___idx_201)
                           (<= temp___idx_201 a__last))
                           (= (to_rep (select a temp___idx_201)) (to_rep
                                                                 (select b (+ (- b__first a__first) temp___idx_201)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq2 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_201 Int))
  (=> (and (<= a__first temp___idx_201) (<= temp___idx_201 a__last))
  (= (to_rep (select a temp___idx_201)) (to_rep
                                        (select b (+ (- b__first a__first) temp___idx_201)))))))))))

(declare-const dummy9 (Array Int integer))

(declare-const value__size3 Int)

(declare-const object__size3 Int)

(declare-const component__size Int)

(declare-const alignment3 Int)

;; value__size_axiom
  (assert (<= 0 value__size3))

;; object__size_axiom
  (assert (<= 0 object__size3))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment3))

(declare-fun user_eq9 ((Array Int integer) (Array Int integer)) Bool)

(declare-datatypes ()
((us_split_fields2
 (us_split_fieldsqtmk1
 (rec__stack__stack__top r1)(rec__stack__stack__content (Array Int integer))))))
(define-fun us_split_fields_rec__stack__stack__top__projection ((a us_split_fields2)) r1 
  (rec__stack__stack__top a))

(define-fun us_split_fields_rec__stack__stack__content__projection ((a us_split_fields2)) (Array Int integer) 
  (rec__stack__stack__content a))

(declare-datatypes ()
((us_split_fields__ref1
 (us_split_fields__refqtmk1 (us_split_fields__content1 us_split_fields2)))))
(define-fun us_split_fields__ref___split_fields__content__2__projection ((a us_split_fields__ref1)) us_split_fields2 
  (us_split_fields__content1 a))

(declare-datatypes ()
((us_rep2 (us_repqtmk1 (us_split_fields3 us_split_fields2)))))
(define-fun us_rep___split_fields__2__projection ((a us_rep2)) us_split_fields2 
  (us_split_fields3 a))

(define-fun bool_eq3 ((a us_rep2)
  (b us_rep2)) Bool (ite (and
                         (= (to_rep2
                            (rec__stack__stack__top (us_split_fields3 a))) 
                         (to_rep2
                         (rec__stack__stack__top (us_split_fields3 b))))
                         (= (bool_eq2
                            (rec__stack__stack__content (us_split_fields3 a))
                            1 100
                            (rec__stack__stack__content (us_split_fields3 b))
                            1 100) true))
                    true false))

(declare-const value__size4 Int)

(declare-const object__size4 Int)

(declare-const alignment4 Int)

;; value__size_axiom
  (assert (<= 0 value__size4))

;; object__size_axiom
  (assert (<= 0 object__size4))

;; alignment_axiom
  (assert (<= 0 alignment4))

(declare-const stack__stack__top__first__bit Int)

(declare-const stack__stack__top__last__bit Int)

(declare-const stack__stack__top__position Int)

;; stack__stack__top__first__bit_axiom
  (assert (<= 0 stack__stack__top__first__bit))

;; stack__stack__top__last__bit_axiom
  (assert (< stack__stack__top__first__bit stack__stack__top__last__bit))

;; stack__stack__top__position_axiom
  (assert (<= 0 stack__stack__top__position))

(declare-const stack__stack__content__first__bit Int)

(declare-const stack__stack__content__last__bit Int)

(declare-const stack__stack__content__position Int)

;; stack__stack__content__first__bit_axiom
  (assert (<= 0 stack__stack__content__first__bit))

;; stack__stack__content__last__bit_axiom
  (assert
  (< stack__stack__content__first__bit stack__stack__content__last__bit))

;; stack__stack__content__position_axiom
  (assert (<= 0 stack__stack__content__position))

(declare-fun user_eq10 (us_rep2 us_rep2) Bool)

(declare-const dummy10 us_rep2)

(declare-datatypes ()
((stack__ref (stack__refqtmk (stack__content us_rep2)))))
(define-fun stack__ref_stack__content__projection ((a stack__ref)) us_rep2 
  (stack__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq11 (positive positive) Bool)

(declare-const dummy11 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last1 (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l1 Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l1)
     (and (= (to_rep (first (mk f l1))) f) (= (to_rep (last1 (mk f l1))) l1)))) :pattern (
  (mk f l1)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range8 low) (in_range8 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int integer))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int integer) (elts a))

(define-fun of_array ((a (Array Int integer)) (f Int)
  (l1 Int)) us_t (us_tqtmk a (mk f l1)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last2 ((a us_t)) Int (to_rep (last1 (rt a))))

(define-fun length3 ((a us_t)) Int (ite (<= (first1 a) (last2 a))
                                   (+ (- (last2 a) (first1 a)) 1) 0))

(declare-const value__size5 Int)

(declare-const object__size5 Int)

(declare-const component__size1 Int)

(declare-const alignment5 Int)

;; value__size_axiom
  (assert (<= 0 value__size5))

;; object__size_axiom
  (assert (<= 0 object__size5))

;; component__size_axiom
  (assert (<= 0 component__size1))

;; alignment_axiom
  (assert (<= 0 alignment5))

(define-fun bool_eq4 ((x us_t)
  (y us_t)) Bool (bool_eq2 (elts x) (to_rep (first (rt x)))
                 (to_rep (last1 (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last1 (rt y)))))

(declare-fun user_eq12 (us_t us_t) Bool)

(declare-const dummy12 us_t)

(declare-datatypes () ((m__ref (m__refqtmk (m__content us_t)))))
(define-fun m__ref_m__content__projection ((a m__ref)) us_t (m__content a))

(declare-fun to__ (us_rep2) us_t)

(declare-fun to____function_guard (us_t us_rep2) Bool)

(define-fun dynamic_invariant5 ((temp___expr_429 us_t)
  (temp___is_init_425 Bool) (temp___skip_constant_426 Bool)
  (temp___do_toplevel_427 Bool)
  (temp___do_typ_inv_428 Bool)) Bool (=>
                                     (not (= temp___skip_constant_426 true))
                                     (dynamic_property 1 2147483647
                                     (first1 temp___expr_429)
                                     (last2 temp___expr_429))))

;; to____post_axiom
  (assert
  (forall ((s us_rep2))
  (! (let ((result (to__ s)))
     (=> (to____function_guard result s)
     (and (and (= (first1 result) 1) (<= 0 (last2 result)))
     (dynamic_invariant5 result true false true true)))) :pattern ((to__ s)) )))

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

(declare-fun empty_stack (tuple0) us_rep2)

(declare-fun empty_stack__function_guard (us_rep2 tuple0) Bool)

;; empty_stack__post_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (let ((result (empty_stack us_void_param)))
     (and
     (forall ((result1 us_rep2)) (is_empty__function_guard (is_empty result1)
     result1))
     (=> (empty_stack__function_guard result us_void_param)
     (= (is_empty result) true)))) :pattern ((empty_stack us_void_param)) )))

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const first2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const last3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const res__split_discrs us_split_discrs)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun is_empty1 (us_rep) Bool)

(declare-fun is_empty__function_guard1 (Bool us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq7 a b) (oeq a b)) :pattern ((user_eq7 a b)) )))

(define-fun dynamic_invariant6 ((temp___expr_383 us_rep)
  (temp___is_init_379 Bool) (temp___skip_constant_380 Bool)
  (temp___do_toplevel_381 Bool)
  (temp___do_typ_inv_382 Bool)) Bool (=>
                                     (not (= temp___skip_constant_380 true))
                                     (in_range3 100
                                     (us_split_discrs1 temp___expr_383))))

(define-fun default_initial_assumption ((temp___expr_385 us_rep)
  (temp___skip_top_level_386 Bool)) Bool (and
                                         (= (to_rep1
                                            (rec__list__my_lists__vector__capacity
                                            (us_split_discrs1
                                            temp___expr_385))) 100)
                                         (=>
                                         (not
                                         (= temp___skip_top_level_386 true))
                                         (= (is_empty1 temp___expr_385) true))))

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-fun is_full (us_rep2) Bool)

(declare-fun is_full__function_guard (Bool us_rep2) Bool)

(declare-fun concat1 ((Array Int integer) Int Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_def
  (assert
  (forall ((a (Array Int integer)) (b (Array Int integer)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (integer Int (Array Int integer) Int
  Int) (Array Int integer))

;; concat_singleton_left_def
  (assert
  (forall ((a integer))
  (forall ((b (Array Int integer)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int integer) Int Int
  integer) (Array Int integer))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int integer)))
  (forall ((b integer))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (integer Int integer) (Array Int integer))

;; concat_singletons_def
  (assert
  (forall ((a integer) (b integer))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (integer Int) (Array Int integer))

;; singleton_def
  (assert
  (forall ((v integer))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(declare-sort t11s 0)

(declare-fun t11sqtint (t11s) Int)

;; t11s'axiom
  (assert
  (forall ((i t11s)) (and (<= 1 (t11sqtint i)) (<= (t11sqtint i) 1))))

(define-fun in_range9 ((x Int)) Bool (and (<= 1 x) (<= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE8 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check8 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE8 (us_image) Int)

(declare-fun user_eq13 (t11s t11s) Bool)

(declare-const dummy13 t11s)

(declare-datatypes () ((t11s__ref (t11s__refqtmk (t11s__content t11s)))))
(define-fun t11s__ref_t11s__content__projection ((a t11s__ref)) t11s 
  (t11s__content a))

(declare-fun temp_____aggregate_def_450 (Int) (Array Int integer))

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-fun top (us_rep2) Int)

(declare-fun top__function_guard (Int us_rep2) Bool)

;; top__post_axiom
  (assert
  (forall ((s us_rep2))
  (! (and (forall ((s1 us_rep2)) (is_empty__function_guard (is_empty s1) s1))
     (=> (not (= (is_empty s) true))
     (let ((result (top s)))
     (and (forall ((s1 us_rep2)) (to____function_guard (to__ s1) s1))
     (and (forall ((s1 us_rep2)) (to____function_guard (to__ s1) s1))
     (=> (top__function_guard result s)
     (and
     (= result (to_rep
               (let ((temp___470 (to__ s)))
               (select (to_array temp___470) (last2 (to__ s))))))
     (dynamic_invariant result true false true true)))))))) :pattern (
  (top s)) )))

;; top__def_axiom
  (assert
  (forall ((s us_rep2))
  (! (= (top s) (to_rep
                (let ((temp___473 (rec__stack__stack__content
                                  (us_split_fields3 s))))
                (select temp___473 (to_rep2
                                   (rec__stack__stack__top
                                   (us_split_fields3 s))))))) :pattern (
  (top s)) )))

(declare-datatypes () ((t14s__ref (t14s__refqtmk (t14s__content us_t)))))
(define-fun t14s__ref_t14s__content__projection ((a t14s__ref)) us_t 
  (t14s__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE9 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check9 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE9 (us_image) Int)

(declare-fun user_eq14 (integer integer) Bool)

(declare-const dummy14 integer)

(declare-datatypes () ((t2b__ref (t2b__refqtmk (t2b__content integer)))))
(define-fun t2b__ref_t2b__content__projection ((a t2b__ref)) integer 
  (t2b__content a))

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE10 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check10 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE10 (us_image) Int)

(declare-fun user_eq15 (integer integer) Bool)

(declare-const dummy15 integer)

(declare-datatypes () ((t7b__ref (t7b__refqtmk (t7b__content integer)))))
(define-fun t7b__ref_t7b__content__projection ((a t7b__ref)) integer 
  (t7b__content a))

(define-fun dynamic_invariant7 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range8
                                    temp___expr_46)))

;; first__def_axiom
  (assert (= first2 1))

;; last__def_axiom
  (assert (= last3 (last_index l)))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range10 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE11 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check11 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE11 (us_image) Int)

(declare-fun user_eq16 (count_type count_type) Bool)

(declare-const dummy16 count_type)

(declare-datatypes ()
((count_type__ref (count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun dynamic_invariant8 ((temp___expr_239 Int)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)
  (temp___do_typ_inv_238 Bool)) Bool (=>
                                     (or (= temp___is_init_235 true)
                                     (<= 0 2147483647)) (in_range10
                                     temp___expr_239)))

;; is_full__post_axiom
  (assert true)

;; is_full__def_axiom
  (assert
  (forall ((s us_rep2))
  (! (and (forall ((s1 us_rep2)) (to____function_guard (to__ s1) s1))
     (= (= (is_full s) true) (<= 100 (last2 (to__ s))))) :pattern ((is_full
                                                                   s)) )))

;; is_empty__post_axiom
  (assert true)

;; is_empty__def_axiom
  (assert
  (forall ((s us_rep2))
  (! (and (forall ((s1 us_rep2)) (to____function_guard (to__ s1) s1))
     (= (= (is_empty s) true) (< (last2 (to__ s)) 1))) :pattern ((is_empty s)) )))

;; def_axiom
  (assert
  (forall ((temp___452 Int))
  (=> (dynamic_invariant temp___452 true true true true)
  (= (to_rep (select (temp_____aggregate_def_450 temp___452) 1)) temp___452))))

(define-fun dynamic_invariant9 ((temp___expr_397 Int)
  (temp___is_init_393 Bool) (temp___skip_constant_394 Bool)
  (temp___do_toplevel_395 Bool)
  (temp___do_typ_inv_396 Bool)) Bool (=>
                                     (or (= temp___is_init_393 true)
                                     (<= 0 100)) (in_range7 temp___expr_397)))

(define-fun oeq1 ((left us_rep1)
  (right us_rep1)) Bool (and (= (length1 left) (length1 right)) (ite 
                                                                (forall
                                                                ((n Int))
                                                                (=>
                                                                (and (<= 1 n)
                                                                (<= n 
                                                                (last left)))
                                                                (= (get left
                                                                   n) 
                                                                (get right n))))
                                                                true false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq3 a b) (oeq1 a b)) :pattern ((user_eq3 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_285 us_rep1)
  (temp___skip_top_level_286 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_286 true))
                                         (= (length1 temp___expr_285) 0)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length1 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left us_rep) (right us_rep))
  (! (= (= (oeq left right) true)
     (= (oeq1 (model1 left) (model1 right)) true)) :pattern ((oeq left right)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (= (is_empty1 container) true) (= (length container) 0)) :pattern (
  (is_empty1 container)) )))

(declare-sort extended_index1 0)

(declare-fun extended_indexqtint1 (extended_index1) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index1))
  (and (<= 0 (extended_indexqtint1 i)) (<= (extended_indexqtint1 i) 100))))

(define-fun in_range11 ((x Int)) Bool (and (<= 0 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE12 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check12 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE12 (us_image) Int)

(declare-fun user_eq17 (extended_index1 extended_index1) Bool)

(declare-const dummy17 extended_index1)

(declare-datatypes ()
((extended_index__ref1
 (extended_index__refqtmk1 (extended_index__content1 extended_index1)))))
(define-fun extended_index__ref_extended_index__content__2__projection ((a extended_index__ref1)) extended_index1 
  (extended_index__content1 a))

(define-fun dynamic_invariant10 ((temp___expr_277 Int)
  (temp___is_init_273 Bool) (temp___skip_constant_274 Bool)
  (temp___do_toplevel_275 Bool)
  (temp___do_typ_inv_276 Bool)) Bool (=>
                                     (or (= temp___is_init_273 true)
                                     (<= 0 100)) (in_range11
                                     temp___expr_277)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 100) (dynamic_invariant8 result true false true
     true))) :pattern ((length1 container)) )))

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= (- 2147483648) (element_typeqtint1 i))
  (<= (element_typeqtint1 i) 2147483647))))

(define-fun in_range12 ((x Int)) Bool (and (<= (- 2147483648) x)
                                      (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE13 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check13 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE13 (us_image) Int)

(declare-fun user_eq18 (element_type1 element_type1) Bool)

(declare-const dummy18 element_type1)

(declare-datatypes ()
((element_type__ref1
 (element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant11 ((temp___expr_270 Int)
  (temp___is_init_266 Bool) (temp___skip_constant_267 Bool)
  (temp___do_toplevel_268 Bool)
  (temp___do_typ_inv_269 Bool)) Bool (=>
                                     (or (= temp___is_init_266 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range12 temp___expr_270)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant10 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant11 (get container position) true false true true)) :pattern (
  (get container position)) ))))

(declare-const res__split_fields us_main_type)

;; Assume
  (assert (dynamic_invariant6 l true false true true))

(define-fun list__reverse_list__s__assume () us_rep2 (empty_stack Tuple0))

;; H
  (assert
  (forall ((list__reverse_list__s__assume1 us_rep2))
  (is_empty__function_guard (is_empty list__reverse_list__s__assume1)
  list__reverse_list__s__assume1)))

;; H
  (assert (empty_stack__function_guard list__reverse_list__s__assume 
  Tuple0))

;; H
  (assert true)

;; H
  (assert (= (is_empty list__reverse_list__s__assume) true))

(declare-const s__split_fields us_split_fields2)

;; H
  (assert
  (= s__split_fields (us_split_fields3 list__reverse_list__s__assume)))

;; Assume
  (assert true)

(define-fun list__reverse_list__first__assume () Int 1)

;; H
  (assert (dynamic_invariant3 list__reverse_list__first__assume true false
  true true))

;; H
  (assert (= list__reverse_list__first__assume 1))

;; Assume
  (assert (= list__reverse_list__first__assume first2))

;; Assume
  (assert (dynamic_invariant first2 true false true true))

(define-fun o () us_rep l)

(define-fun list__reverse_list__last__assume () Int (last_index o))

;; H
  (assert (dynamic_invariant2 list__reverse_list__last__assume true false
  true true))

;; H
  (assert (= list__reverse_list__last__assume (last (model1 o))))

;; Assume
  (assert (= list__reverse_list__last__assume last3))

;; Assume
  (assert (dynamic_invariant last3 true false true true))

;; Assume
  (assert (default_initial_assumption
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))
  false))

;; Assume
  (assert (dynamic_invariant6
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields))
  false false true true))

(define-fun o1 () us_split_discrs res__split_discrs)

(declare-const list__my_lists__clear__container__fields us_main_type)

;; H
  (assert
  (= (length
     (us_repqtmk o1
     (us_split_fieldsqtmk list__my_lists__clear__container__fields))) 0))

;; H
  (assert true)

(declare-const res__split_fields1 us_main_type)

;; H
  (assert (= res__split_fields1 list__my_lists__clear__container__fields))

;; Assume
  (assert true)

(declare-const s__split_fields1 us_split_fields2)

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

(declare-const i Int)

;; H
  (assert (= i first2))

;; H
  (assert
  (let ((temp___606 last3))
  (ite (= (and (ite (<= first2 i) true false) (ite (<= i temp___606) true
                                              false)) true)
  (and (in_range5 i)
  (let ((o2 l))
  (let ((o3 (element o2 i)))
  (and
  (and (dynamic_invariant4 o3 true false true true)
  (= o3 (get (model1 o2) i)))
  (exists ((s__split_fields2 us_split_fields2))
  (and
  (= (let ((temp___459 (let ((temp___455 (temp_____aggregate_def_450 o3)))
                       (let ((temp___454 (to__ (us_repqtmk1 s__split_fields))))
                       (ite (= (length3 temp___454) 0)
                       (of_array temp___455 1 1)
                       (of_array
                       (concat1 (to_array temp___454) (first1 temp___454)
                       (last2 temp___454) temp___455 1 1) (first1 temp___454)
                       (- (+ (first1 temp___454) (+ (length2
                                                    (first1 temp___454)
                                                    (last2 temp___454)) 
                       (length2 1 1))) 1)))))))
     (let ((temp___458 (to__ (us_repqtmk1 s__split_fields2))))
     (bool_eq2 (to_array temp___458) (first1 temp___458) (last2 temp___458)
     (to_array temp___459) (first1 temp___459) (last2 temp___459)))) true)
  (and
  (let ((o4 (- i first2)))
  (and (in_range1 o4)
  (and (in_range1 (+ o4 1))
  (let ((o5 (us_repqtmk1 s__split_fields2)))
  (let ((o6 (to__ o5)))
  (and (to____function_guard o6 o5)
  (and (dynamic_invariant5 o6 true false true true)
  (and (= (first1 o6) 1) (<= 0 (last2 o6))))))))))
  (exists ((i1 Int))
  (and
  (and (= (last2 (to__ (us_repqtmk1 s__split_fields1))) (+ (- i1 first2) 1))
  (forall ((j Int))
  (=> (and (<= first2 j) (<= j i1))
  (= (to_rep
     (select (to_array (to__ (us_repqtmk1 s__split_fields1))) (+ (- j 
     first2) 1))) (element l j)))))
  (and
  (= (and (ite (dynamic_property1 first2 last3 i1) true false) (ite (and
                                                                    (<= 
                                                                    first2 i1)
                                                                    (<= i1 
                                                                    last3))
                                                               true false)) true)
  (= i1 temp___606))))))))))) (= s__split_fields1 s__split_fields))))

(define-fun temp___617 () Int first2)

(define-fun temp___618 () Int last3)

(declare-const i1 Int)

;; H
  (assert (= i1 temp___617))

;; H
  (assert
  (= (and (ite (<= temp___617 i1) true false) (ite (<= i1 temp___618) true
                                              false)) true))

(declare-const temp___loop_entry_625 us_split_fields2)

(define-fun temp___loop_entry_6251 () us_rep2 (us_repqtmk1
                                              temp___loop_entry_625))

;; H
  (assert (= temp___loop_entry_625 s__split_fields1))

;; H
  (assert
  (forall ((s__split_fields2 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields2)) (us_repqtmk1 s__split_fields2))))

;; H
  (assert
  (forall ((temp___loop_entry_6252 us_rep2)) (to____function_guard
  (to__ temp___loop_entry_6252) temp___loop_entry_6252)))

;; H
  (assert (in_range1 (- i1 first2)))

;; H
  (assert (dynamic_invariant1
  (length
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields1)))
  true false true true))

;; H
  (assert
  (let ((o2 (us_repqtmk res__split_discrs
            (us_split_fieldsqtmk res__split_fields1))))
  (<= (length o2) (capacity o2))))

(declare-const o2 Bool)

;; H
  (assert
  (ite (= (length
          (us_repqtmk res__split_discrs
          (us_split_fieldsqtmk res__split_fields1))) (- i1 first2))
  (let ((o3 (- last3 i1)))
  (and (in_range1 o3)
  (let ((o4 (+ o3 1)))
  (and (in_range1 o4)
  (let ((o5 (us_repqtmk1 s__split_fields1)))
  (let ((o6 (to__ o5)))
  (and
  (and (to____function_guard o6 o5)
  (and (dynamic_invariant5 o6 true false true true)
  (and (= (first1 o6) 1) (<= 0 (last2 o6)))))
  (= o2 (ite (= (last2 o6) o4) true false))))))))) (= o2 false)))

(declare-const o3 Bool)

;; H
  (assert
  (ite (= o2 true)
  (and (let ((o4 (- last3 i1))) (and (in_range1 o4) (in_range1 (+ o4 1))))
  (= o3 (ite (forall ((j Int))
             (=> (and (<= 1 j) (<= j (+ (- last3 i1) 1)))
             (= (to_rep
                (select (to_array (to__ (us_repqtmk1 s__split_fields1))) j)) 
             (to_rep (select (to_array (to__ temp___loop_entry_6251)) j)))))
        true false)))
  (= o3 false)))

;; H
  (assert (or (not (= o3 true)) (in_range1 (- i1 1))))

(declare-const s__split_fields2 us_split_fields2)

(declare-const res__split_fields2 us_main_type)

(declare-const i2 Int)

;; H
  (assert
  (forall ((s__split_fields3 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields3)) (us_repqtmk1 s__split_fields3))))

;; H
  (assert
  (forall ((s__split_fields3 us_split_fields2)) (to____function_guard
  (to__ (us_repqtmk1 s__split_fields3)) (us_repqtmk1 s__split_fields3))))

;; H
  (assert
  (forall ((temp___loop_entry_6252 us_rep2)) (to____function_guard
  (to__ temp___loop_entry_6252) temp___loop_entry_6252)))

;; LoopInvariant
  (assert
  (and
  (and
  (and
  (= (length
     (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields2))) (- 
  i2 first2))
  (= (last2 (to__ (us_repqtmk1 s__split_fields2))) (+ (- last3 i2) 1)))
  (forall ((j Int))
  (=> (and (<= 1 j) (<= j (+ (- last3 i2) 1)))
  (= (to_rep (select (to_array (to__ (us_repqtmk1 s__split_fields2))) j)) 
  (to_rep (select (to_array (to__ temp___loop_entry_6251)) j))))))
  (forall ((j Int))
  (=> (and (<= first2 j) (<= j (- i2 1)))
  (= (element
     (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields2))
     j) (element l (+ (- last3 j) first2)))))))

;; H
  (assert
  (= (and (ite (and (dynamic_property2 first2 last3 i2) (dynamic_invariant6
               (us_repqtmk res__split_discrs
               (us_split_fieldsqtmk res__split_fields2)) false true true
               true))
          true false) (ite (and (<= first2 i2) (<= i2 last3)) true false)) true))

(define-fun o4 () us_rep2 (us_repqtmk1 s__split_fields2))

(define-fun o5 () Int (top o4))

;; H
  (assert (forall ((o6 us_rep2)) (to____function_guard (to__ o6) o6)))

;; H
  (assert (forall ((o6 us_rep2)) (to____function_guard (to__ o6) o6)))

;; H
  (assert (top__function_guard o5 o4))

;; H
  (assert (dynamic_invariant o5 true false true true))

;; H
  (assert
  (= o5 (to_rep
        (select (rec__stack__stack__content s__split_fields2) (to_rep2
                                                              (rec__stack__stack__top
                                                              s__split_fields2))))))

;; H
  (assert (= o5 (to_rep (select (to_array (to__ o4)) (last2 (to__ o4))))))

(define-fun o6 () us_split_discrs res__split_discrs)

(assert
;; defqtvc
 ;; File "list.ads", line 11, characters 0-0
  (not
  (< (length
     (us_repqtmk o6
     (us_split_fields1
     (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields2))))) 
  (capacity
  (us_repqtmk o6
  (us_split_fields1
  (us_repqtmk res__split_discrs (us_split_fieldsqtmk res__split_fields2))))))))
(check-sat)
