(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= (- 2147483648) x)
                                    (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647)) (in_range
                                    temp___expr_18)))

(declare-fun cond (Int) Bool)

(declare-fun cond__function_guard (Bool Int) Bool)

;; cond__post_axiom
  (assert true)

;; cond__def_axiom
  (assert (forall ((i Int)) (! (= (cond i) true) :pattern ((cond i)) )))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const j Int)

;; H
  (assert (= j 1))

;; Assume
  (assert (dynamic_invariant j true false true true))

;; H
  (assert (< j 10))

(define-fun o () Int (+ j 1))

;; Ensures
  (assert (in_range o))

(declare-const j1 Int)

;; H
  (assert (= j1 o))

(define-fun temp___inv_177 () Bool (cond j1))

;; H
  (assert (cond__function_guard temp___inv_177 j1))

;; H
  (assert (= temp___inv_177 true))

(declare-const j2 Int)

;; H
  (assert (forall ((j3 Int)) (cond__function_guard (cond j3) j3)))

;; LoopInvariant
  (assert (= (cond j2) true))

;; Assume
  (assert (dynamic_invariant j2 true true true true))

;; H
  (assert (< j2 10))

(define-fun o1 () Int (+ j2 1))

;; Ensures
  (assert (in_range o1))

(declare-const j3 Int)

;; H
  (assert (= j3 o1))

(define-fun temp___inv_1771 () Bool (cond j3))

;; H
  (assert (cond__function_guard temp___inv_1771 j3))

;; H
  (assert (= temp___inv_1771 true))

;; H
  (assert (forall ((j4 Int)) (cond__function_guard (cond j4) j4)))

(assert
;; defqtvc
 ;; File "loopinv.adb", line 1, characters 0-0
  (not (= (cond j3) true)))
(check-sat)

(exit)
