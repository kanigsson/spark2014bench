(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort count_type 0)

(declare-fun count_typeqtint (count_type) Int)

;; count_type'axiom
  (assert
  (forall ((i count_type))
  (and (<= 0 (count_typeqtint i)) (<= (count_typeqtint i) 2147483647))))

(define-fun in_range ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Int)

(declare-fun user_eq (count_type count_type) Bool)

(declare-const dummy count_type)

(declare-datatypes ()
((count_type__ref (count_type__refqtmk (count_type__content count_type)))))
(define-fun count_type__ref_count_type__content__projection ((a count_type__ref)) count_type 
  (count_type__content a))

(define-fun to_rep ((x count_type)) Int (count_typeqtint x))

(declare-fun of_rep (Int) count_type)

;; inversion_axiom
  (assert
  (forall ((x count_type))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x count_type)) (! (in_range (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                           (of_rep x))) )))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-datatypes ()
((us_split_discrs
 (us_split_discrsqtmk (rec__p__my_sets__set__capacity count_type)))))
(define-fun us_split_discrs_rec__p__my_sets__set__capacity__projection ((a us_split_discrs)) count_type 
  (rec__p__my_sets__set__capacity a))

(declare-datatypes ()
((us_split_discrs__ref
 (us_split_discrs__refqtmk (us_split_discrs__content us_split_discrs)))))
(define-fun us_split_discrs__ref___split_discrs__content__projection ((a us_split_discrs__ref)) us_split_discrs 
  (us_split_discrs__content a))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__p__my_sets__set us_main_type)))))
(define-fun us_split_fields_rec__p__my_sets__set__projection ((a us_split_fields)) us_main_type 
  (rec__p__my_sets__set a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep
 (us_repqtmk
 (us_split_discrs1 us_split_discrs)(us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_discrs__projection ((a us_rep)) us_split_discrs 
  (us_split_discrs1 a))

(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (= (to_rep
                           (rec__p__my_sets__set__capacity
                           (us_split_discrs1 a))) (to_rep
                                                  (rec__p__my_sets__set__capacity
                                                  (us_split_discrs1 b))))
                        (= (us_main_eq
                           (rec__p__my_sets__set (us_split_fields1 a))
                           (rec__p__my_sets__set (us_split_fields1 b))) true))
                   true false))

(define-fun in_range1 ((rec__p__my_sets__set__capacity1 Int)
  (a us_split_discrs)) Bool (= rec__p__my_sets__set__capacity1 (to_rep
                                                               (rec__p__my_sets__set__capacity
                                                               a))))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const p__my_sets__set__capacity__first__bit Int)

(declare-const p__my_sets__set__capacity__last__bit Int)

(declare-const p__my_sets__set__capacity__position Int)

;; p__my_sets__set__capacity__first__bit_axiom
  (assert (<= 0 p__my_sets__set__capacity__first__bit))

;; p__my_sets__set__capacity__last__bit_axiom
  (assert
  (< p__my_sets__set__capacity__first__bit p__my_sets__set__capacity__last__bit))

;; p__my_sets__set__capacity__position_axiom
  (assert (<= 0 p__my_sets__set__capacity__position))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((set__ref (set__refqtmk (set__content us_rep)))))
(define-fun set__ref_set__content__projection ((a set__ref)) us_rep (set__content
                                                                    a))

(declare-fun length (us_rep) Int)

(declare-fun length__function_guard (Int us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (= (user_eq1 a b) (oeq a b)) :pattern ((user_eq1 a b)) )))

(define-fun dynamic_invariant ((temp___expr_304 Int)
  (temp___is_init_300 Bool) (temp___skip_constant_301 Bool)
  (temp___do_toplevel_302 Bool)
  (temp___do_typ_inv_303 Bool)) Bool (=>
                                     (or (= temp___is_init_300 true)
                                     (<= 0 2147483647)) (in_range
                                     temp___expr_304)))

;; length__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (length container)))
     (and
     (<= result (to_rep
                (rec__p__my_sets__set__capacity (us_split_discrs1 container))))
     (dynamic_invariant result true false true true))) :pattern ((length
                                                                 container)) )))

(declare-const left us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const right us_rep)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-sort tcount_typeB 0)

(declare-fun tcount_typeBqtint (tcount_typeB) Int)

;; tcount_typeB'axiom
  (assert
  (forall ((i tcount_typeB))
  (and (<= (- 2147483648) (tcount_typeBqtint i))
  (<= (tcount_typeBqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq2 (tcount_typeB tcount_typeB) Bool)

(declare-const dummy2 tcount_typeB)

(declare-datatypes ()
((tcount_typeB__ref
 (tcount_typeB__refqtmk (tcount_typeB__content tcount_typeB)))))
(define-fun tcount_typeB__ref_tcount_typeB__content__projection ((a tcount_typeB__ref)) tcount_typeB 
  (tcount_typeB__content a))

(declare-sort element_type 0)

(declare-fun element_typeqtint (element_type) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type))
  (and (<= 1 (element_typeqtint i)) (<= (element_typeqtint i) 100))))

(define-fun in_range3 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq3 (element_type element_type) Bool)

(declare-const dummy3 element_type)

(declare-datatypes ()
((element_type__ref
 (element_type__refqtmk (element_type__content element_type)))))
(define-fun element_type__ref_element_type__content__projection ((a element_type__ref)) element_type 
  (element_type__content a))

(define-fun dynamic_invariant1 ((temp___expr_286 Int)
  (temp___is_init_282 Bool) (temp___skip_constant_283 Bool)
  (temp___do_toplevel_284 Bool)
  (temp___do_typ_inv_285 Bool)) Bool (=>
                                     (or (= temp___is_init_282 true)
                                     (<= 1 100)) (in_range3 temp___expr_286)))

(declare-fun my_inf (Int Int) Bool)

(declare-fun my_inf__function_guard (Bool Int Int) Bool)

;; my_inf__post_axiom
  (assert true)

;; my_inf__def_axiom
  (assert
  (forall ((i1 Int) (i2 Int))
  (! (= (= (my_inf i1 i2) true) (< i1 i2)) :pattern ((my_inf i1 i2)) )))

(define-fun in_range4 ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Bool)

;; temp___result_157'def
  (assert
  (forall ((left1 Int) (right1 Int)) (my_inf__function_guard
  (my_inf left1 right1) left1 right1)))

;; temp___result_158'def
  (assert
  (forall ((left1 Int) (right1 Int)) (my_inf__function_guard
  (my_inf right1 left1) right1 left1)))

(define-fun equivalent_elements ((left1 Int)
  (right1 Int)) Bool (and (not (my_inf left1 right1)) (not (my_inf right1
                                                           left1))))

(declare-fun equivalent_elements__function_guard (Bool Int Int) Bool)

(declare-sort us_main_type1 0)

(declare-fun us_main_eq1 (us_main_type1 us_main_type1) Bool)

(declare-sort us_rep1 0)

(declare-fun bool_eq1 (us_rep1 us_rep1) Bool)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq4 (us_rep1 us_rep1) Bool)

(declare-const dummy4 us_rep1)

(declare-datatypes ()
((sequence__ref (sequence__refqtmk (sequence__content us_rep1)))))
(define-fun sequence__ref_sequence__content__projection ((a sequence__ref)) us_rep1 
  (sequence__content a))

(declare-fun length1 (us_rep1) Int)

(declare-fun length__function_guard1 (Int us_rep1) Bool)

(declare-fun get (us_rep1 Int) Int)

(declare-fun get__function_guard (Int us_rep1 Int) Bool)

;; temp___result_202'def
  (assert
  (forall ((container us_rep1) (item Int) (i Int)) (my_inf__function_guard
  (my_inf (get container i) item) (get container i) item)))

(define-fun e_bigger_than_range ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (my_inf (get container i) item) true)))
                   true false))

(declare-fun e_bigger_than_range__function_guard (Bool us_rep1 Int Int
  Int) Bool)

;; temp___result_204'def
  (assert
  (forall ((container us_rep1) (item Int) (i Int)) (my_inf__function_guard
  (my_inf item (get container i)) item (get container i))))

(define-fun e_smaller_than_range ((container us_rep1) (fst Int) (lst Int)
  (item Int)) Bool (ite (forall ((i Int))
                        (=> (and (<= fst i) (<= i lst))
                        (= (my_inf item (get container i)) true)))
                   true false))

(declare-fun e_smaller_than_range__function_guard (Bool us_rep1 Int Int
  Int) Bool)

(define-fun e_is_find ((container us_rep1) (item Int)
  (position Int)) Bool (and (ite (< 0 position)
                            (e_bigger_than_range container 1 (- position 1)
                            item) (distinct 1 0)) (ite (< position (length1
                                                                   container))
                                                  (e_smaller_than_range
                                                  container (+ position 1)
                                                  (length1 container) item)
                                                  (distinct 1 0))))

(declare-fun e_is_find__function_guard (Bool us_rep1 Int Int) Bool)

(declare-fun find (us_rep1 Int) Int)

(declare-fun find__function_guard (Int us_rep1 Int) Bool)

(declare-sort element_type1 0)

(declare-fun element_typeqtint1 (element_type1) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type1))
  (and (<= 1 (element_typeqtint1 i)) (<= (element_typeqtint1 i) 100))))

(define-fun in_range5 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq5 (element_type1 element_type1) Bool)

(declare-const dummy5 element_type1)

(declare-datatypes ()
((element_type__ref1
 (element_type__refqtmk1 (element_type__content1 element_type1)))))
(define-fun element_type__ref_element_type__content__2__projection ((a element_type__ref1)) element_type1 
  (element_type__content1 a))

(define-fun dynamic_invariant2 ((temp___expr_293 Int)
  (temp___is_init_289 Bool) (temp___skip_constant_290 Bool)
  (temp___do_toplevel_291 Bool)
  (temp___do_typ_inv_292 Bool)) Bool (=>
                                     (or (= temp___is_init_289 true)
                                     (<= 1 100)) (in_range5 temp___expr_293)))

(define-fun length2 ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun last ((container us_rep1)) Int (+ 0 (length1 container)))

(declare-fun last__function_guard (Int us_rep1) Bool)

(define-fun oeq1 ((left1 us_rep1)
  (right1 us_rep1)) Bool (and (= (length1 left1) (length1 right1)) (ite 
                                                                   (forall
                                                                   ((n Int))
                                                                   (=>
                                                                   (and
                                                                   (<= 1 n)
                                                                   (<= n 
                                                                   (last
                                                                   left1)))
                                                                   (= 
                                                                   (get left1
                                                                   n) 
                                                                   (get
                                                                   right1 n))))
                                                                   true
                                                                   false)))

(declare-fun oeq__function_guard1 (Bool us_rep1 us_rep1) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep1) (b us_rep1))
  (! (= (user_eq4 a b) (oeq1 a b)) :pattern ((user_eq4 a b)) )))

(define-fun default_initial_assumption ((temp___expr_378 us_rep1)
  (temp___skip_top_level_379 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_379 true))
                                         (= (length1 temp___expr_378) 0)))

;; find__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((item Int))
  (! (=> (dynamic_invariant2 item true true true true)
     (let ((result (find container item)))
     (and
     (=> (< 0 result)
     (and (<= result (length1 container))
     (= (equivalent_elements item (get container result)) true)))
     (dynamic_invariant result true false true true)))) :pattern ((find
                                                                  container
                                                                  item)) ))))

(define-fun e_elements_included ((left1 us_rep1)
  (right1 us_rep1)) Bool (ite (forall ((i Int))
                              (=> (and (<= 1 i) (<= i (length1 left1)))
                              (and (< 0 (find right1 (get left1 i)))
                              (= (get right1 (find right1 (get left1 i))) 
                              (get left1 i)))))
                         true false))

(declare-fun e_elements_included__function_guard (Bool us_rep1 us_rep1) Bool)

(declare-sort us_main_type2 0)

(declare-fun us_main_eq2 (us_main_type2 us_main_type2) Bool)

(declare-sort us_rep2 0)

(declare-fun bool_eq2 (us_rep2 us_rep2) Bool)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq6 (us_rep2 us_rep2) Bool)

(declare-const dummy6 us_rep2)

(declare-datatypes () ((set__ref1 (set__refqtmk1 (set__content1 us_rep2)))))
(define-fun set__ref_set__content__2__projection ((a set__ref1)) us_rep2 
  (set__content1 a))

(declare-fun length3 (us_rep2) Int)

(declare-fun length__function_guard2 (Int us_rep2) Bool)

(declare-fun model1 (us_rep) us_rep2)

(declare-fun model__function_guard (us_rep2 us_rep) Bool)

(declare-fun oeq2 (us_rep2 us_rep2) Bool)

(declare-fun oeq__function_guard2 (Bool us_rep2 us_rep2) Bool)

(declare-fun is_empty (us_rep2) Bool)

(declare-fun is_empty__function_guard (Bool us_rep2) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep2) (b us_rep2))
  (! (= (user_eq6 a b) (oeq2 a b)) :pattern ((user_eq6 a b)) )))

(define-fun default_initial_assumption1 ((temp___expr_342 us_rep2)
  (temp___skip_top_level_343 Bool)) Bool (=>
                                         (not
                                         (= temp___skip_top_level_343 true))
                                         (= (is_empty temp___expr_342) true)))

;; model__post_axiom
  (assert
  (forall ((container us_rep))
  (! (= (length3 (model1 container)) (length container)) :pattern ((model1
                                                                   container)) )))

(declare-fun contains (us_rep2 Int) Bool)

(declare-fun contains__function_guard (Bool us_rep2 Int) Bool)

(define-fun iter_has_element ((container us_rep1)
  (position Int)) Bool (and (ite (<= 1 position) true false) (ite (<= position 
                                                             (last container))
                                                             true false)))

(declare-fun iter_has_element__function_guard (Bool us_rep1 Int) Bool)

(declare-fun elements (us_rep) us_rep1)

(declare-fun elements__function_guard (us_rep1 us_rep) Bool)

(declare-sort element_type2 0)

(declare-fun element_typeqtint2 (element_type2) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type2))
  (and (<= 1 (element_typeqtint2 i)) (<= (element_typeqtint2 i) 100))))

(define-fun in_range6 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq7 (element_type2 element_type2) Bool)

(declare-const dummy7 element_type2)

(declare-datatypes ()
((element_type__ref2
 (element_type__refqtmk2 (element_type__content2 element_type2)))))
(define-fun element_type__ref_element_type__content__3__projection ((a element_type__ref2)) element_type2 
  (element_type__content2 a))

(declare-sort extended_index 0)

(declare-fun extended_indexqtint (extended_index) Int)

;; extended_index'axiom
  (assert
  (forall ((i extended_index))
  (and (<= 0 (extended_indexqtint i))
  (<= (extended_indexqtint i) 2147483647))))

(define-fun in_range7 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE6 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check6 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE6 (us_image) Int)

(declare-fun user_eq8 (extended_index extended_index) Bool)

(declare-const dummy8 extended_index)

(declare-datatypes ()
((extended_index__ref
 (extended_index__refqtmk (extended_index__content extended_index)))))
(define-fun extended_index__ref_extended_index__content__projection ((a extended_index__ref)) extended_index 
  (extended_index__content a))

;; elements__post_axiom
  (assert
  (forall ((container us_rep))
  (! (let ((result (elements container)))
     (and
     (and
     (and (= (length1 result) (length container))
     (forall ((temp___458 Int))
     (=>
     (and (in_range7 temp___458)
     (= (iter_has_element result temp___458) true))
     (= (contains (model1 container) (get result temp___458)) true))))
     (forall ((item Int))
     (=> (and (in_range6 item) (= (contains (model1 container) item) true))
     (and (< 0 (find result item))
     (= (equivalent_elements (get result (find result item)) item) true)))))
     (forall ((i Int))
     (=> (and (<= 1 i) (<= i (length container)))
     (and (= (find result (get result i)) i)
     (= (e_is_find result (get result i) i) true)))))) :pattern ((elements
                                                                 container)) )))

;; oeq__post_axiom
  (assert
  (forall ((left1 us_rep) (right1 us_rep))
  (! (ite (= (oeq left1 right1) true)
     (= (oeq1 (elements left1) (elements right1)) true)
     (or
     (not (= (e_elements_included (elements left1) (elements right1)) true))
     (not (= (e_elements_included (elements right1) (elements left1)) true)))) :pattern (
  (oeq left1 right1)) )))

(define-fun dynamic_invariant3 ((temp___expr_334 Int)
  (temp___is_init_330 Bool) (temp___skip_constant_331 Bool)
  (temp___do_toplevel_332 Bool)
  (temp___do_typ_inv_333 Bool)) Bool (=>
                                     (or (= temp___is_init_330 true)
                                     (<= 1 100)) (in_range6 temp___expr_334)))

;; contains__post_axiom
  (assert
  (forall ((container us_rep2))
  (forall ((item Int))
  (! (=> (dynamic_invariant3 item true true true true)
     (=> (= (distinct 1 0) true)
     (=>
     (exists ((e Int))
     (and (and (in_range6 e) (= (contains container e) true))
     (= (equivalent_elements e item) true)))
     (= (contains container item) true)))) :pattern ((contains container
                                                     item)) ))))

;; length__post_axiom
  (assert
  (forall ((container us_rep2)) (! (dynamic_invariant (length3 container)
  true false true true) :pattern ((length3 container)) )))

(declare-fun ole (us_rep2 us_rep2) Bool)

(declare-fun ole__function_guard (Bool us_rep2 us_rep2) Bool)

;; ole__post_axiom
  (assert
  (forall ((left1 us_rep2) (right1 us_rep2))
  (! (= (= (ole left1 right1) true)
     (forall ((item Int))
     (=> (and (in_range6 item) (= (contains left1 item) true))
     (= (contains right1 item) true)))) :pattern ((ole left1 right1)) )))

;; oeq__post_axiom
  (assert
  (forall ((left1 us_rep2) (right1 us_rep2))
  (! (= (= (oeq2 left1 right1) true)
     (and (= (ole left1 right1) true) (= (ole right1 left1) true))) :pattern (
  (oeq2 left1 right1)) )))

;; is_empty__post_axiom
  (assert
  (forall ((container us_rep2))
  (! (let ((result (is_empty container)))
     (and
     (= (= result true)
     (forall ((item Int))
     (not (and (in_range6 item) (= (contains container item) true)))))
     (= (= result true) (= (length3 container) 0)))) :pattern ((is_empty
                                                               container)) )))

(define-fun dynamic_invariant4 ((temp___expr_370 Int)
  (temp___is_init_366 Bool) (temp___skip_constant_367 Bool)
  (temp___do_toplevel_368 Bool)
  (temp___do_typ_inv_369 Bool)) Bool (=>
                                     (or (= temp___is_init_366 true)
                                     (<= 0 2147483647)) (in_range7
                                     temp___expr_370)))

;; length__post_axiom
  (assert
  (forall ((container us_rep1))
  (! (let ((result (length1 container)))
     (and (<= (+ 0 result) 2147483647) (dynamic_invariant result true false
     true true))) :pattern ((length1 container)) )))

(declare-sort element_type3 0)

(declare-fun element_typeqtint3 (element_type3) Int)

;; element_type'axiom
  (assert
  (forall ((i element_type3))
  (and (<= 1 (element_typeqtint3 i)) (<= (element_typeqtint3 i) 100))))

(define-fun in_range8 ((x Int)) Bool (and (<= 1 x) (<= x 100)))

(declare-fun attr__ATTRIBUTE_IMAGE7 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check7 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE7 (us_image) Int)

(declare-fun user_eq9 (element_type3 element_type3) Bool)

(declare-const dummy9 element_type3)

(declare-datatypes ()
((element_type__ref3
 (element_type__refqtmk3 (element_type__content3 element_type3)))))
(define-fun element_type__ref_element_type__content__4__projection ((a element_type__ref3)) element_type3 
  (element_type__content3 a))

(define-fun dynamic_invariant5 ((temp___expr_363 Int)
  (temp___is_init_359 Bool) (temp___skip_constant_360 Bool)
  (temp___do_toplevel_361 Bool)
  (temp___do_typ_inv_362 Bool)) Bool (=>
                                     (or (= temp___is_init_359 true)
                                     (<= 1 100)) (in_range8 temp___expr_363)))

;; get__post_axiom
  (assert
  (forall ((container us_rep1))
  (forall ((position Int))
  (! (=>
     (and (dynamic_invariant4 position true true true true)
     (and (<= 1 position) (<= position (last container))))
     (dynamic_invariant5 (get container position) true false true true)) :pattern (
  (get container position)) ))))

;; Assume
  (assert true)

;; Assume
  (assert true)

(define-fun o () us_rep right)

(define-fun o1 () Int (length o))

;; H
  (assert (dynamic_invariant o1 true false true true))

;; H
  (assert
  (<= o1 (to_rep (rec__p__my_sets__set__capacity (us_split_discrs1 o)))))

(define-fun o2 () Int (- 2147483647 o1))

(assert
;; defqtvc
 ;; File "a-cforse.ads", line 1231, characters 0-0
  (not (in_range2 o2)))
(check-sat)

(exit)
