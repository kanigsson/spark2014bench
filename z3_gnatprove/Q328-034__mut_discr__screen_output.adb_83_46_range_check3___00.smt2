;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(declare-sort positive 0)

(declare-fun positiveqtint (positive) Int)

;; positive'axiom
  (assert
  (forall ((i positive))
  (and (<= 1 (positiveqtint i)) (<= (positiveqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (positive positive) Bool)

(declare-const dummy1 positive)

(declare-datatypes ()
((positive__ref (positive__refqtmk (positive__content positive)))))
(define-fun positive__ref_positive__content__projection ((a positive__ref)) positive 
  (positive__content a))

(declare-sort character 0)

(define-fun in_range3 ((x Int)) Bool (and (<= 0 x) (<= x 255)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq2 (character character) Bool)

(declare-const dummy2 character)

(declare-datatypes ()
((character__ref (character__refqtmk (character__content character)))))
(define-fun character__ref_character__content__projection ((a character__ref)) character 
  (character__content a))

(declare-fun to_rep (character) Int)

(declare-fun of_rep (Int) character)

;; inversion_axiom
  (assert
  (forall ((x character))
  (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x character)) (! (in_range3 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range3 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int character))))))
(declare-fun slide ((Array Int character) Int Int) (Array Int character))

;; slide_eq
  (assert
  (forall ((a (Array Int character)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int character)) (a__first Int) (a__last Int)
  (b (Array Int character)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_91 Int))
                           (=>
                           (and (<= a__first temp___idx_91)
                           (<= temp___idx_91 a__last))
                           (= (to_rep (select a temp___idx_91)) (to_rep
                                                                (select b (+ (- b__first a__first) temp___idx_91)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_91 Int))
  (=> (and (<= a__first temp___idx_91) (<= temp___idx_91 a__last))
  (= (to_rep (select a temp___idx_91)) (to_rep
                                       (select b (+ (- b__first a__first) temp___idx_91)))))))))))

(define-fun to_rep1 ((x integer)) Int (integerqtint x))

(declare-fun of_rep1 (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep1 (first (mk f l))) f) (= (to_rep1 (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range2 low) (in_range2 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int character))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int character) (elts a))

(define-fun of_array ((a (Array Int character)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep1 (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep1 (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep1 (first (rt x)))
                 (to_rep1 (last (rt x))) (elts y) (to_rep1 (first (rt y)))
                 (to_rep1 (last (rt y)))))

(declare-fun user_eq3 (us_t us_t) Bool)

(declare-const dummy3 us_t)

(declare-datatypes ()
((string____ref (string____refqtmk (string____content us_t)))))
(define-fun string____ref_string____content__projection ((a string____ref)) us_t 
  (string____content a))

(declare-fun to_string (us_image Int) us_t)

(declare-fun from_string (us_t) us_image)

;; to_string__first
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (= (first1 (to_string x s)) 1) :pattern ((to_string x s)) ))))

;; to_string__length
  (assert
  (forall ((x us_image))
  (forall ((s Int))
  (! (=> (<= 0 s) (<= (length1 (to_string x s)) s)) :pattern ((to_string x s)) ))))

(declare-sort natural 0)

(declare-fun naturalqtint (natural) Int)

;; natural'axiom
  (assert
  (forall ((i natural))
  (and (<= 0 (naturalqtint i)) (<= (naturalqtint i) 2147483647))))

(define-fun in_range4 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (natural natural) Bool)

(declare-const dummy4 natural)

(declare-datatypes ()
((natural__ref (natural__refqtmk (natural__content natural)))))
(define-fun natural__ref_natural__content__projection ((a natural__ref)) natural 
  (natural__content a))

(define-fun dynamic_invariant ((temp___expr_39 Int) (temp___is_init_35 Bool)
  (temp___skip_constant_36 Bool) (temp___do_toplevel_37 Bool)
  (temp___do_typ_inv_38 Bool)) Bool (=>
                                    (or (= temp___is_init_35 true)
                                    (<= 0 2147483647)) (in_range4
                                    temp___expr_39)))

(declare-fun concat1 ((Array Int character) Int Int (Array Int character) Int
  Int) (Array Int character))

;; concat_def
  (assert
  (forall ((a (Array Int character)) (b (Array Int character)))
  (forall ((a_first Int) (a_last Int) (b_first Int) (b_last Int))
  (forall ((i Int))
  (! (and
     (=> (and (<= a_first i) (<= i a_last))
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select a i)))
     (=> (< a_last i)
     (= (select (concat1 a a_first a_last b b_first b_last) i) (select b (+ (- i a_last) (- b_first 1)))))) :pattern ((select 
  (concat1 a a_first a_last b b_first b_last) i)) )))))

(declare-fun concat_singleton_left (character Int (Array Int character) Int
  Int) (Array Int character))

;; concat_singleton_left_def
  (assert
  (forall ((a character))
  (forall ((b (Array Int character)))
  (forall ((a_first Int) (b_first Int) (b_last Int))
  (! (and
     (= (select (concat_singleton_left a a_first b b_first b_last) a_first) a)
     (forall ((i Int))
     (! (=> (< a_first i)
        (= (select (concat_singleton_left a a_first b b_first b_last) i) (select b (+ (- i a_first) (- b_first 1))))) :pattern ((select 
     (concat_singleton_left a a_first b b_first b_last) i)) ))) :pattern (
  (concat_singleton_left a a_first b b_first b_last)) )))))

(declare-fun concat_singleton_right ((Array Int character) Int Int
  character) (Array Int character))

;; concat_singleton_right_def
  (assert
  (forall ((a (Array Int character)))
  (forall ((b character))
  (forall ((a_first Int) (a_last Int))
  (! (and
     (= (select (concat_singleton_right a a_first a_last b) (+ a_last 1)) b)
     (forall ((i Int))
     (! (=> (and (<= a_first i) (<= i a_last))
        (= (select (concat_singleton_right a a_first a_last b) i) (select a i))) :pattern ((select 
     (concat_singleton_right a a_first a_last b) i)) :pattern ((select a i)) ))) :pattern (
  (concat_singleton_right a a_first a_last b)) )))))

(declare-fun concat_singletons (character Int
  character) (Array Int character))

;; concat_singletons_def
  (assert
  (forall ((a character) (b character))
  (forall ((a_first Int))
  (! (and (= (select (concat_singletons a a_first b) a_first) a)
     (= (select (concat_singletons a a_first b) (+ a_first 1)) b)) :pattern (
  (concat_singletons a a_first b)) ))))

(declare-fun singleton1 (character Int) (Array Int character))

;; singleton_def
  (assert
  (forall ((v character))
  (forall ((i Int))
  (! (= (select (singleton1 v i) i) v) :pattern ((select (singleton1 v i) i)) ))))

(define-fun dynamic_invariant1 ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun dynamic_invariant2 ((temp___expr_96 us_t)
  (temp___is_init_92 Bool) (temp___skip_constant_93 Bool)
  (temp___do_toplevel_94 Bool)
  (temp___do_typ_inv_95 Bool)) Bool (=>
                                    (not (= temp___skip_constant_93 true))
                                    (dynamic_property 1 2147483647
                                    (first1 temp___expr_96)
                                    (last1 temp___expr_96))))

(declare-const s us_t)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const error_pos Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-fun line_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun line_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun page_length (us_private us_private us_private us_private
  us_private us_private us_private) Int)

(declare-fun page_length__function_guard (Int us_private us_private
  us_private us_private us_private us_private us_private) Bool)

(declare-fun line_number (us_private) Int)

(declare-fun line_number__function_guard (Int us_private) Bool)

;; line_number__post_axiom
  (assert
  (forall ((input__line_num us_private))
  (! (let ((result (line_number input__line_num)))
     (=> (line_number__function_guard result input__line_num)
     (dynamic_invariant result true false true true))) :pattern ((line_number
                                                                 input__line_num)) )))

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-fun column_number (us_private us_private) Int)

(declare-fun column_number__function_guard (Int us_private us_private) Bool)

;; column_number__post_axiom
  (assert
  (forall ((input__line us_private) (input__first_char us_private))
  (! (let ((result (column_number input__line input__first_char)))
     (=> (column_number__function_guard result input__line input__first_char)
     (dynamic_invariant result true false true true))) :pattern ((column_number
                                                                 input__line
                                                                 input__first_char)) )))

(declare-fun current_line (us_private us_private) us_t)

(declare-fun current_line__function_guard (us_t us_private us_private) Bool)

;; current_line__post_axiom
  (assert
  (forall ((input__line us_private) (input__last_char us_private))
  (! (let ((result (current_line input__line input__last_char)))
     (=> (current_line__function_guard result input__line input__last_char)
     (dynamic_invariant2 result true false true true))) :pattern ((current_line
                                                                  input__line
                                                                  input__last_char)) )))

(declare-const r14b Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-fun temp___String_Literal_265 (tuple0) (Array Int character))

;; temp___String_Literal_265__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 2)) 100))
     (and
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 3)) 99)
     (= (to_rep (select (temp___String_Literal_265 us_void_param) 4)) 58))) :pattern (
  (temp___String_Literal_265 us_void_param)) )))

(declare-fun temp___String_Literal_266 (tuple0) (Array Int character))

;; temp___String_Literal_266__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_266 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_266 us_void_param) 2)) 100))
     (and
     (= (to_rep (select (temp___String_Literal_266 us_void_param) 3)) 99)
     (= (to_rep (select (temp___String_Literal_266 us_void_param) 4)) 58))) :pattern (
  (temp___String_Literal_266 us_void_param)) )))

(declare-fun temp___String_Literal_269 (tuple0) (Array Int character))

;; temp___String_Literal_269__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_269 us_void_param) 1)) 45) :pattern (
  (temp___String_Literal_269 us_void_param)) )))

(declare-fun temp___String_Literal_270 (tuple0) (Array Int character))

;; temp___String_Literal_270__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (= (to_rep (select (temp___String_Literal_270 us_void_param) 1)) 33) :pattern (
  (temp___String_Literal_270 us_void_param)) )))

(declare-fun temp___String_Literal_271 (tuple0) (Array Int character))

;; temp___String_Literal_271__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 1)) 115)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 2)) 100))
     (and
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 3)) 99)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 4)) 32))
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 5)) 105))
     (and
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 6)) 110)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 7)) 112))
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 8)) 117)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 9)) 116)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 10)) 32))
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 11)) 101))
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 12)) 114)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 13)) 114))))
     (and
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 14)) 111)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 15)) 114))
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 16)) 32))
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 17)) 97)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 18)) 116)))
     (and
     (and
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 19)) 32)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 20)) 108))
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 21)) 105))
     (and
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 22)) 110)
     (= (to_rep (select (temp___String_Literal_271 us_void_param) 23)) 101)))))) :pattern (
  (temp___String_Literal_271 us_void_param)) )))

(declare-fun temp___String_Literal_272 (tuple0) (Array Int character))

;; temp___String_Literal_272__def_axiom
  (assert
  (forall ((us_void_param tuple0))
  (! (and
     (= (to_rep (select (temp___String_Literal_272 us_void_param) 1)) 58)
     (= (to_rep (select (temp___String_Literal_272 us_void_param) 2)) 32)) :pattern (
  (temp___String_Literal_272 us_void_param)) )))

(define-fun dynamic_invariant3 ((temp___expr_46 Int) (temp___is_init_42 Bool)
  (temp___skip_constant_43 Bool) (temp___do_toplevel_44 Bool)
  (temp___do_typ_inv_45 Bool)) Bool (=>
                                    (or (= temp___is_init_42 true)
                                    (<= 1 2147483647)) (in_range2
                                    temp___expr_46)))

(define-fun dynamic_invariant4 ((temp___expr_74 Int) (temp___is_init_70 Bool)
  (temp___skip_constant_71 Bool) (temp___do_toplevel_72 Bool)
  (temp___do_typ_inv_73 Bool)) Bool (=>
                                    (or (= temp___is_init_70 true)
                                    (<= 0 255)) (in_range3 temp___expr_74)))

(declare-sort count 0)

(declare-fun countqtint (count) Int)

;; count'axiom
  (assert
  (forall ((i count))
  (and (<= 0 (countqtint i)) (<= (countqtint i) 2147483647))))

(define-fun in_range5 ((x Int)) Bool (and (<= 0 x) (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE5 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check5 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE5 (us_image) Int)

(declare-fun user_eq5 (count count) Bool)

(declare-const dummy5 count)

(declare-datatypes () ((count__ref (count__refqtmk (count__content count)))))
(define-fun count__ref_count__content__projection ((a count__ref)) count 
  (count__content a))

(define-fun dynamic_invariant5 ((temp___expr_170 Int)
  (temp___is_init_166 Bool) (temp___skip_constant_167 Bool)
  (temp___do_toplevel_168 Bool)
  (temp___do_typ_inv_169 Bool)) Bool (=>
                                     (or (= temp___is_init_166 true)
                                     (<= 0 2147483647)) (in_range5
                                     temp___expr_170)))

;; line_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant5
  (line_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((line_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

;; page_length__post_axiom
  (assert
  (forall ((ada___ada__text_io__standard_in us_private)
  (ada___ada__text_io__file_system us_private)
  (ada___ada__text_io__standard_out us_private)
  (ada___ada__text_io__standard_err us_private)
  (ada___ada__text_io__current_in us_private)
  (ada___ada__text_io__current_out us_private)
  (ada___ada__text_io__current_err us_private)) (! (dynamic_invariant5
  (page_length ada___ada__text_io__standard_in
  ada___ada__text_io__file_system ada___ada__text_io__standard_out
  ada___ada__text_io__standard_err ada___ada__text_io__current_in
  ada___ada__text_io__current_out ada___ada__text_io__current_err) true false
  true
  true) :pattern ((page_length ada___ada__text_io__standard_in
                  ada___ada__text_io__file_system
                  ada___ada__text_io__standard_out
                  ada___ada__text_io__standard_err
                  ada___ada__text_io__current_in
                  ada___ada__text_io__current_out
                  ada___ada__text_io__current_err)) )))

(declare-const standard_in us_private)

(declare-const file_system us_private)

(declare-const standard_out us_private)

(declare-const standard_err us_private)

(declare-const current_in us_private)

(declare-const current_out us_private)

(declare-const current_err us_private)

(declare-const line_num us_private)

(declare-const line us_private)

(declare-const first_char us_private)

(declare-const last_char us_private)

;; Assume
  (assert (dynamic_invariant2 s true false true true))

;; Assume
  (assert (dynamic_invariant error_pos true false true true))

(declare-const pos Int)

;; H
  (assert (= pos error_pos))

;; Assume
  (assert (dynamic_invariant pos true false true true))

(declare-const pos1 Int)

(declare-const spark__branch Bool)

;; H
  (assert (= spark__branch (ite (= pos 0) true false)))

;; H
  (assert
  (ite (= spark__branch true)
  (let ((o (column_number line first_char)))
  (and
  (and (column_number__function_guard o line first_char) (dynamic_invariant o
  true false true true)) (= pos1 o))) (= pos1 pos)))

(declare-const standard_in1 us_private)

(declare-const file_system1 us_private)

(declare-const standard_out1 us_private)

(declare-const standard_err1 us_private)

(declare-const current_in1 us_private)

(declare-const current_out1 us_private)

(declare-const current_err1 us_private)

;; H
  (assert
  (= (line_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (line_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))

;; H
  (assert
  (= (page_length standard_in file_system standard_out standard_err
     current_in current_out current_err) (page_length standard_in1
                                         file_system1 standard_out1
                                         standard_err1 current_in1
                                         current_out1 current_err1)))

(define-fun o () us_t (current_line line last_char))

;; H
  (assert (current_line__function_guard o line last_char))

;; H
  (assert (dynamic_invariant2 o true false true true))

(declare-const standard_in2 us_private)

(declare-const file_system2 us_private)

(declare-const standard_out2 us_private)

(declare-const standard_err2 us_private)

(declare-const current_in2 us_private)

(declare-const current_out2 us_private)

(declare-const current_err2 us_private)

;; H
  (assert
  (= (line_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (line_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2)))

;; H
  (assert
  (= (page_length standard_in1 file_system1 standard_out1 standard_err1
     current_in1 current_out1 current_err1) (page_length standard_in2
                                            file_system2 standard_out2
                                            standard_err2 current_in2
                                            current_out2 current_err2)))

(declare-const standard_in3 us_private)

(declare-const file_system3 us_private)

(declare-const standard_out3 us_private)

(declare-const standard_err3 us_private)

(declare-const current_in3 us_private)

(declare-const current_out3 us_private)

(declare-const current_err3 us_private)

;; H
  (assert
  (= (line_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (line_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))

;; H
  (assert
  (= (page_length standard_in2 file_system2 standard_out2 standard_err2
     current_in2 current_out2 current_err2) (page_length standard_in3
                                            file_system3 standard_out3
                                            standard_err3 current_in3
                                            current_out3 current_err3)))

;; Assume
  (assert (= (- pos1 1) r14b))

;; Assume
  (assert (dynamic_invariant1 r14b true false true true))

(define-fun temp___268 () Int r14b)

(declare-const i Int)

;; H
  (assert (= i 1))

(declare-const standard_in4 us_private)

(declare-const file_system4 us_private)

(declare-const standard_out4 us_private)

(declare-const standard_err4 us_private)

(declare-const current_in4 us_private)

(declare-const current_out4 us_private)

(declare-const current_err4 us_private)

;; H
  (assert
  (ite (= (and (ite (<= 1 i) true false) (ite (<= i temp___268) true false)) true)
  (exists ((standard_in5 us_private) (file_system5 us_private)
  (standard_out5 us_private) (standard_err5 us_private)
  (current_in5 us_private) (current_out5 us_private)
  (current_err5 us_private) (i1 Int))
  (and (and (<= 1 i1) (<= i1 r14b))
  (and
  (and
  (= (line_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (line_length standard_in4
                                            file_system4 standard_out4
                                            standard_err4 current_in4
                                            current_out4 current_err4))
  (= (page_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (page_length standard_in4
                                            file_system4 standard_out4
                                            standard_err4 current_in4
                                            current_out4 current_err4)))
  (= i1 temp___268))))
  (and
  (and
  (and
  (and
  (and (and (= standard_in4 standard_in3) (= file_system4 file_system3))
  (= standard_out4 standard_out3)) (= standard_err4 standard_err3))
  (= current_in4 current_in3)) (= current_out4 current_out3))
  (= current_err4 current_err3))))

(declare-const standard_in5 us_private)

(declare-const file_system5 us_private)

(declare-const standard_out5 us_private)

(declare-const standard_err5 us_private)

(declare-const current_in5 us_private)

(declare-const current_out5 us_private)

(declare-const current_err5 us_private)

;; H
  (assert
  (= (line_length standard_in4 file_system4 standard_out4 standard_err4
     current_in4 current_out4 current_err4) (line_length standard_in5
                                            file_system5 standard_out5
                                            standard_err5 current_in5
                                            current_out5 current_err5)))

;; H
  (assert
  (= (page_length standard_in4 file_system4 standard_out4 standard_err4
     current_in4 current_out4 current_err4) (page_length standard_in5
                                            file_system5 standard_out5
                                            standard_err5 current_in5
                                            current_out5 current_err5)))

(declare-const standard_in6 us_private)

(declare-const file_system6 us_private)

(declare-const standard_out6 us_private)

(declare-const standard_err6 us_private)

(declare-const current_in6 us_private)

(declare-const current_out6 us_private)

(declare-const current_err6 us_private)

;; H
  (assert
  (= (line_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (line_length standard_in6
                                            file_system6 standard_out6
                                            standard_err6 current_in6
                                            current_out6 current_err6)))

;; H
  (assert
  (= (page_length standard_in5 file_system5 standard_out5 standard_err5
     current_in5 current_out5 current_err5) (page_length standard_in6
                                            file_system6 standard_out6
                                            standard_err6 current_in6
                                            current_out6 current_err6)))

(define-fun o1 () Int (line_number line_num))

;; H
  (assert (line_number__function_guard o1 line_num))

;; H
  (assert (dynamic_invariant o1 true false true true))

(define-fun temp___273 () us_t (to_string (attr__ATTRIBUTE_IMAGE4 o1) 12))

;; H
  (assert (not (= (length1 temp___273) 0)))

(assert
;; defqtvc
 ;; File "screen_output.ads", line 18, characters 0-0
  (not (in_range2
  (- (+ (first1 temp___273) (+ (length (first1 temp___273)
                               (last1 temp___273)) (length 1 2))) 1))))
(check-sat)
