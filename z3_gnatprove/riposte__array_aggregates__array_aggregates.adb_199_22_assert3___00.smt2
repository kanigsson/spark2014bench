;; produced by z3_gnatprove.drv ;;
(set-info :smt-lib-version 2.5)
(set-info :source |VC generated by SPARK 2014|)
(set-info :category industrial)
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort enum_t 0)

(define-fun in_range1 ((x Int)) Bool (and (<= 0 x) (<= x 2)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (enum_t enum_t) Bool)

(declare-const dummy enum_t)

(declare-datatypes ()
((enum_t__ref (enum_t__refqtmk (enum_t__content enum_t)))))
(define-fun enum_t__ref_enum_t__content__projection ((a enum_t__ref)) enum_t 
  (enum_t__content a))

(declare-fun to_rep (enum_t) Int)

(declare-fun of_rep (Int) enum_t)

;; inversion_axiom
  (assert
  (forall ((x enum_t)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x enum_t)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort small_index_t 0)

(declare-fun small_index_tqtint (small_index_t) Int)

;; small_index_t'axiom
  (assert
  (forall ((i small_index_t))
  (and (<= 1 (small_index_tqtint i)) (<= (small_index_tqtint i) 1000))))

(define-fun in_range2 ((x Int)) Bool (and (<= 1 x) (<= x 1000)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (small_index_t small_index_t) Bool)

(declare-const dummy1 small_index_t)

(declare-datatypes ()
((small_index_t__ref
 (small_index_t__refqtmk (small_index_t__content small_index_t)))))
(define-fun small_index_t__ref_small_index_t__content__projection ((a small_index_t__ref)) small_index_t 
  (small_index_t__content a))

(define-fun to_rep1 ((x small_index_t)) Int (small_index_tqtint x))

(declare-fun of_rep1 (Int) small_index_t)

;; inversion_axiom
  (assert
  (forall ((x small_index_t))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x small_index_t)) (! (in_range2
  (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk
 (rec__array_aggregates__basic_record__a small_index_t)(rec__array_aggregates__basic_record__b Bool)(rec__array_aggregates__basic_record__c enum_t)))))
(define-fun us_split_fields_rec__array_aggregates__basic_record__a__projection ((a us_split_fields)) small_index_t 
  (rec__array_aggregates__basic_record__a a))

(define-fun us_split_fields_rec__array_aggregates__basic_record__b__projection ((a us_split_fields)) Bool 
  (rec__array_aggregates__basic_record__b a))

(define-fun us_split_fields_rec__array_aggregates__basic_record__c__projection ((a us_split_fields)) enum_t 
  (rec__array_aggregates__basic_record__c a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__4__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__4__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq ((a us_rep)
  (b us_rep)) Bool (ite (and
                        (and
                        (= (to_rep1
                           (rec__array_aggregates__basic_record__a
                           (us_split_fields1 a))) (to_rep1
                                                  (rec__array_aggregates__basic_record__a
                                                  (us_split_fields1 b))))
                        (= (ite (rec__array_aggregates__basic_record__b
                                (us_split_fields1 a)) 1 0) (ite (rec__array_aggregates__basic_record__b
                                                                (us_split_fields1
                                                                b)) 1 0)))
                        (= (to_rep
                           (rec__array_aggregates__basic_record__c
                           (us_split_fields1 a))) (to_rep
                                                  (rec__array_aggregates__basic_record__c
                                                  (us_split_fields1 b)))))
                   true false))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-const array_aggregates__basic_record__a__first__bit Int)

(declare-const array_aggregates__basic_record__a__last__bit Int)

(declare-const array_aggregates__basic_record__a__position Int)

;; array_aggregates__basic_record__a__first__bit_axiom
  (assert (<= 0 array_aggregates__basic_record__a__first__bit))

;; array_aggregates__basic_record__a__last__bit_axiom
  (assert
  (< array_aggregates__basic_record__a__first__bit array_aggregates__basic_record__a__last__bit))

;; array_aggregates__basic_record__a__position_axiom
  (assert (<= 0 array_aggregates__basic_record__a__position))

(declare-const array_aggregates__basic_record__b__first__bit Int)

(declare-const array_aggregates__basic_record__b__last__bit Int)

(declare-const array_aggregates__basic_record__b__position Int)

;; array_aggregates__basic_record__b__first__bit_axiom
  (assert (<= 0 array_aggregates__basic_record__b__first__bit))

;; array_aggregates__basic_record__b__last__bit_axiom
  (assert
  (< array_aggregates__basic_record__b__first__bit array_aggregates__basic_record__b__last__bit))

;; array_aggregates__basic_record__b__position_axiom
  (assert (<= 0 array_aggregates__basic_record__b__position))

(declare-const array_aggregates__basic_record__c__first__bit Int)

(declare-const array_aggregates__basic_record__c__last__bit Int)

(declare-const array_aggregates__basic_record__c__position Int)

;; array_aggregates__basic_record__c__first__bit_axiom
  (assert (<= 0 array_aggregates__basic_record__c__first__bit))

;; array_aggregates__basic_record__c__last__bit_axiom
  (assert
  (< array_aggregates__basic_record__c__first__bit array_aggregates__basic_record__c__last__bit))

;; array_aggregates__basic_record__c__position_axiom
  (assert (<= 0 array_aggregates__basic_record__c__position))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes ()
((basic_record__ref (basic_record__refqtmk (basic_record__content us_rep)))))
(define-fun basic_record__ref_basic_record__content__projection ((a basic_record__ref)) us_rep 
  (basic_record__content a))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int us_rep))))))
(declare-fun slide ((Array Int us_rep) Int Int) (Array Int us_rep))

;; slide_eq
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int us_rep)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq1 ((a (Array Int us_rep)) (a__first Int) (a__last Int)
  (b (Array Int us_rep)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_164 Int))
                           (=>
                           (and (<= a__first temp___idx_164)
                           (<= temp___idx_164 a__last))
                           (= (bool_eq (select a temp___idx_164)
                              (select b (+ (- b__first a__first) temp___idx_164))) true))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int us_rep)) (b (Array Int us_rep)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq1 b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_164 Int))
  (=> (and (<= a__first temp___idx_164) (<= temp___idx_164 a__last))
  (= (bool_eq (select a temp___idx_164)
     (select b (+ (- b__first a__first) temp___idx_164))) true))))))))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-fun temp_____aggregate_def_515 (us_rep us_rep) (Array Int us_rep))

(define-fun dynamic_invariant ((temp___expr_187 Int)
  (temp___is_init_183 Bool) (temp___skip_constant_184 Bool)
  (temp___do_toplevel_185 Bool)
  (temp___do_typ_inv_186 Bool)) Bool (=>
                                     (or (= temp___is_init_183 true)
                                     (<= 0 2)) (in_range1 temp___expr_187)))

(define-fun dynamic_invariant1 ((temp___expr_257 Int)
  (temp___is_init_253 Bool) (temp___skip_constant_254 Bool)
  (temp___do_toplevel_255 Bool)
  (temp___do_typ_inv_256 Bool)) Bool (=>
                                     (or (= temp___is_init_253 true)
                                     (<= 1 1000)) (in_range2
                                     temp___expr_257)))

;; def_axiom
  (assert
  (forall ((temp___517 us_rep) (temp___518 us_rep))
  (let ((temp___516 (temp_____aggregate_def_515 temp___517 temp___518)))
  (forall ((temp___519 Int))
  (ite (or (= temp___519 2) (and (<= 4 temp___519) (<= temp___519 6)))
  (= (select temp___516 temp___519) temp___517)
  (= (select temp___516 temp___519) temp___518))))))

(declare-const rliteral small_index_t)

;; rliteral_axiom
  (assert (= (small_index_tqtint rliteral) 5))

(declare-const rliteral1 small_index_t)

;; rliteral_axiom
  (assert (= (small_index_tqtint rliteral1) 10))

(declare-const x (Array Int us_rep))

;; Assume
  (assert true)

(declare-const o enum_t)

;; Ensures
  (assert (= (to_rep o) 1))

(declare-const o1 enum_t)

;; Ensures
  (assert (= (to_rep o1) 0))

(declare-const x1 (Array Int us_rep))

;; H
  (assert
  (= x1 (temp_____aggregate_def_515
        (us_repqtmk (us_split_fieldsqtmk rliteral (distinct 0 0) o1))
        (us_repqtmk (us_split_fieldsqtmk rliteral1 (distinct 1 0) o)))))

(assert
;; defqtvc
 ;; File "array_aggregates.adb", line 189, characters 0-0
  (not
  (= (to_rep
     (rec__array_aggregates__basic_record__c
     (us_split_fields1 (select x1 3)))) 1)))
(check-sat)
