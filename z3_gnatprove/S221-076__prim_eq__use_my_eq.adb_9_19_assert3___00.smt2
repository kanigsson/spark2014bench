(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-sort us_main_type 0)

(declare-fun us_main_eq (us_main_type us_main_type) Bool)

(declare-sort us_rep 0)

(declare-fun bool_eq (us_rep us_rep) Bool)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes () ((t__ref (t__refqtmk (t__content us_rep)))))
(define-fun t__ref_t__content__projection ((a t__ref)) us_rep (t__content a))

(declare-fun my_prop (us_rep us_rep) Bool)

(declare-fun my_prop__function_guard (Bool us_rep us_rep) Bool)

(declare-fun oeq (us_rep us_rep) Bool)

(declare-fun oeq__function_guard (Bool us_rep us_rep) Bool)

;; user_eq__def_axiom
  (assert
  (forall ((a us_rep) (b us_rep))
  (! (and
     (forall ((a1 us_rep) (b1 us_rep)) (oeq__function_guard (oeq a1 b1) a1
     b1)) (= (user_eq a b) (oeq a b))) :pattern ((user_eq a b)) )))

;; my_prop__post_axiom
  (assert true)

(declare-datatypes ()
((us_split_fields
 (us_split_fieldsqtmk (rec__use_my_eq__holder__content us_rep)))))
(define-fun us_split_fields_rec__use_my_eq__holder__content__projection ((a us_split_fields)) us_rep 
  (rec__use_my_eq__holder__content a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep1 (us_repqtmk (us_split_fields1 us_split_fields)))))
(define-fun us_rep___split_fields__projection ((a us_rep1)) us_split_fields 
  (us_split_fields1 a))

(define-fun bool_eq1 ((a us_rep1)
  (b us_rep1)) Bool (ite (= (user_eq
                            (rec__use_my_eq__holder__content
                            (us_split_fields1 a))
                            (rec__use_my_eq__holder__content
                            (us_split_fields1 b))) true)
                    true false))

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-const use_my_eq__holder__content__first__bit Int)

(declare-const use_my_eq__holder__content__last__bit Int)

(declare-const use_my_eq__holder__content__position Int)

;; use_my_eq__holder__content__first__bit_axiom
  (assert (<= 0 use_my_eq__holder__content__first__bit))

;; use_my_eq__holder__content__last__bit_axiom
  (assert
  (< use_my_eq__holder__content__first__bit use_my_eq__holder__content__last__bit))

;; use_my_eq__holder__content__position_axiom
  (assert (<= 0 use_my_eq__holder__content__position))

(declare-fun user_eq1 (us_rep1 us_rep1) Bool)

(declare-const dummy1 us_rep1)

(declare-datatypes ()
((holder__ref (holder__refqtmk (holder__content us_rep1)))))
(define-fun holder__ref_holder__content__projection ((a holder__ref)) us_rep1 
  (holder__content a))

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

;; oeq__post_axiom
  (assert
  (forall ((x us_rep) (y us_rep))
  (! (let ((result (oeq x y)))
     (and
     (forall ((x1 us_rep) (y1 us_rep)) (my_prop__function_guard
     (my_prop x1 y1) x1 y1))
     (=> (oeq__function_guard result x y)
     (=> (= result true) (= (my_prop x y) true))))) :pattern ((oeq x y)) )))

(declare-const x__split_fields us_rep)

(declare-const y__split_fields us_rep)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert true)

;; Assume
  (assert
  (= (bool_eq1 (us_repqtmk (us_split_fieldsqtmk x__split_fields))
     (us_repqtmk (us_split_fieldsqtmk y__split_fields))) true))

;; H
  (assert
  (forall ((x__split_fields1 us_rep) (y__split_fields1 us_rep))
  (my_prop__function_guard (my_prop x__split_fields1 y__split_fields1)
  x__split_fields1 y__split_fields1)))

(assert
;; defqtvc
 ;; File "use_my_eq.adb", line 2, characters 0-0
  (not (= (my_prop x__split_fields y__split_fields) true)))
(check-sat)

(exit)
