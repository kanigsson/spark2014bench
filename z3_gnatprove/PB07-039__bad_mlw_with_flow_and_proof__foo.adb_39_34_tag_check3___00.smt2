(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(declare-fun us_compatible_tags (Int Int) Bool)

;; __compatible_tags_refl
  (assert (forall ((tag Int)) (us_compatible_tags tag tag)))

(declare-datatypes ()
((us_split_fields (us_split_fieldsqtmk (rec__ext__ us_private)))))
(define-fun us_split_fields_rec__ext____projection ((a us_split_fields)) us_private 
  (rec__ext__ a))

(declare-datatypes ()
((us_split_fields__ref
 (us_split_fields__refqtmk (us_split_fields__content us_split_fields)))))
(define-fun us_split_fields__ref___split_fields__content__projection ((a us_split_fields__ref)) us_split_fields 
  (us_split_fields__content a))

(declare-datatypes ()
((us_rep (us_repqtmk (us_split_fields1 us_split_fields)(attr__tag Int)))))
(define-fun us_rep___split_fields__projection ((a us_rep)) us_split_fields 
  (us_split_fields1 a))

(define-fun us_rep_attr__tag__projection ((a us_rep)) Int (attr__tag a))

(define-fun bool_eq ((a us_rep) (b us_rep)) Bool (ite true true false))

(declare-fun us_dispatch_eq (us_rep us_rep) Bool)

(declare-const us_tag Int)

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(declare-fun user_eq (us_rep us_rep) Bool)

(declare-const dummy us_rep)

(declare-datatypes () ((t1__ref (t1__refqtmk (t1__content us_rep)))))
(define-fun t1__ref_t1__content__projection ((a t1__ref)) us_rep (t1__content
                                                                 a))

(declare-const t1_var__attr__tag Int)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(define-fun default_initial_assumption ((temp___expr_181 us_rep)
  (temp___skip_top_level_182 Bool)) Bool (= (attr__tag temp___expr_181) 
  us_tag))

(declare-fun prim_func (us_split_fields) us_rep)

(declare-fun prim_func__function_guard (us_rep us_split_fields) Bool)

(declare-fun prim_func1 (Int us_split_fields) us_rep)

(declare-fun prim_func__function_guard1 (us_rep Int us_split_fields) Bool)

(declare-const us_tag1 Int)

(declare-const value__size1 Int)

(declare-const object__size1 Int)

(declare-const alignment1 Int)

;; value__size_axiom
  (assert (<= 0 value__size1))

;; object__size_axiom
  (assert (<= 0 object__size1))

;; alignment_axiom
  (assert (<= 0 alignment1))

(declare-fun user_eq1 (us_rep us_rep) Bool)

(declare-const dummy1 us_rep)

(declare-datatypes () ((t2__ref (t2__refqtmk (t2__content us_rep)))))
(define-fun t2__ref_t2__content__projection ((a t2__ref)) us_rep (t2__content
                                                                 a))

(declare-const us_tag2 Int)

(declare-const value__size2 Int)

(declare-const object__size2 Int)

(declare-const alignment2 Int)

;; value__size_axiom
  (assert (<= 0 value__size2))

;; object__size_axiom
  (assert (<= 0 object__size2))

;; alignment_axiom
  (assert (<= 0 alignment2))

(declare-fun user_eq2 (us_rep us_rep) Bool)

(declare-const dummy2 us_rep)

(declare-datatypes () ((t3__ref (t3__refqtmk (t3__content us_rep)))))
(define-fun t3__ref_t3__content__projection ((a t3__ref)) us_rep (t3__content
                                                                 a))

;; prim_func__post_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (let ((result (prim_func foo__t1_pkg__t1_var__fields)))
     (=> (prim_func__function_guard result foo__t1_pkg__t1_var__fields)
     (= (attr__tag result) us_tag))) :pattern ((prim_func
                                               foo__t1_pkg__t1_var__fields)) )))

;; prim_func__post__dispatch_axiom
  (assert
  (forall ((attr__tag1 Int))
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (let ((result (prim_func1 attr__tag1 foo__t1_pkg__t1_var__fields)))
     (=> (prim_func__function_guard1 result attr__tag1
     foo__t1_pkg__t1_var__fields) (= (attr__tag result) attr__tag1))) :pattern (
  (prim_func1 attr__tag1 foo__t1_pkg__t1_var__fields)) ))))

;; foo__t1_pkg__t1__compat_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (=> (prim_func__function_guard1
     (prim_func1 us_tag foo__t1_pkg__t1_var__fields) us_tag
     foo__t1_pkg__t1_var__fields)
     (and
     (forall ((foo__t1_pkg__t1_var__fields1 us_split_fields))
     (prim_func__function_guard (prim_func foo__t1_pkg__t1_var__fields1)
     foo__t1_pkg__t1_var__fields1))
     (= (prim_func foo__t1_pkg__t1_var__fields) (prim_func1 us_tag
                                                foo__t1_pkg__t1_var__fields)))) :pattern (
  (prim_func1 us_tag foo__t1_pkg__t1_var__fields)) )))

;; foo__t2_pkg__t2__compat_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (=> (prim_func__function_guard1
     (prim_func1 us_tag1 foo__t1_pkg__t1_var__fields) us_tag1
     foo__t1_pkg__t1_var__fields)
     (and
     (forall ((foo__t1_pkg__t1_var__fields1 us_split_fields))
     (prim_func__function_guard (prim_func foo__t1_pkg__t1_var__fields1)
     foo__t1_pkg__t1_var__fields1))
     (= (prim_func foo__t1_pkg__t1_var__fields) (prim_func1 us_tag1
                                                foo__t1_pkg__t1_var__fields)))) :pattern (
  (prim_func1 us_tag1 foo__t1_pkg__t1_var__fields)) )))

;; foo__t3_pkg__t3__compat_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (=> (prim_func__function_guard1
     (prim_func1 us_tag2 foo__t1_pkg__t1_var__fields) us_tag2
     foo__t1_pkg__t1_var__fields)
     (and
     (forall ((foo__t1_pkg__t1_var__fields1 us_split_fields))
     (prim_func__function_guard (prim_func foo__t1_pkg__t1_var__fields1)
     foo__t1_pkg__t1_var__fields1))
     (= (prim_func foo__t1_pkg__t1_var__fields) (prim_func1 us_tag2
                                                foo__t1_pkg__t1_var__fields)))) :pattern (
  (prim_func1 us_tag2 foo__t1_pkg__t1_var__fields)) )))

;; prim_func__def_axiom
  (assert
  (forall ((foo__t1_pkg__t1_var__fields us_split_fields))
  (! (= (prim_func foo__t1_pkg__t1_var__fields) (us_repqtmk
                                                foo__t1_pkg__t1_var__fields
                                                t1_var__attr__tag)) :pattern (
  (prim_func foo__t1_pkg__t1_var__fields)) )))

(define-fun default_initial_assumption1 ((temp___expr_197 us_rep)
  (temp___skip_top_level_198 Bool)) Bool (= (attr__tag temp___expr_197) 
  us_tag1))

(define-fun default_initial_assumption2 ((temp___expr_209 us_rep)
  (temp___skip_top_level_210 Bool)) Bool (= (attr__tag temp___expr_209) 
  us_tag2))

(declare-const t1_var__split_fields us_private)

;; Assume
  (assert true)

(define-fun temp___230 () us_rep (prim_func
                                 (us_split_fieldsqtmk t1_var__split_fields)))

;; H
  (assert (prim_func__function_guard temp___230
  (us_split_fieldsqtmk t1_var__split_fields)))

;; H
  (assert true)

;; H
  (assert
  (= temp___230 (us_repqtmk (us_split_fieldsqtmk t1_var__split_fields)
                t1_var__attr__tag)))

(assert
;; defqtvc
 ;; File "foo.adb", line 38, characters 0-0
  (not (us_compatible_tags (attr__tag temp___230) us_tag1)))
(check-sat)
