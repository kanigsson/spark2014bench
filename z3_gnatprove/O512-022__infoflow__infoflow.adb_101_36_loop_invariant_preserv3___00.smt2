(set-info :smt-lib-version 2.6)
(set-logic AUFBVFPDTNIRA)
(set-info :source |
Generated by: AdaCore
Generated on: 2020-03-06
Generator: SPARK
Application: Program verification for Ada
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
;;; generated by SMT-LIB2 driver
;;; SMT-LIB2 driver: bit-vectors, common part
;;; SMT-LIB2: integer arithmetic
(declare-sort string 0)

(declare-datatypes () ((tuple0 (Tuple0))))
(declare-sort us_private 0)

(declare-fun private__bool_eq (us_private us_private) Bool)

(declare-const us_null_ext__ us_private)

(declare-sort us_type_of_heap 0)

(declare-datatypes ()
((us_type_of_heap__ref
 (us_type_of_heap__refqtmk (us_type_of_heap__content us_type_of_heap)))))
(declare-sort us_image 0)

(declare-datatypes () ((int__ref (int__refqtmk (int__content Int)))))
(declare-datatypes () ((bool__ref (bool__refqtmk (bool__content Bool)))))
(declare-datatypes ()
((us_fixed__ref (us_fixed__refqtmk (us_fixed__content Int)))))
(declare-datatypes () ((real__ref (real__refqtmk (real__content Real)))))
(declare-datatypes ()
((us_private__ref (us_private__refqtmk (us_private__content us_private)))))
(define-fun int__ref___projection ((a int__ref)) Int (int__content a))

(define-fun us_fixed__ref___projection ((a us_fixed__ref)) Int (us_fixed__content
                                                               a))

(define-fun bool__ref___projection ((a bool__ref)) Bool (bool__content a))

(define-fun real__ref___projection ((a real__ref)) Real (real__content a))

(define-fun us_private__ref___projection ((a us_private__ref)) us_private 
  (us_private__content a))

(define-fun length ((x Int) (y Int)) Int (ite (<= x y) (+ (- y x) 1) 0))

(define-fun abs1 ((x Int)) Int (ite (<= 0 x) x (- x)))

;; Abs_le
  (assert
  (forall ((x Int) (y Int)) (= (<= (abs1 x) y) (and (<= (- y) x) (<= x y)))))

;; Abs_pos
  (assert (forall ((x Int)) (<= 0 (abs1 x))))

(declare-fun div1 (Int Int) Int)

(declare-fun mod1 (Int Int) Int)

;; Div_mod
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (= x (+ (* y (div1 x y)) (mod1 x y))))))

;; Div_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (div1 x y)) (<= (div1 x y) x)))))

;; Mod_bound
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0))
  (and (< (- (abs1 y)) (mod1 x y)) (< (mod1 x y) (abs1 y))))))

;; Div_sign_pos
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< 0 y)) (<= 0 (div1 x y)))))

;; Div_sign_neg
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= x 0) (< 0 y)) (<= (div1 x y) 0))))

;; Mod_sign_pos
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= 0 x) (not (= y 0))) (<= 0 (mod1 x y)))))

;; Mod_sign_neg
  (assert
  (forall ((x Int) (y Int))
  (=> (and (<= x 0) (not (= y 0))) (<= (mod1 x y) 0))))

;; Rounds_toward_zero
  (assert
  (forall ((x Int) (y Int))
  (=> (not (= y 0)) (<= (abs1 (* (div1 x y) y)) (abs1 x)))))

;; Div_1
  (assert (forall ((x Int)) (= (div1 x 1) x)))

;; Mod_1
  (assert (forall ((x Int)) (= (mod1 x 1) 0)))

;; Div_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (div1 x y) 0))))

;; Mod_inf
  (assert
  (forall ((x Int) (y Int)) (=> (and (<= 0 x) (< x y)) (= (mod1 x y) x))))

;; Div_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (div1 (+ (* x y) z) x) (+ y (div1 z x)))) :pattern ((div1
                                                            (+ (* x y) z) x)) )))

;; Mod_mult
  (assert
  (forall ((x Int) (y Int) (z Int))
  (! (=> (and (< 0 x) (and (<= 0 y) (<= 0 z)))
     (= (mod1 (+ (* x y) z) x) (mod1 z x))) :pattern ((mod1 (+ (* x y) z) x)) )))

(define-fun mod2 ((x Int)
  (y Int)) Int (ite (< 0 y) (mod x y) (+ (mod x y) y)))

(define-fun in_range ((x Int)) Bool (or (= x 0) (= x 1)))

(declare-fun attr__ATTRIBUTE_IMAGE (Bool) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE (us_image) Bool)

(declare-sort integer 0)

(declare-fun integerqtint (integer) Int)

;; integer'axiom
  (assert
  (forall ((i integer))
  (and (<= (- 2147483648) (integerqtint i)) (<= (integerqtint i) 2147483647))))

(define-fun in_range1 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE1 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check1 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE1 (us_image) Int)

(declare-fun user_eq (integer integer) Bool)

(declare-const dummy integer)

(declare-datatypes ()
((integer__ref (integer__refqtmk (integer__content integer)))))
(define-fun integer__ref_integer__content__projection ((a integer__ref)) integer 
  (integer__content a))

(define-fun dynamic_invariant ((temp___expr_18 Int) (temp___is_init_14 Bool)
  (temp___skip_constant_15 Bool) (temp___do_toplevel_16 Bool)
  (temp___do_typ_inv_17 Bool)) Bool (=>
                                    (or (= temp___is_init_14 true)
                                    (<= (- 2147483648) 2147483647))
                                    (in_range1 temp___expr_18)))

(define-fun to_rep ((x integer)) Int (integerqtint x))

(declare-fun of_rep (Int) integer)

;; inversion_axiom
  (assert
  (forall ((x integer)) (! (= (of_rep (to_rep x)) x) :pattern ((to_rep x)) )))

;; range_axiom
  (assert
  (forall ((x integer)) (! (in_range1 (to_rep x)) :pattern ((to_rep x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range1 x) (= (to_rep (of_rep x)) x)) :pattern ((to_rep
                                                            (of_rep x))) )))

(declare-sort content 0)

(declare-fun contentqtint (content) Int)

;; content'axiom
  (assert
  (forall ((i content))
  (and (<= (- 2147483648) (contentqtint i)) (<= (contentqtint i) 2147483647))))

(define-fun in_range2 ((x Int)) Bool (and (<= (- 2147483648) x)
                                     (<= x 2147483647)))

(declare-fun attr__ATTRIBUTE_IMAGE2 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check2 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE2 (us_image) Int)

(declare-fun user_eq1 (content content) Bool)

(declare-const dummy1 content)

(declare-datatypes ()
((content__ref (content__refqtmk (content__content content)))))
(define-fun content__ref_content__content__projection ((a content__ref)) content 
  (content__content a))

(define-fun to_rep1 ((x content)) Int (contentqtint x))

(declare-fun of_rep1 (Int) content)

;; inversion_axiom
  (assert
  (forall ((x content))
  (! (= (of_rep1 (to_rep1 x)) x) :pattern ((to_rep1 x)) )))

;; range_axiom
  (assert
  (forall ((x content)) (! (in_range2 (to_rep1 x)) :pattern ((to_rep1 x)) )))

;; coerce_axiom
  (assert
  (forall ((x Int))
  (! (=> (in_range2 x) (= (to_rep1 (of_rep1 x)) x)) :pattern ((to_rep1
                                                              (of_rep1 x))) )))

(declare-datatypes ()
((map__ref (map__refqtmk (map__content (Array Int content))))))
(declare-fun slide ((Array Int content) Int Int) (Array Int content))

;; slide_eq
  (assert
  (forall ((a (Array Int content)))
  (forall ((first Int))
  (! (= (slide a first first) a) :pattern ((slide a first first)) ))))

;; slide_def
  (assert
  (forall ((a (Array Int content)))
  (forall ((old_first Int))
  (forall ((new_first Int))
  (forall ((i Int))
  (! (= (select (slide a old_first new_first) i) (select a (- i (- new_first old_first)))) :pattern ((select 
  (slide a old_first new_first) i)) ))))))

(define-fun bool_eq ((a (Array Int content)) (a__first Int) (a__last Int)
  (b (Array Int content)) (b__first Int)
  (b__last Int)) Bool (ite (and
                           (ite (<= a__first a__last)
                           (and (<= b__first b__last)
                           (= (- a__last a__first) (- b__last b__first)))
                           (< b__last b__first))
                           (forall ((temp___idx_156 Int))
                           (=>
                           (and (<= a__first temp___idx_156)
                           (<= temp___idx_156 a__last))
                           (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                                                  (select b (+ (- b__first a__first) temp___idx_156)))))))
                      true false))

;; bool_eq_rev
  (assert
  (forall ((a (Array Int content)) (b (Array Int content)))
  (forall ((a__first Int) (a__last Int) (b__first Int) (b__last Int))
  (=> (= (bool_eq b b__first b__last a a__first a__last) true)
  (and
  (ite (<= a__first a__last)
  (and (<= b__first b__last) (= (- a__last a__first) (- b__last b__first)))
  (< b__last b__first))
  (forall ((temp___idx_156 Int))
  (=> (and (<= a__first temp___idx_156) (<= temp___idx_156 a__last))
  (= (to_rep1 (select a temp___idx_156)) (to_rep1
                                         (select b (+ (- b__first a__first) temp___idx_156)))))))))))

(declare-const h_v1__first integer)

(declare-const h_v1__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS Int)

(declare-const h_v2__first integer)

(declare-const h_v2__last integer)

(declare-const attr__ATTRIBUTE_ADDRESS1 Int)

(declare-const i Int)

(declare-const attr__ATTRIBUTE_ADDRESS2 Int)

(declare-const attr__ATTRIBUTE_ADDRESS3 Int)

(declare-const attr__ATTRIBUTE_ADDRESS4 Int)

(declare-const r11b Int)

(declare-const attr__ATTRIBUTE_ADDRESS5 Int)

(declare-const attr__ATTRIBUTE_ADDRESS6 Int)

(declare-const attr__ATTRIBUTE_ADDRESS7 Int)

(declare-const attr__ATTRIBUTE_ADDRESS8 Int)

(declare-const r17b Int)

(declare-const attr__ATTRIBUTE_ADDRESS9 Int)

(declare-const attr__ATTRIBUTE_ADDRESS10 Int)

(define-fun dynamic_invariant1 ((temp___expr_232 Int)
  (temp___is_init_228 Bool) (temp___skip_constant_229 Bool)
  (temp___do_toplevel_230 Bool)
  (temp___do_typ_inv_231 Bool)) Bool (=>
                                     (or (= temp___is_init_228 true)
                                     (<= (- 2147483648) 2147483647))
                                     (in_range2 temp___expr_232)))

(declare-sort t 0)

(declare-fun first (t) integer)

(declare-fun last (t) integer)

(declare-fun mk (Int Int) t)

;; mk_def
  (assert
  (forall ((f Int) (l Int))
  (! (=> (in_range1 f)
     (=> (in_range1 l)
     (and (= (to_rep (first (mk f l))) f) (= (to_rep (last (mk f l))) l)))) :pattern (
  (mk f l)) )))

(define-fun dynamic_property ((range_first Int) (range_last Int) (low Int)
  (high Int)) Bool (and (in_range1 low)
                   (and (in_range1 high)
                   (=> (<= low high) (and (in_range1 low) (in_range1 high))))))

(declare-datatypes () ((us_t (us_tqtmk (elts (Array Int content))(rt t)))))
(define-fun to_array ((a us_t)) (Array Int content) (elts a))

(define-fun of_array ((a (Array Int content)) (f Int)
  (l Int)) us_t (us_tqtmk a (mk f l)))

(define-fun first1 ((a us_t)) Int (to_rep (first (rt a))))

(define-fun last1 ((a us_t)) Int (to_rep (last (rt a))))

(define-fun length1 ((a us_t)) Int (ite (<= (first1 a) (last1 a))
                                   (+ (- (last1 a) (first1 a)) 1) 0))

(declare-const value__size Int)

(declare-const object__size Int)

(declare-const component__size Int)

(declare-const alignment Int)

;; value__size_axiom
  (assert (<= 0 value__size))

;; object__size_axiom
  (assert (<= 0 object__size))

;; component__size_axiom
  (assert (<= 0 component__size))

;; alignment_axiom
  (assert (<= 0 alignment))

(define-fun bool_eq1 ((x us_t)
  (y us_t)) Bool (bool_eq (elts x) (to_rep (first (rt x)))
                 (to_rep (last (rt x))) (elts y) (to_rep (first (rt y)))
                 (to_rep (last (rt y)))))

(declare-fun user_eq2 (us_t us_t) Bool)

(declare-const dummy2 us_t)

(declare-datatypes ()
((h_type__ref (h_type__refqtmk (h_type__content us_t)))))
(define-fun h_type__ref_h_type__content__projection ((a h_type__ref)) us_t 
  (h_type__content a))

(define-fun dynamic_property1 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE3 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check3 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE3 (us_image) Int)

(declare-fun user_eq3 (integer integer) Bool)

(declare-const dummy3 integer)

(declare-datatypes () ((t12b__ref (t12b__refqtmk (t12b__content integer)))))
(define-fun t12b__ref_t12b__content__projection ((a t12b__ref)) integer 
  (t12b__content a))

(define-fun dynamic_property2 ((first_int Int) (last_int Int)
  (x Int)) Bool (and (<= first_int x) (<= x last_int)))

(declare-fun attr__ATTRIBUTE_IMAGE4 (Int) us_image)

(declare-fun attr__ATTRIBUTE_VALUE__pre_check4 (us_image) Bool)

(declare-fun attr__ATTRIBUTE_VALUE4 (us_image) Int)

(declare-fun user_eq4 (integer integer) Bool)

(declare-const dummy4 integer)

(declare-datatypes () ((t18b__ref (t18b__refqtmk (t18b__content integer)))))
(define-fun t18b__ref_t18b__content__projection ((a t18b__ref)) integer 
  (t18b__content a))

(define-fun dynamic_invariant2 ((temp___expr_239 us_t)
  (temp___is_init_235 Bool) (temp___skip_constant_236 Bool)
  (temp___do_toplevel_237 Bool)
  (temp___do_typ_inv_238 Bool)) Bool (=>
                                     (not (= temp___skip_constant_236 true))
                                     (dynamic_property (- 2147483648)
                                     2147483647 (first1 temp___expr_239)
                                     (last1 temp___expr_239))))

(declare-const h_v1 (Array Int content))

(declare-const h_v2 (Array Int content))

(declare-const t_v1 Int)

(declare-const m_v1 Int)

(declare-const t_v2 Int)

(declare-const m_v2 Int)

;; Assume
  (assert (dynamic_property (- 2147483648) 2147483647 (to_rep h_v1__first)
  (to_rep h_v1__last)))

;; Assume
  (assert (dynamic_property (- 2147483648) 2147483647 (to_rep h_v2__first)
  (to_rep h_v2__last)))

;; Assume
  (assert (dynamic_invariant i true false true true))

(define-fun usf () Bool (and (and (and (and (and (and (ite (<= (to_rep
                                                               h_v1__first) 
                                                      i) true false) 
  (ite (<= i (to_rep h_v1__last)) true false)) (= (to_rep h_v1__first) 1)) (= 
  (to_rep h_v2__first) 1)) (= (to_rep h_v1__last) (to_rep h_v2__last))) (> 
  i (div1 (to_rep h_v1__last) 2))) (= (to_rep1
                                      (select h_v1 (- i (div1
                                                        (to_rep h_v1__last)
                                                        2)))) (to_rep1
                                                              (select 
                                                              h_v2 (- 
                                                              i (div1
                                                                (to_rep
                                                                h_v2__last)
                                                                2)))))))

(define-fun usf1 () Bool (and (and (and (and (and (and (ite (<= (to_rep
                                                                h_v1__first) 
                                                       i) true false) 
  (ite (<= i (to_rep h_v1__last)) true false)) (= (to_rep h_v1__first) 1)) (= 
  (to_rep h_v2__first) 1)) (= (to_rep h_v1__last) (to_rep h_v2__last))) (<= 
  i (div1 (to_rep h_v1__last) 2))) (= (to_rep1
                                      (select h_v1 (+ i (div1
                                                        (to_rep h_v1__last)
                                                        2)))) (to_rep1
                                                              (select 
                                                              h_v2 (+ 
                                                              i (div1
                                                                (to_rep
                                                                h_v2__last)
                                                                2)))))))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant1 t_v1 false false true true))

;; Assume
  (assert true)

;; Assume
  (assert (dynamic_invariant m_v1 false false true true))

(declare-const o Int)

;; Ensures
  (assert (= (to_rep h_v1__last) o))

(declare-const m_v11 Int)

;; H
  (assert (= m_v11 (div1 o 2)))

;; Assume
  (assert (= m_v11 r11b))

;; Assume
  (assert (dynamic_invariant r11b true false true true))

(declare-const temp___425 Int)

;; Ensures
  (assert (= (to_rep h_v1__first) temp___425))

(define-fun temp___426 () Int r11b)

(declare-const q_v1 Int)

;; H
  (assert (= q_v1 temp___425))

;; H
  (assert
  (= (and (ite (<= temp___425 q_v1) true false) (ite (<= q_v1 temp___426)
                                                true false)) true))

(declare-const temp___loop_entry_437 (Array Int content))

;; H
  (assert (= temp___loop_entry_437 h_v1))

(declare-const temp___loop_entry_435 (Array Int content))

;; H
  (assert (= temp___loop_entry_435 h_v1))

(declare-const temp___loop_entry_439 (Array Int content))

;; H
  (assert (= temp___loop_entry_439 h_v1))

(declare-const o1 Int)

;; Ensures
  (assert (= (to_rep h_v1__last) o1))

(declare-const o2 Int)

;; Ensures
  (assert (= (to_rep h_v1__first) o2))

(declare-const h_v11 (Array Int content))

(declare-const t_v11 Int)

(declare-const q_v11 Int)

;; LoopInvariant
  (assert
  (forall ((k Int))
  (=> (and (<= (to_rep h_v1__first) k) (<= k (to_rep h_v1__last)))
  (ite (< k q_v11)
  (= (to_rep1 (select h_v11 k)) (to_rep1
                                (select temp___loop_entry_435 (+ k m_v11))))
  (ite (< (+ q_v11 m_v11) k)
  (= (to_rep1 (select h_v11 k)) (to_rep1
                                (select temp___loop_entry_437 (- k m_v11))))
  (= (to_rep1 (select h_v11 k)) (to_rep1 (select temp___loop_entry_439 k))))))))

;; H
  (assert
  (= (and (ite (and (dynamic_invariant1 t_v11 false true true true)
               (dynamic_property1 (to_rep h_v1__first) r11b q_v11))
          true false) (ite (and (<= (to_rep h_v1__first) q_v11)
                           (<= q_v11 r11b))
                      true false)) true))

;; Assert
  (assert
  (and (<= (to_rep h_v1__first) q_v11) (<= q_v11 (to_rep h_v1__last))))

(declare-const o3 Int)

;; Ensures
  (assert (= (to_rep1 (select h_v11 q_v11)) o3))

(declare-const t_v12 Int)

;; H
  (assert (= t_v12 o3))

(define-fun o4 () Int (+ q_v11 m_v11))

;; Ensures
  (assert (in_range1 o4))

;; Assert
  (assert (and (<= (to_rep h_v1__first) o4) (<= o4 (to_rep h_v1__last))))

(declare-const o5 Int)

;; Ensures
  (assert (= (to_rep1 (select h_v11 o4)) o5))

(declare-const o6 content)

;; Ensures
  (assert (= (to_rep1 o6) o5))

;; Assert
  (assert
  (and (<= (to_rep h_v1__first) q_v11) (<= q_v11 (to_rep h_v1__last))))

(declare-const h_v12 (Array Int content))

;; H
  (assert (= h_v12 (store h_v11 q_v11 o6)))

(declare-const o7 content)

;; Ensures
  (assert (= (to_rep1 o7) t_v12))

(define-fun o8 () Int (+ q_v11 m_v11))

;; Ensures
  (assert (in_range1 o8))

;; Assert
  (assert (and (<= (to_rep h_v1__first) o8) (<= o8 (to_rep h_v1__last))))

(declare-const h_v13 (Array Int content))

;; H
  (assert (= h_v13 (store h_v12 o8 o7)))

;; H
  (assert (not (= q_v11 temp___426)))

(declare-const q_v12 Int)

;; H
  (assert (= q_v12 (+ q_v11 1)))

(declare-const o9 Int)

;; Ensures
  (assert (= (to_rep h_v1__last) o9))

(declare-const o10 Int)

;; Ensures
  (assert (= (to_rep h_v1__first) o10))

(declare-const k Int)

;; H
  (assert (<= (to_rep h_v1__first) k))

;; H
  (assert (<= k (to_rep h_v1__last)))

;; H
  (assert (< k q_v12))

(assert
;; defqtvc
 ;; File "infoflow.ads", line 73, characters 0-0
  (not
  (= (to_rep1 (select h_v13 k)) (to_rep1
                                (select temp___loop_entry_435 (+ k m_v11))))))
(check-sat)
