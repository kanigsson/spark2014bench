(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type name_t

logic name_tqtint : name_t -> int

axiom name_tqtaxiom : (forall i:name_t. (0 <= name_tqtint(i)))

axiom name_tqtaxiom1 : (forall i:name_t. (name_tqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : name_t, name_t -> bool

logic dummy : name_t

type name_t__ref = { name_t__content : name_t
}

function name_t__ref_name_t__content__projection(a: name_t__ref) : name_t =
  (a).name_t__content

function to_rep(x: name_t) : int = name_tqtint(x)

logic of_rep : int -> name_t

axiom inversion_axiom :
  (forall x:name_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:name_t [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__model__uml_state__name_data : name_t
}

function us_split_fields_rec__model__uml_state__name_data__projection(a: us_split_fields) : name_t =
  (a).rec__model__uml_state__name_data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__model__uml_state__name_data) = to_rep(((b).us_split_fields1).rec__model__uml_state__name_data)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic model__uml_state__name_data__first__bit : int

logic model__uml_state__name_data__last__bit : int

logic model__uml_state__name_data__position : int

axiom model__uml_state__name_data__first__bit_axiom :
  (0 <= model__uml_state__name_data__first__bit)

axiom model__uml_state__name_data__last__bit_axiom :
  (model__uml_state__name_data__first__bit <  model__uml_state__name_data__last__bit)

axiom model__uml_state__name_data__position_axiom :
  (0 <= model__uml_state__name_data__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type uml_state__ref = { uml_state__content : us_rep
}

function uml_state__ref_uml_state__content__projection(a: uml_state__ref) : us_rep =
  (a).uml_state__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq1((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq1((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy2 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : (int,us_rep) farray, (int,us_rep) farray -> bool

type uml_state_access

logic uml_state_accessqtint : uml_state_access -> int

axiom uml_state_accessqtaxiom :
  (forall i:uml_state_access. (0 <= uml_state_accessqtint(i)))

axiom uml_state_accessqtaxiom1 :
  (forall i:uml_state_access. (uml_state_accessqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq3 : uml_state_access, uml_state_access -> bool

logic dummy3 : uml_state_access

type uml_state_access__ref = { uml_state_access__content : uml_state_access
}

function uml_state_access__ref_uml_state_access__content__projection(a: uml_state_access__ref) : uml_state_access =
  (a).uml_state_access__content

function to_rep1(x: uml_state_access) : int = uml_state_accessqtint(x)

logic of_rep1 : int -> uml_state_access

axiom inversion_axiom1 :
  (forall x:uml_state_access [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:uml_state_access [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__model__uml_transition__from_data :
uml_state_access; rec__model__uml_transition__to_data : uml_state_access
}

function us_split_fields_rec__model__uml_transition__from_data__projection(a: us_split_fields2) : uml_state_access =
  (a).rec__model__uml_transition__from_data

function us_split_fields_rec__model__uml_transition__to_data__projection(a: us_split_fields2) : uml_state_access =
  (a).rec__model__uml_transition__to_data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_fields3).rec__model__uml_transition__from_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__from_data)) and
  (to_rep1(((a).us_split_fields3).rec__model__uml_transition__to_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__to_data))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic model__uml_transition__from_data__first__bit : int

logic model__uml_transition__from_data__last__bit : int

logic model__uml_transition__from_data__position : int

axiom model__uml_transition__from_data__first__bit_axiom :
  (0 <= model__uml_transition__from_data__first__bit)

axiom model__uml_transition__from_data__last__bit_axiom :
  (model__uml_transition__from_data__first__bit <  model__uml_transition__from_data__last__bit)

axiom model__uml_transition__from_data__position_axiom :
  (0 <= model__uml_transition__from_data__position)

logic model__uml_transition__to_data__first__bit : int

logic model__uml_transition__to_data__last__bit : int

logic model__uml_transition__to_data__position : int

axiom model__uml_transition__to_data__first__bit_axiom :
  (0 <= model__uml_transition__to_data__first__bit)

axiom model__uml_transition__to_data__last__bit_axiom :
  (model__uml_transition__to_data__first__bit <  model__uml_transition__to_data__last__bit)

axiom model__uml_transition__to_data__position_axiom :
  (0 <= model__uml_transition__to_data__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type uml_transition__ref = { uml_transition__content : us_rep1
}

function uml_transition__ref_uml_transition__content__projection(a: uml_transition__ref) : us_rep1 =
  (a).uml_transition__content

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

logic dummy5 : (int,us_rep1) farray

logic value__size3 : int

logic object__size3 : int

logic component__size1 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : (int,us_rep1) farray, (int,us_rep1) farray -> bool

type us_split_fields4 = { rec__model__uml_state_machine__owned_state_data :
(int,us_rep) farray; rec__model__uml_state_machine__owned_transition_data :
(int,us_rep1) farray
}

function us_split_fields_rec__model__uml_state_machine__owned_state_data__projection(a: us_split_fields4) : (int,us_rep) farray =
  (a).rec__model__uml_state_machine__owned_state_data

function us_split_fields_rec__model__uml_state_machine__owned_transition_data__projection(a: us_split_fields4) : (int,us_rep1) farray =
  (a).rec__model__uml_state_machine__owned_transition_data

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq6(a: us_rep2, b: us_rep2) : bool =
  (if ((bool_eq2(((a).us_split_fields5).rec__model__uml_state_machine__owned_state_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_state_data, 0,
  100) = true) and
  (bool_eq5(((a).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100) = true)) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic model__uml_state_machine__owned_state_data__first__bit : int

logic model__uml_state_machine__owned_state_data__last__bit : int

logic model__uml_state_machine__owned_state_data__position : int

axiom model__uml_state_machine__owned_state_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_state_data__first__bit)

axiom model__uml_state_machine__owned_state_data__last__bit_axiom :
  (model__uml_state_machine__owned_state_data__first__bit <  model__uml_state_machine__owned_state_data__last__bit)

axiom model__uml_state_machine__owned_state_data__position_axiom :
  (0 <= model__uml_state_machine__owned_state_data__position)

logic model__uml_state_machine__owned_transition_data__first__bit : int

logic model__uml_state_machine__owned_transition_data__last__bit : int

logic model__uml_state_machine__owned_transition_data__position : int

axiom model__uml_state_machine__owned_transition_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__first__bit)

axiom model__uml_state_machine__owned_transition_data__last__bit_axiom :
  (model__uml_state_machine__owned_transition_data__first__bit <  model__uml_state_machine__owned_transition_data__last__bit)

axiom model__uml_state_machine__owned_transition_data__position_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type uml_state_machine__ref = { uml_state_machine__content : us_rep2
}

function uml_state_machine__ref_uml_state_machine__content__projection(a: uml_state_machine__ref) : us_rep2 =
  (a).uml_state_machine__content

logic owned_transition : us_rep2 -> (int,us_rep1) farray

logic owned_transition__function_guard : (int,us_rep1) farray,
  us_rep2 -> prop

axiom owned_transition__def_axiom :
  (forall self:us_rep2 [owned_transition(self)].
  (owned_transition(self) = ((self).us_split_fields5).rec__model__uml_state_machine__owned_transition_data))

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

type uml_transition_access

logic uml_transition_accessqtint : uml_transition_access -> int

axiom uml_transition_accessqtaxiom :
  (forall i:uml_transition_access. (0 <= uml_transition_accessqtint(i)))

axiom uml_transition_accessqtaxiom1 :
  (forall i:uml_transition_access. (uml_transition_accessqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq7 : uml_transition_access, uml_transition_access -> bool

logic dummy7 : uml_transition_access

type uml_transition_access__ref = { uml_transition_access__content :
uml_transition_access
}

function uml_transition_access__ref_uml_transition_access__content__projection(a: uml_transition_access__ref) : uml_transition_access =
  (a).uml_transition_access__content

predicate dynamic_invariant(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_181))

predicate dynamic_invariant1(temp___expr_196: int, temp___is_init_192: bool,
  temp___skip_constant_193: bool, temp___do_toplevel_194: bool,
  temp___do_typ_inv_195: bool) = (((temp___is_init_192 = true) or
  (0 <= 100)) -> in_range1(temp___expr_196))

predicate dynamic_invariant2(temp___expr_223: int, temp___is_init_219: bool,
  temp___skip_constant_220: bool, temp___do_toplevel_221: bool,
  temp___do_typ_inv_222: bool) = (((temp___is_init_219 = true) or
  (0 <= 100)) -> in_range2(temp___expr_223))

 (* File "model.ads", line 65, characters 0-0 *)
goal defqtvc :
  (forall self__split_fields:us_split_fields4.
  (forall self__split_fields1:us_split_fields4. ((self__split_fields1 = {
  rec__model__uml_state_machine__owned_state_data =
  (self__split_fields).rec__model__uml_state_machine__owned_state_data;
  rec__model__uml_state_machine__owned_transition_data = val__ }) ->
  ((forall self__split_fields2:us_split_fields4.
   owned_transition__function_guard(owned_transition({ us_split_fields5 =
   self__split_fields2 }), { us_split_fields5 = self__split_fields2 })) ->
  (bool_eq5(owned_transition({ us_split_fields5 = self__split_fields1 }), 0,
  100, val__, 0, 100) = true)))))
