(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type opt_index_type

logic opt_index_typeqtint : opt_index_type -> int

axiom opt_index_typeqtaxiom :
  (forall i:opt_index_type. (0 <= opt_index_typeqtint(i)))

axiom opt_index_typeqtaxiom1 :
  (forall i:opt_index_type. (opt_index_typeqtint(i) <= 32))

predicate in_range1(x: int) = ((0 <= x) and (x <= 32))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : opt_index_type, opt_index_type -> bool

logic dummy1 : opt_index_type

type opt_index_type__ref = { opt_index_type__content : opt_index_type
}

function opt_index_type__ref_opt_index_type__content__projection(a: opt_index_type__ref) : opt_index_type =
  (a).opt_index_type__content

function to_rep(x: opt_index_type) : int = opt_index_typeqtint(x)

logic of_rep : int -> opt_index_type

axiom inversion_axiom :
  (forall x:opt_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:opt_index_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type elem_type

logic elem_typeqtint : elem_type -> int

axiom elem_typeqtaxiom :
  (forall i:elem_type. ((- 2147483648) <= elem_typeqtint(i)))

axiom elem_typeqtaxiom1 :
  (forall i:elem_type. (elem_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : elem_type, elem_type -> bool

logic dummy2 : elem_type

type elem_type__ref = { elem_type__content : elem_type
}

function elem_type__ref_elem_type__content__projection(a: elem_type__ref) : elem_type =
  (a).elem_type__content

function to_rep1(x: elem_type) : int = elem_typeqtint(x)

logic of_rep1 : int -> elem_type

axiom inversion_axiom1 :
  (forall x:elem_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:elem_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,elem_type) farray
}

logic slide : (int,elem_type) farray, int, int -> (int,elem_type) farray

axiom slide_eq :
  (forall a:(int,elem_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,elem_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,elem_type) farray, a__first: int, a__last: int,
  b: (int,elem_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,elem_type) farray. forall b:(int,elem_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)]))))))))

logic dummy3 : (int,elem_type) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq3 : (int,elem_type) farray, (int,elem_type) farray -> bool

type us_split_fields = { rec__repro_main__int_table__t__elems :
(int,elem_type) farray; rec__repro_main__int_table__t__last : opt_index_type
}

function us_split_fields_rec__repro_main__int_table__t__elems__projection(a: us_split_fields) : (int,elem_type) farray =
  (a).rec__repro_main__int_table__t__elems

function us_split_fields_rec__repro_main__int_table__t__last__projection(a: us_split_fields) : opt_index_type =
  (a).rec__repro_main__int_table__t__last

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq3(((a).us_split_fields1).rec__repro_main__int_table__t__elems,
  1, 32, ((b).us_split_fields1).rec__repro_main__int_table__t__elems, 1,
  32) = true) and
  (to_rep(((a).us_split_fields1).rec__repro_main__int_table__t__last) = to_rep(((b).us_split_fields1).rec__repro_main__int_table__t__last))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic repro_main__int_table__t__elems__first__bit : int

logic repro_main__int_table__t__elems__last__bit : int

logic repro_main__int_table__t__elems__position : int

axiom repro_main__int_table__t__elems__first__bit_axiom :
  (0 <= repro_main__int_table__t__elems__first__bit)

axiom repro_main__int_table__t__elems__last__bit_axiom :
  (repro_main__int_table__t__elems__first__bit <  repro_main__int_table__t__elems__last__bit)

axiom repro_main__int_table__t__elems__position_axiom :
  (0 <= repro_main__int_table__t__elems__position)

logic repro_main__int_table__t__last__first__bit : int

logic repro_main__int_table__t__last__last__bit : int

logic repro_main__int_table__t__last__position : int

axiom repro_main__int_table__t__last__first__bit_axiom :
  (0 <= repro_main__int_table__t__last__first__bit)

axiom repro_main__int_table__t__last__last__bit_axiom :
  (repro_main__int_table__t__last__first__bit <  repro_main__int_table__t__last__last__bit)

axiom repro_main__int_table__t__last__position_axiom :
  (0 <= repro_main__int_table__t__last__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

logic table : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : (int,elem_type) farray; rt : t
}

function to_array(a: us_t) : (int,elem_type) farray = (a).elts

function of_array(a: (int,elem_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : us_t

type model_type__ref = { model_type__content : us_t
}

function model_type__ref_model_type__content__projection(a: model_type__ref) : us_t =
  (a).model_type__content

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 32))

predicate in_range4(x: int) = ((1 <= x) and (x <= 32))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : index_type, index_type -> bool

logic dummy7 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t1 = { elts1 : (int,elem_type) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,elem_type) farray = (a).elts1

function of_array1(a: (int,elem_type) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size3 : int

logic object__size3 : int

logic component__size2 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom3 : (0 <= alignment3)

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq3((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq8 : us_t1, us_t1 -> bool

logic dummy8 : us_t1

type telem_arrayB__ref = { telem_arrayB__content : us_t1
}

function telem_arrayB__ref_telem_arrayB__content__projection(a: telem_arrayB__ref) : us_t1 =
  (a).telem_arrayB__content

type t38b__ref = { t38b__content : us_t1
}

function t38b__ref_t38b__content__projection(a: t38b__ref) : us_t1 =
  (a).t38b__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

predicate dynamic_invariant2(temp___expr_249: us_t, temp___is_init_245: bool,
  temp___skip_constant_246: bool, temp___do_toplevel_247: bool,
  temp___do_typ_inv_248: bool) = ((not (temp___skip_constant_246 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_249),
  last1(temp___expr_249)))

predicate dynamic_invariant3(temp___expr_213: int, temp___is_init_209: bool,
  temp___skip_constant_210: bool, temp___do_toplevel_211: bool,
  temp___do_typ_inv_212: bool) = (((temp___is_init_209 = true) or
  (0 <= 32)) -> in_range1(temp___expr_213))

predicate dynamic_invariant4(temp___expr_220: int, temp___is_init_216: bool,
  temp___skip_constant_217: bool, temp___do_toplevel_218: bool,
  temp___do_typ_inv_219: bool) = (((temp___is_init_216 = true) or
  (1 <= 32)) -> in_range4(temp___expr_220))

predicate dynamic_invariant5(temp___expr_199: int, temp___is_init_195: bool,
  temp___skip_constant_196: bool, temp___do_toplevel_197: bool,
  temp___do_typ_inv_198: bool) = (((temp___is_init_195 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_199))

 (* File "bounded_table.ads", line 21, characters 0-0 *)
goal defqtvc :
  (forall temp___313:int.
  ((to_rep(((table).us_split_fields1).rec__repro_main__int_table__t__last) = temp___313) ->
  (((1 <= temp___313) -> (((1 <= 1) and (1 <= 32)) and ((1 <= temp___313) and
  (temp___313 <= 32)))) -> (let temp___315 =
  of_array1(((table).us_split_fields1).rec__repro_main__int_table__t__elems,
  1, temp___313) : us_t1 in dynamic_property(0, 2147483647,
  first3(temp___315), last3(temp___315))))))
