(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type times

logic timesqtint : times -> int

axiom timesqtaxiom : (forall i:times. (0 <= timesqtint(i)))

axiom timesqtaxiom1 :
  (forall i:times. (timesqtint(i) <= 9223372036854775807))

predicate in_range1(x: int) = ((0 <= x) and (x <= 9223372036854775807))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : times, times -> bool

logic dummy : times

type times__ref = { times__content : times
}

function times__ref_times__content__projection(a: times__ref) : times =
  (a).times__content

function to_rep(x: times) : int = timesqtint(x)

logic of_rep : int -> times

axiom inversion_axiom : (forall x:times [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:times [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__up_timer__time_register__time : times
}

function us_split_fields_rec__up_timer__time_register__time__projection(a: us_split_fields) : times =
  (a).rec__up_timer__time_register__time

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__up_timer__time_register__time) = to_rep(((b).us_split_fields1).rec__up_timer__time_register__time)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic up_timer__time_register__time__first__bit : int

logic up_timer__time_register__time__last__bit : int

logic up_timer__time_register__time__position : int

axiom up_timer__time_register__time__first__bit_axiom :
  (0 <= up_timer__time_register__time__first__bit)

axiom up_timer__time_register__time__last__bit_axiom :
  (up_timer__time_register__time__first__bit <  up_timer__time_register__time__last__bit)

axiom up_timer__time_register__time__position_axiom :
  (0 <= up_timer__time_register__time__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type time_register__ref = { time_register__content : us_rep
}

function time_register__ref_time_register__content__projection(a: time_register__ref) : us_rep =
  (a).time_register__content

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_167: us_rep,
  temp___skip_top_level_168: bool) =
  (to_rep(((temp___expr_167).us_split_fields1).rec__up_timer__time_register__time) = 0)

type ttimesB

logic ttimesBqtint : ttimesB -> int

axiom ttimesBqtaxiom :
  (forall i:ttimesB. ((- 9223372036854775808) <= ttimesBqtint(i)))

axiom ttimesBqtaxiom1 :
  (forall i:ttimesB. (ttimesBqtint(i) <= 9223372036854775807))

predicate in_range2(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : ttimesB, ttimesB -> bool

logic dummy2 : ttimesB

type ttimesB__ref = { ttimesB__content : ttimesB
}

function ttimesB__ref_ttimesB__content__projection(a: ttimesB__ref) : ttimesB =
  (a).ttimesB__content

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 9223372036854775807)) -> in_range1(temp___expr_159))

 (* File "up_timer.ads", line 8, characters 0-0 *)
goal defqtvc :
  (forall up_time__split_fields:times.
  ((to_rep(up_time__split_fields) <  9223372036854775807) ->
  (forall o:int. ((to_rep(up_time__split_fields) = o) -> in_range2((o + 1))))))
