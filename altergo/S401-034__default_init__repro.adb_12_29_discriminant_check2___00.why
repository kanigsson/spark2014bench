(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (1 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 31))

predicate in_range1(x: int) = ((1 <= x) and (x <= 31))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : t, t -> bool

logic dummy : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

function to_rep(x: t) : int = tqtint(x)

logic of_rep : int -> t

axiom inversion_axiom : (forall x:t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type ttB

logic ttBqtint : ttB -> int

axiom ttBqtaxiom : (forall i:ttB. ((- 128) <= ttBqtint(i)))

axiom ttBqtaxiom1 : (forall i:ttB. (ttBqtint(i) <= 127))

predicate in_range2(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ttB, ttB -> bool

logic dummy1 : ttB

type ttB__ref = { ttB__content : ttB
}

function ttB__ref_ttB__content__projection(a: ttB__ref) : ttB =
  (a).ttB__content

function to_rep1(x: ttB) : int = ttBqtint(x)

logic of_rep1 : int -> ttB

axiom inversion_axiom1 :
  (forall x:ttB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:ttB [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type sp

logic spqtint : sp -> int

axiom spqtaxiom : (forall i:sp. (1 <= spqtint(i)))

axiom spqtaxiom1 : (forall i:sp. (spqtint(i) <= 14))

predicate in_range3(x: int) = ((1 <= x) and (x <= 14))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : sp, sp -> bool

logic dummy2 : sp

type sp__ref = { sp__content : sp
}

function sp__ref_sp__content__projection(a: sp__ref) : sp = (a).sp__content

function to_rep2(x: sp) : int = spqtint(x)

logic of_rep2 : int -> sp

axiom inversion_axiom2 :
  (forall x:sp [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:sp [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type tspB

logic tspBqtint : tspB -> int

axiom tspBqtaxiom : (forall i:tspB. ((- 128) <= tspBqtint(i)))

axiom tspBqtaxiom1 : (forall i:tspB. (tspBqtint(i) <= 127))

predicate in_range4(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tspB, tspB -> bool

logic dummy3 : tspB

type tspB__ref = { tspB__content : tspB
}

function tspB__ref_tspB__content__projection(a: tspB__ref) : tspB =
  (a).tspB__content

function to_rep3(x: tspB) : int = tspBqtint(x)

logic of_rep3 : int -> tspB

axiom inversion_axiom3 :
  (forall x:tspB [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:tspB [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep4(x: integer) : int = integerqtint(x)

logic of_rep4 : int -> integer

axiom inversion_axiom4 :
  (forall x:integer [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:integer [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type kind

predicate in_range6(x: int) = ((0 <= x) and (x <= 2))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : kind, kind -> bool

logic dummy5 : kind

type kind__ref = { kind__content : kind
}

function kind__ref_kind__content__projection(a: kind__ref) : kind =
  (a).kind__content

logic to_rep5 : kind -> int

logic of_rep5 : int -> kind

axiom inversion_axiom5 :
  (forall x:kind [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:kind [to_rep5(x)]. in_range6(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range6(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_discrs = { rec__repro__item__k : kind
}

function us_split_discrs_rec__repro__item__k__projection(a: us_split_discrs) : kind =
  (a).rec__repro__item__k

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__repro__item__xx : integer; rec__repro__item__yy
: integer; rec__repro__item__zz : integer
}

function us_split_fields_rec__repro__item__xx__projection(a: us_split_fields) : integer =
  (a).rec__repro__item__xx

function us_split_fields_rec__repro__item__yy__projection(a: us_split_fields) : integer =
  (a).rec__repro__item__yy

function us_split_fields_rec__repro__item__zz__projection(a: us_split_fields) : integer =
  (a).rec__repro__item__zz

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate repro__item__xx__pred(a: us_rep) =
  (to_rep5(((a).us_split_discrs1).rec__repro__item__k) = 0)

predicate repro__item__yy__pred(a: us_rep) =
  (to_rep5(((a).us_split_discrs1).rec__repro__item__k) = 1)

predicate repro__item__zz__pred(a: us_rep) =
  (to_rep5(((a).us_split_discrs1).rec__repro__item__k) = 2)

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if ((to_rep5(((a).us_split_discrs1).rec__repro__item__k) = to_rep5(((b).us_split_discrs1).rec__repro__item__k)) and
  (((repro__item__xx__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__repro__item__xx) = to_rep4(((b).us_split_fields1).rec__repro__item__xx))) and
  (repro__item__yy__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__repro__item__yy) = to_rep4(((b).us_split_fields1).rec__repro__item__yy)))) and
  (repro__item__zz__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__repro__item__zz) = to_rep4(((b).us_split_fields1).rec__repro__item__zz))))) then true else false)

predicate in_range7(rec__repro__item__k1: int, a: us_split_discrs) =
  (rec__repro__item__k1 = to_rep5((a).rec__repro__item__k))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic repro__item__k__first__bit : int

logic repro__item__k__last__bit : int

logic repro__item__k__position : int

axiom repro__item__k__first__bit_axiom : (0 <= repro__item__k__first__bit)

axiom repro__item__k__last__bit_axiom :
  (repro__item__k__first__bit <  repro__item__k__last__bit)

axiom repro__item__k__position_axiom : (0 <= repro__item__k__position)

logic repro__item__xx__first__bit : int

logic repro__item__xx__last__bit : int

logic repro__item__xx__position : int

axiom repro__item__xx__first__bit_axiom : (0 <= repro__item__xx__first__bit)

axiom repro__item__xx__last__bit_axiom :
  (repro__item__xx__first__bit <  repro__item__xx__last__bit)

axiom repro__item__xx__position_axiom : (0 <= repro__item__xx__position)

logic repro__item__yy__first__bit : int

logic repro__item__yy__last__bit : int

logic repro__item__yy__position : int

axiom repro__item__yy__first__bit_axiom : (0 <= repro__item__yy__first__bit)

axiom repro__item__yy__last__bit_axiom :
  (repro__item__yy__first__bit <  repro__item__yy__last__bit)

axiom repro__item__yy__position_axiom : (0 <= repro__item__yy__position)

logic repro__item__zz__first__bit : int

logic repro__item__zz__last__bit : int

logic repro__item__zz__position : int

axiom repro__item__zz__first__bit_axiom : (0 <= repro__item__zz__first__bit)

axiom repro__item__zz__last__bit_axiom :
  (repro__item__zz__first__bit <  repro__item__zz__last__bit)

axiom repro__item__zz__position_axiom : (0 <= repro__item__zz__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type item__ref = { item__content : us_rep
}

function item__ref_item__content__projection(a: item__ref) : us_rep =
  (a).item__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq7((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq7((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t1

logic first : t1 -> tspB

logic last : t1 -> tspB

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  (to_rep3(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  (to_rep3(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range4(low) and (in_range4(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t1
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep3(first((a).rt))

function last1(a: us_t) : int = to_rep3(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep3(first((x).rt)), to_rep3(last((x).rt)), (y).elts,
  to_rep3(first((y).rt)), to_rep3(last((y).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy7 : us_t

type speed_map__ref = { speed_map__content : us_t
}

function speed_map__ref_speed_map__content__projection(a: speed_map__ref) : us_t =
  (a).speed_map__content

type t4s__ref = { t4s__content : us_t
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : us_t =
  (a).t4s__content

type us_split_discrs2 = { rec__repro__speed__len : sp
}

function us_split_discrs_rec__repro__speed__len__projection(a: us_split_discrs2) : sp =
  (a).rec__repro__speed__len

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__repro__speed__m : us_t
}

function us_split_fields_rec__repro__speed__m__projection(a: us_split_fields2) : us_t =
  (a).rec__repro__speed__m

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq10(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep2(((a).us_split_discrs3).rec__repro__speed__len) = to_rep2(((b).us_split_discrs3).rec__repro__speed__len)) and
  (bool_eq9(((a).us_split_fields3).rec__repro__speed__m,
  ((b).us_split_fields3).rec__repro__speed__m) = true)) then true else false)

predicate in_range8(rec__repro__speed__len1: int, a: us_split_discrs2) =
  (rec__repro__speed__len1 = to_rep2((a).rec__repro__speed__len))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic repro__speed__len__first__bit : int

logic repro__speed__len__last__bit : int

logic repro__speed__len__position : int

axiom repro__speed__len__first__bit_axiom :
  (0 <= repro__speed__len__first__bit)

axiom repro__speed__len__last__bit_axiom :
  (repro__speed__len__first__bit <  repro__speed__len__last__bit)

axiom repro__speed__len__position_axiom : (0 <= repro__speed__len__position)

logic repro__speed__m__first__bit : int

logic repro__speed__m__last__bit : int

logic repro__speed__m__position : int

axiom repro__speed__m__first__bit_axiom : (0 <= repro__speed__m__first__bit)

axiom repro__speed__m__last__bit_axiom :
  (repro__speed__m__first__bit <  repro__speed__m__last__bit)

axiom repro__speed__m__position_axiom : (0 <= repro__speed__m__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type speed__ref = { speed__content : us_rep1
}

function speed__ref_speed__content__projection(a: speed__ref) : us_rep1 =
  (a).speed__content

type us_split_discrs4 = { rec__repro__ssp__b : bool
}

function us_split_discrs_rec__repro__ssp__b__projection(a: us_split_discrs4) : bool =
  (a).rec__repro__ssp__b

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields4 = { rec__repro__ssp__s : us_rep1
}

function us_split_fields_rec__repro__ssp__s__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__repro__ssp__s

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs5 : us_split_discrs4; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

predicate repro__ssp__s__pred(a: us_rep2) =
  (to_int(((a).us_split_discrs5).rec__repro__ssp__b) = 1)

function bool_eq11(a: us_rep2, b: us_rep2) : bool =
  (if ((to_int(((a).us_split_discrs5).rec__repro__ssp__b) = to_int(((b).us_split_discrs5).rec__repro__ssp__b)) and
  (repro__ssp__s__pred(a) ->
  (bool_eq10(((a).us_split_fields5).rec__repro__ssp__s,
  ((b).us_split_fields5).rec__repro__ssp__s) = true))) then true else false)

predicate in_range9(rec__repro__ssp__b1: bool, a: us_split_discrs4) =
  (rec__repro__ssp__b1 = (a).rec__repro__ssp__b)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic repro__ssp__b__first__bit : int

logic repro__ssp__b__last__bit : int

logic repro__ssp__b__position : int

axiom repro__ssp__b__first__bit_axiom : (0 <= repro__ssp__b__first__bit)

axiom repro__ssp__b__last__bit_axiom :
  (repro__ssp__b__first__bit <  repro__ssp__b__last__bit)

axiom repro__ssp__b__position_axiom : (0 <= repro__ssp__b__position)

logic repro__ssp__s__first__bit : int

logic repro__ssp__s__last__bit : int

logic repro__ssp__s__position : int

axiom repro__ssp__s__first__bit_axiom : (0 <= repro__ssp__s__first__bit)

axiom repro__ssp__s__last__bit_axiom :
  (repro__ssp__s__first__bit <  repro__ssp__s__last__bit)

axiom repro__ssp__s__position_axiom : (0 <= repro__ssp__s__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type ssp__ref = { ssp__content : us_rep2
}

function ssp__ref_ssp__content__projection(a: ssp__ref) : us_rep2 =
  (a).ssp__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq12(a: (int,us_rep2) farray, a__first: int, a__last: int,
  b: (int,us_rep2) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq11((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq11((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))))

type t2

logic first2 : t2 -> ttB

logic last2 : t2 -> ttB

logic mk1 : int, int -> t2

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t1 = { elts1 : (int,us_rep2) farray; rt1 : t2
}

function to_array1(a: us_t1) : (int,us_rep2) farray = (a).elts1

function of_array1(a: (int,us_rep2) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size4 : int

logic object__size4 : int

logic component__size1 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom4 : (0 <= alignment4)

function bool_eq13(x: us_t1, y: us_t1) : bool = bool_eq12((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq10 : us_t1, us_t1 -> bool

logic dummy10 : us_t1

type a__ref = { a__content : us_t1
}

function a__ref_a__content__projection(a: a__ref) : us_t1 = (a).a__content

type t8s__ref = { t8s__content : us_t1
}

function t8s__ref_t8s__content__projection(a: t8s__ref) : us_t1 =
  (a).t8s__content

type us_split_discrs6 = { rec__repro__r__y : t
}

function us_split_discrs_rec__repro__r__y__projection(a: us_split_discrs6) : t =
  (a).rec__repro__r__y

type us_split_discrs__ref3 = { us_split_discrs__content3 : us_split_discrs6
}

function us_split_discrs__ref___split_discrs__content__4__projection(a: us_split_discrs__ref3) : us_split_discrs6 =
  (a).us_split_discrs__content3

type us_split_fields6 = { rec__repro__r__x : us_t1
}

function us_split_fields_rec__repro__r__x__projection(a: us_split_fields6) : us_t1 =
  (a).rec__repro__r__x

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs7 : us_split_discrs6; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__4__projection(a: us_rep3) : us_split_discrs6 =
  (a).us_split_discrs7

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq14(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep(((a).us_split_discrs7).rec__repro__r__y) = to_rep(((b).us_split_discrs7).rec__repro__r__y)) and
  (bool_eq13(((a).us_split_fields7).rec__repro__r__x,
  ((b).us_split_fields7).rec__repro__r__x) = true)) then true else false)

predicate in_range10(rec__repro__r__y1: int, a: us_split_discrs6) =
  (rec__repro__r__y1 = to_rep((a).rec__repro__r__y))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic repro__r__y__first__bit : int

logic repro__r__y__last__bit : int

logic repro__r__y__position : int

axiom repro__r__y__first__bit_axiom : (0 <= repro__r__y__first__bit)

axiom repro__r__y__last__bit_axiom :
  (repro__r__y__first__bit <  repro__r__y__last__bit)

axiom repro__r__y__position_axiom : (0 <= repro__r__y__position)

logic repro__r__x__first__bit : int

logic repro__r__x__last__bit : int

logic repro__r__x__position : int

axiom repro__r__x__first__bit_axiom : (0 <= repro__r__x__first__bit)

axiom repro__r__x__last__bit_axiom :
  (repro__r__x__first__bit <  repro__r__x__last__bit)

axiom repro__r__x__position_axiom : (0 <= repro__r__x__position)

logic user_eq11 : us_rep3, us_rep3 -> bool

logic dummy11 : us_rep3

type r__ref = { r__content : us_rep3
}

function r__ref_r__content__projection(a: r__ref) : us_rep3 = (a).r__content

logic arg : us_rep3

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (1 <= 14)) -> in_range3(temp___expr_163))

predicate dynamic_invariant1(temp___expr_243: us_rep3,
  temp___is_init_239: bool, temp___skip_constant_240: bool,
  temp___do_toplevel_241: bool, temp___do_typ_inv_242: bool) =
  (let temp___244 = ((temp___expr_243).us_split_discrs7).rec__repro__r__y
  : t in ((dynamic_property1(1, to_rep(temp___244),
  first3(((temp___expr_243).us_split_fields7).rec__repro__r__x),
  last3(((temp___expr_243).us_split_fields7).rec__repro__r__x)) and
  ((first3(((temp___expr_243).us_split_fields7).rec__repro__r__x) = 1) and
  (last3(((temp___expr_243).us_split_fields7).rec__repro__r__x) = to_rep(temp___244)))) and
  (forall temp___245:int.
  (((first3(((temp___expr_243).us_split_fields7).rec__repro__r__x) <= temp___245) and
  (temp___245 <= last3(((temp___expr_243).us_split_fields7).rec__repro__r__x))) ->
  (repro__ssp__s__pred((to_array1(((temp___expr_243).us_split_fields7).rec__repro__r__x)[temp___245])) ->
  (let temp___247 =
  (((((to_array1(((temp___expr_243).us_split_fields7).rec__repro__r__x)[temp___245])).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len
  : sp in (dynamic_property(1, to_rep2(temp___247),
  first1((((((to_array1(((temp___expr_243).us_split_fields7).rec__repro__r__x)[temp___245])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m),
  last1((((((to_array1(((temp___expr_243).us_split_fields7).rec__repro__r__x)[temp___245])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)) and
  ((first1((((((to_array1(((temp___expr_243).us_split_fields7).rec__repro__r__x)[temp___245])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = 1) and
  (last1((((((to_array1(((temp___expr_243).us_split_fields7).rec__repro__r__x)[temp___245])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = to_rep2(temp___247))))))))))

predicate default_initial_assumption(temp___expr_250: us_rep3,
  temp___skip_top_level_251: bool) =
  ((to_rep(((temp___expr_250).us_split_discrs7).rec__repro__r__y) = 1) and
  (((first3(((temp___expr_250).us_split_fields7).rec__repro__r__x) = 1) and
  (last3(((temp___expr_250).us_split_fields7).rec__repro__r__x) = to_rep(((temp___expr_250).us_split_discrs7).rec__repro__r__y))) and
  (forall temp___254:int.
  (((first3(((temp___expr_250).us_split_fields7).rec__repro__r__x) <= temp___254) and
  (temp___254 <= last3(((temp___expr_250).us_split_fields7).rec__repro__r__x))) ->
  (((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_discrs5).rec__repro__ssp__b = of_int(0)) and
  (repro__ssp__s__pred((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])) ->
  ((to_rep2((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len) = 1) and
  (((first1((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = 1) and
  (last1((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = to_rep2((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len))) and
  (forall temp___260:int.
  (((first1((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) <= temp___260) and
  (temp___260 <= last1((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m))) ->
  ((to_rep5((((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])).us_split_discrs1).rec__repro__item__k) = 0) and
  (((repro__item__xx__pred((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])) ->
  (to_rep4((((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])).us_split_fields1).rec__repro__item__xx) = 1)) and
  (repro__item__yy__pred((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])) ->
  (to_rep4((((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])).us_split_fields1).rec__repro__item__yy) = 1))) and
  (repro__item__zz__pred((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])) ->
  (to_rep4((((to_array((((((to_array1(((temp___expr_250).us_split_fields7).rec__repro__r__x)[temp___254])).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___260])).us_split_fields1).rec__repro__item__zz) = 1))))))))))))))

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_18))

predicate dynamic_invariant3(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (1 <= 31)) -> in_range1(temp___expr_170))

predicate dynamic_invariant4(temp___expr_177: int, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  (0 <= 2)) -> in_range6(temp___expr_177))

predicate default_initial_assumption1(temp___expr_186: us_rep,
  temp___skip_top_level_187: bool) =
  ((to_rep5(((temp___expr_186).us_split_discrs1).rec__repro__item__k) = 0) and
  (((repro__item__xx__pred(temp___expr_186) ->
  (to_rep4(((temp___expr_186).us_split_fields1).rec__repro__item__xx) = 1)) and
  (repro__item__yy__pred(temp___expr_186) ->
  (to_rep4(((temp___expr_186).us_split_fields1).rec__repro__item__yy) = 1))) and
  (repro__item__zz__pred(temp___expr_186) ->
  (to_rep4(((temp___expr_186).us_split_fields1).rec__repro__item__zz) = 1))))

predicate dynamic_invariant5(temp___expr_200: us_rep1,
  temp___is_init_196: bool, temp___skip_constant_197: bool,
  temp___do_toplevel_198: bool, temp___do_typ_inv_199: bool) =
  (let temp___201 =
  ((temp___expr_200).us_split_discrs3).rec__repro__speed__len : sp in
  (dynamic_property(1, to_rep2(temp___201),
  first1(((temp___expr_200).us_split_fields3).rec__repro__speed__m),
  last1(((temp___expr_200).us_split_fields3).rec__repro__speed__m)) and
  ((first1(((temp___expr_200).us_split_fields3).rec__repro__speed__m) = 1) and
  (last1(((temp___expr_200).us_split_fields3).rec__repro__speed__m) = to_rep2(temp___201)))))

predicate default_initial_assumption2(temp___expr_204: us_rep1,
  temp___skip_top_level_205: bool) =
  ((to_rep2(((temp___expr_204).us_split_discrs3).rec__repro__speed__len) = 1) and
  (((first1(((temp___expr_204).us_split_fields3).rec__repro__speed__m) = 1) and
  (last1(((temp___expr_204).us_split_fields3).rec__repro__speed__m) = to_rep2(((temp___expr_204).us_split_discrs3).rec__repro__speed__len))) and
  (forall temp___208:int.
  (((first1(((temp___expr_204).us_split_fields3).rec__repro__speed__m) <= temp___208) and
  (temp___208 <= last1(((temp___expr_204).us_split_fields3).rec__repro__speed__m))) ->
  ((to_rep5((((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])).us_split_discrs1).rec__repro__item__k) = 0) and
  (((repro__item__xx__pred((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])) ->
  (to_rep4((((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])).us_split_fields1).rec__repro__item__xx) = 1)) and
  (repro__item__yy__pred((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])) ->
  (to_rep4((((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])).us_split_fields1).rec__repro__item__yy) = 1))) and
  (repro__item__zz__pred((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])) ->
  (to_rep4((((to_array(((temp___expr_204).us_split_fields3).rec__repro__speed__m)[temp___208])).us_split_fields1).rec__repro__item__zz) = 1))))))))

predicate dynamic_invariant6(temp___expr_215: us_rep2,
  temp___is_init_211: bool, temp___skip_constant_212: bool,
  temp___do_toplevel_213: bool, temp___do_typ_inv_214: bool) =
  (repro__ssp__s__pred(temp___expr_215) -> (let temp___217 =
  ((((temp___expr_215).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len
  : sp in (dynamic_property(1, to_rep2(temp___217),
  first1(((((temp___expr_215).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m),
  last1(((((temp___expr_215).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)) and
  ((first1(((((temp___expr_215).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = 1) and
  (last1(((((temp___expr_215).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = to_rep2(temp___217))))))

predicate default_initial_assumption3(temp___expr_220: us_rep2,
  temp___skip_top_level_221: bool) =
  ((((temp___expr_220).us_split_discrs5).rec__repro__ssp__b = of_int(0)) and
  (repro__ssp__s__pred(temp___expr_220) ->
  ((to_rep2(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len) = 1) and
  (((first1(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = 1) and
  (last1(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) = to_rep2(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len))) and
  (forall temp___226:int.
  (((first1(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m) <= temp___226) and
  (temp___226 <= last1(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m))) ->
  ((to_rep5((((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])).us_split_discrs1).rec__repro__item__k) = 0) and
  (((repro__item__xx__pred((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])) ->
  (to_rep4((((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])).us_split_fields1).rec__repro__item__xx) = 1)) and
  (repro__item__yy__pred((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])) ->
  (to_rep4((((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])).us_split_fields1).rec__repro__item__yy) = 1))) and
  (repro__item__zz__pred((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])) ->
  (to_rep4((((to_array(((((temp___expr_220).us_split_fields5).rec__repro__ssp__s).us_split_fields3).rec__repro__speed__m)[temp___226])).us_split_fields1).rec__repro__item__zz) = 1))))))))))

 (* File "repro.ads", line 40, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(arg, true, false, true, true) ->
  (forall ids:int. ((ids = 1) -> ((andb((if (1 <= ids) then true else false),
  (if (ids <= last3(((arg).us_split_fields7).rec__repro__r__x)) then true else false)) = true) ->
  (forall ids1:int. (((1 <= ids1) and
  (ids1 <= last3(((arg).us_split_fields7).rec__repro__r__x))) ->
  (let temp___318 = ((arg).us_split_fields7).rec__repro__r__x : us_t1 in
  (((first3(temp___318) <= ids1) and (ids1 <= last3(temp___318))) ->
  (forall repro__process__L_2__R5b__assume:int.
  ((to_rep2((((((to_array1(temp___318)[ids1])).us_split_fields5).rec__repro__ssp__s).us_split_discrs3).rec__repro__speed__len) = repro__process__L_2__R5b__assume) ->
  ((repro__process__L_2__R5b__assume = r5b) -> (dynamic_invariant(r5b, true,
  false, true, true) ->
  (forall diff:int. ((diff = 1) ->
  ((andb((if (1 <= diff) then true else false),
  (if (diff <= r5b) then true else false)) = true) -> (let temp___321 =
  ((arg).us_split_fields7).rec__repro__r__x : us_t1 in
  (((first3(temp___321) <= ids1) and (ids1 <= last3(temp___321))) ->
  repro__ssp__s__pred((to_array1(temp___321)[ids1])))))))))))))))))))
