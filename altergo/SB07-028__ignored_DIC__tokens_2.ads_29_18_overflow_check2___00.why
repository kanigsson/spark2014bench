(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq1 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type token_set__ref = { token_set__content : us_rep
}

function token_set__ref_token_set__content__projection(a: token_set__ref) : us_rep =
  (a).token_set__content

logic attr__ATTRIBUTE_ADDRESS : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type cont__ref = { cont__content : us_rep
}

function cont__ref_cont__content__projection(a: cont__ref) : us_rep =
  (a).cont__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

axiom length__post_axiom : (forall x:us_rep [length(x)]. in_range(length(x)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic t_length : us_rep -> int

logic t_length__function_guard : int, us_rep -> prop

axiom temp___result_172qtdef :
  (forall temp___171:us_rep. t_length__function_guard(t_length(temp___171),
  temp___171))

predicate default_initial_assumption(temp___expr_169: us_rep,
  temp___skip_top_level_170: bool, tokens_2__c: int) =
  ((not (temp___skip_top_level_170 = true)) ->
  ((t_length(temp___expr_169) + tokens_2__c) = 7))

axiom t_length__def_axiom :
  (forall x:us_rep. length__function_guard(length(x), x))

axiom t_length__def_axiom1 :
  (forall x:us_rep [t_length(x)]. (t_length(x) = length(x)))

 (* File "tokens_2.ads", line 19, characters 0-0 *)
goal defqtvc :
  (forall x:us_rep. forall c:int. (dynamic_invariant(c, true, false, true,
  true) -> (let o = length(x) : int in ((length__function_guard(o, x) and
  dynamic_invariant(o, true, false, true, true)) -> in_range((o + c))))))
