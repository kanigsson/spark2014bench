(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type tlastS

logic tlastSqtint : tlastS -> int

axiom tlastSqtaxiom : (forall i1:tlastS. (0 <= tlastSqtint(i1)))

axiom tlastSqtaxiom1 : (forall i1:tlastS. (tlastSqtint(i1) <= 200))

predicate in_range4(x: int) = ((0 <= x) and (x <= 200))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tlastS, tlastS -> bool

logic dummy4 : tlastS

type tlastS__ref = { tlastS__content : tlastS
}

function tlastS__ref_tlastS__content__projection(a: tlastS__ref) : tlastS =
  (a).tlastS__content

predicate dynamic_invariant(temp___expr_183: int, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((temp___is_init_179 = true) or
  (0 <= 200)) -> in_range4(temp___expr_183))

logic empty : int -> bool

logic empty__function_guard : bool, int -> prop

axiom empty__def_axiom :
  (forall stack__last:int [empty(stack__last)].
  ((empty(stack__last) = true) -> (stack__last <  1)))

axiom empty__def_axiom1 :
  (forall stack__last:int [empty(stack__last)]. ((stack__last <  1) ->
  (empty(stack__last) = true)))

type us_split_fields = { rec__types__value__e : integer
}

function us_split_fields_rec__types__value__e__projection(a: us_split_fields) : integer =
  (a).rec__types__value__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if (to_rep1(((a).us_split_fields1).rec__types__value__e) = to_rep1(((b).us_split_fields1).rec__types__value__e)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic types__value__e__first__bit : int

logic types__value__e__last__bit : int

logic types__value__e__position : int

axiom types__value__e__first__bit_axiom : (0 <= types__value__e__first__bit)

axiom types__value__e__last__bit_axiom :
  (types__value__e__first__bit <  types__value__e__last__bit)

axiom types__value__e__position_axiom : (0 <= types__value__e__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type value__ref = { value__content : us_rep
}

function value__ref_value__content__projection(a: value__ref) : us_rep =
  (a).value__content

logic top : int, us_private -> us_rep

logic top__function_guard : us_rep, int, us_private -> prop

axiom top__post_axiom :
  (forall stack__last:int. empty__function_guard(empty(stack__last),
  stack__last))

predicate dynamic_invariant1(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic to_string : us_rep -> us_t

logic to_string__function_guard : us_t, us_rep -> prop

axiom to_string__post_axiom :
  (forall v:us_rep [to_string(v)]. (let result = to_string(v) : us_t in
  (to_string__function_guard(result, v) -> dynamic_invariant1(result, true,
  false, true, true))))

type instruction

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : instruction, instruction -> bool

logic dummy6 : instruction

type instruction__ref = { instruction__content : instruction
}

function instruction__ref_instruction__content__projection(a: instruction__ref) : instruction =
  (a).instruction__content

predicate dynamic_invariant2(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 2)) -> in_range5(temp___expr_162))

logic temp___String_Literal_204 : unit -> (int,character) farray

axiom temp___String_Literal_204__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_204(us_void_param)].
  (to_rep((temp___String_Literal_204(us_void_param)[1])) = 32))

axiom temp___String_Literal_204__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_204(us_void_param)].
  (to_rep((temp___String_Literal_204(us_void_param)[2])) = 45))

axiom temp___String_Literal_204__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_204(us_void_param)].
  (to_rep((temp___String_Literal_204(us_void_param)[3])) = 62))

axiom temp___String_Literal_204__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_204(us_void_param)].
  (to_rep((temp___String_Literal_204(us_void_param)[4])) = 32))

logic temp___String_Literal_205 : unit -> (int,character) farray

logic temp___String_Literal_206 : unit -> (int,character) farray

axiom temp___String_Literal_206__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[1])) = 115))

axiom temp___String_Literal_206__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[2])) = 116))

axiom temp___String_Literal_206__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[3])) = 97))

axiom temp___String_Literal_206__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[4])) = 99))

axiom temp___String_Literal_206__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[5])) = 107))

axiom temp___String_Literal_206__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[6])) = 32))

axiom temp___String_Literal_206__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[7])) = 105))

axiom temp___String_Literal_206__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[8])) = 115))

axiom temp___String_Literal_206__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[9])) = 32))

axiom temp___String_Literal_206__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[10])) = 101))

axiom temp___String_Literal_206__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[11])) = 109))

axiom temp___String_Literal_206__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[12])) = 112))

axiom temp___String_Literal_206__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[13])) = 116))

axiom temp___String_Literal_206__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_206(us_void_param)].
  (to_rep((temp___String_Literal_206(us_void_param)[14])) = 121))

logic temp___String_Literal_207 : unit -> (int,character) farray

logic temp___String_Literal_208 : unit -> (int,character) farray

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant5(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

 (* File "instructions.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall last2:int. (dynamic_invariant2(i, true, false, true, true) ->
  (dynamic_invariant(last2, true, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (i = 0) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (i = 1) then true else false)) ->
  (spark__branch1 = true)))))))))
