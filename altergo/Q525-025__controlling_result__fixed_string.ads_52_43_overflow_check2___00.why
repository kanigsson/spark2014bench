(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant2(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic change__first : integer

logic change__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic new_val : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r5b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r8b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type t4b__ref = { t4b__content : us_t
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_t =
  (a).t4b__content

type t7b__ref = { t7b__content : us_t
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_t =
  (a).t7b__content

type t10b__ref = { t10b__content : us_t
}

function t10b__ref_t10b__content__projection(a: t10b__ref) : us_t =
  (a).t10b__content

logic temp_____aggregate_def_286 : int, int, int -> us_t

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant4(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

axiom def_axiom :
  (forall temp___288:int. forall temp___289:int. forall temp___290:int.
  (dynamic_invariant4(temp___288, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___289, temp___290) ->
  (first1(temp_____aggregate_def_286(temp___288, temp___289,
  temp___290)) = temp___289))))

axiom def_axiom1 :
  (forall temp___288:int. forall temp___289:int. forall temp___290:int.
  (dynamic_invariant4(temp___288, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___289, temp___290) ->
  (last1(temp_____aggregate_def_286(temp___288, temp___289,
  temp___290)) = temp___290))))

axiom def_axiom2 :
  (forall temp___288:int. forall temp___289:int. forall temp___290:int.
  (dynamic_invariant4(temp___288, true, true, true, true) ->
  (forall temp___291:int.
  (to_rep((to_array(temp_____aggregate_def_286(temp___288, temp___289,
  temp___290))[temp___291])) = temp___288))))

 (* File "fixed_string.ads", line 45, characters 0-0 *)
goal defqtvc : (dynamic_property(1, 2147483647, to_rep1(change__first),
  to_rep1(change__last)) -> (dynamic_invariant2(new_val, true, false, true,
  true) -> (let o = length1(new_val) : int in (in_range1(o) ->
  (forall o1:int. ((to_rep1(change__last) = o1) ->
  (forall o2:int. ((to_rep1(change__first) = o2) -> (let o3 = length(o2, o1)
  : int in (in_range1(o3) -> (let o4 = min(o3, o) : int in (in_range2(o4) ->
  (forall len:int. ((len = o4) -> (dynamic_invariant(len, true, false, true,
  true) ->
  (forall o5:int. ((to_rep1(change__last) = o5) ->
  (forall o6:int. ((to_rep1(change__first) = o6) -> (let temp___292 =
  temp_____aggregate_def_286(0, o6, o5) : us_t in
  ((first1(temp___292) = to_rep1(change__first)) ->
  ((last1(temp___292) = to_rep1(change__last)) -> (let temp___294 =
  of_array(to_array(temp___292), first1(temp___292), last1(temp___292))
  : us_t in
  ((if (first1(temp___294) <= last1(temp___294)) then ((to_rep1(change__first) <= to_rep1(change__last)) and
  ((last1(temp___294) - first1(temp___294)) = (to_rep1(change__last) - to_rep1(change__first)))) else (to_rep1(change__last) <  to_rep1(change__first))) ->
  (forall o7:int. ((to_rep1(change__first) = o7) ->
  (forall change:(int,character) farray.
  ((change = slide(to_array(temp___294), first1(temp___294), o7)) ->
  (forall o8:int. ((to_rep1(change__first) = o8) -> (let o9 =
  (o8 + (len - 1)) : int in (in_range1(o9) -> ((o9 = r5b) ->
  (dynamic_invariant1(r5b, true, false, true, true) -> (let o10 =
  (first1(new_val) + (len - 1)) : int in (in_range1(o10) -> ((o10 = r8b) ->
  (dynamic_invariant1(r8b, true, false, true, true) -> (let temp___296 =
  first1(new_val) : int in (((temp___296 <= r8b) ->
  (((first1(new_val) <= temp___296) and (temp___296 <= last1(new_val))) and
  ((first1(new_val) <= r8b) and (r8b <= last1(new_val))))) ->
  (let temp___297 = of_array(to_array(new_val), temp___296, r8b) : us_t in
  ((if (first1(temp___297) <= last1(temp___297)) then ((to_rep1(change__first) <= r5b) and
  ((last1(temp___297) - first1(temp___297)) = (r5b - to_rep1(change__first)))) else (r5b <  to_rep1(change__first))) ->
  (forall o11:int. ((to_rep1(change__first) = o11) ->
  (forall o12:int. ((to_rep1(change__first) = o12) -> (let temp___298 =
  of_array(slide(to_array(temp___297), first1(temp___297), o12), o11, r5b)
  : us_t in
  (forall temp___299:int. ((to_rep1(change__first) = temp___299) ->
  (((temp___299 <= r5b) -> (((to_rep1(change__first) <= temp___299) and
  (temp___299 <= to_rep1(change__last))) and
  ((to_rep1(change__first) <= r5b) and (r5b <= to_rep1(change__last))))) ->
  (let temp___300 = of_array(change, temp___299, r5b) : us_t in
  ((if (first1(temp___298) <= last1(temp___298)) then ((first1(temp___300) <= last1(temp___300)) and
  ((last1(temp___298) - first1(temp___298)) = (last1(temp___300) - first1(temp___300)))) else (last1(temp___300) <  first1(temp___300))) ->
  (forall usf:(int,character) farray.
  ((forall temp___302:int. (if ((to_rep1(change__first) <= temp___302) and
   (temp___302 <= r5b)) then ((usf[temp___302]) = (to_array(temp___298)[temp___302])) else ((usf[temp___302]) = (change[temp___302])))) ->
  (forall change1:(int,character) farray. ((change1 = usf) ->
  (forall usf1:int.
  (forall o13:int. ((to_rep1(change__last) = o13) ->
  (forall o14:int. ((to_rep1(change__first) = o14) ->
  ((andb((if (o14 <= usf1) then true else false),
  (if (usf1 <= o13) then true else false)) = true) ->
  (((to_rep1(change__first) <= usf1) and (usf1 <= to_rep1(change__last))) ->
  (forall o15:int. ((to_rep((change1[usf1])) = o15) ->
  (forall o16:bool.
  ((exists o17:bool.
   ((if (first1(new_val) <  0) then (o17 = true) else (let o18 =
   (2147483647 - first1(new_val)) : int in (in_range1(o18) and
   (exists o19:int. ((to_rep1(change__first) = o19) and (let o20 =
   (usf1 - o19) : int in (in_range1(o20) and
   (o17 = (if (o20 <= o18) then true else false))))))))) and
   (if (o17 = true) then (exists o18:int. ((to_rep1(change__first) = o18) and
                         (let o19 = (usf1 - o18) : int in (in_range1(o19) and
                         (let o20 = (o19 + first1(new_val)) : int in
                         (in_range1(o20) and
                         (o16 = (if (o20 <= last1(new_val)) then true else false)))))))) else (o16 = false)))) ->
  ((o16 = true) ->
  (forall o17:int. ((to_rep1(change__first) = o17) ->
  in_range1((usf1 - o17))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
