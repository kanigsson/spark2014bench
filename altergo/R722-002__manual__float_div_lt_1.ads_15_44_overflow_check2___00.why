(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic dividend : int

logic attr__ATTRIBUTE_ADDRESS : int

logic divisor : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic quotient : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type tfixedB

predicate in_range2(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic dummy1 : tfixedB

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tfixedB, tfixedB -> bool

type tfixedB__ref = { tfixedB__content : tfixedB
}

function tfixedB__ref_tfixedB__content__projection(a: tfixedB__ref) : tfixedB =
  (a).tfixedB__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

predicate pos_div_relation(res: int, num: int, den: int) = (let exact =
  div(num, den) : int in
  (if (num = 0) then (res = 0) else (if (num = (exact * den)) then (res = exact) else ((exact <= res) and
  (res <= (exact + 1))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((x = 0) -> (fxp_div_int(x, y) = 0))))

axiom fxp_div_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> (((0 <  x) and
  (0 <  y)) -> pos_div_relation(fxp_div_int(x, y), x, y)))))

axiom fxp_div_int_def2 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> (((x <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x,
  y), (-x), (-y)))))))

axiom fxp_div_int_def3 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> ((not ((x <  0) and (y <  0))) -> (((x <  0) and (0 <  y)) ->
  pos_div_relation((-fxp_div_int(x, y)), (-x), y)))))))

axiom fxp_div_int_def4 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> ((not ((x <  0) and (y <  0))) -> ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) -> pos_div_relation((-fxp_div_int(x,
  y)), x, (-y)))))))))

logic to_int1 : int -> int

axiom to_int_def : (forall x:int [to_int1(x)]. ((x = 0) -> (to_int1(x) = 0)))

axiom to_int_def1 :
  (forall x:int [to_int1(x)]. ((not (x = 0)) -> ((0 <  x) ->
  pos_div_relation(to_int1(x), (x * 1), 1073741824))))

axiom to_int_def2 :
  (forall x:int [to_int1(x)]. ((not (x = 0)) -> ((not (0 <  x)) ->
  pos_div_relation((-to_int1(x)), ((-x) * 1), 1073741824))))

logic of_int1 : int -> int

axiom of_int_def : (forall x:int [of_int1(x)]. ((x = 0) -> (of_int1(x) = 0)))

axiom of_int_def1 :
  (forall x:int [of_int1(x)]. ((not (x = 0)) -> ((0 <  x) ->
  pos_div_relation(of_int1(x), (x * 1073741824), 1))))

axiom of_int_def2 :
  (forall x:int [of_int1(x)]. ((not (x = 0)) -> ((not (0 <  x)) ->
  pos_div_relation((-of_int1(x)), ((-x) * 1073741824), 1))))

type fixed

predicate in_range3(x: int) = (((- 2305843009213693952) <= x) and
  (x <= 2305843009213693952))

logic dummy2 : fixed

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : fixed, fixed -> bool

type fixed__ref = { fixed__content : fixed
}

function fixed__ref_fixed__content__projection(a: fixed__ref) : fixed =
  (a).fixed__content

predicate dynamic_invariant1(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  ((- 2305843009213693952) <= 2305843009213693952)) ->
  in_range3(temp___expr_158))

logic fxp_mult : int, int -> int

axiom fxp_mult_def :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. (((x = 0) or (y = 0)) -> (fxp_mult(x,
  y) = 0))))

axiom fxp_mult_def1 :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. ((not ((x = 0) or (y = 0))) ->
  ((((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0))) ->
  pos_div_relation(fxp_mult(x, y), ((((x * y) * 1) * 1) * 1073741824),
  ((1073741824 * 1073741824) * 1))))))

axiom fxp_mult_def2 :
  (forall x:int.
  (forall y:int [fxp_mult(x, y)]. ((not ((x = 0) or (y = 0))) ->
  ((not (((0 <  x) and (0 <  y)) or ((x <  0) and (y <  0)))) ->
  pos_div_relation((-fxp_mult(x, y)), (-((((x * y) * 1) * 1) * 1073741824)),
  ((1073741824 * 1073741824) * 1))))))

logic fxp_div : int, int -> int

axiom fxp_div_def :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. ((x = 0) -> (fxp_div(x, y) = 0))))

axiom fxp_div_def1 :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. ((not (x = 0)) -> (((0 <  x) and
  (0 <  y)) -> pos_div_relation(fxp_div(x, y),
  (((x * 1) * 1073741824) * 1073741824), (((y * 1073741824) * 1) * 1))))))

axiom fxp_div_def2 :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> (((x <  0) and (y <  0)) -> pos_div_relation(fxp_div(x, y),
  ((((-x) * 1) * 1073741824) * 1073741824),
  ((((-y) * 1073741824) * 1) * 1)))))))

axiom fxp_div_def3 :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> ((not ((x <  0) and (y <  0))) -> (((x <  0) and (0 <  y)) ->
  pos_div_relation((-fxp_div(x, y)),
  ((((-x) * 1) * 1073741824) * 1073741824),
  (((y * 1073741824) * 1) * 1))))))))

axiom fxp_div_def4 :
  (forall x:int.
  (forall y:int [fxp_div(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> ((not ((x <  0) and (y <  0))) -> ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) -> pos_div_relation((-fxp_div(x,
  y)), (((x * 1) * 1073741824) * 1073741824),
  ((((-y) * 1073741824) * 1) * 1)))))))))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "float_div_lt_1.ads", line 8, characters 0-0 *)
goal defqtvc : (dynamic_invariant(dividend, true, false, true, true) ->
  (dynamic_invariant(divisor, true, false, true, true) ->
  (dynamic_invariant1(quotient, true, false, true, true) ->
  ((andb((if (0 <  divisor) then true else false),
  (if (dividend <  divisor) then true else false)) = true) ->
  in_range2(fxp_div(of_int1(dividend), of_int1(divisor)))))))
