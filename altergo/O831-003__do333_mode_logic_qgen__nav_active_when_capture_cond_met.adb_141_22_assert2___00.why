(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic pilot_flying_side : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic selected_nav_source_changed : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic selected_nav_frequency_changed : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic nav_capture_cond_met : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

logic no_higher_event_than_nav_capture_cond_met : bool

logic attr__ATTRIBUTE_ADDRESS4 : int

logic nav_active : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

logic modes_on : bool

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields = {
rec__mode_logic_props_types__changed_state__unit_delay_memory : bool;
rec__mode_logic_props_types__changed_state__in1_out1 : bool
}

function us_split_fields_rec__mode_logic_props_types__changed_state__unit_delay_memory__projection(a: us_split_fields) : bool =
  (a).rec__mode_logic_props_types__changed_state__unit_delay_memory

function us_split_fields_rec__mode_logic_props_types__changed_state__in1_out1__projection(a: us_split_fields) : bool =
  (a).rec__mode_logic_props_types__changed_state__in1_out1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_fields1).rec__mode_logic_props_types__changed_state__unit_delay_memory) = to_int(((b).us_split_fields1).rec__mode_logic_props_types__changed_state__unit_delay_memory)) and
  (to_int(((a).us_split_fields1).rec__mode_logic_props_types__changed_state__in1_out1) = to_int(((b).us_split_fields1).rec__mode_logic_props_types__changed_state__in1_out1))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic mode_logic_props_types__changed_state__unit_delay_memory__first__bit : int

logic mode_logic_props_types__changed_state__unit_delay_memory__last__bit : int

logic mode_logic_props_types__changed_state__unit_delay_memory__position : int

axiom mode_logic_props_types__changed_state__unit_delay_memory__first__bit_axiom :
  (0 <= mode_logic_props_types__changed_state__unit_delay_memory__first__bit)

axiom mode_logic_props_types__changed_state__unit_delay_memory__last__bit_axiom :
  (mode_logic_props_types__changed_state__unit_delay_memory__first__bit <  mode_logic_props_types__changed_state__unit_delay_memory__last__bit)

axiom mode_logic_props_types__changed_state__unit_delay_memory__position_axiom :
  (0 <= mode_logic_props_types__changed_state__unit_delay_memory__position)

logic mode_logic_props_types__changed_state__in1_out1__first__bit : int

logic mode_logic_props_types__changed_state__in1_out1__last__bit : int

logic mode_logic_props_types__changed_state__in1_out1__position : int

axiom mode_logic_props_types__changed_state__in1_out1__first__bit_axiom :
  (0 <= mode_logic_props_types__changed_state__in1_out1__first__bit)

axiom mode_logic_props_types__changed_state__in1_out1__last__bit_axiom :
  (mode_logic_props_types__changed_state__in1_out1__first__bit <  mode_logic_props_types__changed_state__in1_out1__last__bit)

axiom mode_logic_props_types__changed_state__in1_out1__position_axiom :
  (0 <= mode_logic_props_types__changed_state__in1_out1__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type changed_state__ref = { changed_state__content : us_rep
}

function changed_state__ref_changed_state__content__projection(a: changed_state__ref) : us_rep =
  (a).changed_state__content

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic attr__ATTRIBUTE_ADDRESS20 : int

logic attr__ATTRIBUTE_ADDRESS21 : int

logic attr__ATTRIBUTE_ADDRESS22 : int

logic attr__ATTRIBUTE_ADDRESS23 : int

logic attr__ATTRIBUTE_ADDRESS24 : int

logic attr__ATTRIBUTE_ADDRESS25 : int

logic attr__ATTRIBUTE_ADDRESS26 : int

 (* File "nav_active_when_capture_cond_met.ads", line 19, characters 0-0 *)
goal defqtvc :
  (forall unit_delay_memory:bool. forall unit_delay1_memory:bool.
  (forall unit_delay_out1:bool. ((unit_delay_out1 = unit_delay_memory) ->
  (forall unit_delay1_out1:bool. ((unit_delay1_out1 = unit_delay1_memory) ->
  (forall modes_on_out1:bool. ((modes_on_out1 = modes_on) ->
  (forall nav_active_out1:bool. ((nav_active_out1 = nav_active) ->
  (forall nav_capture_cond_met_out1:bool.
  ((nav_capture_cond_met_out1 = nav_capture_cond_met) ->
  (forall no_higher_event_than_nav_capture_cond_met_out1:bool.
  ((no_higher_event_than_nav_capture_cond_met_out1 = no_higher_event_than_nav_capture_cond_met) ->
  (forall pilot_flying_side_out1:bool.
  ((pilot_flying_side_out1 = pilot_flying_side) ->
  (forall changed_out1:bool.
  (forall selected_nav_frequency_changed_out1:bool.
  ((selected_nav_frequency_changed_out1 = selected_nav_frequency_changed) ->
  (forall selected_nav_source_changed_out1:bool.
  ((selected_nav_source_changed_out1 = selected_nav_source_changed) ->
  (forall not4_out1:bool.
  ((not4_out1 = (if (changed_out1 = true) then false else true)) ->
  (forall not3_out1:bool.
  ((not3_out1 = (if (selected_nav_frequency_changed_out1 = true) then false else true)) ->
  (forall not2_out1:bool.
  ((not2_out1 = (if (selected_nav_source_changed_out1 = true) then false else true)) ->
  (forall not_out1:bool.
  ((not_out1 = (if (unit_delay1_out1 = true) then false else true)) ->
  (forall or_out1:bool.
  ((or_out1 = (if ((if ((if ((if ((if ((if ((if (unit_delay_out1 = true) then not_out1 else false) = true) then nav_capture_cond_met_out1 else false) = true) then not2_out1 else false) = true) then not3_out1 else false) = true) then not4_out1 else false) = true) then modes_on_out1 else false) = true) then no_higher_event_than_nav_capture_cond_met_out1 else false)) ->
  (forall not1_out1:bool.
  ((not1_out1 = (if (or_out1 = true) then false else true)) ->
  (forall not5_out1:bool.
  ((not5_out1 = (if (not1_out1 = true) then true else nav_active_out1)) ->
  (not5_out1 = true)))))))))))))))))))))))))))))))))))
