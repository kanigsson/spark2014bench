(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic all_elements_in : (int,integer) farray, int -> bool

logic all_elements_in__function_guard : bool, (int,integer) farray,
  int -> prop

axiom all_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((-max) <= to_rep((a[k]))))))))

axiom all_elements_in__def_axiom1 :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (to_rep((a[k])) <= max))))))

axiom all_elements_in__def_axiom2 :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)].
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (((-max) <= to_rep((a[k]))) and
   (to_rep((a[k])) <= max)))) ->
  (all_elements_in(a, max) = true))))

logic all_left_elements_in : (int,integer) farray, int, int -> bool

logic all_left_elements_in__function_guard : bool, (int,integer) farray, int,
  int -> prop

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom all_left_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall right:int. forall max:int [all_left_elements_in(a, right, max)].
  ((all_left_elements_in(a, right, max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((k <  right) ->
  ((-max) <= to_rep((a[k])))))))))

axiom all_left_elements_in__def_axiom1 :
  (forall a:(int,integer) farray.
  (forall right:int. forall max:int [all_left_elements_in(a, right, max)].
  ((all_left_elements_in(a, right, max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((k <  right) ->
  (to_rep((a[k])) <= max)))))))

axiom all_left_elements_in__def_axiom2 :
  (forall a:(int,integer) farray.
  (forall right:int. forall max:int [all_left_elements_in(a, right, max)].
  ((forall k:int. (((0 <= k) and (k <= 7)) -> ((k <  right) ->
   (((-max) <= to_rep((a[k]))) and (to_rep((a[k])) <= max))))) ->
  (all_left_elements_in(a, right, max) = true))))

logic all_right_elements_in : (int,integer) farray, int, int -> bool

logic all_right_elements_in__function_guard : bool, (int,integer) farray,
  int, int -> prop

axiom all_right_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall left:int. forall max:int [all_right_elements_in(a, left, max)].
  ((all_right_elements_in(a, left, max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((left <  k) ->
  ((-max) <= to_rep((a[k])))))))))

axiom all_right_elements_in__def_axiom1 :
  (forall a:(int,integer) farray.
  (forall left:int. forall max:int [all_right_elements_in(a, left, max)].
  ((all_right_elements_in(a, left, max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((left <  k) ->
  (to_rep((a[k])) <= max)))))))

axiom all_right_elements_in__def_axiom2 :
  (forall a:(int,integer) farray.
  (forall left:int. forall max:int [all_right_elements_in(a, left, max)].
  ((forall k:int. (((0 <= k) and (k <= 7)) -> ((left <  k) ->
   (((-max) <= to_rep((a[k]))) and (to_rep((a[k])) <= max))))) ->
  (all_right_elements_in(a, left, max) = true))))

logic intermediate_form : (int,integer) farray, (int,integer) farray -> bool

logic intermediate_form__function_guard : bool, (int,integer) farray,
  (int,integer) farray -> prop

axiom intermediate_form__def_axiom :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((mod1((k + 1), 8) = 0) ->
  (to_rep((a[k])) = (((((((to_rep((b[0])) + to_rep((b[1]))) + to_rep((b[2]))) + to_rep((b[3]))) + to_rep((b[4]))) + to_rep((b[5]))) + to_rep((b[6]))) + to_rep((b[7])))))))))

axiom intermediate_form__def_axiom1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((not (mod1((k + 1), 8) = 0)) ->
  ((mod1((k + 1), 4) = 0) ->
  (to_rep((a[k])) = (((to_rep((b[k])) + to_rep((b[(k - 1)]))) + to_rep((b[(k - 2)]))) + to_rep((b[(k - 3)]))))))))))

axiom intermediate_form__def_axiom2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((not (mod1((k + 1), 8) = 0)) ->
  ((not (mod1((k + 1), 4) = 0)) -> ((mod1((k + 1), 2) = 0) ->
  (to_rep((a[k])) = (to_rep((b[k])) + to_rep((b[(k - 1)])))))))))))

axiom intermediate_form__def_axiom3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)]. ((intermediate_form(a, b) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((not (mod1((k + 1), 8) = 0)) ->
  ((not (mod1((k + 1), 4) = 0)) -> ((not (mod1((k + 1), 2) = 0)) ->
  (to_rep((a[k])) = to_rep((b[k]))))))))))

axiom intermediate_form__def_axiom4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray
  [intermediate_form(a, b)].
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (if (mod1((k + 1),
   8) = 0) then (to_rep((a[k])) = (((((((to_rep((b[0])) + to_rep((b[1]))) + to_rep((b[2]))) + to_rep((b[3]))) + to_rep((b[4]))) + to_rep((b[5]))) + to_rep((b[6]))) + to_rep((b[7])))) else (if (mod1((k + 1),
   4) = 0) then (to_rep((a[k])) = (((to_rep((b[k])) + to_rep((b[(k - 1)]))) + to_rep((b[(k - 2)]))) + to_rep((b[(k - 3)])))) else (if (mod1((k + 1),
   2) = 0) then (to_rep((a[k])) = (to_rep((b[k])) + to_rep((b[(k - 1)])))) else (to_rep((a[k])) = to_rep((b[k])))))))) ->
  (intermediate_form(a, b) = true)))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 7))

predicate in_range4(x: int) = ((0 <= x) and (x <= 7))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant3(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 7)) -> in_range4(temp___expr_163))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "prefixsum.ads", line 36, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray. forall output_space:int. forall left:int.
  forall right:int.
  (forall a1:(int,integer) farray. ((a1 = a) ->
  (dynamic_invariant1(output_space, false, false, true, true) ->
  ((all_elements_in(a, 1000000) = true) ->
  (forall space:int. ((space = 1) -> (dynamic_invariant1(space, true, false,
  true, true) -> (dynamic_invariant(left, false, false, true, true) ->
  (dynamic_invariant(right, false, false, true, true) -> ((space <  8) ->
  (forall temp___loop_entry_216:(int,integer) farray.
  ((temp___loop_entry_216 = a) ->
  (forall temp___loop_entry_231:(int,integer) farray.
  ((temp___loop_entry_231 = a) ->
  (forall temp___loop_entry_223:(int,integer) farray.
  ((temp___loop_entry_223 = a) ->
  (forall temp___loop_entry_222:(int,integer) farray.
  ((temp___loop_entry_222 = a) ->
  (forall temp___loop_entry_229:(int,integer) farray.
  ((temp___loop_entry_229 = a) ->
  (forall temp___loop_entry_221:(int,integer) farray.
  ((temp___loop_entry_221 = a) ->
  (forall temp___loop_entry_220:(int,integer) farray.
  ((temp___loop_entry_220 = a) ->
  (forall temp___loop_entry_227:(int,integer) farray.
  ((temp___loop_entry_227 = a) ->
  (forall temp___loop_entry_219:(int,integer) farray.
  ((temp___loop_entry_219 = a) ->
  (forall temp___loop_entry_234:(int,integer) farray.
  ((temp___loop_entry_234 = a) ->
  (forall temp___loop_entry_225:(int,integer) farray.
  ((temp___loop_entry_225 = a) ->
  (forall temp___loop_entry_218:(int,integer) farray.
  ((temp___loop_entry_218 = a) ->
  (forall temp___loop_entry_224:(int,integer) farray.
  ((temp___loop_entry_224 = a) ->
  (forall temp___loop_entry_217:(int,integer) farray.
  ((temp___loop_entry_217 = a) ->
  (forall temp___loop_entry_232:(int,integer) farray.
  ((temp___loop_entry_232 = a) ->
  ((exists o:bool. (let o1 = (space * 1000000) : int in (in_range3(o1) and
   (let o2 = all_elements_in(a, o1) : bool in (((o2 = true) <->
   (forall k:int. (((0 <= k) and (k <= 7)) -> (((-o1) <= to_rep((a[k]))) and
   (to_rep((a[k])) <= o1))))) and
   (if (o2 = true) then (o = orb(orb((if (space = 1) then true else false),
   (if (space = 2) then true else false)),
   (if (space = 4) then true else false))) else (o = false))))))) ->
  (forall a2:(int,integer) farray. forall space1:int. forall left1:int.
  forall right1:int. ((((all_elements_in(a2, (space1 * 1000000)) = true) and
  (((space1 = 1) or (space1 = 2)) or (space1 = 4))) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> (if ((mod1((k + 1), 8) = 0) and
  (space1 = 8)) then (to_rep((a2[k])) = (((((((to_rep((temp___loop_entry_216[0])) + to_rep((temp___loop_entry_217[1]))) + to_rep((temp___loop_entry_218[2]))) + to_rep((temp___loop_entry_219[3]))) + to_rep((temp___loop_entry_220[4]))) + to_rep((temp___loop_entry_221[5]))) + to_rep((temp___loop_entry_222[6]))) + to_rep((temp___loop_entry_223[7])))) else (if ((mod1((k + 1),
  4) = 0) and
  (4 <= space1)) then (to_rep((a2[k])) = (((to_rep((temp___loop_entry_224[k])) + to_rep((temp___loop_entry_225[(k - 1)]))) + to_rep((temp___loop_entry_227[(k - 2)]))) + to_rep((temp___loop_entry_229[(k - 3)])))) else (if ((mod1((k + 1),
  2) = 0) and
  (2 <= space1)) then (to_rep((a2[k])) = (to_rep((temp___loop_entry_231[k])) + to_rep((temp___loop_entry_232[(k - 1)])))) else (to_rep((a2[k])) = to_rep((temp___loop_entry_234[k]))))))))) ->
  ((andb((if ((dynamic_invariant1(space1, true, true, true, true) and
  dynamic_invariant(left1, false, true, true, true)) and
  dynamic_invariant(right1, false, true, true, true)) then true else false),
  (if (space1 <  8) then true else false)) = true) ->
  (forall temp___235:int. ((temp___235 = space1) ->
  (forall left2:int. ((left2 = (space1 - 1)) -> ((left2 <  8) ->
  (forall temp___loop_entry_208:(int,integer) farray.
  ((temp___loop_entry_208 = a2) ->
  (forall temp___loop_entry_206:(int,integer) farray.
  ((temp___loop_entry_206 = a2) ->
  (forall temp___loop_entry_205:(int,integer) farray.
  ((temp___loop_entry_205 = a2) ->
  ((exists o:bool.
   (exists o1:bool.
   ((exists o2:bool.
    ((exists o3:bool. ((if (mod1((left2 + 1), space1) = 0) then (let o4 =
     ((space1 * 2) * 1000000) : int in (in_range3(o4) and
     ((o3 = all_left_elements_in(a2, left2, o4)) and ((o3 = true) <->
     (forall k:int. (((0 <= k) and (k <= 7)) -> ((k <  left2) ->
     (((-o4) <= to_rep((a2[k]))) and (to_rep((a2[k])) <= o4))))))))) else (o3 = false)) and
     (if (o3 = true) then (let o4 = (space1 * 1000000) : int in
     (in_range3(o4) and (let o5 = (left2 - 1) : int in
     ((o2 = all_right_elements_in(a2, o5, o4)) and ((o2 = true) <->
     (forall k:int. (((0 <= k) and (k <= 7)) -> ((o5 <  k) ->
     (((-o4) <= to_rep((a2[k]))) and (to_rep((a2[k])) <= o4)))))))))) else (o2 = false)))) and
    (if (o2 = true) then (o1 = (if (mod1((left2 + 1),
    (space1 * 2)) = space1) then true else false)) else (o1 = false)))) and
   (if (o1 = true) then (if (8 <= left2) then (o = orb((if (left2 = 8) then true else false),
   (if (left2 = 9) then true else false))) else (o = of_int(1))) else (o = false))))) ->
  (forall a3:(int,integer) farray. forall left3:int. forall right2:int.
  (((((((mod1((left3 + 1), space1) = 0) and (all_left_elements_in(a3, left3,
  ((space1 * 2) * 1000000)) = true)) and (all_right_elements_in(a3,
  (left3 - 1), (space1 * 1000000)) = true)) and (mod1((left3 + 1),
  (space1 * 2)) = space1)) and ((8 <= left3) -> ((left3 = 8) or
  (left3 = 9)))) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> (if (((0 <= k) and
  (k <= (left3 - space1))) and (mod1((k + 1),
  (2 * space1)) = 0)) then (to_rep((a3[k])) = (to_rep((temp___loop_entry_205[k])) + to_rep((temp___loop_entry_206[(k - space1)])))) else (to_rep((a3[k])) = to_rep((temp___loop_entry_208[k]))))))) ->
  ((andb((if (dynamic_invariant(left3, false, true, true, true) and
  dynamic_invariant(right2, false, true, true, true)) then true else false),
  (if (left3 <  8) then true else false)) = true) ->
  (forall temp___209:int. ((temp___209 = left3) -> (let o = (left3 + space1)
  : int in (in_range1(o) ->
  (forall right3:int. ((right3 = o) -> (((0 <= right3) and (right3 <= 7)) ->
  (forall o1:int. ((to_rep((a3[right3])) = o1) -> (((0 <= left3) and
  (left3 <= 7)) ->
  (forall o2:int. ((to_rep((a3[left3])) = o2) -> (let o3 = (o2 + o1) : int in
  (in_range1(o3) ->
  (forall o4:integer. ((to_rep(o4) = o3) -> (((0 <= right3) and
  (right3 <= 7)) ->
  (forall a4:(int,integer) farray. ((a4 = (a3[right3 <- o4])) -> (let o5 =
  (space1 * 2) : int in (in_range1(o5) -> (let o6 = (left3 + o5) : int in
  (in_range1(o6) -> (in_range2(o6) ->
  (forall left4:int. ((left4 = o6) -> ((left4 <  8) ->
  ((exists o7:bool.
   (exists o8:bool.
   ((exists o9:bool.
    ((exists o10:bool. ((if (mod1((left4 + 1), space1) = 0) then (let o11 =
     ((space1 * 2) * 1000000) : int in (in_range3(o11) and
     ((o10 = all_left_elements_in(a4, left4, o11)) and ((o10 = true) <->
     (forall k:int. (((0 <= k) and (k <= 7)) -> ((k <  left4) ->
     (((-o11) <= to_rep((a4[k]))) and (to_rep((a4[k])) <= o11))))))))) else (o10 = false)) and
     (if (o10 = true) then (let o11 = (space1 * 1000000) : int in
     (in_range3(o11) and (let o12 = (left4 - 1) : int in
     ((o9 = all_right_elements_in(a4, o12, o11)) and ((o9 = true) <->
     (forall k:int. (((0 <= k) and (k <= 7)) -> ((o12 <  k) ->
     (((-o11) <= to_rep((a4[k]))) and (to_rep((a4[k])) <= o11)))))))))) else (o9 = false)))) and
    (if (o9 = true) then (o8 = (if (mod1((left4 + 1),
    (space1 * 2)) = space1) then true else false)) else (o8 = false)))) and
   (if (o8 = true) then (if (8 <= left4) then (o7 = orb((if (left4 = 8) then true else false),
   (if (left4 = 9) then true else false))) else (o7 = of_int(1))) else (o7 = false))))) ->
  (mod1((left4 + 1), space1) = 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
