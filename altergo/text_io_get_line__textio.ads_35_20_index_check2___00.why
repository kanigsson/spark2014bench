(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type file_descr

logic file_descrqtint : file_descr -> int

axiom file_descrqtaxiom :
  (forall i:file_descr. ((- 2147483648) <= file_descrqtint(i)))

axiom file_descrqtaxiom1 :
  (forall i:file_descr. (file_descrqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : file_descr, file_descr -> bool

logic dummy5 : file_descr

type file_descr__ref = { file_descr__content : file_descr
}

function file_descr__ref_file_descr__content__projection(a: file_descr__ref) : file_descr =
  (a).file_descr__content

function to_rep2(x: file_descr) : int = file_descrqtint(x)

logic of_rep2 : int -> file_descr

axiom inversion_axiom2 :
  (forall x:file_descr [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:file_descr [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : count, count -> bool

logic dummy6 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

function to_rep3(x: count) : int = countqtint(x)

logic of_rep3 : int -> count

axiom inversion_axiom3 :
  (forall x:count [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:count [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__textio__file_type__descr : file_descr;
rec__textio__file_type__before_lm : bool;
rec__textio__file_type__before_lm_pm : bool; rec__textio__file_type__col :
count; rec__textio__file_type__line : count; rec__textio__file_type__page :
count; rec__textio__file_type__is_regular_file : bool
}

function us_split_fields_rec__textio__file_type__descr__projection(a: us_split_fields) : file_descr =
  (a).rec__textio__file_type__descr

function us_split_fields_rec__textio__file_type__before_lm__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm

function us_split_fields_rec__textio__file_type__before_lm_pm__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__before_lm_pm

function us_split_fields_rec__textio__file_type__col__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__col

function us_split_fields_rec__textio__file_type__line__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__line

function us_split_fields_rec__textio__file_type__page__projection(a: us_split_fields) : count =
  (a).rec__textio__file_type__page

function us_split_fields_rec__textio__file_type__is_regular_file__projection(a: us_split_fields) : bool =
  (a).rec__textio__file_type__is_regular_file

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep, b: us_rep) : bool =
  (if (((to_rep2(((a).us_split_fields1).rec__textio__file_type__descr) = to_rep2(((b).us_split_fields1).rec__textio__file_type__descr)) and
  (to_int(((a).us_split_fields1).rec__textio__file_type__before_lm) = to_int(((b).us_split_fields1).rec__textio__file_type__before_lm))) and
  ((((to_int(((a).us_split_fields1).rec__textio__file_type__before_lm_pm) = to_int(((b).us_split_fields1).rec__textio__file_type__before_lm_pm)) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__col) = to_rep3(((b).us_split_fields1).rec__textio__file_type__col))) and
  (to_rep3(((a).us_split_fields1).rec__textio__file_type__line) = to_rep3(((b).us_split_fields1).rec__textio__file_type__line))) and
  ((to_rep3(((a).us_split_fields1).rec__textio__file_type__page) = to_rep3(((b).us_split_fields1).rec__textio__file_type__page)) and
  (to_int(((a).us_split_fields1).rec__textio__file_type__is_regular_file) = to_int(((b).us_split_fields1).rec__textio__file_type__is_regular_file))))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic textio__file_type__descr__first__bit : int

logic textio__file_type__descr__last__bit : int

logic textio__file_type__descr__position : int

axiom textio__file_type__descr__first__bit_axiom :
  (0 <= textio__file_type__descr__first__bit)

axiom textio__file_type__descr__last__bit_axiom :
  (textio__file_type__descr__first__bit <  textio__file_type__descr__last__bit)

axiom textio__file_type__descr__position_axiom :
  (0 <= textio__file_type__descr__position)

logic textio__file_type__before_lm__first__bit : int

logic textio__file_type__before_lm__last__bit : int

logic textio__file_type__before_lm__position : int

axiom textio__file_type__before_lm__first__bit_axiom :
  (0 <= textio__file_type__before_lm__first__bit)

axiom textio__file_type__before_lm__last__bit_axiom :
  (textio__file_type__before_lm__first__bit <  textio__file_type__before_lm__last__bit)

axiom textio__file_type__before_lm__position_axiom :
  (0 <= textio__file_type__before_lm__position)

logic textio__file_type__before_lm_pm__first__bit : int

logic textio__file_type__before_lm_pm__last__bit : int

logic textio__file_type__before_lm_pm__position : int

axiom textio__file_type__before_lm_pm__first__bit_axiom :
  (0 <= textio__file_type__before_lm_pm__first__bit)

axiom textio__file_type__before_lm_pm__last__bit_axiom :
  (textio__file_type__before_lm_pm__first__bit <  textio__file_type__before_lm_pm__last__bit)

axiom textio__file_type__before_lm_pm__position_axiom :
  (0 <= textio__file_type__before_lm_pm__position)

logic textio__file_type__col__first__bit : int

logic textio__file_type__col__last__bit : int

logic textio__file_type__col__position : int

axiom textio__file_type__col__first__bit_axiom :
  (0 <= textio__file_type__col__first__bit)

axiom textio__file_type__col__last__bit_axiom :
  (textio__file_type__col__first__bit <  textio__file_type__col__last__bit)

axiom textio__file_type__col__position_axiom :
  (0 <= textio__file_type__col__position)

logic textio__file_type__line__first__bit : int

logic textio__file_type__line__last__bit : int

logic textio__file_type__line__position : int

axiom textio__file_type__line__first__bit_axiom :
  (0 <= textio__file_type__line__first__bit)

axiom textio__file_type__line__last__bit_axiom :
  (textio__file_type__line__first__bit <  textio__file_type__line__last__bit)

axiom textio__file_type__line__position_axiom :
  (0 <= textio__file_type__line__position)

logic textio__file_type__page__first__bit : int

logic textio__file_type__page__last__bit : int

logic textio__file_type__page__position : int

axiom textio__file_type__page__first__bit_axiom :
  (0 <= textio__file_type__page__first__bit)

axiom textio__file_type__page__last__bit_axiom :
  (textio__file_type__page__first__bit <  textio__file_type__page__last__bit)

axiom textio__file_type__page__position_axiom :
  (0 <= textio__file_type__page__position)

logic textio__file_type__is_regular_file__first__bit : int

logic textio__file_type__is_regular_file__last__bit : int

logic textio__file_type__is_regular_file__position : int

axiom textio__file_type__is_regular_file__first__bit_axiom :
  (0 <= textio__file_type__is_regular_file__first__bit)

axiom textio__file_type__is_regular_file__last__bit_axiom :
  (textio__file_type__is_regular_file__first__bit <  textio__file_type__is_regular_file__last__bit)

axiom textio__file_type__is_regular_file__position_axiom :
  (0 <= textio__file_type__is_regular_file__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type file_type__ref = { file_type__content : us_rep
}

function file_type__ref_file_type__content__projection(a: file_type__ref) : us_rep =
  (a).file_type__content

logic attr__ATTRIBUTE_ADDRESS : int

logic item__first : integer

logic item__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic eof : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic eof_ch : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic end_of_file : us_rep, int, (int,character) farray -> bool

logic end_of_file__function_guard : bool, us_rep, int,
  (int,character) farray -> prop

logic fpeek : us_rep, int, (int,character) farray -> int

logic fpeek__function_guard : int, us_rep, int,
  (int,character) farray -> prop

axiom end_of_file__post_axiom :
  (forall file:us_rep.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [end_of_file(file,
  helpers__cur_position, helpers__the_file)].
  (dynamic_invariant2(helpers__cur_position, true, true, true, true) ->
  ((end_of_file(file, helpers__cur_position, helpers__the_file) = true) ->
  (fpeek(file, helpers__cur_position, helpers__the_file) = eof))))))

axiom end_of_file__post_axiom1 :
  (forall file:us_rep.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [end_of_file(file,
  helpers__cur_position, helpers__the_file)].
  (dynamic_invariant2(helpers__cur_position, true, true, true, true) ->
  ((fpeek(file, helpers__cur_position, helpers__the_file) = eof) ->
  (end_of_file(file, helpers__cur_position, helpers__the_file) = true))))))

type int__

logic int__qtint : int__ -> int

axiom int__qtaxiom : (forall i:int__. ((- 2147483648) <= int__qtint(i)))

axiom int__qtaxiom1 : (forall i:int__. (int__qtint(i) <= 2147483647))

predicate in_range7(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : int__, int__ -> bool

logic dummy8 : int__

type int____ref = { int____content : int__
}

function int____ref_int____content__2__projection(a: int____ref) : int__ =
  (a).int____content

predicate dynamic_invariant4(temp___expr_207: int, temp___is_init_203: bool,
  temp___skip_constant_204: bool, temp___do_toplevel_205: bool,
  temp___do_typ_inv_206: bool) = (((temp___is_init_203 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range7(temp___expr_207))

logic cur_position_at_start : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic eof_at_start : bool

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic no_char_in_slice : int, int, int, (int,character) farray -> bool

logic no_char_in_slice__function_guard : bool, int, int, int,
  (int,character) farray -> prop

logic find_char_in_slice : int, int, int, (int,character) farray -> int

logic find_char_in_slice__function_guard : int, int, int, int,
  (int,character) farray -> prop

logic attr__ATTRIBUTE_ADDRESS11 : int

type t43b__ref = { t43b__content : us_t
}

function t43b__ref_t43b__content__projection(a: t43b__ref) : us_t =
  (a).t43b__content

logic temp_____aggregate_def_354 : int, int, int -> us_t

predicate dynamic_invariant5(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant6(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  (0 <= 2147483647)) -> in_range6(temp___expr_179))

logic fpeek1 : int, int, (int,character) farray -> int

logic fpeek__function_guard1 : int, int, int, (int,character) farray -> prop

axiom fpeek__post_axiom :
  (forall file:us_rep.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek(file,
  helpers__cur_position, helpers__the_file)].
  (dynamic_invariant2(helpers__cur_position, true, true, true, true) ->
  dynamic_invariant4(fpeek(file, helpers__cur_position, helpers__the_file),
  true, false, true, true)))))

axiom fpeek__def_axiom :
  (forall file:us_rep.
  (forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek(file,
  helpers__cur_position, helpers__the_file)].
  (dynamic_invariant2(helpers__cur_position, true, true, true, true) ->
  (fpeek(file, helpers__cur_position,
  helpers__the_file) = fpeek1(to_rep2(((file).us_split_fields1).rec__textio__file_type__descr),
  helpers__cur_position, helpers__the_file))))))

axiom eof_ch__def_axiom : (eof_ch = mod1(eof, 256))

predicate dynamic_invariant7(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_172))

axiom fpeek__post_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1(stream,
  helpers__cur_position, helpers__the_file)]. ((dynamic_invariant7(stream,
  true, true, true, true) and dynamic_invariant2(helpers__cur_position, true,
  true, true, true)) -> dynamic_invariant4(fpeek1(stream,
  helpers__cur_position, helpers__the_file), true, false, true, true))))

axiom fpeek__def_axiom1 :
  (forall stream:int. forall helpers__cur_position:int.
  (forall helpers__the_file:(int,character) farray [fpeek1(stream,
  helpers__cur_position, helpers__the_file)]. ((dynamic_invariant7(stream,
  true, true, true, true) and dynamic_invariant2(helpers__cur_position, true,
  true, true, true)) -> (fpeek1(stream, helpers__cur_position,
  helpers__the_file) = (if (to_rep((helpers__the_file[helpers__cur_position])) = eof_ch) then eof else to_rep((helpers__the_file[helpers__cur_position])))))))

axiom no_char_in_slice__def_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [no_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((no_char_in_slice(ch, from, to__,
  helpers__the_file) = true) ->
  (forall idx:int. (((from <= idx) and (idx <= to__)) ->
  (not (to_rep((helpers__the_file[idx])) = ch)))))))

axiom no_char_in_slice__def_axiom1 :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [no_char_in_slice(ch,
  from, to__, helpers__the_file)].
  ((forall idx:int. (((from <= idx) and (idx <= to__)) ->
   (not (to_rep((helpers__the_file[idx])) = ch)))) ->
  (no_char_in_slice(ch, from, to__, helpers__the_file) = true))))

logic has_char_in_slice : int, int, int, (int,character) farray -> bool

logic has_char_in_slice__function_guard : bool, int, int, int,
  (int,character) farray -> prop

axiom has_char_in_slice__def_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [has_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((has_char_in_slice(ch, from, to__,
  helpers__the_file) = true) ->
  (exists idx:int. (((from <= idx) and (idx <= to__)) and
  (to_rep((helpers__the_file[idx])) = ch))))))

axiom has_char_in_slice__def_axiom1 :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [has_char_in_slice(ch,
  from, to__, helpers__the_file)].
  ((exists idx:int. (((from <= idx) and (idx <= to__)) and
   (to_rep((helpers__the_file[idx])) = ch))) ->
  (has_char_in_slice(ch, from, to__, helpers__the_file) = true))))

axiom find_char_in_slice__post_axiom :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((dynamic_invariant3(ch, true, true,
  true, true) and dynamic_invariant2(from, true, true, true, true)) and
  dynamic_invariant2(to__, true, true, true, true)) and
  (has_char_in_slice(ch, from, to__, helpers__the_file) = true)) ->
  (from <= find_char_in_slice(ch, from, to__, helpers__the_file)))))

axiom find_char_in_slice__post_axiom1 :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((dynamic_invariant3(ch, true, true,
  true, true) and dynamic_invariant2(from, true, true, true, true)) and
  dynamic_invariant2(to__, true, true, true, true)) and
  (has_char_in_slice(ch, from, to__, helpers__the_file) = true)) ->
  (find_char_in_slice(ch, from, to__, helpers__the_file) <= to__))))

axiom find_char_in_slice__post_axiom2 :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((dynamic_invariant3(ch, true, true,
  true, true) and dynamic_invariant2(from, true, true, true, true)) and
  dynamic_invariant2(to__, true, true, true, true)) and
  (has_char_in_slice(ch, from, to__, helpers__the_file) = true)) ->
  (no_char_in_slice(ch, from, (find_char_in_slice(ch, from, to__,
  helpers__the_file) - 1), helpers__the_file) = true))))

axiom find_char_in_slice__post_axiom3 :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((dynamic_invariant3(ch, true, true,
  true, true) and dynamic_invariant2(from, true, true, true, true)) and
  dynamic_invariant2(to__, true, true, true, true)) and
  (has_char_in_slice(ch, from, to__, helpers__the_file) = true)) ->
  (to_rep((helpers__the_file[find_char_in_slice(ch, from, to__,
  helpers__the_file)])) = ch))))

axiom find_char_in_slice__post_axiom4 :
  (forall ch:int. forall from:int. forall to__:int.
  (forall helpers__the_file:(int,character) farray [find_char_in_slice(ch,
  from, to__, helpers__the_file)]. ((((dynamic_invariant3(ch, true, true,
  true, true) and dynamic_invariant2(from, true, true, true, true)) and
  dynamic_invariant2(to__, true, true, true, true)) and
  (has_char_in_slice(ch, from, to__, helpers__the_file) = true)) ->
  dynamic_invariant2(find_char_in_slice(ch, from, to__, helpers__the_file),
  true, false, true, true))))

axiom def_axiom :
  (forall temp___356:int. forall temp___357:int. forall temp___358:int.
  (dynamic_invariant3(temp___356, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___357, temp___358) ->
  (first1(temp_____aggregate_def_354(temp___356, temp___357,
  temp___358)) = temp___357))))

axiom def_axiom1 :
  (forall temp___356:int. forall temp___357:int. forall temp___358:int.
  (dynamic_invariant3(temp___356, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___357, temp___358) ->
  (last1(temp_____aggregate_def_354(temp___356, temp___357,
  temp___358)) = temp___358))))

axiom def_axiom2 :
  (forall temp___356:int. forall temp___357:int. forall temp___358:int.
  (dynamic_invariant3(temp___356, true, true, true, true) ->
  (forall temp___359:int.
  (to_rep((to_array(temp_____aggregate_def_354(temp___356, temp___357,
  temp___358))[temp___359])) = temp___356))))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "textio.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall file__split_fields:us_split_fields. forall last2:int.
  forall the_file:(int,character) farray. forall cur_position:int.
  forall ch:int. forall n:int. forall rest:int. (dynamic_property(1,
  2147483647, to_rep1(item__first), to_rep1(item__last)) ->
  (dynamic_invariant1(last2, false, false, true, true) ->
  (dynamic_invariant2(cur_position, true, false, true, true) ->
  (dynamic_invariant3(eof_ch, true, false, true, true) -> ((mod1(eof,
  256) = eof_ch) -> (dynamic_invariant4(eof, true, false, true, true) ->
  ((not (end_of_file({ us_split_fields1 = file__split_fields }, cur_position,
  the_file) = true)) -> (let usf = bool_lt(to_rep1(item__last),
  to_rep1(item__first)) : bool in
  (forall temp___old_379:int. ((temp___old_379 = cur_position) ->
  (forall temp___old_377:int. ((temp___old_377 = cur_position) ->
  (forall item:(int,character) farray. forall last3:int.
  forall cur_position1:int. (((cur_position = cur_position_at_start) and
  (dynamic_invariant2(cur_position_at_start, true, false, true, true) and
  (let o = { us_split_fields1 = file__split_fields } : us_rep in
  (let textio__get_line__eof_at_start__assume = end_of_file(o, cur_position,
  the_file) : bool in (((textio__get_line__eof_at_start__assume = true) <->
  (fpeek(o, cur_position, the_file) = eof)) and
  ((textio__get_line__eof_at_start__assume = eof_at_start) and
  (dynamic_invariant4(ch, false, false, true, true) and
  (dynamic_invariant1(n, false, false, true, true) and
  (dynamic_invariant(rest, false, false, true, true) and
  (exists o1:int. ((to_rep1(item__last) = o1) and
  (exists o2:int. ((to_rep1(item__first) = o2) and (let temp___360 =
  temp_____aggregate_def_354(32, o2, o1) : us_t in
  ((first1(temp___360) = to_rep1(item__first)) and
  ((last1(temp___360) = to_rep1(item__last)) and (let temp___362 =
  of_array(to_array(temp___360), first1(temp___360), last1(temp___360))
  : us_t in
  ((if (first1(temp___362) <= last1(temp___362)) then ((to_rep1(item__first) <= to_rep1(item__last)) and
  ((last1(temp___362) - first1(temp___362)) = (to_rep1(item__last) - to_rep1(item__first)))) else (to_rep1(item__last) <  to_rep1(item__first))) and
  (exists o3:int. ((to_rep1(item__first) = o3) and
  (exists item1:(int,character) farray. ((item1 = slide(to_array(temp___362),
  first1(temp___362), o3)) and
  (exists o4:int. ((to_rep1(item__first) = o4) and (let o5 = (o4 - 1)
  : int in (in_range1(o5) and (in_range2(o5) and
  (exists last4:int. ((last4 = o5) and
  (exists o6:int. ((to_rep1(item__last) = o6) and
  (exists o7:int. ((to_rep1(item__first) = o7) and
  (exists spark__branch:bool.
  ((spark__branch = (if (o6 <  o7) then true else false)) and
  (if (spark__branch = true) then (((item = item1) and (last3 = last4)) and
  (cur_position1 = cur_position)) else (exists o8:int.
                                       ((to_rep1(item__first) = o8) and
                                       (exists o9:int.
                                       ((to_rep1(item__last) = o9) and
                                       (let o10 = (o9 - o8) : int in
                                       (in_range1(o10) and (let o11 =
                                       (o10 + 1) : int in (in_range1(o11) and
                                       (in_range2(o11) and
                                       (exists n1:int. ((n1 = o11) and
                                       (exists spark__branch1:bool.
                                       exists item2:(int,character) farray.
                                       exists last5:int.
                                       exists cur_position2:int.
                                       exists n2:int. exists rest1:int.
                                       ((if (80 <= n1) then (exists temp___loop_entry_371:int.
                                                            ((temp___loop_entry_371 = cur_position) and
                                                            (exists temp___loop_entry_373:int.
                                                            ((temp___loop_entry_373 = cur_position) and
                                                            ((exists o12:int.
                                                             ((to_rep1(item__first) = o12) and
                                                             ((not (o12 <= (last4 + 1))) or
                                                             (exists o13:int.
                                                             (to_rep1(item__last) = o13))))) and
                                                            (exists item3:(int,character) farray.
                                                            exists last6:int.
                                                            exists cur_position3:int.
                                                            exists n3:int.
                                                            exists rest2:int.
                                                            ((((to_rep1(item__first) <= (last6 + 1)) and
                                                            ((last6 + n3) = to_rep1(item__last))) and
                                                            ((forall idx:int.
                                                             (((to_rep1(item__first) <= idx) and
                                                             (idx <= last6)) ->
                                                             (to_rep((item3[idx])) = to_rep((the_file[((idx - to_rep1(item__first)) + temp___loop_entry_373)]))))) and
                                                            (cur_position3 = (((temp___loop_entry_371 + last6) - to_rep1(item__first)) + 1)))) and
                                                            ((andb((if (((dynamic_invariant2(cur_position3,
                                                            true, true, true,
                                                            true) and
                                                            dynamic_invariant1(last6,
                                                            false, true,
                                                            true, true)) and
                                                            dynamic_invariant(rest2,
                                                            false, true,
                                                            true, true)) and
                                                            dynamic_invariant1(n3,
                                                            false, true,
                                                            true,
                                                            true)) then true else false),
                                                            (if (80 <= n3) then true else false)) = true) and
                                                            ((cur_position3 <= 10000) and
                                                            (exists file__split_fields1:us_split_fields.
                                                            ((file__split_fields1 = file__split_fields) and
                                                            (exists the_file1:(int,character) farray.
                                                            ((the_file1 = the_file) and
                                                            (exists cur_position4:int.
                                                            ((cur_position4 = cur_position3) and
                                                            (exists item4:(int,character) farray.
                                                            ((item4 = item3) and
                                                            (exists last7:int.
                                                            ((last7 = last6) and
                                                            (exists textio__get_line__get_chunk__rest:int.
                                                            ((((((forall idx:int.
                                                                 (((to_rep1(item__first) <= idx) and
                                                                 (idx <= last7)) ->
                                                                 (to_rep((item2[idx])) = to_rep((item4[idx]))))) and
                                                            ((cur_position2 - cur_position4) = (last5 - last7))) and
                                                            (forall idx:int.
                                                            ((((last7 + 1) <= idx) and
                                                            (idx <= last5)) ->
                                                            (to_rep((item2[idx])) = to_rep((the_file[(((idx - last7) - 1) + cur_position4)])))))) and
                                                            (if (80 = 1) then ((last5 = last7) and
                                                            (textio__get_line__get_chunk__rest = 1)) else (if (end_of_file({
                                                            us_split_fields1 =
                                                            file__split_fields1
                                                            }, cur_position4,
                                                            the_file1) = true) then ((last5 = last7) and
                                                            (textio__get_line__get_chunk__rest = 0)) else (if ((no_char_in_slice(10,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file) = true) and
                                                            (no_char_in_slice(eof_ch,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file) = true)) then (((last5 = ((last7 + 80) - 1)) and
                                                            (forall idx:int.
                                                            (((1 <= idx) and
                                                            (idx <= (80 - 1))) ->
                                                            (to_rep((item2[(last7 + idx)])) = to_rep((the_file[((cur_position4 + idx) - 1)])))))) and
                                                            (textio__get_line__get_chunk__rest = 1)) else (if (no_char_in_slice(eof_ch,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file) = true) then (((last5 = ((last7 + find_char_in_slice(10,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file)) - cur_position4)) and
                                                            (forall idx:int.
                                                            (((cur_position4 <= idx) and
                                                            (idx <= (find_char_in_slice(10,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file) - 1))) ->
                                                            (to_rep((item2[(((last7 + idx) - cur_position4) + 1)])) = to_rep((the_file[idx])))))) and
                                                            (textio__get_line__get_chunk__rest = 0)) else (((last5 = ((last7 + find_char_in_slice(eof_ch,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file)) - cur_position4)) and
                                                            (forall idx:int.
                                                            (((cur_position4 <= idx) and
                                                            (idx <= (find_char_in_slice(eof_ch,
                                                            cur_position4,
                                                            ((cur_position4 + 80) - 2),
                                                            the_file) - 1))) ->
                                                            (to_rep((item2[(((last7 + idx) - cur_position4) + 1)])) = to_rep((the_file[idx])))))) and
                                                            (textio__get_line__get_chunk__rest = 0))))))) and
                                                            ((dynamic_invariant1(textio__get_line__get_chunk__rest,
                                                            true, true, true,
                                                            true) and
                                                            dynamic_invariant2(cur_position2,
                                                            true, true, true,
                                                            true)) and
                                                            dynamic_invariant1(last5,
                                                            true, true, true,
                                                            true))) and
                                                            ((rest1 = textio__get_line__get_chunk__rest) and
                                                            (((spark__branch1 = (if (rest1 = 0) then true else false)) and
                                                            (if (spark__branch1 = true) then (n2 = 0) else (let o12 =
                                                            ((n3 - 80) + 1)
                                                            : int in
                                                            (in_range2(o12) and
                                                            (n2 = o12))))) and
                                                            (not (80 <= n2))))))))))))))))))))))))) else ((((((spark__branch1 = spark__branch) and
                                       (item2 = item1)) and
                                       (last5 = last4)) and
                                       (cur_position2 = cur_position)) and
                                       (n2 = n1)) and (rest1 = rest))) and
                                       (exists spark__branch2:bool.
                                       exists item3:(int,character) farray.
                                       exists last6:int.
                                       exists cur_position3:int.
                                       exists n3:int.
                                       (((spark__branch2 = (if (1 <  n2) then true else false)) and
                                       (if (spark__branch2 = true) then ((cur_position2 <= 10000) and
                                       (in_range3(n2) and
                                       (exists file__split_fields1:us_split_fields.
                                       ((file__split_fields1 = file__split_fields) and
                                       (exists the_file1:(int,character) farray.
                                       ((the_file1 = the_file) and
                                       (exists cur_position4:int.
                                       ((cur_position4 = cur_position2) and
                                       (exists item4:(int,character) farray.
                                       ((item4 = item2) and
                                       (exists last7:int.
                                       ((last7 = last5) and
                                       (exists textio__get_line__get_chunk__rest:int.
                                       ((((((forall idx:int.
                                            (((to_rep1(item__first) <= idx) and
                                            (idx <= last7)) ->
                                            (to_rep((item3[idx])) = to_rep((item4[idx]))))) and
                                       ((cur_position3 - cur_position4) = (last6 - last7))) and
                                       (forall idx:int.
                                       ((((last7 + 1) <= idx) and
                                       (idx <= last6)) ->
                                       (to_rep((item3[idx])) = to_rep((the_file[(((idx - last7) - 1) + cur_position4)])))))) and
                                       (if (n2 = 1) then ((last6 = last7) and
                                       (textio__get_line__get_chunk__rest = 1)) else (if (end_of_file({
                                       us_split_fields1 = file__split_fields1
                                       }, cur_position4,
                                       the_file1) = true) then ((last6 = last7) and
                                       (textio__get_line__get_chunk__rest = 0)) else (if ((no_char_in_slice(10,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file) = true) and
                                       (no_char_in_slice(eof_ch,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file) = true)) then (((last6 = ((last7 + n2) - 1)) and
                                       (forall idx:int. (((1 <= idx) and
                                       (idx <= (n2 - 1))) ->
                                       (to_rep((item3[(last7 + idx)])) = to_rep((the_file[((cur_position4 + idx) - 1)])))))) and
                                       (textio__get_line__get_chunk__rest = 1)) else (if (no_char_in_slice(eof_ch,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file) = true) then (((last6 = ((last7 + find_char_in_slice(10,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file)) - cur_position4)) and
                                       (forall idx:int.
                                       (((cur_position4 <= idx) and
                                       (idx <= (find_char_in_slice(10,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file) - 1))) ->
                                       (to_rep((item3[(((last7 + idx) - cur_position4) + 1)])) = to_rep((the_file[idx])))))) and
                                       (textio__get_line__get_chunk__rest = 0)) else (((last6 = ((last7 + find_char_in_slice(eof_ch,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file)) - cur_position4)) and
                                       (forall idx:int.
                                       (((cur_position4 <= idx) and
                                       (idx <= (find_char_in_slice(eof_ch,
                                       cur_position4,
                                       ((cur_position4 + n2) - 2),
                                       the_file) - 1))) ->
                                       (to_rep((item3[(((last7 + idx) - cur_position4) + 1)])) = to_rep((the_file[idx])))))) and
                                       (textio__get_line__get_chunk__rest = 0))))))) and
                                       ((dynamic_invariant1(textio__get_line__get_chunk__rest,
                                       true, true, true, true) and
                                       dynamic_invariant2(cur_position3,
                                       true, true, true, true)) and
                                       dynamic_invariant1(last6, true, true,
                                       true, true))) and
                                       (exists rest2:int.
                                       ((rest2 = textio__get_line__get_chunk__rest) and
                                       (in_range2(rest2) and (n3 = rest2)))))))))))))))))) else ((((item3 = item2) and
                                       (last6 = last5)) and
                                       (cur_position3 = cur_position2)) and
                                       (n3 = n2)))) and
                                       ((exists spark__branch3:bool.
                                        ((spark__branch3 = (if (n3 = 1) then true else false)) and
                                        ((spark__branch3 = true) and
                                        (((last6 + n3) = to_rep1(item__last)) and
                                        (exists cur_position4:int.
                                        ((cur_position4 = cur_position3) and
                                        (exists ch1:int.
                                        (((if (to_rep((the_file[cur_position4])) = eof_ch) then ((cur_position1 = cur_position4) and
                                        (ch1 = eof)) else (if (to_rep((the_file[cur_position4])) = 10) then ((cur_position1 = cur_position4) and
                                        (ch1 = 10)) else ((cur_position1 = (cur_position4 + 1)) and
                                        (ch1 = to_rep((the_file[cur_position4])))))) and
                                        (dynamic_invariant4(ch1, true, true,
                                        true, true) and
                                        dynamic_invariant2(cur_position1,
                                        true, true, true, true))) and
                                        (exists spark__branch4:bool.
                                        ((spark__branch4 = (if (ch1 = eof) then true else false)) and
                                        (if (spark__branch4 = true) then ((
                                        (exists o12:int.
                                        ((to_rep1(item__first) = o12) and
                                        (exists spark__branch5:bool.
                                        ((spark__branch5 = (if (last6 <  o12) then true else false)) and
                                        (not (spark__branch5 = true)))))) and
                                        (item = item3)) and
                                        (last3 = last6)) else (exists spark__branch5:bool.
                                                              ((spark__branch5 = (if (ch1 = 10) then false else true)) and
                                                              ((spark__branch5 = true) and
                                                              (let o12 =
                                                              (last6 + 1)
                                                              : int in
                                                              (in_range1(o12) and
                                                              ((last3 = o12) and
                                                              (in_range4(ch1) and
                                                              (exists o13:character.
                                                              ((to_rep(o13) = ch1) and
                                                              (((to_rep1(item__first) <= last3) and
                                                              (last3 <= to_rep1(item__last))) and
                                                              (item = (item3[last3 <- o13]))))))))))))))))))))))) or
                                       (((exists spark__branch3:bool.
                                         ((spark__branch3 = (if (n3 = 1) then true else false)) and
                                         (if (spark__branch3 = true) then (((last6 + n3) = to_rep1(item__last)) and
                                         (exists cur_position4:int.
                                         ((cur_position4 = cur_position3) and
                                         (exists ch1:int.
                                         (((if (to_rep((the_file[cur_position4])) = eof_ch) then ((cur_position1 = cur_position4) and
                                         (ch1 = eof)) else (if (to_rep((the_file[cur_position4])) = 10) then ((cur_position1 = cur_position4) and
                                         (ch1 = 10)) else ((cur_position1 = (cur_position4 + 1)) and
                                         (ch1 = to_rep((the_file[cur_position4])))))) and
                                         (dynamic_invariant4(ch1, true, true,
                                         true, true) and
                                         dynamic_invariant2(cur_position1,
                                         true, true, true, true))) and
                                         (exists spark__branch4:bool.
                                         ((spark__branch4 = (if (ch1 = eof) then true else false)) and
                                         ((not (spark__branch4 = true)) and
                                         (exists spark__branch5:bool.
                                         ((spark__branch5 = (if (ch1 = 10) then false else true)) and
                                         (not (spark__branch5 = true)))))))))))) else (cur_position1 = cur_position3)))) and
                                       (item = item3)) and
                                       (last3 = last6)))))))))))))))))))))))))))))))))))))))))))))))))))))) ->
  (((usf = true) -> (last3 = (to_rep1(item__first) - 1))) ->
  ((not (usf = true)) ->
  (forall o:int. ((to_rep1(item__last) = o) ->
  (forall o1:int. ((to_rep1(item__first) = o1) ->
  (forall o2:int. ((to_rep1(item__first) = o2) ->
  ((orb((if (last3 = (o2 - 1)) then true else false),
  andb((if (o1 <= last3) then true else false),
  (if (last3 <= o) then true else false))) = true) ->
  (forall usf1:int.
  (forall o3:int. ((to_rep1(item__first) = o3) ->
  ((andb((if (o3 <= usf1) then true else false),
  (if (usf1 <= last3) then true else false)) = true) ->
  (forall o4:int. ((to_rep1(item__first) = o4) -> (let temp___378 =
  ((usf1 - o4) + temp___old_377) : int in (((1 <= temp___378) and
  (temp___378 <= 2147483647)) ->
  (forall o5:int. ((to_rep((the_file[temp___378])) = o5) ->
  (to_rep1(item__first) <= usf1)))))))))))))))))))))))))))))))))))
