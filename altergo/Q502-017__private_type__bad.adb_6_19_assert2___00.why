(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p1__t1__d : bool
}

function us_split_discrs_rec__p1__t1__d__projection(a: us_split_discrs) : bool =
  (a).rec__p1__t1__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p1__t1 : us_main_type
}

function us_split_fields_rec__p1__t1__projection(a: us_split_fields) : us_main_type =
  (a).rec__p1__t1

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__p1__t1__d) = to_int(((b).us_split_discrs1).rec__p1__t1__d)) and
  (us_main_eq(((a).us_split_fields1).rec__p1__t1,
  ((b).us_split_fields1).rec__p1__t1) = true)) then true else false)

predicate in_range1(rec__p1__t1__d1: bool, a: us_split_discrs) =
  (rec__p1__t1__d1 = (a).rec__p1__t1__d)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p1__t1__d__first__bit : int

logic p1__t1__d__last__bit : int

logic p1__t1__d__position : int

axiom p1__t1__d__first__bit_axiom : (0 <= p1__t1__d__first__bit)

axiom p1__t1__d__last__bit_axiom :
  (p1__t1__d__first__bit <  p1__t1__d__last__bit)

axiom p1__t1__d__position_axiom : (0 <= p1__t1__d__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type t1__ref = { t1__content : us_rep
}

function t1__ref_t1__content__projection(a: t1__ref) : us_rep =
  (a).t1__content

logic x : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = { rec__p2__t2__d : bool
}

function us_split_discrs_rec__p2__t2__d__projection(a: us_split_discrs2) : bool =
  (a).rec__p2__t2__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__p2__t2 : us_main_type1
}

function us_split_fields_rec__p2__t2__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__p2__t2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_int(((a).us_split_discrs3).rec__p2__t2__d) = to_int(((b).us_split_discrs3).rec__p2__t2__d)) and
  (us_main_eq1(((a).us_split_fields3).rec__p2__t2,
  ((b).us_split_fields3).rec__p2__t2) = true)) then true else false)

predicate in_range2(rec__p2__t2__d1: bool, a: us_split_discrs2) =
  (rec__p2__t2__d1 = (a).rec__p2__t2__d)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p2__t2__d__first__bit : int

logic p2__t2__d__last__bit : int

logic p2__t2__d__position : int

axiom p2__t2__d__first__bit_axiom : (0 <= p2__t2__d__first__bit)

axiom p2__t2__d__last__bit_axiom :
  (p2__t2__d__first__bit <  p2__t2__d__last__bit)

axiom p2__t2__d__position_axiom : (0 <= p2__t2__d__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type t2__ref = { t2__content : us_rep1
}

function t2__ref_t2__content__projection(a: t2__ref) : us_rep1 =
  (a).t2__content

logic y : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

logic always_true : us_rep, us_rep -> bool

logic always_true__function_guard : bool, us_rep, us_rep -> prop

axiom always_true__post_axiom :
  (forall x1:us_rep. forall y1:us_rep [always_true(x1, y1)]. (always_true(x1,
  y1) = true))

axiom always_true__post_axiom1 :
  (forall x1:us_rep. forall y1:us_rep [always_true(x1, y1)].
  (((((x1).us_split_discrs1).rec__p1__t1__d = true) <->
  (((y1).us_split_discrs1).rec__p1__t1__d = true)) -> (bool_eq1(x1,
  y1) = true)))

logic always_true1 : us_rep1, us_rep1 -> bool

logic always_true__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom always_true__post_axiom2 :
  (forall x1:us_rep1. forall y1:us_rep1 [always_true1(x1, y1)].
  (always_true1(x1, y1) = true))

axiom always_true__post_axiom3 :
  (forall x1:us_rep1. forall y1:us_rep1 [always_true1(x1, y1)].
  (not (bool_eq2(x1, y1) = true)))

 (* File "bad.adb", line 3, characters 0-0 *)
goal defqtvc : ((always_true(x, x) = true) -> (always_true1(y, y) = true))
