(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type my_int

logic my_intqtint : my_int -> int

axiom my_intqtaxiom : (forall i:my_int. (0 <= my_intqtint(i)))

axiom my_intqtaxiom1 : (forall i:my_int. (my_intqtint(i) <= 7))

predicate in_range(x: int) = ((0 <= x) and (x <= 7))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : my_int, my_int -> bool

logic dummy : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref_my_int__content__projection(a: my_int__ref) : my_int =
  (a).my_int__content

function to_rep(x: my_int) : int = my_intqtint(x)

logic of_rep : int -> my_int

axiom inversion_axiom :
  (forall x:my_int [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_int [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test_equal__my_int_mod__content : my_int
}

function us_split_fields_rec__test_equal__my_int_mod__content__projection(a: us_split_fields) : my_int =
  (a).rec__test_equal__my_int_mod__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__test_equal__my_int_mod__content) = to_rep(((b).us_split_fields1).rec__test_equal__my_int_mod__content)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_equal__my_int_mod__content__first__bit : int

logic test_equal__my_int_mod__content__last__bit : int

logic test_equal__my_int_mod__content__position : int

axiom test_equal__my_int_mod__content__first__bit_axiom :
  (0 <= test_equal__my_int_mod__content__first__bit)

axiom test_equal__my_int_mod__content__last__bit_axiom :
  (test_equal__my_int_mod__content__first__bit <  test_equal__my_int_mod__content__last__bit)

axiom test_equal__my_int_mod__content__position_axiom :
  (0 <= test_equal__my_int_mod__content__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type my_int_mod__ref = { my_int_mod__content : us_rep
}

function my_int_mod__ref_my_int_mod__content__projection(a: my_int_mod__ref) : us_rep =
  (a).my_int_mod__content

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom oeq__def_axiom :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)]. ((oeq(x, y) = true) ->
  ((to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content) = to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content)) or
  (if (to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content) <  to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content)) then ((to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content) - to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content)) = 4) else ((to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content) - to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content)) = 4)))))

axiom oeq__def_axiom1 :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)].
  (((to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content) = to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content)) or
  (if (to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content) <  to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content)) then ((to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content) - to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content)) = 4) else ((to_rep(((x).us_split_fields1).rec__test_equal__my_int_mod__content) - to_rep(((y).us_split_fields1).rec__test_equal__my_int_mod__content)) = 4))) ->
  (oeq(x, y) = true)))

logic content_x : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic content_y : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields2 = { rec__test_equal__my_rec__content : us_rep
}

function us_split_fields_rec__test_equal__my_rec__content__projection(a: us_split_fields2) : us_rep =
  (a).rec__test_equal__my_rec__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (user_eq1(((a).us_split_fields3).rec__test_equal__my_rec__content,
  ((b).us_split_fields3).rec__test_equal__my_rec__content) = true) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic test_equal__my_rec__content__first__bit : int

logic test_equal__my_rec__content__last__bit : int

logic test_equal__my_rec__content__position : int

axiom test_equal__my_rec__content__first__bit_axiom :
  (0 <= test_equal__my_rec__content__first__bit)

axiom test_equal__my_rec__content__last__bit_axiom :
  (test_equal__my_rec__content__first__bit <  test_equal__my_rec__content__last__bit)

axiom test_equal__my_rec__content__position_axiom :
  (0 <= test_equal__my_rec__content__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type my_rec__ref = { my_rec__content : us_rep1
}

function my_rec__ref_my_rec__content__projection(a: my_rec__ref) : us_rep1 =
  (a).my_rec__content

logic x : us_rep1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic y : us_rep1

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  (0 <= 7)) -> in_range(temp___expr_180))

logic rliteral : my_int

axiom rliteral_axiom : (my_intqtint(rliteral) = 1)

axiom content_x__def_axiom : (content_x = { us_split_fields1 = {
  rec__test_equal__my_int_mod__content = rliteral } })

logic rliteral1 : my_int

axiom rliteral_axiom1 : (my_intqtint(rliteral1) = 5)

axiom content_y__def_axiom : (content_y = { us_split_fields1 = {
  rec__test_equal__my_int_mod__content = rliteral1 } })

axiom x__def_axiom : (x = { us_split_fields3 = {
  rec__test_equal__my_rec__content = content_x } })

axiom y__def_axiom : (y = { us_split_fields3 = {
  rec__test_equal__my_rec__content = content_y } })

 (* File "test_equal.adb", line 1, characters 0-0 *)
goal defqtvc : (({ us_split_fields1 = {
  rec__test_equal__my_int_mod__content = rliteral } } = content_x) -> (({
  us_split_fields1 = { rec__test_equal__my_int_mod__content = rliteral1 }
  } = content_y) -> (({ us_split_fields3 = {
  rec__test_equal__my_rec__content = content_x } } = x) -> (({
  us_split_fields3 = { rec__test_equal__my_rec__content = content_y }
  } = y) -> (oeq__function_guard(oeq(content_x, content_y), content_x,
  content_y) -> (oeq(content_x, content_y) = true))))))
