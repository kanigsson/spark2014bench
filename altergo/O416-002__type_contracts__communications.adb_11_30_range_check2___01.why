(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep2 : character -> int

logic of_rep2 : int -> character

axiom inversion_axiom2 :
  (forall x:character [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:character [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep2((a[temp___idx_91])) = to_rep2((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep2((a[temp___idx_91])) = to_rep2((b[((b__first - a__first) + temp___idx_91)]))))))))

logic dummy3 : (int,character) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq3 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__messages__message__sent :
(int,character) farray; rec__messages__message__received :
(int,character) farray
}

function us_split_fields_rec__messages__message__sent__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__messages__message__sent

function us_split_fields_rec__messages__message__received__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__messages__message__received

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq4(((a).us_split_fields1).rec__messages__message__sent, 1, 10,
  ((b).us_split_fields1).rec__messages__message__sent, 1, 10) = true) and
  (bool_eq4(((a).us_split_fields1).rec__messages__message__received, 1, 10,
  ((b).us_split_fields1).rec__messages__message__received, 1,
  10) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic messages__message__sent__first__bit : int

logic messages__message__sent__last__bit : int

logic messages__message__sent__position : int

axiom messages__message__sent__first__bit_axiom :
  (0 <= messages__message__sent__first__bit)

axiom messages__message__sent__last__bit_axiom :
  (messages__message__sent__first__bit <  messages__message__sent__last__bit)

axiom messages__message__sent__position_axiom :
  (0 <= messages__message__sent__position)

logic messages__message__received__first__bit : int

logic messages__message__received__last__bit : int

logic messages__message__received__position : int

axiom messages__message__received__first__bit_axiom :
  (0 <= messages__message__received__first__bit)

axiom messages__message__received__last__bit_axiom :
  (messages__message__received__first__bit <  messages__message__received__last__bit)

axiom messages__message__received__position_axiom :
  (0 <= messages__message__received__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type message__ref = { message__content : us_rep
}

function message__ref_message__content__projection(a: message__ref) : us_rep =
  (a).message__content

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range(low) and in_range(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type message_arr__ref = { message_arr__content : us_t
}

function message_arr__ref_message_arr__content__projection(a: message_arr__ref) : us_t =
  (a).message_arr__content

logic a : us_t

logic attr__ATTRIBUTE_ADDRESS : int

type t4s__ref = { t4s__content : us_t
}

function t4s__ref_t4s__content__projection(a1: t4s__ref) : us_t =
  (a1).t4s__content

type us_split_discrs = { rec__communications__communication__num : positive
}

function us_split_discrs_rec__communications__communication__num__projection(a1: us_split_discrs) : positive =
  (a1).rec__communications__communication__num

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a1: us_split_discrs__ref) : us_split_discrs =
  (a1).us_split_discrs__content

type us_split_fields2 = { rec__communications__communication__msgs : us_t
}

function us_split_fields_rec__communications__communication__msgs__projection(a1: us_split_fields2) : us_t =
  (a1).rec__communications__communication__msgs

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a1: us_split_fields__ref1) : us_split_fields2 =
  (a1).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a1: us_rep1) : us_split_discrs =
  (a1).us_split_discrs1

function us_rep___split_fields__2__projection(a1: us_rep1) : us_split_fields2 =
  (a1).us_split_fields3

function bool_eq8(a1: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a1).us_split_discrs1).rec__communications__communication__num) = to_rep(((b).us_split_discrs1).rec__communications__communication__num)) and
  (bool_eq7(((a1).us_split_fields3).rec__communications__communication__msgs,
  ((b).us_split_fields3).rec__communications__communication__msgs) = true)) then true else false)

predicate in_range3(rec__communications__communication__num1: int,
  a1: us_split_discrs) =
  (rec__communications__communication__num1 = to_rep((a1).rec__communications__communication__num))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic communications__communication__num__first__bit : int

logic communications__communication__num__last__bit : int

logic communications__communication__num__position : int

axiom communications__communication__num__first__bit_axiom :
  (0 <= communications__communication__num__first__bit)

axiom communications__communication__num__last__bit_axiom :
  (communications__communication__num__first__bit <  communications__communication__num__last__bit)

axiom communications__communication__num__position_axiom :
  (0 <= communications__communication__num__position)

logic communications__communication__msgs__first__bit : int

logic communications__communication__msgs__last__bit : int

logic communications__communication__msgs__position : int

axiom communications__communication__msgs__first__bit_axiom :
  (0 <= communications__communication__msgs__first__bit)

axiom communications__communication__msgs__last__bit_axiom :
  (communications__communication__msgs__first__bit <  communications__communication__msgs__last__bit)

axiom communications__communication__msgs__position_axiom :
  (0 <= communications__communication__msgs__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type communication__ref = { communication__content : us_rep1
}

function communication__ref_communication__content__projection(a1: communication__ref) : us_rep1 =
  (a1).communication__content

logic compare : (int,character) farray, int, int, (int,character) farray,
  int, int -> int

axiom compare_def_eq :
  (forall a1:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b, b_first, b_last)].
  ((compare(a1, a_first, a_last, b, b_first, b_last) = 0) -> (bool_eq4(a1,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_eq1 :
  (forall a1:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b, b_first, b_last)].
  ((bool_eq4(a1, a_first, a_last, b, b_first, b_last) = true) -> (compare(a1,
  a_first, a_last, b, b_first, b_last) = 0))))

axiom compare_def_lt :
  (forall a1:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b, b_first, b_last)].
  ((compare(a1, a_first, a_last, b, b_first, b_last) <  0) ->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq4(a1, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and (to_rep2((a1[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))))))

axiom compare_def_lt1 :
  (forall a1:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b, b_first, b_last)].
  ((exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
   ((bool_eq4(a1, a_first, i, b, b_first, j) = true) and ((i = a_last) or
   ((i <  a_last) and (to_rep2((a1[(i + 1)])) <  to_rep2((b[(j + 1)]))))))))) ->
  (compare(a1, a_first, a_last, b, b_first, b_last) <  0))))

axiom compare_def_gt :
  (forall a1:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a1, a_first, a_last, b, b_first, b_last)) ->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq4(a1, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a1[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a1:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a1, a_first, a_last, b, b_first, b_last)].
  ((exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
   ((bool_eq4(a1, a_first, j, b, b_first, i) = true) and ((i = b_last) or
   ((i <  b_last) and (to_rep2((b[(i + 1)])) <  to_rep2((a1[(j + 1)]))))))))) ->
  (0 <  compare(a1, a_first, a_last, b, b_first, b_last)))))

type tdayP1

logic tdayP1qtint : tdayP1 -> int

axiom tdayP1qtaxiom : (forall i:tdayP1. (1 <= tdayP1qtint(i)))

axiom tdayP1qtaxiom1 : (forall i:tdayP1. (tdayP1qtint(i) <= 10))

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq7 : tdayP1, tdayP1 -> bool

logic dummy7 : tdayP1

type tdayP1__ref = { tdayP1__content : tdayP1
}

function tdayP1__ref_tdayP1__content__projection(a1: tdayP1__ref) : tdayP1 =
  (a1).tdayP1__content

predicate dynamic_invariant(temp___expr_214: us_rep1,
  temp___is_init_210: bool, temp___skip_constant_211: bool,
  temp___do_toplevel_212: bool, temp___do_typ_inv_213: bool) =
  (let temp___215 =
  ((temp___expr_214).us_split_discrs1).rec__communications__communication__num
  : positive in ((dynamic_property(1, to_rep(temp___215),
  first1(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs),
  last1(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs)) and
  ((first1(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs) = 1) and
  (last1(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs) = to_rep(temp___215)))) and
  (forall temp___216:int.
  (((first1(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs) <= temp___216) and
  (temp___216 <= last1(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs))) ->
  ((temp___is_init_210 = true) -> (let temp___217 =
  (to_array(((temp___expr_214).us_split_fields3).rec__communications__communication__msgs)[temp___216])
  : us_rep in
  (compare(((temp___217).us_split_fields1).rec__messages__message__sent, 1,
  10, ((temp___217).us_split_fields1).rec__messages__message__received, 1,
  10) <= 0)))))))

predicate type_invariant(temp___224: us_rep1) =
  (forall idx:int. (((1 <= idx) and
  (idx <= (to_rep(((temp___224).us_split_discrs1).rec__communications__communication__num) - 1))) ->
  (compare((((to_array(((temp___224).us_split_fields3).rec__communications__communication__msgs)[idx])).us_split_fields1).rec__messages__message__received,
  1, 10,
  (((to_array(((temp___224).us_split_fields3).rec__communications__communication__msgs)[(idx + 1)])).us_split_fields1).rec__messages__message__received,
  1, 10) <= 0)))

logic i1s : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type t8b__ref = { t8b__content : us_t
}

function t8b__ref_t8b__content__projection(a1: t8b__ref) : us_t =
  (a1).t8b__content

type us_split_fields4 = { rec__communications__communication__msgs1 : us_t
}

function us_split_fields_rec__communications__communication__msgs__2__projection(a1: us_split_fields4) : us_t =
  (a1).rec__communications__communication__msgs1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a1: us_split_fields__ref2) : us_split_fields4 =
  (a1).us_split_fields__content2

type us_rep2 = { us_split_discrs2 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__2__projection(a1: us_rep2) : us_split_discrs =
  (a1).us_split_discrs2

function us_rep___split_fields__3__projection(a1: us_rep2) : us_split_fields4 =
  (a1).us_split_fields5

function to_base(a1: us_rep2) : us_rep1 = { us_split_discrs1 =
  (a1).us_split_discrs2; us_split_fields3 = {
  rec__communications__communication__msgs =
  of_array(to_array(((a1).us_split_fields5).rec__communications__communication__msgs1),
  first1(((a1).us_split_fields5).rec__communications__communication__msgs1),
  last1(((a1).us_split_fields5).rec__communications__communication__msgs1)) }
  }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__communications__communication__msgs1 =
  of_array(to_array(((r).us_split_fields3).rec__communications__communication__msgs),
  first1(((r).us_split_fields3).rec__communications__communication__msgs),
  last1(((r).us_split_fields3).rec__communications__communication__msgs)) } }

function bool_eq10(a1: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a1).us_split_discrs2).rec__communications__communication__num) = to_rep(((b).us_split_discrs2).rec__communications__communication__num)) and
  (bool_eq7(((a1).us_split_fields5).rec__communications__communication__msgs1,
  ((b).us_split_fields5).rec__communications__communication__msgs1) = true)) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic communications__communication__num__first__bit1 : int

logic communications__communication__num__last__bit1 : int

logic communications__communication__num__position1 : int

axiom communications__communication__num__first__bit_axiom1 :
  (0 <= communications__communication__num__first__bit1)

axiom communications__communication__num__last__bit_axiom1 :
  (communications__communication__num__first__bit1 <  communications__communication__num__last__bit1)

axiom communications__communication__num__position_axiom1 :
  (0 <= communications__communication__num__position1)

logic communications__communication__msgs__first__bit1 : int

logic communications__communication__msgs__last__bit1 : int

logic communications__communication__msgs__position1 : int

axiom communications__communication__msgs__first__bit_axiom1 :
  (0 <= communications__communication__msgs__first__bit1)

axiom communications__communication__msgs__last__bit_axiom1 :
  (communications__communication__msgs__first__bit1 <  communications__communication__msgs__last__bit1)

axiom communications__communication__msgs__position_axiom1 :
  (0 <= communications__communication__msgs__position1)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type tcomsS__ref = { tcomsS__content : us_rep2
}

function tcomsS__ref_tcomsS__content__projection(a1: tcomsS__ref) : us_rep2 =
  (a1).tcomsS__content

logic coms__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_308: us_rep2,
  temp___is_init_304: bool, temp___skip_constant_305: bool,
  temp___do_toplevel_306: bool, temp___do_typ_inv_307: bool) =
  (((not (temp___skip_constant_305 = true)) -> in_range3(length1(a),
  (to_base(temp___expr_308)).us_split_discrs1)) and ((dynamic_property(1,
  length1(a),
  first1(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1),
  last1(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1)) and
  ((first1(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1) = 1) and
  (last1(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1) = length1(a)))) and
  (forall temp___310:int.
  (((first1(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1) <= temp___310) and
  (temp___310 <= last1(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1))) ->
  ((temp___is_init_304 = true) -> (let temp___311 =
  (to_array(((temp___expr_308).us_split_fields5).rec__communications__communication__msgs1)[temp___310])
  : us_rep in
  (compare(((temp___311).us_split_fields1).rec__messages__message__sent, 1,
  10, ((temp___311).us_split_fields1).rec__messages__message__received, 1,
  10) <= 0)))))))

predicate default_initial_assumption(temp___expr_318: us_rep2,
  temp___skip_top_level_319: bool) =
  ((to_rep(((temp___expr_318).us_split_discrs2).rec__communications__communication__num) = length1(a)) and
  ((first1(((temp___expr_318).us_split_fields5).rec__communications__communication__msgs1) = 1) and
  (last1(((temp___expr_318).us_split_fields5).rec__communications__communication__msgs1) = length1(a))))

predicate dynamic_invariant2(temp___expr_175: us_rep,
  temp___is_init_171: bool, temp___skip_constant_172: bool,
  temp___do_toplevel_173: bool, temp___do_typ_inv_174: bool) =
  ((temp___do_toplevel_173 = true) -> ((temp___is_init_171 = true) ->
  (compare(((temp___expr_175).us_split_fields1).rec__messages__message__sent,
  1, 10,
  ((temp___expr_175).us_split_fields1).rec__messages__message__received, 1,
  10) <= 0)))

predicate dynamic_predicate(temp___191: us_rep) =
  (compare(((temp___191).us_split_fields1).rec__messages__message__sent, 1,
  10, ((temp___191).us_split_fields1).rec__messages__message__received, 1,
  10) <= 0)

predicate dynamic_invariant3(temp___expr_201: us_t, temp___is_init_197: bool,
  temp___skip_constant_198: bool, temp___do_toplevel_199: bool,
  temp___do_typ_inv_200: bool) = (((not (temp___skip_constant_198 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_201),
  last1(temp___expr_201))) and
  (forall temp___202:int. (((first1(temp___expr_201) <= temp___202) and
  (temp___202 <= last1(temp___expr_201))) -> ((temp___is_init_197 = true) ->
  (let temp___203 = (to_array(temp___expr_201)[temp___202]) : us_rep in
  (compare(((temp___203).us_split_fields1).rec__messages__message__sent, 1,
  10, ((temp___203).us_split_fields1).rec__messages__message__received, 1,
  10) <= 0))))))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant6(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

 (* File "communications.ads", line 10, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(i1s, true, false, true, true) ->
  (dynamic_invariant2(i1s, true, false, true, true) -> (dynamic_invariant3(a,
  true, false, true, true) -> (let o = length1(a) : int in (in_range(o) ->
  (in_range1(o) -> in_range(length1(a))))))))
