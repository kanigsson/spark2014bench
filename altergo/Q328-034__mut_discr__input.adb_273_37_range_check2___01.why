(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))))))

axiom concat_def1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((a_last <  i) -> ((concat(a, a_first, a_last, b, b_first,
  b_last)[i]) = (b[((i - a_last) + (b_first - 1))]))))))

logic concat_singleton_left : character, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_singleton_left_def :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  ((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a))))

axiom concat_singleton_left_def1 :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))])))))))

logic concat_singleton_right : (int,character) farray, int, int,
  character -> (int,character) farray

axiom concat_singleton_right_def :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. ((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b))))

axiom concat_singleton_right_def1 :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)].
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i])))))))

logic concat_singletons : character, int, character -> (int,character) farray

axiom concat_singletons_def :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  ((concat_singletons(a, a_first, b)[a_first]) = a)))

axiom concat_singletons_def1 :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b)))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic v__first : integer

logic v__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type tfirst_charS

logic tfirst_charSqtint : tfirst_charS -> int

axiom tfirst_charSqtaxiom :
  (forall i:tfirst_charS. (1 <= tfirst_charSqtint(i)))

axiom tfirst_charSqtaxiom1 :
  (forall i:tfirst_charS. (tfirst_charSqtint(i) <= 1025))

predicate in_range5(x: int) = ((1 <= x) and (x <= 1025))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : tfirst_charS, tfirst_charS -> bool

logic dummy5 : tfirst_charS

type tfirst_charS__ref = { tfirst_charS__content : tfirst_charS
}

function tfirst_charS__ref_tfirst_charS__content__projection(a: tfirst_charS__ref) : tfirst_charS =
  (a).tfirst_charS__content

predicate dynamic_invariant3(temp___expr_207: int, temp___is_init_203: bool,
  temp___skip_constant_204: bool, temp___do_toplevel_205: bool,
  temp___do_typ_inv_206: bool) = (((temp___is_init_203 = true) or
  (1 <= 1025)) -> in_range5(temp___expr_207))

type tlast_charS

logic tlast_charSqtint : tlast_charS -> int

axiom tlast_charSqtaxiom : (forall i:tlast_charS. (0 <= tlast_charSqtint(i)))

axiom tlast_charSqtaxiom1 :
  (forall i:tlast_charS. (tlast_charSqtint(i) <= 1024))

predicate in_range6(x: int) = ((0 <= x) and (x <= 1024))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tlast_charS, tlast_charS -> bool

logic dummy6 : tlast_charS

type tlast_charS__ref = { tlast_charS__content : tlast_charS
}

function tlast_charS__ref_tlast_charS__content__projection(a: tlast_charS__ref) : tlast_charS =
  (a).tlast_charS__content

predicate dynamic_invariant4(temp___expr_214: int, temp___is_init_210: bool,
  temp___skip_constant_211: bool, temp___do_toplevel_212: bool,
  temp___do_typ_inv_213: bool) = (((temp___is_init_210 = true) or
  (0 <= 1024)) -> in_range6(temp___expr_214))

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r32b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r33b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic s__first : integer

logic s__last : integer

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic to_upper : int -> int

logic to_upper__function_guard : int, int -> prop

axiom to_upper__post_axiom :
  (forall item:int [to_upper(item)]. (dynamic_invariant2(item, true, true,
  true, true) -> dynamic_invariant2(to_upper(item), true, false, true,
  true)))

type printable_character

predicate in_range7(x: int) = ((33 <= x) and (x <= 126))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : printable_character, printable_character -> bool

logic dummy7 : printable_character

type printable_character__ref = { printable_character__content :
printable_character
}

function printable_character__ref_printable_character__content__projection(a: printable_character__ref) : printable_character =
  (a).printable_character__content

type tTlineSP1

logic tTlineSP1qtint : tTlineSP1 -> int

axiom tTlineSP1qtaxiom : (forall i:tTlineSP1. (1 <= tTlineSP1qtint(i)))

axiom tTlineSP1qtaxiom1 : (forall i:tTlineSP1. (tTlineSP1qtint(i) <= 1024))

predicate in_range8(x: int) = ((1 <= x) and (x <= 1024))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : tTlineSP1, tTlineSP1 -> bool

logic dummy8 : tTlineSP1

type tTlineSP1__ref = { tTlineSP1__content : tTlineSP1
}

function tTlineSP1__ref_tTlineSP1__content__projection(a: tTlineSP1__ref) : tTlineSP1 =
  (a).tTlineSP1__content

type t35b__ref = { t35b__content : us_t
}

function t35b__ref_t35b__content__projection(a: t35b__ref) : us_t =
  (a).t35b__content

type t38b__ref = { t38b__content : us_t
}

function t38b__ref_t38b__content__projection(a: t38b__ref) : us_t =
  (a).t38b__content

logic temp_____aggregate_def_251 : int, int, int -> us_t

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant6(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant7(temp___expr_190: int, temp___is_init_186: bool,
  temp___skip_constant_187: bool, temp___do_toplevel_188: bool,
  temp___do_typ_inv_189: bool) = (((temp___is_init_186 = true) or
  (33 <= 126)) -> in_range7(temp___expr_190))

axiom def_axiom :
  (forall temp___253:int. forall temp___254:int. forall temp___255:int.
  (dynamic_invariant2(temp___253, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___254, temp___255) ->
  (first1(temp_____aggregate_def_251(temp___253, temp___254,
  temp___255)) = temp___254))))

axiom def_axiom1 :
  (forall temp___253:int. forall temp___254:int. forall temp___255:int.
  (dynamic_invariant2(temp___253, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___254, temp___255) ->
  (last1(temp_____aggregate_def_251(temp___253, temp___254,
  temp___255)) = temp___255))))

axiom def_axiom2 :
  (forall temp___253:int. forall temp___254:int. forall temp___255:int.
  (dynamic_invariant2(temp___253, true, true, true, true) ->
  (forall temp___256:int.
  (to_rep((to_array(temp_____aggregate_def_251(temp___253, temp___254,
  temp___255))[temp___256])) = temp___253))))

 (* File "input.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall size:int. forall line:(int,character) farray.
  forall first_char:int. forall last_char:int. forall line_num:int.
  forall start:int. forall current_char:int. (dynamic_invariant3(first_char,
  true, false, true, true) -> (dynamic_invariant4(last_char, true, false,
  true, true) -> (dynamic_invariant1(line_num, true, false, true, true) ->
  (dynamic_property(1, 2147483647, to_rep1(v__first), to_rep1(v__last)) ->
  (dynamic_invariant(size, false, false, true, true) ->
  ((1024 <= length(to_rep1(v__first), to_rep1(v__last))) ->
  (dynamic_invariant1(start, false, false, true, true) ->
  (forall line1:(int,character) farray. forall first_char1:int.
  ((dynamic_invariant2(current_char, false, false, true, true) and
  (exists first_char2:int.
  ((if (first_char <= 1024) then (exists first_char3:int.
                                 exists last_char1:int. exists line_num1:int.
                                 exists current_char1:int.
                                 ((andb((if (((dynamic_invariant3(first_char3,
                                 true, true, true, true) and
                                 dynamic_invariant2(current_char1, false,
                                 true, true, true)) and
                                 dynamic_invariant4(last_char1, true, true,
                                 true, true)) and
                                 dynamic_invariant1(line_num1, true, true,
                                 true, true)) then true else false),
                                 (if (first_char3 <= 1024) then true else false)) = true) and
                                 (exists last_char2:int.
                                 exists line_num2:int.
                                 exists current_char2:int.
                                 ((((dynamic_invariant2(current_char2, true,
                                 true, true, true) and
                                 dynamic_invariant3(first_char2, true, true,
                                 true, true)) and
                                 dynamic_invariant4(last_char2, true, true,
                                 true, true)) and
                                 dynamic_invariant1(line_num2, true, true,
                                 true, true)) and
                                 (in_range7(current_char2) or
                                 (not (first_char2 <= 1024))))))) else ((line1 = line) and
  (first_char2 = first_char))) and
  (exists spark__branch:bool.
  ((spark__branch = (if (1 <= (first_char2 - 1)) then true else false)) and
  (if (spark__branch = true) then (let o = (first_char2 - 1) : int in
  (in_range5(o) and (first_char1 = o))) else (first_char1 = 1))))))) ->
  (forall start1:int. ((start1 = first_char1) ->
  (forall first_char2:int.
  ((exists o:bool. ((if (first_char1 <= 1024) then (((1 <= first_char1) and
   (first_char1 <= 1024)) and
   (exists temp___244:int. ((to_rep((line1[first_char1])) = temp___244) and
   (o = (if in_range7(temp___244) then true else false))))) else (o = false)) and
   (if (o = true) then (exists first_char3:int.
                       ((andb((if dynamic_invariant3(first_char3, true, true,
                       true, true) then true else false),
                       (if ((first_char3 <= 1024) and
                       in_range7(to_rep((line1[first_char3])))) then true else false)) = true) and
                       (let o1 = (first_char3 + 1) : int in
                       (in_range5(o1) and ((first_char2 = o1) and
                       (exists o2:bool.
                       ((if (first_char2 <= 1024) then (((1 <= first_char2) and
                       (first_char2 <= 1024)) and
                       (exists temp___244:int.
                       ((to_rep((line1[first_char2])) = temp___244) and
                       (o2 = (if in_range7(temp___244) then true else false))))) else (o2 = false)) and
                       (not (o2 = true))))))))) else (first_char2 = first_char1)))) ->
  ((start1 = r32b) -> (dynamic_invariant1(r32b, true, false, true, true) ->
  (((first_char2 - 1) = r33b) -> (dynamic_invariant(r33b, true, false, true,
  true) -> (((r32b <= r33b) -> (((1 <= r32b) and (r32b <= 1024)) and
  ((1 <= r33b) and (r33b <= 1024)))) -> (let temp___261 = of_array(line1,
  r32b, r33b) : us_t in (let input__next_word__B_5__s__assume =
  of_array(to_array(temp___261), first1(temp___261), last1(temp___261))
  : us_t in
  (forall s:(int,character) farray.
  ((s = to_array(input__next_word__B_5__s__assume)) ->
  ((to_rep1(s__first) = first1(input__next_word__B_5__s__assume)) ->
  ((to_rep1(s__last) = last1(input__next_word__B_5__s__assume)) ->
  (dynamic_property(1, 2147483647, to_rep1(s__first), to_rep1(s__last)) ->
  (forall temp___246:int. ((to_rep1(s__first) = temp___246) ->
  (forall temp___247:int. ((to_rep1(s__last) = temp___247) ->
  (forall i:int. ((i = temp___246) ->
  (forall s1:(int,character) farray.
  ((if (andb((if (temp___246 <= i) then true else false),
  (if (i <= temp___247) then true else false)) = true) then (exists s2:(int,character) farray.
                                                            exists i1:int.
                                                            ((andb((if 
                                                            (forall temp___250:int.
                                                            (((to_rep1(s__first) <= temp___250) and
                                                            (temp___250 <= to_rep1(s__last))) ->
                                                            (((temp___247 <  temp___250) or
                                                            ((temp___250 <  temp___246) or
                                                            (i1 <= temp___250))) ->
                                                            ((s2[temp___250]) = (s[temp___250]))))) then true else false),
                                                            (if ((to_rep1(s__first) <= i1) and
                                                            (i1 <= to_rep1(s__last))) then true else false)) = true) and
                                                            (((to_rep1(s__first) <= i1) and
                                                            (i1 <= to_rep1(s__last))) and
                                                            (exists o:int.
                                                            ((to_rep((s2[i1])) = o) and
                                                            (let o1 =
                                                            to_upper(o)
                                                            : int in
                                                            (dynamic_invariant2(o1,
                                                            true, false,
                                                            true, true) and
                                                            (exists o2:character.
                                                            ((to_rep(o2) = o1) and
                                                            (((to_rep1(s__first) <= i1) and
                                                            (i1 <= to_rep1(s__last))) and
                                                            ((s1 = (s2[i1 <- o2])) and
                                                            (i1 = temp___247)))))))))))) else (s1 = s)) ->
  (forall o:int. ((to_rep1(s__last) = o) ->
  (forall o1:int. ((to_rep1(s__first) = o1) -> in_range1(length(o1, o))))))))))))))))))))))))))))))))))))))))
