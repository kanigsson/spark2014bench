(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 1000))

predicate in_range2(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : capacity_range, capacity_range -> bool

logic dummy1 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__amortized_queue__my_vectors__vector__capacity :
capacity_range
}

function us_split_discrs_rec__amortized_queue__my_vectors__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__amortized_queue__my_vectors__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__amortized_queue__my_vectors__vector :
us_main_type
}

function us_split_fields_rec__amortized_queue__my_vectors__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__amortized_queue__my_vectors__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity) = to_rep(((b).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__amortized_queue__my_vectors__vector,
  ((b).us_split_fields1).rec__amortized_queue__my_vectors__vector) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic amortized_queue__my_vectors__vector__capacity__first__bit : int

logic amortized_queue__my_vectors__vector__capacity__last__bit : int

logic amortized_queue__my_vectors__vector__capacity__position : int

axiom amortized_queue__my_vectors__vector__capacity__first__bit_axiom :
  (0 <= amortized_queue__my_vectors__vector__capacity__first__bit)

axiom amortized_queue__my_vectors__vector__capacity__last__bit_axiom :
  (amortized_queue__my_vectors__vector__capacity__first__bit <  amortized_queue__my_vectors__vector__capacity__last__bit)

axiom amortized_queue__my_vectors__vector__capacity__position_axiom :
  (0 <= amortized_queue__my_vectors__vector__capacity__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

function capacity(container: us_rep) : int =
  to_rep(((container).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate dynamic_invariant(temp___expr_255: int, temp___is_init_251: bool,
  temp___skip_constant_252: bool, temp___do_toplevel_253: bool,
  temp___do_typ_inv_254: bool) = (((temp___is_init_251 = true) or
  (0 <= 1000)) -> in_range2(temp___expr_255))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq4 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic bool_eq5 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq5(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq5(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic length2 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

function last(container: us_rep1) : int = (0 + length2(container))

logic last__function_guard : int, us_rep1 -> prop

logic get : us_rep1, int -> int

logic get__function_guard : int, us_rep1, int -> prop

function oeq1(left: us_rep1, right: us_rep1) : bool =
  andb(bool_eq5(length2(left), length2(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 1001))

predicate in_range3(x: int) = ((0 <= x) and (x <= 1001))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : extended_index, extended_index -> bool

logic dummy4 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_241: int, temp___is_init_237: bool,
  temp___skip_constant_238: bool, temp___do_toplevel_239: bool,
  temp___do_typ_inv_240: bool) = (((temp___is_init_237 = true) or
  (0 <= 1001)) -> in_range3(temp___expr_241))

function element(container: us_rep, index: int) : int = get(model(container),
  index)

logic element__function_guard : int, us_rep, int -> prop

logic first_index__function_guard : int, us_rep -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : element_type, element_type -> bool

logic dummy5 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant2(temp___expr_234: int, temp___is_init_230: bool,
  temp___skip_constant_231: bool, temp___do_toplevel_232: bool,
  temp___do_typ_inv_233: bool) = (((temp___is_init_230 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_234))

function olt(left: us_rep1, right: us_rep1) : bool =
  andb(bool_lt(length2(left), length2(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic olt__function_guard : bool, us_rep1, us_rep1 -> prop

predicate in_range5(rec__amortized_queue__my_vectors__vector__capacity1: int,
  a: us_rep) =
  (rec__amortized_queue__my_vectors__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic amortized_queue__my_vectors__vector__capacity__first__bit1 : int

logic amortized_queue__my_vectors__vector__capacity__last__bit1 : int

logic amortized_queue__my_vectors__vector__capacity__position1 : int

axiom amortized_queue__my_vectors__vector__capacity__first__bit_axiom1 :
  (0 <= amortized_queue__my_vectors__vector__capacity__first__bit1)

axiom amortized_queue__my_vectors__vector__capacity__last__bit_axiom1 :
  (amortized_queue__my_vectors__vector__capacity__first__bit1 <  amortized_queue__my_vectors__vector__capacity__last__bit1)

axiom amortized_queue__my_vectors__vector__capacity__position_axiom1 :
  (0 <= amortized_queue__my_vectors__vector__capacity__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type constrained_vector__ref = { constrained_vector__content : us_rep
}

function constrained_vector__ref_constrained_vector__content__projection(a: constrained_vector__ref) : us_rep =
  (a).constrained_vector__content

logic front__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq(a, b)))

predicate dynamic_invariant3(temp___expr_405: us_rep,
  temp___is_init_401: bool, temp___skip_constant_402: bool,
  temp___do_toplevel_403: bool, temp___do_typ_inv_404: bool) =
  ((not (temp___skip_constant_402 = true)) -> in_range5(1000,
  temp___expr_405))

predicate default_initial_assumption(temp___expr_407: us_rep,
  temp___skip_top_level_408: bool) =
  ((to_rep(((temp___expr_407).us_split_discrs1).rec__amortized_queue__my_vectors__vector__capacity) = 1000) and
  ((not (temp___skip_top_level_408 = true)) ->
  (is_empty(temp___expr_407) = true)))

logic rear__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic ofront : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic orear : us_rep

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r46b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 1000))

predicate in_range6(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : index_type, index_type -> bool

logic dummy7 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : integer, integer -> bool

logic dummy8 : integer

type t47b__ref = { t47b__content : integer
}

function t47b__ref_t47b__content__projection(a: t47b__ref) : integer =
  (a).t47b__content

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : count_type, count_type -> bool

logic dummy9 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant5(temp___expr_248: int, temp___is_init_244: bool,
  temp___skip_constant_245: bool, temp___do_toplevel_246: bool,
  temp___do_typ_inv_247: bool) = (((temp___is_init_244 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_248))

axiom user_eq__def_axiom2 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption1(temp___expr_294: us_rep1,
  temp___skip_top_level_295: bool) =
  ((not (temp___skip_top_level_295 = true)) ->
  (length2(temp___expr_294) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length2(model(container)) = length(container)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)]. ((length(container) = 0) ->
  (is_empty(container) = true)))

predicate dynamic_invariant6(temp___expr_227: int, temp___is_init_223: bool,
  temp___skip_constant_224: bool, temp___do_toplevel_225: bool,
  temp___do_typ_inv_226: bool) = (((temp___is_init_223 = true) or
  (1 <= 1000)) -> in_range6(temp___expr_227))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. (0 <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 1000))

predicate in_range8(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : extended_index1, extended_index1 -> bool

logic dummy10 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant7(temp___expr_286: int, temp___is_init_282: bool,
  temp___skip_constant_283: bool, temp___do_toplevel_284: bool,
  temp___do_typ_inv_285: bool) = (((temp___is_init_282 = true) or
  (0 <= 1000)) -> in_range8(temp___expr_286))

axiom length__post_axiom2 :
  (forall container:us_rep1 [length2(container)].
  ((0 + length2(container)) <= 1000))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length2(container)].
  dynamic_invariant5(length2(container), true, false, true, true))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. ((- 2147483648) <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range9(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : element_type1, element_type1 -> bool

logic dummy11 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant8(temp___expr_279: int, temp___is_init_275: bool,
  temp___skip_constant_276: bool, temp___do_toplevel_277: bool,
  temp___do_typ_inv_278: bool) = (((temp___is_init_275 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range9(temp___expr_279))

axiom get__post_axiom :
  (forall container:us_rep1.
  (forall position:int [get(container, position)].
  ((dynamic_invariant7(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant8(get(container, position), true, false, true, true))))

 (* File "amortized_queue.adb", line 56, characters 0-0 *)
goal defqtvc :
  (forall front__split_fields:us_main_type.
  forall rear__split_fields:us_main_type. (dynamic_invariant3({
  us_split_discrs1 = front__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields } }, true,
  false, true, true) -> (dynamic_invariant3({ us_split_discrs1 =
  rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields } }, true,
  false, true, true) -> (dynamic_invariant3(ofront, true, false, true,
  true) -> (dynamic_invariant3(orear, true, false, true, true) ->
  ((((length({ us_split_discrs1 = rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields }
  }) <  (1000 - length({ us_split_discrs1 = front__split_discrs;
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  front__split_fields } }))) and (oeq({ us_split_discrs1 =
  front__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields } },
  ofront) = true)) and (oeq({ us_split_discrs1 = rear__split_discrs;
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  rear__split_fields } }, orear) = true)) -> (let o = { us_split_discrs1 =
  rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields } }
  : us_rep in (let amortized_queue__reverse_insert__L_5__R46b__assume =
  last_index(o) : int in
  ((dynamic_invariant1(amortized_queue__reverse_insert__L_5__R46b__assume,
  true, false, true, true) and
  (amortized_queue__reverse_insert__L_5__R46b__assume = last(model(o)))) ->
  ((amortized_queue__reverse_insert__L_5__R46b__assume = r46b) ->
  (dynamic_invariant1(r46b, true, false, true, true) ->
  (forall front__split_fields1:us_main_type. ((let temp___729 = r46b : int in
  (exists idx:int. ((idx = temp___729) and
  (if (andb((if (1 <= idx) then true else false),
  (if (idx <= temp___729) then true else false)) = true) then (in_range6(idx) and
  (let o1 = { us_split_discrs1 = rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields } }
  : us_rep in (let o2 = element(o1, idx) : int in ((dynamic_invariant2(o2,
  true, false, true, true) and (o2 = get(model(o1), idx))) and (let o3 =
  front__split_discrs : us_split_discrs in
  (exists amortized_queue__my_vectors__append__2__container__fields:us_main_type.
  ((((length({ us_split_discrs1 = o3; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields } }) = (length({
  us_split_discrs1 = o3; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields }
  }) + 1)) and (olt(model({ us_split_discrs1 = o3; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields } }),
  model({ us_split_discrs1 = o3; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields }
  })) = true)) and (get(model({ us_split_discrs1 = o3; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__append__2__container__fields } }),
  (last_index({ us_split_discrs1 = o3; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields }
  }) + 1)) = o2)) and
  (exists front__split_fields2:us_main_type.
  ((front__split_fields2 = amortized_queue__my_vectors__append__2__container__fields) and
  (let o4 = { us_split_discrs1 = rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields } }
  : us_rep in (let o5 = last_index(o4) : int in ((dynamic_invariant1(o5,
  true, false, true, true) and (o5 = last(model(o4)))) and (let o6 = ofront
  : us_rep in (let o7 = length(o6) : int in ((dynamic_invariant(o7, true,
  false, true, true) and (o7 <= capacity(o6))) and (let o8 = {
  us_split_discrs1 = front__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields2 } }
  : us_rep in (let o9 = length(o8) : int in ((dynamic_invariant(o9, true,
  false, true, true) and (o9 <= capacity(o8))) and
  (exists idx1:int. (((length({ us_split_discrs1 = front__split_discrs;
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  front__split_fields1 } }) = (((length(ofront) + last_index({
  us_split_discrs1 = rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields }
  })) - idx1) + 1)) and
  ((forall i:int. (((1 <= i) and (i <= last_index(ofront))) -> (element({
   us_split_discrs1 = front__split_discrs; us_split_fields1 = {
   rec__amortized_queue__my_vectors__vector = front__split_fields1 } },
   i) = element(ofront, i)))) and
  (forall i:int. (((idx1 <= i) and (i <= last_index({ us_split_discrs1 =
  rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields } }))) ->
  (element({ us_split_discrs1 = front__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields1 } },
  ((last_index({ us_split_discrs1 = front__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields1 }
  }) + idx1) - i)) = element({ us_split_discrs1 = rear__split_discrs;
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  rear__split_fields } }, i)))))) and ((andb((if (dynamic_property(1, r46b,
  idx1) and dynamic_invariant3({ us_split_discrs1 = front__split_discrs;
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  front__split_fields1 } }, true, true, true, true)) then true else false),
  (if ((1 <= idx1) and (idx1 <= r46b)) then true else false)) = true) and
  (idx1 = 1)))))))))))))))))))))) else (front__split_fields1 = front__split_fields))))) ->
  (forall amortized_queue__my_vectors__clear__container__fields:us_main_type.
  ((length({ us_split_discrs1 = rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector =
  amortized_queue__my_vectors__clear__container__fields } }) = 0) ->
  (forall rear__split_fields1:us_main_type.
  ((rear__split_fields1 = amortized_queue__my_vectors__clear__container__fields) ->
  (forall o1:bool. ((let o2 = orear : us_rep in (let o3 = length(o2) : int in
  ((dynamic_invariant(o3, true, false, true, true) and
  (o3 <= capacity(o2))) and (let o4 = ofront : us_rep in (let o5 = length(o4)
  : int in ((dynamic_invariant(o5, true, false, true, true) and
  (o5 <= capacity(o4))) and (let o6 = { us_split_discrs1 =
  front__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = front__split_fields1 } }
  : us_rep in (let o7 = length(o6) : int in ((dynamic_invariant(o7, true,
  false, true, true) and (o7 <= capacity(o6))) and
  (((not (o7 = (o5 + o3))) or (let o8 = { us_split_discrs1 =
  rear__split_discrs; us_split_fields1 = {
  rec__amortized_queue__my_vectors__vector = rear__split_fields1 } }
  : us_rep in (let o9 = length(o8) : int in (dynamic_invariant(o9, true,
  false, true, true) and (o9 <= capacity(o8)))))) and
  (if ((o7 = (o5 + o3)) and (length({ us_split_discrs1 = rear__split_discrs;
  us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
  rear__split_fields1 } }) = 0)) then ((let o8 = ofront : us_rep in (let o9 =
  last_index(o8) : int in (dynamic_invariant1(o9, true, false, true,
  true) and (o9 = last(model(o8)))))) and
  (o1 = (if (forall i:int. (((1 <= i) and (i <= last_index(ofront))) ->
            (element({ us_split_discrs1 = front__split_discrs;
            us_split_fields1 = { rec__amortized_queue__my_vectors__vector =
            front__split_fields1 } }, i) = element(ofront, i)))) then true else false))) else (o1 = false)))))))))))) ->
  ((o1 = true) ->
  (forall usf:int. (let o2 = orear : us_rep in (let o3 = last_index(o2)
  : int in ((dynamic_invariant1(o3, true, false, true, true) and
  (o3 = last(model(o2)))) -> ((andb((if (1 <= usf) then true else false),
  (if (usf <= o3) then true else false)) = true) -> in_range6(usf))))))))))))))))))))))))))
