(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t1b

logic t1bqtint : t1b -> int

axiom t1bqtaxiom : (forall i:t1b. (1 <= t1bqtint(i)))

axiom t1bqtaxiom1 : (forall i:t1b. (t1bqtint(i) <= 5))

predicate in_range2(x: int) = ((1 <= x) and (x <= 5))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t1b, t1b -> bool

logic dummy1 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : t1b =
  (a).t1b__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : integer =
  (a).t2b__content

 (* File "loops.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall count:int. ((count = 0) -> (dynamic_invariant(count, true, false,
  true, true) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 5) then true else false)) = true) ->
  (forall count1:int. forall i1:int. ((count1 = (i1 - 1)) ->
  ((andb((if (dynamic_invariant(count1, true, true, true, true) and
  in_range2(i1)) then true else false), (if ((1 <= i1) and
  (i1 <= 5)) then true else false)) = true) ->
  (forall count2:int. ((count2 = 0) ->
  (forall k:int. ((k = 1) -> ((andb((if (1 <= k) then true else false),
  (if (k <= i1) then true else false)) = true) -> (let o = (count2 + 1)
  : int in (in_range1(o) ->
  (forall count3:int. ((count3 = o) ->
  (forall count4:int. forall k1:int. ((count4 = k1) ->
  ((andb((if (dynamic_invariant(count4, true, true, true, true) and
  dynamic_property(1, i1, k1)) then true else false), (if ((1 <= k1) and
  (k1 <= i1)) then true else false)) = true) -> ((not (k1 = i1)) ->
  (forall k2:int. ((k2 = (k1 + 1)) -> (let o1 = (count4 + 1) : int in
  (in_range1(o1) -> (forall count5:int. ((count5 = o1) -> (count5 = k2)))))))))))))))))))))))))))))
