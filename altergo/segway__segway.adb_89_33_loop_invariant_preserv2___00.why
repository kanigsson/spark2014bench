(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

logic current_status : int -> int

logic current_status__function_guard : int, int -> prop

type status_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : status_type, status_type -> bool

logic dummy : status_type

type status_type__ref = { status_type__content : status_type
}

function status_type__ref_status_type__content__projection(a: status_type__ref) : status_type =
  (a).status_type__content

predicate dynamic_invariant(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (0 <= 2)) -> in_range1(temp___expr_161))

axiom current_status__post_axiom :
  (forall segway__status:int [current_status(segway__status)].
  (dynamic_invariant(segway__status, true, true, true, true) -> (let result =
  current_status(segway__status) : int in
  (current_status__function_guard(result, segway__status) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom current_status__def_axiom :
  (forall segway__status:int [current_status(segway__status)].
  (dynamic_invariant(segway__status, true, true, true, true) ->
  (current_status(segway__status) = segway__status)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic speed_is_valid : int, int -> bool

logic speed_is_valid__function_guard : bool, int, int -> prop

logic current_speed : int -> int

logic current_speed__function_guard : int, int -> prop

type speed_type

logic speed_typeqtint : speed_type -> int

axiom speed_typeqtaxiom :
  (forall i:speed_type. ((- 100) <= speed_typeqtint(i)))

axiom speed_typeqtaxiom1 : (forall i:speed_type. (speed_typeqtint(i) <= 100))

predicate in_range2(x: int) = (((- 100) <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : speed_type, speed_type -> bool

logic dummy1 : speed_type

type speed_type__ref = { speed_type__content : speed_type
}

function speed_type__ref_speed_type__content__projection(a: speed_type__ref) : speed_type =
  (a).speed_type__content

predicate dynamic_invariant1(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  ((- 100) <= 100)) -> in_range2(temp___expr_182))

axiom speed_is_valid__def_axiom :
  (forall segway__status:int.
  current_status__function_guard(current_status(segway__status),
  segway__status))

axiom speed_is_valid__def_axiom1 :
  (forall segway__speed:int.
  current_speed__function_guard(current_speed(segway__speed), segway__speed))

axiom speed_is_valid__def_axiom2 :
  (forall segway__status:int.
  current_status__function_guard(current_status(segway__status),
  segway__status))

axiom speed_is_valid__def_axiom3 :
  (forall segway__speed:int.
  current_speed__function_guard(current_speed(segway__speed), segway__speed))

axiom speed_is_valid__def_axiom4 :
  (forall segway__speed:int.
  current_speed__function_guard(current_speed(segway__speed), segway__speed))

axiom speed_is_valid__def_axiom5 :
  (forall segway__status:int. forall segway__speed:int
  [speed_is_valid(segway__status, segway__speed)].
  ((speed_is_valid(segway__status, segway__speed) = true) ->
  ((current_status(segway__status) = 0) ->
  (current_speed(segway__speed) = 0))))

axiom speed_is_valid__def_axiom6 :
  (forall segway__status:int. forall segway__speed:int
  [speed_is_valid(segway__status, segway__speed)].
  ((speed_is_valid(segway__status, segway__speed) = true) ->
  ((not (current_status(segway__status) = 0)) ->
  ((current_status(segway__status) = 1) ->
  (0 <  current_speed(segway__speed))))))

axiom speed_is_valid__def_axiom7 :
  (forall segway__status:int. forall segway__speed:int
  [speed_is_valid(segway__status, segway__speed)].
  ((speed_is_valid(segway__status, segway__speed) = true) ->
  ((not (current_status(segway__status) = 0)) ->
  ((not (current_status(segway__status) = 1)) ->
  (current_speed(segway__speed) <  0)))))

axiom speed_is_valid__def_axiom8 :
  (forall segway__status:int. forall segway__speed:int
  [speed_is_valid(segway__status, segway__speed)].
  ((if (current_status(segway__status) = 0) then (current_speed(segway__speed) = 0) else (if (current_status(segway__status) = 1) then (0 <  current_speed(segway__speed)) else (current_speed(segway__speed) <  0))) ->
  (speed_is_valid(segway__status, segway__speed) = true)))

axiom current_speed__post_axiom :
  (forall segway__speed:int [current_speed(segway__speed)].
  (dynamic_invariant1(segway__speed, true, true, true, true) -> (let result =
  current_speed(segway__speed) : int in
  (current_speed__function_guard(result, segway__speed) ->
  dynamic_invariant1(result, true, false, true, true)))))

axiom current_speed__def_axiom :
  (forall segway__speed:int [current_speed(segway__speed)].
  (dynamic_invariant1(segway__speed, true, true, true, true) ->
  (current_speed(segway__speed) = segway__speed)))

 (* File "segway.ads", line 44, characters 0-0 *)
goal defqtvc :
  (forall status:int. forall speed:int. (dynamic_invariant1(speed, true,
  false, true, true) -> (dynamic_invariant(status, true, false, true,
  true) ->
  ((forall status1:int. forall speed1:int.
   speed_is_valid__function_guard(speed_is_valid(status1, speed1), status1,
   speed1)) ->
  ((speed_is_valid(status, speed) = true) -> ((not (status = 0)) ->
  (let temp___inv_206 = speed_is_valid(status, speed) : bool in
  ((forall status1:int.
   current_status__function_guard(current_status(status1), status1)) ->
  ((forall speed1:int. current_speed__function_guard(current_speed(speed1),
   speed1)) ->
  ((forall status1:int.
   current_status__function_guard(current_status(status1), status1)) ->
  ((forall speed1:int. current_speed__function_guard(current_speed(speed1),
   speed1)) ->
  ((forall speed1:int. current_speed__function_guard(current_speed(speed1),
   speed1)) ->
  ((speed_is_valid__function_guard(temp___inv_206, status, speed) and
  ((temp___inv_206 = true) <->
  (if (current_status(status) = 0) then (current_speed(speed) = 0) else (if (current_status(status) = 1) then (0 <  current_speed(speed)) else (current_speed(speed) <  0))))) ->
  (forall status1:int. forall speed1:int.
  ((forall status2:int. forall speed2:int.
   speed_is_valid__function_guard(speed_is_valid(status2, speed2), status2,
   speed2)) ->
  ((speed_is_valid(status1, speed1) = true) ->
  ((andb((if (dynamic_invariant(status1, true, true, true, true) and
  dynamic_invariant1(speed1, true, true, true, true)) then true else false),
  (if (not (status1 = 0)) then true else false)) = true) ->
  (forall status2:int. forall speed2:int.
  ((forall status3:int. forall speed3:int.
   speed_is_valid__function_guard(speed_is_valid(status3, speed3), status3,
   speed3)) ->
  ((forall status3:int. forall speed3:int.
   speed_is_valid__function_guard(speed_is_valid(status3, speed3), status3,
   speed3)) ->
  ((exists spark__branch:bool.
   ((spark__branch = (if (0 <  speed1) then true else false)) and
   ((speed_is_valid(status2, speed2) = true) and (dynamic_invariant(status2,
   true, true, true, true) and dynamic_invariant1(speed2, true, true, true,
   true))))) ->
  ((not (status2 = 0)) -> (let temp___inv_2061 = speed_is_valid(status2,
  speed2) : bool in
  ((forall status3:int.
   current_status__function_guard(current_status(status3), status3)) ->
  ((forall speed3:int. current_speed__function_guard(current_speed(speed3),
   speed3)) ->
  ((forall status3:int.
   current_status__function_guard(current_status(status3), status3)) ->
  ((forall speed3:int. current_speed__function_guard(current_speed(speed3),
   speed3)) ->
  ((forall speed3:int. current_speed__function_guard(current_speed(speed3),
   speed3)) ->
  ((speed_is_valid__function_guard(temp___inv_2061, status2, speed2) and
  ((temp___inv_2061 = true) <->
  (if (current_status(status2) = 0) then (current_speed(speed2) = 0) else (if (current_status(status2) = 1) then (0 <  current_speed(speed2)) else (current_speed(speed2) <  0))))) ->
  ((forall status3:int. forall speed3:int.
   speed_is_valid__function_guard(speed_is_valid(status3, speed3), status3,
   speed3)) ->
  (speed_is_valid(status2, speed2) = true)))))))))))))))))))))))))))))))
