(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type element

logic elementqtint : element -> int

axiom elementqtaxiom :
  (forall i:element. ((- 2147483648) <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element, element -> bool

logic dummy : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep(x: element) : int = elementqtint(x)

logic of_rep : int -> element

axiom inversion_axiom :
  (forall x:element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,element) farray, a__first: int, a__last: int,
  b: (int,element) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic value_found_in_range : (int,element) farray, int, int, int -> bool

logic value_found_in_range__function_guard : bool, (int,element) farray, int,
  int, int -> prop

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (1 <= 10)) -> in_range2(temp___expr_161))

predicate dynamic_invariant1(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_168))

axiom value_found_in_range__def_axiom :
  (forall a:(int,element) farray.
  (forall val__:int. forall low:int. forall up:int [value_found_in_range(a,
  val__, low, up)]. ((value_found_in_range(a, val__, low, up) = true) ->
  (exists j:int. (((low <= j) and (j <= up)) and (to_rep((a[j])) = val__))))))

axiom value_found_in_range__def_axiom1 :
  (forall a:(int,element) farray.
  (forall val__:int. forall low:int. forall up:int [value_found_in_range(a,
  val__, low, up)].
  ((exists j:int. (((low <= j) and (j <= up)) and (to_rep((a[j])) = val__))) ->
  (value_found_in_range(a, val__, low, up) = true))))

logic a : (int,element) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

function to_rep1(x: index) : int = indexqtint(x)

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__linear_search__search_result__found : bool
}

function us_split_discrs_rec__linear_search__search_result__found__projection(a1: us_split_discrs) : bool =
  (a1).rec__linear_search__search_result__found

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a1: us_split_discrs__ref) : us_split_discrs =
  (a1).us_split_discrs__content

type us_split_fields = { rec__linear_search__search_result__at_index : index
}

function us_split_fields_rec__linear_search__search_result__at_index__projection(a1: us_split_fields) : index =
  (a1).rec__linear_search__search_result__at_index

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a1: us_split_fields__ref) : us_split_fields =
  (a1).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a1: us_rep) : us_split_discrs =
  (a1).us_split_discrs1

function us_rep___split_fields__projection(a1: us_rep) : us_split_fields =
  (a1).us_split_fields1

predicate linear_search__search_result__at_index__pred(a1: us_rep) =
  (to_int(((a1).us_split_discrs1).rec__linear_search__search_result__found) = 1)

function bool_eq5(a1: us_rep, b: us_rep) : bool =
  (if ((to_int(((a1).us_split_discrs1).rec__linear_search__search_result__found) = to_int(((b).us_split_discrs1).rec__linear_search__search_result__found)) and
  (linear_search__search_result__at_index__pred(a1) ->
  (to_rep1(((a1).us_split_fields1).rec__linear_search__search_result__at_index) = to_rep1(((b).us_split_fields1).rec__linear_search__search_result__at_index)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic linear_search__search_result__found__first__bit : int

logic linear_search__search_result__found__last__bit : int

logic linear_search__search_result__found__position : int

axiom linear_search__search_result__found__first__bit_axiom :
  (0 <= linear_search__search_result__found__first__bit)

axiom linear_search__search_result__found__last__bit_axiom :
  (linear_search__search_result__found__first__bit <  linear_search__search_result__found__last__bit)

axiom linear_search__search_result__found__position_axiom :
  (0 <= linear_search__search_result__found__position)

logic linear_search__search_result__at_index__first__bit : int

logic linear_search__search_result__at_index__last__bit : int

logic linear_search__search_result__at_index__position : int

axiom linear_search__search_result__at_index__first__bit_axiom :
  (0 <= linear_search__search_result__at_index__first__bit)

axiom linear_search__search_result__at_index__last__bit_axiom :
  (linear_search__search_result__at_index__first__bit <  linear_search__search_result__at_index__last__bit)

axiom linear_search__search_result__at_index__position_axiom :
  (0 <= linear_search__search_result__at_index__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type search_result__ref = { search_result__content : us_rep
}

function search_result__ref_search_result__content__projection(a1: search_result__ref) : us_rep =
  (a1).search_result__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic res__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate default_initial_assumption(temp___expr_187: us_rep,
  temp___skip_top_level_188: bool) =
  (((temp___expr_187).us_split_discrs1).rec__linear_search__search_result__found = of_int(0))

type tindexB

logic tindexBqtint : tindexB -> int

axiom tindexBqtaxiom : (forall i:tindexB. ((- 128) <= tindexBqtint(i)))

axiom tindexBqtaxiom1 : (forall i:tindexB. (tindexBqtint(i) <= 127))

predicate in_range3(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tindexB, tindexB -> bool

logic dummy3 : tindexB

type tindexB__ref = { tindexB__content : tindexB
}

function tindexB__ref_tindexB__content__projection(a1: tindexB__ref) : tindexB =
  (a1).tindexB__content

predicate in_range4(rec__linear_search__search_result__found1: bool,
  a1: us_rep) =
  (rec__linear_search__search_result__found1 = ((a1).us_split_discrs1).rec__linear_search__search_result__found)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic linear_search__search_result__found__first__bit1 : int

logic linear_search__search_result__found__last__bit1 : int

logic linear_search__search_result__found__position1 : int

axiom linear_search__search_result__found__first__bit_axiom1 :
  (0 <= linear_search__search_result__found__first__bit1)

axiom linear_search__search_result__found__last__bit_axiom1 :
  (linear_search__search_result__found__first__bit1 <  linear_search__search_result__found__last__bit1)

axiom linear_search__search_result__found__position_axiom1 :
  (0 <= linear_search__search_result__found__position1)

logic linear_search__search_result__at_index__first__bit1 : int

logic linear_search__search_result__at_index__last__bit1 : int

logic linear_search__search_result__at_index__position1 : int

axiom linear_search__search_result__at_index__first__bit_axiom1 :
  (0 <= linear_search__search_result__at_index__first__bit1)

axiom linear_search__search_result__at_index__last__bit_axiom1 :
  (linear_search__search_result__at_index__first__bit1 <  linear_search__search_result__at_index__last__bit1)

axiom linear_search__search_result__at_index__position_axiom1 :
  (0 <= linear_search__search_result__at_index__position1)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref_t1b__content__projection(a1: t1b__ref) : us_rep =
  (a1).t1b__content

predicate in_range5(rec__linear_search__search_result__found1: bool,
  a1: us_rep) =
  (rec__linear_search__search_result__found1 = ((a1).us_split_discrs1).rec__linear_search__search_result__found)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic linear_search__search_result__found__first__bit2 : int

logic linear_search__search_result__found__last__bit2 : int

logic linear_search__search_result__found__position2 : int

axiom linear_search__search_result__found__first__bit_axiom2 :
  (0 <= linear_search__search_result__found__first__bit2)

axiom linear_search__search_result__found__last__bit_axiom2 :
  (linear_search__search_result__found__first__bit2 <  linear_search__search_result__found__last__bit2)

axiom linear_search__search_result__found__position_axiom2 :
  (0 <= linear_search__search_result__found__position2)

logic linear_search__search_result__at_index__first__bit2 : int

logic linear_search__search_result__at_index__last__bit2 : int

logic linear_search__search_result__at_index__position2 : int

axiom linear_search__search_result__at_index__first__bit_axiom2 :
  (0 <= linear_search__search_result__at_index__first__bit2)

axiom linear_search__search_result__at_index__last__bit_axiom2 :
  (linear_search__search_result__at_index__first__bit2 <  linear_search__search_result__at_index__last__bit2)

axiom linear_search__search_result__at_index__position_axiom2 :
  (0 <= linear_search__search_result__at_index__position2)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref_t3b__content__projection(a1: t3b__ref) : us_rep =
  (a1).t3b__content

 (* File "linear_search.ads", line 33, characters 0-0 *)
goal defqtvc :
  (forall res__split_fields:index. forall res__split_discrs:bool.
  (dynamic_invariant1(val__, true, false, true, true) -> ((0 <= val__) ->
  (value_found_in_range__function_guard(value_found_in_range(a, val__, 2,
  10), a, val__, 2, 10) ->
  (forall pos:int. ((pos = 1) -> (in_range3(pos) ->
  ((res__attr__constrained = false) -> (default_initial_assumption({
  us_split_discrs1 = { rec__linear_search__search_result__found =
  res__split_discrs }; us_split_fields1 = {
  rec__linear_search__search_result__at_index = res__split_fields } },
  false) ->
  ((forall pos1:int.
   value_found_in_range__function_guard(value_found_in_range(a, val__, 1,
   pos1), a, val__, 1, pos1)) ->
  ((forall pos1:int.
   value_found_in_range__function_guard(value_found_in_range(a, val__, 1,
   pos1), a, val__, 1, pos1)) ->
  (((not (pos <= 10)) or (((1 <= pos) and (pos <= 10)) and
  (exists o:int. ((to_rep((a[pos])) = o) and
  (exists spark__branch:bool.
  ((spark__branch = (if (o = val__) then true else false)) and
  ((not (spark__branch = true)) and
  (((not (andb((if (1 <= pos) then true else false),
  (if (pos <= 10) then true else false)) = true)) or (in_range2(pos) and
  (let o1 = val__ : int in (let o2 = a : (int,element) farray in (let o3 =
  value_found_in_range(o2, o1, 1, pos) : bool in
  (value_found_in_range__function_guard(o3, o2, o1, 1, pos) and
  ((o3 = true) <->
  (exists j:int. (((1 <= j) and (j <= pos)) and (to_rep((o2[j])) = o1)))))))))) and
  (exists pos1:int. ((((1 <= pos1) and (pos1 <= 10)) and
  (not (value_found_in_range(a, val__, 1, pos1) = true))) and
  (in_range3(pos1) and
  (exists temp___216:int. ((temp___216 = pos1) and (let o1 = (pos1 + 1)
  : int in (in_range3(o1) and
  (exists pos2:int. ((pos2 = o1) and (not (pos2 <= 10))))))))))))))))))) ->
  ((res__attr__constrained = true) ->
  (of_int(0) = res__split_discrs))))))))))))))
