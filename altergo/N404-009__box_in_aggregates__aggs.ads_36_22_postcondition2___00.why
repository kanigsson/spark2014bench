(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t2

logic t2qtint : t2 -> int

axiom t2qtaxiom : (forall i:t2. (11 <= t2qtint(i)))

axiom t2qtaxiom1 : (forall i:t2. (t2qtint(i) <= 20))

predicate in_range(x: int) = ((11 <= x) and (x <= 20))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : t2, t2 -> bool

logic dummy : t2

type t2__ref = { t2__content : t2
}

function t2__ref_t2__content__projection(a: t2__ref) : t2 = (a).t2__content

function to_rep(x: t2) : int = t2qtint(x)

logic of_rep : int -> t2

axiom inversion_axiom : (forall x:t2 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:t2 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,t2) farray
}

logic slide : (int,t2) farray, int, int -> (int,t2) farray

axiom slide_eq :
  (forall a:(int,t2) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,t2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,t2) farray, a__first: int, a__last: int,
  b: (int,t2) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,t2) farray. forall b:(int,t2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,t2) farray. forall b:(int,t2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,t2) farray. forall b:(int,t2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,t2) farray. forall b:(int,t2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

type i

logic iqtint : i -> int

axiom iqtaxiom : (forall i1:i. (1 <= iqtint(i1)))

axiom iqtaxiom1 : (forall i1:i. (iqtint(i1) <= 5))

predicate in_range1(x: int) = ((1 <= x) and (x <= 5))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : i, i -> bool

logic dummy1 : i

type i__ref = { i__content : i
}

function i__ref_i__content__projection(a: i__ref) : i = (a).i__content

predicate default_initial_assumption(temp___expr_201: (int,t2) farray,
  temp___skip_top_level_202: bool) =
  (forall temp___203:int. (((1 <= temp___203) and (temp___203 <= 5)) ->
  (to_rep((temp___expr_201[temp___203])) = 20)))

logic temp_____aggregate_def_232 : int -> (int,t2) farray

predicate dynamic_invariant(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (11 <= 20)) -> in_range(temp___expr_182))

logic rliteral : t2

axiom rliteral_axiom : (t2qtint(rliteral) = 11)

axiom def_axiom :
  (forall temp___234:int. (dynamic_invariant(temp___234, true, true, true,
  true) ->
  (forall temp___235:int.
  ((temp_____aggregate_def_232(temp___234)[temp___235]) = rliteral))))

predicate dynamic_invariant1(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (1 <= 5)) -> in_range1(temp___expr_161))

 (* File "aggs.ads", line 34, characters 0-0 *)
goal defqtvc :
  (forall x:(int,t2) farray. ((x = temp_____aggregate_def_232(11)) ->
  (to_rep((x[2])) = 11)))
