(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic us_compatible_tags : int, int -> prop

axiom us_compatible_tags_refl :
  (forall tag:int. us_compatible_tags(tag, tag))

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq(a: us_rep, b: us_rep) : bool =
  (if true then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type t1__ref = { t1__content : us_rep
}

function t1__ref_t1__content__projection(a: t1__ref) : us_rep =
  (a).t1__content

logic t1_var__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_181: us_rep,
  temp___skip_top_level_182: bool) = ((temp___expr_181).attr__tag = us_tag)

logic prim_func : us_split_fields -> us_rep

logic prim_func__function_guard : us_rep, us_split_fields -> prop

logic prim_func1 : int, us_split_fields -> us_rep

logic prim_func__function_guard1 : us_rep, int, us_split_fields -> prop

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t2__ref = { t2__content : us_rep
}

function t2__ref_t2__content__projection(a: t2__ref) : us_rep =
  (a).t2__content

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t3__ref = { t3__content : us_rep
}

function t3__ref_t3__content__projection(a: t3__ref) : us_rep =
  (a).t3__content

axiom prim_func__post_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields
  [prim_func(foo__t1_pkg__t1_var__fields)]. (let result =
  prim_func(foo__t1_pkg__t1_var__fields) : us_rep in
  (prim_func__function_guard(result, foo__t1_pkg__t1_var__fields) ->
  ((result).attr__tag = us_tag))))

axiom prim_func__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(attr__tag1,
  foo__t1_pkg__t1_var__fields)]. (let result = prim_func1(attr__tag1,
  foo__t1_pkg__t1_var__fields) : us_rep in
  (prim_func__function_guard1(result, attr__tag1,
  foo__t1_pkg__t1_var__fields) -> ((result).attr__tag = attr__tag1)))))

axiom foo__t1_pkg__t1__compat_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(us_tag,
  foo__t1_pkg__t1_var__fields)].
  (prim_func__function_guard1(prim_func1(us_tag,
  foo__t1_pkg__t1_var__fields), us_tag, foo__t1_pkg__t1_var__fields) ->
  (forall foo__t1_pkg__t1_var__fields1:us_split_fields.
  prim_func__function_guard(prim_func(foo__t1_pkg__t1_var__fields1),
  foo__t1_pkg__t1_var__fields1))))

axiom foo__t1_pkg__t1__compat_axiom1 :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(us_tag,
  foo__t1_pkg__t1_var__fields)].
  (prim_func__function_guard1(prim_func1(us_tag,
  foo__t1_pkg__t1_var__fields), us_tag, foo__t1_pkg__t1_var__fields) ->
  (prim_func(foo__t1_pkg__t1_var__fields) = prim_func1(us_tag,
  foo__t1_pkg__t1_var__fields))))

axiom foo__t2_pkg__t2__compat_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(us_tag1,
  foo__t1_pkg__t1_var__fields)].
  (prim_func__function_guard1(prim_func1(us_tag1,
  foo__t1_pkg__t1_var__fields), us_tag1, foo__t1_pkg__t1_var__fields) ->
  (forall foo__t1_pkg__t1_var__fields1:us_split_fields.
  prim_func__function_guard(prim_func(foo__t1_pkg__t1_var__fields1),
  foo__t1_pkg__t1_var__fields1))))

axiom foo__t2_pkg__t2__compat_axiom1 :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(us_tag1,
  foo__t1_pkg__t1_var__fields)].
  (prim_func__function_guard1(prim_func1(us_tag1,
  foo__t1_pkg__t1_var__fields), us_tag1, foo__t1_pkg__t1_var__fields) ->
  (prim_func(foo__t1_pkg__t1_var__fields) = prim_func1(us_tag1,
  foo__t1_pkg__t1_var__fields))))

axiom foo__t3_pkg__t3__compat_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(us_tag2,
  foo__t1_pkg__t1_var__fields)].
  (prim_func__function_guard1(prim_func1(us_tag2,
  foo__t1_pkg__t1_var__fields), us_tag2, foo__t1_pkg__t1_var__fields) ->
  (forall foo__t1_pkg__t1_var__fields1:us_split_fields.
  prim_func__function_guard(prim_func(foo__t1_pkg__t1_var__fields1),
  foo__t1_pkg__t1_var__fields1))))

axiom foo__t3_pkg__t3__compat_axiom1 :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields [prim_func1(us_tag2,
  foo__t1_pkg__t1_var__fields)].
  (prim_func__function_guard1(prim_func1(us_tag2,
  foo__t1_pkg__t1_var__fields), us_tag2, foo__t1_pkg__t1_var__fields) ->
  (prim_func(foo__t1_pkg__t1_var__fields) = prim_func1(us_tag2,
  foo__t1_pkg__t1_var__fields))))

axiom prim_func__def_axiom :
  (forall foo__t1_pkg__t1_var__fields:us_split_fields
  [prim_func(foo__t1_pkg__t1_var__fields)].
  (prim_func(foo__t1_pkg__t1_var__fields) = { us_split_fields1 =
  foo__t1_pkg__t1_var__fields; attr__tag = t1_var__attr__tag }))

predicate default_initial_assumption1(temp___expr_197: us_rep,
  temp___skip_top_level_198: bool) = ((temp___expr_197).attr__tag = us_tag1)

predicate default_initial_assumption2(temp___expr_209: us_rep,
  temp___skip_top_level_210: bool) = ((temp___expr_209).attr__tag = us_tag2)

 (* File "foo.adb", line 38, characters 0-0 *)
goal defqtvc :
  (forall t1_var__split_fields:us_private. (let temp___230 = prim_func({
  rec__ext__ = t1_var__split_fields }) : us_rep in
  ((prim_func__function_guard(temp___230, { rec__ext__ = t1_var__split_fields
  }) and (temp___230 = { us_split_fields1 = { rec__ext__ =
  t1_var__split_fields }; attr__tag = t1_var__attr__tag })) ->
  (us_compatible_tags((temp___230).attr__tag, us_tag1) -> (let temp___229 =
  prim_func({ rec__ext__ = t1_var__split_fields }) : us_rep in
  ((prim_func__function_guard(temp___229, { rec__ext__ = t1_var__split_fields
  }) and (temp___229 = { us_split_fields1 = { rec__ext__ =
  t1_var__split_fields }; attr__tag = t1_var__attr__tag })) ->
  us_compatible_tags((temp___229).attr__tag, us_tag1)))))))
