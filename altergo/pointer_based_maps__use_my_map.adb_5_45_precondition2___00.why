(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

function to_rep1(x: positive) : int = positiveqtint(x)

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_rep = { rec__my_map__int_acc__is_null_pointer : bool;
rec__my_map__int_acc__pointer_address : int;
rec__my_map__int_acc__pointer_value : integer
}

function us_rep_rec__my_map__int_acc__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__my_map__int_acc__is_null_pointer

function us_rep_rec__my_map__int_acc__pointer_address__projection(a: us_rep) : int =
  (a).rec__my_map__int_acc__pointer_address

function us_rep_rec__my_map__int_acc__pointer_value__projection(a: us_rep) : integer =
  (a).rec__my_map__int_acc__pointer_value

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__2__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__my_map__int_acc__is_null_pointer = (b).rec__my_map__int_acc__is_null_pointer) and
  ((not ((a).rec__my_map__int_acc__is_null_pointer = true)) ->
  (((a).rec__my_map__int_acc__pointer_address = (b).rec__my_map__int_acc__pointer_address) and
  ((a).rec__my_map__int_acc__pointer_value = (b).rec__my_map__int_acc__pointer_value)))) then true else false)

predicate rec__my_map__int_acc__pointer_value__pred(a: us_rep) =
  (not ((a).rec__my_map__int_acc__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__my_map__int_acc__is_null_pointer = true)

logic dummy2 : us_rep

type int_acc__ref = { int_acc__content : us_rep
}

function int_acc__ref_int_acc__content__projection(a: int_acc__ref) : us_rep =
  (a).int_acc__content

type us_main_type

type us_rep1 = { rec__use_my_map__T1b__is_null_pointer : bool;
rec__use_my_map__T1b__pointer_address : int;
rec__use_my_map__T1b__pointer_value_abstr : us_main_type
}

function us_rep_rec__use_my_map__T1b__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__use_my_map__T1b__is_null_pointer

function us_rep_rec__use_my_map__T1b__pointer_address__projection(a: us_rep1) : int =
  (a).rec__use_my_map__T1b__pointer_address

function us_rep_rec__use_my_map__T1b__pointer_value_abstr__projection(a: us_rep1) : us_main_type =
  (a).rec__use_my_map__T1b__pointer_value_abstr

type us_rep__ref1 = { us_rep__content1 : us_rep1
}

function us_rep__ref___rep__content__projection(a: us_rep__ref1) : us_rep1 =
  (a).us_rep__content1

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__use_my_map__T1b__is_null_pointer = (b).rec__use_my_map__T1b__is_null_pointer) and
  ((not ((a).rec__use_my_map__T1b__is_null_pointer = true)) ->
  (((a).rec__use_my_map__T1b__pointer_address = (b).rec__use_my_map__T1b__pointer_address) and
  ((a).rec__use_my_map__T1b__pointer_value_abstr = (b).rec__use_my_map__T1b__pointer_value_abstr)))) then true else false)

logic dummy3 : us_rep1

type map_acc__ref = { map_acc__content : us_rep1
}

function map_acc__ref_map_acc__content__projection(a: map_acc__ref) : us_rep1 =
  (a).map_acc__content

type us_split_fields = { rec__my_map__map__key : positive;
rec__my_map__map__value : us_rep; rec__my_map__map__next : us_rep1
}

function us_split_fields_rec__my_map__map__key__projection(a: us_split_fields) : positive =
  (a).rec__my_map__map__key

function us_split_fields_rec__my_map__map__value__projection(a: us_split_fields) : us_rep =
  (a).rec__my_map__map__value

function us_split_fields_rec__my_map__map__next__projection(a: us_split_fields) : us_rep1 =
  (a).rec__my_map__map__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep2 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep2) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep2, b: us_rep2) : bool =
  (if (((to_rep1(((a).us_split_fields1).rec__my_map__map__key) = to_rep1(((b).us_split_fields1).rec__my_map__map__key)) and
  (bool_eq3(((a).us_split_fields1).rec__my_map__map__value,
  ((b).us_split_fields1).rec__my_map__map__value) = true)) and
  (bool_eq4(((a).us_split_fields1).rec__my_map__map__next,
  ((b).us_split_fields1).rec__my_map__map__next) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic my_map__map__key__first__bit : int

logic my_map__map__key__last__bit : int

logic my_map__map__key__position : int

axiom my_map__map__key__first__bit_axiom :
  (0 <= my_map__map__key__first__bit)

axiom my_map__map__key__last__bit_axiom :
  (my_map__map__key__first__bit <  my_map__map__key__last__bit)

axiom my_map__map__key__position_axiom : (0 <= my_map__map__key__position)

logic my_map__map__value__first__bit : int

logic my_map__map__value__last__bit : int

logic my_map__map__value__position : int

axiom my_map__map__value__first__bit_axiom :
  (0 <= my_map__map__value__first__bit)

axiom my_map__map__value__last__bit_axiom :
  (my_map__map__value__first__bit <  my_map__map__value__last__bit)

axiom my_map__map__value__position_axiom :
  (0 <= my_map__map__value__position)

logic my_map__map__next__first__bit : int

logic my_map__map__next__last__bit : int

logic my_map__map__next__position : int

axiom my_map__map__next__first__bit_axiom :
  (0 <= my_map__map__next__first__bit)

axiom my_map__map__next__last__bit_axiom :
  (my_map__map__next__first__bit <  my_map__map__next__last__bit)

axiom my_map__map__next__position_axiom : (0 <= my_map__map__next__position)

logic user_eq2 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type map__ref = { map__content : us_rep2
}

function map__ref_map__content__projection(a: map__ref) : us_rep2 =
  (a).map__content

logic m__pointer_address : int

logic m__is_null_pointer : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic k : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic dummy5 : us_rep1

type t1s__ref = { t1s__content : us_rep1
}

function t1s__ref_t1s__content__projection(a: t1s__ref) : us_rep1 =
  (a).t1s__content

logic model_contains : us_rep1, int -> bool

logic model_contains__function_guard : bool, us_rep1, int -> prop

logic has_element : us_rep2, int -> bool

logic has_element__function_guard : bool, us_rep2, int -> prop

logic dummy6 : us_rep1

type t1b__ref = { t1b__content : us_rep1
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep1 =
  (a).t1b__content

logic us_open : us_main_type -> us_rep2

logic us_close : us_rep2 -> us_main_type

axiom close_open :
  (forall x:us_main_type [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep2 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__use_my_map__T1b__pointer_value(a: us_rep1) : us_rep2 =
  us_open((a).rec__use_my_map__T1b__pointer_value_abstr)

predicate rec__use_my_map__T1b__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__use_my_map__T1b__is_null_pointer = true))

logic us_null_pointer1 : us_rep1

axiom us_null_pointer__def_axiom1 :
  ((us_null_pointer1).rec__use_my_map__T1b__is_null_pointer = true)

axiom model_contains__def_axiom :
  (forall m:us_rep1.
  (forall k1:int [model_contains(m, k1)]. ((model_contains(m, k1) = true) ->
  (not (bool_eq4(m, us_null_pointer1) = true)))))

axiom model_contains__def_axiom1 :
  (forall m:us_rep1.
  (forall k1:int [model_contains(m, k1)]. ((model_contains(m, k1) = true) ->
  (has_element(rec__use_my_map__T1b__pointer_value(m), k1) = true))))

axiom model_contains__def_axiom2 :
  (forall m:us_rep1.
  (forall k1:int [model_contains(m, k1)]. (((not (bool_eq4(m,
  us_null_pointer1) = true)) and
  (has_element(rec__use_my_map__T1b__pointer_value(m), k1) = true)) ->
  (model_contains(m, k1) = true))))

logic dummy7 : us_rep1

type t2s__ref = { t2s__content : us_rep1
}

function t2s__ref_t2s__content__projection(a: t2s__ref) : us_rep1 =
  (a).t2s__content

logic model_value : us_rep1, int -> int

logic model_value__function_guard : int, us_rep1, int -> prop

logic temp___dynamic_invariant_192 : us_rep1, bool, bool, bool, bool -> prop

predicate dynamic_invariant2(temp___expr_191: us_rep1,
  temp___is_init_187: bool, temp___skip_constant_188: bool,
  temp___do_toplevel_189: bool, temp___do_typ_inv_190: bool) =
  ((not ((temp___expr_191).rec__use_my_map__T1b__is_null_pointer = true)) ->
  ((not ((((rec__use_my_map__T1b__pointer_value(temp___expr_191)).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__is_null_pointer = true)) and
  temp___dynamic_invariant_192(((rec__use_my_map__T1b__pointer_value(temp___expr_191)).us_split_fields1).rec__my_map__map__next,
  true, false, true, temp___do_typ_inv_190)))

axiom def_axiom :
  (forall temp___expr_197:us_rep1.
  (forall temp___is_init_193:bool. forall temp___skip_constant_194:bool.
  forall temp___do_toplevel_195:bool. forall temp___do_typ_inv_196:bool
  [temp___dynamic_invariant_192(temp___expr_197, temp___is_init_193,
  temp___skip_constant_194, temp___do_toplevel_195, temp___do_typ_inv_196)].
  (temp___dynamic_invariant_192(temp___expr_197, temp___is_init_193,
  temp___skip_constant_194, temp___do_toplevel_195, temp___do_typ_inv_196) ->
  ((not ((temp___expr_197).rec__use_my_map__T1b__is_null_pointer = true)) ->
  (not ((((rec__use_my_map__T1b__pointer_value(temp___expr_197)).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__is_null_pointer = true))))))

axiom def_axiom1 :
  (forall temp___expr_197:us_rep1.
  (forall temp___is_init_193:bool. forall temp___skip_constant_194:bool.
  forall temp___do_toplevel_195:bool. forall temp___do_typ_inv_196:bool
  [temp___dynamic_invariant_192(temp___expr_197, temp___is_init_193,
  temp___skip_constant_194, temp___do_toplevel_195, temp___do_typ_inv_196)].
  (temp___dynamic_invariant_192(temp___expr_197, temp___is_init_193,
  temp___skip_constant_194, temp___do_toplevel_195, temp___do_typ_inv_196) ->
  ((not ((temp___expr_197).rec__use_my_map__T1b__is_null_pointer = true)) ->
  temp___dynamic_invariant_192(((rec__use_my_map__T1b__pointer_value(temp___expr_197)).us_split_fields1).rec__my_map__map__next,
  true, false, true, temp___do_typ_inv_196)))))

axiom def_axiom2 :
  (forall temp___expr_197:us_rep1.
  (forall temp___is_init_193:bool. forall temp___skip_constant_194:bool.
  forall temp___do_toplevel_195:bool. forall temp___do_typ_inv_196:bool
  [temp___dynamic_invariant_192(temp___expr_197, temp___is_init_193,
  temp___skip_constant_194, temp___do_toplevel_195, temp___do_typ_inv_196)].
  (((not ((temp___expr_197).rec__use_my_map__T1b__is_null_pointer = true)) ->
  ((not ((((rec__use_my_map__T1b__pointer_value(temp___expr_197)).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__is_null_pointer = true)) and
  temp___dynamic_invariant_192(((rec__use_my_map__T1b__pointer_value(temp___expr_197)).us_split_fields1).rec__my_map__map__next,
  true, false, true, temp___do_typ_inv_196))) ->
  temp___dynamic_invariant_192(temp___expr_197, temp___is_init_193,
  temp___skip_constant_194, temp___do_toplevel_195, temp___do_typ_inv_196))))

predicate default_initial_assumption(temp___expr_198: us_rep1,
  temp___skip_top_level_199: bool) =
  ((temp___expr_198).rec__use_my_map__T1b__is_null_pointer = true)

predicate dynamic_invariant3(temp___expr_204: us_rep2,
  temp___is_init_200: bool, temp___skip_constant_201: bool,
  temp___do_toplevel_202: bool, temp___do_typ_inv_203: bool) =
  ((not ((((temp___expr_204).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__is_null_pointer = true)) and
  ((not ((((temp___expr_204).us_split_fields1).rec__my_map__map__next).rec__use_my_map__T1b__is_null_pointer = true)) ->
  ((not ((((rec__use_my_map__T1b__pointer_value(((temp___expr_204).us_split_fields1).rec__my_map__map__next)).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__is_null_pointer = true)) and
  temp___dynamic_invariant_192(((rec__use_my_map__T1b__pointer_value(((temp___expr_204).us_split_fields1).rec__my_map__map__next)).us_split_fields1).rec__my_map__map__next,
  true, false, true, temp___do_typ_inv_203))))

predicate default_initial_assumption1(temp___expr_205: us_rep2,
  temp___skip_top_level_206: bool) =
  (((((temp___expr_205).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__is_null_pointer = true) and
  ((((temp___expr_205).us_split_fields1).rec__my_map__map__next).rec__use_my_map__T1b__is_null_pointer = true))

axiom model_value__def_axiom :
  (forall m:us_rep1.
  (forall k1:int [model_value(m, k1)].
  ((((not ((m).rec__use_my_map__T1b__is_null_pointer = true)) ->
  dynamic_invariant3(rec__use_my_map__T1b__pointer_value(m), true, false,
  true, true)) and dynamic_invariant1(k1, true, true, true, true)) ->
  (model_value(m,
  k1) = (if (to_rep1(((rec__use_my_map__T1b__pointer_value(m)).us_split_fields1).rec__my_map__map__key) = k1) then to_rep((((rec__use_my_map__T1b__pointer_value(m)).us_split_fields1).rec__my_map__map__value).rec__my_map__int_acc__pointer_value) else model_value(((rec__use_my_map__T1b__pointer_value(m)).us_split_fields1).rec__my_map__map__next,
  k1))))))

logic dummy8 : us_rep1

type t19s__ref = { t19s__content : us_rep1
}

function t19s__ref_t19s__content__projection(a: t19s__ref) : us_rep1 =
  (a).t19s__content

logic dummy9 : us_rep

type t20s__ref = { t20s__content : us_rep
}

function t20s__ref_t20s__content__projection(a: t20s__ref) : us_rep =
  (a).t20s__content

logic reference : us_rep1, int -> us_rep

logic reference__function_guard : us_rep, us_rep1, int -> prop

type us_pledge_ty

type us_pledge_ty__ref = { us_pledge_ty__content : us_pledge_ty
}

logic us_pledge_get : us_pledge_ty, us_rep1, us_rep -> bool

logic my_map__reference__pledge : us_rep1, int -> us_pledge_ty

logic dummy10 : us_rep

type t5b__ref = { t5b__content : us_rep
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : us_rep =
  (a).t5b__content

logic x__pointer_address : int

logic x__is_null_pointer : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

type us_pledge_ty1

type us_pledge_ty__ref1 = { us_pledge_ty__content1 : us_pledge_ty1
}

logic us_pledge_get1 : us_pledge_ty1, us_rep1, us_rep -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : natural, natural -> bool

logic dummy11 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_39))

axiom model_value__post_axiom :
  (forall m:us_rep1.
  (forall k1:int [model_value(m, k1)].
  (((((not ((m).rec__use_my_map__T1b__is_null_pointer = true)) ->
  dynamic_invariant3(rec__use_my_map__T1b__pointer_value(m), true, false,
  true, true)) and dynamic_invariant1(k1, true, true, true, true)) and
  (model_contains(m, k1) = true)) -> dynamic_invariant(model_value(m, k1),
  true, false, true, true))))

axiom has_element__def_axiom :
  (forall m:us_rep2.
  (forall k1:int [has_element(m, k1)]. ((has_element(m, k1) = true) ->
  (not (k1 = 0)))))

axiom has_element__def_axiom1 :
  (forall m:us_rep2.
  (forall k1:int [has_element(m, k1)]. ((has_element(m, k1) = true) ->
  ((to_rep1(((m).us_split_fields1).rec__my_map__map__key) = k1) or
  (model_contains(((m).us_split_fields1).rec__my_map__map__next,
  k1) = true)))))

axiom has_element__def_axiom2 :
  (forall m:us_rep2.
  (forall k1:int [has_element(m, k1)]. (((not (k1 = 0)) and
  ((to_rep1(((m).us_split_fields1).rec__my_map__map__key) = k1) or
  (model_contains(((m).us_split_fields1).rec__my_map__map__next,
  k1) = true))) -> (has_element(m, k1) = true))))

predicate dynamic_invariant5(temp___expr_184: us_rep,
  temp___is_init_180: bool, temp___skip_constant_181: bool,
  temp___do_toplevel_182: bool, temp___do_typ_inv_183: bool) =
  (not ((temp___expr_184).rec__my_map__int_acc__is_null_pointer = true))

predicate default_initial_assumption2(temp___expr_185: us_rep,
  temp___skip_top_level_186: bool) =
  ((temp___expr_185).rec__my_map__int_acc__is_null_pointer = true)

 (* File "use_my_map.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall m__pointer_value:us_split_fields.
  (((not (m__is_null_pointer = true)) ->
  dynamic_invariant3(rec__use_my_map__T1b__pointer_value({
  rec__use_my_map__T1b__is_null_pointer = m__is_null_pointer;
  rec__use_my_map__T1b__pointer_address = m__pointer_address;
  rec__use_my_map__T1b__pointer_value_abstr = us_close({ us_split_fields1 =
  m__pointer_value }) }), true, false, true, true)) -> (dynamic_invariant1(k,
  true, false, true, true) -> (dynamic_invariant(v, true, false, true,
  true) -> ((model_contains({ rec__use_my_map__T1b__is_null_pointer =
  m__is_null_pointer; rec__use_my_map__T1b__pointer_address =
  m__pointer_address; rec__use_my_map__T1b__pointer_value_abstr = us_close({
  us_split_fields1 = m__pointer_value }) }, k) = true) -> (let o = k : int in
  (let o1 = { rec__use_my_map__T1b__is_null_pointer = m__is_null_pointer;
  rec__use_my_map__T1b__pointer_address = m__pointer_address;
  rec__use_my_map__T1b__pointer_value_abstr = us_close({ us_split_fields1 =
  m__pointer_value }) } : us_rep1 in
  (let use_my_map__my_replace_element__x__assume = reference(o1, o)
  : us_rep in
  (((not ((use_my_map__my_replace_element__x__assume).rec__my_map__int_acc__is_null_pointer = true)) and
  (let us_result_pledge = my_map__reference__pledge(o1, o) : us_pledge_ty in
  (((model_value(o1,
  o) = to_rep((use_my_map__my_replace_element__x__assume).rec__my_map__int_acc__pointer_value)) and
  (forall temp___borrowed_211:us_rep1.
  (forall temp___brower_210:us_rep [us_pledge_get(us_result_pledge,
  temp___borrowed_211, temp___brower_210)].
  ((((us_pledge_get(us_result_pledge, temp___borrowed_211,
  temp___brower_210) = true) and
  (not ((temp___brower_210).rec__my_map__int_acc__is_null_pointer = true))) and
  ((m__is_null_pointer = (temp___borrowed_211).rec__use_my_map__T1b__is_null_pointer) and
  ((use_my_map__my_replace_element__x__assume).rec__my_map__int_acc__is_null_pointer = (temp___brower_210).rec__my_map__int_acc__is_null_pointer))) ->
  ((model_contains(temp___borrowed_211, o) = true) and
  (model_value(temp___borrowed_211,
  o) = to_rep((temp___brower_210).rec__my_map__int_acc__pointer_value))))))) and
  (us_pledge_get(us_result_pledge, o1,
  use_my_map__my_replace_element__x__assume) = true)))) ->
  (forall usf:us_pledge_ty1.
  ((forall temp___borrowed_214:us_rep1.
   (forall temp___brower_212:us_rep [us_pledge_get1(usf, temp___borrowed_214,
   temp___brower_212)]. (us_pledge_get1(usf, temp___borrowed_214,
   temp___brower_212) = (if (exists temp___borrowed_213:us_rep1.
                            ((m__is_null_pointer = (temp___borrowed_213).rec__use_my_map__T1b__is_null_pointer) and
                            (andb((if (temp___borrowed_214 = temp___borrowed_213) then true else false),
                            andb(us_pledge_get(my_map__reference__pledge({
                            rec__use_my_map__T1b__is_null_pointer =
                            m__is_null_pointer;
                            rec__use_my_map__T1b__pointer_address =
                            m__pointer_address;
                            rec__use_my_map__T1b__pointer_value_abstr =
                            us_close({ us_split_fields1 = m__pointer_value })
                            }, k), temp___borrowed_213, temp___brower_212),
                            (if ((not ((temp___borrowed_213).rec__use_my_map__T1b__is_null_pointer = true)) ->
                            dynamic_invariant3(rec__use_my_map__T1b__pointer_value(temp___borrowed_213),
                            true, false, true,
                            true)) then true else false))) = true))) then true else false)))) ->
  (forall use_my_map__my_replace_element__x__pledge:us_pledge_ty1.
  ((use_my_map__my_replace_element__x__pledge = usf) ->
  (forall x__pointer_value:integer.
  ((x__pointer_value = (use_my_map__my_replace_element__x__assume).rec__my_map__int_acc__pointer_value) ->
  ((x__pointer_address = (use_my_map__my_replace_element__x__assume).rec__my_map__int_acc__pointer_address) ->
  ((x__is_null_pointer = (use_my_map__my_replace_element__x__assume).rec__my_map__int_acc__is_null_pointer) ->
  (forall o2:integer. ((to_rep(o2) = v) ->
  (forall x__pointer_value1:integer. ((x__pointer_value1 = o2) ->
  (forall usf1:us_rep1.
  (((((not ((usf1).rec__use_my_map__T1b__is_null_pointer = true)) ->
  dynamic_invariant3(rec__use_my_map__T1b__pointer_value(usf1), true, false,
  true, true)) and (us_pledge_get1(use_my_map__my_replace_element__x__pledge,
  usf1, { rec__my_map__int_acc__is_null_pointer = x__is_null_pointer;
  rec__my_map__int_acc__pointer_address = x__pointer_address;
  rec__my_map__int_acc__pointer_value = x__pointer_value1 }) = true)) and
  (m__is_null_pointer = (usf1).rec__use_my_map__T1b__is_null_pointer)) ->
  (forall m__pointer_value1:us_split_fields. (({ us_split_fields1 =
  m__pointer_value1 } = rec__use_my_map__T1b__pointer_value(usf1)) ->
  (let o3 = k : int in (let o4 = { rec__use_my_map__T1b__is_null_pointer =
  m__is_null_pointer; rec__use_my_map__T1b__pointer_address =
  m__pointer_address; rec__use_my_map__T1b__pointer_value_abstr = us_close({
  us_split_fields1 = m__pointer_value1 }) } : us_rep1 in (let o5 =
  model_contains(o4, o3) : bool in (((o5 = true) <-> ((not (bool_eq4(o4,
  us_null_pointer1) = true)) and
  (has_element(rec__use_my_map__T1b__pointer_value(o4), o3) = true))) ->
  ((o5 = true) -> (model_contains({ rec__use_my_map__T1b__is_null_pointer =
  m__is_null_pointer; rec__use_my_map__T1b__pointer_address =
  m__pointer_address; rec__use_my_map__T1b__pointer_value_abstr = us_close({
  us_split_fields1 = m__pointer_value1 }) }, k) = true)))))))))))))))))))))))))))))))
