(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic au__first : integer

logic au__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic ad__first : integer

logic ad__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

type us_split_discrs = { rec__test_globals__my_rec__d : natural
}

function us_split_discrs_rec__test_globals__my_rec__d__projection(a: us_split_discrs) : natural =
  (a).rec__test_globals__my_rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test_globals__my_rec__f : natural
}

function us_split_fields_rec__test_globals__my_rec__f__projection(a: us_split_fields) : natural =
  (a).rec__test_globals__my_rec__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__test_globals__my_rec__d) = to_rep(((b).us_split_discrs1).rec__test_globals__my_rec__d)) and
  (to_rep(((a).us_split_fields1).rec__test_globals__my_rec__f) = to_rep(((b).us_split_fields1).rec__test_globals__my_rec__f))) then true else false)

predicate in_range3(rec__test_globals__my_rec__d1: int, a: us_split_discrs) =
  (rec__test_globals__my_rec__d1 = to_rep((a).rec__test_globals__my_rec__d))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_globals__my_rec__d__first__bit : int

logic test_globals__my_rec__d__last__bit : int

logic test_globals__my_rec__d__position : int

axiom test_globals__my_rec__d__first__bit_axiom :
  (0 <= test_globals__my_rec__d__first__bit)

axiom test_globals__my_rec__d__last__bit_axiom :
  (test_globals__my_rec__d__first__bit <  test_globals__my_rec__d__last__bit)

axiom test_globals__my_rec__d__position_axiom :
  (0 <= test_globals__my_rec__d__position)

logic test_globals__my_rec__f__first__bit : int

logic test_globals__my_rec__f__last__bit : int

logic test_globals__my_rec__f__position : int

axiom test_globals__my_rec__f__first__bit_axiom :
  (0 <= test_globals__my_rec__f__first__bit)

axiom test_globals__my_rec__f__last__bit_axiom :
  (test_globals__my_rec__f__first__bit <  test_globals__my_rec__f__last__bit)

axiom test_globals__my_rec__f__position_axiom :
  (0 <= test_globals__my_rec__f__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref_my_rec__content__projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

logic ru__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS4 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic test_globals__my_rec__d__first__bit1 : int

logic test_globals__my_rec__d__last__bit1 : int

logic test_globals__my_rec__d__position1 : int

axiom test_globals__my_rec__d__first__bit_axiom1 :
  (0 <= test_globals__my_rec__d__first__bit1)

axiom test_globals__my_rec__d__last__bit_axiom1 :
  (test_globals__my_rec__d__first__bit1 <  test_globals__my_rec__d__last__bit1)

axiom test_globals__my_rec__d__position_axiom1 :
  (0 <= test_globals__my_rec__d__position1)

logic test_globals__my_rec__f__first__bit1 : int

logic test_globals__my_rec__f__last__bit1 : int

logic test_globals__my_rec__f__position1 : int

axiom test_globals__my_rec__f__first__bit_axiom1 :
  (0 <= test_globals__my_rec__f__first__bit1)

axiom test_globals__my_rec__f__last__bit_axiom1 :
  (test_globals__my_rec__f__first__bit1 <  test_globals__my_rec__f__last__bit1)

axiom test_globals__my_rec__f__position_axiom1 :
  (0 <= test_globals__my_rec__f__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type my_rec_stat__ref = { my_rec_stat__content : us_rep
}

function my_rec_stat__ref_my_rec_stat__content__projection(a: my_rec_stat__ref) : us_rep =
  (a).my_rec_stat__content

logic rs__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_invariant1(temp___expr_192: us_rep,
  temp___is_init_188: bool, temp___skip_constant_189: bool,
  temp___do_toplevel_190: bool, temp___do_typ_inv_191: bool) =
  ((not (temp___skip_constant_189 = true)) -> in_range3(100,
  (temp___expr_192).us_split_discrs1))

predicate default_initial_assumption(temp___expr_194: us_rep,
  temp___skip_top_level_195: bool) =
  (to_rep(((temp___expr_194).us_split_discrs1).rec__test_globals__my_rec__d) = 100)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test_globals__my_rec__d__first__bit2 : int

logic test_globals__my_rec__d__last__bit2 : int

logic test_globals__my_rec__d__position2 : int

axiom test_globals__my_rec__d__first__bit_axiom2 :
  (0 <= test_globals__my_rec__d__first__bit2)

axiom test_globals__my_rec__d__last__bit_axiom2 :
  (test_globals__my_rec__d__first__bit2 <  test_globals__my_rec__d__last__bit2)

axiom test_globals__my_rec__d__position_axiom2 :
  (0 <= test_globals__my_rec__d__position2)

logic test_globals__my_rec__f__first__bit2 : int

logic test_globals__my_rec__f__last__bit2 : int

logic test_globals__my_rec__f__position2 : int

axiom test_globals__my_rec__f__first__bit_axiom2 :
  (0 <= test_globals__my_rec__f__first__bit2)

axiom test_globals__my_rec__f__last__bit_axiom2 :
  (test_globals__my_rec__f__first__bit2 <  test_globals__my_rec__f__last__bit2)

axiom test_globals__my_rec__f__position_axiom2 :
  (0 <= test_globals__my_rec__f__position2)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type my_rec_dyn__ref = { my_rec_dyn__content : us_rep
}

function my_rec_dyn__ref_my_rec_dyn__content__projection(a: my_rec_dyn__ref) : us_rep =
  (a).my_rec_dyn__content

logic rd__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant2(temp___expr_202: us_rep,
  temp___is_init_198: bool, temp___skip_constant_199: bool,
  temp___do_toplevel_200: bool, temp___do_typ_inv_201: bool) =
  ((not (temp___skip_constant_199 = true)) -> in_range3(c,
  (temp___expr_202).us_split_discrs1))

predicate default_initial_assumption1(temp___expr_204: us_rep,
  temp___skip_top_level_205: bool) =
  (to_rep(((temp___expr_204).us_split_discrs1).rec__test_globals__my_rec__d) = c)

logic nested_with_globals : us_split_fields, (int,natural) farray,
  us_split_fields, (int,natural) farray, us_split_fields,
  (int,natural) farray -> bool

logic nested_with_globals__function_guard : bool, us_split_fields,
  (int,natural) farray, us_split_fields, (int,natural) farray,
  us_split_fields, (int,natural) farray -> prop

axiom nested_with_globals__def_axiom :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)]. ((nested_with_globals(test_globals__ru__fields,
  test_globals__au, test_globals__rs__fields, test_globals__as,
  test_globals__rd__fields, test_globals__ad) = true) -> ((0 <  c) ->
  (to_rep((test_globals__au[1])) = 0)))))))

axiom nested_with_globals__def_axiom1 :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)]. ((nested_with_globals(test_globals__ru__fields,
  test_globals__au, test_globals__rs__fields, test_globals__as,
  test_globals__rd__fields, test_globals__ad) = true) -> ((0 <  c) ->
  (to_rep((test_globals__as[1])) = 0)))))))

axiom nested_with_globals__def_axiom2 :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)]. ((nested_with_globals(test_globals__ru__fields,
  test_globals__au, test_globals__rs__fields, test_globals__as,
  test_globals__rd__fields, test_globals__ad) = true) -> ((0 <  c) ->
  (to_rep((test_globals__ad[1])) = 0)))))))

axiom nested_with_globals__def_axiom3 :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)]. ((nested_with_globals(test_globals__ru__fields,
  test_globals__au, test_globals__rs__fields, test_globals__as,
  test_globals__rd__fields, test_globals__ad) = true) -> ((not (0 <  c)) ->
  (to_rep((({ us_split_discrs1 = ru__split_discrs; us_split_fields1 =
  test_globals__ru__fields
  }).us_split_fields1).rec__test_globals__my_rec__f) = 0)))))))

axiom nested_with_globals__def_axiom4 :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)]. ((nested_with_globals(test_globals__ru__fields,
  test_globals__au, test_globals__rs__fields, test_globals__as,
  test_globals__rd__fields, test_globals__ad) = true) -> ((not (0 <  c)) ->
  (to_rep((({ us_split_discrs1 = rs__split_discrs; us_split_fields1 =
  test_globals__rs__fields
  }).us_split_fields1).rec__test_globals__my_rec__f) = 0)))))))

axiom nested_with_globals__def_axiom5 :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)]. ((nested_with_globals(test_globals__ru__fields,
  test_globals__au, test_globals__rs__fields, test_globals__as,
  test_globals__rd__fields, test_globals__ad) = true) -> ((not (0 <  c)) ->
  (to_rep((({ us_split_discrs1 = rd__split_discrs; us_split_fields1 =
  test_globals__rd__fields
  }).us_split_fields1).rec__test_globals__my_rec__f) = 0)))))))

axiom nested_with_globals__def_axiom6 :
  (forall test_globals__ru__fields:us_split_fields.
  (forall test_globals__au:(int,natural) farray.
  forall test_globals__as:(int,natural) farray.
  forall test_globals__ad:(int,natural) farray.
  (forall test_globals__rs__fields:us_split_fields.
  (forall test_globals__rd__fields:us_split_fields
  [nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad)].
  ((if (0 <  c) then (((to_rep((test_globals__au[1])) = 0) and
  (to_rep((test_globals__as[1])) = 0)) and
  (to_rep((test_globals__ad[1])) = 0)) else (((to_rep((({ us_split_discrs1 =
  ru__split_discrs; us_split_fields1 = test_globals__ru__fields
  }).us_split_fields1).rec__test_globals__my_rec__f) = 0) and (to_rep((({
  us_split_discrs1 = rs__split_discrs; us_split_fields1 =
  test_globals__rs__fields
  }).us_split_fields1).rec__test_globals__my_rec__f) = 0)) and (to_rep((({
  us_split_discrs1 = rd__split_discrs; us_split_fields1 =
  test_globals__rd__fields
  }).us_split_fields1).rec__test_globals__my_rec__f) = 0))) ->
  (nested_with_globals(test_globals__ru__fields, test_globals__au,
  test_globals__rs__fields, test_globals__as, test_globals__rd__fields,
  test_globals__ad) = true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size3 : int

logic object__size3 : int

logic component__size : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom3 : (0 <= alignment3)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type my_array__ref = { my_array__content : us_t
}

function my_array__ref_my_array__content__projection(a: my_array__ref) : us_t =
  (a).my_array__content

type my_array_dyn__ref = { my_array_dyn__content : us_t
}

function my_array_dyn__ref_my_array_dyn__content__projection(a: my_array_dyn__ref) : us_t =
  (a).my_array_dyn__content

type t4b__ref = { t4b__content : us_t
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_t =
  (a).t4b__content

type t8b__ref = { t8b__content : us_t
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : us_t =
  (a).t8b__content

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic test_globals__my_rec__d__first__bit3 : int

logic test_globals__my_rec__d__last__bit3 : int

logic test_globals__my_rec__d__position3 : int

axiom test_globals__my_rec__d__first__bit_axiom3 :
  (0 <= test_globals__my_rec__d__first__bit3)

axiom test_globals__my_rec__d__last__bit_axiom3 :
  (test_globals__my_rec__d__first__bit3 <  test_globals__my_rec__d__last__bit3)

axiom test_globals__my_rec__d__position_axiom3 :
  (0 <= test_globals__my_rec__d__position3)

logic test_globals__my_rec__f__first__bit3 : int

logic test_globals__my_rec__f__last__bit3 : int

logic test_globals__my_rec__f__position3 : int

axiom test_globals__my_rec__f__first__bit_axiom3 :
  (0 <= test_globals__my_rec__f__first__bit3)

axiom test_globals__my_rec__f__last__bit_axiom3 :
  (test_globals__my_rec__f__first__bit3 <  test_globals__my_rec__f__last__bit3)

axiom test_globals__my_rec__f__position_axiom3 :
  (0 <= test_globals__my_rec__f__position3)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type t9b__ref = { t9b__content : us_rep
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : us_rep =
  (a).t9b__content

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic test_globals__my_rec__d__first__bit4 : int

logic test_globals__my_rec__d__last__bit4 : int

logic test_globals__my_rec__d__position4 : int

axiom test_globals__my_rec__d__first__bit_axiom4 :
  (0 <= test_globals__my_rec__d__first__bit4)

axiom test_globals__my_rec__d__last__bit_axiom4 :
  (test_globals__my_rec__d__first__bit4 <  test_globals__my_rec__d__last__bit4)

axiom test_globals__my_rec__d__position_axiom4 :
  (0 <= test_globals__my_rec__d__position4)

logic test_globals__my_rec__f__first__bit4 : int

logic test_globals__my_rec__f__last__bit4 : int

logic test_globals__my_rec__f__position4 : int

axiom test_globals__my_rec__f__first__bit_axiom4 :
  (0 <= test_globals__my_rec__f__first__bit4)

axiom test_globals__my_rec__f__last__bit_axiom4 :
  (test_globals__my_rec__f__first__bit4 <  test_globals__my_rec__f__last__bit4)

axiom test_globals__my_rec__f__position_axiom4 :
  (0 <= test_globals__my_rec__f__position4)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type t10b__ref = { t10b__content : us_rep
}

function t10b__ref_t10b__content__projection(a: t10b__ref) : us_rep =
  (a).t10b__content

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic test_globals__my_rec__d__first__bit5 : int

logic test_globals__my_rec__d__last__bit5 : int

logic test_globals__my_rec__d__position5 : int

axiom test_globals__my_rec__d__first__bit_axiom5 :
  (0 <= test_globals__my_rec__d__first__bit5)

axiom test_globals__my_rec__d__last__bit_axiom5 :
  (test_globals__my_rec__d__first__bit5 <  test_globals__my_rec__d__last__bit5)

axiom test_globals__my_rec__d__position_axiom5 :
  (0 <= test_globals__my_rec__d__position5)

logic test_globals__my_rec__f__first__bit5 : int

logic test_globals__my_rec__f__last__bit5 : int

logic test_globals__my_rec__f__position5 : int

axiom test_globals__my_rec__f__first__bit_axiom5 :
  (0 <= test_globals__my_rec__f__first__bit5)

axiom test_globals__my_rec__f__last__bit_axiom5 :
  (test_globals__my_rec__f__first__bit5 <  test_globals__my_rec__f__last__bit5)

axiom test_globals__my_rec__f__position_axiom5 :
  (0 <= test_globals__my_rec__f__position5)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type t11b__ref = { t11b__content : us_rep
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_rep =
  (a).t11b__content

logic test_globals__au__aggregate_def : int, int, int -> us_t

logic test_globals__as__aggregate_def : int -> (int,natural) farray

logic test_globals__ad__aggregate_def : int, int, int -> us_t

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant4(temp___expr_160: us_t, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = ((not (temp___skip_constant_157 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_160),
  last1(temp___expr_160)))

predicate dynamic_invariant5(temp___expr_176: us_t, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = ((not (temp___skip_constant_173 = true)) ->
  (dynamic_property(1, c, first1(temp___expr_176),
  last1(temp___expr_176)) and ((first1(temp___expr_176) = 1) and
  (last1(temp___expr_176) = c))))

predicate default_initial_assumption2(temp___expr_178: us_t,
  temp___skip_top_level_179: bool) = ((first1(temp___expr_178) = 1) and
  (last1(temp___expr_178) = c))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  (dynamic_invariant(temp___227, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___228, temp___229) ->
  (first1(test_globals__au__aggregate_def(temp___227, temp___228,
  temp___229)) = temp___228))))

axiom def_axiom1 :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  (dynamic_invariant(temp___227, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___228, temp___229) ->
  (last1(test_globals__au__aggregate_def(temp___227, temp___228,
  temp___229)) = temp___229))))

axiom def_axiom2 :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  (dynamic_invariant(temp___227, true, true, true, true) ->
  (forall temp___230:int.
  ((to_array(test_globals__au__aggregate_def(temp___227, temp___228,
  temp___229))[temp___230]) = rliteral))))

axiom def_axiom3 :
  (forall temp___235:int. (dynamic_invariant(temp___235, true, true, true,
  true) ->
  (forall temp___236:int.
  ((test_globals__as__aggregate_def(temp___235)[temp___236]) = rliteral))))

axiom def_axiom4 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  (dynamic_invariant(temp___238, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___239, temp___240) ->
  (first1(test_globals__ad__aggregate_def(temp___238, temp___239,
  temp___240)) = temp___239))))

axiom def_axiom5 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  (dynamic_invariant(temp___238, true, true, true, true) ->
  (dynamic_property(0, 2147483647, temp___239, temp___240) ->
  (last1(test_globals__ad__aggregate_def(temp___238, temp___239,
  temp___240)) = temp___240))))

axiom def_axiom6 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  (dynamic_invariant(temp___238, true, true, true, true) ->
  (forall temp___241:int.
  ((to_array(test_globals__ad__aggregate_def(temp___238, temp___239,
  temp___240))[temp___241]) = rliteral))))

 (* File "test_globals.adb", line 1, characters 0-0 *)
goal defqtvc : (dynamic_invariant(c, true, false, true, true) ->
  (in_range1(100) -> (in_range1(c) -> (let temp___231 =
  test_globals__au__aggregate_def(0, 1, c) : us_t in
  ((first1(temp___231) = 1) -> ((last1(temp___231) = c) ->
  (let test_globals__au__assume = of_array(to_array(temp___231),
  first1(temp___231), last1(temp___231)) : us_t in
  (forall au:(int,natural) farray.
  ((au = to_array(test_globals__au__assume)) ->
  ((to_rep1(au__first) = first1(test_globals__au__assume)) ->
  ((to_rep1(au__last) = last1(test_globals__au__assume)) ->
  (dynamic_property(0, 2147483647, to_rep1(au__first), to_rep1(au__last)) ->
  (forall as__:(int,natural) farray.
  ((as__ = test_globals__as__aggregate_def(0)) -> (let temp___242 =
  test_globals__ad__aggregate_def(0, 1, c) : us_t in
  ((first1(temp___242) = 1) -> ((last1(temp___242) = c) ->
  ((first1(temp___242) <= last1(temp___242)) -> (1 <= c)))))))))))))))))))
