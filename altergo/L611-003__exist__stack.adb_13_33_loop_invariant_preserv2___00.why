(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type element_t

logic element_tqtint : element_t -> int

axiom element_tqtaxiom : (forall i:element_t. ((- 1) <= element_tqtint(i)))

axiom element_tqtaxiom1 :
  (forall i:element_t. (element_tqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element_t, element_t -> bool

logic dummy : element_t

type element_t__ref = { element_t__content : element_t
}

function element_t__ref_element_t__content__projection(a: element_t__ref) : element_t =
  (a).element_t__content

function to_rep(x: element_t) : int = element_tqtint(x)

logic of_rep : int -> element_t

axiom inversion_axiom :
  (forall x:element_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,element_t) farray
}

logic slide : (int,element_t) farray, int, int -> (int,element_t) farray

axiom slide_eq :
  (forall a:(int,element_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,element_t) farray, a__first: int, a__last: int,
  b: (int,element_t) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic valid : (int,element_t) farray, int -> bool

logic valid__function_guard : bool, (int,element_t) farray, int -> prop

type size_t

logic size_tqtint : size_t -> int

axiom size_tqtaxiom : (forall i:size_t. (0 <= size_tqtint(i)))

axiom size_tqtaxiom1 : (forall i:size_t. (size_tqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : size_t, size_t -> bool

logic dummy1 : size_t

type size_t__ref = { size_t__content : size_t
}

function size_t__ref_size_t__content__projection(a: size_t__ref) : size_t =
  (a).size_t__content

predicate dynamic_invariant(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 100)) -> in_range2(temp___expr_163))

axiom valid__def_axiom :
  (forall t:(int,element_t) farray.
  (forall s:int [valid(t, s)]. ((valid(t, s) = true) ->
  (forall i:int. (((1 <= i) and (i <= s)) -> (0 <= to_rep((t[i]))))))))

axiom valid__def_axiom1 :
  (forall t:(int,element_t) farray.
  (forall s:int [valid(t, s)]. ((valid(t, s) = true) ->
  (forall i:int. (((1 <= i) and (i <= s)) -> (to_rep((t[i])) <= 2147483647))))))

axiom valid__def_axiom2 :
  (forall t:(int,element_t) farray.
  (forall s:int [valid(t, s)]. ((valid(t, s) = true) ->
  (forall i:int. ((((s + 1) <= i) and (i <= 100)) ->
  (to_rep((t[i])) = (- 1)))))))

axiom valid__def_axiom3 :
  (forall t:(int,element_t) farray.
  (forall s:int [valid(t, s)].
  (((forall i:int. (((1 <= i) and (i <= s)) -> ((0 <= to_rep((t[i]))) and
    (to_rep((t[i])) <= 2147483647)))) and
  (forall i:int. ((((s + 1) <= i) and (i <= 100)) ->
  (to_rep((t[i])) = (- 1))))) -> (valid(t, s) = true))))

logic t : (int,element_t) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type index_t

logic index_tqtint : index_t -> int

axiom index_tqtaxiom : (forall i:index_t. (1 <= index_tqtint(i)))

axiom index_tqtaxiom1 : (forall i:index_t. (index_tqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_t, index_t -> bool

logic dummy2 : index_t

type index_t__ref = { index_t__content : index_t
}

function index_t__ref_index_t__content__projection(a: index_t__ref) : index_t =
  (a).index_t__content

type t1b

logic t1bqtint : t1b -> int

axiom t1bqtaxiom : (forall i:t1b. (1 <= t1bqtint(i)))

axiom t1bqtaxiom1 : (forall i:t1b. (t1bqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : t1b, t1b -> bool

logic dummy3 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : t1b =
  (a).t1b__content

predicate dynamic_invariant1(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  ((- 1) <= 2147483647)) -> in_range1(temp___expr_170))

predicate dynamic_invariant2(temp___expr_177: int, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  (1 <= 100)) -> in_range3(temp___expr_177))

 (* File "stack.ads", line 17, characters 0-0 *)
goal defqtvc : ((forall s:int. valid__function_guard(valid(t, s), t, s)) ->
  ((exists s:int. (((0 <= s) and (s <= 100)) and (valid(t, s) = true))) ->
  (forall index:int. ((index = 1) ->
  ((andb((if (1 <= index) then true else false),
  (if (index <= 100) then true else false)) = true) ->
  (forall index1:int.
  ((forall i:int. (((1 <= i) and (i <= (index1 - 1))) ->
   (not (to_rep((t[i])) = (- 1))))) ->
  ((andb((if in_range4(index1) then true else false), (if ((1 <= index1) and
  (index1 <= 100)) then true else false)) = true) ->
  (forall o:int. ((to_rep((t[index1])) = o) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o = (- 1)) then true else false)) ->
  ((not (spark__branch = true)) -> ((not (index1 = 100)) ->
  (forall index2:int. ((index2 = (index1 + 1)) ->
  (forall i:int. (((1 <= i) and (i <= (index2 - 1))) ->
  (not (to_rep((t[i])) = (- 1)))))))))))))))))))))
