(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_rep = { rec__use_formal_vectors__element_type__is_null_pointer :
bool; rec__use_formal_vectors__element_type__pointer_address : int;
rec__use_formal_vectors__element_type__pointer_value : integer
}

function us_rep_rec__use_formal_vectors__element_type__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__use_formal_vectors__element_type__is_null_pointer

function us_rep_rec__use_formal_vectors__element_type__pointer_address__projection(a: us_rep) : int =
  (a).rec__use_formal_vectors__element_type__pointer_address

function us_rep_rec__use_formal_vectors__element_type__pointer_value__projection(a: us_rep) : integer =
  (a).rec__use_formal_vectors__element_type__pointer_value

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__use_formal_vectors__element_type__is_null_pointer = (b).rec__use_formal_vectors__element_type__is_null_pointer) and
  ((not ((a).rec__use_formal_vectors__element_type__is_null_pointer = true)) ->
  (((a).rec__use_formal_vectors__element_type__pointer_address = (b).rec__use_formal_vectors__element_type__pointer_address) and
  ((a).rec__use_formal_vectors__element_type__pointer_value = (b).rec__use_formal_vectors__element_type__pointer_value)))) then true else false)

predicate rec__use_formal_vectors__element_type__pointer_value__pred(a: us_rep) =
  (not ((a).rec__use_formal_vectors__element_type__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__use_formal_vectors__element_type__is_null_pointer = true)

logic dummy3 : us_rep

type element_type__ref = { element_type__content : us_rep
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : us_rep =
  (a).element_type__content

type us_rep1 = {
rec__use_formal_vectors__my_vect__element_access__is_null_pointer : bool;
rec__use_formal_vectors__my_vect__element_access__pointer_address : int;
rec__use_formal_vectors__my_vect__element_access__pointer_value : us_rep
}

function us_rep_rec__use_formal_vectors__my_vect__element_access__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__use_formal_vectors__my_vect__element_access__is_null_pointer

function us_rep_rec__use_formal_vectors__my_vect__element_access__pointer_address__projection(a: us_rep1) : int =
  (a).rec__use_formal_vectors__my_vect__element_access__pointer_address

function us_rep_rec__use_formal_vectors__my_vect__element_access__pointer_value__projection(a: us_rep1) : us_rep =
  (a).rec__use_formal_vectors__my_vect__element_access__pointer_value

type us_rep__ref1 = { us_rep__content1 : us_rep1
}

function us_rep__ref___rep__content__2__projection(a: us_rep__ref1) : us_rep1 =
  (a).us_rep__content1

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = (b).rec__use_formal_vectors__my_vect__element_access__is_null_pointer) and
  ((not ((a).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)) ->
  (((a).rec__use_formal_vectors__my_vect__element_access__pointer_address = (b).rec__use_formal_vectors__my_vect__element_access__pointer_address) and
  ((a).rec__use_formal_vectors__my_vect__element_access__pointer_value = (b).rec__use_formal_vectors__my_vect__element_access__pointer_value)))) then true else false)

predicate rec__use_formal_vectors__my_vect__element_access__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true))

logic us_null_pointer1 : us_rep1

axiom us_null_pointer__def_axiom1 :
  ((us_null_pointer1).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)

logic dummy4 : us_rep1

type element_access__ref = { element_access__content : us_rep1
}

function element_access__ref_element_access__content__projection(a: element_access__ref) : us_rep1 =
  (a).element_access__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq5((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq5((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep1) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep1) farray = (a).elts

function of_array(a: (int,us_rep1) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy5 : us_t

type element_array__ref = { element_array__content : us_t
}

function element_array__ref_element_array__content__projection(a: element_array__ref) : us_t =
  (a).element_array__content

type us_rep2 = {
rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer :
bool; rec__use_formal_vectors__my_vect__element_array_access__pointer_address
: int; rec__use_formal_vectors__my_vect__element_array_access__pointer_value
: us_t
}

function us_rep_rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer__projection(a: us_rep2) : bool =
  (a).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer

function us_rep_rec__use_formal_vectors__my_vect__element_array_access__pointer_address__projection(a: us_rep2) : int =
  (a).rec__use_formal_vectors__my_vect__element_array_access__pointer_address

function us_rep_rec__use_formal_vectors__my_vect__element_array_access__pointer_value__projection(a: us_rep2) : us_t =
  (a).rec__use_formal_vectors__my_vect__element_array_access__pointer_value

type us_rep__ref2 = { us_rep__content2 : us_rep2
}

function us_rep__ref___rep__content__3__projection(a: us_rep__ref2) : us_rep2 =
  (a).us_rep__content2

function bool_eq8(a: us_rep2, b: us_rep2) : bool =
  (if (((a).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = (b).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer) and
  ((not ((a).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true)) ->
  (((a).rec__use_formal_vectors__my_vect__element_array_access__pointer_address = (b).rec__use_formal_vectors__my_vect__element_array_access__pointer_address) and
  ((a).rec__use_formal_vectors__my_vect__element_array_access__pointer_value = (b).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)))) then true else false)

predicate rec__use_formal_vectors__my_vect__element_array_access__pointer_value__pred(a: us_rep2) =
  (not ((a).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true))

logic us_null_pointer2 : us_rep2

axiom us_null_pointer__def_axiom2 :
  ((us_null_pointer2).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true)

logic dummy6 : us_rep2

type element_array_access__ref = { element_array_access__content : us_rep2
}

function element_array_access__ref_element_array_access__content__projection(a: element_array_access__ref) : us_rep2 =
  (a).element_array_access__content

type us_split_fields = { rec__use_formal_vectors__my_vect__vector__top :
natural; rec__use_formal_vectors__my_vect__vector__content : us_rep2
}

function us_split_fields_rec__use_formal_vectors__my_vect__vector__top__projection(a: us_split_fields) : natural =
  (a).rec__use_formal_vectors__my_vect__vector__top

function us_split_fields_rec__use_formal_vectors__my_vect__vector__content__projection(a: us_split_fields) : us_rep2 =
  (a).rec__use_formal_vectors__my_vect__vector__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep3 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep3) : us_split_fields =
  (a).us_split_fields1

function bool_eq9(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = to_rep(((b).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top)) and
  (bool_eq8(((a).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content,
  ((b).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic use_formal_vectors__my_vect__vector__top__first__bit : int

logic use_formal_vectors__my_vect__vector__top__last__bit : int

logic use_formal_vectors__my_vect__vector__top__position : int

axiom use_formal_vectors__my_vect__vector__top__first__bit_axiom :
  (0 <= use_formal_vectors__my_vect__vector__top__first__bit)

axiom use_formal_vectors__my_vect__vector__top__last__bit_axiom :
  (use_formal_vectors__my_vect__vector__top__first__bit <  use_formal_vectors__my_vect__vector__top__last__bit)

axiom use_formal_vectors__my_vect__vector__top__position_axiom :
  (0 <= use_formal_vectors__my_vect__vector__top__position)

logic use_formal_vectors__my_vect__vector__content__first__bit : int

logic use_formal_vectors__my_vect__vector__content__last__bit : int

logic use_formal_vectors__my_vect__vector__content__position : int

axiom use_formal_vectors__my_vect__vector__content__first__bit_axiom :
  (0 <= use_formal_vectors__my_vect__vector__content__first__bit)

axiom use_formal_vectors__my_vect__vector__content__last__bit_axiom :
  (use_formal_vectors__my_vect__vector__content__first__bit <  use_formal_vectors__my_vect__vector__content__last__bit)

axiom use_formal_vectors__my_vect__vector__content__position_axiom :
  (0 <= use_formal_vectors__my_vect__vector__content__position)

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy7 : us_rep3

type vector__ref = { vector__content : us_rep3
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep3 =
  (a).vector__content

predicate dynamic_invariant(temp___expr_246: us_rep3,
  temp___is_init_242: bool, temp___skip_constant_243: bool,
  temp___do_toplevel_244: bool, temp___do_typ_inv_245: bool) =
  (((temp___do_toplevel_244 = true) ->
  ((to_rep(((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = 0) or
  (((not (bool_eq8(((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content,
  us_null_pointer2) = true)) and
  (to_rep(((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) <= last1((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value))) and
  (forall i:int. (((1 <= i) and
  (i <= to_rep(((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top))) ->
  (not (bool_eq5((to_array((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)[i]),
  us_null_pointer1) = true))))))) and
  ((not ((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true)) ->
  (dynamic_property(1, 2147483647,
  first1((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value),
  last1((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)) and
  (forall temp___249:int.
  (((first1((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value) <= temp___249) and
  (temp___249 <= last1((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value))) ->
  ((not (((to_array((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)[temp___249])).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)) ->
  (not ((((to_array((((temp___expr_246).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)[temp___249])).rec__use_formal_vectors__my_vect__element_access__pointer_value).rec__use_formal_vectors__element_type__is_null_pointer = true))))))))

predicate default_initial_assumption(temp___expr_250: us_rep3,
  temp___skip_top_level_251: bool) =
  ((to_rep(((temp___expr_250).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = 0) and
  ((((temp___expr_250).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true))

predicate dynamic_predicate(temp___253: us_rep3) =
  ((to_rep(((temp___253).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = 0) or
  (((not (bool_eq8(((temp___253).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content,
  us_null_pointer2) = true)) and
  (to_rep(((temp___253).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) <= last1((((temp___253).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value))) and
  (forall i:int. (((1 <= i) and
  (i <= to_rep(((temp___253).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top))) ->
  (not (bool_eq5((to_array((((temp___253).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)[i]),
  us_null_pointer1) = true))))))

logic i72s : us_rep3

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant4(temp___expr_225: us_rep1,
  temp___is_init_221: bool, temp___skip_constant_222: bool,
  temp___do_toplevel_223: bool, temp___do_typ_inv_224: bool) =
  ((not ((temp___expr_225).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)) ->
  (not (((temp___expr_225).rec__use_formal_vectors__my_vect__element_access__pointer_value).rec__use_formal_vectors__element_type__is_null_pointer = true)))

predicate default_initial_assumption1(temp___expr_226: us_rep1,
  temp___skip_top_level_227: bool) =
  ((temp___expr_226).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)

predicate dynamic_invariant5(temp___expr_232: us_t, temp___is_init_228: bool,
  temp___skip_constant_229: bool, temp___do_toplevel_230: bool,
  temp___do_typ_inv_231: bool) = (((not (temp___skip_constant_229 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_232),
  last1(temp___expr_232))) and
  (forall temp___233:int. (((first1(temp___expr_232) <= temp___233) and
  (temp___233 <= last1(temp___expr_232))) ->
  ((not (((to_array(temp___expr_232)[temp___233])).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)) ->
  (not ((((to_array(temp___expr_232)[temp___233])).rec__use_formal_vectors__my_vect__element_access__pointer_value).rec__use_formal_vectors__element_type__is_null_pointer = true))))))

predicate dynamic_invariant6(temp___expr_238: us_rep2,
  temp___is_init_234: bool, temp___skip_constant_235: bool,
  temp___do_toplevel_236: bool, temp___do_typ_inv_237: bool) =
  ((not ((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true)) ->
  (dynamic_property(1, 2147483647,
  first1((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__pointer_value),
  last1((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)) and
  (forall temp___239:int.
  (((first1((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__pointer_value) <= temp___239) and
  (temp___239 <= last1((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__pointer_value))) ->
  ((not (((to_array((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)[temp___239])).rec__use_formal_vectors__my_vect__element_access__is_null_pointer = true)) ->
  (not ((((to_array((temp___expr_238).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)[temp___239])).rec__use_formal_vectors__my_vect__element_access__pointer_value).rec__use_formal_vectors__element_type__is_null_pointer = true)))))))

predicate default_initial_assumption2(temp___expr_240: us_rep2,
  temp___skip_top_level_241: bool) =
  ((temp___expr_240).rec__use_formal_vectors__my_vect__element_array_access__is_null_pointer = true)

predicate dynamic_invariant7(temp___expr_211: us_rep,
  temp___is_init_207: bool, temp___skip_constant_208: bool,
  temp___do_toplevel_209: bool, temp___do_typ_inv_210: bool) =
  (not ((temp___expr_211).rec__use_formal_vectors__element_type__is_null_pointer = true))

predicate default_initial_assumption3(temp___expr_212: us_rep,
  temp___skip_top_level_213: bool) =
  ((temp___expr_212).rec__use_formal_vectors__element_type__is_null_pointer = true)

 (* File "formal_vectors.ads", line 60, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i72s, true, false, false, true) ->
  (forall o:int.
  ((to_rep(((i72s).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = o) ->
  ((not (o = 0)) ->
  (forall o1:bool.
  ((if (notb(bool_eq8(((i72s).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content,
  us_null_pointer2)) = true) then (exists o2:int.
                                  ((to_rep(((i72s).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = o2) and
                                  (o1 = (if (o2 <= last1((((i72s).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value)) then true else false)))) else (o1 = false)) ->
  ((o1 = true) ->
  (forall usf:int.
  (forall o2:int.
  ((to_rep(((i72s).us_split_fields1).rec__use_formal_vectors__my_vect__vector__top) = o2) ->
  ((andb((if (1 <= usf) then true else false),
  (if (usf <= o2) then true else false)) = true) ->
  (first1((((i72s).us_split_fields1).rec__use_formal_vectors__my_vect__vector__content).rec__use_formal_vectors__my_vect__element_array_access__pointer_value) <= usf))))))))))))
