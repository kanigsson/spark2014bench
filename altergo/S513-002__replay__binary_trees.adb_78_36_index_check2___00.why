(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type extended_index_type

logic extended_index_typeqtint : extended_index_type -> int

axiom extended_index_typeqtaxiom :
  (forall i:extended_index_type. (0 <= extended_index_typeqtint(i)))

axiom extended_index_typeqtaxiom1 :
  (forall i:extended_index_type. (extended_index_typeqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : extended_index_type, extended_index_type -> bool

logic dummy : extended_index_type

type extended_index_type__ref = { extended_index_type__content :
extended_index_type
}

function extended_index_type__ref_extended_index_type__content__projection(a: extended_index_type__ref) : extended_index_type =
  (a).extended_index_type__content

function to_rep(x: extended_index_type) : int = extended_index_typeqtint(x)

logic of_rep : int -> extended_index_type

axiom inversion_axiom :
  (forall x:extended_index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:extended_index_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type position_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : position_type, position_type -> bool

logic dummy1 : position_type

type position_type__ref = { position_type__content : position_type
}

function position_type__ref_position_type__content__projection(a: position_type__ref) : position_type =
  (a).position_type__content

logic to_rep1 : position_type -> int

logic of_rep1 : int -> position_type

axiom inversion_axiom1 :
  (forall x:position_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:position_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__binary_trees__cell__left : extended_index_type;
rec__binary_trees__cell__right : extended_index_type;
rec__binary_trees__cell__parent : extended_index_type;
rec__binary_trees__cell__position : position_type
}

function us_split_fields_rec__binary_trees__cell__left__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__left

function us_split_fields_rec__binary_trees__cell__right__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__right

function us_split_fields_rec__binary_trees__cell__parent__projection(a: us_split_fields) : extended_index_type =
  (a).rec__binary_trees__cell__parent

function us_split_fields_rec__binary_trees__cell__position__projection(a: us_split_fields) : position_type =
  (a).rec__binary_trees__cell__position

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__binary_trees__cell__left) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep(((a).us_split_fields1).rec__binary_trees__cell__right) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__right))) and
  ((to_rep(((a).us_split_fields1).rec__binary_trees__cell__parent) = to_rep(((b).us_split_fields1).rec__binary_trees__cell__parent)) and
  (to_rep1(((a).us_split_fields1).rec__binary_trees__cell__position) = to_rep1(((b).us_split_fields1).rec__binary_trees__cell__position)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic binary_trees__cell__left__first__bit : int

logic binary_trees__cell__left__last__bit : int

logic binary_trees__cell__left__position : int

axiom binary_trees__cell__left__first__bit_axiom :
  (0 <= binary_trees__cell__left__first__bit)

axiom binary_trees__cell__left__last__bit_axiom :
  (binary_trees__cell__left__first__bit <  binary_trees__cell__left__last__bit)

axiom binary_trees__cell__left__position_axiom :
  (0 <= binary_trees__cell__left__position)

logic binary_trees__cell__right__first__bit : int

logic binary_trees__cell__right__last__bit : int

logic binary_trees__cell__right__position : int

axiom binary_trees__cell__right__first__bit_axiom :
  (0 <= binary_trees__cell__right__first__bit)

axiom binary_trees__cell__right__last__bit_axiom :
  (binary_trees__cell__right__first__bit <  binary_trees__cell__right__last__bit)

axiom binary_trees__cell__right__position_axiom :
  (0 <= binary_trees__cell__right__position)

logic binary_trees__cell__parent__first__bit : int

logic binary_trees__cell__parent__last__bit : int

logic binary_trees__cell__parent__position : int

axiom binary_trees__cell__parent__first__bit_axiom :
  (0 <= binary_trees__cell__parent__first__bit)

axiom binary_trees__cell__parent__last__bit_axiom :
  (binary_trees__cell__parent__first__bit <  binary_trees__cell__parent__last__bit)

axiom binary_trees__cell__parent__position_axiom :
  (0 <= binary_trees__cell__parent__position)

logic binary_trees__cell__position__first__bit : int

logic binary_trees__cell__position__last__bit : int

logic binary_trees__cell__position__position : int

axiom binary_trees__cell__position__first__bit_axiom :
  (0 <= binary_trees__cell__position__first__bit)

axiom binary_trees__cell__position__last__bit_axiom :
  (binary_trees__cell__position__first__bit <  binary_trees__cell__position__last__bit)

axiom binary_trees__cell__position__position_axiom :
  (0 <= binary_trees__cell__position__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type cell__ref = { cell__content : us_rep
}

function cell__ref_cell__content__projection(a: cell__ref) : us_rep =
  (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy3 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__binary_trees__forest__s : extended_index_type;
rec__binary_trees__forest__c : (int,us_rep) farray
}

function us_split_fields_rec__binary_trees__forest__s__projection(a: us_split_fields2) : extended_index_type =
  (a).rec__binary_trees__forest__s

function us_split_fields_rec__binary_trees__forest__c__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__binary_trees__forest__c

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__binary_trees__forest__s) = to_rep(((b).us_split_fields3).rec__binary_trees__forest__s)) and
  (bool_eq4(((a).us_split_fields3).rec__binary_trees__forest__c, 1, 100,
  ((b).us_split_fields3).rec__binary_trees__forest__c, 1,
  100) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic binary_trees__forest__s__first__bit : int

logic binary_trees__forest__s__last__bit : int

logic binary_trees__forest__s__position : int

axiom binary_trees__forest__s__first__bit_axiom :
  (0 <= binary_trees__forest__s__first__bit)

axiom binary_trees__forest__s__last__bit_axiom :
  (binary_trees__forest__s__first__bit <  binary_trees__forest__s__last__bit)

axiom binary_trees__forest__s__position_axiom :
  (0 <= binary_trees__forest__s__position)

logic binary_trees__forest__c__first__bit : int

logic binary_trees__forest__c__last__bit : int

logic binary_trees__forest__c__position : int

axiom binary_trees__forest__c__first__bit_axiom :
  (0 <= binary_trees__forest__c__first__bit)

axiom binary_trees__forest__c__last__bit_axiom :
  (binary_trees__forest__c__first__bit <  binary_trees__forest__c__last__bit)

axiom binary_trees__forest__c__position_axiom :
  (0 <= binary_trees__forest__c__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type forest__ref = { forest__content : us_rep1
}

function forest__ref_forest__content__projection(a: forest__ref) : us_rep1 =
  (a).forest__content

logic f : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : index_type, index_type -> bool

logic dummy5 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

logic size : us_rep1 -> int

logic size__function_guard : int, us_rep1 -> prop

logic tree_structure : us_rep1 -> bool

logic tree_structure__function_guard : bool, us_rep1 -> prop

predicate default_initial_assumption(temp___expr_229: us_rep1,
  temp___skip_top_level_230: bool) =
  (((to_rep(((temp___expr_229).us_split_fields3).rec__binary_trees__forest__s) = 0) and
  (forall temp___232:int. (((1 <= temp___232) and (temp___232 <= 100)) ->
  (((to_rep((((((temp___expr_229).us_split_fields3).rec__binary_trees__forest__c[temp___232])).us_split_fields1).rec__binary_trees__cell__left) = 0) and
  (to_rep((((((temp___expr_229).us_split_fields3).rec__binary_trees__forest__c[temp___232])).us_split_fields1).rec__binary_trees__cell__right) = 0)) and
  ((to_rep((((((temp___expr_229).us_split_fields3).rec__binary_trees__forest__c[temp___232])).us_split_fields1).rec__binary_trees__cell__parent) = 0) and
  (to_rep1((((((temp___expr_229).us_split_fields3).rec__binary_trees__forest__c[temp___232])).us_split_fields1).rec__binary_trees__cell__position) = 2)))))) and
  ((not (temp___skip_top_level_230 = true)) -> (size(temp___expr_229) = 0)))

predicate type_invariant(temp___235: us_rep1) =
  (tree_structure(temp___235) = true)

predicate dynamic_invariant(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (0 <= 100)) -> in_range1(temp___expr_182))

axiom size__post_axiom :
  (forall f1:us_rep1 [size(f1)]. (type_invariant(f1) ->
  dynamic_invariant(size(f1), true, false, true, true)))

axiom size__def_axiom :
  (forall f1:us_rep1 [size(f1)].
  (size(f1) = to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s)))

predicate default_initial_assumption1(temp___expr_211: us_rep,
  temp___skip_top_level_212: bool) =
  (((to_rep(((temp___expr_211).us_split_fields1).rec__binary_trees__cell__left) = 0) and
  (to_rep(((temp___expr_211).us_split_fields1).rec__binary_trees__cell__right) = 0)) and
  ((to_rep(((temp___expr_211).us_split_fields1).rec__binary_trees__cell__parent) = 0) and
  (to_rep1(((temp___expr_211).us_split_fields1).rec__binary_trees__cell__position) = 2)))

predicate default_initial_assumption2(temp___expr_219: (int,us_rep) farray,
  temp___skip_top_level_220: bool) =
  (forall temp___221:int. (((1 <= temp___221) and (temp___221 <= 100)) ->
  (((to_rep((((temp___expr_219[temp___221])).us_split_fields1).rec__binary_trees__cell__left) = 0) and
  (to_rep((((temp___expr_219[temp___221])).us_split_fields1).rec__binary_trees__cell__right) = 0)) and
  ((to_rep((((temp___expr_219[temp___221])).us_split_fields1).rec__binary_trees__cell__parent) = 0) and
  (to_rep1((((temp___expr_219[temp___221])).us_split_fields1).rec__binary_trees__cell__position) = 2)))))

logic rliteral : extended_index_type

axiom rliteral_axiom : (extended_index_typeqtint(rliteral) = 0)

axiom tree_structure__def_axiom :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int.
  ((((to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s) + 1) <= i) and
  (i <= 100)) ->
  (bool_eq3((((f1).us_split_fields3).rec__binary_trees__forest__c[i]), {
  us_split_fields1 = { rec__binary_trees__cell__left = rliteral;
  rec__binary_trees__cell__right = rliteral;
  rec__binary_trees__cell__parent = rliteral;
  rec__binary_trees__cell__position = of_rep1(2) } }) = true)))))

axiom tree_structure__def_axiom1 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (0 <= to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent))))))

axiom tree_structure__def_axiom2 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) <= to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s))))))

axiom tree_structure__def_axiom3 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (0 <= to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left))))))

axiom tree_structure__def_axiom4 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) <= to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s))))))

axiom tree_structure__def_axiom5 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (0 <= to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right))))))

axiom tree_structure__def_axiom6 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) <= to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s))))))

axiom tree_structure__def_axiom7 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 2) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0))))))

axiom tree_structure__def_axiom8 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) = 0)) ->
  (to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__position) = 0))))))

axiom tree_structure__def_axiom9 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) = 0)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__parent) = i))))))

axiom tree_structure__def_axiom10 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) = 0)) ->
  (to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__position) = 1))))))

axiom tree_structure__def_axiom11 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) = 0)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__parent) = i))))))

axiom tree_structure__def_axiom12 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 0)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__left) = i))))))

axiom tree_structure__def_axiom13 :
  (forall f1:us_rep1 [tree_structure(f1)]. ((tree_structure(f1) = true) ->
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 1)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__right) = i))))))

axiom tree_structure__def_axiom14 :
  (forall f1:us_rep1 [tree_structure(f1)].
  ((((((((((forall i:int.
           ((((to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s) + 1) <= i) and
           (i <= 100)) ->
           (bool_eq3((((f1).us_split_fields3).rec__binary_trees__forest__c[i]),
           { us_split_fields1 = { rec__binary_trees__cell__left = rliteral;
           rec__binary_trees__cell__right = rliteral;
           rec__binary_trees__cell__parent = rliteral;
           rec__binary_trees__cell__position = of_rep1(2) } }) = true))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)) and
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) <= to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)) and
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) <= to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((0 <= to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)) and
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) <= to_rep(((f1).us_split_fields3).rec__binary_trees__forest__s)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 2) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) = 0)) ->
  ((to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__position) = 0) and
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  ((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) = 0)) ->
  ((to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__position) = 1) and
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__parent) = i)))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 0)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__left) = i))))) and
  (forall i:int. (((1 <= i) and (i <= 100)) ->
  (((not (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
  (to_rep1((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 1)) ->
  (to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f1).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__right) = i))))) ->
  (tree_structure(f1) = true)))

predicate dynamic_invariant1(temp___expr_196: int, temp___is_init_192: bool,
  temp___skip_constant_193: bool, temp___do_toplevel_194: bool,
  temp___do_typ_inv_195: bool) = (((temp___is_init_192 = true) or
  (1 <= 100)) -> in_range3(temp___expr_196))

predicate dynamic_invariant2(temp___expr_203: int, temp___is_init_199: bool,
  temp___skip_constant_200: bool, temp___do_toplevel_201: bool,
  temp___do_typ_inv_202: bool) = (((temp___is_init_199 = true) or
  (0 <= 2)) -> in_range2(temp___expr_203))

 (* File "binary_trees.ads", line 36, characters 0-0 *)
goal defqtvc :
  (forall o:bool.
  ((exists o1:bool.
   ((exists o2:bool.
    ((exists o3:bool.
     ((exists o4:bool.
      ((exists o5:bool.
       ((exists o6:bool.
        (((exists o7:int.
          (to_rep(((f).us_split_fields3).rec__binary_trees__forest__s) = o7)) and
        (if (forall i:int.
            ((((to_rep(((f).us_split_fields3).rec__binary_trees__forest__s) + 1) <= i) and
            (i <= 100)) ->
            (bool_eq3((((f).us_split_fields3).rec__binary_trees__forest__c[i]),
            { us_split_fields1 = { rec__binary_trees__cell__left = rliteral;
            rec__binary_trees__cell__right = rliteral;
            rec__binary_trees__cell__parent = rliteral;
            rec__binary_trees__cell__position = of_rep1(2) } }) = true))) then (o6 = (if 
        (forall i:int. (((1 <= i) and (i <= 100)) ->
        ((0 <= to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)) and
        (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) <= to_rep(((f).us_split_fields3).rec__binary_trees__forest__s))))) then true else false)) else (o6 = false))) and
        (if (o6 = true) then (o5 = (if (forall i:int. (((1 <= i) and
                                       (i <= 100)) ->
                                       ((0 <= to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)) and
                                       (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) <= to_rep(((f).us_split_fields3).rec__binary_trees__forest__s))))) then true else false)) else (o5 = false)))) and
       (if (o5 = true) then (o4 = (if (forall i:int. (((1 <= i) and
                                      (i <= 100)) ->
                                      ((0 <= to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)) and
                                      (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) <= to_rep(((f).us_split_fields3).rec__binary_trees__forest__s))))) then true else false)) else (o4 = false)))) and
      (if (o4 = true) then (o3 = (if (forall i:int. (((1 <= i) and
                                     (i <= 100)) ->
                                     ((to_rep1((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 2) ->
                                     (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0)))) then true else false)) else (o3 = false)))) and
     (if (o3 = true) then (o2 = (if (forall i:int. (((1 <= i) and
                                    (i <= 100)) ->
                                    ((not (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left) = 0)) ->
                                    ((to_rep1((((((f).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__position) = 0) and
                                    (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__left)])).us_split_fields1).rec__binary_trees__cell__parent) = i))))) then true else false)) else (o2 = false)))) and
    (if (o2 = true) then (o1 = (if (forall i:int. (((1 <= i) and
                                   (i <= 100)) ->
                                   ((not (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right) = 0)) ->
                                   ((to_rep1((((((f).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__position) = 1) and
                                   (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__right)])).us_split_fields1).rec__binary_trees__cell__parent) = i))))) then true else false)) else (o1 = false)))) and
   (if (o1 = true) then (o = (if (forall i:int. (((1 <= i) and (i <= 100)) ->
                                 (((not (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent) = 0)) and
                                 (to_rep1((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__position) = 0)) ->
                                 (to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[i])).us_split_fields1).rec__binary_trees__cell__parent)])).us_split_fields1).rec__binary_trees__cell__left) = i)))) then true else false)) else (o = false)))) ->
  ((o = true) ->
  (forall usf:int. ((andb((if (1 <= usf) then true else false),
  (if (usf <= 100) then true else false)) = true) ->
  (forall o1:bool.
  ((exists o2:int.
   ((to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[usf])).us_split_fields1).rec__binary_trees__cell__parent) = o2) and
   (if (not (o2 = 0)) then (exists o3:int.
                           ((to_rep1((((((f).us_split_fields3).rec__binary_trees__forest__c[usf])).us_split_fields1).rec__binary_trees__cell__position) = o3) and
                           (o1 = (if (o3 = 1) then true else false)))) else (o1 = false)))) ->
  ((o1 = true) ->
  (forall temp___376:int.
  ((to_rep((((((f).us_split_fields3).rec__binary_trees__forest__c[usf])).us_split_fields1).rec__binary_trees__cell__parent) = temp___376) ->
  (1 <= temp___376)))))))))))
