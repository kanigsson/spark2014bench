(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__composite_cursors__rec_cursor__content :
natural
}

function us_split_fields_rec__composite_cursors__rec_cursor__content__projection(a: us_split_fields) : natural =
  (a).rec__composite_cursors__rec_cursor__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__composite_cursors__rec_cursor__content) = to_rep(((b).us_split_fields1).rec__composite_cursors__rec_cursor__content)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic composite_cursors__rec_cursor__content__first__bit : int

logic composite_cursors__rec_cursor__content__last__bit : int

logic composite_cursors__rec_cursor__content__position : int

axiom composite_cursors__rec_cursor__content__first__bit_axiom :
  (0 <= composite_cursors__rec_cursor__content__first__bit)

axiom composite_cursors__rec_cursor__content__last__bit_axiom :
  (composite_cursors__rec_cursor__content__first__bit <  composite_cursors__rec_cursor__content__last__bit)

axiom composite_cursors__rec_cursor__content__position_axiom :
  (0 <= composite_cursors__rec_cursor__content__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type rec_cursor__ref = { rec_cursor__content : us_rep
}

function rec_cursor__ref_rec_cursor__content__projection(a: rec_cursor__ref) : us_rep =
  (a).rec_cursor__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy3 : (int,natural) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields2 = { rec__composite_cursors__cont2__content :
(int,natural) farray; rec__composite_cursors__cont2__length : natural
}

function us_split_fields_rec__composite_cursors__cont2__content__projection(a: us_split_fields2) : (int,natural) farray =
  (a).rec__composite_cursors__cont2__content

function us_split_fields_rec__composite_cursors__cont2__length__projection(a: us_split_fields2) : natural =
  (a).rec__composite_cursors__cont2__length

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq3(((a).us_split_fields3).rec__composite_cursors__cont2__content,
  1, 100, ((b).us_split_fields3).rec__composite_cursors__cont2__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields3).rec__composite_cursors__cont2__length) = to_rep(((b).us_split_fields3).rec__composite_cursors__cont2__length))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic composite_cursors__cont2__content__first__bit : int

logic composite_cursors__cont2__content__last__bit : int

logic composite_cursors__cont2__content__position : int

axiom composite_cursors__cont2__content__first__bit_axiom :
  (0 <= composite_cursors__cont2__content__first__bit)

axiom composite_cursors__cont2__content__last__bit_axiom :
  (composite_cursors__cont2__content__first__bit <  composite_cursors__cont2__content__last__bit)

axiom composite_cursors__cont2__content__position_axiom :
  (0 <= composite_cursors__cont2__content__position)

logic composite_cursors__cont2__length__first__bit : int

logic composite_cursors__cont2__length__last__bit : int

logic composite_cursors__cont2__length__position : int

axiom composite_cursors__cont2__length__first__bit_axiom :
  (0 <= composite_cursors__cont2__length__first__bit)

axiom composite_cursors__cont2__length__last__bit_axiom :
  (composite_cursors__cont2__length__first__bit <  composite_cursors__cont2__length__last__bit)

axiom composite_cursors__cont2__length__position_axiom :
  (0 <= composite_cursors__cont2__length__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type cont2__ref = { cont2__content : us_rep1
}

function cont2__ref_cont2__content__projection(a: cont2__ref) : us_rep1 =
  (a).cont2__content

logic c : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic p : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic has_element : us_rep1, us_rep -> bool

logic has_element__function_guard : bool, us_rep1, us_rep -> prop

predicate dynamic_invariant(temp___expr_240: us_rep1,
  temp___is_init_236: bool, temp___skip_constant_237: bool,
  temp___do_toplevel_238: bool, temp___do_typ_inv_239: bool) =
  ((temp___do_toplevel_238 = true) -> ((temp___is_init_236 = true) ->
  (to_rep(((temp___expr_240).us_split_fields3).rec__composite_cursors__cont2__length) <= 100)))

predicate dynamic_predicate(temp___249: us_rep1) =
  (to_rep(((temp___249).us_split_fields3).rec__composite_cursors__cont2__length) <= 100)

axiom has_element__def_axiom :
  (forall c1:us_rep1.
  (forall p1:us_rep [has_element(c1, p1)]. ((has_element(c1, p1) = true) ->
  (1 <= to_rep(((p1).us_split_fields1).rec__composite_cursors__rec_cursor__content)))))

axiom has_element__def_axiom1 :
  (forall c1:us_rep1.
  (forall p1:us_rep [has_element(c1, p1)]. ((has_element(c1, p1) = true) ->
  (to_rep(((p1).us_split_fields1).rec__composite_cursors__rec_cursor__content) <= to_rep(((c1).us_split_fields3).rec__composite_cursors__cont2__length)))))

axiom has_element__def_axiom2 :
  (forall c1:us_rep1.
  (forall p1:us_rep [has_element(c1, p1)].
  (((1 <= to_rep(((p1).us_split_fields1).rec__composite_cursors__rec_cursor__content)) and
  (to_rep(((p1).us_split_fields1).rec__composite_cursors__rec_cursor__content) <= to_rep(((c1).us_split_fields3).rec__composite_cursors__cont2__length))) ->
  (has_element(c1, p1) = true))))

logic i19s : us_rep1

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "composite_cursors.ads", line 49, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i19s, true, false, true, true) ->
  (dynamic_invariant(i19s, true, false, true, true) -> (dynamic_invariant(c,
  true, false, true, true) -> (has_element__function_guard(has_element(c, p),
  c, p) -> ((has_element(c, p) = true) ->
  (forall o:int.
  ((to_rep(((p).us_split_fields1).rec__composite_cursors__rec_cursor__content) = o) ->
  in_range((o + 1)))))))))
