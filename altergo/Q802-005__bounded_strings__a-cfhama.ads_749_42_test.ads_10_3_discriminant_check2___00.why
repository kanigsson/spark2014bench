(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test__scales_map__cursor__node : count_type
}

function us_split_fields_rec__test__scales_map__cursor__node__projection(a: us_split_fields) : count_type =
  (a).rec__test__scales_map__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__test__scales_map__cursor__node) = to_rep(((b).us_split_fields1).rec__test__scales_map__cursor__node)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test__scales_map__cursor__node__first__bit : int

logic test__scales_map__cursor__node__last__bit : int

logic test__scales_map__cursor__node__position : int

axiom test__scales_map__cursor__node__first__bit_axiom :
  (0 <= test__scales_map__cursor__node__first__bit)

axiom test__scales_map__cursor__node__last__bit_axiom :
  (test__scales_map__cursor__node__first__bit <  test__scales_map__cursor__node__last__bit)

axiom test__scales_map__cursor__node__position_axiom :
  (0 <= test__scales_map__cursor__node__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq3 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type map__ref = { map__content : us_rep1
}

function map__ref_map__content__2__projection(a: map__ref) : us_rep1 =
  (a).map__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : natural, natural -> bool

logic dummy3 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : positive, positive -> bool

logic dummy4 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep2(x: positive) : int = positiveqtint(x)

logic of_rep2 : int -> positive

axiom inversion_axiom2 :
  (forall x:positive [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:positive [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type character

predicate in_range5(x: int) = ((0 <= x) and (x <= 255))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : character, character -> bool

logic dummy6 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep3 : character -> int

logic of_rep3 : int -> character

axiom inversion_axiom3 :
  (forall x:character [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:character [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep3((a[temp___idx_91])) = to_rep3((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep3((a[temp___idx_91])) = to_rep3((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep4(x: integer) : int = integerqtint(x)

logic of_rep4 : int -> integer

axiom inversion_axiom4 :
  (forall x:integer [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:integer [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  (to_rep4(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  (to_rep4(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range4(low) and (in_range4(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep4(first((a).rt))

function last1(a: us_t) : int = to_rep4(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq8((x).elts,
  to_rep4(first((x).rt)), to_rep4(last((x).rt)), (y).elts,
  to_rep4(first((y).rt)), to_rep4(last((y).rt)))

logic user_eq7 : us_t, us_t -> bool

logic dummy7 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type t2s__ref = { t2s__content : us_t
}

function t2s__ref_t2s__content__projection(a: t2s__ref) : us_t =
  (a).t2s__content

type us_split_discrs = {
rec__ada___ada___ada__strings__superbounded__super_string__max_length :
positive
}

function us_split_discrs_rec__ada___ada___ada__strings__superbounded__super_string__max_length__projection(a: us_split_discrs) : positive =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__max_length

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = {
rec__ada___ada___ada__strings__superbounded__super_string__current_length :
natural; rec__ada___ada___ada__strings__superbounded__super_string__data :
us_t
}

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__projection(a: us_split_fields2) : natural =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__current_length

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__projection(a: us_split_fields2) : us_t =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq10(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep2(((a).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length) = to_rep2(((b).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length)) and
  ((to_rep1(((a).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length) = to_rep1(((b).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length)) and
  (bool_eq9(((a).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data,
  ((b).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data) = true))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic ada___ada___ada__strings__superbounded__super_string__max_length__first__bit : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__last__bit : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__position : int

axiom ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__first__bit)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom :
  (ada___ada___ada__strings__superbounded__super_string__max_length__first__bit <  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__position)

logic ada___ada___ada__strings__superbounded__super_string__current_length__first__bit : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__last__bit : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__position : int

axiom ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__first__bit)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom :
  (ada___ada___ada__strings__superbounded__super_string__current_length__first__bit <  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__position)

logic ada___ada___ada__strings__superbounded__super_string__data__first__bit : int

logic ada___ada___ada__strings__superbounded__super_string__data__last__bit : int

logic ada___ada___ada__strings__superbounded__super_string__data__position : int

axiom ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__first__bit)

axiom ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom :
  (ada___ada___ada__strings__superbounded__super_string__data__first__bit <  ada___ada___ada__strings__superbounded__super_string__data__last__bit)

axiom ada___ada___ada__strings__superbounded__super_string__data__position_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type super_string__ref = { super_string__content : us_rep2
}

function super_string__ref_super_string__content__projection(a: super_string__ref) : us_rep2 =
  (a).super_string__content

type tT92sP1

logic tT92sP1qtint : tT92sP1 -> int

axiom tT92sP1qtaxiom : (forall i:tT92sP1. (1 <= tT92sP1qtint(i)))

axiom tT92sP1qtaxiom1 : (forall i:tT92sP1. (tT92sP1qtint(i) <= 128))

predicate in_range6(x: int) = ((1 <= x) and (x <= 128))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : tT92sP1, tT92sP1 -> bool

logic dummy9 : tT92sP1

type tT92sP1__ref = { tT92sP1__content : tT92sP1
}

function tT92sP1__ref_tT92sP1__content__projection(a: tT92sP1__ref) : tT92sP1 =
  (a).tT92sP1__content

logic dummy10 : (int,character) farray

logic value__size4 : int

logic object__size4 : int

logic component__size1 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq10 : (int,character) farray, (int,character) farray -> bool

type us_split_fields4 = {
rec__ada___ada___ada__strings__superbounded__super_string__current_length1 :
natural; rec__ada___ada___ada__strings__superbounded__super_string__data1 :
(int,character) farray
}

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__3__projection(a: us_split_fields4) : natural =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__current_length1

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__3__projection(a: us_split_fields4) : (int,character) farray =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__data1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_discrs2 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep3) : us_rep2 = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields3 = {
  rec__ada___ada___ada__strings__superbounded__super_string__current_length =
  ((a).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__current_length1;
  rec__ada___ada___ada__strings__superbounded__super_string__data =
  of_array(((a).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__data1,
  1, 128) } }

function of_base(r: us_rep2) : us_rep3 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__ada___ada___ada__strings__superbounded__super_string__current_length1 =
  ((r).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length;
  rec__ada___ada___ada__strings__superbounded__super_string__data1 =
  to_array(((r).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data)
  } }

function bool_eq12(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep2(((a).us_split_discrs2).rec__ada___ada___ada__strings__superbounded__super_string__max_length) = to_rep2(((b).us_split_discrs2).rec__ada___ada___ada__strings__superbounded__super_string__max_length)) and
  ((to_rep1(((a).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__current_length1) = to_rep1(((b).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__current_length1)) and
  (bool_eq8(((a).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__data1,
  1, 128,
  ((b).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__data1,
  1, 128) = true))) then true else false)

predicate in_range7(rec__ada___ada___ada__strings__superbounded__super_string__max_length1: int,
  a: us_rep2) =
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length1 = to_rep2(((a).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__position1 : int

axiom ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom1 :
  (ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 <  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__position1)

logic ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__position1 : int

axiom ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom1 :
  (ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 <  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__position1)

logic ada___ada___ada__strings__superbounded__super_string__data__first__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__data__last__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__data__position1 : int

axiom ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__first__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom1 :
  (ada___ada___ada__strings__superbounded__super_string__data__first__bit1 <  ada___ada___ada__strings__superbounded__super_string__data__last__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__data__position_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__position1)

logic user_eq11 : us_rep3, us_rep3 -> bool

logic dummy11 : us_rep3

type bounded_string__ref = { bounded_string__content : us_rep3
}

function bounded_string__ref_bounded_string__content__projection(a: bounded_string__ref) : us_rep3 =
  (a).bounded_string__content

type key_type__ref = { key_type__content : us_rep3
}

function key_type__ref_key_type__content__2__projection(a: key_type__ref) : us_rep3 =
  (a).key_type__content

logic has_key : us_rep1, us_rep3 -> bool

logic has_key__function_guard : bool, us_rep1, us_rep3 -> prop

logic oeq : us_rep3, us_rep3 -> bool

logic oeq__function_guard : bool, us_rep3, us_rep3 -> prop

type key_type__ref1 = { key_type__content1 : us_rep3
}

function key_type__ref_key_type__content__projection(a: key_type__ref1) : us_rep3 =
  (a).key_type__content1

type t1

logic tqtint : t1 -> int

axiom tqtaxiom : (forall i:t1. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t1. (tqtint(i) <= 4294967295))

logic nth : t1, int -> bool

axiom nth_out_of_bound :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t1

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t1

logic ones : t1

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t1, t1 -> t1

axiom Nth_bw_and :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t1, t1 -> t1

axiom Nth_bw_or :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t1, t1 -> t1

axiom Nth_bw_xor :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t1 -> t1

axiom Nth_bw_not :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t1, int -> t1

axiom Lsr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t1. (lsr(x, 0) = x))

logic asr : t1, int -> t1

axiom Asr_nth_low :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t1. (asr(x, 0) = x))

logic lsl : t1, int -> t1

axiom Lsl_nth_high :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t1. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t1, int -> t1

axiom Nth_rotate_right :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t1, int -> t1

axiom Nth_rotate_left :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(4294967296 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t1. forall vqt:t1. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds : (forall v:t1. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t1. (tqtint(v) <  4294967296))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int1(i)) = i)))

logic size_bv : t1

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t1, y: t1) = (tqtint(x) <  tqtint(y))

predicate ule(x: t1, y: t1) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t1, y: t1) = (tqtint(y) <  tqtint(x))

predicate uge(x: t1, y: t1) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros :
  (forall x:t1. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t1. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t1, t1 -> t1

axiom to_uint_add_bounded :
  (forall v1:t1. forall v2:t1. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t1, t1 -> t1

axiom to_uint_sub_bounded :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t1 -> t1

axiom to_uint_neg :
  (forall v:t1. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t1, t1 -> t1

axiom to_uint_mul_bounded :
  (forall v1:t1. forall v2:t1. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t1, t1 -> t1

axiom to_uint_udiv :
  (forall v1:t1. forall v2:t1. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t1, t1 -> t1

axiom to_uint_urem :
  (forall v1:t1. forall v2:t1. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t1, t1 -> t1

axiom lsr_bv_is_lsr :
  (forall x:t1. forall n:t1. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t1. forall n:t1. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t1, t1 -> t1

axiom asr_bv_is_asr :
  (forall x:t1. forall n:t1. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t1, t1 -> t1

axiom lsl_bv_is_lsl :
  (forall x:t1. forall n:t1. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t1. forall n:t1. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t1, t1 -> t1

logic rotate_left_bv : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left :
  (forall v:t1. forall n:t1. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t1. forall n:t1. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t1, t1 -> bool

axiom Nth_bv_is_nth :
  (forall x:t1. forall i:t1. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int1(i)) = nth(x, i))))

logic eq_sub_bv : t1, t1, t1, t1 -> prop

predicate eq_sub(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub(a, b,
  tqtint(i), tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub_bv(a, b, i,
  n) -> eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t1. forall y:t1 [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t1
}

function bool_eq13(x: t1, y: t1) : bool = (if (x = y) then true else false)

function bool_ne(x: t1, y: t1) : bool =
  (if (not (x = y)) then true else false)

function bool_lt(x: t1, y: t1) : bool = (if ult(x, y) then true else false)

function bool_le(x: t1, y: t1) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t1, y: t1) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t1, y: t1) : bool = (if uge(x, y) then true else false)

logic power : t1, int -> t1

axiom Power_01 : (forall x:t1. (power(x, 0) = one))

axiom Power_11 : (forall x:t1. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t1. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t1, y: t1) : t1 = (if ule(x, y) then x else y)

function bv_max(x: t1, y: t1) : t1 = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t1. forall y:t1. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t1. forall y:t1. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type hash_type

logic attr__ATTRIBUTE_MODULUS : t1

function bool_eq14(x: t1, y: t1) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t1

logic user_eq12 : hash_type, hash_type -> bool

logic dummy12 : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref_hash_type__content__projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

logic to_rep5 : hash_type -> t1

logic of_rep5 : t1 -> hash_type

axiom inversion_axiom5 :
  (forall x:hash_type [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom coerce_axiom5 :
  (forall x:t1 [to_rep5(of_rep5(x))]. (to_rep5(of_rep5(x)) = x))

function to_int2(x: hash_type) : int = tqtint(to_rep5(x))

axiom range_int_axiom :
  (forall x:hash_type [to_int2(x)]. uint_in_range(to_int2(x)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs3 = { rec__test__scales_map__map__capacity : count_type;
rec__test__scales_map__map__modulus : hash_type
}

function us_split_discrs_rec__test__scales_map__map__capacity__projection(a: us_split_discrs3) : count_type =
  (a).rec__test__scales_map__map__capacity

function us_split_discrs_rec__test__scales_map__map__modulus__projection(a: us_split_discrs3) : hash_type =
  (a).rec__test__scales_map__map__modulus

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs3
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs3 =
  (a).us_split_discrs__content1

type us_split_fields6 = { rec__test__scales_map__map : us_main_type1
}

function us_split_fields_rec__test__scales_map__map__projection(a: us_split_fields6) : us_main_type1 =
  (a).rec__test__scales_map__map

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep4 = { us_split_discrs4 : us_split_discrs3; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__4__projection(a: us_rep4) : us_split_discrs3 =
  (a).us_split_discrs4

function us_rep___split_fields__4__projection(a: us_rep4) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq15(a: us_rep4, b: us_rep4) : bool =
  (if (((to_rep(((a).us_split_discrs4).rec__test__scales_map__map__capacity) = to_rep(((b).us_split_discrs4).rec__test__scales_map__map__capacity)) and
  (to_rep5(((a).us_split_discrs4).rec__test__scales_map__map__modulus) = to_rep5(((b).us_split_discrs4).rec__test__scales_map__map__modulus))) and
  (us_main_eq1(((a).us_split_fields7).rec__test__scales_map__map,
  ((b).us_split_fields7).rec__test__scales_map__map) = true)) then true else false)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic test__scales_map__map__capacity__first__bit : int

logic test__scales_map__map__capacity__last__bit : int

logic test__scales_map__map__capacity__position : int

axiom test__scales_map__map__capacity__first__bit_axiom :
  (0 <= test__scales_map__map__capacity__first__bit)

axiom test__scales_map__map__capacity__last__bit_axiom :
  (test__scales_map__map__capacity__first__bit <  test__scales_map__map__capacity__last__bit)

axiom test__scales_map__map__capacity__position_axiom :
  (0 <= test__scales_map__map__capacity__position)

logic test__scales_map__map__modulus__first__bit : int

logic test__scales_map__map__modulus__last__bit : int

logic test__scales_map__map__modulus__position : int

axiom test__scales_map__map__modulus__first__bit_axiom :
  (0 <= test__scales_map__map__modulus__first__bit)

axiom test__scales_map__map__modulus__last__bit_axiom :
  (test__scales_map__map__modulus__first__bit <  test__scales_map__map__modulus__last__bit)

axiom test__scales_map__map__modulus__position_axiom :
  (0 <= test__scales_map__map__modulus__position)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy13 : us_rep4

type map__ref2 = { map__content2 : us_rep4
}

function map__ref_map__content__projection(a: map__ref2) : us_rep4 =
  (a).map__content2

logic model : us_rep4 -> us_rep1

logic model__function_guard : us_rep1, us_rep4 -> prop

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic oeq1 : us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_370: us_rep1,
  temp___skip_top_level_371: bool) =
  ((not (temp___skip_top_level_371 = true)) ->
  ((is_empty(temp___expr_370) = true) and (length1(temp___expr_370) = 0)))

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard2 : bool, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq13(a, b)]. (user_eq13(a,
  b) = oeq2(a, b)))

logic container : us_rep4

logic attr__ATTRIBUTE_ADDRESS : int

logic key : us_rep3

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant2(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range5(temp___expr_74))

predicate dynamic_invariant3(temp___expr_284: us_rep2,
  temp___is_init_280: bool, temp___skip_constant_281: bool,
  temp___do_toplevel_282: bool, temp___do_typ_inv_283: bool) =
  (let temp___285 =
  ((temp___expr_284).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length
  : positive in (dynamic_property(1, to_rep2(temp___285),
  first1(((temp___expr_284).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data),
  last1(((temp___expr_284).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data)) and
  ((first1(((temp___expr_284).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data) = 1) and
  (last1(((temp___expr_284).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data) = to_rep2(temp___285)))))

logic rliteral : t1

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t1

axiom rliteral_axiom1 : (tqtint(rliteral1) = 4294967295)

predicate dynamic_invariant4(temp___expr_308: t1, temp___is_init_304: bool,
  temp___skip_constant_305: bool, temp___do_toplevel_306: bool,
  temp___do_typ_inv_307: bool) = true

predicate dynamic_invariant5(temp___expr_331: int, temp___is_init_327: bool,
  temp___skip_constant_328: bool, temp___do_toplevel_329: bool,
  temp___do_typ_inv_330: bool) = (((temp___is_init_327 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_331))

predicate dynamic_invariant6(temp___expr_291: us_rep3,
  temp___is_init_287: bool, temp___skip_constant_288: bool,
  temp___do_toplevel_289: bool, temp___do_typ_inv_290: bool) =
  ((not (temp___skip_constant_288 = true)) -> in_range7(128,
  to_base(temp___expr_291)))

predicate default_initial_assumption1(temp___expr_294: us_rep3,
  temp___skip_top_level_295: bool) =
  ((to_rep2(((temp___expr_294).us_split_discrs2).rec__ada___ada___ada__strings__superbounded__super_string__max_length) = 128) and
  (to_rep1(((temp___expr_294).us_split_fields5).rec__ada___ada___ada__strings__superbounded__super_string__current_length1) = 0))

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq11(a, b)]. (user_eq11(a,
  b) = oeq(of_base(to_base(a)), of_base(to_base(b)))))

logic witness : us_rep1, us_rep3 -> int

logic witness__function_guard : int, us_rep1, us_rep3 -> prop

logic w_get : us_rep1, int -> int

logic w_get__function_guard : int, us_rep1, int -> prop

logic get : us_rep1, us_rep3 -> int

logic get__function_guard : int, us_rep1, us_rep3 -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : element_type, element_type -> bool

logic dummy14 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant7(temp___expr_362: int, temp___is_init_358: bool,
  temp___skip_constant_359: bool, temp___do_toplevel_360: bool,
  temp___do_typ_inv_361: bool) = (((temp___is_init_358 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range8(temp___expr_362))

axiom get__post_axiom :
  (forall container1:us_rep1.
  (forall key1:us_rep3 [get(container1, key1)]. in_range8(get(container1,
  key1))))

axiom length__post_axiom :
  (forall container1:us_rep1 [length1(container1)].
  in_range1(length1(container1)))

logic has_witness : us_rep1, int -> bool

logic has_witness__function_guard : bool, us_rep1, int -> prop

axiom witness__post_axiom :
  (forall container1:us_rep1.
  (forall key1:us_rep3 [witness(container1, key1)].
  in_range1(witness(container1, key1))))

axiom w_get__post_axiom :
  (forall container1:us_rep1.
  (forall witness1:int [w_get(container1, witness1)].
  in_range8(w_get(container1, witness1))))

axiom user_eq__def_axiom3 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq11(a, b)]. (user_eq11(a,
  b) = oeq(of_base(to_base(a)), of_base(to_base(b)))))

 (* File "a-cfhama.ads", line 743, characters 0-0 *)
goal defqtvc : true
