(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic d : int

logic attr__ATTRIBUTE_ADDRESS : int

logic t : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type direction

predicate in_range(x: int) = ((0 <= x) and (x <= 3))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : direction, direction -> bool

logic dummy : direction

type direction__ref = { direction__content : direction
}

function direction__ref_direction__content__projection(a: direction__ref) : direction =
  (a).direction__content

predicate dynamic_invariant(temp___expr_615: int, temp___is_init_611: bool,
  temp___skip_constant_612: bool, temp___do_toplevel_613: bool,
  temp___do_typ_inv_614: bool) = (((temp___is_init_611 = true) or
  (0 <= 3)) -> in_range(temp___expr_615))

type turn_action

predicate in_range1(x: int) = ((3 <= x) and (x <= 4))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : turn_action, turn_action -> bool

logic dummy1 : turn_action

type turn_action__ref = { turn_action__content : turn_action
}

function turn_action__ref_turn_action__content__projection(a: turn_action__ref) : turn_action =
  (a).turn_action__content

predicate dynamic_invariant1(temp___expr_715: int, temp___is_init_711: bool,
  temp___skip_constant_712: bool, temp___do_toplevel_713: bool,
  temp___do_typ_inv_714: bool) = (((temp___is_init_711 = true) or
  (3 <= 4)) -> in_range1(temp___expr_715))

 (* File "tetris_initial.ads", line 161, characters 0-0 *)
goal defqtvc : true
