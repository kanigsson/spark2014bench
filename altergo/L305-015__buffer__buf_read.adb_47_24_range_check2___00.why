(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type character

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range(temp___expr_74))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

logic valid : int -> bool

logic valid__function_guard : bool, int -> prop

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic valid_state : (int,character) farray, int, int -> bool

logic valid_state__function_guard : bool, (int,character) farray, int,
  int -> prop

axiom valid_state__def_axiom :
  (forall buf_read__buffer:(int,character) farray. forall index:int.
  valid__function_guard(valid(to_rep((buf_read__buffer[index]))),
  to_rep((buf_read__buffer[index]))))

axiom valid_state__def_axiom1 :
  (forall buf_read__buffer:(int,character) farray.
  (forall buf_read__pointer:int. forall buf_read__max_read:int
  [valid_state(buf_read__buffer, buf_read__pointer, buf_read__max_read)].
  ((valid_state(buf_read__buffer, buf_read__pointer,
  buf_read__max_read) = true) -> (buf_read__pointer <= buf_read__max_read))))

axiom valid_state__def_axiom2 :
  (forall buf_read__buffer:(int,character) farray.
  (forall buf_read__pointer:int. forall buf_read__max_read:int
  [valid_state(buf_read__buffer, buf_read__pointer, buf_read__max_read)].
  ((valid_state(buf_read__buffer, buf_read__pointer,
  buf_read__max_read) = true) ->
  (forall index:int. (((1 <= index) and (index <= buf_read__max_read)) ->
  (valid(to_rep((buf_read__buffer[index]))) = true))))))

axiom valid_state__def_axiom3 :
  (forall buf_read__buffer:(int,character) farray.
  (forall buf_read__pointer:int. forall buf_read__max_read:int
  [valid_state(buf_read__buffer, buf_read__pointer, buf_read__max_read)].
  (((buf_read__pointer <= buf_read__max_read) and
  (forall index:int. (((1 <= index) and (index <= buf_read__max_read)) ->
  (valid(to_rep((buf_read__buffer[index]))) = true)))) ->
  (valid_state(buf_read__buffer, buf_read__pointer,
  buf_read__max_read) = true))))

logic attr__ATTRIBUTE_ADDRESS3 : int

type tindex_typeB

logic tindex_typeBqtint : tindex_typeB -> int

axiom tindex_typeBqtaxiom :
  (forall i:tindex_typeB. ((- 2147483648) <= tindex_typeBqtint(i)))

axiom tindex_typeBqtaxiom1 :
  (forall i:tindex_typeB. (tindex_typeBqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : tindex_typeB, tindex_typeB -> bool

logic dummy1 : tindex_typeB

type tindex_typeB__ref = { tindex_typeB__content : tindex_typeB
}

function tindex_typeB__ref_tindex_typeB__content__projection(a: tindex_typeB__ref) : tindex_typeB =
  (a).tindex_typeB__content

function to_rep1(x: tindex_typeB) : int = tindex_typeBqtint(x)

logic of_rep1 : int -> tindex_typeB

axiom inversion_axiom1 :
  (forall x:tindex_typeB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:tindex_typeB [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom :
  (forall i:index_type. ((- 2147483648) <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant1(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_160))

type real_index_type

logic real_index_typeqtint : real_index_type -> int

axiom real_index_typeqtaxiom :
  (forall i:real_index_type. (1 <= real_index_typeqtint(i)))

axiom real_index_typeqtaxiom1 :
  (forall i:real_index_type. (real_index_typeqtint(i) <= 1000))

predicate in_range3(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : real_index_type, real_index_type -> bool

logic dummy3 : real_index_type

type real_index_type__ref = { real_index_type__content : real_index_type
}

function real_index_type__ref_real_index_type__content__projection(a: real_index_type__ref) : real_index_type =
  (a).real_index_type__content

predicate dynamic_invariant2(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (1 <= 1000)) -> in_range3(temp___expr_167))

type t

logic first : t -> tindex_typeB

logic last : t -> tindex_typeB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq1((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type buffer_type__ref = { buffer_type__content : us_t
}

function buffer_type__ref_buffer_type__content__projection(a: buffer_type__ref) : us_t =
  (a).buffer_type__content

predicate dynamic_invariant3(temp___expr_174: us_t, temp___is_init_170: bool,
  temp___skip_constant_171: bool, temp___do_toplevel_172: bool,
  temp___do_typ_inv_173: bool) = ((not (temp___skip_constant_171 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_174),
  last1(temp___expr_174)))

 (* File "buf_read.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall pointer:int. forall max_read:int.
  forall buffer:(int,character) farray. forall c:int.
  (dynamic_invariant2(pointer, true, false, true, true) ->
  (dynamic_invariant2(max_read, true, false, true, true) ->
  (dynamic_invariant(c, false, false, true, true) ->
  ((forall pointer1:int. forall max_read1:int.
   forall buffer1:(int,character) farray.
   valid_state__function_guard(valid_state(buffer1, pointer1, max_read1),
   buffer1, pointer1, max_read1)) ->
  ((valid_state(buffer, pointer, max_read) = true) ->
  (forall o:int. ((to_rep((buffer[pointer])) = o) ->
  (forall c1:int. ((c1 = o) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (pointer = max_read) then true else false)) ->
  ((spark__branch = true) ->
  (forall o1:tindex_typeB. ((to_rep1(o1) = 1000) ->
  (forall o2:tindex_typeB. ((to_rep1(o2) = 1) ->
  (forall buf_read__read__count:int.
  forall buf_read__read__b:(int,character) farray.
  ((forall buf_read__read__b1:(int,character) farray. forall index:int.
   valid__function_guard(valid(to_rep((buf_read__read__b1[index]))),
   to_rep((buf_read__read__b1[index])))) ->
  (((((to_rep1(o2) <= buf_read__read__count) and
  (buf_read__read__count <= to_rep1(o1))) and
  (forall index:int. (((to_rep1(o2) <= index) and
  (index <= ((to_rep1(o2) + buf_read__read__count) - 1))) ->
  (valid(to_rep((buf_read__read__b[index]))) = true)))) and
  dynamic_invariant1(buf_read__read__count, true, true, true, true)) ->
  (let temp___198 = of_array(buf_read__read__b, 1, 1000) : us_t in
  (forall buffer1:(int,character) farray.
  ((buffer1 = slide(to_array(temp___198), first1(temp___198), 1)) ->
  in_range3(buf_read__read__count))))))))))))))))))))))))
