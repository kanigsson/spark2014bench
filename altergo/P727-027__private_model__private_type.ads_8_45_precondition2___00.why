(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields = { rec__private_type__root : us_main_type; rec__ext__ :
us_private
}

function us_split_fields_rec__private_type__root__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_type__root

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (us_main_eq(((a).us_split_fields1).rec__private_type__root,
  ((b).us_split_fields1).rec__private_type__root) = true) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

logic is_valid : us_rep -> bool

logic is_valid__function_guard : bool, us_rep -> prop

logic is_valid1 : int, us_rep -> bool

logic is_valid__function_guard1 : bool, int, us_rep -> prop

logic f : us_rep -> int

logic f__function_guard : int, us_rep -> prop

logic f1 : int, us_rep -> int

logic f__function_guard1 : int, int, us_rep -> prop

axiom f__post_axiom : (forall r:us_rep [f(r)]. in_range(f(r)))

axiom private_type__root__compat_axiom :
  (forall r:us_rep [f1(us_tag, r)]. (f__function_guard1(f1(us_tag, r),
  us_tag, r) -> (forall r1:us_rep. f__function_guard(f(r1), r1))))

axiom private_type__root__compat_axiom1 :
  (forall r:us_rep [f1(us_tag, r)]. (f__function_guard1(f1(us_tag, r),
  us_tag, r) -> (f(r) = f1(us_tag, r))))

logic r : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_162: us_rep,
  temp___skip_top_level_163: bool) = ((temp___expr_162).attr__tag = us_tag)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

axiom private_type__root__compat_axiom2 :
  (forall r1:us_rep [is_valid1(us_tag, r1)].
  (is_valid__function_guard1(is_valid1(us_tag, r1), us_tag, r1) ->
  (forall r2:us_rep. is_valid__function_guard(is_valid(r2), r2))))

axiom private_type__root__compat_axiom3 :
  (forall r1:us_rep [is_valid1(us_tag, r1)].
  (is_valid__function_guard1(is_valid1(us_tag, r1), us_tag, r1) ->
  (to_int(is_valid(r1)) = to_int(is_valid1(us_tag, r1)))))

 (* File "private_type.ads", line 8, characters 0-0 *)
goal defqtvc :
  ((forall o:us_rep. is_valid__function_guard(is_valid(o), o)) ->
  (is_valid(r) = true))
