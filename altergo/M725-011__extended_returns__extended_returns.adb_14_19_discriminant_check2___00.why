(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic discr : int

logic attr__ATTRIBUTE_ADDRESS : int

logic init_val : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_discrs = { rec__extended_returns__record_t__discr : natural
}

function us_split_discrs_rec__extended_returns__record_t__discr__projection(a: us_split_discrs) : natural =
  (a).rec__extended_returns__record_t__discr

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__extended_returns__record_t__a : integer;
rec__extended_returns__record_t__b : integer;
rec__extended_returns__record_t__c : integer;
rec__extended_returns__record_t__d : integer
}

function us_split_fields_rec__extended_returns__record_t__a__projection(a: us_split_fields) : integer =
  (a).rec__extended_returns__record_t__a

function us_split_fields_rec__extended_returns__record_t__b__projection(a: us_split_fields) : integer =
  (a).rec__extended_returns__record_t__b

function us_split_fields_rec__extended_returns__record_t__c__projection(a: us_split_fields) : integer =
  (a).rec__extended_returns__record_t__c

function us_split_fields_rec__extended_returns__record_t__d__projection(a: us_split_fields) : integer =
  (a).rec__extended_returns__record_t__d

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate extended_returns__record_t__b__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__extended_returns__record_t__discr) = 0)

predicate extended_returns__record_t__c__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__extended_returns__record_t__discr) = 1)

predicate extended_returns__record_t__d__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__extended_returns__record_t__discr) = 1)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__extended_returns__record_t__discr) = to_rep1(((b).us_split_discrs1).rec__extended_returns__record_t__discr)) and
  (((to_rep(((a).us_split_fields1).rec__extended_returns__record_t__a) = to_rep(((b).us_split_fields1).rec__extended_returns__record_t__a)) and
  (extended_returns__record_t__b__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__extended_returns__record_t__b) = to_rep(((b).us_split_fields1).rec__extended_returns__record_t__b)))) and
  ((extended_returns__record_t__c__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__extended_returns__record_t__c) = to_rep(((b).us_split_fields1).rec__extended_returns__record_t__c))) and
  (extended_returns__record_t__d__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__extended_returns__record_t__d) = to_rep(((b).us_split_fields1).rec__extended_returns__record_t__d)))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic extended_returns__record_t__discr__first__bit : int

logic extended_returns__record_t__discr__last__bit : int

logic extended_returns__record_t__discr__position : int

axiom extended_returns__record_t__discr__first__bit_axiom :
  (0 <= extended_returns__record_t__discr__first__bit)

axiom extended_returns__record_t__discr__last__bit_axiom :
  (extended_returns__record_t__discr__first__bit <  extended_returns__record_t__discr__last__bit)

axiom extended_returns__record_t__discr__position_axiom :
  (0 <= extended_returns__record_t__discr__position)

logic extended_returns__record_t__a__first__bit : int

logic extended_returns__record_t__a__last__bit : int

logic extended_returns__record_t__a__position : int

axiom extended_returns__record_t__a__first__bit_axiom :
  (0 <= extended_returns__record_t__a__first__bit)

axiom extended_returns__record_t__a__last__bit_axiom :
  (extended_returns__record_t__a__first__bit <  extended_returns__record_t__a__last__bit)

axiom extended_returns__record_t__a__position_axiom :
  (0 <= extended_returns__record_t__a__position)

logic extended_returns__record_t__b__first__bit : int

logic extended_returns__record_t__b__last__bit : int

logic extended_returns__record_t__b__position : int

axiom extended_returns__record_t__b__first__bit_axiom :
  (0 <= extended_returns__record_t__b__first__bit)

axiom extended_returns__record_t__b__last__bit_axiom :
  (extended_returns__record_t__b__first__bit <  extended_returns__record_t__b__last__bit)

axiom extended_returns__record_t__b__position_axiom :
  (0 <= extended_returns__record_t__b__position)

logic extended_returns__record_t__c__first__bit : int

logic extended_returns__record_t__c__last__bit : int

logic extended_returns__record_t__c__position : int

axiom extended_returns__record_t__c__first__bit_axiom :
  (0 <= extended_returns__record_t__c__first__bit)

axiom extended_returns__record_t__c__last__bit_axiom :
  (extended_returns__record_t__c__first__bit <  extended_returns__record_t__c__last__bit)

axiom extended_returns__record_t__c__position_axiom :
  (0 <= extended_returns__record_t__c__position)

logic extended_returns__record_t__d__first__bit : int

logic extended_returns__record_t__d__last__bit : int

logic extended_returns__record_t__d__position : int

axiom extended_returns__record_t__d__first__bit_axiom :
  (0 <= extended_returns__record_t__d__first__bit)

axiom extended_returns__record_t__d__last__bit_axiom :
  (extended_returns__record_t__d__first__bit <  extended_returns__record_t__d__last__bit)

axiom extended_returns__record_t__d__position_axiom :
  (0 <= extended_returns__record_t__d__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type record_t__ref = { record_t__content : us_rep
}

function record_t__ref_record_t__content__projection(a: record_t__ref) : us_rep =
  (a).record_t__content

predicate in_range2(rec__extended_returns__record_t__discr1: int,
  a: us_rep) =
  (rec__extended_returns__record_t__discr1 = to_rep1(((a).us_split_discrs1).rec__extended_returns__record_t__discr))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic extended_returns__record_t__discr__first__bit1 : int

logic extended_returns__record_t__discr__last__bit1 : int

logic extended_returns__record_t__discr__position1 : int

axiom extended_returns__record_t__discr__first__bit_axiom1 :
  (0 <= extended_returns__record_t__discr__first__bit1)

axiom extended_returns__record_t__discr__last__bit_axiom1 :
  (extended_returns__record_t__discr__first__bit1 <  extended_returns__record_t__discr__last__bit1)

axiom extended_returns__record_t__discr__position_axiom1 :
  (0 <= extended_returns__record_t__discr__position1)

logic extended_returns__record_t__a__first__bit1 : int

logic extended_returns__record_t__a__last__bit1 : int

logic extended_returns__record_t__a__position1 : int

axiom extended_returns__record_t__a__first__bit_axiom1 :
  (0 <= extended_returns__record_t__a__first__bit1)

axiom extended_returns__record_t__a__last__bit_axiom1 :
  (extended_returns__record_t__a__first__bit1 <  extended_returns__record_t__a__last__bit1)

axiom extended_returns__record_t__a__position_axiom1 :
  (0 <= extended_returns__record_t__a__position1)

logic extended_returns__record_t__b__first__bit1 : int

logic extended_returns__record_t__b__last__bit1 : int

logic extended_returns__record_t__b__position1 : int

axiom extended_returns__record_t__b__first__bit_axiom1 :
  (0 <= extended_returns__record_t__b__first__bit1)

axiom extended_returns__record_t__b__last__bit_axiom1 :
  (extended_returns__record_t__b__first__bit1 <  extended_returns__record_t__b__last__bit1)

axiom extended_returns__record_t__b__position_axiom1 :
  (0 <= extended_returns__record_t__b__position1)

logic extended_returns__record_t__c__first__bit1 : int

logic extended_returns__record_t__c__last__bit1 : int

logic extended_returns__record_t__c__position1 : int

axiom extended_returns__record_t__c__first__bit_axiom1 :
  (0 <= extended_returns__record_t__c__first__bit1)

axiom extended_returns__record_t__c__last__bit_axiom1 :
  (extended_returns__record_t__c__first__bit1 <  extended_returns__record_t__c__last__bit1)

axiom extended_returns__record_t__c__position_axiom1 :
  (0 <= extended_returns__record_t__c__position1)

logic extended_returns__record_t__d__first__bit1 : int

logic extended_returns__record_t__d__last__bit1 : int

logic extended_returns__record_t__d__position1 : int

axiom extended_returns__record_t__d__first__bit_axiom1 :
  (0 <= extended_returns__record_t__d__first__bit1)

axiom extended_returns__record_t__d__last__bit_axiom1 :
  (extended_returns__record_t__d__first__bit1 <  extended_returns__record_t__d__last__bit1)

axiom extended_returns__record_t__d__position_axiom1 :
  (0 <= extended_returns__record_t__d__position1)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type tresultS__ref = { tresultS__content : us_rep
}

function tresultS__ref_tresultS__content__projection(a: tresultS__ref) : us_rep =
  (a).tresultS__content

logic result____split_discrs : us_split_discrs

logic result____attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant2(temp___expr_174: us_rep,
  temp___is_init_170: bool, temp___skip_constant_171: bool,
  temp___do_toplevel_172: bool, temp___do_typ_inv_173: bool) =
  ((not (temp___skip_constant_171 = true)) -> in_range2(discr,
  temp___expr_174))

predicate default_initial_assumption(temp___expr_176: us_rep,
  temp___skip_top_level_177: bool) =
  (to_rep1(((temp___expr_176).us_split_discrs1).rec__extended_returns__record_t__discr) = discr)

predicate default_initial_assumption1(temp___expr_161: us_rep,
  temp___skip_top_level_162: bool) =
  (to_rep1(((temp___expr_161).us_split_discrs1).rec__extended_returns__record_t__discr) = 0)

 (* File "extended_returns.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall result____split_fields:us_split_fields. (dynamic_invariant(discr,
  true, false, true, true) -> (dynamic_invariant1(init_val, true, false,
  true, true) -> (in_range1(discr) ->
  ((result____attr__constrained = true) -> (default_initial_assumption({
  us_split_discrs1 = result____split_discrs; us_split_fields1 =
  result____split_fields }, false) -> (dynamic_invariant2({
  us_split_discrs1 = result____split_discrs; us_split_fields1 =
  result____split_fields }, false, false, true, true) ->
  (forall o:integer. ((to_rep(o) = init_val) ->
  (forall result____split_fields1:us_split_fields.
  ((result____split_fields1 = { rec__extended_returns__record_t__a = o;
  rec__extended_returns__record_t__b =
  (result____split_fields).rec__extended_returns__record_t__b;
  rec__extended_returns__record_t__c =
  (result____split_fields).rec__extended_returns__record_t__c;
  rec__extended_returns__record_t__d =
  (result____split_fields).rec__extended_returns__record_t__d }) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (discr = 0) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (discr = 1) then true else false)) ->
  ((spark__branch1 = true) ->
  (forall o1:integer. ((to_rep(o1) = init_val) ->
  (forall result____split_fields2:us_split_fields.
  ((result____split_fields2 = { rec__extended_returns__record_t__a =
  (result____split_fields1).rec__extended_returns__record_t__a;
  rec__extended_returns__record_t__b =
  (result____split_fields1).rec__extended_returns__record_t__b;
  rec__extended_returns__record_t__c = o1;
  rec__extended_returns__record_t__d =
  (result____split_fields1).rec__extended_returns__record_t__d }) ->
  extended_returns__record_t__d__pred({ us_split_discrs1 =
  result____split_discrs; us_split_fields1 = result____split_fields2 }))))))))))))))))))))))
