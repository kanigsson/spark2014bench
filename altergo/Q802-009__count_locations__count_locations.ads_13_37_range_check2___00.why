(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)]))))))))

logic sel : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic from : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic partial_count_selected_locations : (int,bool) farray, int -> int

logic partial_count_selected_locations__function_guard : int,
  (int,bool) farray, int -> prop

type sum_type

logic sum_typeqtint : sum_type -> int

axiom sum_typeqtaxiom : (forall i:sum_type. (0 <= sum_typeqtint(i)))

axiom sum_typeqtaxiom1 : (forall i:sum_type. (sum_typeqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : sum_type, sum_type -> bool

logic dummy1 : sum_type

type sum_type__ref = { sum_type__content : sum_type
}

function sum_type__ref_sum_type__content__projection(a: sum_type__ref) : sum_type =
  (a).sum_type__content

predicate dynamic_invariant(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 100)) -> in_range2(temp___expr_163))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant1(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (1 <= 100)) -> in_range3(temp___expr_170))

axiom partial_count_selected_locations__def_axiom :
  (forall sel1:(int,bool) farray.
  (forall from1:int [partial_count_selected_locations(sel1, from1)].
  ((dynamic_invariant1(from1, true, true, true, true) and
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel1,
  from1), sel1, from1)) ->
  (forall sel2:(int,bool) farray. forall from2:int.
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel2,
  (from2 + 1)), sel2, (from2 + 1))))))

axiom partial_count_selected_locations__def_axiom1 :
  (forall sel1:(int,bool) farray.
  (forall from1:int [partial_count_selected_locations(sel1, from1)].
  ((dynamic_invariant1(from1, true, true, true, true) and
  partial_count_selected_locations__function_guard(partial_count_selected_locations(sel1,
  from1), sel1, from1)) -> (partial_count_selected_locations(sel1,
  from1) = ((if ((sel1[from1]) = true) then 1 else 0) + (if (from1 <  100) then partial_count_selected_locations(sel1,
  (from1 + 1)) else 0))))))

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "count_locations.ads", line 12, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(from, true, false, true, true) ->
  (forall o:int.
  ((forall o1:int. forall o2:(int,bool) farray.
   partial_count_selected_locations__function_guard(partial_count_selected_locations(o2,
   (o1 + 1)), o2, (o1 + 1))) ->
  ((if (from <  100) then (let o1 = (from + 1) : int in (in_range3(o1) and
  (let o2 = sel : (int,bool) farray in
  ((o = partial_count_selected_locations(o2, o1)) and
  (partial_count_selected_locations__function_guard(o, o2, o1) and
  (dynamic_invariant(o, true, false, true, true) and
  ((o = ((if ((o2[o1]) = true) then 1 else 0) + (if (o1 <  100) then partial_count_selected_locations(o2,
  (o1 + 1)) else 0))) and (o <= ((100 - o1) + 1))))))))) else (o = 0)) ->
  (forall o1:int. ((if ((sel[from]) = true) then (o1 = 1) else (o1 = 0)) ->
  (let o2 = (o1 + o) : int in (in_range(o2) -> in_range2(o2)))))))))
