(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic no_name : (int,character) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic r4b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tTno_nameSP1

logic tTno_nameSP1qtint : tTno_nameSP1 -> int

axiom tTno_nameSP1qtaxiom :
  (forall i:tTno_nameSP1. (1 <= tTno_nameSP1qtint(i)))

axiom tTno_nameSP1qtaxiom1 :
  (forall i:tTno_nameSP1. (tTno_nameSP1qtint(i) <= 7))

predicate in_range2(x: int) = ((1 <= x) and (x <= 7))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tTno_nameSP1, tTno_nameSP1 -> bool

logic dummy2 : tTno_nameSP1

type tTno_nameSP1__ref = { tTno_nameSP1__content : tTno_nameSP1
}

function tTno_nameSP1__ref_tTno_nameSP1__content__projection(a: tTno_nameSP1__ref) : tTno_nameSP1 =
  (a).tTno_nameSP1__content

logic temp___String_Literal_155 : unit -> (int,character) farray

axiom temp___String_Literal_155__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[1])) = 78))

axiom temp___String_Literal_155__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[2])) = 79))

axiom temp___String_Literal_155__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[3])) = 95))

axiom temp___String_Literal_155__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[4])) = 78))

axiom temp___String_Literal_155__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[5])) = 65))

axiom temp___String_Literal_155__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[6])) = 77))

axiom temp___String_Literal_155__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_155(us_void_param)].
  (to_rep((temp___String_Literal_155(us_void_param)[7])) = 69))

type tTtest_nameSP1

logic tTtest_nameSP1qtint : tTtest_nameSP1 -> int

axiom tTtest_nameSP1qtaxiom :
  (forall i:tTtest_nameSP1. (1 <= tTtest_nameSP1qtint(i)))

axiom tTtest_nameSP1qtaxiom1 :
  (forall i:tTtest_nameSP1. (tTtest_nameSP1qtint(i) <= 15))

predicate in_range3(x: int) = ((1 <= x) and (x <= 15))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tTtest_nameSP1, tTtest_nameSP1 -> bool

logic dummy3 : tTtest_nameSP1

type tTtest_nameSP1__ref = { tTtest_nameSP1__content : tTtest_nameSP1
}

function tTtest_nameSP1__ref_tTtest_nameSP1__content__projection(a: tTtest_nameSP1__ref) : tTtest_nameSP1 =
  (a).tTtest_nameSP1__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : positive, positive -> bool

logic dummy4 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type t6b__ref = { t6b__content : us_t
}

function t6b__ref_t6b__content__projection(a: t6b__ref) : us_t =
  (a).t6b__content

predicate dynamic_invariant1(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

axiom no_name__def_axiom : (no_name = temp___String_Literal_155(void))

 (* File "report.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall test_name:(int,character) farray.
  (forall test_name_len:int. ((test_name_len = 0) ->
  (dynamic_invariant(test_name_len, true, false, true, true) ->
  (forall test_name_len1:int. ((test_name_len1 = 7) ->
  ((test_name_len1 = r4b) -> (dynamic_invariant(r4b, true, false, true,
  true) -> ((if (1 <= 7) then ((1 <= r4b) and
  ((7 - 1) = (r4b - 1))) else (r4b <  1)) -> (let temp___178 =
  of_array(no_name, 1, 7) : us_t in (((1 <= r4b) -> (((1 <= 1) and
  (1 <= 15)) and ((1 <= r4b) and (r4b <= 15)))) -> (let temp___180 =
  of_array(test_name, 1, r4b) : us_t in
  ((first1(temp___178) <= last1(temp___178)) ->
  (first1(temp___180) <= last1(temp___180)))))))))))))))
