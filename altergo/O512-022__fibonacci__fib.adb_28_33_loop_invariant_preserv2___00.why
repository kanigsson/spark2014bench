(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

logic fibonacci : int -> int

logic fibonacci__function_guard : int, int -> prop

axiom fibonacci__post_axiom :
  (forall n:int [fibonacci(n)]. ((dynamic_invariant(n, true, true, true,
  true) and (n <= 23)) -> (let result = fibonacci(n) : int in
  (fibonacci__function_guard(result, n) -> dynamic_invariant(result, true,
  false, true, true)))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "fib.ads", line 12, characters 0-0 *)
goal defqtvc :
  (forall n1:int. forall n2:int. forall l1:int. forall l2:int. forall a1:int.
  forall a2:int. forall b1:int. forall b2:int. forall i:int.
  forall copy_n1:int. forall copy_n2:int. (dynamic_invariant(n1, true, false,
  true, true) -> (dynamic_invariant(n2, true, false, true, true) ->
  (dynamic_invariant(l1, true, false, true, true) -> (dynamic_invariant(l2,
  true, false, true, true) -> ((((n1 = n2) and (l1 = l2)) and (n1 <= 23)) ->
  (dynamic_invariant(a1, false, false, true, true) -> (dynamic_invariant(a2,
  false, false, true, true) -> (dynamic_invariant(b1, false, false, true,
  true) -> (dynamic_invariant(b2, false, false, true, true) ->
  (dynamic_invariant(i, false, false, true, true) ->
  (dynamic_invariant(copy_n1, false, false, true, true) ->
  (dynamic_invariant(copy_n2, false, false, true, true) ->
  (forall copy_n11:int. ((copy_n11 = n1) ->
  (forall copy_n21:int. ((copy_n21 = n2) ->
  (forall a11:int. ((a11 = 1) ->
  (forall a21:int. ((a21 = 1) ->
  (forall b11:int. ((b11 = 1) ->
  (forall b21:int. ((b21 = 1) ->
  (forall i1:int. ((i1 = 2) -> ((2 <  n1) -> (let o = fibonacci(i1) : int in
  ((fibonacci__function_guard(o, i1) and dynamic_invariant(o, true, false,
  true, true)) -> (((not (a11 = o)) or (let o1 = (i1 - 1) : int in
  (in_range2(o1) and (let o2 = fibonacci(o1) : int in
  (fibonacci__function_guard(o2, o1) and dynamic_invariant(o2, true, false,
  true, true)))))) ->
  (forall n11:int. forall a12:int. forall b12:int. forall i2:int.
  ((forall i3:int. fibonacci__function_guard(fibonacci(i3), i3)) ->
  ((forall i3:int. fibonacci__function_guard(fibonacci((i3 - 1)), (i3 - 1))) ->
  (((((a12 = fibonacci(i2)) and (b12 = fibonacci((i2 - 1)))) and
  (i2 <= 23)) and (((n11 + i2) - 2) = copy_n11)) ->
  ((andb((if (((dynamic_invariant(i2, false, true, true, true) and
  dynamic_invariant(a12, false, true, true, true)) and dynamic_invariant(n11,
  true, true, true, true)) and dynamic_invariant(b12, false, true, true,
  true)) then true else false),
  (if (2 <  n11) then true else false)) = true) ->
  (forall temp___197:int. ((temp___197 = n11) -> (let o1 = (a12 + b12)
  : int in (in_range1(o1) ->
  (forall a13:int. ((a13 = o1) -> (let o2 = (a13 - b12) : int in
  (in_range1(o2) -> (in_range2(o2) ->
  (forall b13:int. ((b13 = o2) -> (let o3 = (n11 - 1) : int in
  (in_range2(o3) ->
  (forall n12:int. ((n12 = o3) -> (let o4 = (i2 + 1) : int in
  (in_range1(o4) ->
  (forall i3:int. ((i3 = o4) -> ((2 <  n12) -> (let o5 = fibonacci(i3)
  : int in ((fibonacci__function_guard(o5, i3) and dynamic_invariant(o5,
  true, false, true, true)) -> (((not (a13 = o5)) or (let o6 = (i3 - 1)
  : int in (in_range2(o6) and (let o7 = fibonacci(o6) : int in
  (fibonacci__function_guard(o7, o6) and dynamic_invariant(o7, true, false,
  true, true)))))) ->
  ((forall i4:int. fibonacci__function_guard(fibonacci(i4), i4)) ->
  (a13 = fibonacci(i3))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
