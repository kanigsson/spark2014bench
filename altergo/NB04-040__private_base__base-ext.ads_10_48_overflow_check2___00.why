(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__base__t__c : integer; rec__ext__ : us_private
}

function us_split_fields_rec__base__t__c__projection(a: us_split_fields) : integer =
  (a).rec__base__t__c

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__base__t__c) = to_rep(((b).us_split_fields1).rec__base__t__c)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic base__t__c__first__bit : int

logic base__t__c__last__bit : int

logic base__t__c__position : int

axiom base__t__c__first__bit_axiom : (0 <= base__t__c__first__bit)

axiom base__t__c__last__bit_axiom :
  (base__t__c__first__bit <  base__t__c__last__bit)

axiom base__t__c__position_axiom : (0 <= base__t__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

type us_split_fields2 = { rec__ada___base__ext__u__d : integer;
rec__base__t__c1 : integer; rec__ext__1 : us_private
}

function us_split_fields_rec__ada___base__ext__u__d__projection(a: us_split_fields2) : integer =
  (a).rec__ada___base__ext__u__d

function us_split_fields_rec__base__t__c__2__projection(a: us_split_fields2) : integer =
  (a).rec__base__t__c1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__ada___base__ext__u__d : us_private -> integer

axiom extract__ada___base__ext__u__d__conv :
  (forall ada___base__ext__u__d:integer.
  (forall rec__ext__2:us_private.
  (extract__ada___base__ext__u__d(hide_ext__(ada___base__ext__u__d,
  rec__ext__2)) = ada___base__ext__u__d)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__base__t__c = ((a).us_split_fields3).rec__base__t__c1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ada___base__ext__u__d,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__ada___base__ext__u__d =
  extract__ada___base__ext__u__d(((r).us_split_fields1).rec__ext__);
  rec__base__t__c1 = ((r).us_split_fields1).rec__base__t__c; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__ada___base__ext__u__d) = to_rep(((b).us_split_fields3).rec__ada___base__ext__u__d)) and
  (to_rep(((a).us_split_fields3).rec__base__t__c1) = to_rep(((b).us_split_fields3).rec__base__t__c1))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ada___base__ext__u__d__first__bit : int

logic ada___base__ext__u__d__last__bit : int

logic ada___base__ext__u__d__position : int

axiom ada___base__ext__u__d__first__bit_axiom :
  (0 <= ada___base__ext__u__d__first__bit)

axiom ada___base__ext__u__d__last__bit_axiom :
  (ada___base__ext__u__d__first__bit <  ada___base__ext__u__d__last__bit)

axiom ada___base__ext__u__d__position_axiom :
  (0 <= ada___base__ext__u__d__position)

logic base__t__c__first__bit1 : int

logic base__t__c__last__bit1 : int

logic base__t__c__position1 : int

axiom base__t__c__first__bit_axiom1 : (0 <= base__t__c__first__bit1)

axiom base__t__c__last__bit_axiom1 :
  (base__t__c__first__bit1 <  base__t__c__last__bit1)

axiom base__t__c__position_axiom1 : (0 <= base__t__c__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type u__ref = { u__content : us_rep1
}

function u__ref_u__content__projection(a: u__ref) : us_rep1 = (a).u__content

logic x : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_171: us_rep1,
  temp___skip_top_level_172: bool) = ((temp___expr_171).attr__tag1 = us_tag1)

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate default_initial_assumption1(temp___expr_163: us_rep,
  temp___skip_top_level_164: bool) = ((temp___expr_163).attr__tag = us_tag)

 (* File "base-ext.ads", line 10, characters 0-0 *)
goal defqtvc :
  (forall o:int.
  ((to_rep(((x).us_split_fields3).rec__ada___base__ext__u__d) = o) ->
  (forall o1:int. ((to_rep(((x).us_split_fields3).rec__base__t__c1) = o1) ->
  in_range((o1 + o))))))
