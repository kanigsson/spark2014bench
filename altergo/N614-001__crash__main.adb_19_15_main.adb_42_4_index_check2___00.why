(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic to_string : us_image, int -> us_t

logic from_string : us_t -> us_image

axiom to_string__first :
  (forall x:us_image.
  (forall s:int [to_string(x, s)]. (first1(to_string(x, s)) = 1)))

axiom to_string__length :
  (forall x:us_image.
  (forall s:int [to_string(x, s)]. ((0 <= s) -> (length(to_string(x,
  s)) <= s))))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy4 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_39))

function to_rep2(x: positive) : int = positiveqtint(x)

logic of_rep2 : int -> positive

axiom inversion_axiom2 :
  (forall x:positive [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:positive [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)]))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq5 : us_t1, us_t1 -> bool

logic dummy5 : us_t1

type set__ref = { set__content : us_t1
}

function set__ref_set__content__projection(a: set__ref) : us_t1 =
  (a).set__content

type map__ref2 = { map__content2 : (int,positive) farray
}

logic slide2 : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq2 :
  (forall a:(int,positive) farray.
  (forall first4:int [slide2(a, first4, first4)]. (slide2(a, first4,
  first4) = a)))

axiom slide_def2 :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,positive) farray, a__first: int, a__last: int,
  b: (int,positive) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep2((a[temp___idx_157])) = to_rep2((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep2((a[temp___idx_157])) = to_rep2((b[((b__first - a__first) + temp___idx_157)]))))))))

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def4 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first4(mk2(f, l))) = f))))

axiom mk_def5 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last4(mk2(f, l))) = l))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : (int,positive) farray; rt2 : t2
}

function to_array2(a: us_t2) : (int,positive) farray = (a).elts2

function of_array2(a: (int,positive) farray, f: int, l: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l) }

function first5(a: us_t2) : int = to_rep1(first4((a).rt2))

function last5(a: us_t2) : int = to_rep1(last4((a).rt2))

function length2(a: us_t2) : int =
  (if (first5(a) <= last5(a)) then ((last5(a) - first5(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq10(x: us_t2, y: us_t2) : bool = bool_eq9((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)))

logic user_eq6 : us_t2, us_t2 -> bool

logic dummy6 : us_t2

type partition__ref = { partition__content : us_t2
}

function partition__ref_partition__content__projection(a: partition__ref) : us_t2 =
  (a).partition__content

logic line_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic line_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic page_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic page_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic x__first : integer

logic x__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic part__first : integer

logic part__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic bool_eq11 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq11(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq11(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length3(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic subset : us_t1, us_t1 -> bool

logic subset__function_guard : bool, us_t1, us_t1 -> prop

logic is_partition : us_t1, us_t2 -> bool

logic is_partition__function_guard : bool, us_t1, us_t2 -> prop

logic same_set : us_t1, us_t1 -> bool

logic same_set__function_guard : bool, us_t1, us_t1 -> prop

logic get_part : us_t1, us_t2, int -> us_t1

logic get_part__function_guard : us_t1, us_t1, us_t2, int -> prop

logic disjoint_or_subset : us_t1, us_t1 -> bool

logic disjoint_or_subset__function_guard : bool, us_t1, us_t1 -> prop

type t51s__ref = { t51s__content : us_t2
}

function t51s__ref_t51s__content__projection(a: t51s__ref) : us_t2 =
  (a).t51s__content

type t49s__ref = { t49s__content : us_t2
}

function t49s__ref_t49s__content__projection(a: t49s__ref) : us_t2 =
  (a).t49s__content

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r37b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type t39b__ref = { t39b__content : us_t2
}

function t39b__ref_t39b__content__projection(a: t39b__ref) : us_t2 =
  (a).t39b__content

logic c41b : us_t2

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r93b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

type t19b

logic t19bqtint : t19b -> int

axiom t19bqtaxiom : (forall i:t19b. (1 <= t19bqtint(i)))

axiom t19bqtaxiom1 : (forall i:t19b. (t19bqtint(i) <= 6))

predicate in_range5(x: int) = ((1 <= x) and (x <= 6))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : t19b, t19b -> bool

logic dummy7 : t19b

type t19b__ref = { t19b__content : t19b
}

function t19b__ref_t19b__content__projection(a: t19b__ref) : t19b =
  (a).t19b__content

type t21b

logic t21bqtint : t21b -> int

axiom t21bqtaxiom : (forall i:t21b. (1 <= t21bqtint(i)))

axiom t21bqtaxiom1 : (forall i:t21b. (t21bqtint(i) <= 3))

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : t21b, t21b -> bool

logic dummy8 : t21b

type t21b__ref = { t21b__content : t21b
}

function t21b__ref_t21b__content__projection(a: t21b__ref) : t21b =
  (a).t21b__content

type t23b

logic t23bqtint : t23b -> int

axiom t23bqtaxiom : (forall i:t23b. (1 <= t23bqtint(i)))

axiom t23bqtaxiom1 : (forall i:t23b. (t23bqtint(i) <= 1))

predicate in_range7(x: int) = ((1 <= x) and (x <= 1))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : t23b, t23b -> bool

logic dummy9 : t23b

type t23b__ref = { t23b__content : t23b
}

function t23b__ref_t23b__content__projection(a: t23b__ref) : t23b =
  (a).t23b__content

type tTnpSP1

logic tTnpSP1qtint : tTnpSP1 -> int

axiom tTnpSP1qtaxiom : (forall i:tTnpSP1. (1 <= tTnpSP1qtint(i)))

axiom tTnpSP1qtaxiom1 : (forall i:tTnpSP1. (tTnpSP1qtint(i) <= 5))

predicate in_range8(x: int) = ((1 <= x) and (x <= 5))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : tTnpSP1, tTnpSP1 -> bool

logic dummy10 : tTnpSP1

type tTnpSP1__ref = { tTnpSP1__content : tTnpSP1
}

function tTnpSP1__ref_tTnpSP1__content__projection(a: tTnpSP1__ref) : tTnpSP1 =
  (a).tTnpSP1__content

type t91b__ref = { t91b__content : us_t2
}

function t91b__ref_t91b__content__projection(a: t91b__ref) : us_t2 =
  (a).t91b__content

type t100b__ref = { t100b__content : us_t2
}

function t100b__ref_t100b__content__projection(a: t100b__ref) : us_t2 =
  (a).t100b__content

logic main__a__aggregate_def : int, int, int, int, int,
  int -> (int,integer) farray

logic main__x__aggregate_def : int, int, int -> (int,integer) farray

logic main__part__aggregate_def : int -> (int,positive) farray

logic temp___String_Literal_336 : unit -> (int,character) farray

axiom temp___String_Literal_336__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_336(us_void_param)].
  (to_rep((temp___String_Literal_336(us_void_param)[1])) = 123))

axiom temp___String_Literal_336__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_336(us_void_param)].
  (to_rep((temp___String_Literal_336(us_void_param)[2])) = 32))

logic temp___String_Literal_339 : unit -> (int,character) farray

axiom temp___String_Literal_339__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_339(us_void_param)].
  (to_rep((temp___String_Literal_339(us_void_param)[1])) = 32))

axiom temp___String_Literal_339__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_339(us_void_param)].
  (to_rep((temp___String_Literal_339(us_void_param)[2])) = 125))

logic temp___String_Literal_341 : unit -> (int,character) farray

axiom temp___String_Literal_341__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_341(us_void_param)].
  (to_rep((temp___String_Literal_341(us_void_param)[1])) = 123))

axiom temp___String_Literal_341__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_341(us_void_param)].
  (to_rep((temp___String_Literal_341(us_void_param)[2])) = 32))

logic temp___String_Literal_344 : unit -> (int,character) farray

axiom temp___String_Literal_344__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_344(us_void_param)].
  (to_rep((temp___String_Literal_344(us_void_param)[1])) = 32))

axiom temp___String_Literal_344__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_344(us_void_param)].
  (to_rep((temp___String_Literal_344(us_void_param)[2])) = 125))

logic temp___String_Literal_347 : unit -> (int,character) farray

axiom temp___String_Literal_347__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_347(us_void_param)].
  (to_rep((temp___String_Literal_347(us_void_param)[1])) = 91))

axiom temp___String_Literal_347__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_347(us_void_param)].
  (to_rep((temp___String_Literal_347(us_void_param)[2])) = 32))

logic temp___String_Literal_353 : unit -> (int,character) farray

axiom temp___String_Literal_353__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_353(us_void_param)].
  (to_rep((temp___String_Literal_353(us_void_param)[1])) = 32))

axiom temp___String_Literal_353__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_353(us_void_param)].
  (to_rep((temp___String_Literal_353(us_void_param)[2])) = 93))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

predicate dynamic_invariant4(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 22)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 33)

logic rliteral2 : integer

axiom rliteral_axiom2 : (integerqtint(rliteral2) = 100)

logic rliteral3 : integer

axiom rliteral_axiom3 : (integerqtint(rliteral3) = 55)

logic rliteral4 : integer

axiom rliteral_axiom4 : (integerqtint(rliteral4) = 44)

logic rliteral5 : integer

axiom rliteral_axiom5 : (integerqtint(rliteral5) = 11)

axiom def_axiom :
  (forall temp___318:int. forall temp___319:int. forall temp___320:int.
  forall temp___321:int. forall temp___322:int. forall temp___323:int.
  (((dynamic_invariant1(temp___318, true, true, true, true) and
  dynamic_invariant1(temp___319, true, true, true, true)) and
  ((dynamic_invariant1(temp___320, true, true, true, true) and
  dynamic_invariant1(temp___321, true, true, true, true)) and
  (dynamic_invariant1(temp___322, true, true, true, true) and
  dynamic_invariant1(temp___323, true, true, true, true)))) ->
  ((main__a__aggregate_def(temp___318, temp___319, temp___320, temp___321,
  temp___322, temp___323)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___318:int. forall temp___319:int. forall temp___320:int.
  forall temp___321:int. forall temp___322:int. forall temp___323:int.
  (((dynamic_invariant1(temp___318, true, true, true, true) and
  dynamic_invariant1(temp___319, true, true, true, true)) and
  ((dynamic_invariant1(temp___320, true, true, true, true) and
  dynamic_invariant1(temp___321, true, true, true, true)) and
  (dynamic_invariant1(temp___322, true, true, true, true) and
  dynamic_invariant1(temp___323, true, true, true, true)))) ->
  ((main__a__aggregate_def(temp___318, temp___319, temp___320, temp___321,
  temp___322, temp___323)[2]) = rliteral1)))

axiom def_axiom2 :
  (forall temp___318:int. forall temp___319:int. forall temp___320:int.
  forall temp___321:int. forall temp___322:int. forall temp___323:int.
  (((dynamic_invariant1(temp___318, true, true, true, true) and
  dynamic_invariant1(temp___319, true, true, true, true)) and
  ((dynamic_invariant1(temp___320, true, true, true, true) and
  dynamic_invariant1(temp___321, true, true, true, true)) and
  (dynamic_invariant1(temp___322, true, true, true, true) and
  dynamic_invariant1(temp___323, true, true, true, true)))) ->
  ((main__a__aggregate_def(temp___318, temp___319, temp___320, temp___321,
  temp___322, temp___323)[3]) = rliteral2)))

axiom def_axiom3 :
  (forall temp___318:int. forall temp___319:int. forall temp___320:int.
  forall temp___321:int. forall temp___322:int. forall temp___323:int.
  (((dynamic_invariant1(temp___318, true, true, true, true) and
  dynamic_invariant1(temp___319, true, true, true, true)) and
  ((dynamic_invariant1(temp___320, true, true, true, true) and
  dynamic_invariant1(temp___321, true, true, true, true)) and
  (dynamic_invariant1(temp___322, true, true, true, true) and
  dynamic_invariant1(temp___323, true, true, true, true)))) ->
  ((main__a__aggregate_def(temp___318, temp___319, temp___320, temp___321,
  temp___322, temp___323)[4]) = rliteral3)))

axiom def_axiom4 :
  (forall temp___318:int. forall temp___319:int. forall temp___320:int.
  forall temp___321:int. forall temp___322:int. forall temp___323:int.
  (((dynamic_invariant1(temp___318, true, true, true, true) and
  dynamic_invariant1(temp___319, true, true, true, true)) and
  ((dynamic_invariant1(temp___320, true, true, true, true) and
  dynamic_invariant1(temp___321, true, true, true, true)) and
  (dynamic_invariant1(temp___322, true, true, true, true) and
  dynamic_invariant1(temp___323, true, true, true, true)))) ->
  ((main__a__aggregate_def(temp___318, temp___319, temp___320, temp___321,
  temp___322, temp___323)[5]) = rliteral4)))

axiom def_axiom5 :
  (forall temp___318:int. forall temp___319:int. forall temp___320:int.
  forall temp___321:int. forall temp___322:int. forall temp___323:int.
  (((dynamic_invariant1(temp___318, true, true, true, true) and
  dynamic_invariant1(temp___319, true, true, true, true)) and
  ((dynamic_invariant1(temp___320, true, true, true, true) and
  dynamic_invariant1(temp___321, true, true, true, true)) and
  (dynamic_invariant1(temp___322, true, true, true, true) and
  dynamic_invariant1(temp___323, true, true, true, true)))) ->
  ((main__a__aggregate_def(temp___318, temp___319, temp___320, temp___321,
  temp___322, temp___323)[6]) = rliteral5)))

axiom def_axiom6 :
  (forall temp___327:int. forall temp___328:int. forall temp___329:int.
  (((dynamic_invariant1(temp___327, true, true, true, true) and
  dynamic_invariant1(temp___328, true, true, true, true)) and
  dynamic_invariant1(temp___329, true, true, true, true)) ->
  ((main__x__aggregate_def(temp___327, temp___328,
  temp___329)[1]) = rliteral5)))

axiom def_axiom7 :
  (forall temp___327:int. forall temp___328:int. forall temp___329:int.
  (((dynamic_invariant1(temp___327, true, true, true, true) and
  dynamic_invariant1(temp___328, true, true, true, true)) and
  dynamic_invariant1(temp___329, true, true, true, true)) ->
  ((main__x__aggregate_def(temp___327, temp___328,
  temp___329)[2]) = rliteral)))

axiom def_axiom8 :
  (forall temp___327:int. forall temp___328:int. forall temp___329:int.
  (((dynamic_invariant1(temp___327, true, true, true, true) and
  dynamic_invariant1(temp___328, true, true, true, true)) and
  dynamic_invariant1(temp___329, true, true, true, true)) ->
  ((main__x__aggregate_def(temp___327, temp___328,
  temp___329)[3]) = rliteral4)))

logic rliteral6 : positive

axiom rliteral_axiom6 : (positiveqtint(rliteral6) = 4)

axiom def_axiom9 :
  (forall temp___333:int. (dynamic_invariant2(temp___333, true, true, true,
  true) -> ((main__part__aggregate_def(temp___333)[1]) = rliteral6)))

predicate dynamic_invariant5(temp___expr_200: us_t1,
  temp___is_init_196: bool, temp___skip_constant_197: bool,
  temp___do_toplevel_198: bool, temp___do_typ_inv_199: bool) =
  ((not (temp___skip_constant_197 = true)) -> dynamic_property1(1,
  2147483647, first3(temp___expr_200), last3(temp___expr_200)))

logic mem : us_t1, int -> bool

logic mem__function_guard : bool, us_t1, int -> prop

axiom mem__def_axiom :
  (forall x:us_t1.
  (forall elt:int [mem(x, elt)]. ((mem(x, elt) = true) ->
  (exists i:int. (((first3(x) <= i) and (i <= last3(x))) and
  (elt = to_rep1((to_array1(x)[i]))))))))

axiom mem__def_axiom1 :
  (forall x:us_t1.
  (forall elt:int [mem(x, elt)].
  ((exists i:int. (((first3(x) <= i) and (i <= last3(x))) and
   (elt = to_rep1((to_array1(x)[i]))))) ->
  (mem(x, elt) = true))))

axiom subset__def_axiom :
  (forall x:us_t1. forall y:us_t1. forall i:int. mem__function_guard(mem(y,
  to_rep1((to_array1(x)[i]))), y, to_rep1((to_array1(x)[i]))))

axiom subset__def_axiom1 :
  (forall x:us_t1. forall y:us_t1 [subset(x, y)]. ((subset(x, y) = true) ->
  (forall i:int. (((first3(x) <= i) and (i <= last3(x))) -> (mem(y,
  to_rep1((to_array1(x)[i]))) = true)))))

axiom subset__def_axiom2 :
  (forall x:us_t1. forall y:us_t1 [subset(x, y)].
  ((forall i:int. (((first3(x) <= i) and (i <= last3(x))) -> (mem(y,
   to_rep1((to_array1(x)[i]))) = true))) ->
  (subset(x, y) = true)))

axiom same_set__def_axiom :
  (forall x:us_t1. forall y:us_t1. subset__function_guard(subset(x, y), x,
  y))

axiom same_set__def_axiom1 :
  (forall x:us_t1. forall y:us_t1. subset__function_guard(subset(y, x), y,
  x))

axiom same_set__def_axiom2 :
  (forall x:us_t1. forall y:us_t1 [same_set(x, y)]. ((same_set(x,
  y) = true) -> (subset(x, y) = true)))

axiom same_set__def_axiom3 :
  (forall x:us_t1. forall y:us_t1 [same_set(x, y)]. ((same_set(x,
  y) = true) -> (subset(y, x) = true)))

axiom same_set__def_axiom4 :
  (forall x:us_t1. forall y:us_t1 [same_set(x, y)]. (((subset(x,
  y) = true) and (subset(y, x) = true)) -> (same_set(x, y) = true)))

logic disjoint : us_t1, us_t1 -> bool

logic disjoint__function_guard : bool, us_t1, us_t1 -> prop

axiom disjoint__def_axiom :
  (forall x:us_t1. forall y:us_t1. forall i:int. mem__function_guard(mem(y,
  to_rep1((to_array1(x)[i]))), y, to_rep1((to_array1(x)[i]))))

axiom disjoint__def_axiom1 :
  (forall x:us_t1. forall y:us_t1 [disjoint(x, y)]. ((disjoint(x,
  y) = true) ->
  (forall i:int. (((first3(x) <= i) and (i <= last3(x))) -> (not (mem(y,
  to_rep1((to_array1(x)[i]))) = true))))))

axiom disjoint__def_axiom2 :
  (forall x:us_t1. forall y:us_t1 [disjoint(x, y)].
  ((forall i:int. (((first3(x) <= i) and (i <= last3(x))) -> (not (mem(y,
   to_rep1((to_array1(x)[i]))) = true)))) ->
  (disjoint(x, y) = true)))

predicate dynamic_invariant6(temp___expr_206: us_t2,
  temp___is_init_202: bool, temp___skip_constant_203: bool,
  temp___do_toplevel_204: bool, temp___do_typ_inv_205: bool) =
  ((not (temp___skip_constant_203 = true)) -> dynamic_property2(1,
  2147483647, first5(temp___expr_206), last5(temp___expr_206)))

logic ascending : us_t2 -> bool

logic ascending__function_guard : bool, us_t2 -> prop

axiom ascending__def_axiom :
  (forall p:us_t2 [ascending(p)]. ((ascending(p) = true) ->
  ((length2(p) <  2) or
  (forall i:int. (((first5(p) <= i) and (i <= (last5(p) - 1))) ->
  (to_rep2((to_array2(p)[i])) <  to_rep2((to_array2(p)[(i + 1)]))))))))

axiom ascending__def_axiom1 :
  (forall p:us_t2 [ascending(p)]. (((length2(p) <  2) or
  (forall i:int. (((first5(p) <= i) and (i <= (last5(p) - 1))) ->
  (to_rep2((to_array2(p)[i])) <  to_rep2((to_array2(p)[(i + 1)])))))) ->
  (ascending(p) = true)))

axiom is_partition__def_axiom :
  (forall p:us_t2. ascending__function_guard(ascending(p), p))

axiom is_partition__def_axiom1 :
  (forall s:us_t1.
  (forall p:us_t2 [is_partition(s, p)]. ((is_partition(s, p) = true) ->
  (length2(p) <  length1(s)))))

axiom is_partition__def_axiom2 :
  (forall s:us_t1.
  (forall p:us_t2 [is_partition(s, p)]. ((is_partition(s, p) = true) ->
  (ascending(p) = true))))

axiom is_partition__def_axiom3 :
  (forall s:us_t1.
  (forall p:us_t2 [is_partition(s, p)]. ((is_partition(s, p) = true) ->
  (forall i:int. (((first5(p) <= i) and (i <= last5(p))) ->
  (first3(s) <= to_rep2((to_array2(p)[i]))))))))

axiom is_partition__def_axiom4 :
  (forall s:us_t1.
  (forall p:us_t2 [is_partition(s, p)]. ((is_partition(s, p) = true) ->
  (forall i:int. (((first5(p) <= i) and (i <= last5(p))) ->
  (to_rep2((to_array2(p)[i])) <= last3(s)))))))

axiom is_partition__def_axiom5 :
  (forall s:us_t1.
  (forall p:us_t2 [is_partition(s, p)]. ((((length2(p) <  length1(s)) and
  (ascending(p) = true)) and
  (forall i:int. (((first5(p) <= i) and (i <= last5(p))) ->
  ((first3(s) <= to_rep2((to_array2(p)[i]))) and
  (to_rep2((to_array2(p)[i])) <= last3(s)))))) -> (is_partition(s,
  p) = true))))

axiom disjoint_or_subset__def_axiom :
  (forall a:us_t1. forall b:us_t1. disjoint__function_guard(disjoint(a, b),
  a, b))

axiom disjoint_or_subset__def_axiom1 :
  (forall a:us_t1. forall b:us_t1. subset__function_guard(subset(a, b), a,
  b))

axiom disjoint_or_subset__def_axiom2 :
  (forall a:us_t1. forall b:us_t1 [disjoint_or_subset(a, b)].
  ((disjoint_or_subset(a, b) = true) -> ((disjoint(a, b) = true) or
  (subset(a, b) = true))))

axiom disjoint_or_subset__def_axiom3 :
  (forall a:us_t1. forall b:us_t1 [disjoint_or_subset(a, b)]. (((disjoint(a,
  b) = true) or (subset(a, b) = true)) -> (disjoint_or_subset(a, b) = true)))

type t23s__ref = { t23s__content : us_t1
}

function t23s__ref_t23s__content__projection(a: t23s__ref) : us_t1 =
  (a).t23s__content

type t26s__ref = { t26s__content : us_t1
}

function t26s__ref_t26s__content__projection(a: t26s__ref) : us_t1 =
  (a).t26s__content

axiom get_part__post_axiom :
  (forall a:us_t1. forall p:us_t2.
  is_partition__function_guard(is_partition(a, p), a, p))

axiom get_part__post_axiom1 :
  (forall a:us_t1.
  (forall p:us_t2.
  (forall i:int [get_part(a, p, i)]. ((((dynamic_invariant5(a, true, true,
  true, true) and dynamic_invariant6(p, true, true, true, true)) and
  dynamic_invariant2(i, true, true, true, true)) and ((is_partition(a,
  p) = true) and ((first5(p) <= i) and (i <= last5(p))))) -> (let result =
  get_part(a, p, i) : us_t1 in (get_part__function_guard(result, a, p, i) ->
  dynamic_invariant5(result, true, false, true, true)))))))

axiom get_part__def_axiom :
  (forall a:us_t1.
  (forall p:us_t2.
  (forall i:int [get_part(a, p, i)]. (((dynamic_invariant5(a, true, true,
  true, true) and dynamic_invariant6(p, true, true, true, true)) and
  dynamic_invariant2(i, true, true, true, true)) -> (get_part(a, p,
  i) = (if (i = first5(p)) then of_array1(to_array1(of_array1(to_array1(a),
  first3(a), (to_rep2((to_array2(p)[i])) - 1))),
  first3(of_array1(to_array1(a), first3(a),
  (to_rep2((to_array2(p)[i])) - 1))), last3(of_array1(to_array1(a),
  first3(a),
  (to_rep2((to_array2(p)[i])) - 1)))) else of_array1(to_array1(of_array1(to_array1(a),
  to_rep2((to_array2(p)[(i - 1)])), (to_rep2((to_array2(p)[i])) - 1))),
  first3(of_array1(to_array1(a), to_rep2((to_array2(p)[(i - 1)])),
  (to_rep2((to_array2(p)[i])) - 1))), last3(of_array1(to_array1(a),
  to_rep2((to_array2(p)[(i - 1)])), (to_rep2((to_array2(p)[i])) - 1))))))))))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq11 : count, count -> bool

logic dummy11 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

predicate dynamic_invariant7(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (0 <= 2147483647)) -> in_range9(temp___expr_172))

axiom line_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant7(line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom page_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant7(page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

 (* File "main.adb", line 4, characters 0-0 *)
goal defqtvc :
  (forall standard_in:us_private. forall file_system:us_private.
  forall standard_out:us_private. forall standard_err:us_private.
  forall current_in:us_private. forall current_out:us_private.
  forall current_err:us_private. forall count1:int. (let main__a__assume =
  of_array1(main__a__aggregate_def(22, 33, 100, 55, 44, 11), 1, 6) : us_t1 in
  (forall a:(int,integer) farray. ((a = to_array1(main__a__assume)) ->
  ((to_rep1(a__first) = first3(main__a__assume)) ->
  ((to_rep1(a__last) = last3(main__a__assume)) -> (dynamic_property1(1,
  2147483647, to_rep1(a__first), to_rep1(a__last)) -> (let main__x__assume =
  of_array1(main__x__aggregate_def(11, 22, 44), 1, 3) : us_t1 in
  (forall x:(int,integer) farray. ((x = to_array1(main__x__assume)) ->
  ((to_rep1(x__first) = first3(main__x__assume)) ->
  ((to_rep1(x__last) = last3(main__x__assume)) -> (dynamic_property1(1,
  2147483647, to_rep1(x__first), to_rep1(x__last)) ->
  (let main__part__assume = of_array2(main__part__aggregate_def(4), 1, 1)
  : us_t2 in
  (forall part:(int,positive) farray.
  ((part = to_array2(main__part__assume)) ->
  ((to_rep1(part__first) = first5(main__part__assume)) ->
  ((to_rep1(part__last) = last5(main__part__assume)) -> (dynamic_property2(1,
  2147483647, to_rep1(part__first), to_rep1(part__last)) ->
  (dynamic_invariant(count1, false, false, true, true) ->
  (forall standard_in1:us_private. forall file_system1:us_private.
  forall standard_out1:us_private. forall standard_err1:us_private.
  forall current_in1:us_private. forall current_out1:us_private.
  forall current_err1:us_private. (((line_length(standard_in, file_system,
  standard_out, standard_err, current_in, current_out,
  current_err) = line_length(standard_in1, file_system1, standard_out1,
  standard_err1, current_in1, current_out1, current_err1)) and
  (page_length(standard_in, file_system, standard_out, standard_err,
  current_in, current_out, current_err) = page_length(standard_in1,
  file_system1, standard_out1, standard_err1, current_in1, current_out1,
  current_err1))) ->
  (forall temp___337:int. ((to_rep1(a__first) = temp___337) ->
  (forall temp___338:int. ((to_rep1(a__last) = temp___338) ->
  (forall c28b:int. ((c28b = temp___337) ->
  ((andb((if (temp___337 <= c28b) then true else false),
  (if (c28b <= temp___338) then true else false)) = true) ->
  (forall c28b1:int. (((to_rep1(a__first) <= c28b1) and
  (c28b1 <= to_rep1(a__last))) -> (to_rep1(a__first) <= c28b1))))))))))))))))))))))))))))))))
