(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

type value

logic valueqtint : value -> int

axiom valueqtaxiom : (forall i1:value. ((- 23) <= valueqtint(i1)))

axiom valueqtaxiom1 : (forall i1:value. (valueqtint(i1) <= 69))

predicate in_range1(x: int) = (((- 23) <= x) and (x <= 69))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value, value -> bool

logic dummy : value

type value__ref = { value__content : value
}

function value__ref_value__content__projection(a: value__ref) : value =
  (a).value__content

function to_rep(x: value) : int = valueqtint(x)

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i1:int [(slide(a, old_first, new_first)[i1])]. ((slide(a,
  old_first, new_first)[i1]) = (a[(i1 - (new_first - old_first))]))))))

function bool_eq2(a: (int,value) farray, a__first: int, a__last: int,
  b: (int,value) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i1:index. (0 <= indexqtint(i1)))

axiom indexqtaxiom1 : (forall i1:index. (indexqtint(i1) <= 1001))

predicate in_range2(x: int) = ((0 <= x) and (x <= 1001))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 1001)) -> in_range2(temp___expr_169))

type tcounterB

logic tcounterBqtint : tcounterB -> int

axiom tcounterBqtaxiom :
  (forall i1:tcounterB. ((- 32768) <= tcounterBqtint(i1)))

axiom tcounterBqtaxiom1 :
  (forall i1:tcounterB. (tcounterBqtint(i1) <= 32767))

predicate in_range3(x: int) = (((- 32768) <= x) and (x <= 32767))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tcounterB, tcounterB -> bool

logic dummy2 : tcounterB

type tcounterB__ref = { tcounterB__content : tcounterB
}

function tcounterB__ref_tcounterB__content__projection(a: tcounterB__ref) : tcounterB =
  (a).tcounterB__content

function to_rep1(x: tcounterB) : int = tcounterBqtint(x)

logic of_rep1 : int -> tcounterB

axiom inversion_axiom1 :
  (forall x:tcounterB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:tcounterB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tcounterB, tcounterB -> bool

logic dummy3 : tcounterB

type t24b__ref = { t24b__content : tcounterB
}

function t24b__ref_t24b__content__projection(a: t24b__ref) : tcounterB =
  (a).t24b__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tcounterB, tcounterB -> bool

logic dummy4 : tcounterB

type t29b__ref = { t29b__content : tcounterB
}

function t29b__ref_t29b__content__projection(a: t29b__ref) : tcounterB =
  (a).t29b__content

logic temp_____aggregate_def_305 : int -> (int,value) farray

predicate dynamic_invariant1(temp___expr_176: int, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = (((temp___is_init_172 = true) or
  ((- 23) <= 69)) -> in_range1(temp___expr_176))

logic rliteral : value

axiom rliteral_axiom : (valueqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___307:int. (dynamic_invariant1(temp___307, true, true, true,
  true) ->
  (forall temp___308:int.
  ((temp_____aggregate_def_305(temp___307)[temp___308]) = rliteral))))

logic rliteral1 : value

axiom rliteral_axiom1 : (valueqtint(rliteral1) = (- 23))

 (* File "complex_arrays.adb", line 141, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  (forall tmp:(int,value) farray. ((tmp = temp_____aggregate_def_305(0)) ->
  (let temp___310 = i : int in
  (forall j:int. ((j = 0) -> ((andb((if (0 <= j) then true else false),
  (if (j <= temp___310) then true else false)) = true) ->
  (forall temp___loop_entry_315:int. ((temp___loop_entry_315 = i) ->
  (forall tmp1:(int,value) farray. ((tmp1 = (tmp[j <- rliteral1])) ->
  (forall tmp2:(int,value) farray. forall j1:int.
  (((forall k:int. (((0 <= k) and (k <= j1)) -> ((k <= j1) ->
    (to_rep((tmp2[k])) = (- 23))))) and
  (i = temp___loop_entry_315)) -> ((andb((if (dynamic_property(0, i, j1) and
  (forall temp___313:int. (((0 <= temp___313) and (temp___313 <= 1001)) ->
  (((temp___310 <  temp___313) or ((temp___313 <  0) or
  (j1 <  temp___313))) -> ((tmp2[temp___313]) = (tmp[temp___313])))))) then true else false),
  (if ((0 <= j1) and (j1 <= i)) then true else false)) = true) ->
  ((not (j1 = temp___310)) ->
  (forall j2:int. ((j2 = (j1 + 1)) ->
  (forall tmp3:(int,value) farray. ((tmp3 = (tmp2[j2 <- rliteral1])) ->
  (forall k:int. (((0 <= k) and (k <= j2)) -> ((k <= j2) ->
  (to_rep((tmp3[k])) = (- 23))))))))))))))))))))))))
