(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

function to_rep1(x: positive) : int = positiveqtint(x)

logic of_rep1 : int -> positive

axiom inversion_axiom1 :
  (forall x:positive [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:positive [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type enum

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : enum, enum -> bool

logic dummy2 : enum

type enum__ref = { enum__content : enum
}

function enum__ref_enum__content__projection(a: enum__ref) : enum =
  (a).enum__content

predicate dynamic_invariant2(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 2)) -> in_range2(temp___expr_159))

logic to_rep2 : enum -> int

logic of_rep2 : int -> enum

axiom inversion_axiom2 :
  (forall x:enum [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:enum [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type sub_enum

predicate in_range3(x: int) = ((0 <= x) and (x <= 1))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : sub_enum, sub_enum -> bool

logic dummy3 : sub_enum

type sub_enum__ref = { sub_enum__content : sub_enum
}

function sub_enum__ref_sub_enum__content__projection(a: sub_enum__ref) : sub_enum =
  (a).sub_enum__content

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t

logic tqtreal : t -> real

logic tqtisFinite : t -> prop

axiom tqtaxiom :
  (forall x:t. (tqtisFinite(x) ->
  ((-340282346638528859811704183484516925440.0) <= tqtreal(x))))

axiom tqtaxiom1 :
  (forall x:t. (tqtisFinite(x) ->
  (tqtreal(x) <= 340282346638528859811704183484516925440.0)))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t

logic add : fpa_rounding_mode, t, t -> t

logic sub : fpa_rounding_mode, t, t -> t

logic mul : fpa_rounding_mode, t, t -> t

logic div : fpa_rounding_mode, t, t -> t

logic abs : t -> t

logic neg : t -> t

logic fma : fpa_rounding_mode, t, t, t -> t

logic sqrt : fpa_rounding_mode, t -> t

logic roundToIntegral : fpa_rounding_mode, t -> t

logic min : t, t -> t

logic max : t, t -> t

logic le : t, t -> prop

logic lt : t, t -> prop

logic eq : t, t -> prop

logic is_normal : t -> prop

logic is_subnormal : t -> prop

logic is_zero : t -> prop

logic is_infinite : t -> prop

logic is_nan : t -> prop

logic is_positive : t -> prop

logic is_negative : t -> prop

predicate is_plus_infinity(x: t) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t. (is_not_nan(x) -> (not is_nan(x))))

axiom is_not_nan2 : (forall x:t. ((not is_nan(x)) -> is_not_nan(x)))

axiom is_not_finite :
  (forall x:t. ((not tqtisFinite(x)) -> (is_infinite(x) or is_nan(x))))

axiom is_not_finite1 :
  (forall x:t. ((is_infinite(x) or is_nan(x)) -> (not tqtisFinite(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t [is_zero(x)]. (is_zero(x) -> tqtisFinite(x)))

axiom zero_to_real1 :
  (forall x:t [is_zero(x)]. (is_zero(x) -> (tqtreal(x) = 0.0)))

axiom zero_to_real2 :
  (forall x:t [is_zero(x)]. ((tqtisFinite(x) and (tqtreal(x) = 0.0)) ->
  is_zero(x)))

logic of_int : fpa_rounding_mode, int -> t

logic to_int : fpa_rounding_mode, t -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range4(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t. (tqtisFinite(x) -> in_range4(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) =
  in_range4(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range4(x) -> no_overflow(m,
  x)))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t, y: t) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t, y: t) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t. forall y:t. (tqtisFinite(x) -> (tqtisFinite(y) -> ((x = y) ->
  eq(x, y)))))

axiom eq_refl : (forall x:t. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t. forall y:t. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t. forall y:t. forall z:t. (eq(x, y) -> (eq(y, z) -> eq(x, z))))

axiom eq_zero : eq(zeroF, neg(zeroF))

axiom eq_to_real_finite :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) -> (tqtreal(x) = tqtreal(y)))))

axiom eq_to_real_finite1 :
  (forall x:t. forall y:t. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) = tqtreal(y)) -> eq(x, y))))

axiom lt_finite :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (lt(x, y) -> (tqtreal(x) <  tqtreal(y)))))

axiom lt_finite1 :
  (forall x:t. forall y:t [lt(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) <  tqtreal(y)) -> lt(x, y))))

axiom le_finite :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  (le(x, y) -> (tqtreal(x) <= tqtreal(y)))))

axiom le_finite1 :
  (forall x:t. forall y:t [le(x, y)]. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) <= tqtreal(y)) -> le(x, y))))

axiom le_lt_trans :
  (forall x:t. forall y:t. forall z:t. ((le(x, y) and lt(y, z)) -> lt(x, z)))

axiom lt_le_trans :
  (forall x:t. forall y:t. forall z:t. ((lt(x, y) and le(y, z)) -> lt(x, z)))

axiom le_ge_asym :
  (forall x:t. forall y:t. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t. forall y:t. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t. forall y:t. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t. forall y:t. forall z:t. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t. forall y:t. forall z:t. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t. forall y:t. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t, x: t, y: t) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  (if is_positive(x) then is_infinite(x) else (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))) and ((m = Down) ->
  (if is_positive(x) then (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127)) else is_infinite(x)))) and ((m = ToZero) ->
  (if is_positive(x) then (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127)) else (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> tqtisFinite(add(m, x, y))))))

axiom add_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> tqtisFinite(x)))

axiom add_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (tqtisFinite(add(m, x, y)) -> tqtisFinite(y)))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) -> no_overflow(m,
  (tqtreal(x) + tqtreal(y))))))

axiom add_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [add(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add(m, x, y)) -> (tqtreal(add(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> tqtisFinite(sub(m, x, y))))))

axiom sub_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> tqtisFinite(x)))

axiom sub_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (tqtisFinite(sub(m, x, y)) -> tqtisFinite(y)))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) -> no_overflow(m,
  (tqtreal(x) - tqtreal(y))))))

axiom sub_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [sub(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub(m, x, y)) -> (tqtreal(sub(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> tqtisFinite(mul(m, x, y))))))

axiom mul_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> tqtisFinite(x)))

axiom mul_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (tqtisFinite(mul(m, x, y)) -> tqtisFinite(y)))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) -> no_overflow(m,
  (tqtreal(x) * tqtreal(y))))))

axiom mul_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [mul(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul(m, x, y)) -> (tqtreal(mul(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> tqtisFinite(div(m, x, y)))))))

axiom div_finite1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  no_overflow(m, (tqtreal(x) / tqtreal(y)))))))

axiom div_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (tqtreal(div(m, x, y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))

axiom neg_finite :
  (forall x:t [neg(x)]. (tqtisFinite(x) -> tqtisFinite(neg(x))))

axiom neg_finite1 :
  (forall x:t [neg(x)]. (tqtisFinite(x) ->
  (tqtreal(neg(x)) = (-tqtreal(x)))))

axiom neg_finite_rev :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) -> tqtisFinite(x)))

axiom neg_finite_rev1 :
  (forall x:t [neg(x)]. (tqtisFinite(neg(x)) ->
  (tqtreal(neg(x)) = (-tqtreal(x)))))

axiom abs_finite :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> tqtisFinite(abs(x))))

axiom abs_finite1 :
  (forall x:t [abs(x)]. (tqtisFinite(x) ->
  (tqtreal(abs(x)) = abs_real(tqtreal(x)))))

axiom abs_finite2 :
  (forall x:t [abs(x)]. (tqtisFinite(x) -> is_positive(abs(x))))

axiom abs_finite_rev :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) -> tqtisFinite(x)))

axiom abs_finite_rev1 :
  (forall x:t [abs(x)]. (tqtisFinite(abs(x)) ->
  (tqtreal(abs(x)) = abs_real(tqtreal(x)))))

axiom abs_universal : (forall x:t [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(x)))

axiom fma_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(y)))

axiom fma_finite_rev2 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(z)))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> no_overflow(m,
  ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))

axiom fma_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. forall z:t [fma(m, x,
  y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) -> (tqtreal(fma(m,
  x, y, z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))

function sqr(x: real) : real = (x * x)

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> tqtisFinite(x)))

axiom sqrt_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (0.0 <= tqtreal(x))))

axiom sqrt_finite_rev2 :
  (forall m:fpa_rounding_mode. forall x:t [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtreal(sqrt(m, x)) = float32(m,sqrt_real(tqtreal(x))))))

predicate same_sign_real(x: t, r: real) = ((is_positive(x) and (0.0 <  r)) or
  (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int(m, (i + j)), add(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int(m, (i - j)), sub(n, of_int(m, i),
  of_int(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int(m, (i * j)), mul(n, of_int(m, i),
  of_int(m, j)))))))

axiom Min_r : (forall x:t. forall y:t. (le(y, x) -> eq(min(x, y), y)))

axiom Min_l : (forall x:t. forall y:t. (le(x, y) -> eq(min(x, y), x)))

axiom Max_r : (forall x:t. forall y:t. (le(y, x) -> eq(max(x, y), x)))

axiom Max_l : (forall x:t. forall y:t. (le(x, y) -> eq(max(x, y), y)))

logic is_int : t -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t. (tqtisFinite(i) -> ((le(i,
  neg(of_int(m, 16777216))) or le(of_int(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t. forall y:t. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add(m, x, y)) -> is_int(add(m, x, y))))))

axiom sub_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub(m, x, y)) -> is_int(sub(m, x, y))))))

axiom mul_int :
  (forall x:t. forall y:t. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul(m, x, y)) -> is_int(mul(m, x, y))))))

axiom fma_int :
  (forall x:t. forall y:t. forall z:t. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t. (is_int(x) -> is_int(neg(x))))

axiom abs_int1 : (forall x:t. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int(mqt, to_int(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  in_int_range(to_int(m, x))))

axiom is_int_is_finite : (forall x:t. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t. (tqtisFinite(x) -> (is_negative(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t. (tqtisFinite(x) -> (is_positive(x) -> (roundToIntegral(ToZero,
  x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t. forall y:t. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(int_ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Up, x)) = int_ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t. forall y:t. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(int_floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) -> (to_int(m,
  roundToIntegral(Down, x)) = int_floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t. (lt(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t. (lt(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t. (eq(sub(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t. (to_int(m, x) = to_int(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int(m, x) <= to_int(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int(m, of_int(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t. forall y:t. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int(m, x) = to_int(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t. (is_int(x) -> (to_int(m,
  neg(x)) = (-to_int(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  (((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x))))

axiom round_bound_ne1 :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150))))

predicate neq(x: t, y: t) = (not eq(x, y))

function bool_lt(x: t, y: t) : bool = (if lt(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if le(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if lt(y, x) then true else false)

function bool_ge(x: t, y: t) : bool = (if le(y, x) then true else false)

function bool_eq4(x: t, y: t) : bool = (if eq(x, y) then true else false)

function bool_neq(x: t, y: t) : bool = (if (not eq(x,
  y)) then true else false)

logic rem : t, t -> t

logic fliteral : t

axiom fliteral_axiom : tqtisFinite(fliteral)

axiom fliteral_axiom1 : (tqtreal(fliteral) = 1.0)

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int(NearestTiesToAway, 1))

type t__ref = { t__content : t
}

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep3(x: integer) : int = integerqtint(x)

logic of_rep3 : int -> integer

axiom inversion_axiom3 :
  (forall x:integer [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:integer [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type float__

function bool_eq6(x: t, y: t) : bool = (if eq(x, y) then true else false)

logic user_eq5 : float__, float__ -> bool

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic dummy5 : float__

type float____ref = { float____content : float__
}

function float____ref_float____content__projection(a: float____ref) : float__ =
  (a).float____content

logic to_rep4 : float__ -> t

logic of_rep4 : t -> float__

axiom inversion_axiom4 :
  (forall x:float__ [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:float__ [to_rep4(x)]. tqtisFinite(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:t [to_rep4(of_rep4(x))]. (tqtisFinite(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic to_rep5 : sub_enum -> int

logic of_rep5 : int -> sub_enum

axiom inversion_axiom5 :
  (forall x:sub_enum [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:sub_enum [to_rep5(x)]. in_range3(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range3(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_discrs = { rec__rec__my_rec__e : sub_enum
}

function us_split_discrs_rec__rec__my_rec__e__projection(a: us_split_discrs) : sub_enum =
  (a).rec__rec__my_rec__e

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__rec__my_rec__x : integer; rec__rec__my_rec__y :
float__
}

function us_split_fields_rec__rec__my_rec__x__projection(a: us_split_fields) : integer =
  (a).rec__rec__my_rec__x

function us_split_fields_rec__rec__my_rec__y__projection(a: us_split_fields) : float__ =
  (a).rec__rec__my_rec__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate rec__my_rec__x__pred(a: us_rep) =
  (to_rep5(((a).us_split_discrs1).rec__rec__my_rec__e) = 0)

predicate rec__my_rec__y__pred(a: us_rep) =
  (to_rep5(((a).us_split_discrs1).rec__rec__my_rec__e) = 1)

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if ((to_rep5(((a).us_split_discrs1).rec__rec__my_rec__e) = to_rep5(((b).us_split_discrs1).rec__rec__my_rec__e)) and
  ((rec__my_rec__x__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__rec__my_rec__x) = to_rep3(((b).us_split_fields1).rec__rec__my_rec__x))) and
  (rec__my_rec__y__pred(a) ->
  eq(to_rep4(((a).us_split_fields1).rec__rec__my_rec__y),
  to_rep4(((b).us_split_fields1).rec__rec__my_rec__y))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic rec__my_rec__e__first__bit : int

logic rec__my_rec__e__last__bit : int

logic rec__my_rec__e__position : int

axiom rec__my_rec__e__first__bit_axiom : (0 <= rec__my_rec__e__first__bit)

axiom rec__my_rec__e__last__bit_axiom :
  (rec__my_rec__e__first__bit <  rec__my_rec__e__last__bit)

axiom rec__my_rec__e__position_axiom : (0 <= rec__my_rec__e__position)

logic rec__my_rec__x__first__bit : int

logic rec__my_rec__x__last__bit : int

logic rec__my_rec__x__position : int

axiom rec__my_rec__x__first__bit_axiom : (0 <= rec__my_rec__x__first__bit)

axiom rec__my_rec__x__last__bit_axiom :
  (rec__my_rec__x__first__bit <  rec__my_rec__x__last__bit)

axiom rec__my_rec__x__position_axiom : (0 <= rec__my_rec__x__position)

logic rec__my_rec__y__first__bit : int

logic rec__my_rec__y__last__bit : int

logic rec__my_rec__y__position : int

axiom rec__my_rec__y__first__bit_axiom : (0 <= rec__my_rec__y__first__bit)

axiom rec__my_rec__y__last__bit_axiom :
  (rec__my_rec__y__first__bit <  rec__my_rec__y__last__bit)

axiom rec__my_rec__y__position_axiom : (0 <= rec__my_rec__y__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type t1s__ref = { t1s__content : us_rep
}

function t1s__ref_t1s__content__projection(a: t1s__ref) : us_rep =
  (a).t1s__content

type us_split_discrs2 = { rec__rec__sub_rec__z : enum
}

function us_split_discrs_rec__rec__sub_rec__z__projection(a: us_split_discrs2) : enum =
  (a).rec__rec__sub_rec__z

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__rec__sub_rec__plop : us_rep
}

function us_split_fields_rec__rec__sub_rec__plop__projection(a: us_split_fields2) : us_rep =
  (a).rec__rec__sub_rec__plop

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq8(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep2(((a).us_split_discrs3).rec__rec__sub_rec__z) = to_rep2(((b).us_split_discrs3).rec__rec__sub_rec__z)) and
  (bool_eq7(((a).us_split_fields3).rec__rec__sub_rec__plop,
  ((b).us_split_fields3).rec__rec__sub_rec__plop) = true)) then true else false)

predicate in_range6(rec__rec__sub_rec__z1: int, a: us_split_discrs2) =
  (rec__rec__sub_rec__z1 = to_rep2((a).rec__rec__sub_rec__z))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic rec__sub_rec__z__first__bit : int

logic rec__sub_rec__z__last__bit : int

logic rec__sub_rec__z__position : int

axiom rec__sub_rec__z__first__bit_axiom : (0 <= rec__sub_rec__z__first__bit)

axiom rec__sub_rec__z__last__bit_axiom :
  (rec__sub_rec__z__first__bit <  rec__sub_rec__z__last__bit)

axiom rec__sub_rec__z__position_axiom : (0 <= rec__sub_rec__z__position)

logic rec__sub_rec__plop__first__bit : int

logic rec__sub_rec__plop__last__bit : int

logic rec__sub_rec__plop__position : int

axiom rec__sub_rec__plop__first__bit_axiom :
  (0 <= rec__sub_rec__plop__first__bit)

axiom rec__sub_rec__plop__last__bit_axiom :
  (rec__sub_rec__plop__first__bit <  rec__sub_rec__plop__last__bit)

axiom rec__sub_rec__plop__position_axiom :
  (0 <= rec__sub_rec__plop__position)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type sub_rec__ref = { sub_rec__content : us_rep1
}

function sub_rec__ref_sub_rec__content__projection(a: sub_rec__ref) : us_rep1 =
  (a).sub_rec__content

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic rec__my_rec__e__first__bit1 : int

logic rec__my_rec__e__last__bit1 : int

logic rec__my_rec__e__position1 : int

axiom rec__my_rec__e__first__bit_axiom1 : (0 <= rec__my_rec__e__first__bit1)

axiom rec__my_rec__e__last__bit_axiom1 :
  (rec__my_rec__e__first__bit1 <  rec__my_rec__e__last__bit1)

axiom rec__my_rec__e__position_axiom1 : (0 <= rec__my_rec__e__position1)

logic rec__my_rec__x__first__bit1 : int

logic rec__my_rec__x__last__bit1 : int

logic rec__my_rec__x__position1 : int

axiom rec__my_rec__x__first__bit_axiom1 : (0 <= rec__my_rec__x__first__bit1)

axiom rec__my_rec__x__last__bit_axiom1 :
  (rec__my_rec__x__first__bit1 <  rec__my_rec__x__last__bit1)

axiom rec__my_rec__x__position_axiom1 : (0 <= rec__my_rec__x__position1)

logic rec__my_rec__y__first__bit1 : int

logic rec__my_rec__y__last__bit1 : int

logic rec__my_rec__y__position1 : int

axiom rec__my_rec__y__first__bit_axiom1 : (0 <= rec__my_rec__y__first__bit1)

axiom rec__my_rec__y__last__bit_axiom1 :
  (rec__my_rec__y__first__bit1 <  rec__my_rec__y__last__bit1)

axiom rec__my_rec__y__position_axiom1 : (0 <= rec__my_rec__y__position1)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type t2s__ref = { t2s__content : us_rep
}

function t2s__ref_t2s__content__projection(a: t2s__ref) : us_rep =
  (a).t2s__content

type us_split_discrs4 = { rec__rec__sub_rec_ok__z : enum
}

function us_split_discrs_rec__rec__sub_rec_ok__z__projection(a: us_split_discrs4) : enum =
  (a).rec__rec__sub_rec_ok__z

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields4 = { rec__rec__sub_rec_ok__plop : us_rep
}

function us_split_fields_rec__rec__sub_rec_ok__plop__projection(a: us_split_fields4) : us_rep =
  (a).rec__rec__sub_rec_ok__plop

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs5 : us_split_discrs4; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

predicate rec__sub_rec_ok__plop__pred(a: us_rep2) =
  ((0 <= to_rep2(((a).us_split_discrs5).rec__rec__sub_rec_ok__z)) and
  (to_rep2(((a).us_split_discrs5).rec__rec__sub_rec_ok__z) <= 1))

function bool_eq9(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep2(((a).us_split_discrs5).rec__rec__sub_rec_ok__z) = to_rep2(((b).us_split_discrs5).rec__rec__sub_rec_ok__z)) and
  (rec__sub_rec_ok__plop__pred(a) ->
  (bool_eq7(((a).us_split_fields5).rec__rec__sub_rec_ok__plop,
  ((b).us_split_fields5).rec__rec__sub_rec_ok__plop) = true))) then true else false)

predicate in_range7(rec__rec__sub_rec_ok__z1: int, a: us_split_discrs4) =
  (rec__rec__sub_rec_ok__z1 = to_rep2((a).rec__rec__sub_rec_ok__z))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic rec__sub_rec_ok__z__first__bit : int

logic rec__sub_rec_ok__z__last__bit : int

logic rec__sub_rec_ok__z__position : int

axiom rec__sub_rec_ok__z__first__bit_axiom :
  (0 <= rec__sub_rec_ok__z__first__bit)

axiom rec__sub_rec_ok__z__last__bit_axiom :
  (rec__sub_rec_ok__z__first__bit <  rec__sub_rec_ok__z__last__bit)

axiom rec__sub_rec_ok__z__position_axiom :
  (0 <= rec__sub_rec_ok__z__position)

logic rec__sub_rec_ok__plop__first__bit : int

logic rec__sub_rec_ok__plop__last__bit : int

logic rec__sub_rec_ok__plop__position : int

axiom rec__sub_rec_ok__plop__first__bit_axiom :
  (0 <= rec__sub_rec_ok__plop__first__bit)

axiom rec__sub_rec_ok__plop__last__bit_axiom :
  (rec__sub_rec_ok__plop__first__bit <  rec__sub_rec_ok__plop__last__bit)

axiom rec__sub_rec_ok__plop__position_axiom :
  (0 <= rec__sub_rec_ok__plop__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type sub_rec_ok__ref = { sub_rec_ok__content : us_rep2
}

function sub_rec_ok__ref_sub_rec_ok__content__projection(a: sub_rec_ok__ref) : us_rep2 =
  (a).sub_rec_ok__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq10(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range5(f) -> (in_range5(l) ->
  (to_rep3(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range5(f) -> (in_range5(l) ->
  (to_rep3(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range5(low) and (in_range5(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t1
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep3(first((a).rt))

function last1(a: us_t) : int = to_rep3(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size4 : int

logic object__size4 : int

logic component__size : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom4 : (0 <= alignment4)

function bool_eq11(x: us_t, y: us_t) : bool = bool_eq10((x).elts,
  to_rep3(first((x).rt)), to_rep3(last((x).rt)), (y).elts,
  to_rep3(first((y).rt)), to_rep3(last((y).rt)))

logic user_eq10 : us_t, us_t -> bool

logic dummy10 : us_t

type my_array__ref = { my_array__content : us_t
}

function my_array__ref_my_array__content__projection(a: my_array__ref) : us_t =
  (a).my_array__content

type t6s__ref = { t6s__content : us_t
}

function t6s__ref_t6s__content__projection(a: t6s__ref) : us_t =
  (a).t6s__content

type us_split_discrs6 = { rec__rec__sub_arr__f : natural;
rec__rec__sub_arr__l : natural
}

function us_split_discrs_rec__rec__sub_arr__f__projection(a: us_split_discrs6) : natural =
  (a).rec__rec__sub_arr__f

function us_split_discrs_rec__rec__sub_arr__l__projection(a: us_split_discrs6) : natural =
  (a).rec__rec__sub_arr__l

type us_split_discrs__ref3 = { us_split_discrs__content3 : us_split_discrs6
}

function us_split_discrs__ref___split_discrs__content__4__projection(a: us_split_discrs__ref3) : us_split_discrs6 =
  (a).us_split_discrs__content3

type us_split_fields6 = { rec__rec__sub_arr__content : us_t
}

function us_split_fields_rec__rec__sub_arr__content__projection(a: us_split_fields6) : us_t =
  (a).rec__rec__sub_arr__content

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs7 : us_split_discrs6; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__4__projection(a: us_rep3) : us_split_discrs6 =
  (a).us_split_discrs7

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq12(a: us_rep3, b: us_rep3) : bool =
  (if (((to_rep(((a).us_split_discrs7).rec__rec__sub_arr__f) = to_rep(((b).us_split_discrs7).rec__rec__sub_arr__f)) and
  (to_rep(((a).us_split_discrs7).rec__rec__sub_arr__l) = to_rep(((b).us_split_discrs7).rec__rec__sub_arr__l))) and
  (bool_eq11(((a).us_split_fields7).rec__rec__sub_arr__content,
  ((b).us_split_fields7).rec__rec__sub_arr__content) = true)) then true else false)

predicate in_range8(rec__rec__sub_arr__f1: int, rec__rec__sub_arr__l1: int,
  a: us_split_discrs6) =
  ((rec__rec__sub_arr__f1 = to_rep((a).rec__rec__sub_arr__f)) and
  (rec__rec__sub_arr__l1 = to_rep((a).rec__rec__sub_arr__l)))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic rec__sub_arr__f__first__bit : int

logic rec__sub_arr__f__last__bit : int

logic rec__sub_arr__f__position : int

axiom rec__sub_arr__f__first__bit_axiom : (0 <= rec__sub_arr__f__first__bit)

axiom rec__sub_arr__f__last__bit_axiom :
  (rec__sub_arr__f__first__bit <  rec__sub_arr__f__last__bit)

axiom rec__sub_arr__f__position_axiom : (0 <= rec__sub_arr__f__position)

logic rec__sub_arr__l__first__bit : int

logic rec__sub_arr__l__last__bit : int

logic rec__sub_arr__l__position : int

axiom rec__sub_arr__l__first__bit_axiom : (0 <= rec__sub_arr__l__first__bit)

axiom rec__sub_arr__l__last__bit_axiom :
  (rec__sub_arr__l__first__bit <  rec__sub_arr__l__last__bit)

axiom rec__sub_arr__l__position_axiom : (0 <= rec__sub_arr__l__position)

logic rec__sub_arr__content__first__bit : int

logic rec__sub_arr__content__last__bit : int

logic rec__sub_arr__content__position : int

axiom rec__sub_arr__content__first__bit_axiom :
  (0 <= rec__sub_arr__content__first__bit)

axiom rec__sub_arr__content__last__bit_axiom :
  (rec__sub_arr__content__first__bit <  rec__sub_arr__content__last__bit)

axiom rec__sub_arr__content__position_axiom :
  (0 <= rec__sub_arr__content__position)

logic user_eq11 : us_rep3, us_rep3 -> bool

logic dummy11 : us_rep3

type sub_arr__ref = { sub_arr__content : us_rep3
}

function sub_arr__ref_sub_arr__content__projection(a: sub_arr__ref) : us_rep3 =
  (a).sub_arr__content

type t8s__ref = { t8s__content : us_t
}

function t8s__ref_t8s__content__projection(a: t8s__ref) : us_t =
  (a).t8s__content

type us_split_discrs8 = { rec__rec__sub_arr_ok__f : positive;
rec__rec__sub_arr_ok__l : natural
}

function us_split_discrs_rec__rec__sub_arr_ok__f__projection(a: us_split_discrs8) : positive =
  (a).rec__rec__sub_arr_ok__f

function us_split_discrs_rec__rec__sub_arr_ok__l__projection(a: us_split_discrs8) : natural =
  (a).rec__rec__sub_arr_ok__l

type us_split_discrs__ref4 = { us_split_discrs__content4 : us_split_discrs8
}

function us_split_discrs__ref___split_discrs__content__5__projection(a: us_split_discrs__ref4) : us_split_discrs8 =
  (a).us_split_discrs__content4

type us_split_fields8 = { rec__rec__sub_arr_ok__content : us_t
}

function us_split_fields_rec__rec__sub_arr_ok__content__projection(a: us_split_fields8) : us_t =
  (a).rec__rec__sub_arr_ok__content

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs9 : us_split_discrs8; us_split_fields9 :
us_split_fields8
}

function us_rep___split_discrs__5__projection(a: us_rep4) : us_split_discrs8 =
  (a).us_split_discrs9

function us_rep___split_fields__5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function bool_eq13(a: us_rep4, b: us_rep4) : bool =
  (if (((to_rep1(((a).us_split_discrs9).rec__rec__sub_arr_ok__f) = to_rep1(((b).us_split_discrs9).rec__rec__sub_arr_ok__f)) and
  (to_rep(((a).us_split_discrs9).rec__rec__sub_arr_ok__l) = to_rep(((b).us_split_discrs9).rec__rec__sub_arr_ok__l))) and
  (bool_eq11(((a).us_split_fields9).rec__rec__sub_arr_ok__content,
  ((b).us_split_fields9).rec__rec__sub_arr_ok__content) = true)) then true else false)

predicate in_range9(rec__rec__sub_arr_ok__f1: int,
  rec__rec__sub_arr_ok__l1: int, a: us_split_discrs8) =
  ((rec__rec__sub_arr_ok__f1 = to_rep1((a).rec__rec__sub_arr_ok__f)) and
  (rec__rec__sub_arr_ok__l1 = to_rep((a).rec__rec__sub_arr_ok__l)))

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic rec__sub_arr_ok__f__first__bit : int

logic rec__sub_arr_ok__f__last__bit : int

logic rec__sub_arr_ok__f__position : int

axiom rec__sub_arr_ok__f__first__bit_axiom :
  (0 <= rec__sub_arr_ok__f__first__bit)

axiom rec__sub_arr_ok__f__last__bit_axiom :
  (rec__sub_arr_ok__f__first__bit <  rec__sub_arr_ok__f__last__bit)

axiom rec__sub_arr_ok__f__position_axiom :
  (0 <= rec__sub_arr_ok__f__position)

logic rec__sub_arr_ok__l__first__bit : int

logic rec__sub_arr_ok__l__last__bit : int

logic rec__sub_arr_ok__l__position : int

axiom rec__sub_arr_ok__l__first__bit_axiom :
  (0 <= rec__sub_arr_ok__l__first__bit)

axiom rec__sub_arr_ok__l__last__bit_axiom :
  (rec__sub_arr_ok__l__first__bit <  rec__sub_arr_ok__l__last__bit)

axiom rec__sub_arr_ok__l__position_axiom :
  (0 <= rec__sub_arr_ok__l__position)

logic rec__sub_arr_ok__content__first__bit : int

logic rec__sub_arr_ok__content__last__bit : int

logic rec__sub_arr_ok__content__position : int

axiom rec__sub_arr_ok__content__first__bit_axiom :
  (0 <= rec__sub_arr_ok__content__first__bit)

axiom rec__sub_arr_ok__content__last__bit_axiom :
  (rec__sub_arr_ok__content__first__bit <  rec__sub_arr_ok__content__last__bit)

axiom rec__sub_arr_ok__content__position_axiom :
  (0 <= rec__sub_arr_ok__content__position)

logic user_eq12 : us_rep4, us_rep4 -> bool

logic dummy12 : us_rep4

type sub_arr_ok__ref = { sub_arr_ok__content : us_rep4
}

function sub_arr_ok__ref_sub_arr_ok__content__projection(a: sub_arr_ok__ref) : us_rep4 =
  (a).sub_arr_ok__content

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_18))

logic fliteral1 : t

axiom fliteral_axiom2 : tqtisFinite(fliteral1)

axiom fliteral_axiom3 :
  (tqtreal(fliteral1) = 340282346638528859811704183484516925440.0)

predicate dynamic_invariant4(temp___expr_60: t, temp___is_init_56: bool,
  temp___skip_constant_57: bool, temp___do_toplevel_58: bool,
  temp___do_typ_inv_59: bool) = (((temp___is_init_56 = true) or
  le(neg(fliteral1), fliteral1)) -> tqtisFinite(temp___expr_60))

predicate dynamic_invariant5(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (0 <= 1)) -> in_range3(temp___expr_166))

predicate in_range10(rec__rec__my_rec__e1: int, a: us_split_discrs) =
  (rec__rec__my_rec__e1 = to_rep5((a).rec__rec__my_rec__e))

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic rec__my_rec__e__first__bit2 : int

logic rec__my_rec__e__last__bit2 : int

logic rec__my_rec__e__position2 : int

axiom rec__my_rec__e__first__bit_axiom2 : (0 <= rec__my_rec__e__first__bit2)

axiom rec__my_rec__e__last__bit_axiom2 :
  (rec__my_rec__e__first__bit2 <  rec__my_rec__e__last__bit2)

axiom rec__my_rec__e__position_axiom2 : (0 <= rec__my_rec__e__position2)

logic rec__my_rec__x__first__bit2 : int

logic rec__my_rec__x__last__bit2 : int

logic rec__my_rec__x__position2 : int

axiom rec__my_rec__x__first__bit_axiom2 : (0 <= rec__my_rec__x__first__bit2)

axiom rec__my_rec__x__last__bit_axiom2 :
  (rec__my_rec__x__first__bit2 <  rec__my_rec__x__last__bit2)

axiom rec__my_rec__x__position_axiom2 : (0 <= rec__my_rec__x__position2)

logic rec__my_rec__y__first__bit2 : int

logic rec__my_rec__y__last__bit2 : int

logic rec__my_rec__y__position2 : int

axiom rec__my_rec__y__first__bit_axiom2 : (0 <= rec__my_rec__y__first__bit2)

axiom rec__my_rec__y__last__bit_axiom2 :
  (rec__my_rec__y__first__bit2 <  rec__my_rec__y__last__bit2)

axiom rec__my_rec__y__position_axiom2 : (0 <= rec__my_rec__y__position2)

logic user_eq13 : us_rep, us_rep -> bool

logic dummy13 : us_rep

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref_my_rec__content__projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

predicate dynamic_invariant6(temp___expr_179: us_rep1,
  temp___is_init_175: bool, temp___skip_constant_176: bool,
  temp___do_toplevel_177: bool, temp___do_typ_inv_178: bool) =
  in_range10(to_rep2(((temp___expr_179).us_split_discrs3).rec__rec__sub_rec__z),
  (((temp___expr_179).us_split_fields3).rec__rec__sub_rec__plop).us_split_discrs1)

predicate dynamic_invariant7(temp___expr_186: us_rep2,
  temp___is_init_182: bool, temp___skip_constant_183: bool,
  temp___do_toplevel_184: bool, temp___do_typ_inv_185: bool) =
  (rec__sub_rec_ok__plop__pred(temp___expr_186) ->
  in_range10(to_rep2(((temp___expr_186).us_split_discrs5).rec__rec__sub_rec_ok__z),
  (((temp___expr_186).us_split_fields5).rec__rec__sub_rec_ok__plop).us_split_discrs1))

predicate dynamic_invariant8(temp___expr_199: us_rep3,
  temp___is_init_195: bool, temp___skip_constant_196: bool,
  temp___do_toplevel_197: bool, temp___do_typ_inv_198: bool) =
  (let temp___201 = ((temp___expr_199).us_split_discrs7).rec__rec__sub_arr__l
  : natural in (let temp___200 =
  ((temp___expr_199).us_split_discrs7).rec__rec__sub_arr__f : natural in
  (dynamic_property(to_rep(temp___200), to_rep(temp___201),
  first1(((temp___expr_199).us_split_fields7).rec__rec__sub_arr__content),
  last1(((temp___expr_199).us_split_fields7).rec__rec__sub_arr__content)) and
  ((first1(((temp___expr_199).us_split_fields7).rec__rec__sub_arr__content) = to_rep(temp___200)) and
  (last1(((temp___expr_199).us_split_fields7).rec__rec__sub_arr__content) = to_rep(temp___201))))))

predicate dynamic_invariant9(temp___expr_207: us_rep4,
  temp___is_init_203: bool, temp___skip_constant_204: bool,
  temp___do_toplevel_205: bool, temp___do_typ_inv_206: bool) =
  (let temp___209 =
  ((temp___expr_207).us_split_discrs9).rec__rec__sub_arr_ok__l : natural in
  (let temp___208 =
  ((temp___expr_207).us_split_discrs9).rec__rec__sub_arr_ok__f : positive in
  (dynamic_property(to_rep1(temp___208), to_rep(temp___209),
  first1(((temp___expr_207).us_split_fields9).rec__rec__sub_arr_ok__content),
  last1(((temp___expr_207).us_split_fields9).rec__rec__sub_arr_ok__content)) and
  ((first1(((temp___expr_207).us_split_fields9).rec__rec__sub_arr_ok__content) = to_rep1(temp___208)) and
  (last1(((temp___expr_207).us_split_fields9).rec__rec__sub_arr_ok__content) = to_rep(temp___209))))))

 (* File "rec.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall usf:int. (dynamic_invariant2(usf, true, true, true, true) ->
  (forall usf1:us_rep1.
  ((to_rep2(((usf1).us_split_discrs3).rec__rec__sub_rec__z) = usf) ->
  in_range3(usf)))))
