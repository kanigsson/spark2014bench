(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__private_discr__p_with_default__c : natural
}

function us_split_discrs_rec__private_discr__p_with_default__c__projection(a: us_split_discrs) : natural =
  (a).rec__private_discr__p_with_default__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__6__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__private_discr__p_with_default : us_main_type
}

function us_split_fields_rec__private_discr__p_with_default__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_discr__p_with_default

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__6__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__private_discr__p_with_default__c) = to_rep(((b).us_split_discrs1).rec__private_discr__p_with_default__c)) and
  (us_main_eq(((a).us_split_fields1).rec__private_discr__p_with_default,
  ((b).us_split_fields1).rec__private_discr__p_with_default) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic private_discr__p_with_default__c__first__bit : int

logic private_discr__p_with_default__c__last__bit : int

logic private_discr__p_with_default__c__position : int

axiom private_discr__p_with_default__c__first__bit_axiom :
  (0 <= private_discr__p_with_default__c__first__bit)

axiom private_discr__p_with_default__c__last__bit_axiom :
  (private_discr__p_with_default__c__first__bit <  private_discr__p_with_default__c__last__bit)

axiom private_discr__p_with_default__c__position_axiom :
  (0 <= private_discr__p_with_default__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type p_with_default__ref = { p_with_default__content : us_rep
}

function p_with_default__ref_p_with_default__content__projection(a: p_with_default__ref) : us_rep =
  (a).p_with_default__content

logic new_with_default : int -> us_rep

logic new_with_default__function_guard : us_rep, int -> prop

predicate default_initial_assumption(temp___expr_250: us_rep,
  temp___skip_top_level_251: bool) =
  (to_rep(((temp___expr_250).us_split_discrs1).rec__private_discr__p_with_default__c) = 0)

predicate in_range1(rec__private_discr__p_with_default__c1: int, a: us_rep) =
  (rec__private_discr__p_with_default__c1 = to_rep(((a).us_split_discrs1).rec__private_discr__p_with_default__c))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic private_discr__p_with_default__c__first__bit1 : int

logic private_discr__p_with_default__c__last__bit1 : int

logic private_discr__p_with_default__c__position1 : int

axiom private_discr__p_with_default__c__first__bit_axiom1 :
  (0 <= private_discr__p_with_default__c__first__bit1)

axiom private_discr__p_with_default__c__last__bit_axiom1 :
  (private_discr__p_with_default__c__first__bit1 <  private_discr__p_with_default__c__last__bit1)

axiom private_discr__p_with_default__c__position_axiom1 :
  (0 <= private_discr__p_with_default__c__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type tdS__ref = { tdS__content : us_rep
}

function tdS__ref_tdS__content__2__projection(a: tdS__ref) : us_rep =
  (a).tdS__content

logic d__split_discrs : us_split_discrs

logic d__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_267: us_rep,
  temp___is_init_263: bool, temp___skip_constant_264: bool,
  temp___do_toplevel_265: bool, temp___do_typ_inv_266: bool) =
  ((not (temp___skip_constant_264 = true)) -> in_range1(c, temp___expr_267))

predicate default_initial_assumption1(temp___expr_269: us_rep,
  temp___skip_top_level_270: bool) =
  (to_rep(((temp___expr_269).us_split_discrs1).rec__private_discr__p_with_default__c) = c)

 (* File "discr.ads", line 24, characters 0-0 *)
goal defqtvc :
  (forall d__split_fields:us_main_type. (dynamic_invariant(c, true, false,
  true, true) -> (in_range(c) -> ((d__attr__constrained = true) ->
  (default_initial_assumption1({ us_split_discrs1 = d__split_discrs;
  us_split_fields1 = { rec__private_discr__p_with_default = d__split_fields }
  }, false) -> (dynamic_invariant1({ us_split_discrs1 = d__split_discrs;
  us_split_fields1 = { rec__private_discr__p_with_default = d__split_fields }
  }, false, false, true, true) -> (let o = c : int in (let o1 =
  new_with_default(o) : us_rep in ((new_with_default__function_guard(o1,
  o) and
  (to_rep(((o1).us_split_discrs1).rec__private_discr__p_with_default__c) = o)) ->
  ((d__split_discrs = (o1).us_split_discrs1) -> (let o2 = new_with_default(0)
  : us_rep in ((new_with_default__function_guard(o2, 0) and
  (to_rep(((o2).us_split_discrs1).rec__private_discr__p_with_default__c) = 0)) ->
  in_range1(c, o2)))))))))))))
