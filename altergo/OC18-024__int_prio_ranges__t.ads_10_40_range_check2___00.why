(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bad_interrupt_priority : unit -> int

logic bad_interrupt_priority__function_guard : int, unit -> prop

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type time__ref = { time__content : us_rep
}

function time__ref_time__content__projection(a: time__ref) : us_rep =
  (a).time__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq1 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type time_span__ref = { time_span__content : us_rep1
}

function time_span__ref_time_span__content__projection(a: time_span__ref) : us_rep1 =
  (a).time_span__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic seconds : int -> us_rep1

logic seconds__function_guard : us_rep1, int -> prop

logic oadd : us_rep, us_rep1 -> us_rep

logic oadd__function_guard : us_rep, us_rep, us_rep1 -> prop

logic attr__ATTRIBUTE_ADDRESS : int

type any_priority

logic any_priorityqtint : any_priority -> int

axiom any_priorityqtaxiom :
  (forall i:any_priority. (0 <= any_priorityqtint(i)))

axiom any_priorityqtaxiom1 :
  (forall i:any_priority. (any_priorityqtint(i) <= 98))

predicate in_range1(x: int) = ((0 <= x) and (x <= 98))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq3 : any_priority, any_priority -> bool

logic dummy3 : any_priority

type any_priority__ref = { any_priority__content : any_priority
}

function any_priority__ref_any_priority__content__projection(a: any_priority__ref) : any_priority =
  (a).any_priority__content

axiom bad_interrupt_priority__post_axiom :
  (forall us_void_param:unit [bad_interrupt_priority(us_void_param)].
  (let result = bad_interrupt_priority(us_void_param) : int in
  (bad_interrupt_priority__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom bad_interrupt_priority__def_axiom :
  (forall us_void_param:unit [bad_interrupt_priority(us_void_param)].
  (bad_interrupt_priority(us_void_param) = 99))

predicate dynamic_invariant1(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 98)) -> in_range1(temp___expr_162))

 (* File "t.ads", line 9, characters 0-0 *)
goal defqtvc :
  (bad_interrupt_priority__function_guard(bad_interrupt_priority(void),
  void) -> (0 <= bad_interrupt_priority(void)))
