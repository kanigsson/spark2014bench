(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 4294967295))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(4294967296 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  4294967296))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : count_type, count_type -> bool

logic dummy : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__dic_of_cont__my_dlli__list__capacity :
count_type
}

function us_split_discrs_rec__dic_of_cont__my_dlli__list__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__dic_of_cont__my_dlli__list__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__dic_of_cont__my_dlli__list : us_main_type
}

function us_split_fields_rec__dic_of_cont__my_dlli__list__projection(a: us_split_fields) : us_main_type =
  (a).rec__dic_of_cont__my_dlli__list

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity) = to_rep(((b).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__dic_of_cont__my_dlli__list,
  ((b).us_split_fields1).rec__dic_of_cont__my_dlli__list) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dic_of_cont__my_dlli__list__capacity__first__bit : int

logic dic_of_cont__my_dlli__list__capacity__last__bit : int

logic dic_of_cont__my_dlli__list__capacity__position : int

axiom dic_of_cont__my_dlli__list__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_dlli__list__capacity__first__bit)

axiom dic_of_cont__my_dlli__list__capacity__last__bit_axiom :
  (dic_of_cont__my_dlli__list__capacity__first__bit <  dic_of_cont__my_dlli__list__capacity__last__bit)

axiom dic_of_cont__my_dlli__list__capacity__position_axiom :
  (0 <= dic_of_cont__my_dlli__list__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type list__ref = { list__content : us_rep
}

function list__ref_list__content__projection(a: list__ref) : us_rep =
  (a).list__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)]. ((length(container) = 0) ->
  (is_empty(container) = true)))

type hash_type

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq3(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t

logic user_eq2 : hash_type, hash_type -> bool

logic dummy2 : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref_hash_type__content__projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

logic to_rep1 : hash_type -> t

logic of_rep1 : t -> hash_type

axiom inversion_axiom1 :
  (forall x:hash_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom coerce_axiom1 :
  (forall x:t [to_rep1(of_rep1(x))]. (to_rep1(of_rep1(x)) = x))

function to_int1(x: hash_type) : int = tqtint(to_rep1(x))

axiom range_int_axiom :
  (forall x:hash_type [to_int1(x)]. uint_in_range(to_int1(x)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = { rec__dic_of_cont__my_hama__map__capacity :
count_type; rec__dic_of_cont__my_hama__map__modulus : hash_type
}

function us_split_discrs_rec__dic_of_cont__my_hama__map__capacity__projection(a: us_split_discrs2) : count_type =
  (a).rec__dic_of_cont__my_hama__map__capacity

function us_split_discrs_rec__dic_of_cont__my_hama__map__modulus__projection(a: us_split_discrs2) : hash_type =
  (a).rec__dic_of_cont__my_hama__map__modulus

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__dic_of_cont__my_hama__map : us_main_type1
}

function us_split_fields_rec__dic_of_cont__my_hama__map__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__dic_of_cont__my_hama__map

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity) = to_rep(((b).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity)) and
  (to_rep1(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus) = to_rep1(((b).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus))) and
  (us_main_eq1(((a).us_split_fields3).rec__dic_of_cont__my_hama__map,
  ((b).us_split_fields3).rec__dic_of_cont__my_hama__map) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dic_of_cont__my_hama__map__capacity__first__bit : int

logic dic_of_cont__my_hama__map__capacity__last__bit : int

logic dic_of_cont__my_hama__map__capacity__position : int

axiom dic_of_cont__my_hama__map__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_hama__map__capacity__first__bit)

axiom dic_of_cont__my_hama__map__capacity__last__bit_axiom :
  (dic_of_cont__my_hama__map__capacity__first__bit <  dic_of_cont__my_hama__map__capacity__last__bit)

axiom dic_of_cont__my_hama__map__capacity__position_axiom :
  (0 <= dic_of_cont__my_hama__map__capacity__position)

logic dic_of_cont__my_hama__map__modulus__first__bit : int

logic dic_of_cont__my_hama__map__modulus__last__bit : int

logic dic_of_cont__my_hama__map__modulus__position : int

axiom dic_of_cont__my_hama__map__modulus__first__bit_axiom :
  (0 <= dic_of_cont__my_hama__map__modulus__first__bit)

axiom dic_of_cont__my_hama__map__modulus__last__bit_axiom :
  (dic_of_cont__my_hama__map__modulus__first__bit <  dic_of_cont__my_hama__map__modulus__last__bit)

axiom dic_of_cont__my_hama__map__modulus__position_axiom :
  (0 <= dic_of_cont__my_hama__map__modulus__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type map__ref = { map__content : us_rep1
}

function map__ref_map__content__2__projection(a: map__ref) : us_rep1 =
  (a).map__content

logic is_empty1 : us_rep1 -> bool

logic is_empty__function_guard1 : bool, us_rep1 -> prop

logic length1 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

logic oeq1 : us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep1 [is_empty1(container)].
  ((is_empty1(container) = true) -> (length1(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep1 [is_empty1(container)].
  ((length1(container) = 0) -> (is_empty1(container) = true)))

logic default_modulus : int -> t

logic default_modulus__function_guard : t, int -> prop

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 4294967295)

predicate dynamic_invariant(temp___expr_657: t, temp___is_init_653: bool,
  temp___skip_constant_654: bool, temp___do_toplevel_655: bool,
  temp___do_typ_inv_656: bool) = true

predicate dynamic_invariant1(temp___expr_671: int, temp___is_init_667: bool,
  temp___skip_constant_668: bool, temp___do_toplevel_669: bool,
  temp___do_typ_inv_670: bool) = (((temp___is_init_667 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_671))

axiom default_modulus__post_axiom :
  (forall capacity:int [default_modulus(capacity)].
  (dynamic_invariant1(capacity, true, true, true, true) ->
  dynamic_invariant(default_modulus(capacity), true, false, true, true)))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_discrs4 = { rec__dic_of_cont__my_hase__set__capacity :
count_type; rec__dic_of_cont__my_hase__set__modulus : hash_type
}

function us_split_discrs_rec__dic_of_cont__my_hase__set__capacity__projection(a: us_split_discrs4) : count_type =
  (a).rec__dic_of_cont__my_hase__set__capacity

function us_split_discrs_rec__dic_of_cont__my_hase__set__modulus__projection(a: us_split_discrs4) : hash_type =
  (a).rec__dic_of_cont__my_hase__set__modulus

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields4 = { rec__dic_of_cont__my_hase__set : us_main_type2
}

function us_split_fields_rec__dic_of_cont__my_hase__set__projection(a: us_split_fields4) : us_main_type2 =
  (a).rec__dic_of_cont__my_hase__set

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs5 : us_split_discrs4; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___split_fields__5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq5(a: us_rep2, b: us_rep2) : bool =
  (if (((to_rep(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity) = to_rep(((b).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity)) and
  (to_rep1(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus) = to_rep1(((b).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus))) and
  (us_main_eq2(((a).us_split_fields5).rec__dic_of_cont__my_hase__set,
  ((b).us_split_fields5).rec__dic_of_cont__my_hase__set) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic dic_of_cont__my_hase__set__capacity__first__bit : int

logic dic_of_cont__my_hase__set__capacity__last__bit : int

logic dic_of_cont__my_hase__set__capacity__position : int

axiom dic_of_cont__my_hase__set__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_hase__set__capacity__first__bit)

axiom dic_of_cont__my_hase__set__capacity__last__bit_axiom :
  (dic_of_cont__my_hase__set__capacity__first__bit <  dic_of_cont__my_hase__set__capacity__last__bit)

axiom dic_of_cont__my_hase__set__capacity__position_axiom :
  (0 <= dic_of_cont__my_hase__set__capacity__position)

logic dic_of_cont__my_hase__set__modulus__first__bit : int

logic dic_of_cont__my_hase__set__modulus__last__bit : int

logic dic_of_cont__my_hase__set__modulus__position : int

axiom dic_of_cont__my_hase__set__modulus__first__bit_axiom :
  (0 <= dic_of_cont__my_hase__set__modulus__first__bit)

axiom dic_of_cont__my_hase__set__modulus__last__bit_axiom :
  (dic_of_cont__my_hase__set__modulus__first__bit <  dic_of_cont__my_hase__set__modulus__last__bit)

axiom dic_of_cont__my_hase__set__modulus__position_axiom :
  (0 <= dic_of_cont__my_hase__set__modulus__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type set__ref = { set__content : us_rep2
}

function set__ref_set__content__projection(a: set__ref) : us_rep2 =
  (a).set__content

logic is_empty2 : us_rep2 -> bool

logic is_empty__function_guard2 : bool, us_rep2 -> prop

logic length2 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic oeq2 : us_rep2, us_rep2 -> bool

logic oeq__function_guard2 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq2(a, b)))

axiom is_empty__post_axiom4 :
  (forall container:us_rep2 [is_empty2(container)].
  ((is_empty2(container) = true) -> (length2(container) = 0)))

axiom is_empty__post_axiom5 :
  (forall container:us_rep2 [is_empty2(container)].
  ((length2(container) = 0) -> (is_empty2(container) = true)))

logic default_modulus1 : int -> t

logic default_modulus__function_guard1 : t, int -> prop

axiom default_modulus__post_axiom1 :
  (forall capacity:int [default_modulus1(capacity)].
  (dynamic_invariant1(capacity, true, true, true, true) ->
  dynamic_invariant(default_modulus1(capacity), true, false, true, true)))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_split_discrs6 = { rec__dic_of_cont__my_orma__map__capacity :
count_type
}

function us_split_discrs_rec__dic_of_cont__my_orma__map__capacity__projection(a: us_split_discrs6) : count_type =
  (a).rec__dic_of_cont__my_orma__map__capacity

type us_split_discrs__ref3 = { us_split_discrs__content3 : us_split_discrs6
}

function us_split_discrs__ref___split_discrs__content__4__projection(a: us_split_discrs__ref3) : us_split_discrs6 =
  (a).us_split_discrs__content3

type us_split_fields6 = { rec__dic_of_cont__my_orma__map : us_main_type3
}

function us_split_fields_rec__dic_of_cont__my_orma__map__projection(a: us_split_fields6) : us_main_type3 =
  (a).rec__dic_of_cont__my_orma__map

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__7__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs7 : us_split_discrs6; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__4__projection(a: us_rep3) : us_split_discrs6 =
  (a).us_split_discrs7

function us_rep___split_fields__7__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq6(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep(((a).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity) = to_rep(((b).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity)) and
  (us_main_eq3(((a).us_split_fields7).rec__dic_of_cont__my_orma__map,
  ((b).us_split_fields7).rec__dic_of_cont__my_orma__map) = true)) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic dic_of_cont__my_orma__map__capacity__first__bit : int

logic dic_of_cont__my_orma__map__capacity__last__bit : int

logic dic_of_cont__my_orma__map__capacity__position : int

axiom dic_of_cont__my_orma__map__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_orma__map__capacity__first__bit)

axiom dic_of_cont__my_orma__map__capacity__last__bit_axiom :
  (dic_of_cont__my_orma__map__capacity__first__bit <  dic_of_cont__my_orma__map__capacity__last__bit)

axiom dic_of_cont__my_orma__map__capacity__position_axiom :
  (0 <= dic_of_cont__my_orma__map__capacity__position)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type map__ref1 = { map__content1 : us_rep3
}

function map__ref_map__content__6__projection(a: map__ref1) : us_rep3 =
  (a).map__content1

logic is_empty3 : us_rep3 -> bool

logic is_empty__function_guard3 : bool, us_rep3 -> prop

logic length3 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic oeq3 : us_rep3, us_rep3 -> bool

logic oeq__function_guard3 : bool, us_rep3, us_rep3 -> prop

axiom user_eq__def_axiom3 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq3(a, b)))

axiom is_empty__post_axiom6 :
  (forall container:us_rep3 [is_empty3(container)].
  ((is_empty3(container) = true) -> (length3(container) = 0)))

axiom is_empty__post_axiom7 :
  (forall container:us_rep3 [is_empty3(container)].
  ((length3(container) = 0) -> (is_empty3(container) = true)))

type us_main_type4

logic us_main_eq4 : us_main_type4, us_main_type4 -> bool

type us_split_discrs8 = { rec__dic_of_cont__my_orse__set__capacity :
count_type
}

function us_split_discrs_rec__dic_of_cont__my_orse__set__capacity__projection(a: us_split_discrs8) : count_type =
  (a).rec__dic_of_cont__my_orse__set__capacity

type us_split_discrs__ref4 = { us_split_discrs__content4 : us_split_discrs8
}

function us_split_discrs__ref___split_discrs__content__5__projection(a: us_split_discrs__ref4) : us_split_discrs8 =
  (a).us_split_discrs__content4

type us_split_fields8 = { rec__dic_of_cont__my_orse__set : us_main_type4
}

function us_split_fields_rec__dic_of_cont__my_orse__set__projection(a: us_split_fields8) : us_main_type4 =
  (a).rec__dic_of_cont__my_orse__set

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__9__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs9 : us_split_discrs8; us_split_fields9 :
us_split_fields8
}

function us_rep___split_discrs__5__projection(a: us_rep4) : us_split_discrs8 =
  (a).us_split_discrs9

function us_rep___split_fields__9__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function bool_eq7(a: us_rep4, b: us_rep4) : bool =
  (if ((to_rep(((a).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity) = to_rep(((b).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity)) and
  (us_main_eq4(((a).us_split_fields9).rec__dic_of_cont__my_orse__set,
  ((b).us_split_fields9).rec__dic_of_cont__my_orse__set) = true)) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic dic_of_cont__my_orse__set__capacity__first__bit : int

logic dic_of_cont__my_orse__set__capacity__last__bit : int

logic dic_of_cont__my_orse__set__capacity__position : int

axiom dic_of_cont__my_orse__set__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_orse__set__capacity__first__bit)

axiom dic_of_cont__my_orse__set__capacity__last__bit_axiom :
  (dic_of_cont__my_orse__set__capacity__first__bit <  dic_of_cont__my_orse__set__capacity__last__bit)

axiom dic_of_cont__my_orse__set__capacity__position_axiom :
  (0 <= dic_of_cont__my_orse__set__capacity__position)

logic user_eq6 : us_rep4, us_rep4 -> bool

logic dummy6 : us_rep4

type set__ref1 = { set__content1 : us_rep4
}

function set__ref_set__content__3__projection(a: set__ref1) : us_rep4 =
  (a).set__content1

logic is_empty4 : us_rep4 -> bool

logic is_empty__function_guard4 : bool, us_rep4 -> prop

logic length4 : us_rep4 -> int

logic length__function_guard4 : int, us_rep4 -> prop

logic oeq4 : us_rep4, us_rep4 -> bool

logic oeq__function_guard4 : bool, us_rep4, us_rep4 -> prop

axiom user_eq__def_axiom4 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq4(a, b)))

axiom is_empty__post_axiom8 :
  (forall container:us_rep4 [is_empty4(container)].
  ((is_empty4(container) = true) -> (length4(container) = 0)))

axiom is_empty__post_axiom9 :
  (forall container:us_rep4 [is_empty4(container)].
  ((length4(container) = 0) -> (is_empty4(container) = true)))

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq7 : capacity_range, capacity_range -> bool

logic dummy7 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep2(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep2 : int -> capacity_range

axiom inversion_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom1 :
  (forall x:capacity_range [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_main_type5

logic us_main_eq5 : us_main_type5, us_main_type5 -> bool

type us_split_discrs10 = { rec__dic_of_cont__my_fove__vector__capacity :
capacity_range
}

function us_split_discrs_rec__dic_of_cont__my_fove__vector__capacity__projection(a: us_split_discrs10) : capacity_range =
  (a).rec__dic_of_cont__my_fove__vector__capacity

type us_split_discrs__ref5 = { us_split_discrs__content5 : us_split_discrs10
}

function us_split_discrs__ref___split_discrs__content__6__projection(a: us_split_discrs__ref5) : us_split_discrs10 =
  (a).us_split_discrs__content5

type us_split_fields10 = { rec__dic_of_cont__my_fove__vector : us_main_type5
}

function us_split_fields_rec__dic_of_cont__my_fove__vector__projection(a: us_split_fields10) : us_main_type5 =
  (a).rec__dic_of_cont__my_fove__vector

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___split_fields__content__11__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_discrs11 : us_split_discrs10; us_split_fields11 :
us_split_fields10
}

function us_rep___split_discrs__6__projection(a: us_rep5) : us_split_discrs10 =
  (a).us_split_discrs11

function us_rep___split_fields__11__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

function bool_eq9(a: us_rep5, b: us_rep5) : bool =
  (if ((to_rep2(((a).us_split_discrs11).rec__dic_of_cont__my_fove__vector__capacity) = to_rep2(((b).us_split_discrs11).rec__dic_of_cont__my_fove__vector__capacity)) and
  (us_main_eq5(((a).us_split_fields11).rec__dic_of_cont__my_fove__vector,
  ((b).us_split_fields11).rec__dic_of_cont__my_fove__vector) = true)) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic dic_of_cont__my_fove__vector__capacity__first__bit : int

logic dic_of_cont__my_fove__vector__capacity__last__bit : int

logic dic_of_cont__my_fove__vector__capacity__position : int

axiom dic_of_cont__my_fove__vector__capacity__first__bit_axiom :
  (0 <= dic_of_cont__my_fove__vector__capacity__first__bit)

axiom dic_of_cont__my_fove__vector__capacity__last__bit_axiom :
  (dic_of_cont__my_fove__vector__capacity__first__bit <  dic_of_cont__my_fove__vector__capacity__last__bit)

axiom dic_of_cont__my_fove__vector__capacity__position_axiom :
  (0 <= dic_of_cont__my_fove__vector__capacity__position)

logic user_eq8 : us_rep5, us_rep5 -> bool

logic dummy8 : us_rep5

type vector__ref = { vector__content : us_rep5
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep5 =
  (a).vector__content

logic is_empty5 : us_rep5 -> bool

logic is_empty__function_guard5 : bool, us_rep5 -> prop

logic length5 : us_rep5 -> int

logic length__function_guard5 : int, us_rep5 -> prop

logic oeq5 : us_rep5, us_rep5 -> bool

logic oeq__function_guard5 : bool, us_rep5, us_rep5 -> prop

axiom user_eq__def_axiom5 :
  (forall a:us_rep5. forall b:us_rep5 [user_eq8(a, b)]. (user_eq8(a,
  b) = oeq5(a, b)))

axiom is_empty__post_axiom10 :
  (forall container:us_rep5 [is_empty5(container)].
  ((is_empty5(container) = true) -> (length5(container) = 0)))

axiom is_empty__post_axiom11 :
  (forall container:us_rep5 [is_empty5(container)].
  ((length5(container) = 0) -> (is_empty5(container) = true)))

logic capacity : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range2(rec__dic_of_cont__my_dlli__list__capacity1: int,
  a: us_rep) =
  (rec__dic_of_cont__my_dlli__list__capacity1 = to_rep(((a).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity))

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic dic_of_cont__my_dlli__list__capacity__first__bit1 : int

logic dic_of_cont__my_dlli__list__capacity__last__bit1 : int

logic dic_of_cont__my_dlli__list__capacity__position1 : int

axiom dic_of_cont__my_dlli__list__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_dlli__list__capacity__first__bit1)

axiom dic_of_cont__my_dlli__list__capacity__last__bit_axiom1 :
  (dic_of_cont__my_dlli__list__capacity__first__bit1 <  dic_of_cont__my_dlli__list__capacity__last__bit1)

axiom dic_of_cont__my_dlli__list__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_dlli__list__capacity__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy9 : us_rep

type tdlliS__ref = { tdlliS__content : us_rep
}

function tdlliS__ref_tdlliS__content__projection(a: tdlliS__ref) : us_rep =
  (a).tdlliS__content

logic dlli__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom user_eq__def_axiom6 :
  (forall a:us_rep. forall b:us_rep [user_eq9(a, b)]. (user_eq9(a,
  b) = oeq(a, b)))

predicate dynamic_invariant2(temp___expr_2544: us_rep,
  temp___is_init_2540: bool, temp___skip_constant_2541: bool,
  temp___do_toplevel_2542: bool, temp___do_typ_inv_2543: bool) =
  ((not (temp___skip_constant_2541 = true)) -> in_range2(capacity,
  temp___expr_2544))

predicate default_initial_assumption(temp___expr_2546: us_rep,
  temp___skip_top_level_2547: bool) =
  ((to_rep(((temp___expr_2546).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity) = capacity) and
  ((not (temp___skip_top_level_2547 = true)) ->
  (is_empty(temp___expr_2546) = true)))

logic r2b : t

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range3(rec__dic_of_cont__my_hama__map__capacity1: int,
  rec__dic_of_cont__my_hama__map__modulus1: t, a: us_rep1) =
  ((rec__dic_of_cont__my_hama__map__capacity1 = to_rep(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity)) and
  (rec__dic_of_cont__my_hama__map__modulus1 = to_rep1(((a).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus)))

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic dic_of_cont__my_hama__map__capacity__first__bit1 : int

logic dic_of_cont__my_hama__map__capacity__last__bit1 : int

logic dic_of_cont__my_hama__map__capacity__position1 : int

axiom dic_of_cont__my_hama__map__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hama__map__capacity__first__bit1)

axiom dic_of_cont__my_hama__map__capacity__last__bit_axiom1 :
  (dic_of_cont__my_hama__map__capacity__first__bit1 <  dic_of_cont__my_hama__map__capacity__last__bit1)

axiom dic_of_cont__my_hama__map__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_hama__map__capacity__position1)

logic dic_of_cont__my_hama__map__modulus__first__bit1 : int

logic dic_of_cont__my_hama__map__modulus__last__bit1 : int

logic dic_of_cont__my_hama__map__modulus__position1 : int

axiom dic_of_cont__my_hama__map__modulus__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hama__map__modulus__first__bit1)

axiom dic_of_cont__my_hama__map__modulus__last__bit_axiom1 :
  (dic_of_cont__my_hama__map__modulus__first__bit1 <  dic_of_cont__my_hama__map__modulus__last__bit1)

axiom dic_of_cont__my_hama__map__modulus__position_axiom1 :
  (0 <= dic_of_cont__my_hama__map__modulus__position1)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy10 : us_rep1

type tdhamaS__ref = { tdhamaS__content : us_rep1
}

function tdhamaS__ref_tdhamaS__content__projection(a: tdhamaS__ref) : us_rep1 =
  (a).tdhamaS__content

logic dhama__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS3 : int

axiom user_eq__def_axiom7 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq10(a, b)]. (user_eq10(a,
  b) = oeq1(a, b)))

predicate dynamic_invariant3(temp___expr_2554: us_rep1,
  temp___is_init_2550: bool, temp___skip_constant_2551: bool,
  temp___do_toplevel_2552: bool, temp___do_typ_inv_2553: bool) =
  ((not (temp___skip_constant_2551 = true)) -> in_range3(capacity, r2b,
  temp___expr_2554))

predicate default_initial_assumption1(temp___expr_2557: us_rep1,
  temp___skip_top_level_2558: bool) =
  (((to_rep(((temp___expr_2557).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity) = capacity) and
  (to_rep1(((temp___expr_2557).us_split_discrs3).rec__dic_of_cont__my_hama__map__modulus) = r2b)) and
  ((not (temp___skip_top_level_2558 = true)) ->
  (is_empty1(temp___expr_2557) = true)))

logic r5b : t

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate in_range4(rec__dic_of_cont__my_hase__set__capacity1: int,
  rec__dic_of_cont__my_hase__set__modulus1: t, a: us_rep2) =
  ((rec__dic_of_cont__my_hase__set__capacity1 = to_rep(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity)) and
  (rec__dic_of_cont__my_hase__set__modulus1 = to_rep1(((a).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus)))

logic value__size8 : int

logic object__size8 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom alignment_axiom8 : (0 <= alignment8)

logic dic_of_cont__my_hase__set__capacity__first__bit1 : int

logic dic_of_cont__my_hase__set__capacity__last__bit1 : int

logic dic_of_cont__my_hase__set__capacity__position1 : int

axiom dic_of_cont__my_hase__set__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hase__set__capacity__first__bit1)

axiom dic_of_cont__my_hase__set__capacity__last__bit_axiom1 :
  (dic_of_cont__my_hase__set__capacity__first__bit1 <  dic_of_cont__my_hase__set__capacity__last__bit1)

axiom dic_of_cont__my_hase__set__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_hase__set__capacity__position1)

logic dic_of_cont__my_hase__set__modulus__first__bit1 : int

logic dic_of_cont__my_hase__set__modulus__last__bit1 : int

logic dic_of_cont__my_hase__set__modulus__position1 : int

axiom dic_of_cont__my_hase__set__modulus__first__bit_axiom1 :
  (0 <= dic_of_cont__my_hase__set__modulus__first__bit1)

axiom dic_of_cont__my_hase__set__modulus__last__bit_axiom1 :
  (dic_of_cont__my_hase__set__modulus__first__bit1 <  dic_of_cont__my_hase__set__modulus__last__bit1)

axiom dic_of_cont__my_hase__set__modulus__position_axiom1 :
  (0 <= dic_of_cont__my_hase__set__modulus__position1)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type tdhaseS__ref = { tdhaseS__content : us_rep2
}

function tdhaseS__ref_tdhaseS__content__projection(a: tdhaseS__ref) : us_rep2 =
  (a).tdhaseS__content

logic dhase__split_discrs : us_split_discrs4

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom user_eq__def_axiom8 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq11(a, b)]. (user_eq11(a,
  b) = oeq2(a, b)))

predicate dynamic_invariant4(temp___expr_2566: us_rep2,
  temp___is_init_2562: bool, temp___skip_constant_2563: bool,
  temp___do_toplevel_2564: bool, temp___do_typ_inv_2565: bool) =
  ((not (temp___skip_constant_2563 = true)) -> in_range4(capacity, r5b,
  temp___expr_2566))

predicate default_initial_assumption2(temp___expr_2569: us_rep2,
  temp___skip_top_level_2570: bool) =
  (((to_rep(((temp___expr_2569).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity) = capacity) and
  (to_rep1(((temp___expr_2569).us_split_discrs5).rec__dic_of_cont__my_hase__set__modulus) = r5b)) and
  ((not (temp___skip_top_level_2570 = true)) ->
  (is_empty2(temp___expr_2569) = true)))

predicate in_range5(rec__dic_of_cont__my_orma__map__capacity1: int,
  a: us_rep3) =
  (rec__dic_of_cont__my_orma__map__capacity1 = to_rep(((a).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity))

logic value__size9 : int

logic object__size9 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom alignment_axiom9 : (0 <= alignment9)

logic dic_of_cont__my_orma__map__capacity__first__bit1 : int

logic dic_of_cont__my_orma__map__capacity__last__bit1 : int

logic dic_of_cont__my_orma__map__capacity__position1 : int

axiom dic_of_cont__my_orma__map__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_orma__map__capacity__first__bit1)

axiom dic_of_cont__my_orma__map__capacity__last__bit_axiom1 :
  (dic_of_cont__my_orma__map__capacity__first__bit1 <  dic_of_cont__my_orma__map__capacity__last__bit1)

axiom dic_of_cont__my_orma__map__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_orma__map__capacity__position1)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy12 : us_rep3

type tdormaS__ref = { tdormaS__content : us_rep3
}

function tdormaS__ref_tdormaS__content__projection(a: tdormaS__ref) : us_rep3 =
  (a).tdormaS__content

logic dorma__split_discrs : us_split_discrs6

logic attr__ATTRIBUTE_ADDRESS6 : int

axiom user_eq__def_axiom9 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq12(a, b)]. (user_eq12(a,
  b) = oeq3(a, b)))

predicate dynamic_invariant5(temp___expr_2578: us_rep3,
  temp___is_init_2574: bool, temp___skip_constant_2575: bool,
  temp___do_toplevel_2576: bool, temp___do_typ_inv_2577: bool) =
  ((not (temp___skip_constant_2575 = true)) -> in_range5(capacity,
  temp___expr_2578))

predicate default_initial_assumption3(temp___expr_2580: us_rep3,
  temp___skip_top_level_2581: bool) =
  ((to_rep(((temp___expr_2580).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity) = capacity) and
  ((not (temp___skip_top_level_2581 = true)) ->
  (is_empty3(temp___expr_2580) = true)))

predicate in_range6(rec__dic_of_cont__my_orse__set__capacity1: int,
  a: us_rep4) =
  (rec__dic_of_cont__my_orse__set__capacity1 = to_rep(((a).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity))

logic value__size10 : int

logic object__size10 : int

logic alignment10 : int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (0 <= object__size10)

axiom alignment_axiom10 : (0 <= alignment10)

logic dic_of_cont__my_orse__set__capacity__first__bit1 : int

logic dic_of_cont__my_orse__set__capacity__last__bit1 : int

logic dic_of_cont__my_orse__set__capacity__position1 : int

axiom dic_of_cont__my_orse__set__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_orse__set__capacity__first__bit1)

axiom dic_of_cont__my_orse__set__capacity__last__bit_axiom1 :
  (dic_of_cont__my_orse__set__capacity__first__bit1 <  dic_of_cont__my_orse__set__capacity__last__bit1)

axiom dic_of_cont__my_orse__set__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_orse__set__capacity__position1)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy13 : us_rep4

type tdorseS__ref = { tdorseS__content : us_rep4
}

function tdorseS__ref_tdorseS__content__projection(a: tdorseS__ref) : us_rep4 =
  (a).tdorseS__content

logic dorse__split_discrs : us_split_discrs8

logic attr__ATTRIBUTE_ADDRESS7 : int

axiom user_eq__def_axiom10 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq13(a, b)]. (user_eq13(a,
  b) = oeq4(a, b)))

predicate dynamic_invariant6(temp___expr_2588: us_rep4,
  temp___is_init_2584: bool, temp___skip_constant_2585: bool,
  temp___do_toplevel_2586: bool, temp___do_typ_inv_2587: bool) =
  ((not (temp___skip_constant_2585 = true)) -> in_range6(capacity,
  temp___expr_2588))

predicate default_initial_assumption4(temp___expr_2590: us_rep4,
  temp___skip_top_level_2591: bool) =
  ((to_rep(((temp___expr_2590).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity) = capacity) and
  ((not (temp___skip_top_level_2591 = true)) ->
  (is_empty4(temp___expr_2590) = true)))

predicate in_range7(rec__dic_of_cont__my_fove__vector__capacity1: int,
  a: us_rep5) =
  (rec__dic_of_cont__my_fove__vector__capacity1 = to_rep2(((a).us_split_discrs11).rec__dic_of_cont__my_fove__vector__capacity))

logic value__size11 : int

logic object__size11 : int

logic alignment11 : int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 : (0 <= object__size11)

axiom alignment_axiom11 : (0 <= alignment11)

logic dic_of_cont__my_fove__vector__capacity__first__bit1 : int

logic dic_of_cont__my_fove__vector__capacity__last__bit1 : int

logic dic_of_cont__my_fove__vector__capacity__position1 : int

axiom dic_of_cont__my_fove__vector__capacity__first__bit_axiom1 :
  (0 <= dic_of_cont__my_fove__vector__capacity__first__bit1)

axiom dic_of_cont__my_fove__vector__capacity__last__bit_axiom1 :
  (dic_of_cont__my_fove__vector__capacity__first__bit1 <  dic_of_cont__my_fove__vector__capacity__last__bit1)

axiom dic_of_cont__my_fove__vector__capacity__position_axiom1 :
  (0 <= dic_of_cont__my_fove__vector__capacity__position1)

logic user_eq14 : us_rep5, us_rep5 -> bool

logic dummy14 : us_rep5

type tdfoveS__ref = { tdfoveS__content : us_rep5
}

function tdfoveS__ref_tdfoveS__content__projection(a: tdfoveS__ref) : us_rep5 =
  (a).tdfoveS__content

logic dfove__split_discrs : us_split_discrs10

logic attr__ATTRIBUTE_ADDRESS8 : int

axiom user_eq__def_axiom11 :
  (forall a:us_rep5. forall b:us_rep5 [user_eq14(a, b)]. (user_eq14(a,
  b) = oeq5(a, b)))

predicate dynamic_invariant7(temp___expr_2598: us_rep5,
  temp___is_init_2594: bool, temp___skip_constant_2595: bool,
  temp___do_toplevel_2596: bool, temp___do_typ_inv_2597: bool) =
  ((not (temp___skip_constant_2595 = true)) -> in_range7(capacity,
  temp___expr_2598))

predicate default_initial_assumption5(temp___expr_2600: us_rep5,
  temp___skip_top_level_2601: bool) =
  ((to_rep2(((temp___expr_2600).us_split_discrs11).rec__dic_of_cont__my_fove__vector__capacity) = capacity) and
  ((not (temp___skip_top_level_2601 = true)) ->
  (is_empty5(temp___expr_2600) = true)))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= to_rep(((container).us_split_discrs1).rec__dic_of_cont__my_dlli__list__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant1(length(container), true, false, true, true))

type us_main_type6

logic us_main_eq6 : us_main_type6, us_main_type6 -> bool

type us_rep6

logic bool_eq10 : us_rep6, us_rep6 -> bool

logic value__size12 : int

logic object__size12 : int

logic alignment12 : int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 : (0 <= object__size12)

axiom alignment_axiom12 : (0 <= alignment12)

logic user_eq15 : us_rep6, us_rep6 -> bool

logic dummy15 : us_rep6

type sequence__ref = { sequence__content : us_rep6
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep6 =
  (a).sequence__content

logic length6 : us_rep6 -> int

logic length__function_guard6 : int, us_rep6 -> prop

logic model : us_rep -> us_rep6

logic model__function_guard : us_rep6, us_rep -> prop

logic bool_eq11 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq11(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq11(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne1(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt1(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le1(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt1(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge1(x, y) = true))))

function length7(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq12(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int2(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range8(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

function last(container: us_rep6) : int = (0 + length6(container))

logic last__function_guard : int, us_rep6 -> prop

logic get : us_rep6, int -> int

logic get__function_guard : int, us_rep6, int -> prop

function oeq6(left: us_rep6, right: us_rep6) : bool =
  andb(bool_eq11(length6(left), length6(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard6 : bool, us_rep6, us_rep6 -> prop

axiom user_eq__def_axiom12 :
  (forall a:us_rep6. forall b:us_rep6 [user_eq15(a, b)]. (user_eq15(a,
  b) = oeq6(a, b)))

predicate default_initial_assumption6(temp___expr_722: us_rep6,
  temp___skip_top_level_723: bool) =
  ((not (temp___skip_top_level_723 = true)) ->
  (length6(temp___expr_722) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length6(model(container)) = length(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq6(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq6(model(left), model(right)) = true) -> (oeq(left, right) = true)))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq16 : extended_index, extended_index -> bool

logic dummy16 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant8(temp___expr_714: int, temp___is_init_710: bool,
  temp___skip_constant_711: bool, temp___do_toplevel_712: bool,
  temp___do_typ_inv_713: bool) = (((temp___is_init_710 = true) or
  (0 <= 2147483647)) -> in_range9(temp___expr_714))

axiom length__post_axiom2 :
  (forall container:us_rep6 [length6(container)].
  ((0 + length6(container)) <= 2147483647))

axiom length__post_axiom3 :
  (forall container:us_rep6 [length6(container)].
  dynamic_invariant1(length6(container), true, false, true, true))

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (0 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq17 : element_type, element_type -> bool

logic dummy17 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant9(temp___expr_707: int, temp___is_init_703: bool,
  temp___skip_constant_704: bool, temp___do_toplevel_705: bool,
  temp___do_typ_inv_706: bool) = (((temp___is_init_703 = true) or
  (0 <= 2147483647)) -> in_range10(temp___expr_707))

axiom get__post_axiom :
  (forall container:us_rep6.
  (forall position:int [get(container, position)].
  ((dynamic_invariant8(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant9(get(container, position), true, false, true, true))))

axiom length__post_axiom4 :
  (forall container:us_rep1 [length1(container)].
  (length1(container) <= to_rep(((container).us_split_discrs3).rec__dic_of_cont__my_hama__map__capacity)))

axiom length__post_axiom5 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant1(length1(container), true, false, true, true))

type us_main_type7

logic us_main_eq7 : us_main_type7, us_main_type7 -> bool

type us_rep7

logic bool_eq15 : us_rep7, us_rep7 -> bool

logic value__size13 : int

logic object__size13 : int

logic alignment13 : int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 : (0 <= object__size13)

axiom alignment_axiom13 : (0 <= alignment13)

logic user_eq18 : us_rep7, us_rep7 -> bool

logic dummy18 : us_rep7

type map__ref2 = { map__content2 : us_rep7
}

function map__ref_map__content__3__projection(a: map__ref2) : us_rep7 =
  (a).map__content2

logic model1 : us_rep1 -> us_rep7

logic model__function_guard1 : us_rep7, us_rep1 -> prop

logic length8 : us_rep7 -> int

logic length__function_guard7 : int, us_rep7 -> prop

logic oeq7 : us_rep7, us_rep7 -> bool

logic oeq__function_guard7 : bool, us_rep7, us_rep7 -> prop

logic is_empty6 : us_rep7 -> bool

logic is_empty__function_guard6 : bool, us_rep7 -> prop

axiom user_eq__def_axiom13 :
  (forall a:us_rep7. forall b:us_rep7 [user_eq18(a, b)]. (user_eq18(a,
  b) = oeq7(a, b)))

predicate default_initial_assumption7(temp___expr_1066: us_rep7,
  temp___skip_top_level_1067: bool) =
  ((not (temp___skip_top_level_1067 = true)) ->
  ((is_empty6(temp___expr_1066) = true) and (length8(temp___expr_1066) = 0)))

axiom oeq__post_axiom2 :
  (forall left:us_rep1. forall right:us_rep1 [oeq1(left, right)].
  ((oeq1(left, right) = true) -> (oeq7(model1(left), model1(right)) = true)))

axiom oeq__post_axiom3 :
  (forall left:us_rep1. forall right:us_rep1 [oeq1(left, right)].
  ((oeq7(model1(left), model1(right)) = true) -> (oeq1(left, right) = true)))

logic has_key : us_rep7, int -> bool

logic has_key__function_guard : bool, us_rep7, int -> prop

type key_type

logic key_typeqtint : key_type -> int

axiom key_typeqtaxiom : (forall i:key_type. (0 <= key_typeqtint(i)))

axiom key_typeqtaxiom1 :
  (forall i:key_type. (key_typeqtint(i) <= 2147483647))

predicate in_range11(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq19 : key_type, key_type -> bool

logic dummy19 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref_key_type__content__3__projection(a: key_type__ref) : key_type =
  (a).key_type__content

predicate dynamic_invariant10(temp___expr_1051: int,
  temp___is_init_1047: bool, temp___skip_constant_1048: bool,
  temp___do_toplevel_1049: bool, temp___do_typ_inv_1050: bool) =
  (((temp___is_init_1047 = true) or (0 <= 2147483647)) ->
  in_range11(temp___expr_1051))

axiom has_key__post_axiom :
  (forall container:us_rep7.
  (forall key:int [has_key(container, key)]. (dynamic_invariant10(key, true,
  true, true, true) -> ((of_int1(1) = true) ->
  ((exists k:int. ((in_range11(k) and (has_key(container, k) = true)) and
   (k = key))) ->
  (has_key(container, key) = true))))))

logic witness : us_rep7, int -> int

logic witness__function_guard : int, us_rep7, int -> prop

logic w_get : us_rep7, int -> int

logic w_get__function_guard : int, us_rep7, int -> prop

logic get1 : us_rep7, int -> int

logic get__function_guard1 : int, us_rep7, int -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (0 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range12(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq20 : element_type1, element_type1 -> bool

logic dummy20 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__5__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant11(temp___expr_1058: int,
  temp___is_init_1054: bool, temp___skip_constant_1055: bool,
  temp___do_toplevel_1056: bool, temp___do_typ_inv_1057: bool) =
  (((temp___is_init_1054 = true) or (0 <= 2147483647)) ->
  in_range12(temp___expr_1058))

axiom get__post_axiom1 :
  (forall container:us_rep7.
  (forall key:int [get1(container, key)]. ((dynamic_invariant10(key, true,
  true, true, true) and (has_key(container, key) = true)) ->
  ((of_int1(1) = true) -> (get1(container, key) = w_get(container,
  witness(container, key)))))))

axiom get__post_axiom2 :
  (forall container:us_rep7.
  (forall key:int [get1(container, key)]. ((dynamic_invariant10(key, true,
  true, true, true) and (has_key(container, key) = true)) ->
  ((of_int1(1) = true) ->
  (forall k:int. ((in_range11(k) and (has_key(container, k) = true)) ->
  ((k = key) -> (witness(container, key) = witness(container, k)))))))))

axiom get__post_axiom3 :
  (forall container:us_rep7.
  (forall key:int [get1(container, key)]. ((dynamic_invariant10(key, true,
  true, true, true) and (has_key(container, key) = true)) ->
  ((of_int1(1) = true) ->
  (forall k:int. ((in_range11(k) and (has_key(container, k) = true)) ->
  ((witness(container, key) = witness(container, k)) -> (k = key))))))))

axiom get__post_axiom4 :
  (forall container:us_rep7.
  (forall key:int [get1(container, key)]. ((dynamic_invariant10(key, true,
  true, true, true) and (has_key(container, key) = true)) ->
  dynamic_invariant11(get1(container, key), true, false, true, true))))

axiom length__post_axiom6 :
  (forall container:us_rep7 [length8(container)].
  dynamic_invariant1(length8(container), true, false, true, true))

axiom oeq__post_axiom4 :
  (forall left:us_rep7. forall right:us_rep7 [oeq7(left, right)].
  ((oeq7(left, right) = true) ->
  (forall key:int. ((in_range11(key) and (has_key(left, key) = true)) ->
  (has_key(right, key) = true)))))

axiom oeq__post_axiom5 :
  (forall left:us_rep7. forall right:us_rep7 [oeq7(left, right)].
  ((oeq7(left, right) = true) ->
  (forall key:int. ((in_range11(key) and (has_key(left, key) = true)) ->
  (get1(right, key) = get1(left, key))))))

axiom oeq__post_axiom6 :
  (forall left:us_rep7. forall right:us_rep7 [oeq7(left, right)].
  ((oeq7(left, right) = true) ->
  (forall key:int. ((in_range11(key) and (has_key(right, key) = true)) ->
  (has_key(left, key) = true)))))

axiom oeq__post_axiom7 :
  (forall left:us_rep7. forall right:us_rep7 [oeq7(left, right)].
  (((forall key:int. ((in_range11(key) and (has_key(left, key) = true)) ->
    ((has_key(right, key) = true) and (get1(right, key) = get1(left, key))))) and
  (forall key:int. ((in_range11(key) and (has_key(right, key) = true)) ->
  (has_key(left, key) = true)))) -> (oeq7(left, right) = true)))

axiom is_empty__post_axiom12 :
  (forall container:us_rep7 [is_empty6(container)].
  ((is_empty6(container) = true) ->
  (forall key:int. (not (in_range11(key) and (has_key(container,
  key) = true))))))

axiom is_empty__post_axiom13 :
  (forall container:us_rep7 [is_empty6(container)].
  ((forall key:int. (not (in_range11(key) and (has_key(container,
   key) = true)))) ->
  (is_empty6(container) = true)))

logic has_witness : us_rep7, int -> bool

logic has_witness__function_guard : bool, us_rep7, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep7.
  (forall key:int [witness(container, key)]. ((dynamic_invariant10(key, true,
  true, true, true) and (has_key(container, key) = true)) ->
  (has_witness(container, witness(container, key)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep7.
  (forall key:int [witness(container, key)]. ((dynamic_invariant10(key, true,
  true, true, true) and (has_key(container, key) = true)) ->
  dynamic_invariant1(witness(container, key), true, false, true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep7.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant1(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant11(w_get(container, witness1), true, false, true, true))))

axiom length__post_axiom7 :
  (forall container:us_rep2 [length2(container)].
  (length2(container) <= to_rep(((container).us_split_discrs5).rec__dic_of_cont__my_hase__set__capacity)))

axiom length__post_axiom8 :
  (forall container:us_rep2 [length2(container)].
  dynamic_invariant1(length2(container), true, false, true, true))

type us_main_type8

logic us_main_eq8 : us_main_type8, us_main_type8 -> bool

type us_rep8

logic bool_eq18 : us_rep8, us_rep8 -> bool

logic value__size14 : int

logic object__size14 : int

logic alignment14 : int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 : (0 <= object__size14)

axiom alignment_axiom14 : (0 <= alignment14)

logic user_eq21 : us_rep8, us_rep8 -> bool

logic dummy21 : us_rep8

type sequence__ref1 = { sequence__content1 : us_rep8
}

function sequence__ref_sequence__content__3__projection(a: sequence__ref1) : us_rep8 =
  (a).sequence__content1

logic length9 : us_rep8 -> int

logic length__function_guard8 : int, us_rep8 -> prop

logic get2 : us_rep8, int -> int

logic get__function_guard2 : int, us_rep8, int -> prop

logic find : us_rep8, int -> int

logic find__function_guard : int, us_rep8, int -> prop

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (0 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 2147483647))

predicate in_range13(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq19(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq22 : element_type2, element_type2 -> bool

logic dummy22 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__8__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant12(temp___expr_1336: int,
  temp___is_init_1332: bool, temp___skip_constant_1333: bool,
  temp___do_toplevel_1334: bool, temp___do_typ_inv_1335: bool) =
  (((temp___is_init_1332 = true) or (0 <= 2147483647)) ->
  in_range13(temp___expr_1336))

function last1(container: us_rep8) : int = (0 + length9(container))

logic last__function_guard1 : int, us_rep8 -> prop

function oeq8(left: us_rep8, right: us_rep8) : bool =
  andb(bool_eq11(length9(left), length9(right)),
  (if (forall n:int. (((1 <= n) and (n <= last1(left))) -> (get2(left,
      n) = get2(right, n)))) then true else false))

logic oeq__function_guard8 : bool, us_rep8, us_rep8 -> prop

axiom user_eq__def_axiom14 :
  (forall a:us_rep8. forall b:us_rep8 [user_eq21(a, b)]. (user_eq21(a,
  b) = oeq8(a, b)))

predicate default_initial_assumption8(temp___expr_1413: us_rep8,
  temp___skip_top_level_1414: bool) =
  ((not (temp___skip_top_level_1414 = true)) ->
  (length9(temp___expr_1413) = 0))

axiom find__post_axiom :
  (forall container:us_rep8.
  (forall item:int [find(container, item)]. (dynamic_invariant12(item, true,
  true, true, true) -> (let result = find(container, item) : int in
  ((0 <  result) -> (result <= length9(container)))))))

axiom find__post_axiom1 :
  (forall container:us_rep8.
  (forall item:int [find(container, item)]. (dynamic_invariant12(item, true,
  true, true, true) -> (let result = find(container, item) : int in
  ((0 <  result) -> (item = get2(container, result)))))))

axiom find__post_axiom2 :
  (forall container:us_rep8.
  (forall item:int [find(container, item)]. (dynamic_invariant12(item, true,
  true, true, true) -> dynamic_invariant1(find(container, item), true, false,
  true, true))))

function e_elements_included(left: us_rep8, right: us_rep8) : bool =
  (if (forall i:int. (((1 <= i) and (i <= length9(left))) ->
      ((0 <  find(right, get2(left, i))) and (get2(right, find(right,
      get2(left, i))) = get2(left, i))))) then true else false)

logic e_elements_included__function_guard : bool, us_rep8, us_rep8 -> prop

type us_main_type9

logic us_main_eq9 : us_main_type9, us_main_type9 -> bool

type us_rep9

logic bool_eq20 : us_rep9, us_rep9 -> bool

logic value__size15 : int

logic object__size15 : int

logic alignment15 : int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 : (0 <= object__size15)

axiom alignment_axiom15 : (0 <= alignment15)

logic user_eq23 : us_rep9, us_rep9 -> bool

logic dummy23 : us_rep9

type set__ref2 = { set__content2 : us_rep9
}

function set__ref_set__content__2__projection(a: set__ref2) : us_rep9 =
  (a).set__content2

logic length10 : us_rep9 -> int

logic length__function_guard9 : int, us_rep9 -> prop

logic model2 : us_rep2 -> us_rep9

logic model__function_guard2 : us_rep9, us_rep2 -> prop

logic oeq9 : us_rep9, us_rep9 -> bool

logic oeq__function_guard9 : bool, us_rep9, us_rep9 -> prop

logic is_empty7 : us_rep9 -> bool

logic is_empty__function_guard7 : bool, us_rep9 -> prop

axiom user_eq__def_axiom15 :
  (forall a:us_rep9. forall b:us_rep9 [user_eq23(a, b)]. (user_eq23(a,
  b) = oeq9(a, b)))

predicate default_initial_assumption9(temp___expr_1377: us_rep9,
  temp___skip_top_level_1378: bool) =
  ((not (temp___skip_top_level_1378 = true)) ->
  (is_empty7(temp___expr_1377) = true))

axiom model__post_axiom1 :
  (forall container:us_rep2 [model2(container)].
  (length10(model2(container)) = length2(container)))

logic contains : us_rep9, int -> bool

logic contains__function_guard : bool, us_rep9, int -> prop

function iter_has_element(container: us_rep8, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last1(container)) then true else false))

logic iter_has_element__function_guard : bool, us_rep8, int -> prop

logic elements : us_rep2 -> us_rep8

logic elements__function_guard : us_rep8, us_rep2 -> prop

type element_type3

logic element_typeqtint3 : element_type3 -> int

axiom element_typeqtaxiom6 :
  (forall i:element_type3. (0 <= element_typeqtint3(i)))

axiom element_typeqtaxiom7 :
  (forall i:element_type3. (element_typeqtint3(i) <= 2147483647))

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq21(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq24 : element_type3, element_type3 -> bool

logic dummy24 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref_element_type__content__9__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. (0 <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 2147483647))

predicate in_range15(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq22(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq25 : extended_index1, extended_index1 -> bool

logic dummy25 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

axiom elements__post_axiom :
  (forall container:us_rep2 [elements(container)].
  (length9(elements(container)) = length2(container)))

axiom elements__post_axiom1 :
  (forall container:us_rep2 [elements(container)]. (let result =
  elements(container) : us_rep8 in
  (forall temp___1490:int. ((in_range15(temp___1490) and
  (iter_has_element(result, temp___1490) = true)) ->
  (contains(model2(container), get2(result, temp___1490)) = true)))))

axiom elements__post_axiom2 :
  (forall container:us_rep2 [elements(container)].
  (forall item:int. ((in_range14(item) and (contains(model2(container),
  item) = true)) -> (0 <  find(elements(container), item)))))

axiom elements__post_axiom3 :
  (forall container:us_rep2 [elements(container)]. (let result =
  elements(container) : us_rep8 in
  (forall item:int. ((in_range14(item) and (contains(model2(container),
  item) = true)) -> (get2(result, find(result, item)) = item)))))

axiom elements__post_axiom4 :
  (forall container:us_rep2 [elements(container)]. (let result =
  elements(container) : us_rep8 in
  (forall i:int. (((1 <= i) and (i <= length2(container))) -> (find(result,
  get2(result, i)) = i)))))

axiom elements__post_axiom5 :
  (forall container:us_rep2 [elements(container)]. (let result =
  elements(container) : us_rep8 in
  (forall i:int. (((1 <= i) and (i <= length2(container))) ->
  (forall j:int. (((1 <= j) and (j <= length2(container))) -> ((get2(result,
  i) = get2(result, j)) -> (i = j))))))))

axiom oeq__post_axiom8 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (length2(left) = length2(right))))

axiom oeq__post_axiom9 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (e_elements_included(elements(left),
  elements(right)) = true)))

axiom oeq__post_axiom10 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  (((length2(left) = length2(right)) and (e_elements_included(elements(left),
  elements(right)) = true)) -> (oeq2(left, right) = true)))

axiom oeq__post_axiom11 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (e_elements_included(elements(left),
  elements(right)) = true)))

axiom oeq__post_axiom12 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (e_elements_included(elements(right),
  elements(left)) = true)))

axiom oeq__post_axiom13 :
  (forall left:us_rep2. forall right:us_rep2 [oeq2(left, right)].
  (((e_elements_included(elements(left), elements(right)) = true) and
  (e_elements_included(elements(right), elements(left)) = true)) ->
  (oeq2(left, right) = true)))

predicate dynamic_invariant13(temp___expr_1369: int,
  temp___is_init_1365: bool, temp___skip_constant_1366: bool,
  temp___do_toplevel_1367: bool, temp___do_typ_inv_1368: bool) =
  (((temp___is_init_1365 = true) or (0 <= 2147483647)) ->
  in_range14(temp___expr_1369))

axiom contains__post_axiom :
  (forall container:us_rep9.
  (forall item:int [contains(container, item)]. (dynamic_invariant13(item,
  true, true, true, true) -> ((of_int1(1) = true) ->
  ((exists e:int. ((in_range14(e) and (contains(container, e) = true)) and
   (e = item))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom9 :
  (forall container:us_rep9 [length10(container)].
  dynamic_invariant1(length10(container), true, false, true, true))

logic ole : us_rep9, us_rep9 -> bool

logic ole__function_guard : bool, us_rep9, us_rep9 -> prop

axiom ole__post_axiom :
  (forall left:us_rep9. forall right:us_rep9 [ole(left, right)]. ((ole(left,
  right) = true) ->
  (forall item:int. ((in_range14(item) and (contains(left, item) = true)) ->
  (contains(right, item) = true)))))

axiom ole__post_axiom1 :
  (forall left:us_rep9. forall right:us_rep9 [ole(left, right)].
  ((forall item:int. ((in_range14(item) and (contains(left, item) = true)) ->
   (contains(right, item) = true))) ->
  (ole(left, right) = true)))

axiom oeq__post_axiom14 :
  (forall left:us_rep9. forall right:us_rep9 [oeq9(left, right)].
  ((oeq9(left, right) = true) -> (ole(left, right) = true)))

axiom oeq__post_axiom15 :
  (forall left:us_rep9. forall right:us_rep9 [oeq9(left, right)].
  ((oeq9(left, right) = true) -> (ole(right, left) = true)))

axiom oeq__post_axiom16 :
  (forall left:us_rep9. forall right:us_rep9 [oeq9(left, right)].
  (((ole(left, right) = true) and (ole(right, left) = true)) -> (oeq9(left,
  right) = true)))

axiom is_empty__post_axiom14 :
  (forall container:us_rep9 [is_empty7(container)].
  ((is_empty7(container) = true) ->
  (forall item:int. (not (in_range14(item) and (contains(container,
  item) = true))))))

axiom is_empty__post_axiom15 :
  (forall container:us_rep9 [is_empty7(container)].
  ((forall item:int. (not (in_range14(item) and (contains(container,
   item) = true)))) ->
  (is_empty7(container) = true)))

axiom is_empty__post_axiom16 :
  (forall container:us_rep9 [is_empty7(container)].
  ((is_empty7(container) = true) -> (length10(container) = 0)))

axiom is_empty__post_axiom17 :
  (forall container:us_rep9 [is_empty7(container)].
  ((length10(container) = 0) -> (is_empty7(container) = true)))

predicate dynamic_invariant14(temp___expr_1405: int,
  temp___is_init_1401: bool, temp___skip_constant_1402: bool,
  temp___do_toplevel_1403: bool, temp___do_typ_inv_1404: bool) =
  (((temp___is_init_1401 = true) or (0 <= 2147483647)) ->
  in_range15(temp___expr_1405))

axiom length__post_axiom10 :
  (forall container:us_rep8 [length9(container)].
  ((0 + length9(container)) <= 2147483647))

axiom length__post_axiom11 :
  (forall container:us_rep8 [length9(container)].
  dynamic_invariant1(length9(container), true, false, true, true))

type element_type4

logic element_typeqtint4 : element_type4 -> int

axiom element_typeqtaxiom8 :
  (forall i:element_type4. (0 <= element_typeqtint4(i)))

axiom element_typeqtaxiom9 :
  (forall i:element_type4. (element_typeqtint4(i) <= 2147483647))

predicate in_range16(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq23(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq26 : element_type4, element_type4 -> bool

logic dummy26 : element_type4

type element_type__ref4 = { element_type__content4 : element_type4
}

function element_type__ref_element_type__content__10__projection(a: element_type__ref4) : element_type4 =
  (a).element_type__content4

predicate dynamic_invariant15(temp___expr_1398: int,
  temp___is_init_1394: bool, temp___skip_constant_1395: bool,
  temp___do_toplevel_1396: bool, temp___do_typ_inv_1397: bool) =
  (((temp___is_init_1394 = true) or (0 <= 2147483647)) ->
  in_range16(temp___expr_1398))

axiom get__post_axiom5 :
  (forall container:us_rep8.
  (forall position:int [get2(container, position)].
  ((dynamic_invariant14(position, true, true, true, true) and
  ((1 <= position) and (position <= last1(container)))) ->
  dynamic_invariant15(get2(container, position), true, false, true, true))))

function equivalent_keys(left: int, right: int) : bool =
  andb(notb(bool_lt1(left, right)), notb(bool_lt1(right, left)))

logic equivalent_keys__function_guard : bool, int, int -> prop

axiom length__post_axiom12 :
  (forall container:us_rep3 [length3(container)].
  (length3(container) <= to_rep(((container).us_split_discrs7).rec__dic_of_cont__my_orma__map__capacity)))

axiom length__post_axiom13 :
  (forall container:us_rep3 [length3(container)].
  dynamic_invariant1(length3(container), true, false, true, true))

type us_main_type10

logic us_main_eq10 : us_main_type10, us_main_type10 -> bool

type us_rep10

logic bool_eq24 : us_rep10, us_rep10 -> bool

logic value__size16 : int

logic object__size16 : int

logic alignment16 : int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 : (0 <= object__size16)

axiom alignment_axiom16 : (0 <= alignment16)

logic user_eq27 : us_rep10, us_rep10 -> bool

logic dummy27 : us_rep10

type map__ref3 = { map__content3 : us_rep10
}

function map__ref_map__content__7__projection(a: map__ref3) : us_rep10 =
  (a).map__content3

logic model3 : us_rep3 -> us_rep10

logic model__function_guard3 : us_rep10, us_rep3 -> prop

logic length11 : us_rep10 -> int

logic length__function_guard10 : int, us_rep10 -> prop

logic oeq10 : us_rep10, us_rep10 -> bool

logic oeq__function_guard10 : bool, us_rep10, us_rep10 -> prop

logic is_empty8 : us_rep10 -> bool

logic is_empty__function_guard8 : bool, us_rep10 -> prop

axiom user_eq__def_axiom16 :
  (forall a:us_rep10. forall b:us_rep10 [user_eq27(a, b)]. (user_eq27(a,
  b) = oeq10(a, b)))

predicate default_initial_assumption10(temp___expr_1795: us_rep10,
  temp___skip_top_level_1796: bool) =
  ((not (temp___skip_top_level_1796 = true)) ->
  ((is_empty8(temp___expr_1795) = true) and
  (length11(temp___expr_1795) = 0)))

axiom oeq__post_axiom17 :
  (forall left:us_rep3. forall right:us_rep3 [oeq3(left, right)].
  ((oeq3(left, right) = true) -> (oeq10(model3(left),
  model3(right)) = true)))

axiom oeq__post_axiom18 :
  (forall left:us_rep3. forall right:us_rep3 [oeq3(left, right)].
  ((oeq10(model3(left), model3(right)) = true) -> (oeq3(left,
  right) = true)))

logic has_key1 : us_rep10, int -> bool

logic has_key__function_guard1 : bool, us_rep10, int -> prop

type key_type1

logic key_typeqtint1 : key_type1 -> int

axiom key_typeqtaxiom2 : (forall i:key_type1. (0 <= key_typeqtint1(i)))

axiom key_typeqtaxiom3 :
  (forall i:key_type1. (key_typeqtint1(i) <= 2147483647))

predicate in_range17(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq25(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq28 : key_type1, key_type1 -> bool

logic dummy28 : key_type1

type key_type__ref1 = { key_type__content1 : key_type1
}

function key_type__ref_key_type__content__7__projection(a: key_type__ref1) : key_type1 =
  (a).key_type__content1

predicate dynamic_invariant16(temp___expr_1780: int,
  temp___is_init_1776: bool, temp___skip_constant_1777: bool,
  temp___do_toplevel_1778: bool, temp___do_typ_inv_1779: bool) =
  (((temp___is_init_1776 = true) or (0 <= 2147483647)) ->
  in_range17(temp___expr_1780))

axiom has_key__post_axiom1 :
  (forall container:us_rep10.
  (forall key:int [has_key1(container, key)]. (dynamic_invariant16(key, true,
  true, true, true) -> ((of_int1(1) = true) ->
  ((exists k:int. ((in_range17(k) and (has_key1(container, k) = true)) and
   (equivalent_keys(k, key) = true))) ->
  (has_key1(container, key) = true))))))

logic witness1 : us_rep10, int -> int

logic witness__function_guard1 : int, us_rep10, int -> prop

logic w_get1 : us_rep10, int -> int

logic w_get__function_guard1 : int, us_rep10, int -> prop

logic get3 : us_rep10, int -> int

logic get__function_guard3 : int, us_rep10, int -> prop

type element_type5

logic element_typeqtint5 : element_type5 -> int

axiom element_typeqtaxiom10 :
  (forall i:element_type5. (0 <= element_typeqtint5(i)))

axiom element_typeqtaxiom11 :
  (forall i:element_type5. (element_typeqtint5(i) <= 2147483647))

predicate in_range18(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq26(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq29 : element_type5, element_type5 -> bool

logic dummy29 : element_type5

type element_type__ref5 = { element_type__content5 : element_type5
}

function element_type__ref_element_type__content__13__projection(a: element_type__ref5) : element_type5 =
  (a).element_type__content5

predicate dynamic_invariant17(temp___expr_1787: int,
  temp___is_init_1783: bool, temp___skip_constant_1784: bool,
  temp___do_toplevel_1785: bool, temp___do_typ_inv_1786: bool) =
  (((temp___is_init_1783 = true) or (0 <= 2147483647)) ->
  in_range18(temp___expr_1787))

axiom get__post_axiom6 :
  (forall container:us_rep10.
  (forall key:int [get3(container, key)]. ((dynamic_invariant16(key, true,
  true, true, true) and (has_key1(container, key) = true)) ->
  ((of_int1(1) = true) -> (get3(container, key) = w_get1(container,
  witness1(container, key)))))))

axiom get__post_axiom7 :
  (forall container:us_rep10.
  (forall key:int [get3(container, key)]. ((dynamic_invariant16(key, true,
  true, true, true) and (has_key1(container, key) = true)) ->
  ((of_int1(1) = true) ->
  (forall k:int. ((in_range17(k) and (has_key1(container, k) = true)) ->
  ((equivalent_keys(k, key) = true) -> (witness1(container,
  key) = witness1(container, k)))))))))

axiom get__post_axiom8 :
  (forall container:us_rep10.
  (forall key:int [get3(container, key)]. ((dynamic_invariant16(key, true,
  true, true, true) and (has_key1(container, key) = true)) ->
  ((of_int1(1) = true) ->
  (forall k:int. ((in_range17(k) and (has_key1(container, k) = true)) ->
  ((witness1(container, key) = witness1(container, k)) -> (equivalent_keys(k,
  key) = true))))))))

axiom get__post_axiom9 :
  (forall container:us_rep10.
  (forall key:int [get3(container, key)]. ((dynamic_invariant16(key, true,
  true, true, true) and (has_key1(container, key) = true)) ->
  dynamic_invariant17(get3(container, key), true, false, true, true))))

axiom length__post_axiom14 :
  (forall container:us_rep10 [length11(container)].
  dynamic_invariant1(length11(container), true, false, true, true))

axiom oeq__post_axiom19 :
  (forall left:us_rep10. forall right:us_rep10 [oeq10(left, right)].
  ((oeq10(left, right) = true) ->
  (forall key:int. ((in_range17(key) and (has_key1(left, key) = true)) ->
  (has_key1(right, key) = true)))))

axiom oeq__post_axiom20 :
  (forall left:us_rep10. forall right:us_rep10 [oeq10(left, right)].
  ((oeq10(left, right) = true) ->
  (forall key:int. ((in_range17(key) and (has_key1(left, key) = true)) ->
  (get3(right, key) = get3(left, key))))))

axiom oeq__post_axiom21 :
  (forall left:us_rep10. forall right:us_rep10 [oeq10(left, right)].
  ((oeq10(left, right) = true) ->
  (forall key:int. ((in_range17(key) and (has_key1(right, key) = true)) ->
  (has_key1(left, key) = true)))))

axiom oeq__post_axiom22 :
  (forall left:us_rep10. forall right:us_rep10 [oeq10(left, right)].
  (((forall key:int. ((in_range17(key) and (has_key1(left, key) = true)) ->
    ((has_key1(right, key) = true) and (get3(right, key) = get3(left,
    key))))) and
  (forall key:int. ((in_range17(key) and (has_key1(right, key) = true)) ->
  (has_key1(left, key) = true)))) -> (oeq10(left, right) = true)))

axiom is_empty__post_axiom18 :
  (forall container:us_rep10 [is_empty8(container)].
  ((is_empty8(container) = true) ->
  (forall key:int. (not (in_range17(key) and (has_key1(container,
  key) = true))))))

axiom is_empty__post_axiom19 :
  (forall container:us_rep10 [is_empty8(container)].
  ((forall key:int. (not (in_range17(key) and (has_key1(container,
   key) = true)))) ->
  (is_empty8(container) = true)))

logic has_witness1 : us_rep10, int -> bool

logic has_witness__function_guard1 : bool, us_rep10, int -> prop

axiom witness__post_axiom2 :
  (forall container:us_rep10.
  (forall key:int [witness1(container, key)]. ((dynamic_invariant16(key,
  true, true, true, true) and (has_key1(container, key) = true)) ->
  (has_witness1(container, witness1(container, key)) = true))))

axiom witness__post_axiom3 :
  (forall container:us_rep10.
  (forall key:int [witness1(container, key)]. ((dynamic_invariant16(key,
  true, true, true, true) and (has_key1(container, key) = true)) ->
  dynamic_invariant1(witness1(container, key), true, false, true, true))))

axiom w_get__post_axiom1 :
  (forall container:us_rep10.
  (forall witness2:int [w_get1(container, witness2)].
  ((dynamic_invariant1(witness2, true, true, true, true) and
  (has_witness1(container, witness2) = true)) ->
  dynamic_invariant17(w_get1(container, witness2), true, false, true, true))))

function equivalent_elements(left: int, right: int) : bool =
  andb(notb(bool_lt1(left, right)), notb(bool_lt1(right, left)))

logic equivalent_elements__function_guard : bool, int, int -> prop

axiom length__post_axiom15 :
  (forall container:us_rep4 [length4(container)].
  (length4(container) <= to_rep(((container).us_split_discrs9).rec__dic_of_cont__my_orse__set__capacity)))

axiom length__post_axiom16 :
  (forall container:us_rep4 [length4(container)].
  dynamic_invariant1(length4(container), true, false, true, true))

type us_main_type11

logic us_main_eq11 : us_main_type11, us_main_type11 -> bool

type us_rep11

logic bool_eq27 : us_rep11, us_rep11 -> bool

logic value__size17 : int

logic object__size17 : int

logic alignment17 : int

axiom value__size_axiom17 : (0 <= value__size17)

axiom object__size_axiom17 : (0 <= object__size17)

axiom alignment_axiom17 : (0 <= alignment17)

logic user_eq30 : us_rep11, us_rep11 -> bool

logic dummy30 : us_rep11

type sequence__ref2 = { sequence__content2 : us_rep11
}

function sequence__ref_sequence__content__5__projection(a: sequence__ref2) : us_rep11 =
  (a).sequence__content2

logic length12 : us_rep11 -> int

logic length__function_guard11 : int, us_rep11 -> prop

logic get4 : us_rep11, int -> int

logic get__function_guard4 : int, us_rep11, int -> prop

function e_bigger_than_range(container: us_rep11, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (get4(container,
      i) <  item))) then true else false)

logic e_bigger_than_range__function_guard : bool, us_rep11, int, int,
  int -> prop

function e_smaller_than_range(container: us_rep11, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (item <  get4(container,
      i)))) then true else false)

logic e_smaller_than_range__function_guard : bool, us_rep11, int, int,
  int -> prop

function e_is_find(container: us_rep11, item: int, position: int) : bool =
  andb((if (0 <  position) then e_bigger_than_range(container, 1,
  (position - 1), item) else of_int1(1)),
  (if (position <  length12(container)) then e_smaller_than_range(container,
  (position + 1), length12(container), item) else of_int1(1)))

logic e_is_find__function_guard : bool, us_rep11, int, int -> prop

logic find1 : us_rep11, int -> int

logic find__function_guard1 : int, us_rep11, int -> prop

type element_type6

logic element_typeqtint6 : element_type6 -> int

axiom element_typeqtaxiom12 :
  (forall i:element_type6. (0 <= element_typeqtint6(i)))

axiom element_typeqtaxiom13 :
  (forall i:element_type6. (element_typeqtint6(i) <= 2147483647))

predicate in_range19(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq28(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq31 : element_type6, element_type6 -> bool

logic dummy31 : element_type6

type element_type__ref6 = { element_type__content6 : element_type6
}

function element_type__ref_element_type__content__16__projection(a: element_type__ref6) : element_type6 =
  (a).element_type__content6

predicate dynamic_invariant18(temp___expr_2049: int,
  temp___is_init_2045: bool, temp___skip_constant_2046: bool,
  temp___do_toplevel_2047: bool, temp___do_typ_inv_2048: bool) =
  (((temp___is_init_2045 = true) or (0 <= 2147483647)) ->
  in_range19(temp___expr_2049))

function last2(container: us_rep11) : int = (0 + length12(container))

logic last__function_guard2 : int, us_rep11 -> prop

function oeq11(left: us_rep11, right: us_rep11) : bool =
  andb(bool_eq11(length12(left), length12(right)),
  (if (forall n:int. (((1 <= n) and (n <= last2(left))) -> (get4(left,
      n) = get4(right, n)))) then true else false))

logic oeq__function_guard11 : bool, us_rep11, us_rep11 -> prop

axiom user_eq__def_axiom17 :
  (forall a:us_rep11. forall b:us_rep11 [user_eq30(a, b)]. (user_eq30(a,
  b) = oeq11(a, b)))

predicate default_initial_assumption11(temp___expr_2123: us_rep11,
  temp___skip_top_level_2124: bool) =
  ((not (temp___skip_top_level_2124 = true)) ->
  (length12(temp___expr_2123) = 0))

axiom find__post_axiom3 :
  (forall container:us_rep11.
  (forall item:int [find1(container, item)]. (dynamic_invariant18(item, true,
  true, true, true) -> (let result = find1(container, item) : int in
  ((0 <  result) -> (result <= length12(container)))))))

axiom find__post_axiom4 :
  (forall container:us_rep11.
  (forall item:int [find1(container, item)]. (dynamic_invariant18(item, true,
  true, true, true) -> (let result = find1(container, item) : int in
  ((0 <  result) -> (equivalent_elements(item, get4(container,
  result)) = true))))))

axiom find__post_axiom5 :
  (forall container:us_rep11.
  (forall item:int [find1(container, item)]. (dynamic_invariant18(item, true,
  true, true, true) -> dynamic_invariant1(find1(container, item), true,
  false, true, true))))

function e_elements_included1(left: us_rep11, right: us_rep11) : bool =
  (if (forall i:int. (((1 <= i) and (i <= length12(left))) ->
      ((0 <  find1(right, get4(left, i))) and (get4(right, find1(right,
      get4(left, i))) = get4(left, i))))) then true else false)

logic e_elements_included__function_guard1 : bool, us_rep11, us_rep11 -> prop

type us_main_type12

logic us_main_eq12 : us_main_type12, us_main_type12 -> bool

type us_rep12

logic bool_eq29 : us_rep12, us_rep12 -> bool

logic value__size18 : int

logic object__size18 : int

logic alignment18 : int

axiom value__size_axiom18 : (0 <= value__size18)

axiom object__size_axiom18 : (0 <= object__size18)

axiom alignment_axiom18 : (0 <= alignment18)

logic user_eq32 : us_rep12, us_rep12 -> bool

logic dummy32 : us_rep12

type set__ref3 = { set__content3 : us_rep12
}

function set__ref_set__content__4__projection(a: set__ref3) : us_rep12 =
  (a).set__content3

logic length13 : us_rep12 -> int

logic length__function_guard12 : int, us_rep12 -> prop

logic model4 : us_rep4 -> us_rep12

logic model__function_guard4 : us_rep12, us_rep4 -> prop

logic oeq12 : us_rep12, us_rep12 -> bool

logic oeq__function_guard12 : bool, us_rep12, us_rep12 -> prop

logic is_empty9 : us_rep12 -> bool

logic is_empty__function_guard9 : bool, us_rep12 -> prop

axiom user_eq__def_axiom18 :
  (forall a:us_rep12. forall b:us_rep12 [user_eq32(a, b)]. (user_eq32(a,
  b) = oeq12(a, b)))

predicate default_initial_assumption12(temp___expr_2087: us_rep12,
  temp___skip_top_level_2088: bool) =
  ((not (temp___skip_top_level_2088 = true)) ->
  (is_empty9(temp___expr_2087) = true))

axiom model__post_axiom2 :
  (forall container:us_rep4 [model4(container)].
  (length13(model4(container)) = length4(container)))

logic contains1 : us_rep12, int -> bool

logic contains__function_guard1 : bool, us_rep12, int -> prop

function iter_has_element1(container: us_rep11, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last2(container)) then true else false))

logic iter_has_element__function_guard1 : bool, us_rep11, int -> prop

logic elements1 : us_rep4 -> us_rep11

logic elements__function_guard1 : us_rep11, us_rep4 -> prop

type element_type7

logic element_typeqtint7 : element_type7 -> int

axiom element_typeqtaxiom14 :
  (forall i:element_type7. (0 <= element_typeqtint7(i)))

axiom element_typeqtaxiom15 :
  (forall i:element_type7. (element_typeqtint7(i) <= 2147483647))

predicate in_range20(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq30(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq33 : element_type7, element_type7 -> bool

logic dummy33 : element_type7

type element_type__ref7 = { element_type__content7 : element_type7
}

function element_type__ref_element_type__content__17__projection(a: element_type__ref7) : element_type7 =
  (a).element_type__content7

type extended_index2

logic extended_indexqtint2 : extended_index2 -> int

axiom extended_indexqtaxiom4 :
  (forall i:extended_index2. (0 <= extended_indexqtint2(i)))

axiom extended_indexqtaxiom5 :
  (forall i:extended_index2. (extended_indexqtint2(i) <= 2147483647))

predicate in_range21(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq31(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq34 : extended_index2, extended_index2 -> bool

logic dummy34 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref_extended_index__content__5__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

axiom elements__post_axiom6 :
  (forall container:us_rep4 [elements1(container)].
  (length12(elements1(container)) = length4(container)))

axiom elements__post_axiom7 :
  (forall container:us_rep4 [elements1(container)]. (let result =
  elements1(container) : us_rep11 in
  (forall temp___2197:int. ((in_range21(temp___2197) and
  (iter_has_element1(result, temp___2197) = true)) ->
  (contains1(model4(container), get4(result, temp___2197)) = true)))))

axiom elements__post_axiom8 :
  (forall container:us_rep4 [elements1(container)].
  (forall item:int. ((in_range20(item) and (contains1(model4(container),
  item) = true)) -> (0 <  find1(elements1(container), item)))))

axiom elements__post_axiom9 :
  (forall container:us_rep4 [elements1(container)]. (let result =
  elements1(container) : us_rep11 in
  (forall item:int. ((in_range20(item) and (contains1(model4(container),
  item) = true)) -> (equivalent_elements(get4(result, find1(result, item)),
  item) = true)))))

axiom elements__post_axiom10 :
  (forall container:us_rep4 [elements1(container)]. (let result =
  elements1(container) : us_rep11 in
  (forall i:int. (((1 <= i) and (i <= length4(container))) -> (find1(result,
  get4(result, i)) = i)))))

axiom elements__post_axiom11 :
  (forall container:us_rep4 [elements1(container)]. (let result =
  elements1(container) : us_rep11 in
  (forall i:int. (((1 <= i) and (i <= length4(container))) ->
  (e_is_find(result, get4(result, i), i) = true)))))

axiom oeq__post_axiom23 :
  (forall left:us_rep4. forall right:us_rep4 [oeq4(left, right)].
  ((oeq4(left, right) = true) -> (oeq11(elements1(left),
  elements1(right)) = true)))

axiom oeq__post_axiom24 :
  (forall left:us_rep4. forall right:us_rep4 [oeq4(left, right)].
  ((not (oeq4(left, right) = true)) ->
  ((not (e_elements_included1(elements1(left), elements1(right)) = true)) or
  (not (e_elements_included1(elements1(right), elements1(left)) = true)))))

predicate dynamic_invariant19(temp___expr_2079: int,
  temp___is_init_2075: bool, temp___skip_constant_2076: bool,
  temp___do_toplevel_2077: bool, temp___do_typ_inv_2078: bool) =
  (((temp___is_init_2075 = true) or (0 <= 2147483647)) ->
  in_range20(temp___expr_2079))

axiom contains__post_axiom1 :
  (forall container:us_rep12.
  (forall item:int [contains1(container, item)]. (dynamic_invariant19(item,
  true, true, true, true) -> ((of_int1(1) = true) ->
  ((exists e:int. ((in_range20(e) and (contains1(container, e) = true)) and
   (equivalent_elements(e, item) = true))) ->
  (contains1(container, item) = true))))))

axiom length__post_axiom17 :
  (forall container:us_rep12 [length13(container)].
  dynamic_invariant1(length13(container), true, false, true, true))

logic ole1 : us_rep12, us_rep12 -> bool

logic ole__function_guard1 : bool, us_rep12, us_rep12 -> prop

axiom ole__post_axiom2 :
  (forall left:us_rep12. forall right:us_rep12 [ole1(left, right)].
  ((ole1(left, right) = true) ->
  (forall item:int. ((in_range20(item) and (contains1(left, item) = true)) ->
  (contains1(right, item) = true)))))

axiom ole__post_axiom3 :
  (forall left:us_rep12. forall right:us_rep12 [ole1(left, right)].
  ((forall item:int. ((in_range20(item) and (contains1(left,
   item) = true)) -> (contains1(right, item) = true))) ->
  (ole1(left, right) = true)))

axiom oeq__post_axiom25 :
  (forall left:us_rep12. forall right:us_rep12 [oeq12(left, right)].
  ((oeq12(left, right) = true) -> (ole1(left, right) = true)))

axiom oeq__post_axiom26 :
  (forall left:us_rep12. forall right:us_rep12 [oeq12(left, right)].
  ((oeq12(left, right) = true) -> (ole1(right, left) = true)))

axiom oeq__post_axiom27 :
  (forall left:us_rep12. forall right:us_rep12 [oeq12(left, right)].
  (((ole1(left, right) = true) and (ole1(right, left) = true)) ->
  (oeq12(left, right) = true)))

axiom is_empty__post_axiom20 :
  (forall container:us_rep12 [is_empty9(container)].
  ((is_empty9(container) = true) ->
  (forall item:int. (not (in_range20(item) and (contains1(container,
  item) = true))))))

axiom is_empty__post_axiom21 :
  (forall container:us_rep12 [is_empty9(container)].
  ((forall item:int. (not (in_range20(item) and (contains1(container,
   item) = true)))) ->
  (is_empty9(container) = true)))

axiom is_empty__post_axiom22 :
  (forall container:us_rep12 [is_empty9(container)].
  ((is_empty9(container) = true) -> (length13(container) = 0)))

axiom is_empty__post_axiom23 :
  (forall container:us_rep12 [is_empty9(container)].
  ((length13(container) = 0) -> (is_empty9(container) = true)))

predicate dynamic_invariant20(temp___expr_2115: int,
  temp___is_init_2111: bool, temp___skip_constant_2112: bool,
  temp___do_toplevel_2113: bool, temp___do_typ_inv_2114: bool) =
  (((temp___is_init_2111 = true) or (0 <= 2147483647)) ->
  in_range21(temp___expr_2115))

axiom length__post_axiom18 :
  (forall container:us_rep11 [length12(container)].
  ((0 + length12(container)) <= 2147483647))

axiom length__post_axiom19 :
  (forall container:us_rep11 [length12(container)].
  dynamic_invariant1(length12(container), true, false, true, true))

type element_type8

logic element_typeqtint8 : element_type8 -> int

axiom element_typeqtaxiom16 :
  (forall i:element_type8. (0 <= element_typeqtint8(i)))

axiom element_typeqtaxiom17 :
  (forall i:element_type8. (element_typeqtint8(i) <= 2147483647))

predicate in_range22(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq32(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE17 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check17 : us_image -> prop

logic attr__ATTRIBUTE_VALUE17 : us_image -> int

logic user_eq35 : element_type8, element_type8 -> bool

logic dummy35 : element_type8

type element_type__ref8 = { element_type__content8 : element_type8
}

function element_type__ref_element_type__content__18__projection(a: element_type__ref8) : element_type8 =
  (a).element_type__content8

predicate dynamic_invariant21(temp___expr_2108: int,
  temp___is_init_2104: bool, temp___skip_constant_2105: bool,
  temp___do_toplevel_2106: bool, temp___do_typ_inv_2107: bool) =
  (((temp___is_init_2104 = true) or (0 <= 2147483647)) ->
  in_range22(temp___expr_2108))

axiom get__post_axiom10 :
  (forall container:us_rep11.
  (forall position:int [get4(container, position)].
  ((dynamic_invariant20(position, true, true, true, true) and
  ((1 <= position) and (position <= last2(container)))) ->
  dynamic_invariant21(get4(container, position), true, false, true, true))))

predicate dynamic_invariant22(temp___expr_2408: int,
  temp___is_init_2404: bool, temp___skip_constant_2405: bool,
  temp___do_toplevel_2406: bool, temp___do_typ_inv_2407: bool) =
  (((temp___is_init_2404 = true) or (0 <= 2147483647)) ->
  in_range1(temp___expr_2408))

function capacity1(container: us_rep5) : int =
  to_rep2(((container).us_split_discrs11).rec__dic_of_cont__my_fove__vector__capacity)

logic capacity__function_guard : int, us_rep5 -> prop

axiom length__post_axiom20 :
  (forall container:us_rep5 [length5(container)].
  (length5(container) <= capacity1(container)))

axiom length__post_axiom21 :
  (forall container:us_rep5 [length5(container)].
  dynamic_invariant22(length5(container), true, false, true, true))

type us_main_type13

logic us_main_eq13 : us_main_type13, us_main_type13 -> bool

type us_rep13

logic bool_eq33 : us_rep13, us_rep13 -> bool

logic value__size19 : int

logic object__size19 : int

logic alignment19 : int

axiom value__size_axiom19 : (0 <= value__size19)

axiom object__size_axiom19 : (0 <= object__size19)

axiom alignment_axiom19 : (0 <= alignment19)

logic user_eq36 : us_rep13, us_rep13 -> bool

logic dummy36 : us_rep13

type sequence__ref3 = { sequence__content3 : us_rep13
}

function sequence__ref_sequence__content__6__projection(a: sequence__ref3) : us_rep13 =
  (a).sequence__content3

logic length14 : us_rep13 -> int

logic length__function_guard13 : int, us_rep13 -> prop

logic model5 : us_rep5 -> us_rep13

logic model__function_guard5 : us_rep13, us_rep5 -> prop

function last3(container: us_rep13) : int = (0 + length14(container))

logic last__function_guard3 : int, us_rep13 -> prop

logic get5 : us_rep13, int -> int

logic get__function_guard5 : int, us_rep13, int -> prop

function oeq13(left: us_rep13, right: us_rep13) : bool =
  andb(bool_eq11(length14(left), length14(right)),
  (if (forall n:int. (((1 <= n) and (n <= last3(left))) -> (get5(left,
      n) = get5(right, n)))) then true else false))

logic oeq__function_guard13 : bool, us_rep13, us_rep13 -> prop

axiom user_eq__def_axiom19 :
  (forall a:us_rep13. forall b:us_rep13 [user_eq36(a, b)]. (user_eq36(a,
  b) = oeq13(a, b)))

predicate default_initial_assumption13(temp___expr_2447: us_rep13,
  temp___skip_top_level_2448: bool) =
  ((not (temp___skip_top_level_2448 = true)) ->
  (length14(temp___expr_2447) = 0))

axiom model__post_axiom3 :
  (forall container:us_rep5 [model5(container)].
  (length14(model5(container)) = length5(container)))

axiom oeq__post_axiom28 :
  (forall left:us_rep5. forall right:us_rep5 [oeq5(left, right)].
  ((oeq5(left, right) = true) -> (oeq13(model5(left),
  model5(right)) = true)))

axiom oeq__post_axiom29 :
  (forall left:us_rep5. forall right:us_rep5 [oeq5(left, right)].
  ((oeq13(model5(left), model5(right)) = true) -> (oeq5(left,
  right) = true)))

type extended_index3

logic extended_indexqtint3 : extended_index3 -> int

axiom extended_indexqtaxiom6 :
  (forall i:extended_index3. (0 <= extended_indexqtint3(i)))

axiom extended_indexqtaxiom7 :
  (forall i:extended_index3. (extended_indexqtint3(i) <= 2147483647))

predicate in_range23(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq34(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE18 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check18 : us_image -> prop

logic attr__ATTRIBUTE_VALUE18 : us_image -> int

logic user_eq37 : extended_index3, extended_index3 -> bool

logic dummy37 : extended_index3

type extended_index__ref3 = { extended_index__content3 : extended_index3
}

function extended_index__ref_extended_index__content__7__projection(a: extended_index__ref3) : extended_index3 =
  (a).extended_index__content3

predicate dynamic_invariant23(temp___expr_2439: int,
  temp___is_init_2435: bool, temp___skip_constant_2436: bool,
  temp___do_toplevel_2437: bool, temp___do_typ_inv_2438: bool) =
  (((temp___is_init_2435 = true) or (0 <= 2147483647)) ->
  in_range23(temp___expr_2439))

axiom length__post_axiom22 :
  (forall container:us_rep13 [length14(container)].
  ((0 + length14(container)) <= 2147483647))

axiom length__post_axiom23 :
  (forall container:us_rep13 [length14(container)].
  dynamic_invariant1(length14(container), true, false, true, true))

type element_type9

logic element_typeqtint9 : element_type9 -> int

axiom element_typeqtaxiom18 :
  (forall i:element_type9. (0 <= element_typeqtint9(i)))

axiom element_typeqtaxiom19 :
  (forall i:element_type9. (element_typeqtint9(i) <= 2147483647))

predicate in_range24(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq35(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE19 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check19 : us_image -> prop

logic attr__ATTRIBUTE_VALUE19 : us_image -> int

logic user_eq38 : element_type9, element_type9 -> bool

logic dummy38 : element_type9

type element_type__ref9 = { element_type__content9 : element_type9
}

function element_type__ref_element_type__content__21__projection(a: element_type__ref9) : element_type9 =
  (a).element_type__content9

predicate dynamic_invariant24(temp___expr_2432: int,
  temp___is_init_2428: bool, temp___skip_constant_2429: bool,
  temp___do_toplevel_2430: bool, temp___do_typ_inv_2431: bool) =
  (((temp___is_init_2428 = true) or (0 <= 2147483647)) ->
  in_range24(temp___expr_2432))

axiom get__post_axiom11 :
  (forall container:us_rep13.
  (forall position:int [get5(container, position)].
  ((dynamic_invariant23(position, true, true, true, true) and
  ((1 <= position) and (position <= last3(container)))) ->
  dynamic_invariant24(get5(container, position), true, false, true, true))))

axiom r2b__def_axiom : (r2b = default_modulus(capacity))

axiom r5b__def_axiom : (r5b = default_modulus1(capacity))

 (* File "dic_of_cont.ads", line 31, characters 0-0 *)
goal defqtvc :
  (forall dlli__split_fields:us_main_type.
  forall dhama__split_fields:us_main_type1.
  forall dhase__split_fields:us_main_type2.
  forall dorma__split_fields:us_main_type3.
  forall dorse__split_fields:us_main_type4.
  forall dfove__split_fields:us_main_type5. (dynamic_invariant1(capacity,
  true, false, true, true) -> (in_range(capacity) ->
  (default_initial_assumption({ us_split_discrs1 = dlli__split_discrs;
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = dlli__split_fields }
  }, false) -> (dynamic_invariant2({ us_split_discrs1 = dlli__split_discrs;
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = dlli__split_fields }
  }, false, false, true, true) -> (let dic_of_cont__main__R2b__assume =
  default_modulus(capacity) : t in
  (dynamic_invariant(dic_of_cont__main__R2b__assume, true, false, true,
  true) -> ((dic_of_cont__main__R2b__assume = r2b) -> (dynamic_invariant(r2b,
  true, false, true, true) -> (in_range(capacity) ->
  (default_initial_assumption1({ us_split_discrs3 = dhama__split_discrs;
  us_split_fields3 = { rec__dic_of_cont__my_hama__map = dhama__split_fields }
  }, false) -> (dynamic_invariant3({ us_split_discrs3 = dhama__split_discrs;
  us_split_fields3 = { rec__dic_of_cont__my_hama__map = dhama__split_fields }
  }, false, false, true, true) -> (let dic_of_cont__main__R5b__assume =
  default_modulus1(capacity) : t in
  (dynamic_invariant(dic_of_cont__main__R5b__assume, true, false, true,
  true) -> ((dic_of_cont__main__R5b__assume = r5b) -> (dynamic_invariant(r5b,
  true, false, true, true) -> (in_range(capacity) ->
  (default_initial_assumption2({ us_split_discrs5 = dhase__split_discrs;
  us_split_fields5 = { rec__dic_of_cont__my_hase__set = dhase__split_fields }
  }, false) -> (dynamic_invariant4({ us_split_discrs5 = dhase__split_discrs;
  us_split_fields5 = { rec__dic_of_cont__my_hase__set = dhase__split_fields }
  }, false, false, true, true) -> (in_range(capacity) ->
  (default_initial_assumption3({ us_split_discrs7 = dorma__split_discrs;
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = dorma__split_fields }
  }, false) -> (dynamic_invariant5({ us_split_discrs7 = dorma__split_discrs;
  us_split_fields7 = { rec__dic_of_cont__my_orma__map = dorma__split_fields }
  }, false, false, true, true) -> (in_range(capacity) ->
  (default_initial_assumption4({ us_split_discrs9 = dorse__split_discrs;
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = dorse__split_fields }
  }, false) -> (dynamic_invariant6({ us_split_discrs9 = dorse__split_discrs;
  us_split_fields9 = { rec__dic_of_cont__my_orse__set = dorse__split_fields }
  }, false, false, true, true) -> (in_range1(capacity) ->
  (default_initial_assumption5({ us_split_discrs11 = dfove__split_discrs;
  us_split_fields11 = { rec__dic_of_cont__my_fove__vector =
  dfove__split_fields } }, false) -> (dynamic_invariant7({
  us_split_discrs11 = dfove__split_discrs; us_split_fields11 = {
  rec__dic_of_cont__my_fove__vector = dfove__split_fields } }, false, false,
  true, true) -> ((is_empty({ us_split_discrs1 = dlli__split_discrs;
  us_split_fields1 = { rec__dic_of_cont__my_dlli__list = dlli__split_fields }
  }) = true) ->
  ((to_rep((dlli__split_discrs).rec__dic_of_cont__my_dlli__list__capacity) = capacity) ->
  (is_empty1({ us_split_discrs3 = dhama__split_discrs; us_split_fields3 = {
  rec__dic_of_cont__my_hama__map = dhama__split_fields }
  }) = true)))))))))))))))))))))))))))))))
