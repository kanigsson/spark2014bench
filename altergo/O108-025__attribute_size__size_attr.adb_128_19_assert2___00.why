(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type r

logic user_eq4 : r, r -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic dummy4 : r

type r__ref = { r__content : r
}

function r__ref_r__content__projection(a: r__ref) : r = (a).r__content

logic attr__ATTRIBUTE_ADDRESS4 : int

type us_split_discrs = { rec__size_attr__r1__a : bool
}

function us_split_discrs_rec__size_attr__r1__a__projection(a: us_split_discrs) : bool =
  (a).rec__size_attr__r1__a

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__size_attr__r1__x : character
}

function us_split_fields_rec__size_attr__r1__x__projection(a: us_split_fields) : character =
  (a).rec__size_attr__r1__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate size_attr__r1__x__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__size_attr__r1__a) = 1)

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__size_attr__r1__a) = to_int(((b).us_split_discrs1).rec__size_attr__r1__a)) and
  (size_attr__r1__x__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__size_attr__r1__x) = to_rep(((b).us_split_fields1).rec__size_attr__r1__x)))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic size_attr__r1__a__first__bit : int

logic size_attr__r1__a__last__bit : int

logic size_attr__r1__a__position : int

axiom size_attr__r1__a__first__bit_axiom :
  (0 <= size_attr__r1__a__first__bit)

axiom size_attr__r1__a__last__bit_axiom :
  (size_attr__r1__a__first__bit <  size_attr__r1__a__last__bit)

axiom size_attr__r1__a__position_axiom : (0 <= size_attr__r1__a__position)

logic size_attr__r1__x__first__bit : int

logic size_attr__r1__x__last__bit : int

logic size_attr__r1__x__position : int

axiom size_attr__r1__x__first__bit_axiom :
  (0 <= size_attr__r1__x__first__bit)

axiom size_attr__r1__x__last__bit_axiom :
  (size_attr__r1__x__first__bit <  size_attr__r1__x__last__bit)

axiom size_attr__r1__x__position_axiom : (0 <= size_attr__r1__x__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type r1__ref = { r1__content : us_rep
}

function r1__ref_r1__content__projection(a: r1__ref) : us_rep =
  (a).r1__content

predicate in_range4(rec__size_attr__r1__a1: bool, a: us_rep) =
  (rec__size_attr__r1__a1 = ((a).us_split_discrs1).rec__size_attr__r1__a)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic size_attr__r1__a__first__bit1 : int

logic size_attr__r1__a__last__bit1 : int

logic size_attr__r1__a__position1 : int

axiom size_attr__r1__a__first__bit_axiom1 :
  (0 <= size_attr__r1__a__first__bit1)

axiom size_attr__r1__a__last__bit_axiom1 :
  (size_attr__r1__a__first__bit1 <  size_attr__r1__a__last__bit1)

axiom size_attr__r1__a__position_axiom1 : (0 <= size_attr__r1__a__position1)

logic size_attr__r1__x__first__bit1 : int

logic size_attr__r1__x__last__bit1 : int

logic size_attr__r1__x__position1 : int

axiom size_attr__r1__x__first__bit_axiom1 :
  (0 <= size_attr__r1__x__first__bit1)

axiom size_attr__r1__x__last__bit_axiom1 :
  (size_attr__r1__x__first__bit1 <  size_attr__r1__x__last__bit1)

axiom size_attr__r1__x__position_axiom1 : (0 <= size_attr__r1__x__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type tv1S__ref = { tv1S__content : us_rep
}

function tv1S__ref_tv1S__content__projection(a: tv1S__ref) : us_rep =
  (a).tv1S__content

logic v1__split_discrs : us_split_discrs

logic v1__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_invariant1(temp___expr_340: us_rep,
  temp___is_init_336: bool, temp___skip_constant_337: bool,
  temp___do_toplevel_338: bool, temp___do_typ_inv_339: bool) =
  ((not (temp___skip_constant_337 = true)) -> in_range4(of_int(0),
  temp___expr_340))

predicate default_initial_assumption(temp___expr_342: us_rep,
  temp___skip_top_level_343: bool) =
  (((temp___expr_342).us_split_discrs1).rec__size_attr__r1__a = of_int(0))

predicate default_initial_assumption1(temp___expr_205: us_rep,
  temp___skip_top_level_206: bool) =
  (((temp___expr_205).us_split_discrs1).rec__size_attr__r1__a = of_int(0))

logic v2__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate in_range5(rec__size_attr__r1__a1: bool, a: us_rep) =
  (rec__size_attr__r1__a1 = ((a).us_split_discrs1).rec__size_attr__r1__a)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic size_attr__r1__a__first__bit2 : int

logic size_attr__r1__a__last__bit2 : int

logic size_attr__r1__a__position2 : int

axiom size_attr__r1__a__first__bit_axiom2 :
  (0 <= size_attr__r1__a__first__bit2)

axiom size_attr__r1__a__last__bit_axiom2 :
  (size_attr__r1__a__first__bit2 <  size_attr__r1__a__last__bit2)

axiom size_attr__r1__a__position_axiom2 : (0 <= size_attr__r1__a__position2)

logic size_attr__r1__x__first__bit2 : int

logic size_attr__r1__x__last__bit2 : int

logic size_attr__r1__x__position2 : int

axiom size_attr__r1__x__first__bit_axiom2 :
  (0 <= size_attr__r1__x__first__bit2)

axiom size_attr__r1__x__last__bit_axiom2 :
  (size_attr__r1__x__first__bit2 <  size_attr__r1__x__last__bit2)

axiom size_attr__r1__x__position_axiom2 : (0 <= size_attr__r1__x__position2)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type r1f__ref = { r1f__content : us_rep
}

function r1f__ref_r1f__content__projection(a: r1f__ref) : us_rep =
  (a).r1f__content

logic v3__split_discrs : us_split_discrs

logic v3__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate dynamic_invariant2(temp___expr_213: us_rep,
  temp___is_init_209: bool, temp___skip_constant_210: bool,
  temp___do_toplevel_211: bool, temp___do_typ_inv_212: bool) =
  ((not (temp___skip_constant_210 = true)) -> in_range5(of_int(0),
  temp___expr_213))

predicate default_initial_assumption2(temp___expr_215: us_rep,
  temp___skip_top_level_216: bool) =
  (((temp___expr_215).us_split_discrs1).rec__size_attr__r1__a = of_int(0))

type us_split_fields2 = { rec__size_attr__r2__x : integer
}

function us_split_fields_rec__size_attr__r2__x__projection(a: us_split_fields2) : integer =
  (a).rec__size_attr__r2__x

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if (to_rep1(((a).us_split_fields3).rec__size_attr__r2__x) = to_rep1(((b).us_split_fields3).rec__size_attr__r2__x)) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic size_attr__r2__x__first__bit : int

logic size_attr__r2__x__last__bit : int

logic size_attr__r2__x__position : int

axiom size_attr__r2__x__first__bit_axiom :
  (0 <= size_attr__r2__x__first__bit)

axiom size_attr__r2__x__last__bit_axiom :
  (size_attr__r2__x__first__bit <  size_attr__r2__x__last__bit)

axiom size_attr__r2__x__position_axiom : (0 <= size_attr__r2__x__position)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type r2__ref = { r2__content : us_rep1
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep1 =
  (a).r2__content

logic attr__ATTRIBUTE_ADDRESS8 : int

type us_split_fields4 = { rec__size_attr__r3__x : integer; rec__ext__ :
us_private
}

function us_split_fields_rec__size_attr__r3__x__projection(a: us_split_fields4) : integer =
  (a).rec__size_attr__r3__x

function us_split_fields_rec__ext____projection(a: us_split_fields4) : us_private =
  (a).rec__ext__

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag : int
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_attr__tag__projection(a: us_rep2) : int = (a).attr__tag

function bool_eq8(a: us_rep2, b: us_rep2) : bool =
  (if (to_rep1(((a).us_split_fields5).rec__size_attr__r3__x) = to_rep1(((b).us_split_fields5).rec__size_attr__r3__x)) then true else false)

logic us_dispatch_eq : us_rep2, us_rep2 -> bool

logic us_tag : int

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic size_attr__r3__x__first__bit : int

logic size_attr__r3__x__last__bit : int

logic size_attr__r3__x__position : int

axiom size_attr__r3__x__first__bit_axiom :
  (0 <= size_attr__r3__x__first__bit)

axiom size_attr__r3__x__last__bit_axiom :
  (size_attr__r3__x__first__bit <  size_attr__r3__x__last__bit)

axiom size_attr__r3__x__position_axiom : (0 <= size_attr__r3__x__position)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type r3__ref = { r3__content : us_rep2
}

function r3__ref_r3__content__projection(a: r3__ref) : us_rep2 =
  (a).r3__content

logic v5__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate default_initial_assumption3(temp___expr_232: us_rep2,
  temp___skip_top_level_233: bool) = ((temp___expr_232).attr__tag = us_tag)

type us_split_fields6 = { rec__size_attr__r4__y : integer;
rec__size_attr__r3__x1 : integer; rec__ext__1 : us_private
}

function us_split_fields_rec__size_attr__r4__y__projection(a: us_split_fields6) : integer =
  (a).rec__size_attr__r4__y

function us_split_fields_rec__size_attr__r3__x__2__projection(a: us_split_fields6) : integer =
  (a).rec__size_attr__r3__x1

function us_split_fields_rec__ext____2__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__1

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6; attr__tag1 : int
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep_attr__tag__2__projection(a: us_rep3) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__size_attr__r4__y : us_private -> integer

axiom extract__size_attr__r4__y__conv :
  (forall size_attr__r4__y:integer.
  (forall rec__ext__2:us_private.
  (extract__size_attr__r4__y(hide_ext__(size_attr__r4__y,
  rec__ext__2)) = size_attr__r4__y)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep3) : us_rep2 = { us_split_fields5 = {
  rec__size_attr__r3__x = ((a).us_split_fields7).rec__size_attr__r3__x1;
  rec__ext__ = hide_ext__(((a).us_split_fields7).rec__size_attr__r4__y,
  ((a).us_split_fields7).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r1: us_rep2) : us_rep3 = { us_split_fields7 = {
  rec__size_attr__r4__y =
  extract__size_attr__r4__y(((r1).us_split_fields5).rec__ext__);
  rec__size_attr__r3__x1 = ((r1).us_split_fields5).rec__size_attr__r3__x;
  rec__ext__1 = extract__ext__(((r1).us_split_fields5).rec__ext__) };
  attr__tag1 = (r1).attr__tag }

function bool_eq9(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep1(((a).us_split_fields7).rec__size_attr__r4__y) = to_rep1(((b).us_split_fields7).rec__size_attr__r4__y)) and
  (to_rep1(((a).us_split_fields7).rec__size_attr__r3__x1) = to_rep1(((b).us_split_fields7).rec__size_attr__r3__x1))) then true else false)

logic us_tag1 : int

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic size_attr__r4__y__first__bit : int

logic size_attr__r4__y__last__bit : int

logic size_attr__r4__y__position : int

axiom size_attr__r4__y__first__bit_axiom :
  (0 <= size_attr__r4__y__first__bit)

axiom size_attr__r4__y__last__bit_axiom :
  (size_attr__r4__y__first__bit <  size_attr__r4__y__last__bit)

axiom size_attr__r4__y__position_axiom : (0 <= size_attr__r4__y__position)

logic size_attr__r3__x__first__bit1 : int

logic size_attr__r3__x__last__bit1 : int

logic size_attr__r3__x__position1 : int

axiom size_attr__r3__x__first__bit_axiom1 :
  (0 <= size_attr__r3__x__first__bit1)

axiom size_attr__r3__x__last__bit_axiom1 :
  (size_attr__r3__x__first__bit1 <  size_attr__r3__x__last__bit1)

axiom size_attr__r3__x__position_axiom1 : (0 <= size_attr__r3__x__position1)

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy10 : us_rep3

type r4__ref = { r4__content : us_rep3
}

function r4__ref_r4__content__projection(a: r4__ref) : us_rep3 =
  (a).r4__content

logic v6__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS10 : int

predicate default_initial_assumption4(temp___expr_240: us_rep3,
  temp___skip_top_level_241: bool) = ((temp___expr_240).attr__tag1 = us_tag1)

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq11 : natural, natural -> bool

logic dummy11 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep2(x: natural) : int = naturalqtint(x)

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,natural) farray
}

logic slide1 : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq1 :
  (forall a:(int,natural) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq11(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

type map

type map__ref2 = { map__content2 : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide2 : map, int, int, int, int -> map

axiom slide_def2 :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide2(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq12(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep2(get(a, temp___idx_155, temp___idx_156)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156))))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev12 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev13 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev14 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq12(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep2(get(a, temp___idx_155, temp___idx_156)) = to_rep2(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)))))))))

logic attr__ATTRIBUTE_ADDRESS16 : int

type map1

type map__ref3 = { map__content3 : map1
}

logic get1 : map1, int, int, int -> natural

logic set1 : map1, int, int, int, natural -> map1

axiom Select_eq1 :
  (forall m:map1.
  (forall i:int.
  (forall j:int.
  (forall k:int.
  (forall a:natural [set1(m, i, j, k, a)]. (get1(set1(m, i, j, k, a), i, j,
  k) = a))))))

axiom Select_neq1 :
  (forall m:map1.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall k:int. forall k2:int.
  (forall a:natural [get1(set1(m, i, j, k, a), i2, j2, k2)| set1(m, i, j, k,
  a), get1(m, i2, j2, k2)]. ((not ((i = i2) and ((j = j2) and (k = k2)))) ->
  (get1(set1(m, i, j, k, a), i2, j2, k2) = get1(m, i2, j2, k2))))))))

logic slide3 : map1, int, int, int, int, int, int -> map1

axiom slide_def3 :
  (forall a:map1.
  (forall old_first:int. forall new_first:int.
  (forall old_first_2:int. forall new_first_2:int.
  (forall old_first_3:int. forall new_first_3:int.
  (forall i:int.
  (forall j:int.
  (forall k:int [get1(slide3(a, old_first, new_first, old_first_2,
  new_first_2, old_first_3, new_first_3), i, j, k)]. (get1(slide3(a,
  old_first, new_first, old_first_2, new_first_2, old_first_3, new_first_3),
  i, j, k) = get1(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)), (k - (new_first_3 - old_first_3)))))))))))

function bool_eq13(a: map1, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, a__first_3: int, a__last_3: int, b: map1, b__first: int,
  b__last: int, b__first_2: int, b__last_2: int, b__first_3: int,
  b__last_3: int) : bool =
  (if ((((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (if (a__first_3 <= a__last_3) then ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3))) else (b__last_3 <  b__first_3))) and
  (forall temp___idx_157:int. forall temp___idx_158:int.
  forall temp___idx_159:int. (((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and ((a__first_2 <= temp___idx_158) and
  (temp___idx_158 <= a__last_2))) and ((a__first_3 <= temp___idx_159) and
  (temp___idx_159 <= a__last_3))) -> (to_rep2(get1(a, temp___idx_157,
  temp___idx_158, temp___idx_159)) = to_rep2(get1(b,
  ((b__first - a__first) + temp___idx_157),
  ((b__first_2 - a__first_2) + temp___idx_158),
  ((b__first_3 - a__first_3) + temp___idx_159))))))) then true else false)

axiom bool_eq_rev15 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev16 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev17 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev18 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev19 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev20 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev21 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_3 <= a__last_3) ->
  (b__first_3 <= b__last_3)))))

axiom bool_eq_rev22 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((a__first_3 <= a__last_3) ->
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3))))))

axiom bool_eq_rev23 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) -> ((not (a__first_3 <= a__last_3)) ->
  (b__last_3 <  b__first_3)))))

axiom bool_eq_rev24 :
  (forall a:map1. forall b:map1.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall b__first:int. forall b__last:int. forall b__first_2:int.
  forall b__last_2:int. forall b__first_3:int. forall b__last_3:int.
  ((bool_eq13(b, b__first, b__last, b__first_2, b__last_2, b__first_3,
  b__last_3, a, a__first, a__last, a__first_2, a__last_2, a__first_3,
  a__last_3) = true) ->
  (forall temp___idx_157:int. forall temp___idx_158:int.
  forall temp___idx_159:int. (((((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) and ((a__first_2 <= temp___idx_158) and
  (temp___idx_158 <= a__last_2))) and ((a__first_3 <= temp___idx_159) and
  (temp___idx_159 <= a__last_3))) -> (to_rep2(get1(a, temp___idx_157,
  temp___idx_158, temp___idx_159)) = to_rep2(get1(b,
  ((b__first - a__first) + temp___idx_157),
  ((b__first_2 - a__first_2) + temp___idx_158),
  ((b__first_3 - a__first_3) + temp___idx_159)))))))))

logic attr__ATTRIBUTE_ADDRESS17 : int

type map2

type map__ref4 = { map__content4 : map2
}

logic get2 : map2, int, int, int, int -> natural

logic set2 : map2, int, int, int, int, natural -> map2

axiom Select_eq2 :
  (forall m:map2.
  (forall i:int.
  (forall j:int.
  (forall k:int.
  (forall l:int.
  (forall a:natural [set2(m, i, j, k, l, a)]. (get2(set2(m, i, j, k, l, a),
  i, j, k, l) = a)))))))

axiom Select_neq2 :
  (forall m:map2.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall k:int. forall k2:int.
  (forall l:int. forall l2:int.
  (forall a:natural [get2(set2(m, i, j, k, l, a), i2, j2, k2, l2)| set2(m, i,
  j, k, l, a), get2(m, i2, j2, k2, l2)]. ((not ((i = i2) and ((j = j2) and
  ((k = k2) and (l = l2))))) -> (get2(set2(m, i, j, k, l, a), i2, j2, k2,
  l2) = get2(m, i2, j2, k2, l2)))))))))

logic slide4 : map2, int, int, int, int, int, int, int, int -> map2

axiom slide_def4 :
  (forall a:map2.
  (forall old_first:int. forall new_first:int.
  (forall old_first_2:int. forall new_first_2:int.
  (forall old_first_3:int. forall new_first_3:int.
  (forall old_first_4:int. forall new_first_4:int.
  (forall i:int.
  (forall j:int.
  (forall k:int.
  (forall l:int [get2(slide4(a, old_first, new_first, old_first_2,
  new_first_2, old_first_3, new_first_3, old_first_4, new_first_4), i, j, k,
  l)]. (get2(slide4(a, old_first, new_first, old_first_2, new_first_2,
  old_first_3, new_first_3, old_first_4, new_first_4), i, j, k, l) = get2(a,
  (i - (new_first - old_first)), (j - (new_first_2 - old_first_2)),
  (k - (new_first_3 - old_first_3)), (l - (new_first_4 - old_first_4)))))))))))))

function bool_eq14(a: map2, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, a__first_3: int, a__last_3: int, a__first_4: int,
  a__last_4: int, b: map2, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int, b__first_3: int, b__last_3: int, b__first_4: int,
  b__last_4: int) : bool =
  (if (((((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (if (a__first_3 <= a__last_3) then ((b__first_3 <= b__last_3) and
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3))) else (b__last_3 <  b__first_3))) and
  (if (a__first_4 <= a__last_4) then ((b__first_4 <= b__last_4) and
  ((a__last_4 - a__first_4) = (b__last_4 - b__first_4))) else (b__last_4 <  b__first_4))) and
  (forall temp___idx_160:int. forall temp___idx_161:int.
  forall temp___idx_162:int. forall temp___idx_163:int.
  ((((((a__first <= temp___idx_160) and (temp___idx_160 <= a__last)) and
  ((a__first_2 <= temp___idx_161) and (temp___idx_161 <= a__last_2))) and
  ((a__first_3 <= temp___idx_162) and (temp___idx_162 <= a__last_3))) and
  ((a__first_4 <= temp___idx_163) and (temp___idx_163 <= a__last_4))) ->
  (to_rep2(get2(a, temp___idx_160, temp___idx_161, temp___idx_162,
  temp___idx_163)) = to_rep2(get2(b,
  ((b__first - a__first) + temp___idx_160),
  ((b__first_2 - a__first_2) + temp___idx_161),
  ((b__first_3 - a__first_3) + temp___idx_162),
  ((b__first_4 - a__first_4) + temp___idx_163))))))) then true else false)

axiom bool_eq_rev25 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev26 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev27 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev28 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev29 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev30 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev31 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first_3 <= a__last_3) ->
  (b__first_3 <= b__last_3)))))

axiom bool_eq_rev32 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first_3 <= a__last_3) ->
  ((a__last_3 - a__first_3) = (b__last_3 - b__first_3))))))

axiom bool_eq_rev33 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((not (a__first_3 <= a__last_3)) ->
  (b__last_3 <  b__first_3)))))

axiom bool_eq_rev34 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first_4 <= a__last_4) ->
  (b__first_4 <= b__last_4)))))

axiom bool_eq_rev35 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((a__first_4 <= a__last_4) ->
  ((a__last_4 - a__first_4) = (b__last_4 - b__first_4))))))

axiom bool_eq_rev36 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) -> ((not (a__first_4 <= a__last_4)) ->
  (b__last_4 <  b__first_4)))))

axiom bool_eq_rev37 :
  (forall a:map2. forall b:map2.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall a__first_3:int. forall a__last_3:int.
  forall a__first_4:int. forall a__last_4:int. forall b__first:int.
  forall b__last:int. forall b__first_2:int. forall b__last_2:int.
  forall b__first_3:int. forall b__last_3:int. forall b__first_4:int.
  forall b__last_4:int. ((bool_eq14(b, b__first, b__last, b__first_2,
  b__last_2, b__first_3, b__last_3, b__first_4, b__last_4, a, a__first,
  a__last, a__first_2, a__last_2, a__first_3, a__last_3, a__first_4,
  a__last_4) = true) ->
  (forall temp___idx_160:int. forall temp___idx_161:int.
  forall temp___idx_162:int. forall temp___idx_163:int.
  ((((((a__first <= temp___idx_160) and (temp___idx_160 <= a__last)) and
  ((a__first_2 <= temp___idx_161) and (temp___idx_161 <= a__last_2))) and
  ((a__first_3 <= temp___idx_162) and (temp___idx_162 <= a__last_3))) and
  ((a__first_4 <= temp___idx_163) and (temp___idx_163 <= a__last_4))) ->
  (to_rep2(get2(a, temp___idx_160, temp___idx_161, temp___idx_162,
  temp___idx_163)) = to_rep2(get2(b,
  ((b__first - a__first) + temp___idx_160),
  ((b__first_2 - a__first_2) + temp___idx_161),
  ((b__first_3 - a__first_3) + temp___idx_162),
  ((b__first_4 - a__first_4) + temp___idx_163)))))))))

logic attr__ATTRIBUTE_ADDRESS18 : int

type my_int

logic my_intqtint : my_int -> int

axiom my_intqtaxiom : (forall i:my_int. (1 <= my_intqtint(i)))

axiom my_intqtaxiom1 : (forall i:my_int. (my_intqtint(i) <= 10))

predicate in_range7(x: int) = ((1 <= x) and (x <= 10))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq12 : my_int, my_int -> bool

logic dummy12 : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref_my_int__content__projection(a: my_int__ref) : my_int =
  (a).my_int__content

predicate dynamic_invariant3(temp___expr_189: int, temp___is_init_185: bool,
  temp___skip_constant_186: bool, temp___do_toplevel_187: bool,
  temp___do_typ_inv_188: bool) = (((temp___is_init_185 = true) or
  (1 <= 10)) -> in_range7(temp___expr_189))

logic dummy13 : (int,natural) farray

logic value__size8 : int

logic object__size8 : int

logic component__size1 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom8 : (0 <= alignment8)

logic user_eq13 : (int,natural) farray, (int,natural) farray -> bool

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,natural) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,natural) farray = (a).elts1

function of_array1(a: (int,natural) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size9 : int

logic object__size9 : int

logic component__size2 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom9 : (0 <= alignment9)

function bool_eq16(x: us_t1, y: us_t1) : bool = bool_eq11((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq14 : us_t1, us_t1 -> bool

logic dummy14 : us_t1

type unconstrained_array__ref = { unconstrained_array__content : us_t1
}

function unconstrained_array__ref_unconstrained_array__content__projection(a: unconstrained_array__ref) : us_t1 =
  (a).unconstrained_array__content

logic dummy15 : map

logic value__size10 : int

logic object__size10 : int

logic component__size3 : int

logic alignment10 : int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (0 <= object__size10)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom10 : (0 <= alignment10)

logic user_eq15 : map, map -> bool

type t2

logic first4 : t2 -> integer

logic last4 : t2 -> integer

logic mk2 : int, int -> t2

axiom mk_def4 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first4(mk2(f, l))) = f))))

axiom mk_def5 :
  (forall f:int. forall l:int [mk2(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last4(mk2(f, l))) = l))))

predicate dynamic_property2(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t3

logic first5 : t3 -> integer

logic last5 : t3 -> integer

logic mk3 : int, int -> t3

axiom mk_def6 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first5(mk3(f, l))) = f))))

axiom mk_def7 :
  (forall f:int. forall l:int [mk3(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last5(mk3(f, l))) = l))))

predicate dynamic_property3(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t2 = { elts2 : map; rt2 : t2; rt_2 : t3
}

function to_array2(a: us_t2) : map = (a).elts2

function of_array2(a: map, f: int, l: int, f2: int, l2: int) : us_t2 = {
  elts2 = a; rt2 = mk2(f, l); rt_2 = mk3(f2, l2) }

function first6(a: us_t2) : int = to_rep1(first4((a).rt2))

function last6(a: us_t2) : int = to_rep1(last4((a).rt2))

function length2(a: us_t2) : int =
  (if (first6(a) <= last6(a)) then ((last6(a) - first6(a)) + 1) else 0)

function first_2(a: us_t2) : int = to_rep1(first5((a).rt_2))

function last_2(a: us_t2) : int = to_rep1(last5((a).rt_2))

function length_2(a: us_t2) : int =
  (if (first_2(a) <= last_2(a)) then ((last_2(a) - first_2(a)) + 1) else 0)

predicate dynamic_property4(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int) =
  (dynamic_property2(range_first1, range_last1, f1, l1) and
  dynamic_property3(range_first2, range_last2, f2, l2))

logic value__size11 : int

logic object__size11 : int

logic component__size4 : int

logic alignment11 : int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 : (0 <= object__size11)

axiom component__size_axiom4 : (0 <= component__size4)

axiom alignment_axiom11 : (0 <= alignment11)

function bool_eq17(x: us_t2, y: us_t2) : bool = bool_eq12((x).elts2,
  to_rep1(first4((x).rt2)), to_rep1(last4((x).rt2)),
  to_rep1(first5((x).rt_2)), to_rep1(last5((x).rt_2)), (y).elts2,
  to_rep1(first4((y).rt2)), to_rep1(last4((y).rt2)),
  to_rep1(first5((y).rt_2)), to_rep1(last5((y).rt_2)))

logic user_eq16 : us_t2, us_t2 -> bool

logic dummy16 : us_t2

type unconstrained_array_2__ref = { unconstrained_array_2__content : us_t2
}

function unconstrained_array_2__ref_unconstrained_array_2__content__projection(a: unconstrained_array_2__ref) : us_t2 =
  (a).unconstrained_array_2__content

logic dummy17 : map1

logic value__size12 : int

logic object__size12 : int

logic component__size5 : int

logic alignment12 : int

axiom value__size_axiom12 : (0 <= value__size12)

axiom object__size_axiom12 : (0 <= object__size12)

axiom component__size_axiom5 : (0 <= component__size5)

axiom alignment_axiom12 : (0 <= alignment12)

logic user_eq17 : map1, map1 -> bool

type t4

logic first7 : t4 -> integer

logic last7 : t4 -> integer

logic mk4 : int, int -> t4

axiom mk_def8 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first7(mk4(f, l))) = f))))

axiom mk_def9 :
  (forall f:int. forall l:int [mk4(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last7(mk4(f, l))) = l))))

predicate dynamic_property5(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t5

logic first8 : t5 -> integer

logic last8 : t5 -> integer

logic mk5 : int, int -> t5

axiom mk_def10 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first8(mk5(f, l))) = f))))

axiom mk_def11 :
  (forall f:int. forall l:int [mk5(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last8(mk5(f, l))) = l))))

predicate dynamic_property6(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t6

logic first9 : t6 -> integer

logic last9 : t6 -> integer

logic mk6 : int, int -> t6

axiom mk_def12 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first9(mk6(f, l))) = f))))

axiom mk_def13 :
  (forall f:int. forall l:int [mk6(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last9(mk6(f, l))) = l))))

predicate dynamic_property7(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t3 = { elts3 : map1; rt3 : t4; rt_21 : t5; rt_3 : t6
}

function to_array3(a: us_t3) : map1 = (a).elts3

function of_array3(a: map1, f: int, l: int, f2: int, l2: int, f3: int,
  l3: int) : us_t3 = { elts3 = a; rt3 = mk4(f, l); rt_21 = mk5(f2, l2);
  rt_3 = mk6(f3, l3) }

function first10(a: us_t3) : int = to_rep1(first7((a).rt3))

function last10(a: us_t3) : int = to_rep1(last7((a).rt3))

function length3(a: us_t3) : int =
  (if (first10(a) <= last10(a)) then ((last10(a) - first10(a)) + 1) else 0)

function first_21(a: us_t3) : int = to_rep1(first8((a).rt_21))

function last_21(a: us_t3) : int = to_rep1(last8((a).rt_21))

function length_21(a: us_t3) : int =
  (if (first_21(a) <= last_21(a)) then ((last_21(a) - first_21(a)) + 1) else 0)

function first_3(a: us_t3) : int = to_rep1(first9((a).rt_3))

function last_3(a: us_t3) : int = to_rep1(last9((a).rt_3))

function length_3(a: us_t3) : int =
  (if (first_3(a) <= last_3(a)) then ((last_3(a) - first_3(a)) + 1) else 0)

predicate dynamic_property8(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int,
  range_first3: int, range_last3: int, f3: int, l3: int) =
  (dynamic_property5(range_first1, range_last1, f1, l1) and
  (dynamic_property6(range_first2, range_last2, f2, l2) and
  dynamic_property7(range_first3, range_last3, f3, l3)))

logic value__size13 : int

logic object__size13 : int

logic component__size6 : int

logic alignment13 : int

axiom value__size_axiom13 : (0 <= value__size13)

axiom object__size_axiom13 : (0 <= object__size13)

axiom component__size_axiom6 : (0 <= component__size6)

axiom alignment_axiom13 : (0 <= alignment13)

function bool_eq18(x: us_t3, y: us_t3) : bool = bool_eq13((x).elts3,
  to_rep1(first7((x).rt3)), to_rep1(last7((x).rt3)),
  to_rep1(first8((x).rt_21)), to_rep1(last8((x).rt_21)),
  to_rep1(first9((x).rt_3)), to_rep1(last9((x).rt_3)), (y).elts3,
  to_rep1(first7((y).rt3)), to_rep1(last7((y).rt3)),
  to_rep1(first8((y).rt_21)), to_rep1(last8((y).rt_21)),
  to_rep1(first9((y).rt_3)), to_rep1(last9((y).rt_3)))

logic user_eq18 : us_t3, us_t3 -> bool

logic dummy18 : us_t3

type unconstrained_array_3__ref = { unconstrained_array_3__content : us_t3
}

function unconstrained_array_3__ref_unconstrained_array_3__content__projection(a: unconstrained_array_3__ref) : us_t3 =
  (a).unconstrained_array_3__content

logic dummy19 : map2

logic value__size14 : int

logic object__size14 : int

logic component__size7 : int

logic alignment14 : int

axiom value__size_axiom14 : (0 <= value__size14)

axiom object__size_axiom14 : (0 <= object__size14)

axiom component__size_axiom7 : (0 <= component__size7)

axiom alignment_axiom14 : (0 <= alignment14)

logic user_eq19 : map2, map2 -> bool

type t7

logic first11 : t7 -> integer

logic last11 : t7 -> integer

logic mk7 : int, int -> t7

axiom mk_def14 :
  (forall f:int. forall l:int [mk7(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first11(mk7(f, l))) = f))))

axiom mk_def15 :
  (forall f:int. forall l:int [mk7(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last11(mk7(f, l))) = l))))

predicate dynamic_property9(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t8

logic first12 : t8 -> integer

logic last12 : t8 -> integer

logic mk8 : int, int -> t8

axiom mk_def16 :
  (forall f:int. forall l:int [mk8(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first12(mk8(f, l))) = f))))

axiom mk_def17 :
  (forall f:int. forall l:int [mk8(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last12(mk8(f, l))) = l))))

predicate dynamic_property10(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t9

logic first13 : t9 -> integer

logic last13 : t9 -> integer

logic mk9 : int, int -> t9

axiom mk_def18 :
  (forall f:int. forall l:int [mk9(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first13(mk9(f, l))) = f))))

axiom mk_def19 :
  (forall f:int. forall l:int [mk9(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last13(mk9(f, l))) = l))))

predicate dynamic_property11(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type t10

logic first14 : t10 -> integer

logic last14 : t10 -> integer

logic mk10 : int, int -> t10

axiom mk_def20 :
  (forall f:int. forall l:int [mk10(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first14(mk10(f, l))) = f))))

axiom mk_def21 :
  (forall f:int. forall l:int [mk10(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last14(mk10(f, l))) = l))))

predicate dynamic_property12(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t4 = { elts4 : map2; rt4 : t7; rt_22 : t8; rt_31 : t9; rt_4 : t10
}

function to_array4(a: us_t4) : map2 = (a).elts4

function of_array4(a: map2, f: int, l: int, f2: int, l2: int, f3: int,
  l3: int, f4: int, l4: int) : us_t4 = { elts4 = a; rt4 = mk7(f, l); rt_22 =
  mk8(f2, l2); rt_31 = mk9(f3, l3); rt_4 = mk10(f4, l4) }

function first15(a: us_t4) : int = to_rep1(first11((a).rt4))

function last15(a: us_t4) : int = to_rep1(last11((a).rt4))

function length4(a: us_t4) : int =
  (if (first15(a) <= last15(a)) then ((last15(a) - first15(a)) + 1) else 0)

function first_22(a: us_t4) : int = to_rep1(first12((a).rt_22))

function last_22(a: us_t4) : int = to_rep1(last12((a).rt_22))

function length_22(a: us_t4) : int =
  (if (first_22(a) <= last_22(a)) then ((last_22(a) - first_22(a)) + 1) else 0)

function first_31(a: us_t4) : int = to_rep1(first13((a).rt_31))

function last_31(a: us_t4) : int = to_rep1(last13((a).rt_31))

function length_31(a: us_t4) : int =
  (if (first_31(a) <= last_31(a)) then ((last_31(a) - first_31(a)) + 1) else 0)

function first_4(a: us_t4) : int = to_rep1(first14((a).rt_4))

function last_4(a: us_t4) : int = to_rep1(last14((a).rt_4))

function length_4(a: us_t4) : int =
  (if (first_4(a) <= last_4(a)) then ((last_4(a) - first_4(a)) + 1) else 0)

predicate dynamic_property13(range_first1: int, range_last1: int, f1: int,
  l1: int, range_first2: int, range_last2: int, f2: int, l2: int,
  range_first3: int, range_last3: int, f3: int, l3: int, range_first4: int,
  range_last4: int, f4: int, l4: int) = (dynamic_property9(range_first1,
  range_last1, f1, l1) and (dynamic_property10(range_first2, range_last2, f2,
  l2) and (dynamic_property11(range_first3, range_last3, f3, l3) and
  dynamic_property12(range_first4, range_last4, f4, l4))))

logic value__size15 : int

logic object__size15 : int

logic component__size8 : int

logic alignment15 : int

axiom value__size_axiom15 : (0 <= value__size15)

axiom object__size_axiom15 : (0 <= object__size15)

axiom component__size_axiom8 : (0 <= component__size8)

axiom alignment_axiom15 : (0 <= alignment15)

function bool_eq19(x: us_t4, y: us_t4) : bool = bool_eq14((x).elts4,
  to_rep1(first11((x).rt4)), to_rep1(last11((x).rt4)),
  to_rep1(first12((x).rt_22)), to_rep1(last12((x).rt_22)),
  to_rep1(first13((x).rt_31)), to_rep1(last13((x).rt_31)),
  to_rep1(first14((x).rt_4)), to_rep1(last14((x).rt_4)), (y).elts4,
  to_rep1(first11((y).rt4)), to_rep1(last11((y).rt4)),
  to_rep1(first12((y).rt_22)), to_rep1(last12((y).rt_22)),
  to_rep1(first13((y).rt_31)), to_rep1(last13((y).rt_31)),
  to_rep1(first14((y).rt_4)), to_rep1(last14((y).rt_4)))

logic user_eq20 : us_t4, us_t4 -> bool

logic dummy20 : us_t4

type unconstrained_array_4__ref = { unconstrained_array_4__content : us_t4
}

function unconstrained_array_4__ref_unconstrained_array_4__content__projection(a: unconstrained_array_4__ref) : us_t4 =
  (a).unconstrained_array_4__content

logic dummy21 : (int,character) farray

logic value__size16 : int

logic object__size16 : int

logic component__size9 : int

logic alignment16 : int

axiom value__size_axiom16 : (0 <= value__size16)

axiom object__size_axiom16 : (0 <= object__size16)

axiom component__size_axiom9 : (0 <= component__size9)

axiom alignment_axiom16 : (0 <= alignment16)

logic user_eq21 : (int,character) farray, (int,character) farray -> bool

logic dummy22 : (int,natural) farray

logic value__size17 : int

logic object__size17 : int

logic component__size10 : int

logic alignment17 : int

axiom value__size_axiom17 : (0 <= value__size17)

axiom object__size_axiom17 : (0 <= object__size17)

axiom component__size_axiom10 : (0 <= component__size10)

axiom alignment_axiom17 : (0 <= alignment17)

logic user_eq22 : (int,natural) farray, (int,natural) farray -> bool

logic dummy23 : map

logic value__size18 : int

logic object__size18 : int

logic component__size11 : int

logic alignment18 : int

axiom value__size_axiom18 : (0 <= value__size18)

axiom object__size_axiom18 : (0 <= object__size18)

axiom component__size_axiom11 : (0 <= component__size11)

axiom alignment_axiom18 : (0 <= alignment18)

logic user_eq23 : map, map -> bool

logic dummy24 : map1

logic value__size19 : int

logic object__size19 : int

logic component__size12 : int

logic alignment19 : int

axiom value__size_axiom19 : (0 <= value__size19)

axiom object__size_axiom19 : (0 <= object__size19)

axiom component__size_axiom12 : (0 <= component__size12)

axiom alignment_axiom19 : (0 <= alignment19)

logic user_eq24 : map1, map1 -> bool

logic dummy25 : map2

logic value__size20 : int

logic object__size20 : int

logic component__size13 : int

logic alignment20 : int

axiom value__size_axiom20 : (0 <= value__size20)

axiom object__size_axiom20 : (0 <= object__size20)

axiom component__size_axiom13 : (0 <= component__size13)

axiom alignment_axiom20 : (0 <= alignment20)

logic user_eq25 : map2, map2 -> bool

logic temp___String_Literal_405 : unit -> (int,character) farray

axiom temp___String_Literal_405__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_405(us_void_param)].
  (to_rep((temp___String_Literal_405(us_void_param)[1])) = 97))

axiom temp___String_Literal_405__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_405(us_void_param)].
  (to_rep((temp___String_Literal_405(us_void_param)[2])) = 98))

axiom temp___String_Literal_405__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_405(us_void_param)].
  (to_rep((temp___String_Literal_405(us_void_param)[3])) = 99))

logic size_attr__ca__aggregate_def : int -> (int,natural) farray

logic size_attr__ua__aggregate_def : int -> (int,natural) farray

logic size_attr__ca2__aggregate_def : int -> (int,natural) farray

logic size_attr__ca3__aggregate_def : int -> (int,natural) farray

logic size_attr__ca4__aggregate_def : int -> (int,natural) farray

logic size_attr__ua2__aggregate_def : int -> map

logic size_attr__ua3__aggregate_def : int -> map1

logic size_attr__ua4__aggregate_def : int -> map2

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range6(temp___expr_39))

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant6(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

predicate dynamic_invariant7(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant8(temp___expr_258: us_t1,
  temp___is_init_254: bool, temp___skip_constant_255: bool,
  temp___do_toplevel_256: bool, temp___do_typ_inv_257: bool) =
  ((not (temp___skip_constant_255 = true)) -> dynamic_property1(1,
  2147483647, first3(temp___expr_258), last3(temp___expr_258)))

predicate dynamic_invariant9(temp___expr_276: us_t2,
  temp___is_init_272: bool, temp___skip_constant_273: bool,
  temp___do_toplevel_274: bool, temp___do_typ_inv_275: bool) =
  ((not (temp___skip_constant_273 = true)) -> dynamic_property4(1,
  2147483647, first6(temp___expr_276), last6(temp___expr_276), 1, 2147483647,
  first_2(temp___expr_276), last_2(temp___expr_276)))

predicate dynamic_invariant10(temp___expr_297: us_t3,
  temp___is_init_293: bool, temp___skip_constant_294: bool,
  temp___do_toplevel_295: bool, temp___do_typ_inv_296: bool) =
  ((not (temp___skip_constant_294 = true)) -> dynamic_property8(1,
  2147483647, first10(temp___expr_297), last10(temp___expr_297), 1,
  2147483647, first_21(temp___expr_297), last_21(temp___expr_297), 1,
  2147483647, first_3(temp___expr_297), last_3(temp___expr_297)))

predicate dynamic_invariant11(temp___expr_321: us_t4,
  temp___is_init_317: bool, temp___skip_constant_318: bool,
  temp___do_toplevel_319: bool, temp___do_typ_inv_320: bool) =
  ((not (temp___skip_constant_318 = true)) -> dynamic_property13(1,
  2147483647, first15(temp___expr_321), last15(temp___expr_321), 1,
  2147483647, first_22(temp___expr_321), last_22(temp___expr_321), 1,
  2147483647, first_31(temp___expr_321), last_31(temp___expr_321), 1,
  2147483647, first_4(temp___expr_321), last_4(temp___expr_321)))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___422:int. (dynamic_invariant4(temp___422, true, true, true,
  true) ->
  (forall temp___423:int.
  ((size_attr__ca__aggregate_def(temp___422)[temp___423]) = rliteral))))

axiom def_axiom1 :
  (forall temp___425:int. (dynamic_invariant4(temp___425, true, true, true,
  true) ->
  (forall temp___426:int.
  ((size_attr__ua__aggregate_def(temp___425)[temp___426]) = rliteral))))

axiom def_axiom2 :
  (forall temp___428:int. (dynamic_invariant4(temp___428, true, true, true,
  true) ->
  (forall temp___429:int.
  ((size_attr__ca2__aggregate_def(temp___428)[temp___429]) = rliteral))))

axiom def_axiom3 :
  (forall temp___431:int. (dynamic_invariant4(temp___431, true, true, true,
  true) ->
  (forall temp___432:int.
  ((size_attr__ca3__aggregate_def(temp___431)[temp___432]) = rliteral))))

axiom def_axiom4 :
  (forall temp___434:int. (dynamic_invariant4(temp___434, true, true, true,
  true) ->
  (forall temp___435:int.
  ((size_attr__ca4__aggregate_def(temp___434)[temp___435]) = rliteral))))

axiom def_axiom5 :
  (forall temp___437:int. (dynamic_invariant4(temp___437, true, true, true,
  true) ->
  (forall temp___438:int. forall temp___439:int.
  (get(size_attr__ua2__aggregate_def(temp___437), temp___438,
  temp___439) = rliteral))))

axiom def_axiom6 :
  (forall temp___441:int. (dynamic_invariant4(temp___441, true, true, true,
  true) ->
  (forall temp___442:int. forall temp___443:int. forall temp___444:int.
  (get1(size_attr__ua3__aggregate_def(temp___441), temp___442, temp___443,
  temp___444) = rliteral))))

axiom def_axiom7 :
  (forall temp___446:int. (dynamic_invariant4(temp___446, true, true, true,
  true) ->
  (forall temp___447:int. forall temp___448:int. forall temp___449:int.
  forall temp___450:int. (get2(size_attr__ua4__aggregate_def(temp___446),
  temp___447, temp___448, temp___449, temp___450) = rliteral))))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

 (* File "size_attr.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall v1__split_fields:character. forall v2__split_fields:character.
  forall v2__split_discrs:bool. forall v3__split_fields:character.
  forall v5__split_fields:us_split_fields4.
  forall v6__split_fields:us_split_fields6.
  (forall b:bool. ((b = of_int(0)) ->
  (forall i:int. ((i = 0) -> (dynamic_invariant(i, true, false, true,
  true) ->
  (forall s:(int,character) farray. ((s = temp___String_Literal_405(void)) ->
  (forall mi:int. ((mi = 1) -> (dynamic_invariant3(mi, true, false, true,
  true) -> ((v1__attr__constrained = true) -> (default_initial_assumption({
  us_split_discrs1 = v1__split_discrs; us_split_fields1 = {
  rec__size_attr__r1__x = v1__split_fields } }, false) ->
  (dynamic_invariant1({ us_split_discrs1 = v1__split_discrs;
  us_split_fields1 = { rec__size_attr__r1__x = v1__split_fields } }, false,
  false, true, true) -> ((v2__attr__constrained = false) ->
  (default_initial_assumption1({ us_split_discrs1 = { rec__size_attr__r1__a =
  v2__split_discrs }; us_split_fields1 = { rec__size_attr__r1__x =
  v2__split_fields } }, false) -> ((v3__attr__constrained = true) ->
  (default_initial_assumption2({ us_split_discrs1 = v3__split_discrs;
  us_split_fields1 = { rec__size_attr__r1__x = v3__split_fields } },
  false) -> (dynamic_invariant2({ us_split_discrs1 = v3__split_discrs;
  us_split_fields1 = { rec__size_attr__r1__x = v3__split_fields } }, false,
  false, true, true) ->
  (forall v4__split_fields:integer. ((v4__split_fields = rliteral1) ->
  (default_initial_assumption3({ us_split_fields5 = v5__split_fields;
  attr__tag = v5__attr__tag }, false) -> (default_initial_assumption4({
  us_split_fields7 = v6__split_fields; attr__tag1 = v6__attr__tag },
  false) ->
  (forall ca:(int,natural) farray. ((ca = size_attr__ca__aggregate_def(1)) ->
  (forall ua:(int,natural) farray. ((ua = size_attr__ua__aggregate_def(1)) ->
  (forall ca2:(int,natural) farray.
  ((ca2 = size_attr__ca2__aggregate_def(1)) ->
  (forall ca3:(int,natural) farray.
  ((ca3 = size_attr__ca3__aggregate_def(1)) ->
  (forall ca4:(int,natural) farray.
  ((ca4 = size_attr__ca4__aggregate_def(1)) ->
  (forall ua2:map. ((ua2 = size_attr__ua2__aggregate_def(1)) ->
  (forall ua3:map1. ((ua3 = size_attr__ua3__aggregate_def(1)) ->
  (forall ua4:map2. ((ua4 = size_attr__ua4__aggregate_def(1)) ->
  ((0 <= value__size1) -> ((0 <= value__size2) -> ((0 <= value__size4) ->
  ((0 <= value__size5) -> ((0 <= value__size6) -> ((0 <= value__size7) ->
  ((0 <= value__size8) -> ((0 <= value__size9) -> ((0 <= value__size) ->
  ((0 <= value__size10) -> ((0 <= value__size12) -> ((0 <= value__size14) ->
  ((0 <= value__size11) -> ((0 <= value__size13) -> ((0 <= value__size15) ->
  ((0 <= 32) -> ((0 <= object__size16) ->
  (0 <= object__size8)))))))))))))))))))))))))))))))))))))))))))))))))))))))))
