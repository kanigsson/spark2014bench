(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

logic c : int

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic last : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type my_nat__ref = { my_nat__content : integer
}

function my_nat__ref_my_nat__content__projection(a: my_nat__ref) : integer =
  (a).my_nat__content

type us_split_discrs = { rec__dynamic_array__rec__b : bool
}

function us_split_discrs_rec__dynamic_array__rec__b__projection(a: us_split_discrs) : bool =
  (a).rec__dynamic_array__rec__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__dynamic_array__rec__f1 : integer;
rec__dynamic_array__rec__f2 : integer
}

function us_split_fields_rec__dynamic_array__rec__f1__projection(a: us_split_fields) : integer =
  (a).rec__dynamic_array__rec__f1

function us_split_fields_rec__dynamic_array__rec__f2__projection(a: us_split_fields) : integer =
  (a).rec__dynamic_array__rec__f2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate dynamic_array__rec__f1__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__dynamic_array__rec__b) = 1)

predicate dynamic_array__rec__f2__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__dynamic_array__rec__b) = 0)

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__dynamic_array__rec__b) = to_int(((b).us_split_discrs1).rec__dynamic_array__rec__b)) and
  ((dynamic_array__rec__f1__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__dynamic_array__rec__f1) = to_rep1(((b).us_split_fields1).rec__dynamic_array__rec__f1))) and
  (dynamic_array__rec__f2__pred(a) ->
  (to_rep1(((a).us_split_fields1).rec__dynamic_array__rec__f2) = to_rep1(((b).us_split_fields1).rec__dynamic_array__rec__f2))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dynamic_array__rec__b__first__bit : int

logic dynamic_array__rec__b__last__bit : int

logic dynamic_array__rec__b__position : int

axiom dynamic_array__rec__b__first__bit_axiom :
  (0 <= dynamic_array__rec__b__first__bit)

axiom dynamic_array__rec__b__last__bit_axiom :
  (dynamic_array__rec__b__first__bit <  dynamic_array__rec__b__last__bit)

axiom dynamic_array__rec__b__position_axiom :
  (0 <= dynamic_array__rec__b__position)

logic dynamic_array__rec__f1__first__bit : int

logic dynamic_array__rec__f1__last__bit : int

logic dynamic_array__rec__f1__position : int

axiom dynamic_array__rec__f1__first__bit_axiom :
  (0 <= dynamic_array__rec__f1__first__bit)

axiom dynamic_array__rec__f1__last__bit_axiom :
  (dynamic_array__rec__f1__first__bit <  dynamic_array__rec__f1__last__bit)

axiom dynamic_array__rec__f1__position_axiom :
  (0 <= dynamic_array__rec__f1__position)

logic dynamic_array__rec__f2__first__bit : int

logic dynamic_array__rec__f2__last__bit : int

logic dynamic_array__rec__f2__position : int

axiom dynamic_array__rec__f2__first__bit_axiom :
  (0 <= dynamic_array__rec__f2__first__bit)

axiom dynamic_array__rec__f2__last__bit_axiom :
  (dynamic_array__rec__f2__first__bit <  dynamic_array__rec__f2__last__bit)

axiom dynamic_array__rec__f2__position_axiom :
  (0 <= dynamic_array__rec__f2__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type rec____ref = { rec____content : us_rep
}

function rec____ref_rec____content__projection(a: rec____ref) : us_rep =
  (a).rec____content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last1(mk(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last2(a: us_t) : int = to_rep1(last1((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last2(a)) then ((last2(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last1((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last1((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type rec_array__ref = { rec_array__content : us_t
}

function rec_array__ref_rec_array__content__projection(a: rec_array__ref) : us_t =
  (a).rec_array__content

type t4b__ref = { t4b__content : us_t
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_t =
  (a).t4b__content

type us_split_discrs2 = { rec__dynamic_array__holder__d : natural
}

function us_split_discrs_rec__dynamic_array__holder__d__projection(a: us_split_discrs2) : natural =
  (a).rec__dynamic_array__holder__d

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__dynamic_array__holder__content : us_t
}

function us_split_fields_rec__dynamic_array__holder__content__projection(a: us_split_fields2) : us_t =
  (a).rec__dynamic_array__holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq8(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs3).rec__dynamic_array__holder__d)) and
  (bool_eq7(((a).us_split_fields3).rec__dynamic_array__holder__content,
  ((b).us_split_fields3).rec__dynamic_array__holder__content) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic dynamic_array__holder__d__first__bit : int

logic dynamic_array__holder__d__last__bit : int

logic dynamic_array__holder__d__position : int

axiom dynamic_array__holder__d__first__bit_axiom :
  (0 <= dynamic_array__holder__d__first__bit)

axiom dynamic_array__holder__d__last__bit_axiom :
  (dynamic_array__holder__d__first__bit <  dynamic_array__holder__d__last__bit)

axiom dynamic_array__holder__d__position_axiom :
  (0 <= dynamic_array__holder__d__position)

logic dynamic_array__holder__content__first__bit : int

logic dynamic_array__holder__content__last__bit : int

logic dynamic_array__holder__content__position : int

axiom dynamic_array__holder__content__first__bit_axiom :
  (0 <= dynamic_array__holder__content__first__bit)

axiom dynamic_array__holder__content__last__bit_axiom :
  (dynamic_array__holder__content__first__bit <  dynamic_array__holder__content__last__bit)

axiom dynamic_array__holder__content__position_axiom :
  (0 <= dynamic_array__holder__content__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type holder__ref = { holder__content : us_rep1
}

function holder__ref_holder__content__projection(a: holder__ref) : us_rep1 =
  (a).holder__content

logic new_holder : int -> us_rep1

logic new_holder__function_guard : us_rep1, int -> prop

predicate dynamic_invariant1(temp___expr_195: us_rep1,
  temp___is_init_191: bool, temp___skip_constant_192: bool,
  temp___do_toplevel_193: bool, temp___do_typ_inv_194: bool) =
  (let temp___196 =
  ((temp___expr_195).us_split_discrs3).rec__dynamic_array__holder__d
  : natural in ((dynamic_property1(1, to_rep(temp___196),
  first1(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content),
  last2(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content)) and
  ((first1(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content) = 1) and
  (last2(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content) = to_rep(temp___196)))) and
  (forall temp___197:int.
  (((first1(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content) <= temp___197) and
  (temp___197 <= last2(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content))) ->
  ((dynamic_array__rec__f1__pred((to_array(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content)[temp___197])) ->
  (((temp___is_init_191 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1((((to_array(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content)[temp___197])).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  (dynamic_array__rec__f2__pred((to_array(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content)[temp___197])) ->
  (((temp___is_init_191 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1((((to_array(((temp___expr_195).us_split_fields3).rec__dynamic_array__holder__content)[temp___197])).us_split_fields1).rec__dynamic_array__rec__f2)))))))))

axiom new_holder__post_axiom :
  (forall d:int [new_holder(d)]. (dynamic_invariant(d, true, true, true,
  true) -> (let result = new_holder(d) : us_rep1 in
  (new_holder__function_guard(result, d) -> ((c = 0) ->
  (to_rep(((result).us_split_discrs3).rec__dynamic_array__holder__d) = 0))))))

axiom new_holder__post_axiom1 :
  (forall d:int [new_holder(d)]. (dynamic_invariant(d, true, true, true,
  true) -> (let result = new_holder(d) : us_rep1 in
  (new_holder__function_guard(result, d) -> ((not (c = 0)) ->
  (to_rep(((result).us_split_discrs3).rec__dynamic_array__holder__d) = d))))))

axiom new_holder__post_axiom2 :
  (forall d:int [new_holder(d)]. (dynamic_invariant(d, true, true, true,
  true) -> (let result = new_holder(d) : us_rep1 in
  (new_holder__function_guard(result, d) -> dynamic_invariant1(result, true,
  false, true, true)))))

logic increment : us_rep -> int

logic increment__function_guard : int, us_rep -> prop

predicate dynamic_invariant2(temp___expr_177: us_rep,
  temp___is_init_173: bool, temp___skip_constant_174: bool,
  temp___do_toplevel_175: bool, temp___do_typ_inv_176: bool) =
  ((dynamic_array__rec__f1__pred(temp___expr_177) ->
  (((temp___is_init_173 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1(((temp___expr_177).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  (dynamic_array__rec__f2__pred(temp___expr_177) ->
  (((temp___is_init_173 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1(((temp___expr_177).us_split_fields1).rec__dynamic_array__rec__f2)))))

predicate default_initial_assumption(temp___expr_179: us_rep,
  temp___skip_top_level_180: bool) =
  (((temp___expr_179).us_split_discrs1).rec__dynamic_array__rec__b = of_int(1))

axiom increment__post_axiom :
  (forall r:us_rep [increment(r)]. (dynamic_invariant2(r, true, true, true,
  true) -> (let result = increment(r) : int in
  (increment__function_guard(result, r) -> dynamic_invariant(result, true,
  false, true, true)))))

axiom increment__def_axiom :
  (forall r:us_rep [increment(r)]. (dynamic_invariant2(r, true, true, true,
  true) ->
  (increment(r) = (if (((r).us_split_discrs1).rec__dynamic_array__rec__b = true) then (if (to_rep1(((r).us_split_fields1).rec__dynamic_array__rec__f1) <  c) then (to_rep1(((r).us_split_fields1).rec__dynamic_array__rec__f1) + 1) else to_rep1(((r).us_split_fields1).rec__dynamic_array__rec__f1)) else (if (to_rep1(((r).us_split_fields1).rec__dynamic_array__rec__f2) <  c) then (to_rep1(((r).us_split_fields1).rec__dynamic_array__rec__f2) + 1) else to_rep1(((r).us_split_fields1).rec__dynamic_array__rec__f2))))))

type t18b__ref = { t18b__content : us_t
}

function t18b__ref_t18b__content__projection(a: t18b__ref) : us_t =
  (a).t18b__content

type us_split_fields4 = { rec__dynamic_array__holder__content1 : us_t
}

function us_split_fields_rec__dynamic_array__holder__content__4__projection(a: us_split_fields4) : us_t =
  (a).rec__dynamic_array__holder__content1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__5__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___split_fields__5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep2) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = {
  rec__dynamic_array__holder__content =
  of_array(to_array(((a).us_split_fields5).rec__dynamic_array__holder__content1),
  first1(((a).us_split_fields5).rec__dynamic_array__holder__content1),
  last2(((a).us_split_fields5).rec__dynamic_array__holder__content1)) } }

function of_base(r: us_rep1) : us_rep2 = { us_split_discrs4 =
  (r).us_split_discrs3; us_split_fields5 = {
  rec__dynamic_array__holder__content1 =
  of_array(to_array(((r).us_split_fields3).rec__dynamic_array__holder__content),
  first1(((r).us_split_fields3).rec__dynamic_array__holder__content),
  last2(((r).us_split_fields3).rec__dynamic_array__holder__content)) } }

function bool_eq9(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_discrs4).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs4).rec__dynamic_array__holder__d)) and
  (bool_eq7(((a).us_split_fields5).rec__dynamic_array__holder__content1,
  ((b).us_split_fields5).rec__dynamic_array__holder__content1) = true)) then true else false)

predicate in_range4(rec__dynamic_array__holder__d1: int, a: us_rep1) =
  (rec__dynamic_array__holder__d1 = to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic dynamic_array__holder__d__first__bit1 : int

logic dynamic_array__holder__d__last__bit1 : int

logic dynamic_array__holder__d__position1 : int

axiom dynamic_array__holder__d__first__bit_axiom1 :
  (0 <= dynamic_array__holder__d__first__bit1)

axiom dynamic_array__holder__d__last__bit_axiom1 :
  (dynamic_array__holder__d__first__bit1 <  dynamic_array__holder__d__last__bit1)

axiom dynamic_array__holder__d__position_axiom1 :
  (0 <= dynamic_array__holder__d__position1)

logic dynamic_array__holder__content__first__bit1 : int

logic dynamic_array__holder__content__last__bit1 : int

logic dynamic_array__holder__content__position1 : int

axiom dynamic_array__holder__content__first__bit_axiom1 :
  (0 <= dynamic_array__holder__content__first__bit1)

axiom dynamic_array__holder__content__last__bit_axiom1 :
  (dynamic_array__holder__content__first__bit1 <  dynamic_array__holder__content__last__bit1)

axiom dynamic_array__holder__content__position_axiom1 :
  (0 <= dynamic_array__holder__content__position1)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type thS__ref = { thS__content : us_rep2
}

function thS__ref_thS__content__projection(a: thS__ref) : us_rep2 =
  (a).thS__content

logic h__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant3(temp___expr_203: us_rep2,
  temp___is_init_199: bool, temp___skip_constant_200: bool,
  temp___do_toplevel_201: bool, temp___do_typ_inv_202: bool) =
  (((not (temp___skip_constant_200 = true)) -> in_range4(c,
  to_base(temp___expr_203))) and ((dynamic_property1(1, c,
  first1(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1),
  last2(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1)) and
  ((first1(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1) = 1) and
  (last2(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1) = c))) and
  (forall temp___205:int.
  (((first1(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1) <= temp___205) and
  (temp___205 <= last2(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1))) ->
  ((dynamic_array__rec__f1__pred((to_array(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1)[temp___205])) ->
  (((temp___is_init_199 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1((((to_array(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1)[temp___205])).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  (dynamic_array__rec__f2__pred((to_array(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1)[temp___205])) ->
  (((temp___is_init_199 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1((((to_array(((temp___expr_203).us_split_fields5).rec__dynamic_array__holder__content1)[temp___205])).us_split_fields1).rec__dynamic_array__rec__f2)))))))))

predicate default_initial_assumption1(temp___expr_207: us_rep2,
  temp___skip_top_level_208: bool) =
  ((to_rep(((temp___expr_207).us_split_discrs4).rec__dynamic_array__holder__d) = c) and
  (((first1(((temp___expr_207).us_split_fields5).rec__dynamic_array__holder__content1) = 1) and
  (last2(((temp___expr_207).us_split_fields5).rec__dynamic_array__holder__content1) = c)) and
  (forall temp___211:int.
  (((first1(((temp___expr_207).us_split_fields5).rec__dynamic_array__holder__content1) <= temp___211) and
  (temp___211 <= last2(((temp___expr_207).us_split_fields5).rec__dynamic_array__holder__content1))) ->
  ((((to_array(((temp___expr_207).us_split_fields5).rec__dynamic_array__holder__content1)[temp___211])).us_split_discrs1).rec__dynamic_array__rec__b = of_int(1))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic hh : us_rep1

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r : us_rep

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type t20b__ref = { t20b__content : us_t
}

function t20b__ref_t20b__content__projection(a: t20b__ref) : us_t =
  (a).t20b__content

type us_split_fields6 = { rec__dynamic_array__holder__content2 : us_t
}

function us_split_fields_rec__dynamic_array__holder__content__5__projection(a: us_split_fields6) : us_t =
  (a).rec__dynamic_array__holder__content2

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs5 : us_split_discrs2; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__6__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs5

function us_rep___split_fields__6__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base1(a: us_rep3) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs5; us_split_fields3 = {
  rec__dynamic_array__holder__content =
  of_array(to_array(((a).us_split_fields7).rec__dynamic_array__holder__content2),
  first1(((a).us_split_fields7).rec__dynamic_array__holder__content2),
  last2(((a).us_split_fields7).rec__dynamic_array__holder__content2)) } }

function of_base1(r1: us_rep1) : us_rep3 = { us_split_discrs5 =
  (r1).us_split_discrs3; us_split_fields7 = {
  rec__dynamic_array__holder__content2 =
  of_array(to_array(((r1).us_split_fields3).rec__dynamic_array__holder__content),
  first1(((r1).us_split_fields3).rec__dynamic_array__holder__content),
  last2(((r1).us_split_fields3).rec__dynamic_array__holder__content)) } }

function bool_eq10(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep(((a).us_split_discrs5).rec__dynamic_array__holder__d) = to_rep(((b).us_split_discrs5).rec__dynamic_array__holder__d)) and
  (bool_eq7(((a).us_split_fields7).rec__dynamic_array__holder__content2,
  ((b).us_split_fields7).rec__dynamic_array__holder__content2) = true)) then true else false)

predicate in_range5(rec__dynamic_array__holder__d1: int, a: us_rep1) =
  (rec__dynamic_array__holder__d1 = to_rep(((a).us_split_discrs3).rec__dynamic_array__holder__d))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic dynamic_array__holder__d__first__bit2 : int

logic dynamic_array__holder__d__last__bit2 : int

logic dynamic_array__holder__d__position2 : int

axiom dynamic_array__holder__d__first__bit_axiom2 :
  (0 <= dynamic_array__holder__d__first__bit2)

axiom dynamic_array__holder__d__last__bit_axiom2 :
  (dynamic_array__holder__d__first__bit2 <  dynamic_array__holder__d__last__bit2)

axiom dynamic_array__holder__d__position_axiom2 :
  (0 <= dynamic_array__holder__d__position2)

logic dynamic_array__holder__content__first__bit2 : int

logic dynamic_array__holder__content__last__bit2 : int

logic dynamic_array__holder__content__position2 : int

axiom dynamic_array__holder__content__first__bit_axiom2 :
  (0 <= dynamic_array__holder__content__first__bit2)

axiom dynamic_array__holder__content__last__bit_axiom2 :
  (dynamic_array__holder__content__first__bit2 <  dynamic_array__holder__content__last__bit2)

axiom dynamic_array__holder__content__position_axiom2 :
  (0 <= dynamic_array__holder__content__position2)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type t19b__ref = { t19b__content : us_rep3
}

function t19b__ref_t19b__content__projection(a: t19b__ref) : us_rep3 =
  (a).t19b__content

type t23b__ref = { t23b__content : us_t
}

function t23b__ref_t23b__content__projection(a: t23b__ref) : us_t =
  (a).t23b__content

predicate in_range6(rec__dynamic_array__rec__b1: bool, a: us_rep) =
  (rec__dynamic_array__rec__b1 = ((a).us_split_discrs1).rec__dynamic_array__rec__b)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic dynamic_array__rec__b__first__bit1 : int

logic dynamic_array__rec__b__last__bit1 : int

logic dynamic_array__rec__b__position1 : int

axiom dynamic_array__rec__b__first__bit_axiom1 :
  (0 <= dynamic_array__rec__b__first__bit1)

axiom dynamic_array__rec__b__last__bit_axiom1 :
  (dynamic_array__rec__b__first__bit1 <  dynamic_array__rec__b__last__bit1)

axiom dynamic_array__rec__b__position_axiom1 :
  (0 <= dynamic_array__rec__b__position1)

logic dynamic_array__rec__f1__first__bit1 : int

logic dynamic_array__rec__f1__last__bit1 : int

logic dynamic_array__rec__f1__position1 : int

axiom dynamic_array__rec__f1__first__bit_axiom1 :
  (0 <= dynamic_array__rec__f1__first__bit1)

axiom dynamic_array__rec__f1__last__bit_axiom1 :
  (dynamic_array__rec__f1__first__bit1 <  dynamic_array__rec__f1__last__bit1)

axiom dynamic_array__rec__f1__position_axiom1 :
  (0 <= dynamic_array__rec__f1__position1)

logic dynamic_array__rec__f2__first__bit1 : int

logic dynamic_array__rec__f2__last__bit1 : int

logic dynamic_array__rec__f2__position1 : int

axiom dynamic_array__rec__f2__first__bit_axiom1 :
  (0 <= dynamic_array__rec__f2__first__bit1)

axiom dynamic_array__rec__f2__last__bit_axiom1 :
  (dynamic_array__rec__f2__first__bit1 <  dynamic_array__rec__f2__last__bit1)

axiom dynamic_array__rec__f2__position_axiom1 :
  (0 <= dynamic_array__rec__f2__position1)

logic user_eq9 : us_rep, us_rep -> bool

logic dummy9 : us_rep

type t21b__ref = { t21b__content : us_rep
}

function t21b__ref_t21b__content__projection(a: t21b__ref) : us_rep =
  (a).t21b__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy10 : integer

type t25b__ref = { t25b__content : integer
}

function t25b__ref_t25b__content__projection(a: t25b__ref) : integer =
  (a).t25b__content

predicate in_range7(rec__dynamic_array__rec__b1: bool, a: us_rep) =
  (rec__dynamic_array__rec__b1 = ((a).us_split_discrs1).rec__dynamic_array__rec__b)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic dynamic_array__rec__b__first__bit2 : int

logic dynamic_array__rec__b__last__bit2 : int

logic dynamic_array__rec__b__position2 : int

axiom dynamic_array__rec__b__first__bit_axiom2 :
  (0 <= dynamic_array__rec__b__first__bit2)

axiom dynamic_array__rec__b__last__bit_axiom2 :
  (dynamic_array__rec__b__first__bit2 <  dynamic_array__rec__b__last__bit2)

axiom dynamic_array__rec__b__position_axiom2 :
  (0 <= dynamic_array__rec__b__position2)

logic dynamic_array__rec__f2__first__bit2 : int

logic dynamic_array__rec__f2__last__bit2 : int

logic dynamic_array__rec__f2__position2 : int

axiom dynamic_array__rec__f2__first__bit_axiom2 :
  (0 <= dynamic_array__rec__f2__first__bit2)

axiom dynamic_array__rec__f2__last__bit_axiom2 :
  (dynamic_array__rec__f2__first__bit2 <  dynamic_array__rec__f2__last__bit2)

axiom dynamic_array__rec__f2__position_axiom2 :
  (0 <= dynamic_array__rec__f2__position2)

logic dynamic_array__rec__f1__first__bit2 : int

logic dynamic_array__rec__f1__last__bit2 : int

logic dynamic_array__rec__f1__position2 : int

axiom dynamic_array__rec__f1__first__bit_axiom2 :
  (0 <= dynamic_array__rec__f1__first__bit2)

axiom dynamic_array__rec__f1__last__bit_axiom2 :
  (dynamic_array__rec__f1__first__bit2 <  dynamic_array__rec__f1__last__bit2)

axiom dynamic_array__rec__f1__position_axiom2 :
  (0 <= dynamic_array__rec__f1__position2)

logic user_eq11 : us_rep, us_rep -> bool

logic dummy11 : us_rep

type t34b__ref = { t34b__content : us_rep
}

function t34b__ref_t34b__content__projection(a: t34b__ref) : us_rep =
  (a).t34b__content

logic temp_____aggregate_def_221 : us_rep, int, int -> us_t

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant5(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant6(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (0 <= last)) -> dynamic_property(0, last, temp___expr_170))

axiom last__def_axiom : (last = c)

predicate dynamic_invariant7(temp___expr_188: us_t, temp___is_init_184: bool,
  temp___skip_constant_185: bool, temp___do_toplevel_186: bool,
  temp___do_typ_inv_187: bool) = (((not (temp___skip_constant_185 = true)) ->
  dynamic_property1(1, 2147483647, first1(temp___expr_188),
  last2(temp___expr_188))) and
  (forall temp___189:int. (((first1(temp___expr_188) <= temp___189) and
  (temp___189 <= last2(temp___expr_188))) ->
  ((dynamic_array__rec__f1__pred((to_array(temp___expr_188)[temp___189])) ->
  (((temp___is_init_184 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1((((to_array(temp___expr_188)[temp___189])).us_split_fields1).rec__dynamic_array__rec__f1)))) and
  (dynamic_array__rec__f2__pred((to_array(temp___expr_188)[temp___189])) ->
  (((temp___is_init_184 = true) or (0 <= last)) -> dynamic_property(0, last,
  to_rep1((((to_array(temp___expr_188)[temp___189])).us_split_fields1).rec__dynamic_array__rec__f2))))))))

axiom hh__def_axiom : new_holder__function_guard(new_holder(c), c)

axiom hh__def_axiom1 : (hh = new_holder(c))

axiom def_axiom :
  (forall temp___223:us_rep.
  (forall temp___224:int. forall temp___225:int.
  (dynamic_invariant2(temp___223, true, true, true, true) ->
  (dynamic_property1(1, 2147483647, temp___224, temp___225) ->
  (first1(temp_____aggregate_def_221(temp___223, temp___224,
  temp___225)) = temp___224)))))

axiom def_axiom1 :
  (forall temp___223:us_rep.
  (forall temp___224:int. forall temp___225:int.
  (dynamic_invariant2(temp___223, true, true, true, true) ->
  (dynamic_property1(1, 2147483647, temp___224, temp___225) ->
  (last2(temp_____aggregate_def_221(temp___223, temp___224,
  temp___225)) = temp___225)))))

axiom def_axiom2 :
  (forall temp___223:us_rep.
  (forall temp___224:int. forall temp___225:int.
  (dynamic_invariant2(temp___223, true, true, true, true) ->
  (forall temp___226:int. ((to_array(temp_____aggregate_def_221(temp___223,
  temp___224, temp___225))[temp___226]) = temp___223)))))

 (* File "dynamic_array.adb", line 1, characters 0-0 *)
goal defqtvc : (dynamic_invariant(c, true, false, true, true) ->
  ((exists usf:int. (dynamic_invariant(usf, true, true, true, true) and
   (exists usf1:us_rep1.
   (to_rep(((usf1).us_split_discrs3).rec__dynamic_array__holder__d) = usf)))) ->
  (in_range2(c) -> ((1 <= c) -> (1 <= 1)))))
