(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 10001))

predicate in_range1(x: int) = ((0 <= x) and (x <= 10001))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__sum_elem__partitions__vector__capacity :
capacity_range
}

function us_split_discrs_rec__sum_elem__partitions__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__sum_elem__partitions__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__sum_elem__partitions__vector : us_main_type
}

function us_split_fields_rec__sum_elem__partitions__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__sum_elem__partitions__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__sum_elem__partitions__vector__capacity) = to_rep(((b).us_split_discrs1).rec__sum_elem__partitions__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__sum_elem__partitions__vector,
  ((b).us_split_fields1).rec__sum_elem__partitions__vector) = true)) then true else false)

predicate in_range2(rec__sum_elem__partitions__vector__capacity1: int,
  a: us_split_discrs) =
  (rec__sum_elem__partitions__vector__capacity1 = to_rep((a).rec__sum_elem__partitions__vector__capacity))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic sum_elem__partitions__vector__capacity__first__bit : int

logic sum_elem__partitions__vector__capacity__last__bit : int

logic sum_elem__partitions__vector__capacity__position : int

axiom sum_elem__partitions__vector__capacity__first__bit_axiom :
  (0 <= sum_elem__partitions__vector__capacity__first__bit)

axiom sum_elem__partitions__vector__capacity__last__bit_axiom :
  (sum_elem__partitions__vector__capacity__first__bit <  sum_elem__partitions__vector__capacity__last__bit)

axiom sum_elem__partitions__vector__capacity__position_axiom :
  (0 <= sum_elem__partitions__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

function capacity(container: us_rep) : int =
  to_rep(((container).us_split_discrs1).rec__sum_elem__partitions__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

predicate dynamic_invariant(temp___expr_298: int, temp___is_init_294: bool,
  temp___skip_constant_295: bool, temp___do_toplevel_296: bool,
  temp___do_typ_inv_297: bool) = (((temp___is_init_294 = true) or
  (0 <= 10001)) -> in_range1(temp___expr_298))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 5))

predicate in_range3(x: int) = ((0 <= x) and (x <= 5))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

function to_rep1(x: index) : int = indexqtint(x)

logic of_rep1 : int -> index

axiom inversion_axiom1 :
  (forall x:index [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:index [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__sum_elem__interval__first : index;
rec__sum_elem__interval__last : index
}

function us_split_fields_rec__sum_elem__interval__first__projection(a: us_split_fields2) : index =
  (a).rec__sum_elem__interval__first

function us_split_fields_rec__sum_elem__interval__last__projection(a: us_split_fields2) : index =
  (a).rec__sum_elem__interval__last

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_fields3).rec__sum_elem__interval__first) = to_rep1(((b).us_split_fields3).rec__sum_elem__interval__first)) and
  (to_rep1(((a).us_split_fields3).rec__sum_elem__interval__last) = to_rep1(((b).us_split_fields3).rec__sum_elem__interval__last))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic sum_elem__interval__first__first__bit : int

logic sum_elem__interval__first__last__bit : int

logic sum_elem__interval__first__position : int

axiom sum_elem__interval__first__first__bit_axiom :
  (0 <= sum_elem__interval__first__first__bit)

axiom sum_elem__interval__first__last__bit_axiom :
  (sum_elem__interval__first__first__bit <  sum_elem__interval__first__last__bit)

axiom sum_elem__interval__first__position_axiom :
  (0 <= sum_elem__interval__first__position)

logic sum_elem__interval__last__first__bit : int

logic sum_elem__interval__last__last__bit : int

logic sum_elem__interval__last__position : int

axiom sum_elem__interval__last__first__bit_axiom :
  (0 <= sum_elem__interval__last__first__bit)

axiom sum_elem__interval__last__last__bit_axiom :
  (sum_elem__interval__last__first__bit <  sum_elem__interval__last__last__bit)

axiom sum_elem__interval__last__position_axiom :
  (0 <= sum_elem__interval__last__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type interval__ref = { interval__content : us_rep1
}

function interval__ref_interval__content__projection(a: interval__ref) : us_rep1 =
  (a).interval__content

type element_type__ref = { element_type__content : us_rep1
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : us_rep1 =
  (a).element_type__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

function last(container: us_rep2) : int = ((- 1) + length1(container))

logic last__function_guard : int, us_rep2 -> prop

logic model : us_rep -> us_rep2

logic model__function_guard : us_rep2, us_rep -> prop

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((- 1) <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 10001))

predicate in_range4(x: int) = (((- 1) <= x) and (x <= 10001))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_284: int, temp___is_init_280: bool,
  temp___skip_constant_281: bool, temp___do_toplevel_282: bool,
  temp___do_typ_inv_283: bool) = (((temp___is_init_280 = true) or
  ((- 1) <= 10001)) -> in_range4(temp___expr_284))

logic first_index__function_guard : int, us_rep -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (0 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 10000))

predicate in_range5(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : index_type, index_type -> bool

logic dummy6 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant2(temp___expr_268: int, temp___is_init_264: bool,
  temp___skip_constant_265: bool, temp___do_toplevel_266: bool,
  temp___do_typ_inv_267: bool) = (((temp___is_init_264 = true) or
  (0 <= 10000)) -> in_range5(temp___expr_268))

type element_type__ref1 = { element_type__content1 : us_rep1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : us_rep1 =
  (a).element_type__content1

logic get : us_rep2, int -> us_rep1

logic get__function_guard : us_rep1, us_rep2, int -> prop

function element(container: us_rep, index1: int) : us_rep1 =
  get(model(container), index1)

logic element__function_guard : us_rep1, us_rep, int -> prop

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic sum_elem__partitions__vector__capacity__first__bit1 : int

logic sum_elem__partitions__vector__capacity__last__bit1 : int

logic sum_elem__partitions__vector__capacity__position1 : int

axiom sum_elem__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= sum_elem__partitions__vector__capacity__first__bit1)

axiom sum_elem__partitions__vector__capacity__last__bit_axiom1 :
  (sum_elem__partitions__vector__capacity__first__bit1 <  sum_elem__partitions__vector__capacity__last__bit1)

axiom sum_elem__partitions__vector__capacity__position_axiom1 :
  (0 <= sum_elem__partitions__vector__capacity__position1)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type partition__ref = { partition__content : us_rep
}

function partition__ref_partition__content__projection(a: partition__ref) : us_rep =
  (a).partition__content

logic p : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type partition_index

logic partition_indexqtint : partition_index -> int

axiom partition_indexqtaxiom :
  (forall i:partition_index. (0 <= partition_indexqtint(i)))

axiom partition_indexqtaxiom1 :
  (forall i:partition_index. (partition_indexqtint(i) <= 10000))

predicate in_range6(x1: int) = ((0 <= x1) and (x1 <= 10000))

function bool_eq8(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : partition_index, partition_index -> bool

logic dummy8 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref_partition_index__content__projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

predicate dynamic_invariant3(temp___expr_261: int, temp___is_init_257: bool,
  temp___skip_constant_258: bool, temp___do_toplevel_259: bool,
  temp___do_typ_inv_260: bool) = (((temp___is_init_257 = true) or
  (0 <= 10000)) -> in_range6(temp___expr_261))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq7(a, b)]. (user_eq7(a,
  b) = oeq(a, b)))

predicate dynamic_invariant4(temp___expr_245: int, temp___is_init_241: bool,
  temp___skip_constant_242: bool, temp___do_toplevel_243: bool,
  temp___do_typ_inv_244: bool) = (((temp___is_init_241 = true) or
  (0 <= 5)) -> in_range3(temp___expr_245))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range7(x1: int) = ((0 <= x1) and (x1 <= 2147483647))

function bool_eq9(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : count_type, count_type -> bool

logic dummy9 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant5(temp___expr_291: int, temp___is_init_287: bool,
  temp___skip_constant_288: bool, temp___do_toplevel_289: bool,
  temp___do_typ_inv_290: bool) = (((temp___is_init_287 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_291))

logic bool_eq10 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x1:int. (forall y:int. ((bool_eq10(x1, y) = true) -> (x1 = y))))

axiom bool_eq_axiom1 :
  (forall x1:int. (forall y:int. ((x1 = y) -> (bool_eq10(x1, y) = true))))

axiom bool_ne_axiom :
  (forall x1:int.
  (forall y:int. ((bool_ne(x1, y) = true) -> (not (x1 = y)))))

axiom bool_ne_axiom1 :
  (forall x1:int.
  (forall y:int. ((not (x1 = y)) -> (bool_ne(x1, y) = true))))

axiom bool_lt_axiom :
  (forall x1:int. (forall y:int. ((bool_lt(x1, y) = true) -> (x1 <  y))))

axiom bool_lt_axiom1 :
  (forall x1:int. (forall y:int. ((x1 <  y) -> (bool_lt(x1, y) = true))))

axiom bool_int__le_axiom :
  (forall x1:int. (forall y:int. ((bool_le(x1, y) = true) -> (x1 <= y))))

axiom bool_int__le_axiom1 :
  (forall x1:int. (forall y:int. ((x1 <= y) -> (bool_le(x1, y) = true))))

axiom bool_gt_axiom :
  (forall x1:int. (forall y:int. ((bool_gt(x1, y) = true) -> (y <  x1))))

axiom bool_gt_axiom1 :
  (forall x1:int. (forall y:int. ((y <  x1) -> (bool_gt(x1, y) = true))))

axiom bool_ge_axiom :
  (forall x1:int. (forall y:int. ((bool_ge(x1, y) = true) -> (y <= x1))))

axiom bool_ge_axiom1 :
  (forall x1:int. (forall y:int. ((y <= x1) -> (bool_ge(x1, y) = true))))

function length2(x1: int, y: int) : int =
  (if (x1 <= y) then ((y - x1) + 1) else 0)

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq10(length1(left), length1(right)),
  (if (forall n:int. (((0 <= n) and (n <= last(left))) -> (bool_eq4(get(left,
      n), get(right, n)) = true))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_339: us_rep2,
  temp___skip_top_level_340: bool) =
  ((not (temp___skip_top_level_340 = true)) ->
  (length1(temp___expr_339) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. ((- 1) <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 10000))

predicate in_range8(x1: int) = (((- 1) <= x1) and (x1 <= 10000))

function bool_eq11(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : extended_index1, extended_index1 -> bool

logic dummy10 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant6(temp___expr_331: int, temp___is_init_327: bool,
  temp___skip_constant_328: bool, temp___do_toplevel_329: bool,
  temp___do_typ_inv_330: bool) = (((temp___is_init_327 = true) or
  ((- 1) <= 10000)) -> in_range8(temp___expr_331))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length1(container)].
  (((- 1) + length1(container)) <= 10000))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length1(container)].
  dynamic_invariant5(length1(container), true, false, true, true))

 (* File "sum_elem.ads", line 23, characters 0-0 *)
goal defqtvc : (dynamic_invariant3(x, true, false, true, true) -> (let o = p
  : us_rep in (let o1 = length(o) : int in ((dynamic_invariant(o1, true,
  false, true, true) and (o1 <= capacity(o))) -> (in_range6(o1) ->
  ((andb((if (0 <= x) then true else false),
  (if (x <= (o1 - 1)) then true else false)) = true) ->
  (forall usf:int. (let o2 = p : us_rep in (let o3 = last_index(o2) : int in
  ((dynamic_invariant1(o3, true, false, true, true) and
  (o3 = last(model(o2)))) -> ((dynamic_invariant2(0, true, false, true,
  true) and (0 = 0)) -> ((andb((if (0 <= usf) then true else false),
  (if (usf <= o3) then true else false)) = true) -> (in_range5(usf) ->
  (usf <= last_index(p)))))))))))))))
