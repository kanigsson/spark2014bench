(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type node_id

logic node_idqtint : node_id -> int

axiom node_idqtaxiom : (forall i:node_id. (1 <= node_idqtint(i)))

axiom node_idqtaxiom1 : (forall i:node_id. (node_idqtint(i) <= 1000))

predicate in_range1(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : node_id, node_id -> bool

logic dummy : node_id

type node_id__ref = { node_id__content : node_id
}

function node_id__ref_node_id__content__projection(a: node_id__ref) : node_id =
  (a).node_id__content

function to_rep(x: node_id) : int = node_idqtint(x)

logic of_rep : int -> node_id

axiom inversion_axiom :
  (forall x:node_id [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:node_id [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type decision_kind

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : decision_kind, decision_kind -> bool

logic dummy1 : decision_kind

type decision_kind__ref = { decision_kind__content : decision_kind
}

function decision_kind__ref_decision_kind__content__projection(a: decision_kind__ref) : decision_kind =
  (a).decision_kind__content

logic to_rep1 : decision_kind -> int

logic of_rep1 : int -> decision_kind

axiom inversion_axiom1 :
  (forall x:decision_kind [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:decision_kind [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__var__decision__kind : decision_kind
}

function us_split_discrs_rec__var__decision__kind__projection(a: us_split_discrs) : decision_kind =
  (a).rec__var__decision__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__var__decision__id : node_id;
rec__var__decision__operand : node_id; rec__var__decision__left : node_id;
rec__var__decision__right : node_id
}

function us_split_fields_rec__var__decision__id__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__id

function us_split_fields_rec__var__decision__operand__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__operand

function us_split_fields_rec__var__decision__left__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__left

function us_split_fields_rec__var__decision__right__projection(a: us_split_fields) : node_id =
  (a).rec__var__decision__right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate var__decision__operand__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 1)

predicate var__decision__left__pred(a: us_rep) =
  ((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 2) or
  (to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 3))

predicate var__decision__right__pred(a: us_rep) =
  ((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 2) or
  (to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = 3))

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__var__decision__kind) = to_rep1(((b).us_split_discrs1).rec__var__decision__kind)) and
  (((to_rep(((a).us_split_fields1).rec__var__decision__id) = to_rep(((b).us_split_fields1).rec__var__decision__id)) and
  (var__decision__operand__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__var__decision__operand) = to_rep(((b).us_split_fields1).rec__var__decision__operand)))) and
  ((var__decision__left__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__var__decision__left) = to_rep(((b).us_split_fields1).rec__var__decision__left))) and
  (var__decision__right__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__var__decision__right) = to_rep(((b).us_split_fields1).rec__var__decision__right)))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic var__decision__kind__first__bit : int

logic var__decision__kind__last__bit : int

logic var__decision__kind__position : int

axiom var__decision__kind__first__bit_axiom :
  (0 <= var__decision__kind__first__bit)

axiom var__decision__kind__last__bit_axiom :
  (var__decision__kind__first__bit <  var__decision__kind__last__bit)

axiom var__decision__kind__position_axiom :
  (0 <= var__decision__kind__position)

logic var__decision__id__first__bit : int

logic var__decision__id__last__bit : int

logic var__decision__id__position : int

axiom var__decision__id__first__bit_axiom :
  (0 <= var__decision__id__first__bit)

axiom var__decision__id__last__bit_axiom :
  (var__decision__id__first__bit <  var__decision__id__last__bit)

axiom var__decision__id__position_axiom : (0 <= var__decision__id__position)

logic var__decision__operand__first__bit : int

logic var__decision__operand__last__bit : int

logic var__decision__operand__position : int

axiom var__decision__operand__first__bit_axiom :
  (0 <= var__decision__operand__first__bit)

axiom var__decision__operand__last__bit_axiom :
  (var__decision__operand__first__bit <  var__decision__operand__last__bit)

axiom var__decision__operand__position_axiom :
  (0 <= var__decision__operand__position)

logic var__decision__left__first__bit : int

logic var__decision__left__last__bit : int

logic var__decision__left__position : int

axiom var__decision__left__first__bit_axiom :
  (0 <= var__decision__left__first__bit)

axiom var__decision__left__last__bit_axiom :
  (var__decision__left__first__bit <  var__decision__left__last__bit)

axiom var__decision__left__position_axiom :
  (0 <= var__decision__left__position)

logic var__decision__right__first__bit : int

logic var__decision__right__last__bit : int

logic var__decision__right__position : int

axiom var__decision__right__first__bit_axiom :
  (0 <= var__decision__right__first__bit)

axiom var__decision__right__last__bit_axiom :
  (var__decision__right__first__bit <  var__decision__right__last__bit)

axiom var__decision__right__position_axiom :
  (0 <= var__decision__right__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type decision__ref = { decision__content : us_rep
}

function decision__ref_decision__content__projection(a: decision__ref) : us_rep =
  (a).decision__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

type tristate

predicate in_range3(x: int) = ((0 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tristate, tristate -> bool

logic dummy3 : tristate

type tristate__ref = { tristate__content : tristate
}

function tristate__ref_tristate__content__projection(a: tristate__ref) : tristate =
  (a).tristate__content

logic to_rep2 : tristate -> int

logic of_rep2 : int -> tristate

axiom inversion_axiom2 :
  (forall x:tristate [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:tristate [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,tristate) farray
}

logic slide1 : (int,tristate) farray, int, int -> (int,tristate) farray

axiom slide_eq1 :
  (forall a:(int,tristate) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,tristate) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,tristate) farray, a__first: int, a__last: int,
  b: (int,tristate) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,tristate) farray. forall b:(int,tristate) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic root_id : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic decision_eval : int, (int,us_rep) farray, (int,tristate) farray -> int

logic decision_eval__function_guard : int, int, (int,us_rep) farray,
  (int,tristate) farray -> prop

predicate dynamic_invariant(temp___expr_191: int, temp___is_init_187: bool,
  temp___skip_constant_188: bool, temp___do_toplevel_189: bool,
  temp___do_typ_inv_190: bool) = (((temp___is_init_187 = true) or
  (0 <= 2)) -> in_range3(temp___expr_191))

axiom decision_eval__post_axiom :
  (forall root_id1:int.
  (forall var_test__decision_table:(int,us_rep) farray.
  (forall var_test__condition_values:(int,tristate) farray
  [decision_eval(root_id1, var_test__decision_table,
  var_test__condition_values)]. in_range3(decision_eval(root_id1,
  var_test__decision_table, var_test__condition_values)))))

logic d__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate default_initial_assumption(temp___expr_180: us_rep,
  temp___skip_top_level_181: bool) =
  (to_rep1(((temp___expr_180).us_split_discrs1).rec__var__decision__kind) = 0)

logic attr__ATTRIBUTE_ADDRESS4 : int

logic t_not : int -> int

logic t_not__function_guard : int, int -> prop

axiom t_not__post_axiom :
  (forall op:int [t_not(op)]. (dynamic_invariant(op, true, true, true,
  true) -> (let result = t_not(op) : int in (t_not__function_guard(result,
  op) -> dynamic_invariant(result, true, false, true, true)))))

axiom t_not__def_axiom :
  (forall op:int [t_not(op)]. (dynamic_invariant(op, true, true, true,
  true) -> (t_not(op) = (if (op = 0) then 1 else 0))))

logic t_or : int, int -> int

logic t_or__function_guard : int, int, int -> prop

axiom t_or__post_axiom :
  (forall left:int. forall right:int [t_or(left, right)].
  ((dynamic_invariant(left, true, true, true, true) and
  dynamic_invariant(right, true, true, true, true)) -> (let result =
  t_or(left, right) : int in (t_or__function_guard(result, left, right) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom t_or__def_axiom :
  (forall left:int. forall right:int [t_or(left, right)].
  ((dynamic_invariant(left, true, true, true, true) and
  dynamic_invariant(right, true, true, true, true)) -> (t_or(left,
  right) = (if (left = 0) then 0 else (if (left = 1) then right else 2)))))

logic t_and : int, int -> int

logic t_and__function_guard : int, int, int -> prop

axiom t_and__post_axiom :
  (forall left:int. forall right:int [t_and(left, right)].
  ((dynamic_invariant(left, true, true, true, true) and
  dynamic_invariant(right, true, true, true, true)) -> (let result =
  t_and(left, right) : int in (t_and__function_guard(result, left, right) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom t_and__def_axiom :
  (forall left:int. forall right:int [t_and(left, right)].
  ((dynamic_invariant(left, true, true, true, true) and
  dynamic_invariant(right, true, true, true, true)) -> (t_and(left,
  right) = (if (left = 1) then 1 else (if (left = 0) then right else 2)))))

predicate dynamic_invariant1(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  (1 <= 1000)) -> in_range1(temp___expr_164))

predicate dynamic_invariant2(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 3)) -> in_range2(temp___expr_171))

 (* File "var_test.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall decision_table:(int,us_rep) farray.
  forall condition_values:(int,tristate) farray. (dynamic_invariant1(root_id,
  true, false, true, true) ->
  ((forall x:int. (((1 <= x) and (x <= 1000)) ->
   (not (to_rep2((condition_values[x])) = 2)))) ->
  (forall var_test__decision_eval__result:int.
  ((let var_test__decision_eval__d__assume = (decision_table[root_id])
  : us_rep in
  (exists d__split_fields:us_split_fields.
  ((d__split_fields = (var_test__decision_eval__d__assume).us_split_fields1) and
  (exists d__split_discrs:decision_kind. (({ rec__var__decision__kind =
  d__split_discrs
  } = (var_test__decision_eval__d__assume).us_split_discrs1) and
  ((d__attr__constrained = false) and
  (exists o:int. ((to_rep1(d__split_discrs) = o) and
  (exists kind:int. ((kind = o) and (dynamic_invariant2(kind, true, false,
  true, true) and
  (exists spark__branch:bool.
  ((spark__branch = (if (kind = 0) then true else false)) and
  (if (spark__branch = true) then (exists o1:int.
                                  ((to_rep((d__split_fields).rec__var__decision__id) = o1) and
                                  (exists o2:int.
                                  ((to_rep2((condition_values[o1])) = o2) and
                                  (var_test__decision_eval__result = o2))))) else 
  (exists spark__branch1:bool.
  ((spark__branch1 = (if (kind = 1) then true else false)) and
  (if (spark__branch1 = true) then (exists o1:int.
                                   ((to_rep((d__split_fields).rec__var__decision__operand) = o1) and
                                   (let o2 = decision_eval(o1,
                                   decision_table, condition_values) : int in
                                   ((decision_eval__function_guard(o2, o1,
                                   decision_table, condition_values) and
                                   (dynamic_invariant(o2, true, false, true,
                                   true) and (not (o2 = 2)))) and (let o3 =
                                   t_not(o2) : int in
                                   ((t_not__function_guard(o3, o2) and
                                   (dynamic_invariant(o3, true, false, true,
                                   true) and
                                   (o3 = (if (o2 = 0) then 1 else 0)))) and
                                   (var_test__decision_eval__result = o3))))))) else 
  (exists spark__branch2:bool.
  ((spark__branch2 = (if (kind = 2) then true else false)) and
  (if (spark__branch2 = true) then (exists o1:int.
                                   ((to_rep((d__split_fields).rec__var__decision__right) = o1) and
                                   (let o2 = decision_eval(o1,
                                   decision_table, condition_values) : int in
                                   ((decision_eval__function_guard(o2, o1,
                                   decision_table, condition_values) and
                                   (dynamic_invariant(o2, true, false, true,
                                   true) and (not (o2 = 2)))) and
                                   (exists o3:int.
                                   ((to_rep((d__split_fields).rec__var__decision__left) = o3) and
                                   (let o4 = decision_eval(o3,
                                   decision_table, condition_values) : int in
                                   ((decision_eval__function_guard(o4, o3,
                                   decision_table, condition_values) and
                                   (dynamic_invariant(o4, true, false, true,
                                   true) and (not (o4 = 2)))) and (let o5 =
                                   t_or(o4, o2) : int in
                                   ((t_or__function_guard(o5, o4, o2) and
                                   (dynamic_invariant(o5, true, false, true,
                                   true) and
                                   (o5 = (if (o4 = 0) then 0 else (if (o4 = 1) then o2 else 2))))) and
                                   (var_test__decision_eval__result = o5))))))))))) else 
  (exists o1:int.
  ((to_rep((d__split_fields).rec__var__decision__right) = o1) and (let o2 =
  decision_eval(o1, decision_table, condition_values) : int in
  ((decision_eval__function_guard(o2, o1, decision_table,
  condition_values) and (dynamic_invariant(o2, true, false, true, true) and
  (not (o2 = 2)))) and
  (exists o3:int.
  ((to_rep((d__split_fields).rec__var__decision__left) = o3) and (let o4 =
  decision_eval(o3, decision_table, condition_values) : int in
  ((decision_eval__function_guard(o4, o3, decision_table,
  condition_values) and (dynamic_invariant(o4, true, false, true, true) and
  (not (o4 = 2)))) and (let o5 = t_and(o4, o2) : int in
  ((t_and__function_guard(o5, o4, o2) and (dynamic_invariant(o5, true, false,
  true, true) and
  (o5 = (if (o4 = 1) then 1 else (if (o4 = 0) then o2 else 2))))) and
  (var_test__decision_eval__result = o5))))))))))))))))))))))))))))))) ->
  (not (var_test__decision_eval__result = 2)))))))
