(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type elementtype

logic elementtypeqtint : elementtype -> int

axiom elementtypeqtaxiom : (forall i:elementtype. (0 <= elementtypeqtint(i)))

axiom elementtypeqtaxiom1 :
  (forall i:elementtype. (elementtypeqtint(i) <= 1000))

predicate in_range1(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : elementtype, elementtype -> bool

logic dummy : elementtype

type elementtype__ref = { elementtype__content : elementtype
}

function elementtype__ref_elementtype__content__projection(a: elementtype__ref) : elementtype =
  (a).elementtype__content

function to_rep(x: elementtype) : int = elementtypeqtint(x)

logic of_rep : int -> elementtype

axiom inversion_axiom :
  (forall x:elementtype [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:elementtype [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,elementtype) farray
}

logic slide : (int,elementtype) farray, int, int -> (int,elementtype) farray

axiom slide_eq :
  (forall a:(int,elementtype) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,elementtype) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,elementtype) farray, a__first: int, a__last: int,
  b: (int,elementtype) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,elementtype) farray. forall b:(int,elementtype) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic l : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic u : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type indextype

logic indextypeqtint : indextype -> int

axiom indextypeqtaxiom : (forall i:indextype. (1 <= indextypeqtint(i)))

axiom indextypeqtaxiom1 : (forall i:indextype. (indextypeqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : indextype, indextype -> bool

logic dummy1 : indextype

type indextype__ref = { indextype__content : indextype
}

function indextype__ref_indextype__content__projection(a: indextype__ref) : indextype =
  (a).indextype__content

predicate dynamic_invariant(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (1 <= 100)) -> in_range2(temp___expr_166))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type t1b__ref = { t1b__content : integer
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : integer =
  (a).t1b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

predicate dynamic_invariant2(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 1000)) -> in_range1(temp___expr_159))

logic rliteral : elementtype

axiom rliteral_axiom : (elementtypeqtint(rliteral) = 0)

 (* File "loop_entry.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall a:(int,elementtype) farray.
  (forall a1:(int,elementtype) farray. ((a1 = a) -> (dynamic_invariant(l,
  true, false, true, true) -> (dynamic_invariant(u, true, false, true,
  true) ->
  (forall a2:(int,elementtype) farray. ((let temp___182 = l : int in
  (let temp___183 = u : int in
  (exists i:int. ((i = temp___182) and
  (if (andb((if (temp___182 <= i) then true else false),
  (if (i <= temp___183) then true else false)) = true) then (exists temp___loop_entry_188:(int,elementtype) farray.
                                                            ((temp___loop_entry_188 = a) and
                                                            (exists a3:(int,elementtype) farray.
                                                            ((a3 = (a[i <- rliteral])) and
                                                            (exists i1:int.
                                                            (((forall n:int.
                                                              (((l <= n) and
                                                              (n <= i1)) ->
                                                              (to_rep((a2[n])) = 0))) and
                                                            (forall n:int.
                                                            (((1 <= n) and
                                                            (n <= 100)) ->
                                                            (((n <  l) or
                                                            (i1 <  n)) ->
                                                            (to_rep((a2[n])) = to_rep((temp___loop_entry_188[n]))))))) and
                                                            ((andb((if (dynamic_property(l,
                                                            u, i1) and
                                                            (forall temp___186:int.
                                                            (((1 <= temp___186) and
                                                            (temp___186 <= 100)) ->
                                                            (((temp___183 <  temp___186) or
                                                            ((temp___186 <  temp___182) or
                                                            (i1 <  temp___186))) ->
                                                            ((a2[temp___186]) = (a[temp___186])))))) then true else false),
                                                            (if ((l <= i1) and
                                                            (i1 <= u)) then true else false)) = true) and
                                                            (i1 = temp___183)))))))) else (a2 = a)))))) ->
  (forall usf:int. ((andb((if (l <= usf) then true else false),
  (if (usf <= u) then true else false)) = true) -> (1 <= usf))))))))))
