(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep(x1: integer) : int = integerqtint(x1)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x1:integer [to_rep(x1)]. (of_rep(to_rep(x1)) = x1))

axiom range_axiom : (forall x1:integer [to_rep(x1)]. in_range1(to_rep(x1)))

axiom coerce_axiom :
  (forall x1:int [to_rep(of_rep(x1))]. (in_range1(x1) ->
  (to_rep(of_rep(x1)) = x1)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep((a[temp___idx_156])) = to_rep((b[((b__first - a__first) + temp___idx_156)]))))))))

type tone_twentyB

logic tone_twentyBqtint : tone_twentyB -> int

axiom tone_twentyBqtaxiom :
  (forall i:tone_twentyB. ((- 128) <= tone_twentyBqtint(i)))

axiom tone_twentyBqtaxiom1 :
  (forall i:tone_twentyB. (tone_twentyBqtint(i) <= 127))

predicate in_range2(x1: int) = (((- 128) <= x1) and (x1 <= 127))

function bool_eq3(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tone_twentyB, tone_twentyB -> bool

logic dummy1 : tone_twentyB

type tone_twentyB__ref = { tone_twentyB__content : tone_twentyB
}

function tone_twentyB__ref_tone_twentyB__content__projection(a: tone_twentyB__ref) : tone_twentyB =
  (a).tone_twentyB__content

logic z__first : tone_twentyB

logic z__last : tone_twentyB

logic attr__ATTRIBUTE_ADDRESS1 : int

function to_rep1(x1: tone_twentyB) : int = tone_twentyBqtint(x1)

logic of_rep1 : int -> tone_twentyB

axiom inversion_axiom1 :
  (forall x1:tone_twentyB [to_rep1(x1)]. (of_rep1(to_rep1(x1)) = x1))

axiom range_axiom1 :
  (forall x1:tone_twentyB [to_rep1(x1)]. in_range2(to_rep1(x1)))

axiom coerce_axiom1 :
  (forall x1:int [to_rep1(of_rep1(x1))]. (in_range2(x1) ->
  (to_rep1(of_rep1(x1)) = x1)))

type one_twenty

logic one_twentyqtint : one_twenty -> int

axiom one_twentyqtaxiom : (forall i:one_twenty. (1 <= one_twentyqtint(i)))

axiom one_twentyqtaxiom1 : (forall i:one_twenty. (one_twentyqtint(i) <= 20))

predicate in_range3(x1: int) = ((1 <= x1) and (x1 <= 20))

function bool_eq4(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : one_twenty, one_twenty -> bool

logic dummy2 : one_twenty

type one_twenty__ref = { one_twenty__content : one_twenty
}

function one_twenty__ref_one_twenty__content__projection(a: one_twenty__ref) : one_twenty =
  (a).one_twenty__content

predicate dynamic_invariant(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (1 <= 20)) -> in_range3(temp___expr_161))

type one_ten

logic one_tenqtint : one_ten -> int

axiom one_tenqtaxiom : (forall i:one_ten. (1 <= one_tenqtint(i)))

axiom one_tenqtaxiom1 : (forall i:one_ten. (one_tenqtint(i) <= 10))

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 10))

function bool_eq5(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : one_ten, one_ten -> bool

logic dummy3 : one_ten

type one_ten__ref = { one_ten__content : one_ten
}

function one_ten__ref_one_ten__content__projection(a: one_ten__ref) : one_ten =
  (a).one_ten__content

type t

logic first : t -> tone_twentyB

logic last : t -> tone_twentyB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x1: us_t, y: us_t) : bool = bool_eq2((x1).elts,
  to_rep1(first((x1).rt)), to_rep1(last((x1).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type smaller__ref = { smaller__content : us_t
}

function smaller__ref_smaller__content__projection(a: smaller__ref) : us_t =
  (a).smaller__content

type smaller_local__ref = { smaller_local__content : us_t
}

function smaller_local__ref_smaller_local__content__projection(a: smaller_local__ref) : us_t =
  (a).smaller_local__content

type t7b__ref = { t7b__content : us_t
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_t =
  (a).t7b__content

predicate dynamic_invariant1(temp___expr_255: us_t, temp___is_init_251: bool,
  temp___skip_constant_252: bool, temp___do_toplevel_253: bool,
  temp___do_typ_inv_254: bool) = ((not (temp___skip_constant_252 = true)) ->
  (dynamic_property((x - 1), (x + 1), first1(temp___expr_255),
  last1(temp___expr_255)) and ((first1(temp___expr_255) = (x - 1)) and
  (last1(temp___expr_255) = (x + 1)))))

predicate default_initial_assumption(temp___expr_257: us_t,
  temp___skip_top_level_258: bool) = ((first1(temp___expr_257) = (x - 1)) and
  (last1(temp___expr_257) = (x + 1)))

logic temp_____aggregate_def_274 : int, int, int -> us_t

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type tsmaller_localB__ref = { tsmaller_localB__content : us_t
}

function tsmaller_localB__ref_tsmaller_localB__content__projection(a: tsmaller_localB__ref) : us_t =
  (a).tsmaller_localB__content

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___276:int. forall temp___277:int. forall temp___278:int.
  (dynamic_invariant2(temp___276, true, true, true, true) ->
  (dynamic_property(1, 10, temp___277, temp___278) ->
  (first1(temp_____aggregate_def_274(temp___276, temp___277,
  temp___278)) = temp___277))))

axiom def_axiom1 :
  (forall temp___276:int. forall temp___277:int. forall temp___278:int.
  (dynamic_invariant2(temp___276, true, true, true, true) ->
  (dynamic_property(1, 10, temp___277, temp___278) ->
  (last1(temp_____aggregate_def_274(temp___276, temp___277,
  temp___278)) = temp___278))))

axiom def_axiom2 :
  (forall temp___276:int. forall temp___277:int. forall temp___278:int.
  (dynamic_invariant2(temp___276, true, true, true, true) ->
  (forall temp___279:int. ((to_array(temp_____aggregate_def_274(temp___276,
  temp___277, temp___278))[temp___279]) = rliteral))))

predicate dynamic_invariant3(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  (1 <= 10)) -> in_range4(temp___expr_168))

 (* File "subar.ads", line 27, characters 0-0 *)
goal defqtvc :
  (forall z:(int,integer) farray. (dynamic_invariant(x, true, false, true,
  true) -> (((1 <  x) and (x <  10)) ->
  (default_initial_assumption(of_array(z, to_rep1(z__first),
  to_rep1(z__last)), false) -> ((dynamic_property((x - 1), (x + 1),
  to_rep1(z__first), to_rep1(z__last)) and ((to_rep1(z__first) = (x - 1)) and
  (to_rep1(z__last) = (x + 1)))) -> (let temp___280 =
  temp_____aggregate_def_274(0, (x - 1), (x + 1)) : us_t in
  ((first1(temp___280) = (x - 1)) -> ((last1(temp___280) = (x + 1)) ->
  (((first1(temp___280) = (x - 1)) and (last1(temp___280) = (x + 1))) ->
  (let temp___282 = of_array(to_array(temp___280), first1(temp___280),
  last1(temp___280)) : us_t in
  ((if (first1(temp___282) <= last1(temp___282)) then ((to_rep1(z__first) <= to_rep1(z__last)) and
  ((last1(temp___282) - first1(temp___282)) = (to_rep1(z__last) - to_rep1(z__first)))) else (to_rep1(z__last) <  to_rep1(z__first))) ->
  (forall z1:(int,integer) farray. ((z1 = to_array(temp___282)) ->
  (to_rep1(z__first) <= x))))))))))))))
