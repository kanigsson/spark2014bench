(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type value

logic valueqtint : value -> int

axiom valueqtaxiom : (forall i:value. ((- 2147483648) <= valueqtint(i)))

axiom valueqtaxiom1 : (forall i:value. (valueqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : value, value -> bool

logic dummy5 : value

type value__ref = { value__content : value
}

function value__ref_value__content__projection(a: value__ref) : value =
  (a).value__content

function to_rep3(x: value) : int = valueqtint(x)

logic of_rep3 : int -> value

axiom inversion_axiom3 :
  (forall x:value [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:value [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref1 = { map__content1 : (int,value) farray
}

logic slide1 : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq1 :
  (forall a:(int,value) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,value) farray, a__first: int, a__last: int,
  b: (int,value) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep3((a[temp___idx_154])) = to_rep3((b[((b__first - a__first) + temp___idx_154)]))))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t1 = { elts1 : (int,value) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,value) farray = (a).elts1

function of_array1(a: (int,value) farray, f: int, l: int) : us_t1 = { elts1 =
  a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep2(first2((a).rt1))

function last3(a: us_t1) : int = to_rep2(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq9(x: us_t1, y: us_t1) : bool = bool_eq8((x).elts1,
  to_rep2(first2((x).rt1)), to_rep2(last2((x).rt1)), (y).elts1,
  to_rep2(first2((y).rt1)), to_rep2(last2((y).rt1)))

logic user_eq6 : us_t1, us_t1 -> bool

logic dummy6 : us_t1

type values__ref = { values__content : us_t1
}

function values__ref_values__content__projection(a: values__ref) : us_t1 =
  (a).values__content

type t4s__ref = { t4s__content : us_t1
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : us_t1 =
  (a).t4s__content

type us_split_discrs = { rec__simple_unc_arrays__table__last : natural
}

function us_split_discrs_rec__simple_unc_arrays__table__last__projection(a: us_split_discrs) : natural =
  (a).rec__simple_unc_arrays__table__last

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__simple_unc_arrays__table__v : us_t1
}

function us_split_fields_rec__simple_unc_arrays__table__v__projection(a: us_split_fields) : us_t1 =
  (a).rec__simple_unc_arrays__table__v

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) = to_rep(((b).us_split_discrs1).rec__simple_unc_arrays__table__last)) and
  (bool_eq9(((a).us_split_fields1).rec__simple_unc_arrays__table__v,
  ((b).us_split_fields1).rec__simple_unc_arrays__table__v) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic simple_unc_arrays__table__last__first__bit : int

logic simple_unc_arrays__table__last__last__bit : int

logic simple_unc_arrays__table__last__position : int

axiom simple_unc_arrays__table__last__first__bit_axiom :
  (0 <= simple_unc_arrays__table__last__first__bit)

axiom simple_unc_arrays__table__last__last__bit_axiom :
  (simple_unc_arrays__table__last__first__bit <  simple_unc_arrays__table__last__last__bit)

axiom simple_unc_arrays__table__last__position_axiom :
  (0 <= simple_unc_arrays__table__last__position)

logic simple_unc_arrays__table__v__first__bit : int

logic simple_unc_arrays__table__v__last__bit : int

logic simple_unc_arrays__table__v__position : int

axiom simple_unc_arrays__table__v__first__bit_axiom :
  (0 <= simple_unc_arrays__table__v__first__bit)

axiom simple_unc_arrays__table__v__last__bit_axiom :
  (simple_unc_arrays__table__v__first__bit <  simple_unc_arrays__table__v__last__bit)

axiom simple_unc_arrays__table__v__position_axiom :
  (0 <= simple_unc_arrays__table__v__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type table__ref = { table__content : us_rep
}

function table__ref_table__content__projection(a: table__ref) : us_rep =
  (a).table__content

logic t1__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_205: us_rep,
  temp___is_init_201: bool, temp___skip_constant_202: bool,
  temp___do_toplevel_203: bool, temp___do_typ_inv_204: bool) =
  (let temp___206 =
  ((temp___expr_205).us_split_discrs1).rec__simple_unc_arrays__table__last
  : natural in (dynamic_property1(1, to_rep(temp___206),
  first3(((temp___expr_205).us_split_fields1).rec__simple_unc_arrays__table__v),
  last3(((temp___expr_205).us_split_fields1).rec__simple_unc_arrays__table__v)) and
  ((first3(((temp___expr_205).us_split_fields1).rec__simple_unc_arrays__table__v) = 1) and
  (last3(((temp___expr_205).us_split_fields1).rec__simple_unc_arrays__table__v) = to_rep(temp___206)))))

logic t2__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

type tT9bP1

logic tT9bP1qtint : tT9bP1 -> int

axiom tT9bP1qtaxiom : (forall i:tT9bP1. (1 <= tT9bP1qtint(i)))

axiom tT9bP1qtaxiom1 : (forall i:tT9bP1. (tT9bP1qtint(i) <= 10))

predicate in_range6(x: int) = ((1 <= x) and (x <= 10))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : tT9bP1, tT9bP1 -> bool

logic dummy8 : tT9bP1

type tT9bP1__ref = { tT9bP1__content : tT9bP1
}

function tT9bP1__ref_tT9bP1__content__projection(a: tT9bP1__ref) : tT9bP1 =
  (a).tT9bP1__content

logic dummy9 : (int,value) farray

logic value__size3 : int

logic object__size3 : int

logic component__size2 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq9 : (int,value) farray, (int,value) farray -> bool

type us_split_fields2 = { rec__simple_unc_arrays__table__v1 :
(int,value) farray
}

function us_split_fields_rec__simple_unc_arrays__table__v__4__projection(a: us_split_fields2) : (int,value) farray =
  (a).rec__simple_unc_arrays__table__v1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__4__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__simple_unc_arrays__table__v =
  of_array1(((a).us_split_fields3).rec__simple_unc_arrays__table__v1, 1, 10)
  } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__simple_unc_arrays__table__v1 =
  to_array1(((r).us_split_fields1).rec__simple_unc_arrays__table__v) } }

function bool_eq12(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs2).rec__simple_unc_arrays__table__last) = to_rep(((b).us_split_discrs2).rec__simple_unc_arrays__table__last)) and
  (bool_eq8(((a).us_split_fields3).rec__simple_unc_arrays__table__v1, 1, 10,
  ((b).us_split_fields3).rec__simple_unc_arrays__table__v1, 1,
  10) = true)) then true else false)

predicate in_range7(rec__simple_unc_arrays__table__last1: int, a: us_rep) =
  (rec__simple_unc_arrays__table__last1 = to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic simple_unc_arrays__table__last__first__bit1 : int

logic simple_unc_arrays__table__last__last__bit1 : int

logic simple_unc_arrays__table__last__position1 : int

axiom simple_unc_arrays__table__last__first__bit_axiom1 :
  (0 <= simple_unc_arrays__table__last__first__bit1)

axiom simple_unc_arrays__table__last__last__bit_axiom1 :
  (simple_unc_arrays__table__last__first__bit1 <  simple_unc_arrays__table__last__last__bit1)

axiom simple_unc_arrays__table__last__position_axiom1 :
  (0 <= simple_unc_arrays__table__last__position1)

logic simple_unc_arrays__table__v__first__bit1 : int

logic simple_unc_arrays__table__v__last__bit1 : int

logic simple_unc_arrays__table__v__position1 : int

axiom simple_unc_arrays__table__v__first__bit_axiom1 :
  (0 <= simple_unc_arrays__table__v__first__bit1)

axiom simple_unc_arrays__table__v__last__bit_axiom1 :
  (simple_unc_arrays__table__v__first__bit1 <  simple_unc_arrays__table__v__last__bit1)

axiom simple_unc_arrays__table__v__position_axiom1 :
  (0 <= simple_unc_arrays__table__v__position1)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy10 : us_rep1

type tt3S__ref = { tt3S__content : us_rep1
}

function tt3S__ref_tt3S__content__projection(a: tt3S__ref) : us_rep1 =
  (a).tt3S__content

logic t3__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_212: us_rep1,
  temp___is_init_208: bool, temp___skip_constant_209: bool,
  temp___do_toplevel_210: bool, temp___do_typ_inv_211: bool) =
  ((not (temp___skip_constant_209 = true)) -> in_range7(10,
  to_base(temp___expr_212)))

predicate default_initial_assumption(temp___expr_215: us_rep1,
  temp___skip_top_level_216: bool) =
  (to_rep(((temp___expr_215).us_split_discrs2).rec__simple_unc_arrays__table__last) = 10)

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

logic max : us_rep -> int

logic max__function_guard : int, us_rep -> prop

predicate dynamic_invariant2(temp___expr_192: int, temp___is_init_188: bool,
  temp___skip_constant_189: bool, temp___do_toplevel_190: bool,
  temp___do_typ_inv_191: bool) = (((temp___is_init_188 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_192))

axiom max__post_axiom : (forall a:us_rep. empty__function_guard(empty(a), a))

axiom max__post_axiom1 :
  (forall a:us_rep [max(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = max(a) : int in
  (max__function_guard(result, a) ->
  (forall j:int. (((1 <= j) and
  (j <= to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))) ->
  (to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])) <= result)))))))

axiom max__post_axiom2 :
  (forall a:us_rep [max(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = max(a) : int in
  (max__function_guard(result, a) ->
  (exists j:int. (((1 <= j) and
  (j <= to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))) and
  (result = to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])))))))))

axiom max__post_axiom3 :
  (forall a:us_rep [max(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = max(a) : int in
  (max__function_guard(result, a) -> dynamic_invariant2(result, true, false,
  true, true)))))

logic min : us_rep -> int

logic min__function_guard : int, us_rep -> prop

axiom min__post_axiom : (forall a:us_rep. empty__function_guard(empty(a), a))

axiom min__post_axiom1 :
  (forall a:us_rep [min(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = min(a) : int in
  (min__function_guard(result, a) ->
  (forall j:int. (((1 <= j) and
  (j <= to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))) ->
  (result <= to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])))))))))

axiom min__post_axiom2 :
  (forall a:us_rep [min(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = min(a) : int in
  (min__function_guard(result, a) ->
  (exists j:int. (((1 <= j) and
  (j <= to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))) and
  (result = to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])))))))))

axiom min__post_axiom3 :
  (forall a:us_rep [min(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = min(a) : int in
  (min__function_guard(result, a) -> dynamic_invariant2(result, true, false,
  true, true)))))

logic average : us_rep -> int

logic average__function_guard : int, us_rep -> prop

axiom average__post_axiom :
  (forall a:us_rep. empty__function_guard(empty(a), a))

axiom average__post_axiom1 :
  (forall a:us_rep [average(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) ->
  (forall a1:us_rep. min__function_guard(min(a1), a1))))

axiom average__post_axiom2 :
  (forall a:us_rep [average(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) ->
  (forall a1:us_rep. max__function_guard(max(a1), a1))))

axiom average__post_axiom3 :
  (forall a:us_rep [average(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = average(a) : int in
  (average__function_guard(result, a) -> (min(a) <= result)))))

axiom average__post_axiom4 :
  (forall a:us_rep [average(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = average(a) : int in
  (average__function_guard(result, a) -> (result <= max(a))))))

axiom average__post_axiom5 :
  (forall a:us_rep [average(a)]. ((dynamic_invariant(a, true, true, true,
  true) and (not (empty(a) = true))) -> (let result = average(a) : int in
  (average__function_guard(result, a) -> dynamic_invariant2(result, true,
  false, true, true)))))

predicate dynamic_invariant3(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

logic not_in : us_rep, int, int, int -> bool

logic not_in__function_guard : bool, us_rep, int, int, int -> prop

logic search : us_rep, int -> int

logic search__function_guard : int, us_rep, int -> prop

axiom search__post_axiom :
  (forall a:us_rep.
  (forall v:int [search(a, v)]. ((dynamic_invariant(a, true, true, true,
  true) and dynamic_invariant2(v, true, true, true, true)) ->
  (forall a1:us_rep. forall v1:int. not_in__function_guard(not_in(a1, v1, 1,
  to_rep(((a1).us_split_discrs1).rec__simple_unc_arrays__table__last)), a1,
  v1, 1,
  to_rep(((a1).us_split_discrs1).rec__simple_unc_arrays__table__last))))))

axiom search__post_axiom1 :
  (forall a:us_rep.
  (forall v:int [search(a, v)]. ((dynamic_invariant(a, true, true, true,
  true) and dynamic_invariant2(v, true, true, true, true)) ->
  (forall a1:us_rep. forall v1:int. forall result:int.
  not_in__function_guard(not_in(a1, v1, 1, (result - 1)), a1, v1, 1,
  (result - 1))))))

axiom search__post_axiom2 :
  (forall a:us_rep.
  (forall v:int [search(a, v)]. ((dynamic_invariant(a, true, true, true,
  true) and dynamic_invariant2(v, true, true, true, true)) -> (let result =
  search(a, v) : int in (search__function_guard(result, a, v) ->
  (((result = 0) and (not_in(a, v, 1,
  to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last)) = true)) or
  ((to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[result])) = v) and
  (not_in(a, v, 1, (result - 1)) = true))))))))

axiom search__post_axiom3 :
  (forall a:us_rep.
  (forall v:int [search(a, v)]. ((dynamic_invariant(a, true, true, true,
  true) and dynamic_invariant2(v, true, true, true, true)) -> (let result =
  search(a, v) : int in (search__function_guard(result, a, v) ->
  dynamic_invariant3(result, true, false, true, true))))))

logic same_range : us_rep, us_rep -> bool

logic same_range__function_guard : bool, us_rep, us_rep -> prop

logic add : us_rep, us_rep -> us_rep

logic add__function_guard : us_rep, us_rep, us_rep -> prop

axiom add__post_axiom :
  (forall a:us_rep. forall b:us_rep. same_range__function_guard(same_range(a,
  b), a, b))

axiom add__post_axiom1 :
  (forall a:us_rep. forall b:us_rep [add(a, b)]. (((dynamic_invariant(a,
  true, true, true, true) and dynamic_invariant(b, true, true, true,
  true)) and (same_range(a, b) = true)) ->
  (forall a1:us_rep. forall result:us_rep.
  same_range__function_guard(same_range(result, a1), result, a1))))

axiom add__post_axiom2 :
  (forall a:us_rep. forall b:us_rep [add(a, b)]. (((dynamic_invariant(a,
  true, true, true, true) and dynamic_invariant(b, true, true, true,
  true)) and (same_range(a, b) = true)) -> (let result = add(a, b)
  : us_rep in (add__function_guard(result, a, b) -> (same_range(result,
  a) = true)))))

axiom add__post_axiom3 :
  (forall a:us_rep. forall b:us_rep [add(a, b)]. (((dynamic_invariant(a,
  true, true, true, true) and dynamic_invariant(b, true, true, true,
  true)) and (same_range(a, b) = true)) -> (let result = add(a, b)
  : us_rep in (add__function_guard(result, a, b) ->
  (forall j:int. (((1 <= j) and
  (j <= to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))) ->
  (to_rep3((to_array1(((result).us_split_fields1).rec__simple_unc_arrays__table__v)[j])) = (to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])) + to_rep3((to_array1(((b).us_split_fields1).rec__simple_unc_arrays__table__v)[j]))))))))))

axiom add__post_axiom4 :
  (forall a:us_rep. forall b:us_rep [add(a, b)]. (((dynamic_invariant(a,
  true, true, true, true) and dynamic_invariant(b, true, true, true,
  true)) and (same_range(a, b) = true)) -> (let result = add(a, b)
  : us_rep in (add__function_guard(result, a, b) -> dynamic_invariant(result,
  true, false, true, true)))))

logic bubble_sort : us_rep -> us_rep

logic bubble_sort__function_guard : us_rep, us_rep -> prop

type tT2bP1

logic tT2bP1qtint : tT2bP1 -> int

axiom tT2bP1qtaxiom : (forall i:tT2bP1. (1 <= tT2bP1qtint(i)))

axiom tT2bP1qtaxiom1 : (forall i:tT2bP1. (tT2bP1qtint(i) <= 10))

predicate in_range8(x: int) = ((1 <= x) and (x <= 10))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : tT2bP1, tT2bP1 -> bool

logic dummy11 : tT2bP1

type tT2bP1__ref = { tT2bP1__content : tT2bP1
}

function tT2bP1__ref_tT2bP1__content__projection(a: tT2bP1__ref) : tT2bP1 =
  (a).tT2bP1__content

logic dummy12 : (int,value) farray

logic value__size5 : int

logic object__size5 : int

logic component__size3 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom5 : (0 <= alignment5)

logic user_eq12 : (int,value) farray, (int,value) farray -> bool

type us_split_fields4 = { rec__simple_unc_arrays__table__v2 :
(int,value) farray
}

function us_split_fields_rec__simple_unc_arrays__table__v__2__projection(a: us_split_fields4) : (int,value) farray =
  (a).rec__simple_unc_arrays__table__v2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__2__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base1(a: us_rep2) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs3; us_split_fields1 = {
  rec__simple_unc_arrays__table__v =
  of_array1(((a).us_split_fields5).rec__simple_unc_arrays__table__v2, 1, 10)
  } }

function of_base1(r: us_rep) : us_rep2 = { us_split_discrs3 =
  (r).us_split_discrs1; us_split_fields5 = {
  rec__simple_unc_arrays__table__v2 =
  to_array1(((r).us_split_fields1).rec__simple_unc_arrays__table__v) } }

function bool_eq14(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_discrs3).rec__simple_unc_arrays__table__last) = to_rep(((b).us_split_discrs3).rec__simple_unc_arrays__table__last)) and
  (bool_eq8(((a).us_split_fields5).rec__simple_unc_arrays__table__v2, 1, 10,
  ((b).us_split_fields5).rec__simple_unc_arrays__table__v2, 1,
  10) = true)) then true else false)

predicate in_range9(rec__simple_unc_arrays__table__last1: int, a: us_rep) =
  (rec__simple_unc_arrays__table__last1 = to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic simple_unc_arrays__table__last__first__bit2 : int

logic simple_unc_arrays__table__last__last__bit2 : int

logic simple_unc_arrays__table__last__position2 : int

axiom simple_unc_arrays__table__last__first__bit_axiom2 :
  (0 <= simple_unc_arrays__table__last__first__bit2)

axiom simple_unc_arrays__table__last__last__bit_axiom2 :
  (simple_unc_arrays__table__last__first__bit2 <  simple_unc_arrays__table__last__last__bit2)

axiom simple_unc_arrays__table__last__position_axiom2 :
  (0 <= simple_unc_arrays__table__last__position2)

logic simple_unc_arrays__table__v__first__bit2 : int

logic simple_unc_arrays__table__v__last__bit2 : int

logic simple_unc_arrays__table__v__position2 : int

axiom simple_unc_arrays__table__v__first__bit_axiom2 :
  (0 <= simple_unc_arrays__table__v__first__bit2)

axiom simple_unc_arrays__table__v__last__bit_axiom2 :
  (simple_unc_arrays__table__v__first__bit2 <  simple_unc_arrays__table__v__last__bit2)

axiom simple_unc_arrays__table__v__position_axiom2 :
  (0 <= simple_unc_arrays__table__v__position2)

logic user_eq13 : us_rep2, us_rep2 -> bool

logic dummy13 : us_rep2

type t1b__ref = { t1b__content : us_rep2
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep2 =
  (a).t1b__content

type tT6bP1

logic tT6bP1qtint : tT6bP1 -> int

axiom tT6bP1qtaxiom : (forall i:tT6bP1. (1 <= tT6bP1qtint(i)))

axiom tT6bP1qtaxiom1 : (forall i:tT6bP1. (tT6bP1qtint(i) <= 10))

predicate in_range10(x: int) = ((1 <= x) and (x <= 10))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : tT6bP1, tT6bP1 -> bool

logic dummy14 : tT6bP1

type tT6bP1__ref = { tT6bP1__content : tT6bP1
}

function tT6bP1__ref_tT6bP1__content__projection(a: tT6bP1__ref) : tT6bP1 =
  (a).tT6bP1__content

logic dummy15 : (int,value) farray

logic value__size7 : int

logic object__size7 : int

logic component__size4 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom component__size_axiom4 : (0 <= component__size4)

axiom alignment_axiom7 : (0 <= alignment7)

logic user_eq15 : (int,value) farray, (int,value) farray -> bool

type us_split_fields6 = { rec__simple_unc_arrays__table__v3 :
(int,value) farray
}

function us_split_fields_rec__simple_unc_arrays__table__v__3__projection(a: us_split_fields6) : (int,value) farray =
  (a).rec__simple_unc_arrays__table__v3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs4 : us_split_discrs; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__3__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs4

function us_rep___split_fields__3__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base2(a: us_rep3) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs4; us_split_fields1 = {
  rec__simple_unc_arrays__table__v =
  of_array1(((a).us_split_fields7).rec__simple_unc_arrays__table__v3, 1, 10)
  } }

function of_base2(r: us_rep) : us_rep3 = { us_split_discrs4 =
  (r).us_split_discrs1; us_split_fields7 = {
  rec__simple_unc_arrays__table__v3 =
  to_array1(((r).us_split_fields1).rec__simple_unc_arrays__table__v) } }

function bool_eq16(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep(((a).us_split_discrs4).rec__simple_unc_arrays__table__last) = to_rep(((b).us_split_discrs4).rec__simple_unc_arrays__table__last)) and
  (bool_eq8(((a).us_split_fields7).rec__simple_unc_arrays__table__v3, 1, 10,
  ((b).us_split_fields7).rec__simple_unc_arrays__table__v3, 1,
  10) = true)) then true else false)

predicate in_range11(rec__simple_unc_arrays__table__last1: int, a: us_rep) =
  (rec__simple_unc_arrays__table__last1 = to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last))

logic value__size8 : int

logic object__size8 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom alignment_axiom8 : (0 <= alignment8)

logic simple_unc_arrays__table__last__first__bit3 : int

logic simple_unc_arrays__table__last__last__bit3 : int

logic simple_unc_arrays__table__last__position3 : int

axiom simple_unc_arrays__table__last__first__bit_axiom3 :
  (0 <= simple_unc_arrays__table__last__first__bit3)

axiom simple_unc_arrays__table__last__last__bit_axiom3 :
  (simple_unc_arrays__table__last__first__bit3 <  simple_unc_arrays__table__last__last__bit3)

axiom simple_unc_arrays__table__last__position_axiom3 :
  (0 <= simple_unc_arrays__table__last__position3)

logic simple_unc_arrays__table__v__first__bit3 : int

logic simple_unc_arrays__table__v__last__bit3 : int

logic simple_unc_arrays__table__v__position3 : int

axiom simple_unc_arrays__table__v__first__bit_axiom3 :
  (0 <= simple_unc_arrays__table__v__first__bit3)

axiom simple_unc_arrays__table__v__last__bit_axiom3 :
  (simple_unc_arrays__table__v__first__bit3 <  simple_unc_arrays__table__v__last__bit3)

axiom simple_unc_arrays__table__v__position_axiom3 :
  (0 <= simple_unc_arrays__table__v__position3)

logic user_eq16 : us_rep3, us_rep3 -> bool

logic dummy16 : us_rep3

type t5b__ref = { t5b__content : us_rep3
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : us_rep3 =
  (a).t5b__content

logic temp_____aggregate_def_318 : int, int, int, int, int, int, int, int,
  int, int -> (int,value) farray

logic temp_____aggregate_def_331 : int, int, int, int, int, int, int, int,
  int, int -> (int,value) farray

logic temp___String_Literal_348 : unit -> (int,character) farray

axiom temp___String_Literal_348__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_348(us_void_param)].
  (to_rep1((temp___String_Literal_348(us_void_param)[1])) = 77))

axiom temp___String_Literal_348__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_348(us_void_param)].
  (to_rep1((temp___String_Literal_348(us_void_param)[2])) = 97))

axiom temp___String_Literal_348__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_348(us_void_param)].
  (to_rep1((temp___String_Literal_348(us_void_param)[3])) = 120))

axiom temp___String_Literal_348__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_348(us_void_param)].
  (to_rep1((temp___String_Literal_348(us_void_param)[4])) = 32))

axiom temp___String_Literal_348__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_348(us_void_param)].
  (to_rep1((temp___String_Literal_348(us_void_param)[5])) = 61))

axiom temp___String_Literal_348__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_348(us_void_param)].
  (to_rep1((temp___String_Literal_348(us_void_param)[6])) = 32))

logic temp___String_Literal_349 : unit -> (int,character) farray

axiom temp___String_Literal_349__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_349(us_void_param)].
  (to_rep1((temp___String_Literal_349(us_void_param)[1])) = 77))

axiom temp___String_Literal_349__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_349(us_void_param)].
  (to_rep1((temp___String_Literal_349(us_void_param)[2])) = 105))

axiom temp___String_Literal_349__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_349(us_void_param)].
  (to_rep1((temp___String_Literal_349(us_void_param)[3])) = 110))

axiom temp___String_Literal_349__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_349(us_void_param)].
  (to_rep1((temp___String_Literal_349(us_void_param)[4])) = 32))

axiom temp___String_Literal_349__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_349(us_void_param)].
  (to_rep1((temp___String_Literal_349(us_void_param)[5])) = 61))

axiom temp___String_Literal_349__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_349(us_void_param)].
  (to_rep1((temp___String_Literal_349(us_void_param)[6])) = 32))

logic temp___String_Literal_350 : unit -> (int,character) farray

axiom temp___String_Literal_350__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[1])) = 65))

axiom temp___String_Literal_350__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[2])) = 118))

axiom temp___String_Literal_350__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[3])) = 101))

axiom temp___String_Literal_350__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[4])) = 114))

axiom temp___String_Literal_350__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[5])) = 97))

axiom temp___String_Literal_350__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[6])) = 103))

axiom temp___String_Literal_350__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[7])) = 101))

axiom temp___String_Literal_350__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[8])) = 32))

axiom temp___String_Literal_350__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[9])) = 61))

axiom temp___String_Literal_350__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_350(us_void_param)].
  (to_rep1((temp___String_Literal_350(us_void_param)[10])) = 32))

logic temp___String_Literal_351 : unit -> (int,character) farray

axiom temp___String_Literal_351__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[1])) = 70))

axiom temp___String_Literal_351__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[2])) = 105))

axiom temp___String_Literal_351__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[3])) = 110))

axiom temp___String_Literal_351__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[4])) = 100))

axiom temp___String_Literal_351__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[5])) = 32))

axiom temp___String_Literal_351__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[6])) = 48))

axiom temp___String_Literal_351__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[7])) = 32))

axiom temp___String_Literal_351__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[8])) = 105))

axiom temp___String_Literal_351__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[9])) = 110))

axiom temp___String_Literal_351__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[10])) = 32))

axiom temp___String_Literal_351__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[11])) = 84))

axiom temp___String_Literal_351__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[12])) = 49))

axiom temp___String_Literal_351__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_351(us_void_param)].
  (to_rep1((temp___String_Literal_351(us_void_param)[13])) = 32))

logic temp___String_Literal_352 : unit -> (int,character) farray

axiom temp___String_Literal_352__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[1])) = 70))

axiom temp___String_Literal_352__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[2])) = 105))

axiom temp___String_Literal_352__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[3])) = 110))

axiom temp___String_Literal_352__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[4])) = 100))

axiom temp___String_Literal_352__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[5])) = 32))

axiom temp___String_Literal_352__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[6])) = 57))

axiom temp___String_Literal_352__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[7])) = 32))

axiom temp___String_Literal_352__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[8])) = 105))

axiom temp___String_Literal_352__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[9])) = 110))

axiom temp___String_Literal_352__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[10])) = 32))

axiom temp___String_Literal_352__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[11])) = 84))

axiom temp___String_Literal_352__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[12])) = 50))

axiom temp___String_Literal_352__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_352(us_void_param)].
  (to_rep1((temp___String_Literal_352(us_void_param)[13])) = 32))

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant5(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

predicate dynamic_invariant6(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant7(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

axiom empty__def_axiom :
  (forall a:us_rep [empty(a)]. ((empty(a) = true) ->
  (to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) <  1)))

axiom empty__def_axiom1 :
  (forall a:us_rep [empty(a)].
  ((to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) <  1) ->
  (empty(a) = true)))

axiom same_range__def_axiom :
  (forall a:us_rep. forall b:us_rep [same_range(a, b)]. ((same_range(a,
  b) = true) ->
  (to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) = to_rep(((b).us_split_discrs1).rec__simple_unc_arrays__table__last))))

axiom same_range__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [same_range(a, b)].
  ((to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) = to_rep(((b).us_split_discrs1).rec__simple_unc_arrays__table__last)) ->
  (same_range(a, b) = true)))

axiom not_in__def_axiom :
  (forall a:us_rep.
  (forall v:int. forall low:int. forall up:int [not_in(a, v, low, up)].
  ((not_in(a, v, low, up) = true) ->
  ((to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) <  up) or
  (forall j:int. (((low <= j) and (j <= up)) ->
  (not (to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])) = v))))))))

axiom not_in__def_axiom1 :
  (forall a:us_rep.
  (forall v:int. forall low:int. forall up:int [not_in(a, v, low, up)].
  (((to_rep(((a).us_split_discrs1).rec__simple_unc_arrays__table__last) <  up) or
  (forall j:int. (((low <= j) and (j <= up)) ->
  (not (to_rep3((to_array1(((a).us_split_fields1).rec__simple_unc_arrays__table__v)[j])) = v))))) ->
  (not_in(a, v, low, up) = true))))

logic rliteral : value

axiom rliteral_axiom : (valueqtint(rliteral) = 5)

logic rliteral1 : value

axiom rliteral_axiom1 : (valueqtint(rliteral1) = 1)

logic rliteral2 : value

axiom rliteral_axiom2 : (valueqtint(rliteral2) = 3)

logic rliteral3 : value

axiom rliteral_axiom3 : (valueqtint(rliteral3) = 0)

logic rliteral4 : value

axiom rliteral_axiom4 : (valueqtint(rliteral4) = 9)

logic rliteral5 : value

axiom rliteral_axiom5 : (valueqtint(rliteral5) = 8)

logic rliteral6 : value

axiom rliteral_axiom6 : (valueqtint(rliteral6) = 2)

logic rliteral7 : value

axiom rliteral_axiom7 : (valueqtint(rliteral7) = 7)

logic rliteral8 : value

axiom rliteral_axiom8 : (valueqtint(rliteral8) = 4)

logic rliteral9 : value

axiom rliteral_axiom9 : (valueqtint(rliteral9) = 6)

axiom def_axiom :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[2]) = rliteral1)))

axiom def_axiom2 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[3]) = rliteral2)))

axiom def_axiom3 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[4]) = rliteral3)))

axiom def_axiom4 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[5]) = rliteral4)))

axiom def_axiom5 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[6]) = rliteral5)))

axiom def_axiom6 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[7]) = rliteral6)))

axiom def_axiom7 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[8]) = rliteral7)))

axiom def_axiom8 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[9]) = rliteral8)))

axiom def_axiom9 :
  (forall temp___320:int. forall temp___321:int. forall temp___322:int.
  forall temp___323:int. forall temp___324:int. forall temp___325:int.
  forall temp___326:int. forall temp___327:int. forall temp___328:int.
  forall temp___329:int. (((dynamic_invariant2(temp___320, true, true, true,
  true) and dynamic_invariant2(temp___321, true, true, true, true)) and
  (((dynamic_invariant2(temp___322, true, true, true, true) and
  dynamic_invariant2(temp___323, true, true, true, true)) and
  (dynamic_invariant2(temp___324, true, true, true, true) and
  dynamic_invariant2(temp___325, true, true, true, true))) and
  ((dynamic_invariant2(temp___326, true, true, true, true) and
  dynamic_invariant2(temp___327, true, true, true, true)) and
  (dynamic_invariant2(temp___328, true, true, true, true) and
  dynamic_invariant2(temp___329, true, true, true, true))))) ->
  ((temp_____aggregate_def_318(temp___320, temp___321, temp___322,
  temp___323, temp___324, temp___325, temp___326, temp___327, temp___328,
  temp___329)[10]) = rliteral9)))

axiom def_axiom10 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[1]) = rliteral8)))

axiom def_axiom11 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[2]) = rliteral5)))

axiom def_axiom12 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[3]) = rliteral9)))

axiom def_axiom13 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[4]) = rliteral4)))

axiom def_axiom14 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[5]) = rliteral3)))

axiom def_axiom15 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[6]) = rliteral1)))

axiom def_axiom16 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[7]) = rliteral7)))

axiom def_axiom17 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[8]) = rliteral6)))

axiom def_axiom18 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[9]) = rliteral)))

axiom def_axiom19 :
  (forall temp___333:int. forall temp___334:int. forall temp___335:int.
  forall temp___336:int. forall temp___337:int. forall temp___338:int.
  forall temp___339:int. forall temp___340:int. forall temp___341:int.
  forall temp___342:int. (((dynamic_invariant2(temp___333, true, true, true,
  true) and dynamic_invariant2(temp___334, true, true, true, true)) and
  (((dynamic_invariant2(temp___335, true, true, true, true) and
  dynamic_invariant2(temp___336, true, true, true, true)) and
  (dynamic_invariant2(temp___337, true, true, true, true) and
  dynamic_invariant2(temp___338, true, true, true, true))) and
  ((dynamic_invariant2(temp___339, true, true, true, true) and
  dynamic_invariant2(temp___340, true, true, true, true)) and
  (dynamic_invariant2(temp___341, true, true, true, true) and
  dynamic_invariant2(temp___342, true, true, true, true))))) ->
  ((temp_____aggregate_def_331(temp___333, temp___334, temp___335,
  temp___336, temp___337, temp___338, temp___339, temp___340, temp___341,
  temp___342)[10]) = rliteral2)))

logic rliteral10 : natural

axiom rliteral_axiom10 : (naturalqtint(rliteral10) = 10)

 (* File "my_test.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall t3__split_fields:(int,value) farray. (let my_test__t1__assume =
  to_base1({ us_split_discrs3 = { rec__simple_unc_arrays__table__last =
  rliteral10 }; us_split_fields5 = { rec__simple_unc_arrays__table__v2 =
  temp_____aggregate_def_318(5, 1, 3, 0, 9, 8, 2, 7, 4, 6) } }) : us_rep in
  (forall t1__split_fields:us_t1. (({ rec__simple_unc_arrays__table__v =
  t1__split_fields } = (my_test__t1__assume).us_split_fields1) ->
  ((t1__split_discrs = (my_test__t1__assume).us_split_discrs1) ->
  (dynamic_invariant({ us_split_discrs1 = t1__split_discrs;
  us_split_fields1 = { rec__simple_unc_arrays__table__v = t1__split_fields }
  }, true, false, true, true) -> (let my_test__t2__assume = to_base2({
  us_split_discrs4 = { rec__simple_unc_arrays__table__last = rliteral10 };
  us_split_fields7 = { rec__simple_unc_arrays__table__v3 =
  temp_____aggregate_def_331(4, 8, 6, 9, 0, 1, 7, 2, 5, 3) } }) : us_rep in
  (forall t2__split_fields:us_t1. (({ rec__simple_unc_arrays__table__v =
  t2__split_fields } = (my_test__t2__assume).us_split_fields1) ->
  ((t2__split_discrs = (my_test__t2__assume).us_split_discrs1) ->
  (dynamic_invariant({ us_split_discrs1 = t2__split_discrs;
  us_split_fields1 = { rec__simple_unc_arrays__table__v = t2__split_fields }
  }, true, false, true, true) -> (in_range1(10) ->
  (default_initial_assumption({ us_split_discrs2 = t3__split_discrs;
  us_split_fields3 = { rec__simple_unc_arrays__table__v1 = t3__split_fields }
  }, false) -> (dynamic_invariant1({ us_split_discrs2 = t3__split_discrs;
  us_split_fields3 = { rec__simple_unc_arrays__table__v1 = t3__split_fields }
  }, false, false, true, true) -> (let o = { us_split_discrs1 =
  t1__split_discrs; us_split_fields1 = { rec__simple_unc_arrays__table__v =
  t1__split_fields } } : us_rep in (let o1 = max(o) : int in
  ((max__function_guard(o1, o) and (dynamic_invariant2(o1, true, false, true,
  true) and
  ((forall j:int. (((1 <= j) and
   (j <= to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last))) ->
   (to_rep3((to_array1(t1__split_fields)[j])) <= o1))) and
  (exists j:int. (((1 <= j) and
  (j <= to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last))) and
  (o1 = to_rep3((to_array1(t1__split_fields)[j])))))))) -> (let o2 = {
  us_split_discrs1 = t1__split_discrs; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = t1__split_fields } } : us_rep in
  (let o3 = min(o2) : int in ((min__function_guard(o3, o2) and
  (dynamic_invariant2(o3, true, false, true, true) and
  ((forall j:int. (((1 <= j) and
   (j <= to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last))) ->
   (o3 <= to_rep3((to_array1(t1__split_fields)[j]))))) and
  (exists j:int. (((1 <= j) and
  (j <= to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last))) and
  (o3 = to_rep3((to_array1(t1__split_fields)[j])))))))) -> (let o4 = {
  us_split_discrs1 = t1__split_discrs; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = t1__split_fields } } : us_rep in
  (let o5 = average(o4) : int in
  ((forall o6:us_rep. min__function_guard(min(o6), o6)) ->
  ((forall o6:us_rep. max__function_guard(max(o6), o6)) ->
  ((average__function_guard(o5, o4) and (dynamic_invariant2(o5, true, false,
  true, true) and ((min(o4) <= o5) and (o5 <= max(o4))))) -> (let o6 = {
  us_split_discrs1 = t1__split_discrs; us_split_fields1 = {
  rec__simple_unc_arrays__table__v = t1__split_fields } } : us_rep in
  (let o7 = search(o6, 0) : int in
  ((forall o8:us_rep. not_in__function_guard(not_in(o8, 0, 1,
   to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last)), o8, 0, 1,
   to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last))) ->
  ((forall o8:us_rep. forall o9:int. not_in__function_guard(not_in(o8, 0, 1,
   (o9 - 1)), o8, 0, 1, (o9 - 1))) ->
  ((search__function_guard(o7, o6, 0) and (dynamic_invariant3(o7, true,
  false, true, true) and (((o7 = 0) and (not_in(o6, 0, 1,
  to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last)) = true)) or
  ((to_rep3((to_array1(t1__split_fields)[o7])) = 0) and (not_in(o6, 0, 1,
  (o7 - 1)) = true))))) -> (let o8 = { us_split_discrs1 = t2__split_discrs;
  us_split_fields1 = { rec__simple_unc_arrays__table__v = t2__split_fields }
  } : us_rep in (let o9 = search(o8, 9) : int in
  ((forall o10:us_rep. not_in__function_guard(not_in(o10, 9, 1,
   to_rep((t2__split_discrs).rec__simple_unc_arrays__table__last)), o10, 9,
   1, to_rep((t2__split_discrs).rec__simple_unc_arrays__table__last))) ->
  ((forall o10:us_rep. forall o11:int. not_in__function_guard(not_in(o10, 9,
   1, (o11 - 1)), o10, 9, 1, (o11 - 1))) ->
  ((search__function_guard(o9, o8, 9) and (dynamic_invariant3(o9, true,
  false, true, true) and (((o9 = 0) and (not_in(o8, 9, 1,
  to_rep((t2__split_discrs).rec__simple_unc_arrays__table__last)) = true)) or
  ((to_rep3((to_array1(t2__split_fields)[o9])) = 9) and (not_in(o8, 9, 1,
  (o9 - 1)) = true))))) -> (let o10 = { us_split_discrs1 = t2__split_discrs;
  us_split_fields1 = { rec__simple_unc_arrays__table__v = t2__split_fields }
  } : us_rep in (let o11 = { us_split_discrs1 = t1__split_discrs;
  us_split_fields1 = { rec__simple_unc_arrays__table__v = t1__split_fields }
  } : us_rep in (let o12 = add(o11, o10) : us_rep in
  ((forall o13:us_rep. forall o14:us_rep.
   same_range__function_guard(same_range(o14, o13), o14, o13)) ->
  ((add__function_guard(o12, o11, o10) and (dynamic_invariant(o12, true,
  false, true, true) and ((same_range(o12, o11) = true) and
  (forall j:int. (((1 <= j) and
  (j <= to_rep((t1__split_discrs).rec__simple_unc_arrays__table__last))) ->
  (to_rep3((to_array1(((o12).us_split_fields1).rec__simple_unc_arrays__table__v)[j])) = (to_rep3((to_array1(t1__split_fields)[j])) + to_rep3((to_array1(t2__split_fields)[j]))))))))) ->
  (let temp___353 = of_base(o12) : us_rep1 in
  (forall t3__split_fields1:(int,value) farray. (({
  rec__simple_unc_arrays__table__v1 = t3__split_fields1
  } = (temp___353).us_split_fields3) ->
  ((t3__split_discrs = (temp___353).us_split_discrs2) ->
  (forall usf:int.
  (forall o13:int.
  ((to_rep((t3__split_discrs).rec__simple_unc_arrays__table__last) = o13) ->
  ((andb((if (1 <= usf) then true else false),
  (if (usf <= o13) then true else false)) = true) -> (1 <= usf)))))))))))))))))))))))))))))))))))))))))))))))))
