(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type time__ref = { time__content : us_rep
}

function time__ref_time__content__projection(a: time__ref) : us_rep =
  (a).time__content

type us_split_fields = {
rec__traffic_lights__traffic_lightT__last_state_change : us_rep;
rec__traffic_lights__traffic_lightT__vehicles_green : bool;
rec__traffic_lights__traffic_lightT__vehicles_yellow : bool;
rec__traffic_lights__traffic_lightT__vehicles_red : bool;
rec__traffic_lights__traffic_lightT__pedestrians_green : bool;
rec__traffic_lights__traffic_lightT__pedestrians_red : bool;
rec__traffic_lights__traffic_lightT__change_state : bool
}

function us_split_fields_rec__traffic_lights__traffic_lightT__last_state_change__projection(a: us_split_fields) : us_rep =
  (a).rec__traffic_lights__traffic_lightT__last_state_change

function us_split_fields_rec__traffic_lights__traffic_lightT__vehicles_green__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__traffic_lightT__vehicles_green

function us_split_fields_rec__traffic_lights__traffic_lightT__vehicles_yellow__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__traffic_lightT__vehicles_yellow

function us_split_fields_rec__traffic_lights__traffic_lightT__vehicles_red__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__traffic_lightT__vehicles_red

function us_split_fields_rec__traffic_lights__traffic_lightT__pedestrians_green__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__traffic_lightT__pedestrians_green

function us_split_fields_rec__traffic_lights__traffic_lightT__pedestrians_red__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__traffic_lightT__pedestrians_red

function us_split_fields_rec__traffic_lights__traffic_lightT__change_state__projection(a: us_split_fields) : bool =
  (a).rec__traffic_lights__traffic_lightT__change_state

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic traffic_lights__traffic_lightT__last_state_change__first__bit : int

logic traffic_lights__traffic_lightT__last_state_change__last__bit : int

logic traffic_lights__traffic_lightT__last_state_change__position : int

axiom traffic_lights__traffic_lightT__last_state_change__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__last_state_change__first__bit)

axiom traffic_lights__traffic_lightT__last_state_change__last__bit_axiom :
  (traffic_lights__traffic_lightT__last_state_change__first__bit <  traffic_lights__traffic_lightT__last_state_change__last__bit)

axiom traffic_lights__traffic_lightT__last_state_change__position_axiom :
  (0 <= traffic_lights__traffic_lightT__last_state_change__position)

logic traffic_lights__traffic_lightT__vehicles_green__first__bit : int

logic traffic_lights__traffic_lightT__vehicles_green__last__bit : int

logic traffic_lights__traffic_lightT__vehicles_green__position : int

axiom traffic_lights__traffic_lightT__vehicles_green__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__vehicles_green__first__bit)

axiom traffic_lights__traffic_lightT__vehicles_green__last__bit_axiom :
  (traffic_lights__traffic_lightT__vehicles_green__first__bit <  traffic_lights__traffic_lightT__vehicles_green__last__bit)

axiom traffic_lights__traffic_lightT__vehicles_green__position_axiom :
  (0 <= traffic_lights__traffic_lightT__vehicles_green__position)

logic traffic_lights__traffic_lightT__vehicles_yellow__first__bit : int

logic traffic_lights__traffic_lightT__vehicles_yellow__last__bit : int

logic traffic_lights__traffic_lightT__vehicles_yellow__position : int

axiom traffic_lights__traffic_lightT__vehicles_yellow__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__vehicles_yellow__first__bit)

axiom traffic_lights__traffic_lightT__vehicles_yellow__last__bit_axiom :
  (traffic_lights__traffic_lightT__vehicles_yellow__first__bit <  traffic_lights__traffic_lightT__vehicles_yellow__last__bit)

axiom traffic_lights__traffic_lightT__vehicles_yellow__position_axiom :
  (0 <= traffic_lights__traffic_lightT__vehicles_yellow__position)

logic traffic_lights__traffic_lightT__vehicles_red__first__bit : int

logic traffic_lights__traffic_lightT__vehicles_red__last__bit : int

logic traffic_lights__traffic_lightT__vehicles_red__position : int

axiom traffic_lights__traffic_lightT__vehicles_red__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__vehicles_red__first__bit)

axiom traffic_lights__traffic_lightT__vehicles_red__last__bit_axiom :
  (traffic_lights__traffic_lightT__vehicles_red__first__bit <  traffic_lights__traffic_lightT__vehicles_red__last__bit)

axiom traffic_lights__traffic_lightT__vehicles_red__position_axiom :
  (0 <= traffic_lights__traffic_lightT__vehicles_red__position)

logic traffic_lights__traffic_lightT__pedestrians_green__first__bit : int

logic traffic_lights__traffic_lightT__pedestrians_green__last__bit : int

logic traffic_lights__traffic_lightT__pedestrians_green__position : int

axiom traffic_lights__traffic_lightT__pedestrians_green__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__pedestrians_green__first__bit)

axiom traffic_lights__traffic_lightT__pedestrians_green__last__bit_axiom :
  (traffic_lights__traffic_lightT__pedestrians_green__first__bit <  traffic_lights__traffic_lightT__pedestrians_green__last__bit)

axiom traffic_lights__traffic_lightT__pedestrians_green__position_axiom :
  (0 <= traffic_lights__traffic_lightT__pedestrians_green__position)

logic traffic_lights__traffic_lightT__pedestrians_red__first__bit : int

logic traffic_lights__traffic_lightT__pedestrians_red__last__bit : int

logic traffic_lights__traffic_lightT__pedestrians_red__position : int

axiom traffic_lights__traffic_lightT__pedestrians_red__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__pedestrians_red__first__bit)

axiom traffic_lights__traffic_lightT__pedestrians_red__last__bit_axiom :
  (traffic_lights__traffic_lightT__pedestrians_red__first__bit <  traffic_lights__traffic_lightT__pedestrians_red__last__bit)

axiom traffic_lights__traffic_lightT__pedestrians_red__position_axiom :
  (0 <= traffic_lights__traffic_lightT__pedestrians_red__position)

logic traffic_lights__traffic_lightT__change_state__first__bit : int

logic traffic_lights__traffic_lightT__change_state__last__bit : int

logic traffic_lights__traffic_lightT__change_state__position : int

axiom traffic_lights__traffic_lightT__change_state__first__bit_axiom :
  (0 <= traffic_lights__traffic_lightT__change_state__first__bit)

axiom traffic_lights__traffic_lightT__change_state__last__bit_axiom :
  (traffic_lights__traffic_lightT__change_state__first__bit <  traffic_lights__traffic_lightT__change_state__last__bit)

axiom traffic_lights__traffic_lightT__change_state__position_axiom :
  (0 <= traffic_lights__traffic_lightT__change_state__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

type traffic_lightT__ref = { traffic_lightT__content : us_rep1
}

function traffic_lightT__ref_traffic_lightT__content__projection(a: traffic_lightT__ref) : us_rep1 =
  (a).traffic_lightT__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic time_first : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_191: us_rep1,
  temp___skip_top_level_192: bool) =
  (((((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__last_state_change = time_first) and
  (((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__vehicles_green = of_int(0))) and
  ((((((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__vehicles_yellow = of_int(0)) and
  (((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__vehicles_red = of_int(1))) and
  (((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__pedestrians_green = of_int(1))) and
  ((((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__pedestrians_red = of_int(0)) and
  (((temp___expr_191).us_split_fields1).rec__traffic_lights__traffic_lightT__change_state = of_int(0)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

type priority

logic priorityqtint : priority -> int

axiom priorityqtaxiom : (forall i:priority. (0 <= priorityqtint(i)))

axiom priorityqtaxiom1 : (forall i:priority. (priorityqtint(i) <= 97))

predicate in_range1(x: int) = ((0 <= x) and (x <= 97))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : priority, priority -> bool

logic dummy1 : priority

type priority__ref = { priority__content : priority
}

function priority__ref_priority__content__projection(a: priority__ref) : priority =
  (a).priority__content

predicate dynamic_invariant(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 97)) -> in_range1(temp___expr_169))

 (* File "traffic_lights.ads", line 37, characters 0-0 *)
goal defqtvc : true
