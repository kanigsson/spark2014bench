(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type s1

logic s1qtint : s1 -> int

axiom s1qtaxiom : (forall i:s1. (0 <= s1qtint(i)))

axiom s1qtaxiom1 : (forall i:s1. (s1qtint(i) <= 17))

predicate in_range1(x: int) = ((0 <= x) and (x <= 17))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : s1, s1 -> bool

logic dummy : s1

type s1__ref = { s1__content : s1
}

function s1__ref_s1__content__projection(a: s1__ref) : s1 = (a).s1__content

predicate dynamic_invariant(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (0 <= 17)) -> in_range1(temp___expr_182))

 (* File "port.ads", line 75, characters 0-0 *)
goal defqtvc :
  (forall v1:int. forall x:int. forall t:int. (dynamic_invariant(v1, true,
  false, true, true) -> (dynamic_invariant(x, false, false, true, true) ->
  (dynamic_invariant(t, false, false, true, true) ->
  (forall v11:int. (dynamic_invariant(v11, true, true, true, true) ->
  (forall t1:int. ((t1 = v11) ->
  (forall x1:int.
  ((exists spark__branch:bool. ((spark__branch = true) and
   (if (spark__branch = true) then (x1 = t1) else (x1 = 0)))) ->
  in_range1(x1)))))))))))
