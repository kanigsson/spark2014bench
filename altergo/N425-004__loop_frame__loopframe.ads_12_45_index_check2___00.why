(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type idx

logic idxqtint : idx -> int

axiom idxqtaxiom : (forall i:idx. (0 <= idxqtint(i)))

axiom idxqtaxiom1 : (forall i:idx. (idxqtint(i) <= 5))

predicate in_range1(x: int) = ((0 <= x) and (x <= 5))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : idx, idx -> bool

logic dummy : idx

type idx__ref = { idx__content : idx
}

function idx__ref_idx__content__projection(a: idx__ref) : idx =
  (a).idx__content

predicate dynamic_invariant(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (0 <= 5)) -> in_range1(temp___expr_160))

type valid_idx

logic valid_idxqtint : valid_idx -> int

axiom valid_idxqtaxiom : (forall i:valid_idx. (1 <= valid_idxqtint(i)))

axiom valid_idxqtaxiom1 : (forall i:valid_idx. (valid_idxqtint(i) <= 5))

predicate in_range2(x: int) = ((1 <= x) and (x <= 5))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : valid_idx, valid_idx -> bool

logic dummy1 : valid_idx

type valid_idx__ref = { valid_idx__content : valid_idx
}

function valid_idx__ref_valid_idx__content__projection(a: valid_idx__ref) : valid_idx =
  (a).valid_idx__content

predicate dynamic_invariant1(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (1 <= 5)) -> in_range2(temp___expr_167))

 (* File "loopframe.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall a:(int,bool) farray.
  (forall v:int. ((v = 0) -> (dynamic_invariant(v, true, false, true,
  true) ->
  (forall v1:int.
  ((((exists x:int. ((x = 1) and
     (exists spark__branch:bool. ((spark__branch = (a[x])) and
     ((not (spark__branch = true)) and
     (exists x1:int. ((x1 = 2) and
     (exists spark__branch1:bool. ((spark__branch1 = (a[x1])) and
     ((not (spark__branch1 = true)) and
     (exists x2:int. ((x2 = 3) and
     (exists spark__branch2:bool. ((spark__branch2 = (a[x2])) and
     ((not (spark__branch2 = true)) and
     (exists x3:int. ((x3 = 4) and
     (exists spark__branch3:bool. ((spark__branch3 = (a[x3])) and
     ((not (spark__branch3 = true)) and
     (exists x4:int. ((x4 = 5) and
     (exists spark__branch4:bool. ((spark__branch4 = (a[x4])) and
     (not (spark__branch4 = true)))))))))))))))))))))))))) and
  (v1 = v)) or
  (exists x:int. ((x = 1) and
  (exists spark__branch:bool. ((spark__branch = (a[x])) and
  (if (spark__branch = true) then (v1 = x) else (exists x1:int. ((x1 = 2) and
                                                (exists spark__branch1:bool.
                                                ((spark__branch1 = (a[x1])) and
                                                (if (spark__branch1 = true) then (v1 = x1) else 
                                                (exists x2:int. ((x2 = 3) and
                                                (exists spark__branch2:bool.
                                                ((spark__branch2 = (a[x2])) and
                                                (if (spark__branch2 = true) then (v1 = x2) else 
                                                (exists x3:int. ((x3 = 4) and
                                                (exists spark__branch3:bool.
                                                ((spark__branch3 = (a[x3])) and
                                                (if (spark__branch3 = true) then (v1 = x3) else 
                                                (exists x4:int. ((x4 = 5) and
                                                (exists spark__branch4:bool.
                                                ((spark__branch4 = (a[x4])) and
                                                ((spark__branch4 = true) and
                                                (v1 = x4))))))))))))))))))))))))))) ->
  (forall loopframe__get__result:int. ((loopframe__get__result = v1) ->
  ((not (loopframe__get__result = 0)) -> (1 <= loopframe__get__result))))))))))
