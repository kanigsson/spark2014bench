(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type e_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : e_type, e_type -> bool

logic dummy : e_type

type e_type__ref = { e_type__content : e_type
}

function e_type__ref_e_type__content__projection(a: e_type__ref) : e_type =
  (a).e_type__content

logic to_rep : e_type -> int

logic of_rep : int -> e_type

axiom inversion_axiom :
  (forall x:e_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:e_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test__c_type__e : e_type
}

function us_split_fields_rec__test__c_type__e__projection(a: us_split_fields) : e_type =
  (a).rec__test__c_type__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__test__c_type__e) = to_rep(((b).us_split_fields1).rec__test__c_type__e)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test__c_type__e__first__bit : int

logic test__c_type__e__last__bit : int

logic test__c_type__e__position : int

axiom test__c_type__e__first__bit_axiom : (0 <= test__c_type__e__first__bit)

axiom test__c_type__e__last__bit_axiom :
  (test__c_type__e__first__bit <  test__c_type__e__last__bit)

axiom test__c_type__e__position_axiom : (0 <= test__c_type__e__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type c_type__ref = { c_type__content : us_rep
}

function c_type__ref_c_type__content__projection(a: c_type__ref) : us_rep =
  (a).c_type__content

logic get_e : us_rep -> int

logic get_e__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 1)) -> in_range1(temp___expr_159))

axiom get_e__post_axiom :
  (forall c:us_rep [get_e(c)]. (let result = get_e(c) : int in
  (get_e__function_guard(result, c) -> dynamic_invariant(result, true, false,
  true, true))))

axiom get_e__def_axiom :
  (forall c:us_rep [get_e(c)].
  (get_e(c) = to_rep(((c).us_split_fields1).rec__test__c_type__e)))

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "test.ads", line 15, characters 0-0 *)
goal defqtvc : (get_e__function_guard(get_e({ us_split_fields1 = {
  rec__test__c_type__e = of_rep(0) } }), { us_split_fields1 = {
  rec__test__c_type__e = of_rep(0) } }) -> (get_e__function_guard(get_e({
  us_split_fields1 = { rec__test__c_type__e = of_rep(0) } }), {
  us_split_fields1 = { rec__test__c_type__e = of_rep(0) } }) ->
  (forall o:e_type. ((to_rep(o) = 0) ->
  (forall c__split_fields:e_type. ((c__split_fields = o) ->
  ((forall c__split_fields1:e_type. get_e__function_guard(get_e({
   us_split_fields1 = { rec__test__c_type__e = c__split_fields1 } }), {
   us_split_fields1 = { rec__test__c_type__e = c__split_fields1 } })) ->
  ((forall c__split_fields1:e_type. get_e__function_guard(get_e({
   us_split_fields1 = { rec__test__c_type__e = c__split_fields1 } }), {
   us_split_fields1 = { rec__test__c_type__e = c__split_fields1 } })) ->
  (forall o1:bool. ((let o2 = { us_split_fields1 = { rec__test__c_type__e =
  c__split_fields } } : us_rep in (let o3 = get_e(o2) : int in
  ((get_e__function_guard(o3, o2) and (dynamic_invariant(o3, true, false,
  true, true) and (o3 = to_rep(c__split_fields)))) and
  (if (o3 = 0) then (let o4 = { us_split_fields1 = { rec__test__c_type__e =
  c__split_fields } } : us_rep in (let o5 = get_e(o4) : int in
  ((get_e__function_guard(o5, o4) and (dynamic_invariant(o5, true, false,
  true, true) and (o5 = to_rep(c__split_fields)))) and
  (o1 = (if (o5 = 1) then true else false))))) else (o1 = false))))) ->
  (forall spark__branch:bool. ((spark__branch = o1) ->
  (not (spark__branch = true))))))))))))))
