(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 10001))

predicate in_range1(x: int) = ((0 <= x) and (x <= 10001))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__partitions__vector__capacity : capacity_range
}

function us_split_discrs_rec__partition_refinement__partitions__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__partition_refinement__partitions__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__partition_refinement__partitions__vector :
us_main_type
}

function us_split_fields_rec__partition_refinement__partitions__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__partition_refinement__partitions__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__6__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__partition_refinement__partitions__vector__capacity) = to_rep(((b).us_split_discrs1).rec__partition_refinement__partitions__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__partition_refinement__partitions__vector,
  ((b).us_split_fields1).rec__partition_refinement__partitions__vector) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic partition_refinement__partitions__vector__capacity__first__bit : int

logic partition_refinement__partitions__vector__capacity__last__bit : int

logic partition_refinement__partitions__vector__capacity__position : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom :
  (partition_refinement__partitions__vector__capacity__first__bit <  partition_refinement__partitions__vector__capacity__last__bit)

axiom partition_refinement__partitions__vector__capacity__position_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

function capacity(container: us_rep) : int =
  to_rep(((container).us_split_discrs1).rec__partition_refinement__partitions__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_1146: int, temp___is_init_1142: bool,
  temp___skip_constant_1143: bool, temp___do_toplevel_1144: bool,
  temp___do_typ_inv_1145: bool) = (((temp___is_init_1142 = true) or
  (0 <= 10001)) -> in_range1(temp___expr_1146))

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  (length(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type index_count

logic index_countqtint : index_count -> int

axiom index_countqtaxiom : (forall i:index_count. (0 <= index_countqtint(i)))

axiom index_countqtaxiom1 :
  (forall i:index_count. (index_countqtint(i) <= 6))

predicate in_range2(x: int) = ((0 <= x) and (x <= 6))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : index_count, index_count -> bool

logic dummy2 : index_count

type index_count__ref = { index_count__content : index_count
}

function index_count__ref_index_count__content__projection(a: index_count__ref) : index_count =
  (a).index_count__content

function to_rep1(x: index_count) : int = index_countqtint(x)

logic of_rep1 : int -> index_count

axiom inversion_axiom1 :
  (forall x:index_count [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_count [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 5))

predicate in_range3(x: int) = ((0 <= x) and (x <= 5))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

function to_rep2(x: index) : int = indexqtint(x)

logic of_rep2 : int -> index

axiom inversion_axiom2 :
  (forall x:index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:index [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__partition_refinement__interval__first : index;
rec__partition_refinement__interval__last : index;
rec__partition_refinement__interval__count : index_count
}

function us_split_fields_rec__partition_refinement__interval__first__projection(a: us_split_fields2) : index =
  (a).rec__partition_refinement__interval__first

function us_split_fields_rec__partition_refinement__interval__last__projection(a: us_split_fields2) : index =
  (a).rec__partition_refinement__interval__last

function us_split_fields_rec__partition_refinement__interval__count__projection(a: us_split_fields2) : index_count =
  (a).rec__partition_refinement__interval__count

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__5__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep2(((a).us_split_fields3).rec__partition_refinement__interval__first) = to_rep2(((b).us_split_fields3).rec__partition_refinement__interval__first)) and
  (to_rep2(((a).us_split_fields3).rec__partition_refinement__interval__last) = to_rep2(((b).us_split_fields3).rec__partition_refinement__interval__last))) and
  (to_rep1(((a).us_split_fields3).rec__partition_refinement__interval__count) = to_rep1(((b).us_split_fields3).rec__partition_refinement__interval__count))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic partition_refinement__interval__first__first__bit : int

logic partition_refinement__interval__first__last__bit : int

logic partition_refinement__interval__first__position : int

axiom partition_refinement__interval__first__first__bit_axiom :
  (0 <= partition_refinement__interval__first__first__bit)

axiom partition_refinement__interval__first__last__bit_axiom :
  (partition_refinement__interval__first__first__bit <  partition_refinement__interval__first__last__bit)

axiom partition_refinement__interval__first__position_axiom :
  (0 <= partition_refinement__interval__first__position)

logic partition_refinement__interval__last__first__bit : int

logic partition_refinement__interval__last__last__bit : int

logic partition_refinement__interval__last__position : int

axiom partition_refinement__interval__last__first__bit_axiom :
  (0 <= partition_refinement__interval__last__first__bit)

axiom partition_refinement__interval__last__last__bit_axiom :
  (partition_refinement__interval__last__first__bit <  partition_refinement__interval__last__last__bit)

axiom partition_refinement__interval__last__position_axiom :
  (0 <= partition_refinement__interval__last__position)

logic partition_refinement__interval__count__first__bit : int

logic partition_refinement__interval__count__last__bit : int

logic partition_refinement__interval__count__position : int

axiom partition_refinement__interval__count__first__bit_axiom :
  (0 <= partition_refinement__interval__count__first__bit)

axiom partition_refinement__interval__count__last__bit_axiom :
  (partition_refinement__interval__count__first__bit <  partition_refinement__interval__count__last__bit)

axiom partition_refinement__interval__count__position_axiom :
  (0 <= partition_refinement__interval__count__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type interval__ref = { interval__content : us_rep1
}

function interval__ref_interval__content__projection(a: interval__ref) : us_rep1 =
  (a).interval__content

type element_type__ref = { element_type__content : us_rep1
}

function element_type__ref_element_type__content__8__projection(a: element_type__ref) : us_rep1 =
  (a).element_type__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq6 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__3__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

type element_type__ref1 = { element_type__content1 : us_rep1
}

function element_type__ref_element_type__content__9__projection(a: element_type__ref1) : us_rep1 =
  (a).element_type__content1

logic get : us_rep2, int -> us_rep1

logic get__function_guard : us_rep1, us_rep2, int -> prop

logic model : us_rep -> us_rep2

logic model__function_guard : us_rep2, us_rep -> prop

logic length1 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

function last(container: us_rep2) : int = ((- 1) + length1(container))

logic last__function_guard : int, us_rep2 -> prop

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

logic first_index__function_guard : int, us_rep -> prop

function element(container: us_rep, index1: int) : us_rep1 =
  get(model(container), index1)

logic element__function_guard : us_rep1, us_rep, int -> prop

logic bool_eq7 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq7(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq7(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function equal_except(left: us_rep2, right: us_rep2, position: int) : bool =
  andb(bool_eq7(length1(left), length1(right)),
  (if (forall i:int. (((0 <= i) and (i <= last(left))) ->
      ((not (i = position)) -> (bool_eq5(get(left, i), get(right,
      i)) = true)))) then true else false))

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

function olt(left: us_rep2, right: us_rep2) : bool =
  andb(bool_lt(length1(left), length1(right)),
  (if (forall n:int. (((0 <= n) and (n <= last(left))) -> (bool_eq5(get(left,
      n), get(right, n)) = true))) then true else false))

logic olt__function_guard : bool, us_rep2, us_rep2 -> prop

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic partition_refinement__partitions__vector__capacity__first__bit1 : int

logic partition_refinement__partitions__vector__capacity__last__bit1 : int

logic partition_refinement__partitions__vector__capacity__position1 : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit1)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom1 :
  (partition_refinement__partitions__vector__capacity__first__bit1 <  partition_refinement__partitions__vector__capacity__last__bit1)

axiom partition_refinement__partitions__vector__capacity__position_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type partition__ref = { partition__content : us_rep
}

function partition__ref_partition__content__projection(a: partition__ref) : us_rep =
  (a).partition__content

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq(a, b)))

logic p__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

type partition_index

logic partition_indexqtint : partition_index -> int

axiom partition_indexqtaxiom :
  (forall i:partition_index. (0 <= partition_indexqtint(i)))

axiom partition_indexqtaxiom1 :
  (forall i:partition_index. (partition_indexqtint(i) <= 10000))

predicate in_range4(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : partition_index, partition_index -> bool

logic dummy7 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref_partition_index__content__projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

function to_rep3(x: partition_index) : int = partition_indexqtint(x)

logic of_rep3 : int -> partition_index

axiom inversion_axiom3 :
  (forall x:partition_index [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:partition_index [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type map__ref = { map__content : (int,partition_index) farray
}

logic slide : (int,partition_index) farray, int,
  int -> (int,partition_index) farray

axiom slide_eq :
  (forall a:(int,partition_index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,partition_index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,partition_index) farray, a__first: int,
  a__last: int, b: (int,partition_index) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_403:int. (((a__first <= temp___idx_403) and
  (temp___idx_403 <= a__last)) ->
  (to_rep3((a[temp___idx_403])) = to_rep3((b[((b__first - a__first) + temp___idx_403)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_403:int. (((a__first <= temp___idx_403) and
  (temp___idx_403 <= a__last)) ->
  (to_rep3((a[temp___idx_403])) = to_rep3((b[((b__first - a__first) + temp___idx_403)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r19b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic r21b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic r22b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_invariant1(temp___expr_423: int, temp___is_init_419: bool,
  temp___skip_constant_420: bool, temp___do_toplevel_421: bool,
  temp___do_typ_inv_422: bool) = (((temp___is_init_419 = true) or
  (0 <= 5)) -> in_range3(temp___expr_423))

type tcount_typeB

logic tcount_typeBqtint : tcount_typeB -> int

axiom tcount_typeBqtaxiom :
  (forall i:tcount_typeB. ((- 2147483648) <= tcount_typeBqtint(i)))

axiom tcount_typeBqtaxiom1 :
  (forall i:tcount_typeB. (tcount_typeBqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : tcount_typeB, tcount_typeB -> bool

logic dummy8 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref_tcount_typeB__content__projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type tpartition_indexB

logic tpartition_indexBqtint : tpartition_indexB -> int

axiom tpartition_indexBqtaxiom :
  (forall i:tpartition_indexB. ((- 32768) <= tpartition_indexBqtint(i)))

axiom tpartition_indexBqtaxiom1 :
  (forall i:tpartition_indexB. (tpartition_indexBqtint(i) <= 32767))

predicate in_range6(x: int) = (((- 32768) <= x) and (x <= 32767))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : tpartition_indexB, tpartition_indexB -> bool

logic dummy9 : tpartition_indexB

type tpartition_indexB__ref = { tpartition_indexB__content :
tpartition_indexB
}

function tpartition_indexB__ref_tpartition_indexB__content__projection(a: tpartition_indexB__ref) : tpartition_indexB =
  (a).tpartition_indexB__content

predicate dynamic_invariant2(temp___expr_1115: int,
  temp___is_init_1111: bool, temp___skip_constant_1112: bool,
  temp___do_toplevel_1113: bool, temp___do_typ_inv_1114: bool) =
  (((temp___is_init_1111 = true) or (0 <= 10000)) ->
  in_range4(temp___expr_1115))

function to_rep4(x: tpartition_indexB) : int = tpartition_indexBqtint(x)

logic of_rep4 : int -> tpartition_indexB

axiom inversion_axiom4 :
  (forall x:tpartition_indexB [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:tpartition_indexB [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : tpartition_indexB, tpartition_indexB -> bool

logic dummy10 : tpartition_indexB

type t20b__ref = { t20b__content : tpartition_indexB
}

function t20b__ref_t20b__content__projection(a: t20b__ref) : tpartition_indexB =
  (a).t20b__content

predicate dynamic_invariant3(temp___expr_416: int, temp___is_init_412: bool,
  temp___skip_constant_413: bool, temp___do_toplevel_414: bool,
  temp___do_typ_inv_415: bool) = (((temp___is_init_412 = true) or
  (0 <= 6)) -> in_range2(temp___expr_416))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : count_type, count_type -> bool

logic dummy11 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant4(temp___expr_447: int, temp___is_init_443: bool,
  temp___skip_constant_444: bool, temp___do_toplevel_445: bool,
  temp___do_typ_inv_446: bool) = (((temp___is_init_443 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_447))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((- 1) <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 10001))

predicate in_range8(x: int) = (((- 1) <= x) and (x <= 10001))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy12 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant5(temp___expr_1139: int,
  temp___is_init_1135: bool, temp___skip_constant_1136: bool,
  temp___do_toplevel_1137: bool, temp___do_typ_inv_1138: bool) =
  (((temp___is_init_1135 = true) or ((- 1) <= 10001)) ->
  in_range8(temp___expr_1139))

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq7(length1(left), length1(right)),
  (if (forall n:int. (((0 <= n) and (n <= last(left))) -> (bool_eq5(get(left,
      n), get(right, n)) = true))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_1188: us_rep2,
  temp___skip_top_level_1189: bool) =
  ((not (temp___skip_top_level_1189 = true)) ->
  (length1(temp___expr_1188) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (0 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 10000))

predicate in_range9(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : index_type, index_type -> bool

logic dummy13 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__3__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant6(temp___expr_1122: int,
  temp___is_init_1118: bool, temp___skip_constant_1119: bool,
  temp___do_toplevel_1120: bool, temp___do_typ_inv_1121: bool) =
  (((temp___is_init_1118 = true) or (0 <= 10000)) ->
  in_range9(temp___expr_1122))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. ((- 1) <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 10000))

predicate in_range10(x: int) = (((- 1) <= x) and (x <= 10000))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : extended_index1, extended_index1 -> bool

logic dummy14 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__4__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant7(temp___expr_1180: int,
  temp___is_init_1176: bool, temp___skip_constant_1177: bool,
  temp___do_toplevel_1178: bool, temp___do_typ_inv_1179: bool) =
  (((temp___is_init_1176 = true) or ((- 1) <= 10000)) ->
  in_range10(temp___expr_1180))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length1(container)].
  (((- 1) + length1(container)) <= 10000))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length1(container)].
  dynamic_invariant4(length1(container), true, false, true, true))

logic rliteral : index_count

axiom rliteral_axiom : (index_countqtint(rliteral) = 0)

 (* File "partition_refinement.adb", line 45, characters 0-0 *)
goal defqtvc :
  (forall p__split_fields:us_main_type. forall p_prime_index:int.
  ((((2 * length({ us_split_discrs1 = p__split_discrs; us_split_fields1 = {
  rec__partition_refinement__partitions__vector = p__split_fields }
  })) <= capacity({ us_split_discrs1 = p__split_discrs; us_split_fields1 = {
  rec__partition_refinement__partitions__vector = p__split_fields } })) and
  (length({ us_split_discrs1 = p__split_discrs; us_split_fields1 = {
  rec__partition_refinement__partitions__vector = p__split_fields }
  }) <= 5000)) -> (dynamic_invariant2(p_prime_index, false, false, true,
  true) -> (let o = { us_split_discrs1 = p__split_discrs; us_split_fields1 =
  { rec__partition_refinement__partitions__vector = p__split_fields } }
  : us_rep in (let o1 = length(o) : int in ((dynamic_invariant(o1, true,
  false, true, true) and (o1 <= capacity(o))) -> (((o1 - 1) = r19b) ->
  (in_range6(r19b) ->
  (forall j:int. ((j = 0) -> ((andb((if (0 <= j) then true else false),
  (if (j <= r19b) then true else false)) = true) -> (let usf = length({
  us_split_discrs1 = p__split_discrs; us_split_fields1 = {
  rec__partition_refinement__partitions__vector = p__split_fields } })
  : int in (let o2 = capacity({ us_split_discrs1 = p__split_discrs;
  us_split_fields1 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) : int in ((dynamic_invariant(o2, true, false, true,
  true) and
  (o2 = to_rep((p__split_discrs).rec__partition_refinement__partitions__vector__capacity))) ->
  (forall p__split_fields1:us_main_type. forall p_prime_index1:int.
  forall j1:int. (((capacity({ us_split_discrs1 = p__split_discrs;
  us_split_fields1 = { rec__partition_refinement__partitions__vector =
  p__split_fields1 } }) = capacity({ us_split_discrs1 = p__split_discrs;
  us_split_fields1 = { rec__partition_refinement__partitions__vector =
  p__split_fields } })) and ((0 <= (length({ us_split_discrs1 =
  p__split_discrs; us_split_fields1 = {
  rec__partition_refinement__partitions__vector = p__split_fields1 }
  }) - usf)) and ((length({ us_split_discrs1 = p__split_discrs;
  us_split_fields1 = { rec__partition_refinement__partitions__vector =
  p__split_fields1 } }) - usf) <= j1))) -> ((andb((if (dynamic_property(0,
  r19b, j1) and dynamic_invariant2(p_prime_index1, false, true, true,
  true)) then true else false), (if ((0 <= j1) and
  (j1 <= r19b)) then true else false)) = true) -> (let o3 = {
  us_split_discrs1 = p__split_discrs; us_split_fields1 = {
  rec__partition_refinement__partitions__vector = p__split_fields1 } }
  : us_rep in (let temp___2249 = element(o3, j1) : us_rep1 in
  ((bool_eq5(temp___2249, get(model(o3), j1)) = true) ->
  (forall p_elem__split_fields:us_split_fields2.
  ((p_elem__split_fields = (temp___2249).us_split_fields3) ->
  (forall o4:int.
  ((to_rep2((p_elem__split_fields).rec__partition_refinement__interval__first) = o4) ->
  (forall o5:int.
  ((to_rep2((p_elem__split_fields).rec__partition_refinement__interval__last) = o5) ->
  (forall o6:int.
  ((to_rep1((p_elem__split_fields).rec__partition_refinement__interval__count) = o6) ->
  (forall o7:int.
  ((to_rep1((p_elem__split_fields).rec__partition_refinement__interval__count) = o7) ->
  (forall spark__branch:bool.
  ((spark__branch = andb((if (1 <= o7) then true else false),
  (if (o6 <= (o5 - o4)) then true else false))) -> ((spark__branch = true) ->
  (forall o8:int.
  ((to_rep1((p_elem__split_fields).rec__partition_refinement__interval__count) = o8) ->
  (forall o9:int.
  ((to_rep2((p_elem__split_fields).rec__partition_refinement__interval__first) = o9) ->
  (let o10 = (o9 + o8) : int in (in_range3(o10) ->
  (forall o11:index. ((to_rep2(o11) = o10) ->
  (forall p_prime__split_fields:us_split_fields2. ((p_prime__split_fields = {
  rec__partition_refinement__interval__first = o11;
  rec__partition_refinement__interval__last =
  (p_elem__split_fields).rec__partition_refinement__interval__last;
  rec__partition_refinement__interval__count = rliteral }) ->
  (forall o12:int.
  ((to_rep1((p_elem__split_fields).rec__partition_refinement__interval__count) = o12) ->
  (forall o13:int.
  ((to_rep2((p_elem__split_fields).rec__partition_refinement__interval__first) = o13) ->
  (let o14 = ((o13 + o12) - 1) : int in (in_range3(o14) ->
  (forall o15:index. ((to_rep2(o15) = o14) ->
  (forall p_elem__split_fields1:us_split_fields2. ((p_elem__split_fields1 = {
  rec__partition_refinement__interval__first =
  (p_elem__split_fields).rec__partition_refinement__interval__first;
  rec__partition_refinement__interval__last = o15;
  rec__partition_refinement__interval__count =
  (p_elem__split_fields).rec__partition_refinement__interval__count }) ->
  (forall p_elem__split_fields2:us_split_fields2. ((p_elem__split_fields2 = {
  rec__partition_refinement__interval__first =
  (p_elem__split_fields1).rec__partition_refinement__interval__first;
  rec__partition_refinement__interval__last =
  (p_elem__split_fields1).rec__partition_refinement__interval__last;
  rec__partition_refinement__interval__count = rliteral }) -> (0 <= j1))))))))))))))))))))))))))))))))))))))))))))))))))))))))
