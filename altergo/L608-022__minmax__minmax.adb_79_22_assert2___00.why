(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic x : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type e

predicate in_range(x1: int) = ((0 <= x1) and (x1 <= 3))

function bool_eq(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : e, e -> bool

logic dummy : e

type e__ref = { e__content : e
}

function e__ref_e__content__projection(a: e__ref) : e = (a).e__content

predicate dynamic_invariant(temp___expr_193: int, temp___is_init_189: bool,
  temp___skip_constant_190: bool, temp___do_toplevel_191: bool,
  temp___do_typ_inv_192: bool) = (((temp___is_init_189 = true) or
  (0 <= 3)) -> in_range(temp___expr_193))

 (* File "minmax.adb", line 70, characters 0-0 *)
goal defqtvc :
  (forall mine:int. forall maxe:int. (dynamic_invariant(mine, false, false,
  true, true) -> (dynamic_invariant(maxe, false, false, true, true) ->
  (dynamic_invariant(x, true, false, true, true) -> (dynamic_invariant(y,
  true, false, true, true) -> ((x <  y) ->
  (forall mine1:int. ((mine1 = min(x, y)) ->
  (forall maxe1:int. ((maxe1 = max(x, y)) -> ((mine1 = x) -> (maxe1 = y))))))))))))
