(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__test_constrained__r__b : bool
}

function us_split_discrs_rec__test_constrained__r__b__projection(a: us_split_discrs) : bool =
  (a).rec__test_constrained__r__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test_constrained__r__x : integer
}

function us_split_fields_rec__test_constrained__r__x__projection(a: us_split_fields) : integer =
  (a).rec__test_constrained__r__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__test_constrained__r__b) = to_int(((b).us_split_discrs1).rec__test_constrained__r__b)) and
  (to_rep(((a).us_split_fields1).rec__test_constrained__r__x) = to_rep(((b).us_split_fields1).rec__test_constrained__r__x))) then true else false)

predicate in_range2(rec__test_constrained__r__b1: bool, a: us_split_discrs) =
  (rec__test_constrained__r__b1 = (a).rec__test_constrained__r__b)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_constrained__r__b__first__bit : int

logic test_constrained__r__b__last__bit : int

logic test_constrained__r__b__position : int

axiom test_constrained__r__b__first__bit_axiom :
  (0 <= test_constrained__r__b__first__bit)

axiom test_constrained__r__b__last__bit_axiom :
  (test_constrained__r__b__first__bit <  test_constrained__r__b__last__bit)

axiom test_constrained__r__b__position_axiom :
  (0 <= test_constrained__r__b__position)

logic test_constrained__r__x__first__bit : int

logic test_constrained__r__x__last__bit : int

logic test_constrained__r__x__position : int

axiom test_constrained__r__x__first__bit_axiom :
  (0 <= test_constrained__r__x__first__bit)

axiom test_constrained__r__x__last__bit_axiom :
  (test_constrained__r__x__first__bit <  test_constrained__r__x__last__bit)

axiom test_constrained__r__x__position_axiom :
  (0 <= test_constrained__r__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type r__ref = { r__content : us_rep
}

function r__ref_r__content__projection(a: r__ref) : us_rep = (a).r__content

logic attr__ATTRIBUTE_ADDRESS : int

logic r23b : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_rep1 = { rec__test_constrained__r_acc__is_null_pointer : bool;
rec__test_constrained__r_acc__pointer_address : int;
rec__test_constrained__r_acc__pointer_value : us_rep
}

function us_rep_rec__test_constrained__r_acc__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__test_constrained__r_acc__is_null_pointer

function us_rep_rec__test_constrained__r_acc__pointer_address__projection(a: us_rep1) : int =
  (a).rec__test_constrained__r_acc__pointer_address

function us_rep_rec__test_constrained__r_acc__pointer_value__projection(a: us_rep1) : us_rep =
  (a).rec__test_constrained__r_acc__pointer_value

type us_rep__ref = { us_rep__content : us_rep1
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep1 =
  (a).us_rep__content

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__test_constrained__r_acc__is_null_pointer = (b).rec__test_constrained__r_acc__is_null_pointer) and
  ((not ((a).rec__test_constrained__r_acc__is_null_pointer = true)) ->
  (((a).rec__test_constrained__r_acc__pointer_address = (b).rec__test_constrained__r_acc__pointer_address) and
  ((a).rec__test_constrained__r_acc__pointer_value = (b).rec__test_constrained__r_acc__pointer_value)))) then true else false)

predicate rec__test_constrained__r_acc__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__test_constrained__r_acc__is_null_pointer = true))

logic us_null_pointer : us_rep1

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__test_constrained__r_acc__is_null_pointer = true)

logic dummy2 : us_rep1

type r_acc__ref = { r_acc__content : us_rep1
}

function r_acc__ref_r_acc__content__projection(a: r_acc__ref) : us_rep1 =
  (a).r_acc__content

predicate default_initial_assumption(temp___expr_211: us_rep1,
  temp___skip_top_level_212: bool) =
  ((temp___expr_211).rec__test_constrained__r_acc__is_null_pointer = true)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic test_constrained__r__b__first__bit1 : int

logic test_constrained__r__b__last__bit1 : int

logic test_constrained__r__b__position1 : int

axiom test_constrained__r__b__first__bit_axiom1 :
  (0 <= test_constrained__r__b__first__bit1)

axiom test_constrained__r__b__last__bit_axiom1 :
  (test_constrained__r__b__first__bit1 <  test_constrained__r__b__last__bit1)

axiom test_constrained__r__b__position_axiom1 :
  (0 <= test_constrained__r__b__position1)

logic test_constrained__r__x__first__bit1 : int

logic test_constrained__r__x__last__bit1 : int

logic test_constrained__r__x__position1 : int

axiom test_constrained__r__x__first__bit_axiom1 :
  (0 <= test_constrained__r__x__first__bit1)

axiom test_constrained__r__x__last__bit_axiom1 :
  (test_constrained__r__x__first__bit1 <  test_constrained__r__x__last__bit1)

axiom test_constrained__r__x__position_axiom1 :
  (0 <= test_constrained__r__x__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t21b__ref = { t21b__content : us_rep
}

function t21b__ref_t21b__content__projection(a: t21b__ref) : us_rep =
  (a).t21b__content

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test_constrained__r__b__first__bit2 : int

logic test_constrained__r__b__last__bit2 : int

logic test_constrained__r__b__position2 : int

axiom test_constrained__r__b__first__bit_axiom2 :
  (0 <= test_constrained__r__b__first__bit2)

axiom test_constrained__r__b__last__bit_axiom2 :
  (test_constrained__r__b__first__bit2 <  test_constrained__r__b__last__bit2)

axiom test_constrained__r__b__position_axiom2 :
  (0 <= test_constrained__r__b__position2)

logic test_constrained__r__x__first__bit2 : int

logic test_constrained__r__x__last__bit2 : int

logic test_constrained__r__x__position2 : int

axiom test_constrained__r__x__first__bit_axiom2 :
  (0 <= test_constrained__r__x__first__bit2)

axiom test_constrained__r__x__last__bit_axiom2 :
  (test_constrained__r__x__first__bit2 <  test_constrained__r__x__last__bit2)

axiom test_constrained__r__x__position_axiom2 :
  (0 <= test_constrained__r__x__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type s22b__ref = { s22b__content : us_rep
}

function s22b__ref_s22b__content__projection(a: s22b__ref) : us_rep =
  (a).s22b__content

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic test_constrained__r__b__first__bit3 : int

logic test_constrained__r__b__last__bit3 : int

logic test_constrained__r__b__position3 : int

axiom test_constrained__r__b__first__bit_axiom3 :
  (0 <= test_constrained__r__b__first__bit3)

axiom test_constrained__r__b__last__bit_axiom3 :
  (test_constrained__r__b__first__bit3 <  test_constrained__r__b__last__bit3)

axiom test_constrained__r__b__position_axiom3 :
  (0 <= test_constrained__r__b__position3)

logic test_constrained__r__x__first__bit3 : int

logic test_constrained__r__x__last__bit3 : int

logic test_constrained__r__x__position3 : int

axiom test_constrained__r__x__first__bit_axiom3 :
  (0 <= test_constrained__r__x__first__bit3)

axiom test_constrained__r__x__last__bit_axiom3 :
  (test_constrained__r__x__first__bit3 <  test_constrained__r__x__last__bit3)

axiom test_constrained__r__x__position_axiom3 :
  (0 <= test_constrained__r__x__position3)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type t24b__ref = { t24b__content : us_rep
}

function t24b__ref_t24b__content__projection(a: t24b__ref) : us_rep =
  (a).t24b__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate default_initial_assumption1(temp___expr_182: us_rep,
  temp___skip_top_level_183: bool) =
  ((((temp___expr_182).us_split_discrs1).rec__test_constrained__r__b = of_int(1)) and
  (to_rep(((temp___expr_182).us_split_fields1).rec__test_constrained__r__x) = 0))

predicate dynamic_invariant1(temp___expr_235: us_rep,
  temp___is_init_231: bool, temp___skip_constant_232: bool,
  temp___do_toplevel_233: bool, temp___do_typ_inv_234: bool) =
  ((not (temp___skip_constant_232 = true)) -> in_range2(r23b,
  (temp___expr_235).us_split_discrs1))

predicate default_initial_assumption2(temp___expr_237: us_rep,
  temp___skip_top_level_238: bool) =
  ((((temp___expr_237).us_split_discrs1).rec__test_constrained__r__b = r23b) and
  (to_rep(((temp___expr_237).us_split_fields1).rec__test_constrained__r__x) = 0))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

 (* File "test_constrained.adb", line 30, characters 0-0 *)
goal defqtvc :
  (forall us_next_pointer_address:int.
  (forall test_constrained__test_4__y__assume:us_rep1.
  ((andb((if ((not ((test_constrained__test_4__y__assume).rec__test_constrained__r_acc__is_null_pointer = true)) and
  ((test_constrained__test_4__y__assume).rec__test_constrained__r_acc__pointer_address = us_next_pointer_address)) then true else false),
  (if ((test_constrained__test_4__y__assume).rec__test_constrained__r_acc__pointer_value = {
  us_split_discrs1 = { rec__test_constrained__r__b = of_int(0) };
  us_split_fields1 = { rec__test_constrained__r__x = rliteral }
  }) then true else false)) = true) ->
  (forall y__pointer_value:us_rep.
  ((y__pointer_value = (test_constrained__test_4__y__assume).rec__test_constrained__r_acc__pointer_value) ->
  (forall y__pointer_address:int.
  ((y__pointer_address = (test_constrained__test_4__y__assume).rec__test_constrained__r_acc__pointer_address) ->
  (forall y__is_null_pointer:bool.
  ((y__is_null_pointer = (test_constrained__test_4__y__assume).rec__test_constrained__r_acc__is_null_pointer) ->
  ((((y__pointer_value).us_split_discrs1).rec__test_constrained__r__b = r23b) ->
  rec__test_constrained__r_acc__pointer_value__pred({
  rec__test_constrained__r_acc__is_null_pointer = y__is_null_pointer;
  rec__test_constrained__r_acc__pointer_address = y__pointer_address;
  rec__test_constrained__r_acc__pointer_value = y__pointer_value })))))))))))
