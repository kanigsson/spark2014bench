(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__test_dic__nested__p3__x : bool
}

function us_split_discrs_rec__test_dic__nested__p3__x__projection(a: us_split_discrs) : bool =
  (a).rec__test_dic__nested__p3__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test_dic__nested__p3__c : integer
}

function us_split_fields_rec__test_dic__nested__p3__c__projection(a: us_split_fields) : integer =
  (a).rec__test_dic__nested__p3__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__test_dic__nested__p3__x) = to_int(((b).us_split_discrs1).rec__test_dic__nested__p3__x)) and
  (to_rep(((a).us_split_fields1).rec__test_dic__nested__p3__c) = to_rep(((b).us_split_fields1).rec__test_dic__nested__p3__c))) then true else false)

predicate in_range2(rec__test_dic__nested__p3__x1: bool,
  a: us_split_discrs) =
  (rec__test_dic__nested__p3__x1 = (a).rec__test_dic__nested__p3__x)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_dic__nested__p3__x__first__bit : int

logic test_dic__nested__p3__x__last__bit : int

logic test_dic__nested__p3__x__position : int

axiom test_dic__nested__p3__x__first__bit_axiom :
  (0 <= test_dic__nested__p3__x__first__bit)

axiom test_dic__nested__p3__x__last__bit_axiom :
  (test_dic__nested__p3__x__first__bit <  test_dic__nested__p3__x__last__bit)

axiom test_dic__nested__p3__x__position_axiom :
  (0 <= test_dic__nested__p3__x__position)

logic test_dic__nested__p3__c__first__bit : int

logic test_dic__nested__p3__c__last__bit : int

logic test_dic__nested__p3__c__position : int

axiom test_dic__nested__p3__c__first__bit_axiom :
  (0 <= test_dic__nested__p3__c__first__bit)

axiom test_dic__nested__p3__c__last__bit_axiom :
  (test_dic__nested__p3__c__first__bit <  test_dic__nested__p3__c__last__bit)

axiom test_dic__nested__p3__c__position_axiom :
  (0 <= test_dic__nested__p3__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type p3__ref = { p3__content : us_rep
}

function p3__ref_p3__content__projection(a: p3__ref) : us_rep =
  (a).p3__content

type us_split_discrs2 = { rec__test_dic__nested__p4__x : bool
}

function us_split_discrs_rec__test_dic__nested__p4__x__projection(a: us_split_discrs2) : bool =
  (a).rec__test_dic__nested__p4__x

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__4__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__test_dic__nested__p4__c : integer
}

function us_split_fields_rec__test_dic__nested__p4__c__projection(a: us_split_fields2) : integer =
  (a).rec__test_dic__nested__p4__c

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__4__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((to_int(((a).us_split_discrs3).rec__test_dic__nested__p4__x) = to_int(((b).us_split_discrs3).rec__test_dic__nested__p4__x)) and
  (to_rep(((a).us_split_fields3).rec__test_dic__nested__p4__c) = to_rep(((b).us_split_fields3).rec__test_dic__nested__p4__c))) then true else false)

predicate in_range3(rec__test_dic__nested__p4__x1: bool,
  a: us_split_discrs2) =
  (rec__test_dic__nested__p4__x1 = (a).rec__test_dic__nested__p4__x)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic test_dic__nested__p4__x__first__bit : int

logic test_dic__nested__p4__x__last__bit : int

logic test_dic__nested__p4__x__position : int

axiom test_dic__nested__p4__x__first__bit_axiom :
  (0 <= test_dic__nested__p4__x__first__bit)

axiom test_dic__nested__p4__x__last__bit_axiom :
  (test_dic__nested__p4__x__first__bit <  test_dic__nested__p4__x__last__bit)

axiom test_dic__nested__p4__x__position_axiom :
  (0 <= test_dic__nested__p4__x__position)

logic test_dic__nested__p4__c__first__bit : int

logic test_dic__nested__p4__c__last__bit : int

logic test_dic__nested__p4__c__position : int

axiom test_dic__nested__p4__c__first__bit_axiom :
  (0 <= test_dic__nested__p4__c__first__bit)

axiom test_dic__nested__p4__c__last__bit_axiom :
  (test_dic__nested__p4__c__first__bit <  test_dic__nested__p4__c__last__bit)

axiom test_dic__nested__p4__c__position_axiom :
  (0 <= test_dic__nested__p4__c__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type p4__ref = { p4__content : us_rep1
}

function p4__ref_p4__content__projection(a: p4__ref) : us_rep1 =
  (a).p4__content

type us_split_discrs4 = { rec__test_dic__nested__p5__x : bool
}

function us_split_discrs_rec__test_dic__nested__p5__x__projection(a: us_split_discrs4) : bool =
  (a).rec__test_dic__nested__p5__x

type us_split_discrs__ref2 = { us_split_discrs__content2 : us_split_discrs4
}

function us_split_discrs__ref___split_discrs__content__5__projection(a: us_split_discrs__ref2) : us_split_discrs4 =
  (a).us_split_discrs__content2

type us_split_fields4 = { rec__test_dic__nested__p5__c : integer
}

function us_split_fields_rec__test_dic__nested__p5__c__projection(a: us_split_fields4) : integer =
  (a).rec__test_dic__nested__p5__c

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs5 : us_split_discrs4; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__5__projection(a: us_rep2) : us_split_discrs4 =
  (a).us_split_discrs5

function us_rep___split_fields__5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq4(a: us_rep2, b: us_rep2) : bool =
  (if ((to_int(((a).us_split_discrs5).rec__test_dic__nested__p5__x) = to_int(((b).us_split_discrs5).rec__test_dic__nested__p5__x)) and
  (to_rep(((a).us_split_fields5).rec__test_dic__nested__p5__c) = to_rep(((b).us_split_fields5).rec__test_dic__nested__p5__c))) then true else false)

predicate in_range4(rec__test_dic__nested__p5__x1: bool,
  a: us_split_discrs4) =
  (rec__test_dic__nested__p5__x1 = (a).rec__test_dic__nested__p5__x)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic test_dic__nested__p5__x__first__bit : int

logic test_dic__nested__p5__x__last__bit : int

logic test_dic__nested__p5__x__position : int

axiom test_dic__nested__p5__x__first__bit_axiom :
  (0 <= test_dic__nested__p5__x__first__bit)

axiom test_dic__nested__p5__x__last__bit_axiom :
  (test_dic__nested__p5__x__first__bit <  test_dic__nested__p5__x__last__bit)

axiom test_dic__nested__p5__x__position_axiom :
  (0 <= test_dic__nested__p5__x__position)

logic test_dic__nested__p5__c__first__bit : int

logic test_dic__nested__p5__c__last__bit : int

logic test_dic__nested__p5__c__position : int

axiom test_dic__nested__p5__c__first__bit_axiom :
  (0 <= test_dic__nested__p5__c__first__bit)

axiom test_dic__nested__p5__c__last__bit_axiom :
  (test_dic__nested__p5__c__first__bit <  test_dic__nested__p5__c__last__bit)

axiom test_dic__nested__p5__c__position_axiom :
  (0 <= test_dic__nested__p5__c__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type p5__ref = { p5__content : us_rep2
}

function p5__ref_p5__content__projection(a: p5__ref) : us_rep2 =
  (a).p5__content

logic id : us_rep2 -> us_rep2

logic id__function_guard : us_rep2, us_rep2 -> prop

type us_split_discrs6 = { rec__test_dic__nested__p1__x : bool
}

function us_split_discrs_rec__test_dic__nested__p1__x__projection(a: us_split_discrs6) : bool =
  (a).rec__test_dic__nested__p1__x

type us_split_discrs__ref3 = { us_split_discrs__content3 : us_split_discrs6
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref3) : us_split_discrs6 =
  (a).us_split_discrs__content3

type us_split_fields6 = { rec__test_dic__nested__p1__c : integer
}

function us_split_fields_rec__test_dic__nested__p1__c__projection(a: us_split_fields6) : integer =
  (a).rec__test_dic__nested__p1__c

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs7 : us_split_discrs6; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__projection(a: us_rep3) : us_split_discrs6 =
  (a).us_split_discrs7

function us_rep___split_fields__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq5(a: us_rep3, b: us_rep3) : bool =
  (if ((to_int(((a).us_split_discrs7).rec__test_dic__nested__p1__x) = to_int(((b).us_split_discrs7).rec__test_dic__nested__p1__x)) and
  (to_rep(((a).us_split_fields7).rec__test_dic__nested__p1__c) = to_rep(((b).us_split_fields7).rec__test_dic__nested__p1__c))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic test_dic__nested__p1__x__first__bit : int

logic test_dic__nested__p1__x__last__bit : int

logic test_dic__nested__p1__x__position : int

axiom test_dic__nested__p1__x__first__bit_axiom :
  (0 <= test_dic__nested__p1__x__first__bit)

axiom test_dic__nested__p1__x__last__bit_axiom :
  (test_dic__nested__p1__x__first__bit <  test_dic__nested__p1__x__last__bit)

axiom test_dic__nested__p1__x__position_axiom :
  (0 <= test_dic__nested__p1__x__position)

logic test_dic__nested__p1__c__first__bit : int

logic test_dic__nested__p1__c__last__bit : int

logic test_dic__nested__p1__c__position : int

axiom test_dic__nested__p1__c__first__bit_axiom :
  (0 <= test_dic__nested__p1__c__first__bit)

axiom test_dic__nested__p1__c__last__bit_axiom :
  (test_dic__nested__p1__c__first__bit <  test_dic__nested__p1__c__last__bit)

axiom test_dic__nested__p1__c__position_axiom :
  (0 <= test_dic__nested__p1__c__position)

logic user_eq4 : us_rep3, us_rep3 -> bool

logic dummy4 : us_rep3

type tx1S__ref = { tx1S__content : us_rep3
}

function tx1S__ref_tx1S__content__projection(a: tx1S__ref) : us_rep3 =
  (a).tx1S__content

predicate in_range5(rec__test_dic__nested__p1__x1: bool,
  a: us_split_discrs6) =
  (rec__test_dic__nested__p1__x1 = (a).rec__test_dic__nested__p1__x)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic test_dic__nested__p1__x__first__bit1 : int

logic test_dic__nested__p1__x__last__bit1 : int

logic test_dic__nested__p1__x__position1 : int

axiom test_dic__nested__p1__x__first__bit_axiom1 :
  (0 <= test_dic__nested__p1__x__first__bit1)

axiom test_dic__nested__p1__x__last__bit_axiom1 :
  (test_dic__nested__p1__x__first__bit1 <  test_dic__nested__p1__x__last__bit1)

axiom test_dic__nested__p1__x__position_axiom1 :
  (0 <= test_dic__nested__p1__x__position1)

logic test_dic__nested__p1__c__first__bit1 : int

logic test_dic__nested__p1__c__last__bit1 : int

logic test_dic__nested__p1__c__position1 : int

axiom test_dic__nested__p1__c__first__bit_axiom1 :
  (0 <= test_dic__nested__p1__c__first__bit1)

axiom test_dic__nested__p1__c__last__bit_axiom1 :
  (test_dic__nested__p1__c__first__bit1 <  test_dic__nested__p1__c__last__bit1)

axiom test_dic__nested__p1__c__position_axiom1 :
  (0 <= test_dic__nested__p1__c__position1)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type p1__ref = { p1__content : us_rep3
}

function p1__ref_p1__content__projection(a: p1__ref) : us_rep3 =
  (a).p1__content

logic x1__split_discrs : us_split_discrs6

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_discrs8 = { rec__test_dic__nested__p2__x : bool
}

function us_split_discrs_rec__test_dic__nested__p2__x__projection(a: us_split_discrs8) : bool =
  (a).rec__test_dic__nested__p2__x

type us_split_discrs__ref4 = { us_split_discrs__content4 : us_split_discrs8
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref4) : us_split_discrs8 =
  (a).us_split_discrs__content4

type us_split_fields8 = { rec__test_dic__nested__p2__c : integer
}

function us_split_fields_rec__test_dic__nested__p2__c__projection(a: us_split_fields8) : integer =
  (a).rec__test_dic__nested__p2__c

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs9 : us_split_discrs8; us_split_fields9 :
us_split_fields8
}

function us_rep___split_discrs__2__projection(a: us_rep4) : us_split_discrs8 =
  (a).us_split_discrs9

function us_rep___split_fields__2__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function bool_eq6(a: us_rep4, b: us_rep4) : bool =
  (if ((to_int(((a).us_split_discrs9).rec__test_dic__nested__p2__x) = to_int(((b).us_split_discrs9).rec__test_dic__nested__p2__x)) and
  (to_rep(((a).us_split_fields9).rec__test_dic__nested__p2__c) = to_rep(((b).us_split_fields9).rec__test_dic__nested__p2__c))) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic test_dic__nested__p2__x__first__bit : int

logic test_dic__nested__p2__x__last__bit : int

logic test_dic__nested__p2__x__position : int

axiom test_dic__nested__p2__x__first__bit_axiom :
  (0 <= test_dic__nested__p2__x__first__bit)

axiom test_dic__nested__p2__x__last__bit_axiom :
  (test_dic__nested__p2__x__first__bit <  test_dic__nested__p2__x__last__bit)

axiom test_dic__nested__p2__x__position_axiom :
  (0 <= test_dic__nested__p2__x__position)

logic test_dic__nested__p2__c__first__bit : int

logic test_dic__nested__p2__c__last__bit : int

logic test_dic__nested__p2__c__position : int

axiom test_dic__nested__p2__c__first__bit_axiom :
  (0 <= test_dic__nested__p2__c__first__bit)

axiom test_dic__nested__p2__c__last__bit_axiom :
  (test_dic__nested__p2__c__first__bit <  test_dic__nested__p2__c__last__bit)

axiom test_dic__nested__p2__c__position_axiom :
  (0 <= test_dic__nested__p2__c__position)

logic user_eq6 : us_rep4, us_rep4 -> bool

logic dummy6 : us_rep4

type tx2S__ref = { tx2S__content : us_rep4
}

function tx2S__ref_tx2S__content__projection(a: tx2S__ref) : us_rep4 =
  (a).tx2S__content

predicate in_range6(rec__test_dic__nested__p2__x1: bool,
  a: us_split_discrs8) =
  (rec__test_dic__nested__p2__x1 = (a).rec__test_dic__nested__p2__x)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic test_dic__nested__p2__x__first__bit1 : int

logic test_dic__nested__p2__x__last__bit1 : int

logic test_dic__nested__p2__x__position1 : int

axiom test_dic__nested__p2__x__first__bit_axiom1 :
  (0 <= test_dic__nested__p2__x__first__bit1)

axiom test_dic__nested__p2__x__last__bit_axiom1 :
  (test_dic__nested__p2__x__first__bit1 <  test_dic__nested__p2__x__last__bit1)

axiom test_dic__nested__p2__x__position_axiom1 :
  (0 <= test_dic__nested__p2__x__position1)

logic test_dic__nested__p2__c__first__bit1 : int

logic test_dic__nested__p2__c__last__bit1 : int

logic test_dic__nested__p2__c__position1 : int

axiom test_dic__nested__p2__c__first__bit_axiom1 :
  (0 <= test_dic__nested__p2__c__first__bit1)

axiom test_dic__nested__p2__c__last__bit_axiom1 :
  (test_dic__nested__p2__c__first__bit1 <  test_dic__nested__p2__c__last__bit1)

axiom test_dic__nested__p2__c__position_axiom1 :
  (0 <= test_dic__nested__p2__c__position1)

logic user_eq7 : us_rep4, us_rep4 -> bool

logic dummy7 : us_rep4

type p2__ref = { p2__content : us_rep4
}

function p2__ref_p2__content__projection(a: p2__ref) : us_rep4 =
  (a).p2__content

logic x2__split_discrs : us_split_discrs8

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic test_dic__nested__p3__x__first__bit1 : int

logic test_dic__nested__p3__x__last__bit1 : int

logic test_dic__nested__p3__x__position1 : int

axiom test_dic__nested__p3__x__first__bit_axiom1 :
  (0 <= test_dic__nested__p3__x__first__bit1)

axiom test_dic__nested__p3__x__last__bit_axiom1 :
  (test_dic__nested__p3__x__first__bit1 <  test_dic__nested__p3__x__last__bit1)

axiom test_dic__nested__p3__x__position_axiom1 :
  (0 <= test_dic__nested__p3__x__position1)

logic test_dic__nested__p3__c__first__bit1 : int

logic test_dic__nested__p3__c__last__bit1 : int

logic test_dic__nested__p3__c__position1 : int

axiom test_dic__nested__p3__c__first__bit_axiom1 :
  (0 <= test_dic__nested__p3__c__first__bit1)

axiom test_dic__nested__p3__c__last__bit_axiom1 :
  (test_dic__nested__p3__c__first__bit1 <  test_dic__nested__p3__c__last__bit1)

axiom test_dic__nested__p3__c__position_axiom1 :
  (0 <= test_dic__nested__p3__c__position1)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type tx3S__ref = { tx3S__content : us_rep
}

function tx3S__ref_tx3S__content__projection(a: tx3S__ref) : us_rep =
  (a).tx3S__content

logic x3__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

logic value__size8 : int

logic object__size8 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom alignment_axiom8 : (0 <= alignment8)

logic test_dic__nested__p4__x__first__bit1 : int

logic test_dic__nested__p4__x__last__bit1 : int

logic test_dic__nested__p4__x__position1 : int

axiom test_dic__nested__p4__x__first__bit_axiom1 :
  (0 <= test_dic__nested__p4__x__first__bit1)

axiom test_dic__nested__p4__x__last__bit_axiom1 :
  (test_dic__nested__p4__x__first__bit1 <  test_dic__nested__p4__x__last__bit1)

axiom test_dic__nested__p4__x__position_axiom1 :
  (0 <= test_dic__nested__p4__x__position1)

logic test_dic__nested__p4__c__first__bit1 : int

logic test_dic__nested__p4__c__last__bit1 : int

logic test_dic__nested__p4__c__position1 : int

axiom test_dic__nested__p4__c__first__bit_axiom1 :
  (0 <= test_dic__nested__p4__c__first__bit1)

axiom test_dic__nested__p4__c__last__bit_axiom1 :
  (test_dic__nested__p4__c__first__bit1 <  test_dic__nested__p4__c__last__bit1)

axiom test_dic__nested__p4__c__position_axiom1 :
  (0 <= test_dic__nested__p4__c__position1)

logic user_eq9 : us_rep1, us_rep1 -> bool

logic dummy9 : us_rep1

type tx4S__ref = { tx4S__content : us_rep1
}

function tx4S__ref_tx4S__content__projection(a: tx4S__ref) : us_rep1 =
  (a).tx4S__content

logic x4__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS3 : int

logic value__size9 : int

logic object__size9 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom alignment_axiom9 : (0 <= alignment9)

logic test_dic__nested__p5__x__first__bit1 : int

logic test_dic__nested__p5__x__last__bit1 : int

logic test_dic__nested__p5__x__position1 : int

axiom test_dic__nested__p5__x__first__bit_axiom1 :
  (0 <= test_dic__nested__p5__x__first__bit1)

axiom test_dic__nested__p5__x__last__bit_axiom1 :
  (test_dic__nested__p5__x__first__bit1 <  test_dic__nested__p5__x__last__bit1)

axiom test_dic__nested__p5__x__position_axiom1 :
  (0 <= test_dic__nested__p5__x__position1)

logic test_dic__nested__p5__c__first__bit1 : int

logic test_dic__nested__p5__c__last__bit1 : int

logic test_dic__nested__p5__c__position1 : int

axiom test_dic__nested__p5__c__first__bit_axiom1 :
  (0 <= test_dic__nested__p5__c__first__bit1)

axiom test_dic__nested__p5__c__last__bit_axiom1 :
  (test_dic__nested__p5__c__first__bit1 <  test_dic__nested__p5__c__last__bit1)

axiom test_dic__nested__p5__c__position_axiom1 :
  (0 <= test_dic__nested__p5__c__position1)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy10 : us_rep2

type tx5S__ref = { tx5S__content : us_rep2
}

function tx5S__ref_tx5S__content__projection(a: tx5S__ref) : us_rep2 =
  (a).tx5S__content

logic x5__split_discrs : us_split_discrs4

logic attr__ATTRIBUTE_ADDRESS4 : int

type s4__ref = { s4__content : us_rep1
}

function s4__ref_s4__content__projection(a: s4__ref) : us_rep1 =
  (a).s4__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic f4 : us_rep1 -> bool

logic f4__function_guard : bool, us_rep1 -> prop

axiom f4__def_axiom :
  (forall x:us_rep1 [f4(x)]. ((f4(x) = true) ->
  (to_rep(((x).us_split_fields3).rec__test_dic__nested__p4__c) = 0)))

axiom f4__def_axiom1 :
  (forall x:us_rep1 [f4(x)].
  ((to_rep(((x).us_split_fields3).rec__test_dic__nested__p4__c) = 0) ->
  (f4(x) = true)))

logic value__size10 : int

logic object__size10 : int

logic alignment10 : int

axiom value__size_axiom10 : (0 <= value__size10)

axiom object__size_axiom10 : (0 <= object__size10)

axiom alignment_axiom10 : (0 <= alignment10)

logic test_dic__nested__p5__x__first__bit2 : int

logic test_dic__nested__p5__x__last__bit2 : int

logic test_dic__nested__p5__x__position2 : int

axiom test_dic__nested__p5__x__first__bit_axiom2 :
  (0 <= test_dic__nested__p5__x__first__bit2)

axiom test_dic__nested__p5__x__last__bit_axiom2 :
  (test_dic__nested__p5__x__first__bit2 <  test_dic__nested__p5__x__last__bit2)

axiom test_dic__nested__p5__x__position_axiom2 :
  (0 <= test_dic__nested__p5__x__position2)

logic test_dic__nested__p5__c__first__bit2 : int

logic test_dic__nested__p5__c__last__bit2 : int

logic test_dic__nested__p5__c__position2 : int

axiom test_dic__nested__p5__c__first__bit_axiom2 :
  (0 <= test_dic__nested__p5__c__first__bit2)

axiom test_dic__nested__p5__c__last__bit_axiom2 :
  (test_dic__nested__p5__c__first__bit2 <  test_dic__nested__p5__c__last__bit2)

axiom test_dic__nested__p5__c__position_axiom2 :
  (0 <= test_dic__nested__p5__c__position2)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type t4b__ref = { t4b__content : us_rep2
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_rep2 =
  (a).t4b__content

logic value__size11 : int

logic object__size11 : int

logic alignment11 : int

axiom value__size_axiom11 : (0 <= value__size11)

axiom object__size_axiom11 : (0 <= object__size11)

axiom alignment_axiom11 : (0 <= alignment11)

logic test_dic__nested__p5__x__first__bit3 : int

logic test_dic__nested__p5__x__last__bit3 : int

logic test_dic__nested__p5__x__position3 : int

axiom test_dic__nested__p5__x__first__bit_axiom3 :
  (0 <= test_dic__nested__p5__x__first__bit3)

axiom test_dic__nested__p5__x__last__bit_axiom3 :
  (test_dic__nested__p5__x__first__bit3 <  test_dic__nested__p5__x__last__bit3)

axiom test_dic__nested__p5__x__position_axiom3 :
  (0 <= test_dic__nested__p5__x__position3)

logic test_dic__nested__p5__c__first__bit3 : int

logic test_dic__nested__p5__c__last__bit3 : int

logic test_dic__nested__p5__c__position3 : int

axiom test_dic__nested__p5__c__first__bit_axiom3 :
  (0 <= test_dic__nested__p5__c__first__bit3)

axiom test_dic__nested__p5__c__last__bit_axiom3 :
  (test_dic__nested__p5__c__first__bit3 <  test_dic__nested__p5__c__last__bit3)

axiom test_dic__nested__p5__c__position_axiom3 :
  (0 <= test_dic__nested__p5__c__position3)

logic user_eq12 : us_rep2, us_rep2 -> bool

logic dummy12 : us_rep2

type t5b__ref = { t5b__content : us_rep2
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : us_rep2 =
  (a).t5b__content

axiom id__def_axiom :
  (forall x:us_rep2 [id(x)].
  (id(x) = (if ((((x).us_split_discrs5).rec__test_dic__nested__p5__x = true) and
  (to_rep(((x).us_split_fields5).rec__test_dic__nested__p5__c) = 0)) then {
  us_split_discrs5 = { rec__test_dic__nested__p5__x = of_int(1) };
  us_split_fields5 = { rec__test_dic__nested__p5__c =
  ((x).us_split_fields5).rec__test_dic__nested__p5__c } } else {
  us_split_discrs5 = { rec__test_dic__nested__p5__x = of_int(0) };
  us_split_fields5 = { rec__test_dic__nested__p5__c =
  ((x).us_split_fields5).rec__test_dic__nested__p5__c } })))

axiom temp___result_209qtdef :
  (forall temp___208:us_rep1. f4__function_guard(f4(temp___208), temp___208))

predicate dynamic_predicate(temp___207: us_rep1) = (f4(temp___207) = true)

 (* File "test_dic.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x1__split_fields:integer.
  (((((x1__split_discrs).rec__test_dic__nested__p1__x = of_int(1)) and
  (to_rep(x1__split_fields) = 0)) and
  ((x1__split_discrs).rec__test_dic__nested__p1__x = true)) ->
  (in_range5(of_int(1), ({ us_split_discrs7 = x1__split_discrs;
  us_split_fields7 = { rec__test_dic__nested__p1__c = x1__split_fields }
  }).us_split_discrs7) ->
  (forall usf:us_rep4.
  ((of_int(1) = ((usf).us_split_discrs9).rec__test_dic__nested__p2__x) ->
  (((usf).us_split_discrs9).rec__test_dic__nested__p2__x = true))))))
