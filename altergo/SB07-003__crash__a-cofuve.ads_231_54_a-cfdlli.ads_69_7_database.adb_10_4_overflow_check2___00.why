(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq1 : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant(temp___expr_299: int, temp___is_init_295: bool,
  temp___skip_constant_296: bool, temp___do_toplevel_297: bool,
  temp___do_typ_inv_298: bool) = (((temp___is_init_295 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_299))

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq3(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function last(container: us_rep) : int = (0 + length(container))

logic last__function_guard : int, us_rep -> prop

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : character, character -> bool

logic dummy4 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(last1(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last2(a: us_t) : int = to_rep(last1((a).rt))

function length2(a: us_t) : int =
  (if (first1(a) <= last2(a)) then ((last2(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq8(x: us_t, y: us_t) : bool = bool_eq7((x).elts,
  to_rep(first((x).rt)), to_rep(last1((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last1((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type email_address_type__ref = { email_address_type__content : us_t
}

function email_address_type__ref_email_address_type__content__projection(a: email_address_type__ref) : us_t =
  (a).email_address_type__content

type us_rep1 = { rec__database__email_access__is_null_pointer : bool;
rec__database__email_access__pointer_address : int;
rec__database__email_access__pointer_value : us_t
}

function us_rep_rec__database__email_access__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__database__email_access__is_null_pointer

function us_rep_rec__database__email_access__pointer_address__projection(a: us_rep1) : int =
  (a).rec__database__email_access__pointer_address

function us_rep_rec__database__email_access__pointer_value__projection(a: us_rep1) : us_t =
  (a).rec__database__email_access__pointer_value

type us_rep__ref = { us_rep__content : us_rep1
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep1 =
  (a).us_rep__content

function bool_eq9(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__database__email_access__is_null_pointer = (b).rec__database__email_access__is_null_pointer) and
  ((not ((a).rec__database__email_access__is_null_pointer = true)) ->
  (((a).rec__database__email_access__pointer_address = (b).rec__database__email_access__pointer_address) and
  ((a).rec__database__email_access__pointer_value = (b).rec__database__email_access__pointer_value)))) then true else false)

predicate rec__database__email_access__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__database__email_access__is_null_pointer = true))

logic us_null_pointer : us_rep1

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__database__email_access__is_null_pointer = true)

logic dummy6 : us_rep1

type email_access__ref = { email_access__content : us_rep1
}

function email_access__ref_email_access__content__projection(a: email_access__ref) : us_rep1 =
  (a).email_access__content

type us_split_fields = { rec__database__db_entry_type__key : integer;
rec__database__db_entry_type__email : us_rep1
}

function us_split_fields_rec__database__db_entry_type__key__projection(a: us_split_fields) : integer =
  (a).rec__database__db_entry_type__key

function us_split_fields_rec__database__db_entry_type__email__projection(a: us_split_fields) : us_rep1 =
  (a).rec__database__db_entry_type__email

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep2 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep2) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__database__db_entry_type__key) = to_rep(((b).us_split_fields1).rec__database__db_entry_type__key)) and
  (bool_eq9(((a).us_split_fields1).rec__database__db_entry_type__email,
  ((b).us_split_fields1).rec__database__db_entry_type__email) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic database__db_entry_type__key__first__bit : int

logic database__db_entry_type__key__last__bit : int

logic database__db_entry_type__key__position : int

axiom database__db_entry_type__key__first__bit_axiom :
  (0 <= database__db_entry_type__key__first__bit)

axiom database__db_entry_type__key__last__bit_axiom :
  (database__db_entry_type__key__first__bit <  database__db_entry_type__key__last__bit)

axiom database__db_entry_type__key__position_axiom :
  (0 <= database__db_entry_type__key__position)

logic database__db_entry_type__email__first__bit : int

logic database__db_entry_type__email__last__bit : int

logic database__db_entry_type__email__position : int

axiom database__db_entry_type__email__first__bit_axiom :
  (0 <= database__db_entry_type__email__first__bit)

axiom database__db_entry_type__email__last__bit_axiom :
  (database__db_entry_type__email__first__bit <  database__db_entry_type__email__last__bit)

axiom database__db_entry_type__email__position_axiom :
  (0 <= database__db_entry_type__email__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type db_entry_type__ref = { db_entry_type__content : us_rep2
}

function db_entry_type__ref_db_entry_type__content__projection(a: db_entry_type__ref) : us_rep2 =
  (a).db_entry_type__content

type element_type__ref = { element_type__content : us_rep2
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref) : us_rep2 =
  (a).element_type__content

logic get : us_rep, int -> us_rep2

logic get__function_guard : us_rep2, us_rep, int -> prop

function oeq(left: us_rep, right: us_rep) : bool =
  andb(bool_eq3(length(left), length(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) ->
      (bool_eq10(get(left, n), get(right, n)) = true))) then true else false))

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq(a, b)]. (user_eq(a, b) = oeq(a,
  b)))

predicate default_initial_assumption(temp___expr_351: us_rep,
  temp___skip_top_level_352: bool) =
  ((not (temp___skip_top_level_352 = true)) -> (length(temp___expr_351) = 0))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  ((0 + length(container)) <= 2147483647))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_343: int, temp___is_init_339: bool,
  temp___skip_constant_340: bool, temp___do_toplevel_341: bool,
  temp___do_typ_inv_342: bool) = (((temp___is_init_339 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_343))

logic left : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic right : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic fst : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic lst : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic offset : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type tcount_typeB

logic tcount_typeBqtint : tcount_typeB -> int

axiom tcount_typeBqtaxiom :
  (forall i:tcount_typeB. ((- 2147483648) <= tcount_typeBqtint(i)))

axiom tcount_typeBqtaxiom1 :
  (forall i:tcount_typeB. (tcount_typeBqtint(i) <= 2147483647))

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq8 : tcount_typeB, tcount_typeB -> bool

logic dummy9 : tcount_typeB

type tcount_typeB__ref = { tcount_typeB__content : tcount_typeB
}

function tcount_typeB__ref_tcount_typeB__content__projection(a: tcount_typeB__ref) : tcount_typeB =
  (a).tcount_typeB__content

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : index_type, index_type -> bool

logic dummy10 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant2(temp___expr_326: int, temp___is_init_322: bool,
  temp___skip_constant_323: bool, temp___do_toplevel_324: bool,
  temp___do_typ_inv_325: bool) = (((temp___is_init_322 = true) or
  (1 <= 2147483647)) -> in_range7(temp___expr_326))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant5(temp___expr_279: us_rep2,
  temp___is_init_275: bool, temp___skip_constant_276: bool,
  temp___do_toplevel_277: bool, temp___do_typ_inv_278: bool) =
  ((not ((((temp___expr_279).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((((temp___expr_279).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__pointer_value),
  last2((((temp___expr_279).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__pointer_value)))

predicate default_initial_assumption1(temp___expr_281: us_rep2,
  temp___skip_top_level_282: bool) =
  ((((temp___expr_281).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__is_null_pointer = true)

predicate dynamic_invariant6(temp___expr_263: us_t, temp___is_init_259: bool,
  temp___skip_constant_260: bool, temp___do_toplevel_261: bool,
  temp___do_typ_inv_262: bool) = ((not (temp___skip_constant_260 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_263),
  last2(temp___expr_263)))

predicate dynamic_invariant7(temp___expr_269: us_rep1,
  temp___is_init_265: bool, temp___skip_constant_266: bool,
  temp___do_toplevel_267: bool, temp___do_typ_inv_268: bool) =
  ((not ((temp___expr_269).rec__database__email_access__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((temp___expr_269).rec__database__email_access__pointer_value),
  last2((temp___expr_269).rec__database__email_access__pointer_value)))

predicate default_initial_assumption2(temp___expr_271: us_rep1,
  temp___skip_top_level_272: bool) =
  ((temp___expr_271).rec__database__email_access__is_null_pointer = true)

predicate dynamic_invariant8(temp___expr_333: us_rep2,
  temp___is_init_329: bool, temp___skip_constant_330: bool,
  temp___do_toplevel_331: bool, temp___do_typ_inv_332: bool) =
  ((not ((((temp___expr_333).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((((temp___expr_333).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__pointer_value),
  last2((((temp___expr_333).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__pointer_value)))

predicate default_initial_assumption3(temp___expr_335: us_rep2,
  temp___skip_top_level_336: bool) =
  ((((temp___expr_335).us_split_fields1).rec__database__db_entry_type__email).rec__database__email_access__is_null_pointer = true)

axiom get__post_axiom :
  (forall container:us_rep.
  (forall position:int [get(container, position)].
  ((dynamic_invariant1(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant8(get(container, position), true, false, true, true))))

 (* File "a-cofuve.ads", line 216, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(fst, true, false, true, true) ->
  (dynamic_invariant1(lst, true, false, true, true) -> (in_range6(offset) ->
  (let o = left : us_rep in (let o1 = last(o) : int in
  ((dynamic_invariant1(o1, true, false, true, true) and
  (o1 = (0 + length(o)))) -> ((lst <= o1) -> ((offset <  0) ->
  in_range6(((- 2147483648) - offset))))))))))
