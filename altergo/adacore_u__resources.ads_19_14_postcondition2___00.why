(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type resource

logic resourceqtint : resource -> int

axiom resourceqtaxiom : (forall i:resource. (0 <= resourceqtint(i)))

axiom resourceqtaxiom1 : (forall i:resource. (resourceqtint(i) <= 1000))

predicate in_range(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : resource, resource -> bool

logic dummy : resource

type resource__ref = { resource__content : resource
}

function resource__ref_resource__content__projection(a: resource__ref) : resource =
  (a).resource__content

function to_rep(x: resource) : int = resourceqtint(x)

logic of_rep : int -> resource

axiom inversion_axiom :
  (forall x:resource [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:resource [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,resource) farray
}

logic slide : (int,resource) farray, int, int -> (int,resource) farray

axiom slide_eq :
  (forall a:(int,resource) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,resource) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,resource) farray, a__first: int, a__last: int,
  b: (int,resource) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,resource) farray. forall b:(int,resource) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,resource) farray. forall b:(int,resource) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,resource) farray. forall b:(int,resource) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,resource) farray. forall b:(int,resource) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic sum : (int,resource) farray, int -> int

logic sum__function_guard : int, (int,resource) farray, int -> prop

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

type num

logic numqtint : num -> int

axiom numqtaxiom : (forall i:num. (0 <= numqtint(i)))

axiom numqtaxiom1 : (forall i:num. (numqtint(i) <= 6))

predicate in_range2(x: int) = ((0 <= x) and (x <= 6))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : num, num -> bool

logic dummy2 : num

type num__ref = { num__content : num
}

function num__ref_num__content__projection(a: num__ref) : num =
  (a).num__content

predicate dynamic_invariant1(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 6)) -> in_range2(temp___expr_167))

axiom sum__def_axiom :
  (forall d:(int,resource) farray.
  (forall to__:int [sum(d, to__)]. ((dynamic_invariant1(to__, true, true,
  true, true) and sum__function_guard(sum(d, to__), d, to__)) ->
  (forall d1:(int,resource) farray. forall to__1:int.
  sum__function_guard(sum(d1, (to__1 - 1)), d1, (to__1 - 1))))))

axiom sum__def_axiom1 :
  (forall d:(int,resource) farray.
  (forall to__:int [sum(d, to__)]. ((dynamic_invariant1(to__, true, true,
  true, true) and sum__function_guard(sum(d, to__), d, to__)) -> (sum(d,
  to__) = (if (to__ = 0) then 0 else (to_rep((d[to__])) + sum(d,
  (to__ - 1))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 6))

predicate in_range3(x: int) = ((1 <= x) and (x <= 6))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant2(temp___expr_174: int, temp___is_init_170: bool,
  temp___skip_constant_171: bool, temp___do_toplevel_172: bool,
  temp___do_typ_inv_173: bool) = (((temp___is_init_170 = true) or
  (1 <= 6)) -> in_range3(temp___expr_174))

predicate dynamic_invariant3(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (0 <= 1000)) -> in_range(temp___expr_160))

axiom sum__post_axiom :
  (forall d:(int,resource) farray.
  (forall to__:int [sum(d, to__)]. (dynamic_invariant1(to__, true, true,
  true, true) -> (let result = sum(d, to__) : int in
  (sum__function_guard(result, d, to__) -> dynamic_invariant(result, true,
  false, true, true))))))

logic rliteral : resource

axiom rliteral_axiom : (resourceqtint(rliteral) = 0)

 (* File "resources.ads", line 17, characters 0-0 *)
goal defqtvc :
  (forall d:(int,resource) farray. (dynamic_invariant2(j, true, false, true,
  true) ->
  ((forall d1:(int,resource) farray. sum__function_guard(sum(d1, 6), d1, 6)) ->
  ((sum(d, 6) <  42) ->
  (forall d1:(int,resource) farray. ((d1 = (d[j <- rliteral])) ->
  ((forall d2:(int,resource) farray. sum__function_guard(sum(d2, 6), d2, 6)) ->
  (sum(d1, 6) <  42))))))))
