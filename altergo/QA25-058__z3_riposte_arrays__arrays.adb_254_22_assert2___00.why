(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type unsigned_byte

logic unsigned_byteqtint : unsigned_byte -> int

axiom unsigned_byteqtaxiom :
  (forall i:unsigned_byte. (0 <= unsigned_byteqtint(i)))

axiom unsigned_byteqtaxiom1 :
  (forall i:unsigned_byte. (unsigned_byteqtint(i) <= 255))

predicate in_range(x: int) = ((0 <= x) and (x <= 255))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref_unsigned_byte__content__projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

function to_rep(x: unsigned_byte) : int = unsigned_byteqtint(x)

logic of_rep : int -> unsigned_byte

axiom inversion_axiom :
  (forall x:unsigned_byte [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:unsigned_byte [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,unsigned_byte) farray
}

logic slide : (int,unsigned_byte) farray, int,
  int -> (int,unsigned_byte) farray

axiom slide_eq :
  (forall a:(int,unsigned_byte) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,unsigned_byte) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,unsigned_byte) farray, a__first: int, a__last: int,
  b: (int,unsigned_byte) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_162:int. (((a__first <= temp___idx_162) and
  (temp___idx_162 <= a__last)) ->
  (to_rep((a[temp___idx_162])) = to_rep((b[((b__first - a__first) + temp___idx_162)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,unsigned_byte) farray. forall b:(int,unsigned_byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,unsigned_byte) farray. forall b:(int,unsigned_byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,unsigned_byte) farray. forall b:(int,unsigned_byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,unsigned_byte) farray. forall b:(int,unsigned_byte) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_162:int. (((a__first <= temp___idx_162) and
  (temp___idx_162 <= a__last)) ->
  (to_rep((a[temp___idx_162])) = to_rep((b[((b__first - a__first) + temp___idx_162)]))))))))

logic random_array : int -> (int,unsigned_byte) farray

logic random_array__function_guard : (int,unsigned_byte) farray, int -> prop

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

type small_index_t

logic small_index_tqtint : small_index_t -> int

axiom small_index_tqtaxiom :
  (forall i:small_index_t. (1 <= small_index_tqtint(i)))

axiom small_index_tqtaxiom1 :
  (forall i:small_index_t. (small_index_tqtint(i) <= 1000))

predicate in_range2(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : small_index_t, small_index_t -> bool

logic dummy2 : small_index_t

type small_index_t__ref = { small_index_t__content : small_index_t
}

function small_index_t__ref_small_index_t__content__projection(a: small_index_t__ref) : small_index_t =
  (a).small_index_t__content

logic temp_____aggregate_def_373 : int -> (int,unsigned_byte) farray

predicate dynamic_invariant1(temp___expr_174: int, temp___is_init_170: bool,
  temp___skip_constant_171: bool, temp___do_toplevel_172: bool,
  temp___do_typ_inv_173: bool) = (((temp___is_init_170 = true) or
  (0 <= 255)) -> in_range(temp___expr_174))

predicate dynamic_invariant2(temp___expr_251: int, temp___is_init_247: bool,
  temp___skip_constant_248: bool, temp___do_toplevel_249: bool,
  temp___do_typ_inv_250: bool) = (((temp___is_init_247 = true) or
  (1 <= 1000)) -> in_range2(temp___expr_251))

logic rliteral : unsigned_byte

axiom rliteral_axiom : (unsigned_byteqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___375:int. (dynamic_invariant1(temp___375, true, true, true,
  true) ->
  (forall temp___376:int.
  ((temp_____aggregate_def_373(temp___375)[temp___376]) = rliteral))))

 (* File "arrays.adb", line 248, characters 0-0 *)
goal defqtvc :
  (forall a:(int,unsigned_byte) farray.
  ((a = temp_____aggregate_def_373(0)) ->
  (random_array__function_guard(random_array(5), 5) -> (bool_eq1(a, 1, 1000,
  random_array(5), 1, 1000) = true))))
