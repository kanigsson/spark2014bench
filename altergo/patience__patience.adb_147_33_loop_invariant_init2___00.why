(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type cardindex

logic cardindexqtint : cardindex -> int

axiom cardindexqtaxiom : (forall i:cardindex. ((- 1) <= cardindexqtint(i)))

axiom cardindexqtaxiom1 : (forall i:cardindex. (cardindexqtint(i) <= 100))

predicate in_range2(x: int) = (((- 1) <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : cardindex, cardindex -> bool

logic dummy1 : cardindex

type cardindex__ref = { cardindex__content : cardindex
}

function cardindex__ref_cardindex__content__projection(a: cardindex__ref) : cardindex =
  (a).cardindex__content

function to_rep(x: cardindex) : int = cardindexqtint(x)

logic of_rep : int -> cardindex

axiom inversion_axiom :
  (forall x:cardindex [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:cardindex [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type card

logic cardqtint : card -> int

axiom cardqtaxiom : (forall i:card. (1 <= cardqtint(i)))

axiom cardqtaxiom1 : (forall i:card. (cardqtint(i) <= 52))

predicate in_range3(x: int) = ((1 <= x) and (x <= 52))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : card, card -> bool

logic dummy2 : card

type card__ref = { card__content : card
}

function card__ref_card__content__projection(a: card__ref) : card =
  (a).card__content

function to_rep1(x: card) : int = cardqtint(x)

logic of_rep1 : int -> card

axiom inversion_axiom1 :
  (forall x:card [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:card [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,card) farray
}

logic slide : (int,card) farray, int, int -> (int,card) farray

axiom slide_eq :
  (forall a:(int,card) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,card) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,card) farray, a__first: int, a__last: int,
  b: (int,card) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,card) farray. forall b:(int,card) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy3 : (int,card) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq3 : (int,card) farray, (int,card) farray -> bool

type map__ref1 = { map__content1 : (int,cardindex) farray
}

logic slide1 : (int,cardindex) farray, int, int -> (int,cardindex) farray

axiom slide_eq1 :
  (forall a:(int,cardindex) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,cardindex) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,cardindex) farray, a__first: int, a__last: int,
  b: (int,cardindex) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,cardindex) farray. forall b:(int,cardindex) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic dummy4 : (int,cardindex) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq4 : (int,cardindex) farray, (int,cardindex) farray -> bool

type map__ref2 = { map__content2 : (int,(int,cardindex) farray) farray
}

logic slide2 : (int,(int,cardindex) farray) farray, int,
  int -> (int,(int,cardindex) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,(int,cardindex) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,(int,cardindex) farray) farray, a__first: int,
  a__last: int, b: (int,(int,cardindex) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq5((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true)))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,(int,cardindex) farray) farray.
  forall b:(int,(int,cardindex) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq5((a[temp___idx_156]), 0, 99,
  (b[((b__first - a__first) + temp___idx_156)]), 0, 99) = true))))))

logic dummy5 : (int,(int,cardindex) farray) farray

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq5 : (int,(int,cardindex) farray) farray,
  (int,(int,cardindex) farray) farray -> bool

type us_split_fields = { rec__patience__state__numelts : cardindex;
rec__patience__state__values : (int,card) farray;
rec__patience__state__numstacks : cardindex; rec__patience__state__stacksizes
: (int,cardindex) farray; rec__patience__state__stacks :
(int,(int,cardindex) farray) farray; rec__patience__state__posstack :
(int,cardindex) farray; rec__patience__state__posheight :
(int,cardindex) farray; rec__patience__state__preds : (int,cardindex) farray
}

function us_split_fields_rec__patience__state__numelts__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numelts

function us_split_fields_rec__patience__state__values__projection(a: us_split_fields) : (int,card) farray =
  (a).rec__patience__state__values

function us_split_fields_rec__patience__state__numstacks__projection(a: us_split_fields) : cardindex =
  (a).rec__patience__state__numstacks

function us_split_fields_rec__patience__state__stacksizes__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__stacksizes

function us_split_fields_rec__patience__state__stacks__projection(a: us_split_fields) : (int,(int,cardindex) farray) farray =
  (a).rec__patience__state__stacks

function us_split_fields_rec__patience__state__posstack__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posstack

function us_split_fields_rec__patience__state__posheight__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__posheight

function us_split_fields_rec__patience__state__preds__projection(a: us_split_fields) : (int,cardindex) farray =
  (a).rec__patience__state__preds

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__patience__state__numelts) = to_rep(((b).us_split_fields1).rec__patience__state__numelts)) and
  (bool_eq4(((a).us_split_fields1).rec__patience__state__values, 0, 99,
  ((b).us_split_fields1).rec__patience__state__values, 0, 99) = true)) and
  ((((to_rep(((a).us_split_fields1).rec__patience__state__numstacks) = to_rep(((b).us_split_fields1).rec__patience__state__numstacks)) and
  (bool_eq5(((a).us_split_fields1).rec__patience__state__stacksizes, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacksizes, 0,
  99) = true)) and
  (bool_eq6(((a).us_split_fields1).rec__patience__state__stacks, 0, 99,
  ((b).us_split_fields1).rec__patience__state__stacks, 0, 99) = true)) and
  (((bool_eq5(((a).us_split_fields1).rec__patience__state__posstack, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posstack, 0, 99) = true) and
  (bool_eq5(((a).us_split_fields1).rec__patience__state__posheight, 0, 99,
  ((b).us_split_fields1).rec__patience__state__posheight, 0, 99) = true)) and
  (bool_eq5(((a).us_split_fields1).rec__patience__state__preds, 0, 99,
  ((b).us_split_fields1).rec__patience__state__preds, 0,
  99) = true)))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic patience__state__numelts__first__bit : int

logic patience__state__numelts__last__bit : int

logic patience__state__numelts__position : int

axiom patience__state__numelts__first__bit_axiom :
  (0 <= patience__state__numelts__first__bit)

axiom patience__state__numelts__last__bit_axiom :
  (patience__state__numelts__first__bit <  patience__state__numelts__last__bit)

axiom patience__state__numelts__position_axiom :
  (0 <= patience__state__numelts__position)

logic patience__state__values__first__bit : int

logic patience__state__values__last__bit : int

logic patience__state__values__position : int

axiom patience__state__values__first__bit_axiom :
  (0 <= patience__state__values__first__bit)

axiom patience__state__values__last__bit_axiom :
  (patience__state__values__first__bit <  patience__state__values__last__bit)

axiom patience__state__values__position_axiom :
  (0 <= patience__state__values__position)

logic patience__state__numstacks__first__bit : int

logic patience__state__numstacks__last__bit : int

logic patience__state__numstacks__position : int

axiom patience__state__numstacks__first__bit_axiom :
  (0 <= patience__state__numstacks__first__bit)

axiom patience__state__numstacks__last__bit_axiom :
  (patience__state__numstacks__first__bit <  patience__state__numstacks__last__bit)

axiom patience__state__numstacks__position_axiom :
  (0 <= patience__state__numstacks__position)

logic patience__state__stacksizes__first__bit : int

logic patience__state__stacksizes__last__bit : int

logic patience__state__stacksizes__position : int

axiom patience__state__stacksizes__first__bit_axiom :
  (0 <= patience__state__stacksizes__first__bit)

axiom patience__state__stacksizes__last__bit_axiom :
  (patience__state__stacksizes__first__bit <  patience__state__stacksizes__last__bit)

axiom patience__state__stacksizes__position_axiom :
  (0 <= patience__state__stacksizes__position)

logic patience__state__stacks__first__bit : int

logic patience__state__stacks__last__bit : int

logic patience__state__stacks__position : int

axiom patience__state__stacks__first__bit_axiom :
  (0 <= patience__state__stacks__first__bit)

axiom patience__state__stacks__last__bit_axiom :
  (patience__state__stacks__first__bit <  patience__state__stacks__last__bit)

axiom patience__state__stacks__position_axiom :
  (0 <= patience__state__stacks__position)

logic patience__state__posstack__first__bit : int

logic patience__state__posstack__last__bit : int

logic patience__state__posstack__position : int

axiom patience__state__posstack__first__bit_axiom :
  (0 <= patience__state__posstack__first__bit)

axiom patience__state__posstack__last__bit_axiom :
  (patience__state__posstack__first__bit <  patience__state__posstack__last__bit)

axiom patience__state__posstack__position_axiom :
  (0 <= patience__state__posstack__position)

logic patience__state__posheight__first__bit : int

logic patience__state__posheight__last__bit : int

logic patience__state__posheight__position : int

axiom patience__state__posheight__first__bit_axiom :
  (0 <= patience__state__posheight__first__bit)

axiom patience__state__posheight__last__bit_axiom :
  (patience__state__posheight__first__bit <  patience__state__posheight__last__bit)

axiom patience__state__posheight__position_axiom :
  (0 <= patience__state__posheight__position)

logic patience__state__preds__first__bit : int

logic patience__state__preds__last__bit : int

logic patience__state__preds__position : int

axiom patience__state__preds__first__bit_axiom :
  (0 <= patience__state__preds__first__bit)

axiom patience__state__preds__last__bit_axiom :
  (patience__state__preds__first__bit <  patience__state__preds__last__bit)

axiom patience__state__preds__position_axiom :
  (0 <= patience__state__preds__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type state__ref = { state__content : us_rep
}

function state__ref_state__content__projection(a: state__ref) : us_rep =
  (a).state__content

logic null_state : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic inv : us_rep -> bool

logic inv__function_guard : bool, us_rep -> prop

axiom inv__def_axiom :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (0 <= to_rep(((s).us_split_fields1).rec__patience__state__numstacks))))

axiom inv__def_axiom1 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) <= to_rep(((s).us_split_fields1).rec__patience__state__numelts))))

axiom inv__def_axiom2 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (to_rep(((s).us_split_fields1).rec__patience__state__numelts) <= 100)))

axiom inv__def_axiom3 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  ((to_rep(((s).us_split_fields1).rec__patience__state__numelts) = 0) or
  (0 <  to_rep(((s).us_split_fields1).rec__patience__state__numstacks)))))

axiom inv__def_axiom4 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (1 <= to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])))))))

axiom inv__def_axiom5 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) <= to_rep(((s).us_split_fields1).rec__patience__state__numelts))))))

axiom inv__def_axiom6 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  (0 <= to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j])))))))))

axiom inv__def_axiom7 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  (to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j])) <  to_rep(((s).us_split_fields1).rec__patience__state__numelts))))))))

axiom inv__def_axiom8 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (0 <= to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])))))))

axiom inv__def_axiom9 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])) <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))))))

axiom inv__def_axiom10 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (0 <= to_rep((((s).us_split_fields1).rec__patience__state__posheight[i])))))))

axiom inv__def_axiom11 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__posheight[i])) <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[to_rep((((s).us_split_fields1).rec__patience__state__posstack[i]))])) - 1))))))

axiom inv__def_axiom12 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (to_rep(((((s).us_split_fields1).rec__patience__state__stacks[to_rep((((s).us_split_fields1).rec__patience__state__posstack[i]))])[to_rep((((s).us_split_fields1).rec__patience__state__posheight[i]))])) = i)))))

axiom inv__def_axiom13 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall ist:int. (((0 <= ist) and
  (ist <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall ip:int. (((0 <= ip) and
  (ip <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[ist])) - 1))) ->
  (ist = to_rep((((s).us_split_fields1).rec__patience__state__posstack[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[ist])[ip]))])))))))))

axiom inv__def_axiom14 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall ist:int. (((0 <= ist) and
  (ist <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall ip:int. (((0 <= ip) and
  (ip <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[ist])) - 1))) ->
  (ip = to_rep((((s).us_split_fields1).rec__patience__state__posheight[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[ist])[ip]))])))))))))

axiom inv__def_axiom15 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and
  (k <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  (to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j])) <  to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[k])))))))))))

axiom inv__def_axiom16 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and
  (k <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  (to_rep1((((s).us_split_fields1).rec__patience__state__values[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[k]))])) <= to_rep1((((s).us_split_fields1).rec__patience__state__values[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j]))])))))))))))

axiom inv__def_axiom17 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  ((- 1) <= to_rep((((s).us_split_fields1).rec__patience__state__preds[i])))))))

axiom inv__def_axiom18 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))))))

axiom inv__def_axiom19 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  i)))))

axiom inv__def_axiom20 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  ((to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  0) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])) = 0))))))

axiom inv__def_axiom21 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  ((not (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  0)) ->
  (to_rep1((((s).us_split_fields1).rec__patience__state__values[to_rep((((s).us_split_fields1).rec__patience__state__preds[i]))])) <  to_rep1((((s).us_split_fields1).rec__patience__state__values[i]))))))))

axiom inv__def_axiom22 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  ((not (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  0)) ->
  (0 <  to_rep((((s).us_split_fields1).rec__patience__state__posstack[i]))))))))

axiom inv__def_axiom23 :
  (forall s:us_rep [inv(s)]. ((inv(s) = true) ->
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  ((not (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  0)) ->
  (to_rep((((s).us_split_fields1).rec__patience__state__posstack[to_rep((((s).us_split_fields1).rec__patience__state__preds[i]))])) = (to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])) - 1)))))))

axiom inv__def_axiom24 :
  (forall s:us_rep [inv(s)].
  (((((((((((0 <= to_rep(((s).us_split_fields1).rec__patience__state__numstacks)) and
  (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) <= to_rep(((s).us_split_fields1).rec__patience__state__numelts))) and
  (to_rep(((s).us_split_fields1).rec__patience__state__numelts) <= 100)) and
  ((to_rep(((s).us_split_fields1).rec__patience__state__numelts) = 0) or
  (0 <  to_rep(((s).us_split_fields1).rec__patience__state__numstacks)))) and
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (((1 <= to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i]))) and
  (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) <= to_rep(((s).us_split_fields1).rec__patience__state__numelts))) and
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  ((0 <= to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j]))) and
  (to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j])) <  to_rep(((s).us_split_fields1).rec__patience__state__numelts))))))))) and
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  ((((0 <= to_rep((((s).us_split_fields1).rec__patience__state__posstack[i]))) and
  (to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])) <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) and
  ((0 <= to_rep((((s).us_split_fields1).rec__patience__state__posheight[i]))) and
  (to_rep((((s).us_split_fields1).rec__patience__state__posheight[i])) <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[to_rep((((s).us_split_fields1).rec__patience__state__posstack[i]))])) - 1)))) and
  (to_rep(((((s).us_split_fields1).rec__patience__state__stacks[to_rep((((s).us_split_fields1).rec__patience__state__posstack[i]))])[to_rep((((s).us_split_fields1).rec__patience__state__posheight[i]))])) = i))))) and
  (forall ist:int. (((0 <= ist) and
  (ist <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall ip:int. (((0 <= ip) and
  (ip <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[ist])) - 1))) ->
  ((ist = to_rep((((s).us_split_fields1).rec__patience__state__posstack[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[ist])[ip]))]))) and
  (ip = to_rep((((s).us_split_fields1).rec__patience__state__posheight[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[ist])[ip]))]))))))))) and
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and
  (k <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  (to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j])) <  to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[k])))))))))) and
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numstacks) - 1))) ->
  (forall j:int. (((0 <= j) and
  (j <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 2))) ->
  (forall k:int. ((((j + 1) <= k) and
  (k <= (to_rep((((s).us_split_fields1).rec__patience__state__stacksizes[i])) - 1))) ->
  (to_rep1((((s).us_split_fields1).rec__patience__state__values[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[k]))])) <= to_rep1((((s).us_split_fields1).rec__patience__state__values[to_rep(((((s).us_split_fields1).rec__patience__state__stacks[i])[j]))])))))))))) and
  (forall i:int. (((0 <= i) and
  (i <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) ->
  (((((- 1) <= to_rep((((s).us_split_fields1).rec__patience__state__preds[i]))) and
  (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <= (to_rep(((s).us_split_fields1).rec__patience__state__numelts) - 1))) and
  (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  i)) and
  (if (to_rep((((s).us_split_fields1).rec__patience__state__preds[i])) <  0) then (to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])) = 0) else (((to_rep1((((s).us_split_fields1).rec__patience__state__values[to_rep((((s).us_split_fields1).rec__patience__state__preds[i]))])) <  to_rep1((((s).us_split_fields1).rec__patience__state__values[i]))) and
  (0 <  to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])))) and
  (to_rep((((s).us_split_fields1).rec__patience__state__posstack[to_rep((((s).us_split_fields1).rec__patience__state__preds[i]))])) = (to_rep((((s).us_split_fields1).rec__patience__state__posstack[i])) - 1)))))))) ->
  (inv(s) = true)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : positive, positive -> bool

logic dummy7 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range1(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range1(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,card) farray; rt : t
}

function to_array(a: us_t) : (int,card) farray = (a).elts

function of_array(a: (int,card) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size4 : int

logic object__size4 : int

logic component__size3 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom4 : (0 <= alignment4)

function bool_eq9(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq8 : us_t, us_t -> bool

logic dummy8 : us_t

type cardstack__ref = { cardstack__content : us_t
}

function cardstack__ref_cardstack__content__projection(a: cardstack__ref) : us_t =
  (a).cardstack__content

logic cards : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant(temp___expr_198: us_t, temp___is_init_194: bool,
  temp___skip_constant_195: bool, temp___do_toplevel_196: bool,
  temp___do_typ_inv_197: bool) = ((not (temp___skip_constant_195 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_198),
  last1(temp___expr_198)))

logic temp_____aggregate_def_157 : int -> (int,card) farray

logic temp_____aggregate_def_161 : int -> (int,cardindex) farray

logic temp_____aggregate_def_165 : (int,cardindex) farray -> (int,(int,cardindex) farray) farray

logic temp_____aggregate_def_169 : int -> (int,cardindex) farray

logic temp_____aggregate_def_173 : int -> (int,cardindex) farray

logic temp_____aggregate_def_177 : int -> (int,cardindex) farray

logic temp_____aggregate_def_181 : int -> (int,cardindex) farray

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : integer, integer -> bool

logic dummy9 : integer

type t28b__ref = { t28b__content : integer
}

function t28b__ref_t28b__content__projection(a: t28b__ref) : integer =
  (a).t28b__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range4(temp___expr_46))

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant3(temp___expr_191: int, temp___is_init_187: bool,
  temp___skip_constant_188: bool, temp___do_toplevel_189: bool,
  temp___do_typ_inv_190: bool) = (((temp___is_init_187 = true) or
  (1 <= 52)) -> in_range3(temp___expr_191))

predicate dynamic_invariant4(temp___expr_204: int, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((temp___is_init_200 = true) or
  ((- 1) <= 100)) -> in_range2(temp___expr_204))

logic rliteral : cardindex

axiom rliteral_axiom : (cardindexqtint(rliteral) = 0)

axiom null_state__def_axiom : (null_state = { us_split_fields1 = {
  rec__patience__state__numelts = rliteral; rec__patience__state__values =
  temp_____aggregate_def_157(1); rec__patience__state__numstacks = rliteral;
  rec__patience__state__stacksizes = temp_____aggregate_def_161((- 1));
  rec__patience__state__stacks =
  temp_____aggregate_def_165(temp_____aggregate_def_169((- 1)));
  rec__patience__state__posstack = temp_____aggregate_def_173((- 1));
  rec__patience__state__posheight = temp_____aggregate_def_177((- 1));
  rec__patience__state__preds = temp_____aggregate_def_181((- 1)) } })

logic rliteral1 : card

axiom rliteral_axiom1 : (cardqtint(rliteral1) = 1)

axiom def_axiom :
  (forall temp___159:int. (dynamic_invariant3(temp___159, true, true, true,
  true) ->
  (forall temp___160:int.
  ((temp_____aggregate_def_157(temp___159)[temp___160]) = rliteral1))))

logic rliteral2 : cardindex

axiom rliteral_axiom2 : (cardindexqtint(rliteral2) = (- 1))

axiom def_axiom1 :
  (forall temp___163:int. (dynamic_invariant4(temp___163, true, true, true,
  true) ->
  (forall temp___164:int.
  ((temp_____aggregate_def_161(temp___163)[temp___164]) = rliteral2))))

axiom def_axiom2 :
  (forall temp___167:(int,cardindex) farray.
  (forall temp___168:int.
  ((temp_____aggregate_def_165(temp___167)[temp___168]) = temp___167)))

axiom def_axiom3 :
  (forall temp___171:int. (dynamic_invariant4(temp___171, true, true, true,
  true) ->
  (forall temp___172:int.
  ((temp_____aggregate_def_169(temp___171)[temp___172]) = rliteral2))))

axiom def_axiom4 :
  (forall temp___183:int. (dynamic_invariant4(temp___183, true, true, true,
  true) ->
  (forall temp___184:int.
  ((temp_____aggregate_def_181(temp___183)[temp___184]) = rliteral2))))

axiom def_axiom5 :
  (forall temp___175:int. (dynamic_invariant4(temp___175, true, true, true,
  true) ->
  (forall temp___176:int.
  ((temp_____aggregate_def_173(temp___175)[temp___176]) = rliteral2))))

axiom def_axiom6 :
  (forall temp___179:int. (dynamic_invariant4(temp___179, true, true, true,
  true) ->
  (forall temp___180:int.
  ((temp_____aggregate_def_177(temp___179)[temp___180]) = rliteral2))))

 (* File "patience.ads", line 127, characters 0-0 *)
goal defqtvc : (({ us_split_fields1 = { rec__patience__state__numelts =
  rliteral; rec__patience__state__values = temp_____aggregate_def_157(1);
  rec__patience__state__numstacks = rliteral;
  rec__patience__state__stacksizes = temp_____aggregate_def_161((- 1));
  rec__patience__state__stacks =
  temp_____aggregate_def_165(temp_____aggregate_def_169((- 1)));
  rec__patience__state__posstack = temp_____aggregate_def_173((- 1));
  rec__patience__state__posheight = temp_____aggregate_def_177((- 1));
  rec__patience__state__preds = temp_____aggregate_def_181((- 1)) }
  } = null_state) -> (dynamic_invariant(cards, true, false, true, true) ->
  ((length(cards) <= 100) ->
  (forall s__split_fields:us_split_fields.
  ((s__split_fields = (null_state).us_split_fields1) -> (let temp___867 =
  first1(cards) : int in
  (forall i:int. ((i = temp___867) ->
  ((andb((if (temp___867 <= i) then true else false),
  (if (i <= last1(cards)) then true else false)) = true) ->
  (in_range1((i - first1(cards))) ->
  (forall o:int.
  ((to_rep((s__split_fields).rec__patience__state__numelts) = o) ->
  ((to_rep((s__split_fields).rec__patience__state__numelts) = (i - first1(cards))) ->
  ((forall s__split_fields1:us_split_fields. inv__function_guard(inv({
   us_split_fields1 = s__split_fields1 }), { us_split_fields1 =
   s__split_fields1 })) ->
  (inv({ us_split_fields1 = s__split_fields }) = true)))))))))))))))
