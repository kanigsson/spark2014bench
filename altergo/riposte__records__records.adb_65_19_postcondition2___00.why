(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_byte

logic unsigned_byteqtint : unsigned_byte -> int

axiom unsigned_byteqtaxiom :
  (forall i:unsigned_byte. (0 <= unsigned_byteqtint(i)))

axiom unsigned_byteqtaxiom1 :
  (forall i:unsigned_byte. (unsigned_byteqtint(i) <= 255))

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref_unsigned_byte__content__projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

function to_rep(x: unsigned_byte) : int = unsigned_byteqtint(x)

logic of_rep : int -> unsigned_byte

axiom inversion_axiom :
  (forall x:unsigned_byte [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:unsigned_byte [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__records_prooffuncs__pair__a : unsigned_byte;
rec__records_prooffuncs__pair__b : unsigned_byte
}

function us_split_fields_rec__records_prooffuncs__pair__a__projection(a: us_split_fields) : unsigned_byte =
  (a).rec__records_prooffuncs__pair__a

function us_split_fields_rec__records_prooffuncs__pair__b__projection(a: us_split_fields) : unsigned_byte =
  (a).rec__records_prooffuncs__pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) = to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a)) and
  (to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) = to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic records_prooffuncs__pair__a__first__bit : int

logic records_prooffuncs__pair__a__last__bit : int

logic records_prooffuncs__pair__a__position : int

axiom records_prooffuncs__pair__a__first__bit_axiom :
  (0 <= records_prooffuncs__pair__a__first__bit)

axiom records_prooffuncs__pair__a__last__bit_axiom :
  (records_prooffuncs__pair__a__first__bit <  records_prooffuncs__pair__a__last__bit)

axiom records_prooffuncs__pair__a__position_axiom :
  (0 <= records_prooffuncs__pair__a__position)

logic records_prooffuncs__pair__b__first__bit : int

logic records_prooffuncs__pair__b__last__bit : int

logic records_prooffuncs__pair__b__position : int

axiom records_prooffuncs__pair__b__first__bit_axiom :
  (0 <= records_prooffuncs__pair__b__first__bit)

axiom records_prooffuncs__pair__b__last__bit_axiom :
  (records_prooffuncs__pair__b__first__bit <  records_prooffuncs__pair__b__last__bit)

axiom records_prooffuncs__pair__b__position_axiom :
  (0 <= records_prooffuncs__pair__b__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type pair__ref = { pair__content : us_rep
}

function pair__ref_pair__content__projection(a: pair__ref) : us_rep =
  (a).pair__content

logic add_pair_a : us_rep, us_rep -> us_rep

logic add_pair_a__function_guard : us_rep, us_rep, us_rep -> prop

axiom add_pair_a__post_axiom :
  (forall a:us_rep. forall b:us_rep [add_pair_a(a, b)].
  ((in_range1((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a))) and
  in_range1((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b)))) ->
  (let result = add_pair_a(a, b) : us_rep in
  (add_pair_a__function_guard(result, a, b) -> (bool_eq2(result, {
  us_split_fields1 = { rec__records_prooffuncs__pair__a =
  of_rep((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a)));
  rec__records_prooffuncs__pair__b =
  of_rep((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b)))
  } }) = true)))))

logic a : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic b : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  (0 <= 255)) -> in_range1(temp___expr_180))

logic rliteral : unsigned_byte

axiom rliteral_axiom : (unsigned_byteqtint(rliteral) = 0)

 (* File "records.adb", line 64, characters 0-0 *)
goal defqtvc :
  (forall r__split_fields:us_split_fields.
  ((exists o:bool.
   ((exists o1:int.
    ((to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a) = o1) and
    (exists o2:int.
    ((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) = o2) and
    (if (o2 <= (255 - o1)) then (exists o3:int.
                                ((to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b) = o3) and
                                (exists o4:int.
                                ((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) = o4) and
                                (o = (if (o4 <= (255 - o3)) then true else false)))))) else (o = false)))))) and
   (exists spark__branch:bool. ((spark__branch = o) and
   (if (spark__branch = true) then (let o1 = b : us_rep in (let o2 = a
   : us_rep in (let temp___434 = add_pair_a(o2, o1) : us_rep in
   ((add_pair_a__function_guard(temp___434, o2, o1) and (bool_eq2(temp___434,
   { us_split_fields1 = { rec__records_prooffuncs__pair__a =
   of_rep((to_rep(((o2).us_split_fields1).rec__records_prooffuncs__pair__a) + to_rep(((o1).us_split_fields1).rec__records_prooffuncs__pair__a)));
   rec__records_prooffuncs__pair__b =
   of_rep((to_rep(((o2).us_split_fields1).rec__records_prooffuncs__pair__b) + to_rep(((o1).us_split_fields1).rec__records_prooffuncs__pair__b)))
   } }) = true)) and
   (r__split_fields = (temp___434).us_split_fields1))))) else (r__split_fields = {
   rec__records_prooffuncs__pair__a = rliteral;
   rec__records_prooffuncs__pair__b = rliteral })))))) ->
  (forall records__safe_add_pair_a__result:us_split_fields.
  ((records__safe_add_pair_a__result = r__split_fields) ->
  ((in_range1((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a))) and
  in_range1((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b)))) ->
  (bool_eq2({ us_split_fields1 = records__safe_add_pair_a__result }, {
  us_split_fields1 = { rec__records_prooffuncs__pair__a =
  of_rep((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a)));
  rec__records_prooffuncs__pair__b =
  of_rep((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) + to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b)))
  } }) = true))))))
