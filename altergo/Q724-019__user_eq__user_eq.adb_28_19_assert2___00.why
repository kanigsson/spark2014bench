(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__user_eq__nested__r1__a : integer;
rec__user_eq__nested__r1__b : integer
}

function us_split_fields_rec__user_eq__nested__r1__a__projection(a: us_split_fields) : integer =
  (a).rec__user_eq__nested__r1__a

function us_split_fields_rec__user_eq__nested__r1__b__projection(a: us_split_fields) : integer =
  (a).rec__user_eq__nested__r1__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__user_eq__nested__r1__a) = to_rep(((b).us_split_fields1).rec__user_eq__nested__r1__a)) and
  (to_rep(((a).us_split_fields1).rec__user_eq__nested__r1__b) = to_rep(((b).us_split_fields1).rec__user_eq__nested__r1__b))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq__nested__r1__a__first__bit : int

logic user_eq__nested__r1__a__last__bit : int

logic user_eq__nested__r1__a__position : int

axiom user_eq__nested__r1__a__first__bit_axiom :
  (0 <= user_eq__nested__r1__a__first__bit)

axiom user_eq__nested__r1__a__last__bit_axiom :
  (user_eq__nested__r1__a__first__bit <  user_eq__nested__r1__a__last__bit)

axiom user_eq__nested__r1__a__position_axiom :
  (0 <= user_eq__nested__r1__a__position)

logic user_eq__nested__r1__b__first__bit : int

logic user_eq__nested__r1__b__last__bit : int

logic user_eq__nested__r1__b__position : int

axiom user_eq__nested__r1__b__first__bit_axiom :
  (0 <= user_eq__nested__r1__b__first__bit)

axiom user_eq__nested__r1__b__last__bit_axiom :
  (user_eq__nested__r1__b__first__bit <  user_eq__nested__r1__b__last__bit)

axiom user_eq__nested__r1__b__position_axiom :
  (0 <= user_eq__nested__r1__b__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type r1__ref = { r1__content : us_rep
}

function r1__ref_r1__content__projection(a: r1__ref) : us_rep =
  (a).r1__content

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq__nested__r1__a__first__bit1 : int

logic user_eq__nested__r1__a__last__bit1 : int

logic user_eq__nested__r1__a__position1 : int

axiom user_eq__nested__r1__a__first__bit_axiom1 :
  (0 <= user_eq__nested__r1__a__first__bit1)

axiom user_eq__nested__r1__a__last__bit_axiom1 :
  (user_eq__nested__r1__a__first__bit1 <  user_eq__nested__r1__a__last__bit1)

axiom user_eq__nested__r1__a__position_axiom1 :
  (0 <= user_eq__nested__r1__a__position1)

logic user_eq__nested__r1__b__first__bit1 : int

logic user_eq__nested__r1__b__last__bit1 : int

logic user_eq__nested__r1__b__position1 : int

axiom user_eq__nested__r1__b__first__bit_axiom1 :
  (0 <= user_eq__nested__r1__b__first__bit1)

axiom user_eq__nested__r1__b__last__bit_axiom1 :
  (user_eq__nested__r1__b__first__bit1 <  user_eq__nested__r1__b__last__bit1)

axiom user_eq__nested__r1__b__position_axiom1 :
  (0 <= user_eq__nested__r1__b__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type r2__ref = { r2__content : us_rep
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep =
  (a).r2__content

type us_split_fields2 = { rec__user_eq__rr1__f : us_rep
}

function us_split_fields_rec__user_eq__rr1__f__projection(a: us_split_fields2) : us_rep =
  (a).rec__user_eq__rr1__f

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (user_eq1(((a).us_split_fields3).rec__user_eq__rr1__f,
  ((b).us_split_fields3).rec__user_eq__rr1__f) = true) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq__rr1__f__first__bit : int

logic user_eq__rr1__f__last__bit : int

logic user_eq__rr1__f__position : int

axiom user_eq__rr1__f__first__bit_axiom : (0 <= user_eq__rr1__f__first__bit)

axiom user_eq__rr1__f__last__bit_axiom :
  (user_eq__rr1__f__first__bit <  user_eq__rr1__f__last__bit)

axiom user_eq__rr1__f__position_axiom : (0 <= user_eq__rr1__f__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type rr1__ref = { rr1__content : us_rep1
}

function rr1__ref_rr1__content__projection(a: rr1__ref) : us_rep1 =
  (a).rr1__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields4 = { rec__user_eq__rr2__f : us_rep
}

function us_split_fields_rec__user_eq__rr2__f__projection(a: us_split_fields4) : us_rep =
  (a).rec__user_eq__rr2__f

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq3(a: us_rep2, b: us_rep2) : bool =
  (if (user_eq2(((a).us_split_fields5).rec__user_eq__rr2__f,
  ((b).us_split_fields5).rec__user_eq__rr2__f) = true) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq__rr2__f__first__bit : int

logic user_eq__rr2__f__last__bit : int

logic user_eq__rr2__f__position : int

axiom user_eq__rr2__f__first__bit_axiom : (0 <= user_eq__rr2__f__first__bit)

axiom user_eq__rr2__f__last__bit_axiom :
  (user_eq__rr2__f__first__bit <  user_eq__rr2__f__last__bit)

axiom user_eq__rr2__f__position_axiom : (0 <= user_eq__rr2__f__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type rr2__ref = { rr2__content : us_rep2
}

function rr2__ref_rr2__content__projection(a: rr2__ref) : us_rep2 =
  (a).rr2__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom oeq__def_axiom :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)]. ((oeq(x, y) = true) ->
  (to_rep(((x).us_split_fields1).rec__user_eq__nested__r1__a) = to_rep(((y).us_split_fields1).rec__user_eq__nested__r1__a))))

axiom oeq__def_axiom1 :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)].
  ((to_rep(((x).us_split_fields1).rec__user_eq__nested__r1__a) = to_rep(((y).us_split_fields1).rec__user_eq__nested__r1__a)) ->
  (oeq(x, y) = true)))

logic oeq1 : us_rep, us_rep -> bool

logic oeq__function_guard1 : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard1(oeq1(a, b), a, b))

axiom user_eq__def_axiom3 :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq1(a, b)))

axiom oeq__def_axiom2 :
  (forall x:us_rep. forall y:us_rep [oeq1(x, y)]. ((oeq1(x, y) = true) ->
  (to_rep(((x).us_split_fields1).rec__user_eq__nested__r1__b) = to_rep(((y).us_split_fields1).rec__user_eq__nested__r1__b))))

axiom oeq__def_axiom3 :
  (forall x:us_rep. forall y:us_rep [oeq1(x, y)].
  ((to_rep(((x).us_split_fields1).rec__user_eq__nested__r1__b) = to_rep(((y).us_split_fields1).rec__user_eq__nested__r1__b)) ->
  (oeq1(x, y) = true)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 2)

 (* File "user_eq.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_split_fields. ((x__split_fields = {
  rec__user_eq__nested__r1__a = rliteral; rec__user_eq__nested__r1__b =
  rliteral }) ->
  (forall y__split_fields:us_split_fields. ((y__split_fields = {
  rec__user_eq__nested__r1__a = rliteral; rec__user_eq__nested__r1__b =
  rliteral1 }) ->
  (forall z__split_fields:us_split_fields. ((z__split_fields = {
  rec__user_eq__nested__r1__a = rliteral; rec__user_eq__nested__r1__b =
  rliteral }) ->
  (forall w__split_fields:us_split_fields. ((w__split_fields = {
  rec__user_eq__nested__r1__a = rliteral; rec__user_eq__nested__r1__b =
  rliteral1 }) -> ((bool_eq2({ us_split_fields3 = { rec__user_eq__rr1__f = {
  us_split_fields1 = x__split_fields } } }, { us_split_fields3 = {
  rec__user_eq__rr1__f = { us_split_fields1 = y__split_fields } }
  }) = true) -> (bool_eq3({ us_split_fields5 = { rec__user_eq__rr2__f = {
  us_split_fields1 = z__split_fields } } }, { us_split_fields5 = {
  rec__user_eq__rr2__f = { us_split_fields1 = w__split_fields } }
  }) = true))))))))))
