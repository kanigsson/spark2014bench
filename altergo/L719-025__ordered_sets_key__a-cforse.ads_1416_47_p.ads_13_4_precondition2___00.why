(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic my_inf : int, int -> bool

logic my_inf__function_guard : bool, int, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (1 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 100))

predicate in_range1(x: int) = ((1 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : element_type, element_type -> bool

logic dummy : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant(temp___expr_286: int, temp___is_init_282: bool,
  temp___skip_constant_283: bool, temp___do_toplevel_284: bool,
  temp___do_typ_inv_285: bool) = (((temp___is_init_282 = true) or
  (1 <= 100)) -> in_range1(temp___expr_286))

axiom my_inf__def_axiom :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((my_inf(i1, i2) = true) ->
  (i1 <  i2)))

axiom my_inf__def_axiom1 :
  (forall i1:int. forall i2:int [my_inf(i1, i2)]. ((i1 <  i2) -> (my_inf(i1,
  i2) = true)))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep(x: count_type) : int = count_typeqtint(x)

logic of_rep : int -> count_type

axiom inversion_axiom :
  (forall x:count_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:count_type [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p__my_sets__cursor__node : count_type
}

function us_split_fields_rec__p__my_sets__cursor__node__projection(a: us_split_fields) : count_type =
  (a).rec__p__my_sets__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__p__my_sets__cursor__node) = to_rep(((b).us_split_fields1).rec__p__my_sets__cursor__node)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__my_sets__cursor__node__first__bit : int

logic p__my_sets__cursor__node__last__bit : int

logic p__my_sets__cursor__node__position : int

axiom p__my_sets__cursor__node__first__bit_axiom :
  (0 <= p__my_sets__cursor__node__first__bit)

axiom p__my_sets__cursor__node__last__bit_axiom :
  (p__my_sets__cursor__node__first__bit <  p__my_sets__cursor__node__last__bit)

axiom p__my_sets__cursor__node__position_axiom :
  (0 <= p__my_sets__cursor__node__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__my_sets__set__capacity : count_type
}

function us_split_discrs_rec__p__my_sets__set__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__p__my_sets__set__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__p__my_sets__set : us_main_type
}

function us_split_fields_rec__p__my_sets__set__projection(a: us_split_fields2) : us_main_type =
  (a).rec__p__my_sets__set

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__p__my_sets__set__capacity) = to_rep(((b).us_split_discrs1).rec__p__my_sets__set__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__p__my_sets__set,
  ((b).us_split_fields3).rec__p__my_sets__set) = true)) then true else false)

predicate in_range3(rec__p__my_sets__set__capacity1: int,
  a: us_split_discrs) =
  (rec__p__my_sets__set__capacity1 = to_rep((a).rec__p__my_sets__set__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p__my_sets__set__capacity__first__bit : int

logic p__my_sets__set__capacity__last__bit : int

logic p__my_sets__set__capacity__position : int

axiom p__my_sets__set__capacity__first__bit_axiom :
  (0 <= p__my_sets__set__capacity__first__bit)

axiom p__my_sets__set__capacity__last__bit_axiom :
  (p__my_sets__set__capacity__first__bit <  p__my_sets__set__capacity__last__bit)

axiom p__my_sets__set__capacity__position_axiom :
  (0 <= p__my_sets__set__capacity__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type set__ref = { set__content : us_rep1
}

function set__ref_set__content__projection(a: set__ref) : us_rep1 =
  (a).set__content

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq(a, b)))

predicate dynamic_invariant1(temp___expr_304: int, temp___is_init_300: bool,
  temp___skip_constant_301: bool, temp___do_toplevel_302: bool,
  temp___do_typ_inv_303: bool) = (((temp___is_init_300 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_304))

axiom length__post_axiom :
  (forall container:us_rep1 [length1(container)].
  (length1(container) <= to_rep(((container).us_split_discrs1).rec__p__my_sets__set__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant1(length1(container), true, false, true, true))

logic first_element : us_rep1 -> int

logic first_element__function_guard : int, us_rep1 -> prop

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq6 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

axiom temp___result_204qtdef :
  (forall container:us_rep2. forall item:int. forall i:int.
  my_inf__function_guard(my_inf(item, get(container, i)), item,
  get(container, i)))

function e_smaller_than_range(container: us_rep2, fst: int, lst: int,
  item: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (my_inf(item,
      get(container, i)) = true))) then true else false)

logic e_smaller_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

logic elements : us_rep1 -> us_rep2

logic elements__function_guard : us_rep2, us_rep1 -> prop

logic is_empty : us_rep1 -> bool

logic is_empty__function_guard : bool, us_rep1 -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. (1 <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : element_type1, element_type1 -> bool

logic dummy5 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant2(temp___expr_293: int, temp___is_init_289: bool,
  temp___skip_constant_290: bool, temp___do_toplevel_291: bool,
  temp___do_typ_inv_292: bool) = (((temp___is_init_289 = true) or
  (1 <= 100)) -> in_range4(temp___expr_293))

axiom first_element__post_axiom :
  (forall container:us_rep1 [first_element(container)].
  ((not (is_empty(container) = true)) ->
  (first_element(container) = get(elements(container), 1))))

axiom first_element__post_axiom1 :
  (forall container:us_rep1 [first_element(container)].
  ((not (is_empty(container) = true)) ->
  (e_smaller_than_range(elements(container), 2, length1(container),
  first_element(container)) = true)))

axiom first_element__post_axiom2 :
  (forall container:us_rep1 [first_element(container)].
  ((not (is_empty(container) = true)) ->
  dynamic_invariant2(first_element(container), true, false, true, true)))

logic container : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic item : int

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom temp___result_157qtdef :
  (forall left:int. forall right:int. my_inf__function_guard(my_inf(left,
  right), left, right))

axiom temp___result_158qtdef :
  (forall left:int. forall right:int. my_inf__function_guard(my_inf(right,
  left), right, left))

function equivalent_elements(left: int, right: int) : bool =
  andb(notb(my_inf(left, right)), notb(my_inf(right, left)))

logic equivalent_elements__function_guard : bool, int, int -> prop

logic length2 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

axiom temp___result_202qtdef :
  (forall container1:us_rep2. forall item1:int. forall i:int.
  my_inf__function_guard(my_inf(get(container1, i), item1), get(container1,
  i), item1))

function e_bigger_than_range(container1: us_rep2, fst: int, lst: int,
  item1: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (my_inf(get(container1,
      i), item1) = true))) then true else false)

logic e_bigger_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

function e_is_find(container1: us_rep2, item1: int, position: int) : bool =
  andb((if (0 <  position) then e_bigger_than_range(container1, 1,
  (position - 1), item1) else of_int(1)),
  (if (position <  length2(container1)) then e_smaller_than_range(container1,
  (position + 1), length2(container1), item1) else of_int(1)))

logic e_is_find__function_guard : bool, us_rep2, int, int -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

function last(container1: us_rep2) : int = (0 + length2(container1))

logic last__function_guard : int, us_rep2 -> prop

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq(length2(left), length2(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption(temp___expr_378: us_rep2,
  temp___skip_top_level_379: bool) =
  ((not (temp___skip_top_level_379 = true)) ->
  (length2(temp___expr_378) = 0))

axiom find__post_axiom :
  (forall container1:us_rep2.
  (forall item1:int [find(container1, item1)]. (dynamic_invariant2(item1,
  true, true, true, true) -> (let result = find(container1, item1) : int in
  ((0 <  result) -> (result <= length2(container1)))))))

axiom find__post_axiom1 :
  (forall container1:us_rep2.
  (forall item1:int [find(container1, item1)]. (dynamic_invariant2(item1,
  true, true, true, true) -> (let result = find(container1, item1) : int in
  ((0 <  result) -> (equivalent_elements(item1, get(container1,
  result)) = true))))))

axiom find__post_axiom2 :
  (forall container1:us_rep2.
  (forall item1:int [find(container1, item1)]. (dynamic_invariant2(item1,
  true, true, true, true) -> dynamic_invariant1(find(container1, item1),
  true, false, true, true))))

function e_elements_included(left: us_rep2, right: us_rep2) : bool =
  (if (forall i:int. (((1 <= i) and (i <= length2(left))) ->
      ((0 <  find(right, get(left, i))) and (get(right, find(right, get(left,
      i))) = get(left, i))))) then true else false)

logic e_elements_included__function_guard : bool, us_rep2, us_rep2 -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq8 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq6 : us_rep3, us_rep3 -> bool

logic dummy6 : us_rep3

type set__ref1 = { set__content1 : us_rep3
}

function set__ref_set__content__2__projection(a: set__ref1) : us_rep3 =
  (a).set__content1

logic length3 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

logic model : us_rep1 -> us_rep3

logic model__function_guard : us_rep3, us_rep1 -> prop

logic oeq2 : us_rep3, us_rep3 -> bool

logic oeq__function_guard2 : bool, us_rep3, us_rep3 -> prop

logic is_empty1 : us_rep3 -> bool

logic is_empty__function_guard1 : bool, us_rep3 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq6(a, b)]. (user_eq6(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption1(temp___expr_342: us_rep3,
  temp___skip_top_level_343: bool) =
  ((not (temp___skip_top_level_343 = true)) ->
  (is_empty1(temp___expr_342) = true))

axiom model__post_axiom :
  (forall container1:us_rep1 [model(container1)].
  (length3(model(container1)) = length1(container1)))

logic contains : us_rep3, int -> bool

logic contains__function_guard : bool, us_rep3, int -> prop

function iter_has_element(container1: us_rep2, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container1)) then true else false))

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. (1 <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 100))

predicate in_range5(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : element_type2, element_type2 -> bool

logic dummy7 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__3__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom elements__post_axiom :
  (forall container1:us_rep1 [elements(container1)].
  (length2(elements(container1)) = length1(container1)))

axiom elements__post_axiom1 :
  (forall container1:us_rep1 [elements(container1)]. (let result =
  elements(container1) : us_rep2 in
  (forall temp___458:int. ((in_range6(temp___458) and
  (iter_has_element(result, temp___458) = true)) ->
  (contains(model(container1), get(result, temp___458)) = true)))))

axiom elements__post_axiom2 :
  (forall container1:us_rep1 [elements(container1)].
  (forall item1:int. ((in_range5(item1) and (contains(model(container1),
  item1) = true)) -> (0 <  find(elements(container1), item1)))))

axiom elements__post_axiom3 :
  (forall container1:us_rep1 [elements(container1)]. (let result =
  elements(container1) : us_rep2 in
  (forall item1:int. ((in_range5(item1) and (contains(model(container1),
  item1) = true)) -> (equivalent_elements(get(result, find(result, item1)),
  item1) = true)))))

axiom elements__post_axiom4 :
  (forall container1:us_rep1 [elements(container1)]. (let result =
  elements(container1) : us_rep2 in
  (forall i:int. (((1 <= i) and (i <= length1(container1))) -> (find(result,
  get(result, i)) = i)))))

axiom elements__post_axiom5 :
  (forall container1:us_rep1 [elements(container1)]. (let result =
  elements(container1) : us_rep2 in
  (forall i:int. (((1 <= i) and (i <= length1(container1))) ->
  (e_is_find(result, get(result, i), i) = true)))))

axiom oeq__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(elements(left), elements(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq(left, right)].
  ((not (oeq(left, right) = true)) ->
  ((not (e_elements_included(elements(left), elements(right)) = true)) or
  (not (e_elements_included(elements(right), elements(left)) = true)))))

axiom is_empty__post_axiom :
  (forall container1:us_rep1 [is_empty(container1)].
  ((is_empty(container1) = true) -> (length1(container1) = 0)))

axiom is_empty__post_axiom1 :
  (forall container1:us_rep1 [is_empty(container1)].
  ((length1(container1) = 0) -> (is_empty(container1) = true)))

predicate dynamic_invariant3(temp___expr_334: int, temp___is_init_330: bool,
  temp___skip_constant_331: bool, temp___do_toplevel_332: bool,
  temp___do_typ_inv_333: bool) = (((temp___is_init_330 = true) or
  (1 <= 100)) -> in_range5(temp___expr_334))

axiom contains__post_axiom :
  (forall container1:us_rep3.
  (forall item1:int [contains(container1, item1)]. (dynamic_invariant3(item1,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists e:int. ((in_range5(e) and (contains(container1, e) = true)) and
   (equivalent_elements(e, item1) = true))) ->
  (contains(container1, item1) = true))))))

axiom length__post_axiom2 :
  (forall container1:us_rep3 [length3(container1)].
  dynamic_invariant1(length3(container1), true, false, true, true))

logic ole : us_rep3, us_rep3 -> bool

logic ole__function_guard : bool, us_rep3, us_rep3 -> prop

axiom ole__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [ole(left, right)]. ((ole(left,
  right) = true) ->
  (forall item1:int. ((in_range5(item1) and (contains(left,
  item1) = true)) -> (contains(right, item1) = true)))))

axiom ole__post_axiom1 :
  (forall left:us_rep3. forall right:us_rep3 [ole(left, right)].
  ((forall item1:int. ((in_range5(item1) and (contains(left,
   item1) = true)) -> (contains(right, item1) = true))) ->
  (ole(left, right) = true)))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (ole(left, right) = true)))

axiom oeq__post_axiom3 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (ole(right, left) = true)))

axiom oeq__post_axiom4 :
  (forall left:us_rep3. forall right:us_rep3 [oeq2(left, right)].
  (((ole(left, right) = true) and (ole(right, left) = true)) -> (oeq2(left,
  right) = true)))

axiom is_empty__post_axiom2 :
  (forall container1:us_rep3 [is_empty1(container1)].
  ((is_empty1(container1) = true) ->
  (forall item1:int. (not (in_range5(item1) and (contains(container1,
  item1) = true))))))

axiom is_empty__post_axiom3 :
  (forall container1:us_rep3 [is_empty1(container1)].
  ((forall item1:int. (not (in_range5(item1) and (contains(container1,
   item1) = true)))) ->
  (is_empty1(container1) = true)))

axiom is_empty__post_axiom4 :
  (forall container1:us_rep3 [is_empty1(container1)].
  ((is_empty1(container1) = true) -> (length3(container1) = 0)))

axiom is_empty__post_axiom5 :
  (forall container1:us_rep3 [is_empty1(container1)].
  ((length3(container1) = 0) -> (is_empty1(container1) = true)))

predicate dynamic_invariant4(temp___expr_370: int, temp___is_init_366: bool,
  temp___skip_constant_367: bool, temp___do_toplevel_368: bool,
  temp___do_typ_inv_369: bool) = (((temp___is_init_366 = true) or
  (0 <= 2147483647)) -> in_range6(temp___expr_370))

axiom length__post_axiom3 :
  (forall container1:us_rep2 [length2(container1)].
  ((0 + length2(container1)) <= 2147483647))

axiom length__post_axiom4 :
  (forall container1:us_rep2 [length2(container1)].
  dynamic_invariant1(length2(container1), true, false, true, true))

type element_type3

logic element_typeqtint3 : element_type3 -> int

axiom element_typeqtaxiom6 :
  (forall i:element_type3. (1 <= element_typeqtint3(i)))

axiom element_typeqtaxiom7 :
  (forall i:element_type3. (element_typeqtint3(i) <= 100))

predicate in_range7(x: int) = ((1 <= x) and (x <= 100))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : element_type3, element_type3 -> bool

logic dummy9 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref3) : element_type3 =
  (a).element_type__content3

predicate dynamic_invariant5(temp___expr_363: int, temp___is_init_359: bool,
  temp___skip_constant_360: bool, temp___do_toplevel_361: bool,
  temp___do_typ_inv_362: bool) = (((temp___is_init_359 = true) or
  (1 <= 100)) -> in_range7(temp___expr_363))

axiom get__post_axiom :
  (forall container1:us_rep2.
  (forall position:int [get(container1, position)].
  ((dynamic_invariant4(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container1)))) ->
  dynamic_invariant5(get(container1, position), true, false, true, true))))

 (* File "a-cforse.ads", line 1413, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(item, true, false, true, true) -> (let o =
  container : us_rep1 in (let o1 = length1(o) : int in
  ((dynamic_invariant1(o1, true, false, true, true) and
  (o1 <= to_rep(((o).us_split_discrs1).rec__p__my_sets__set__capacity))) ->
  ((not (o1 = 0)) -> (not (is_empty(container) = true)))))))
