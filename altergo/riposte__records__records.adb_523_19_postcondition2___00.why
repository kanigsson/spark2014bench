(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type unsigned_byte

logic unsigned_byteqtint : unsigned_byte -> int

axiom unsigned_byteqtaxiom :
  (forall i:unsigned_byte. (0 <= unsigned_byteqtint(i)))

axiom unsigned_byteqtaxiom1 :
  (forall i:unsigned_byte. (unsigned_byteqtint(i) <= 255))

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref_unsigned_byte__content__projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

function to_rep(x: unsigned_byte) : int = unsigned_byteqtint(x)

logic of_rep : int -> unsigned_byte

axiom inversion_axiom :
  (forall x:unsigned_byte [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:unsigned_byte [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__records_prooffuncs__pair__a : unsigned_byte;
rec__records_prooffuncs__pair__b : unsigned_byte
}

function us_split_fields_rec__records_prooffuncs__pair__a__projection(a: us_split_fields) : unsigned_byte =
  (a).rec__records_prooffuncs__pair__a

function us_split_fields_rec__records_prooffuncs__pair__b__projection(a: us_split_fields) : unsigned_byte =
  (a).rec__records_prooffuncs__pair__b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__a) = to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__a)) and
  (to_rep(((a).us_split_fields1).rec__records_prooffuncs__pair__b) = to_rep(((b).us_split_fields1).rec__records_prooffuncs__pair__b))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic records_prooffuncs__pair__a__first__bit : int

logic records_prooffuncs__pair__a__last__bit : int

logic records_prooffuncs__pair__a__position : int

axiom records_prooffuncs__pair__a__first__bit_axiom :
  (0 <= records_prooffuncs__pair__a__first__bit)

axiom records_prooffuncs__pair__a__last__bit_axiom :
  (records_prooffuncs__pair__a__first__bit <  records_prooffuncs__pair__a__last__bit)

axiom records_prooffuncs__pair__a__position_axiom :
  (0 <= records_prooffuncs__pair__a__position)

logic records_prooffuncs__pair__b__first__bit : int

logic records_prooffuncs__pair__b__last__bit : int

logic records_prooffuncs__pair__b__position : int

axiom records_prooffuncs__pair__b__first__bit_axiom :
  (0 <= records_prooffuncs__pair__b__first__bit)

axiom records_prooffuncs__pair__b__last__bit_axiom :
  (records_prooffuncs__pair__b__first__bit <  records_prooffuncs__pair__b__last__bit)

axiom records_prooffuncs__pair__b__position_axiom :
  (0 <= records_prooffuncs__pair__b__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type pair__ref = { pair__content : us_rep
}

function pair__ref_pair__content__projection(a: pair__ref) : us_rep =
  (a).pair__content

type command_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : command_t, command_t -> bool

logic dummy2 : command_t

type command_t__ref = { command_t__content : command_t
}

function command_t__ref_command_t__content__projection(a: command_t__ref) : command_t =
  (a).command_t__content

logic to_rep1 : command_t -> int

logic of_rep1 : int -> command_t

axiom inversion_axiom1 :
  (forall x:command_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:command_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__records_prooffuncs__packet__data : us_rep;
rec__records_prooffuncs__packet__command : command_t
}

function us_split_fields_rec__records_prooffuncs__packet__data__projection(a: us_split_fields2) : us_rep =
  (a).rec__records_prooffuncs__packet__data

function us_split_fields_rec__records_prooffuncs__packet__command__projection(a: us_split_fields2) : command_t =
  (a).rec__records_prooffuncs__packet__command

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq2(((a).us_split_fields3).rec__records_prooffuncs__packet__data,
  ((b).us_split_fields3).rec__records_prooffuncs__packet__data) = true) and
  (to_rep1(((a).us_split_fields3).rec__records_prooffuncs__packet__command) = to_rep1(((b).us_split_fields3).rec__records_prooffuncs__packet__command))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic records_prooffuncs__packet__data__first__bit : int

logic records_prooffuncs__packet__data__last__bit : int

logic records_prooffuncs__packet__data__position : int

axiom records_prooffuncs__packet__data__first__bit_axiom :
  (0 <= records_prooffuncs__packet__data__first__bit)

axiom records_prooffuncs__packet__data__last__bit_axiom :
  (records_prooffuncs__packet__data__first__bit <  records_prooffuncs__packet__data__last__bit)

axiom records_prooffuncs__packet__data__position_axiom :
  (0 <= records_prooffuncs__packet__data__position)

logic records_prooffuncs__packet__command__first__bit : int

logic records_prooffuncs__packet__command__last__bit : int

logic records_prooffuncs__packet__command__position : int

axiom records_prooffuncs__packet__command__first__bit_axiom :
  (0 <= records_prooffuncs__packet__command__first__bit)

axiom records_prooffuncs__packet__command__last__bit_axiom :
  (records_prooffuncs__packet__command__first__bit <  records_prooffuncs__packet__command__last__bit)

axiom records_prooffuncs__packet__command__position_axiom :
  (0 <= records_prooffuncs__packet__command__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type packet__ref = { packet__content : us_rep1
}

function packet__ref_packet__content__projection(a: packet__ref) : us_rep1 =
  (a).packet__content

logic r1 : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

type record_subtype__ref = { record_subtype__content : us_rep1
}

function record_subtype__ref_record_subtype__content__projection(a: record_subtype__ref) : us_rep1 =
  (a).record_subtype__content

logic r2 : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  (0 <= 255)) -> in_range1(temp___expr_180))

predicate dynamic_invariant1(temp___expr_306: int, temp___is_init_302: bool,
  temp___skip_constant_303: bool, temp___do_toplevel_304: bool,
  temp___do_typ_inv_305: bool) = (((temp___is_init_302 = true) or
  (0 <= 2)) -> in_range2(temp___expr_306))

 (* File "records.adb", line 520, characters 0-0 *)
goal defqtvc :
  (forall o:int.
  ((to_rep1(((r2).us_split_fields3).rec__records_prooffuncs__packet__command) = o) ->
  (forall o1:int.
  ((to_rep1(((r1).us_split_fields3).rec__records_prooffuncs__packet__command) = o1) ->
  (forall records__test_record_subtype__result:bool.
  ((records__test_record_subtype__result = andb(bool_eq2(((r1).us_split_fields3).rec__records_prooffuncs__packet__data,
  ((r2).us_split_fields3).rec__records_prooffuncs__packet__data),
  (if (o1 = o) then true else false))) ->
  ((records__test_record_subtype__result = true) -> (bool_eq4(r1,
  r2) = true))))))))
