(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic g1 : unit -> int

logic g1__function_guard : int, unit -> prop

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

axiom g1__post_axiom :
  (forall us_void_param:unit [g1(us_void_param)]. (let result =
  g1(us_void_param) : int in (g1__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom g1__def_axiom :
  (forall us_void_param:unit [g1(us_void_param)]. (g1(us_void_param) = 1))

logic g3 : unit -> int

logic g3__function_guard : int, unit -> prop

axiom g3__post_axiom :
  (forall us_void_param:unit [g3(us_void_param)]. (let result =
  g3(us_void_param) : int in (g3__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom g3__def_axiom :
  (forall us_void_param:unit [g3(us_void_param)]. (g3(us_void_param) = 1))

logic g2 : unit -> int

logic g2__function_guard : int, unit -> prop

axiom g2__post_axiom :
  (forall us_void_param:unit [g2(us_void_param)]. (let result =
  g2(us_void_param) : int in (g2__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom g2__def_axiom : g1__function_guard(g1(void), void)

axiom g2__def_axiom1 : g3__function_guard(g3(void), void)

axiom g2__def_axiom2 :
  (forall us_void_param:unit [g2(us_void_param)].
  (g2(us_void_param) = ((g1(void) + g3(void)) - 1)))

logic g4 : unit -> int

logic g4__function_guard : int, unit -> prop

axiom g4__post_axiom :
  (forall us_void_param:unit [g4(us_void_param)]. (let result =
  g4(us_void_param) : int in (g4__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom g4__def_axiom : g1__function_guard(g1(void), void)

axiom g4__def_axiom1 : g3__function_guard(g3(void), void)

axiom g4__def_axiom2 :
  (forall us_void_param:unit [g4(us_void_param)].
  (g4(us_void_param) = ((g1(void) + g3(void)) - 1)))

logic value : unit -> int

logic value__function_guard : int, unit -> prop

axiom value__post_axiom :
  (forall us_void_param:unit [value(us_void_param)]. (let result =
  value(us_void_param) : int in (value__function_guard(result,
  us_void_param) -> dynamic_invariant(result, true, false, true, true))))

logic f1 : unit -> int

logic f1__function_guard : int, unit -> prop

axiom f1__post_axiom :
  (forall us_void_param:unit [f1(us_void_param)]. (let result =
  f1(us_void_param) : int in (f1__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom f1__def_axiom :
  (forall us_void_param:unit [f1(us_void_param)]. (f1(us_void_param) = 1))

logic f2 : unit -> int

logic f2__function_guard : int, unit -> prop

axiom f2__post_axiom :
  (forall us_void_param:unit [f2(us_void_param)]. (let result =
  f2(us_void_param) : int in (f2__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom f2__def_axiom : f1__function_guard(f1(void), void)

axiom f2__def_axiom1 : g1__function_guard(g1(void), void)

axiom f2__def_axiom2 :
  (forall us_void_param:unit [f2(us_void_param)].
  (f2(us_void_param) = ((f1(void) + g1(void)) - 1)))

logic f3 : unit -> int

logic f3__function_guard : int, unit -> prop

axiom f3__post_axiom :
  (forall us_void_param:unit [f3(us_void_param)]. (let result =
  f3(us_void_param) : int in (f3__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

logic f4 : unit -> int

logic f4__function_guard : int, unit -> prop

axiom f4__post_axiom :
  (forall us_void_param:unit [f4(us_void_param)]. (let result =
  f4(us_void_param) : int in (f4__function_guard(result, us_void_param) ->
  dynamic_invariant(result, true, false, true, true))))

axiom f4__def_axiom : f3__function_guard(f3(void), void)

axiom f4__def_axiom1 : g3__function_guard(g3(void), void)

axiom f4__def_axiom2 :
  (forall us_void_param:unit [f4(us_void_param)].
  (f4(us_void_param) = ((f3(void) + g3(void)) - 1)))

 (* File "private_q.adb", line 28, characters 0-0 *)
goal defqtvc : (let o = value(void) : int in ((value__function_guard(o,
  void) and dynamic_invariant(o, true, false, true, true)) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o = 0) then true else false)) ->
  ((not (spark__branch = true)) -> (let o1 = value(void) : int in
  ((value__function_guard(o1, void) and dynamic_invariant(o1, true, false,
  true, true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (o1 = 1) then true else false)) ->
  ((not (spark__branch1 = true)) -> (let o2 = value(void) : int in
  ((value__function_guard(o2, void) and dynamic_invariant(o2, true, false,
  true, true)) ->
  (forall spark__branch2:bool.
  ((spark__branch2 = (if (o2 = 2) then true else false)) ->
  ((not (spark__branch2 = true)) -> (let o3 = value(void) : int in
  ((value__function_guard(o3, void) and dynamic_invariant(o3, true, false,
  true, true)) ->
  (forall spark__branch3:bool.
  ((spark__branch3 = (if (o3 = 3) then true else false)) ->
  ((not (spark__branch3 = true)) -> (let o4 = value(void) : int in
  ((value__function_guard(o4, void) and dynamic_invariant(o4, true, false,
  true, true)) ->
  (forall spark__branch4:bool.
  ((spark__branch4 = (if (o4 = 4) then true else false)) ->
  ((spark__branch4 = true) -> (g1__function_guard(g1(void), void) ->
  (g1(void) = 1)))))))))))))))))))))))))))
