(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__pack__point_t__x : natural;
rec__pack__point_t__y : natural
}

function us_split_fields_rec__pack__point_t__x__projection(a: us_split_fields) : natural =
  (a).rec__pack__point_t__x

function us_split_fields_rec__pack__point_t__y__projection(a: us_split_fields) : natural =
  (a).rec__pack__point_t__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__pack__point_t__x) = to_rep(((b).us_split_fields1).rec__pack__point_t__x)) and
  (to_rep(((a).us_split_fields1).rec__pack__point_t__y) = to_rep(((b).us_split_fields1).rec__pack__point_t__y))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic pack__point_t__x__first__bit : int

logic pack__point_t__x__last__bit : int

logic pack__point_t__x__position : int

axiom pack__point_t__x__first__bit_axiom :
  (0 <= pack__point_t__x__first__bit)

axiom pack__point_t__x__last__bit_axiom :
  (pack__point_t__x__first__bit <  pack__point_t__x__last__bit)

axiom pack__point_t__x__position_axiom : (0 <= pack__point_t__x__position)

logic pack__point_t__y__first__bit : int

logic pack__point_t__y__last__bit : int

logic pack__point_t__y__position : int

axiom pack__point_t__y__first__bit_axiom :
  (0 <= pack__point_t__y__first__bit)

axiom pack__point_t__y__last__bit_axiom :
  (pack__point_t__y__first__bit <  pack__point_t__y__last__bit)

axiom pack__point_t__y__position_axiom : (0 <= pack__point_t__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type point_t__ref = { point_t__content : us_rep
}

function point_t__ref_point_t__content__projection(a: point_t__ref) : us_rep =
  (a).point_t__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy2 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__pack__exp_seq_t__len : natural;
rec__pack__exp_seq_t__points : (int,us_rep) farray
}

function us_split_fields_rec__pack__exp_seq_t__len__projection(a: us_split_fields2) : natural =
  (a).rec__pack__exp_seq_t__len

function us_split_fields_rec__pack__exp_seq_t__points__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__pack__exp_seq_t__points

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__pack__exp_seq_t__len) = to_rep(((b).us_split_fields3).rec__pack__exp_seq_t__len)) and
  (bool_eq3(((a).us_split_fields3).rec__pack__exp_seq_t__points, 1, 100,
  ((b).us_split_fields3).rec__pack__exp_seq_t__points, 1,
  100) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic pack__exp_seq_t__len__first__bit : int

logic pack__exp_seq_t__len__last__bit : int

logic pack__exp_seq_t__len__position : int

axiom pack__exp_seq_t__len__first__bit_axiom :
  (0 <= pack__exp_seq_t__len__first__bit)

axiom pack__exp_seq_t__len__last__bit_axiom :
  (pack__exp_seq_t__len__first__bit <  pack__exp_seq_t__len__last__bit)

axiom pack__exp_seq_t__len__position_axiom :
  (0 <= pack__exp_seq_t__len__position)

logic pack__exp_seq_t__points__first__bit : int

logic pack__exp_seq_t__points__last__bit : int

logic pack__exp_seq_t__points__position : int

axiom pack__exp_seq_t__points__first__bit_axiom :
  (0 <= pack__exp_seq_t__points__first__bit)

axiom pack__exp_seq_t__points__last__bit_axiom :
  (pack__exp_seq_t__points__first__bit <  pack__exp_seq_t__points__last__bit)

axiom pack__exp_seq_t__points__position_axiom :
  (0 <= pack__exp_seq_t__points__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type exp_seq_t__ref = { exp_seq_t__content : us_rep1
}

function exp_seq_t__ref_exp_seq_t__content__projection(a: exp_seq_t__ref) : us_rep1 =
  (a).exp_seq_t__content

logic r : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type idx_t

logic idx_tqtint : idx_t -> int

axiom idx_tqtaxiom : (forall i1:idx_t. (1 <= idx_tqtint(i1)))

axiom idx_tqtaxiom1 : (forall i1:idx_t. (idx_tqtint(i1) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : idx_t, idx_t -> bool

logic dummy4 : idx_t

type idx_t__ref = { idx_t__content : idx_t
}

function idx_t__ref_idx_t__content__projection(a: idx_t__ref) : idx_t =
  (a).idx_t__content

function to_rep1(x: idx_t) : int = idx_tqtint(x)

logic of_rep1 : int -> idx_t

axiom inversion_axiom1 :
  (forall x:idx_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:idx_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields4 = { rec__pack__opt_p_t__flag : bool;
rec__pack__opt_p_t__idx : idx_t; rec__pack__opt_p_t__the_p : us_rep
}

function us_split_fields_rec__pack__opt_p_t__flag__projection(a: us_split_fields4) : bool =
  (a).rec__pack__opt_p_t__flag

function us_split_fields_rec__pack__opt_p_t__idx__projection(a: us_split_fields4) : idx_t =
  (a).rec__pack__opt_p_t__idx

function us_split_fields_rec__pack__opt_p_t__the_p__projection(a: us_split_fields4) : us_rep =
  (a).rec__pack__opt_p_t__the_p

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq6(a: us_rep2, b: us_rep2) : bool =
  (if (((to_int(((a).us_split_fields5).rec__pack__opt_p_t__flag) = to_int(((b).us_split_fields5).rec__pack__opt_p_t__flag)) and
  (to_rep1(((a).us_split_fields5).rec__pack__opt_p_t__idx) = to_rep1(((b).us_split_fields5).rec__pack__opt_p_t__idx))) and
  (bool_eq2(((a).us_split_fields5).rec__pack__opt_p_t__the_p,
  ((b).us_split_fields5).rec__pack__opt_p_t__the_p) = true)) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic pack__opt_p_t__flag__first__bit : int

logic pack__opt_p_t__flag__last__bit : int

logic pack__opt_p_t__flag__position : int

axiom pack__opt_p_t__flag__first__bit_axiom :
  (0 <= pack__opt_p_t__flag__first__bit)

axiom pack__opt_p_t__flag__last__bit_axiom :
  (pack__opt_p_t__flag__first__bit <  pack__opt_p_t__flag__last__bit)

axiom pack__opt_p_t__flag__position_axiom :
  (0 <= pack__opt_p_t__flag__position)

logic pack__opt_p_t__idx__first__bit : int

logic pack__opt_p_t__idx__last__bit : int

logic pack__opt_p_t__idx__position : int

axiom pack__opt_p_t__idx__first__bit_axiom :
  (0 <= pack__opt_p_t__idx__first__bit)

axiom pack__opt_p_t__idx__last__bit_axiom :
  (pack__opt_p_t__idx__first__bit <  pack__opt_p_t__idx__last__bit)

axiom pack__opt_p_t__idx__position_axiom :
  (0 <= pack__opt_p_t__idx__position)

logic pack__opt_p_t__the_p__first__bit : int

logic pack__opt_p_t__the_p__last__bit : int

logic pack__opt_p_t__the_p__position : int

axiom pack__opt_p_t__the_p__first__bit_axiom :
  (0 <= pack__opt_p_t__the_p__first__bit)

axiom pack__opt_p_t__the_p__last__bit_axiom :
  (pack__opt_p_t__the_p__first__bit <  pack__opt_p_t__the_p__last__bit)

axiom pack__opt_p_t__the_p__position_axiom :
  (0 <= pack__opt_p_t__the_p__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type opt_p_t__ref = { opt_p_t__content : us_rep2
}

function opt_p_t__ref_opt_p_t__content__projection(a: opt_p_t__ref) : us_rep2 =
  (a).opt_p_t__content

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (1 <= 100)) -> in_range2(temp___expr_160))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

 (* File "pack.adb", line 10, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  in_range2((i + 1)))
