(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type less_than_max

logic less_than_maxqtint : less_than_max -> int

axiom less_than_maxqtaxiom :
  (forall i:less_than_max. (0 <= less_than_maxqtint(i)))

axiom less_than_maxqtaxiom1 :
  (forall i:less_than_max. (less_than_maxqtint(i) <= 100))

predicate in_range(x: int) = ((0 <= x) and (x <= 100))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : less_than_max, less_than_max -> bool

logic dummy : less_than_max

type less_than_max__ref = { less_than_max__content : less_than_max
}

function less_than_max__ref_less_than_max__content__projection(a: less_than_max__ref) : less_than_max =
  (a).less_than_max__content

function to_rep(x: less_than_max) : int = less_than_maxqtint(x)

logic of_rep : int -> less_than_max

axiom inversion_axiom :
  (forall x:less_than_max [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:less_than_max [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type element

logic elementqtint : element -> int

axiom elementqtaxiom : (forall i:element. (0 <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : element, element -> bool

logic dummy1 : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep1(x: element) : int = elementqtint(x)

logic of_rep1 : int -> element

axiom inversion_axiom1 :
  (forall x:element [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:element [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,element) farray, a__first: int, a__last: int,
  b: (int,element) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy2 : (int,element) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,element) farray, (int,element) farray -> bool

type us_split_fields = { rec__stacks__stack_root__content :
(int,element) farray; rec__stacks__stack_root__length : less_than_max;
rec__ext__ : us_private
}

function us_split_fields_rec__stacks__stack_root__content__projection(a: us_split_fields) : (int,element) farray =
  (a).rec__stacks__stack_root__content

function us_split_fields_rec__stacks__stack_root__length__projection(a: us_split_fields) : less_than_max =
  (a).rec__stacks__stack_root__length

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq2(((a).us_split_fields1).rec__stacks__stack_root__content, 1,
  100, ((b).us_split_fields1).rec__stacks__stack_root__content, 1,
  100) = true) and
  (to_rep(((a).us_split_fields1).rec__stacks__stack_root__length) = to_rep(((b).us_split_fields1).rec__stacks__stack_root__length))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic stacks__stack_root__content__first__bit : int

logic stacks__stack_root__content__last__bit : int

logic stacks__stack_root__content__position : int

axiom stacks__stack_root__content__first__bit_axiom :
  (0 <= stacks__stack_root__content__first__bit)

axiom stacks__stack_root__content__last__bit_axiom :
  (stacks__stack_root__content__first__bit <  stacks__stack_root__content__last__bit)

axiom stacks__stack_root__content__position_axiom :
  (0 <= stacks__stack_root__content__position)

logic stacks__stack_root__length__first__bit : int

logic stacks__stack_root__length__last__bit : int

logic stacks__stack_root__length__position : int

axiom stacks__stack_root__length__first__bit_axiom :
  (0 <= stacks__stack_root__length__first__bit)

axiom stacks__stack_root__length__last__bit_axiom :
  (stacks__stack_root__length__first__bit <  stacks__stack_root__length__last__bit)

axiom stacks__stack_root__length__position_axiom :
  (0 <= stacks__stack_root__length__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type stack_root__ref = { stack_root__content : us_rep
}

function stack_root__ref_stack_root__content__projection(a: stack_root__ref) : us_rep =
  (a).stack_root__content

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

type positive_less_than_max

logic positive_less_than_maxqtint : positive_less_than_max -> int

axiom positive_less_than_maxqtaxiom :
  (forall i:positive_less_than_max. (1 <= positive_less_than_maxqtint(i)))

axiom positive_less_than_maxqtaxiom1 :
  (forall i:positive_less_than_max. (positive_less_than_maxqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : positive_less_than_max, positive_less_than_max -> bool

logic dummy4 : positive_less_than_max

type positive_less_than_max__ref = { positive_less_than_max__content :
positive_less_than_max
}

function positive_less_than_max__ref_positive_less_than_max__content__projection(a: positive_less_than_max__ref) : positive_less_than_max =
  (a).positive_less_than_max__content

function to_rep2(x: positive_less_than_max) : int =
  positive_less_than_maxqtint(x)

logic of_rep2 : int -> positive_less_than_max

axiom inversion_axiom2 :
  (forall x:positive_less_than_max [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:positive_less_than_max [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__stacks__buffer__first :
positive_less_than_max; rec__stacks__stack_root__content1 :
(int,element) farray; rec__stacks__stack_root__length1 : less_than_max;
rec__ext__1 : us_private
}

function us_split_fields_rec__stacks__buffer__first__projection(a: us_split_fields2) : positive_less_than_max =
  (a).rec__stacks__buffer__first

function us_split_fields_rec__stacks__stack_root__content__2__projection(a: us_split_fields2) : (int,element) farray =
  (a).rec__stacks__stack_root__content1

function us_split_fields_rec__stacks__stack_root__length__2__projection(a: us_split_fields2) : less_than_max =
  (a).rec__stacks__stack_root__length1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : positive_less_than_max, us_private -> us_private

logic extract__stacks__buffer__first : us_private -> positive_less_than_max

axiom extract__stacks__buffer__first__conv :
  (forall stacks__buffer__first:positive_less_than_max.
  (forall rec__ext__2:us_private.
  (extract__stacks__buffer__first(hide_ext__(stacks__buffer__first,
  rec__ext__2)) = stacks__buffer__first)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__stacks__stack_root__content =
  ((a).us_split_fields3).rec__stacks__stack_root__content1;
  rec__stacks__stack_root__length =
  ((a).us_split_fields3).rec__stacks__stack_root__length1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__stacks__buffer__first,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__stacks__buffer__first =
  extract__stacks__buffer__first(((r).us_split_fields1).rec__ext__);
  rec__stacks__stack_root__content1 =
  ((r).us_split_fields1).rec__stacks__stack_root__content;
  rec__stacks__stack_root__length1 =
  ((r).us_split_fields1).rec__stacks__stack_root__length; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep2(((a).us_split_fields3).rec__stacks__buffer__first) = to_rep2(((b).us_split_fields3).rec__stacks__buffer__first)) and
  (bool_eq2(((a).us_split_fields3).rec__stacks__stack_root__content1, 1, 100,
  ((b).us_split_fields3).rec__stacks__stack_root__content1, 1,
  100) = true)) and
  (to_rep(((a).us_split_fields3).rec__stacks__stack_root__length1) = to_rep(((b).us_split_fields3).rec__stacks__stack_root__length1))) then true else false)

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic stacks__buffer__first__first__bit : int

logic stacks__buffer__first__last__bit : int

logic stacks__buffer__first__position : int

axiom stacks__buffer__first__first__bit_axiom :
  (0 <= stacks__buffer__first__first__bit)

axiom stacks__buffer__first__last__bit_axiom :
  (stacks__buffer__first__first__bit <  stacks__buffer__first__last__bit)

axiom stacks__buffer__first__position_axiom :
  (0 <= stacks__buffer__first__position)

logic stacks__stack_root__content__first__bit1 : int

logic stacks__stack_root__content__last__bit1 : int

logic stacks__stack_root__content__position1 : int

axiom stacks__stack_root__content__first__bit_axiom1 :
  (0 <= stacks__stack_root__content__first__bit1)

axiom stacks__stack_root__content__last__bit_axiom1 :
  (stacks__stack_root__content__first__bit1 <  stacks__stack_root__content__last__bit1)

axiom stacks__stack_root__content__position_axiom1 :
  (0 <= stacks__stack_root__content__position1)

logic stacks__stack_root__length__first__bit1 : int

logic stacks__stack_root__length__last__bit1 : int

logic stacks__stack_root__length__position1 : int

axiom stacks__stack_root__length__first__bit_axiom1 :
  (0 <= stacks__stack_root__length__first__bit1)

axiom stacks__stack_root__length__last__bit_axiom1 :
  (stacks__stack_root__length__first__bit1 <  stacks__stack_root__length__last__bit1)

axiom stacks__stack_root__length__position_axiom1 :
  (0 <= stacks__stack_root__length__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type buffer__ref = { buffer__content : us_rep1
}

function buffer__ref_buffer__content__projection(a: buffer__ref) : us_rep1 =
  (a).buffer__content

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic temp_____aggregate_def_200 : int -> (int,element) farray

axiom temp___result_618qtdef :
  (forall temp___617:us_rep1. size__function_guard(size(to_base(temp___617)),
  to_base(temp___617)))

predicate default_initial_assumption(temp___expr_615: us_rep1,
  temp___skip_top_level_616: bool) =
  ((((temp___expr_615).attr__tag1 = us_tag1) and
  (((to_rep2(((temp___expr_615).us_split_fields3).rec__stacks__buffer__first) = 1) and
  (((temp___expr_615).us_split_fields3).rec__stacks__stack_root__content1 = temp_____aggregate_def_200(0))) and
  (to_rep(((temp___expr_615).us_split_fields3).rec__stacks__stack_root__length1) = 0))) and
  ((not (temp___skip_top_level_616 = true)) ->
  (size(to_base(temp___expr_615)) = 0)))

logic s__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (0 <= 100)) -> in_range(temp___expr_172))

predicate dynamic_invariant1(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_179))

axiom temp___result_205qtdef :
  (forall temp___204:us_rep. size__function_guard(size(temp___204),
  temp___204))

predicate default_initial_assumption1(temp___expr_198: us_rep,
  temp___skip_top_level_199: bool) =
  ((((temp___expr_198).attr__tag = us_tag) and
  ((((temp___expr_198).us_split_fields1).rec__stacks__stack_root__content = temp_____aggregate_def_200(0)) and
  (to_rep(((temp___expr_198).us_split_fields1).rec__stacks__stack_root__length) = 0))) and
  ((not (temp___skip_top_level_199 = true)) -> (size(temp___expr_198) = 0)))

axiom size__post_axiom :
  (forall s:us_rep [size(s)]. (let result = size(s) : int in
  (size__function_guard(result, s) -> dynamic_invariant(result, true, false,
  true, true))))

axiom size__def_axiom :
  (forall s:us_rep [size(s)].
  (size(s) = to_rep(((s).us_split_fields1).rec__stacks__stack_root__length)))

axiom is_empty__def_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom is_empty__def_axiom1 :
  (forall s:us_rep [is_empty(s)]. ((is_empty(s) = true) -> (size(s) = 0)))

axiom is_empty__def_axiom2 :
  (forall s:us_rep [is_empty(s)]. ((size(s) = 0) -> (is_empty(s) = true)))

logic rliteral : element

axiom rliteral_axiom : (elementqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___202:int. (dynamic_invariant1(temp___202, true, true, true,
  true) ->
  (forall temp___203:int.
  ((temp_____aggregate_def_200(temp___202)[temp___203]) = rliteral))))

predicate dynamic_invariant2(temp___expr_606: int, temp___is_init_602: bool,
  temp___skip_constant_603: bool, temp___do_toplevel_604: bool,
  temp___do_typ_inv_605: bool) = (((temp___is_init_602 = true) or
  (1 <= 100)) -> in_range2(temp___expr_606))

logic rliteral1 : positive_less_than_max

axiom rliteral_axiom1 : (positive_less_than_maxqtint(rliteral1) = 1)

logic rliteral2 : less_than_max

axiom rliteral_axiom2 : (less_than_maxqtint(rliteral2) = 0)

 (* File "stacks.ads", line 64, characters 0-0 *)
goal defqtvc :
  (forall s__split_fields:us_split_fields2.
  (forall s__split_fields1:us_split_fields2. ((s__split_fields1 = {
  rec__stacks__buffer__first = rliteral1; rec__stacks__stack_root__content1 =
  (s__split_fields).rec__stacks__stack_root__content1;
  rec__stacks__stack_root__length1 =
  (s__split_fields).rec__stacks__stack_root__length1; rec__ext__1 =
  (s__split_fields).rec__ext__1 }) ->
  (forall s__split_fields2:us_split_fields2. ((s__split_fields2 = {
  rec__stacks__buffer__first = (s__split_fields1).rec__stacks__buffer__first;
  rec__stacks__stack_root__content1 =
  (s__split_fields1).rec__stacks__stack_root__content1;
  rec__stacks__stack_root__length1 = rliteral2; rec__ext__1 =
  (s__split_fields1).rec__ext__1 }) ->
  ((forall s__split_fields3:us_split_fields2.
   is_empty__function_guard(is_empty(to_base({ us_split_fields3 =
   s__split_fields3; attr__tag1 = s__attr__tag })), to_base({
   us_split_fields3 = s__split_fields3; attr__tag1 = s__attr__tag }))) ->
  (is_empty(to_base({ us_split_fields3 = s__split_fields2; attr__tag1 =
  s__attr__tag })) = true)))))))
