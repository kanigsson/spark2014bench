(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type my_nat

logic my_natqtint : my_nat -> int

axiom my_natqtaxiom : (forall i:my_nat. (0 <= my_natqtint(i)))

axiom my_natqtaxiom1 : (forall i:my_nat. (my_natqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : my_nat, my_nat -> bool

logic dummy : my_nat

type my_nat__ref = { my_nat__content : my_nat
}

function my_nat__ref_my_nat__content__projection(a: my_nat__ref) : my_nat =
  (a).my_nat__content

type my_nat__init_wrapper = { rec__value : my_nat; attr__init : bool
}

function my_nat__init_wrapper_rec__value__projection(a: my_nat__init_wrapper) : my_nat =
  (a).rec__value

function my_nat__init_wrapper_attr__init__projection(a: my_nat__init_wrapper) : bool =
  (a).attr__init

function to_rep(x: my_nat) : int = my_natqtint(x)

logic of_rep : int -> my_nat

axiom inversion_axiom :
  (forall x:my_nat [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:my_nat [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__nested_init_by_proof__rec__d : bool
}

function us_split_discrs_rec__nested_init_by_proof__rec__d__projection(a: us_split_discrs) : bool =
  (a).rec__nested_init_by_proof__rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__nested_init_by_proof__rec__f2 :
my_nat__init_wrapper; rec__nested_init_by_proof__rec__f1 :
my_nat__init_wrapper; rec__nested_init_by_proof__rec__f3 :
my_nat__init_wrapper
}

function us_split_fields_rec__nested_init_by_proof__rec__f2__projection(a: us_split_fields) : my_nat__init_wrapper =
  (a).rec__nested_init_by_proof__rec__f2

function us_split_fields_rec__nested_init_by_proof__rec__f1__projection(a: us_split_fields) : my_nat__init_wrapper =
  (a).rec__nested_init_by_proof__rec__f1

function us_split_fields_rec__nested_init_by_proof__rec__f3__projection(a: us_split_fields) : my_nat__init_wrapper =
  (a).rec__nested_init_by_proof__rec__f3

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate nested_init_by_proof__rec__f1__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__nested_init_by_proof__rec__d) = 1)

predicate nested_init_by_proof__rec__f3__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__nested_init_by_proof__rec__d) = 0)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__nested_init_by_proof__rec__d) = to_int(((b).us_split_discrs1).rec__nested_init_by_proof__rec__d)) and
  (((to_rep((((a).us_split_fields1).rec__nested_init_by_proof__rec__f2).rec__value) = to_rep((((b).us_split_fields1).rec__nested_init_by_proof__rec__f2).rec__value)) and
  (nested_init_by_proof__rec__f1__pred(a) ->
  (to_rep((((a).us_split_fields1).rec__nested_init_by_proof__rec__f1).rec__value) = to_rep((((b).us_split_fields1).rec__nested_init_by_proof__rec__f1).rec__value)))) and
  (nested_init_by_proof__rec__f3__pred(a) ->
  (to_rep((((a).us_split_fields1).rec__nested_init_by_proof__rec__f3).rec__value) = to_rep((((b).us_split_fields1).rec__nested_init_by_proof__rec__f3).rec__value))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic nested_init_by_proof__rec__d__first__bit : int

logic nested_init_by_proof__rec__d__last__bit : int

logic nested_init_by_proof__rec__d__position : int

axiom nested_init_by_proof__rec__d__first__bit_axiom :
  (0 <= nested_init_by_proof__rec__d__first__bit)

axiom nested_init_by_proof__rec__d__last__bit_axiom :
  (nested_init_by_proof__rec__d__first__bit <  nested_init_by_proof__rec__d__last__bit)

axiom nested_init_by_proof__rec__d__position_axiom :
  (0 <= nested_init_by_proof__rec__d__position)

logic nested_init_by_proof__rec__f2__first__bit : int

logic nested_init_by_proof__rec__f2__last__bit : int

logic nested_init_by_proof__rec__f2__position : int

axiom nested_init_by_proof__rec__f2__first__bit_axiom :
  (0 <= nested_init_by_proof__rec__f2__first__bit)

axiom nested_init_by_proof__rec__f2__last__bit_axiom :
  (nested_init_by_proof__rec__f2__first__bit <  nested_init_by_proof__rec__f2__last__bit)

axiom nested_init_by_proof__rec__f2__position_axiom :
  (0 <= nested_init_by_proof__rec__f2__position)

logic nested_init_by_proof__rec__f1__first__bit : int

logic nested_init_by_proof__rec__f1__last__bit : int

logic nested_init_by_proof__rec__f1__position : int

axiom nested_init_by_proof__rec__f1__first__bit_axiom :
  (0 <= nested_init_by_proof__rec__f1__first__bit)

axiom nested_init_by_proof__rec__f1__last__bit_axiom :
  (nested_init_by_proof__rec__f1__first__bit <  nested_init_by_proof__rec__f1__last__bit)

axiom nested_init_by_proof__rec__f1__position_axiom :
  (0 <= nested_init_by_proof__rec__f1__position)

logic nested_init_by_proof__rec__f3__first__bit : int

logic nested_init_by_proof__rec__f3__last__bit : int

logic nested_init_by_proof__rec__f3__position : int

axiom nested_init_by_proof__rec__f3__first__bit_axiom :
  (0 <= nested_init_by_proof__rec__f3__first__bit)

axiom nested_init_by_proof__rec__f3__last__bit_axiom :
  (nested_init_by_proof__rec__f3__first__bit <  nested_init_by_proof__rec__f3__last__bit)

axiom nested_init_by_proof__rec__f3__position_axiom :
  (0 <= nested_init_by_proof__rec__f3__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type rec____ref = { rec____content : us_rep
}

function rec____ref_rec____content__projection(a: rec____ref) : us_rep =
  (a).rec____content

logic x : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic y : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_198: us_rep,
  temp___skip_top_level_199: bool) =
  ((((temp___expr_198).us_split_discrs1).rec__nested_init_by_proof__rec__d = of_int(0)) and
  ((((((temp___expr_198).us_split_fields1).rec__nested_init_by_proof__rec__f2).attr__init = false) and
  (nested_init_by_proof__rec__f1__pred(temp___expr_198) ->
  ((to_rep((((temp___expr_198).us_split_fields1).rec__nested_init_by_proof__rec__f1).rec__value) = 15) and
  ((((temp___expr_198).us_split_fields1).rec__nested_init_by_proof__rec__f1).attr__init = true)))) and
  (nested_init_by_proof__rec__f3__pred(temp___expr_198) ->
  ((((temp___expr_198).us_split_fields1).rec__nested_init_by_proof__rec__f3).attr__init = false))))

predicate dynamic_invariant(temp___expr_183: int, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((temp___is_init_179 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_183))

 (* File "nested_init_by_proof.adb", line 19, characters 0-0 *)
goal defqtvc :
  (forall o:bool.
  ((if ((to_int(((x).us_split_discrs1).rec__nested_init_by_proof__rec__d) = to_int(((y).us_split_discrs1).rec__nested_init_by_proof__rec__d)) and
  (to_int((((x).us_split_fields1).rec__nested_init_by_proof__rec__f2).attr__init) = to_int((((y).us_split_fields1).rec__nested_init_by_proof__rec__f2).attr__init))) then (if ((((x).us_split_fields1).rec__nested_init_by_proof__rec__f2).attr__init = true) then 
  (exists o1:int.
  ((to_rep((((y).us_split_fields1).rec__nested_init_by_proof__rec__f2).rec__value) = o1) and
  (exists o2:int.
  ((to_rep((((x).us_split_fields1).rec__nested_init_by_proof__rec__f2).rec__value) = o2) and
  (o = (if (o2 = o1) then true else false)))))) else (o = of_int(1))) else (o = false)) ->
  ((o = true) ->
  ((((x).us_split_discrs1).rec__nested_init_by_proof__rec__d = true) ->
  nested_init_by_proof__rec__f1__pred(y)))))
