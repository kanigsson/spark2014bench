(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic h_true : unit -> bool

logic h_true__function_guard : bool, unit -> prop

axiom h_true__def_axiom :
  (forall us_void_param:unit [h_true(us_void_param)].
  (h_true(us_void_param) = true))

logic h_x : bool -> bool

logic h_x__function_guard : bool, bool -> prop

axiom h_x__def_axiom :
  (forall p__sub__z:bool [h_x(p__sub__z)]. ((h_x(p__sub__z) = true) ->
  (p__sub__z = true)))

axiom h_x__def_axiom1 :
  (forall p__sub__z:bool [h_x(p__sub__z)]. ((p__sub__z = true) ->
  (h_x(p__sub__z) = true)))

logic h_false : unit -> bool

logic h_false__function_guard : bool, unit -> prop

axiom h_false__post_axiom :
  (forall us_void_param:unit [h_false(us_void_param)]. (let result =
  h_false(us_void_param) : bool in (h_false__function_guard(result,
  us_void_param) -> (not (result = true)))))

axiom h_false__def_axiom :
  (forall us_void_param:unit [h_false(us_void_param)].
  (not (h_false(us_void_param) = true)))

axiom h_false__def_axiom1 : true

logic h_y : bool -> bool

logic h_y__function_guard : bool, bool -> prop

axiom h_y__post_axiom :
  (forall p__sub__z:bool [h_y(p__sub__z)]. (let result = h_y(p__sub__z)
  : bool in (h_y__function_guard(result, p__sub__z) -> ((result = true) ->
  (p__sub__z = true)))))

axiom h_y__post_axiom1 :
  (forall p__sub__z:bool [h_y(p__sub__z)]. (let result = h_y(p__sub__z)
  : bool in (h_y__function_guard(result, p__sub__z) -> ((p__sub__z = true) ->
  (result = true)))))

axiom h_y__def_axiom :
  (forall p__sub__z:bool [h_y(p__sub__z)]. ((h_y(p__sub__z) = true) ->
  (p__sub__z = true)))

axiom h_y__def_axiom1 :
  (forall p__sub__z:bool [h_y(p__sub__z)]. ((p__sub__z = true) ->
  (h_y(p__sub__z) = true)))

 (* File "p.adb", line 16, characters 0-0 *)
goal defqtvc : (let o = h_true(void) : bool in ((h_true__function_guard(o,
  void) and (o = true)) ->
  (forall z:bool. ((z = o) -> ((z = true) -> (let o1 = h_x(z) : bool in
  ((h_x__function_guard(o1, z) and ((o1 = true) <-> (z = true))) ->
  (forall z1:bool. ((z1 = o1) -> ((z1 = true) -> (let o2 = h_false(void)
  : bool in ((h_false__function_guard(o2, void) and (not (o2 = true))) ->
  (forall z2:bool. ((z2 = o2) -> (not (z2 = true))))))))))))))))
