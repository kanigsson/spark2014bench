(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic attr__ATTRIBUTE_ADDRESS : int

type us_rep = { rec__counterexamples__string_access__is_null_pointer : bool;
rec__counterexamples__string_access__pointer_address : int;
rec__counterexamples__string_access__pointer_value : us_t
}

function us_rep_rec__counterexamples__string_access__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__counterexamples__string_access__is_null_pointer

function us_rep_rec__counterexamples__string_access__pointer_address__projection(a: us_rep) : int =
  (a).rec__counterexamples__string_access__pointer_address

function us_rep_rec__counterexamples__string_access__pointer_value__projection(a: us_rep) : us_t =
  (a).rec__counterexamples__string_access__pointer_value

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__2__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__counterexamples__string_access__is_null_pointer = (b).rec__counterexamples__string_access__is_null_pointer) and
  ((not ((a).rec__counterexamples__string_access__is_null_pointer = true)) ->
  (((a).rec__counterexamples__string_access__pointer_address = (b).rec__counterexamples__string_access__pointer_address) and
  ((a).rec__counterexamples__string_access__pointer_value = (b).rec__counterexamples__string_access__pointer_value)))) then true else false)

predicate rec__counterexamples__string_access__pointer_value__pred(a: us_rep) =
  (not ((a).rec__counterexamples__string_access__is_null_pointer = true))

logic us_null_pointer : us_rep

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__counterexamples__string_access__is_null_pointer = true)

logic dummy4 : us_rep

type string_access__ref = { string_access__content : us_rep
}

function string_access__ref_string_access__content__projection(a: string_access__ref) : us_rep =
  (a).string_access__content

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq6((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t1 = { elts1 : (int,us_rep) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,us_rep) farray = (a).elts1

function of_array1(a: (int,us_rep) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq8(x: us_t1, y: us_t1) : bool = bool_eq7((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy5 : us_t1

type string_array__ref = { string_array__content : us_t1
}

function string_array__ref_string_array__content__projection(a: string_array__ref) : us_t1 =
  (a).string_array__content

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_176: us_rep,
  temp___is_init_172: bool, temp___skip_constant_173: bool,
  temp___do_toplevel_174: bool, temp___do_typ_inv_175: bool) =
  ((not ((temp___expr_176).rec__counterexamples__string_access__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1((temp___expr_176).rec__counterexamples__string_access__pointer_value),
  last1((temp___expr_176).rec__counterexamples__string_access__pointer_value)))

predicate default_initial_assumption(temp___expr_178: us_rep,
  temp___skip_top_level_179: bool) =
  ((temp___expr_178).rec__counterexamples__string_access__is_null_pointer = true)

type us_rep1 = { rec__counterexamples__string_array_access__is_null_pointer :
bool; rec__counterexamples__string_array_access__pointer_address : int;
rec__counterexamples__string_array_access__pointer_value : us_t1
}

function us_rep_rec__counterexamples__string_array_access__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__counterexamples__string_array_access__is_null_pointer

function us_rep_rec__counterexamples__string_array_access__pointer_address__projection(a: us_rep1) : int =
  (a).rec__counterexamples__string_array_access__pointer_address

function us_rep_rec__counterexamples__string_array_access__pointer_value__projection(a: us_rep1) : us_t1 =
  (a).rec__counterexamples__string_array_access__pointer_value

type us_rep__ref1 = { us_rep__content1 : us_rep1
}

function us_rep__ref___rep__content__4__projection(a: us_rep__ref1) : us_rep1 =
  (a).us_rep__content1

function bool_eq9(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__counterexamples__string_array_access__is_null_pointer = (b).rec__counterexamples__string_array_access__is_null_pointer) and
  ((not ((a).rec__counterexamples__string_array_access__is_null_pointer = true)) ->
  (((a).rec__counterexamples__string_array_access__pointer_address = (b).rec__counterexamples__string_array_access__pointer_address) and
  ((a).rec__counterexamples__string_array_access__pointer_value = (b).rec__counterexamples__string_array_access__pointer_value)))) then true else false)

predicate rec__counterexamples__string_array_access__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__counterexamples__string_array_access__is_null_pointer = true))

logic us_null_pointer1 : us_rep1

axiom us_null_pointer__def_axiom1 :
  ((us_null_pointer1).rec__counterexamples__string_array_access__is_null_pointer = true)

logic dummy6 : us_rep1

type string_array_access__ref = { string_array_access__content : us_rep1
}

function string_array_access__ref_string_array_access__content__projection(a: string_array_access__ref) : us_rep1 =
  (a).string_array_access__content

predicate dynamic_invariant1(temp___expr_205: us_rep1,
  temp___is_init_201: bool, temp___skip_constant_202: bool,
  temp___do_toplevel_203: bool, temp___do_typ_inv_204: bool) =
  ((not ((temp___expr_205).rec__counterexamples__string_array_access__is_null_pointer = true)) ->
  (dynamic_property1(1, 2147483647,
  first3((temp___expr_205).rec__counterexamples__string_array_access__pointer_value),
  last3((temp___expr_205).rec__counterexamples__string_array_access__pointer_value)) and
  (forall temp___206:int.
  (((first3((temp___expr_205).rec__counterexamples__string_array_access__pointer_value) <= temp___206) and
  (temp___206 <= last3((temp___expr_205).rec__counterexamples__string_array_access__pointer_value))) ->
  ((not (((to_array1((temp___expr_205).rec__counterexamples__string_array_access__pointer_value)[temp___206])).rec__counterexamples__string_access__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1(((to_array1((temp___expr_205).rec__counterexamples__string_array_access__pointer_value)[temp___206])).rec__counterexamples__string_access__pointer_value),
  last1(((to_array1((temp___expr_205).rec__counterexamples__string_array_access__pointer_value)[temp___206])).rec__counterexamples__string_access__pointer_value)))))))

predicate default_initial_assumption1(temp___expr_208: us_rep1,
  temp___skip_top_level_209: bool) =
  ((temp___expr_208).rec__counterexamples__string_array_access__is_null_pointer = true)

type t15b

logic t15bqtint : t15b -> int

axiom t15bqtaxiom : (forall i:t15b. (1 <= t15bqtint(i)))

axiom t15bqtaxiom1 : (forall i:t15b. (t15bqtint(i) <= 1))

predicate in_range4(x: int) = ((1 <= x) and (x <= 1))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : t15b, t15b -> bool

logic dummy7 : t15b

type t15b__ref = { t15b__content : t15b
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : t15b =
  (a).t15b__content

logic temp___String_Literal_214 : unit -> (int,character) farray

axiom temp___String_Literal_214__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_214(us_void_param)].
  (to_rep((temp___String_Literal_214(us_void_param)[1])) = 119))

axiom temp___String_Literal_214__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_214(us_void_param)].
  (to_rep((temp___String_Literal_214(us_void_param)[2])) = 111))

axiom temp___String_Literal_214__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_214(us_void_param)].
  (to_rep((temp___String_Literal_214(us_void_param)[3])) = 114))

axiom temp___String_Literal_214__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_214(us_void_param)].
  (to_rep((temp___String_Literal_214(us_void_param)[4])) = 108))

axiom temp___String_Literal_214__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_214(us_void_param)].
  (to_rep((temp___String_Literal_214(us_void_param)[5])) = 100))

logic temp_____aggregate_def_215 : us_rep -> (int,us_rep) farray

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

predicate dynamic_invariant4(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant5(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant6(temp___expr_184: us_t1,
  temp___is_init_180: bool, temp___skip_constant_181: bool,
  temp___do_toplevel_182: bool, temp___do_typ_inv_183: bool) =
  (((not (temp___skip_constant_181 = true)) -> dynamic_property1(1,
  2147483647, first3(temp___expr_184), last3(temp___expr_184))) and
  (forall temp___185:int. (((first3(temp___expr_184) <= temp___185) and
  (temp___185 <= last3(temp___expr_184))) ->
  ((not (((to_array1(temp___expr_184)[temp___185])).rec__counterexamples__string_access__is_null_pointer = true)) ->
  dynamic_property(1, 2147483647,
  first1(((to_array1(temp___expr_184)[temp___185])).rec__counterexamples__string_access__pointer_value),
  last1(((to_array1(temp___expr_184)[temp___185])).rec__counterexamples__string_access__pointer_value))))))

axiom def_axiom :
  (forall temp___217:us_rep. (dynamic_invariant(temp___217, true, true, true,
  true) -> ((temp_____aggregate_def_215(temp___217)[1]) = temp___217)))

 (* File "counterexamples.adb", line 37, characters 0-0 *)
goal defqtvc :
  (forall us_next_pointer_address:int.
  (forall counterexamples__bad_4__w__assume:us_rep.
  ((andb((if ((not ((counterexamples__bad_4__w__assume).rec__counterexamples__string_access__is_null_pointer = true)) and
  ((counterexamples__bad_4__w__assume).rec__counterexamples__string_access__pointer_address = us_next_pointer_address)) then true else false),
  (if ((counterexamples__bad_4__w__assume).rec__counterexamples__string_access__pointer_value = of_array(temp___String_Literal_214(void),
  1, 5)) then true else false)) = true) ->
  (forall w__pointer_value:us_t.
  ((w__pointer_value = (counterexamples__bad_4__w__assume).rec__counterexamples__string_access__pointer_value) ->
  (forall w__pointer_address:int.
  ((w__pointer_address = (counterexamples__bad_4__w__assume).rec__counterexamples__string_access__pointer_address) ->
  (forall w__is_null_pointer:bool.
  ((w__is_null_pointer = (counterexamples__bad_4__w__assume).rec__counterexamples__string_access__is_null_pointer) ->
  (dynamic_invariant({ rec__counterexamples__string_access__is_null_pointer =
  w__is_null_pointer; rec__counterexamples__string_access__pointer_address =
  w__pointer_address; rec__counterexamples__string_access__pointer_value =
  w__pointer_value }, true, false, true, true) ->
  (forall us_next_pointer_address1:int.
  (forall counterexamples__bad_4__a__assume:us_rep1.
  ((andb((if ((not ((counterexamples__bad_4__a__assume).rec__counterexamples__string_array_access__is_null_pointer = true)) and
  ((counterexamples__bad_4__a__assume).rec__counterexamples__string_array_access__pointer_address = us_next_pointer_address1)) then true else false),
  (if ((counterexamples__bad_4__a__assume).rec__counterexamples__string_array_access__pointer_value = of_array1(temp_____aggregate_def_215({
  rec__counterexamples__string_access__is_null_pointer = w__is_null_pointer;
  rec__counterexamples__string_access__pointer_address = w__pointer_address;
  rec__counterexamples__string_access__pointer_value = w__pointer_value }),
  1, 1)) then true else false)) = true) ->
  (forall a__pointer_value:us_t1.
  ((a__pointer_value = (counterexamples__bad_4__a__assume).rec__counterexamples__string_array_access__pointer_value) ->
  (forall a__pointer_address:int.
  ((a__pointer_address = (counterexamples__bad_4__a__assume).rec__counterexamples__string_array_access__pointer_address) ->
  (forall a__is_null_pointer:bool.
  ((a__is_null_pointer = (counterexamples__bad_4__a__assume).rec__counterexamples__string_array_access__is_null_pointer) ->
  (dynamic_invariant1({
  rec__counterexamples__string_array_access__is_null_pointer =
  a__is_null_pointer;
  rec__counterexamples__string_array_access__pointer_address =
  a__pointer_address;
  rec__counterexamples__string_array_access__pointer_value = a__pointer_value
  }, true, false, true, true) -> (first3(a__pointer_value) <= 1)))))))))))))))))))))
