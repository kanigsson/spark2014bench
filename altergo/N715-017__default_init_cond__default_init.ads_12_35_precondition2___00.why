(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

type nat

logic natqtint : nat -> int

axiom natqtaxiom : (forall i:nat. (0 <= natqtint(i)))

axiom natqtaxiom1 : (forall i:nat. (natqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : nat, nat -> bool

logic dummy : nat

type nat__ref = { nat__content : nat
}

function nat__ref_nat__content__projection(a: nat__ref) : nat =
  (a).nat__content

function to_rep(x: nat) : int = natqtint(x)

logic of_rep : int -> nat

axiom inversion_axiom : (forall x:nat [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:nat [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,nat) farray
}

logic slide : (int,nat) farray, int, int -> (int,nat) farray

axiom slide_eq :
  (forall a:(int,nat) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,nat) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,nat) farray, a__first: int, a__last: int,
  b: (int,nat) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,nat) farray. forall b:(int,nat) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,nat) farray. forall b:(int,nat) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,nat) farray. forall b:(int,nat) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,nat) farray. forall b:(int,nat) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic rte_ok : (int,nat) farray, int -> bool

logic rte_ok__function_guard : bool, (int,nat) farray, int -> prop

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

logic pre_rte_ok : int -> bool

logic pre_rte_ok__function_guard : bool, int -> prop

logic nat_ok : int -> bool

logic nat_ok__function_guard : bool, int -> prop

type trteD1

logic trteD1qtint : trteD1 -> int

axiom trteD1qtaxiom : (forall i:trteD1. (1 <= trteD1qtint(i)))

axiom trteD1qtaxiom1 : (forall i:trteD1. (trteD1qtint(i) <= 3))

predicate in_range2(x: int) = ((1 <= x) and (x <= 3))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : trteD1, trteD1 -> bool

logic dummy2 : trteD1

type trteD1__ref = { trteD1__content : trteD1
}

function trteD1__ref_trteD1__content__projection(a: trteD1__ref) : trteD1 =
  (a).trteD1__content

axiom temp___result_219qtdef :
  (forall temp___218:nat. nat_ok__function_guard(nat_ok(to_rep(temp___218)),
  to_rep(temp___218)))

axiom temp___result_221qtdef :
  (forall default_init__n:int. forall temp___220:(int,nat) farray.
  rte_ok__function_guard(rte_ok(temp___220, default_init__n), temp___220,
  default_init__n))

predicate default_initial_assumption(temp___expr_214: (int,nat) farray,
  temp___skip_top_level_215: bool, default_init__n: int) =
  ((forall temp___216:int. (((1 <= temp___216) and (temp___216 <= 3)) ->
   (let temp___217 = (temp___expr_214[temp___216]) : nat in
   ((to_rep(temp___217) = 0) and (nat_ok(to_rep(temp___217)) = true))))) and
  ((not (temp___skip_top_level_215 = true)) -> (rte_ok(temp___expr_214,
  default_init__n) = true)))

axiom rte_ok__post_axiom :
  (forall default_init__n:int.
  pre_rte_ok__function_guard(pre_rte_ok(default_init__n), default_init__n))

axiom rte_ok__def_axiom :
  (forall x:(int,nat) farray.
  (forall default_init__n:int [rte_ok(x, default_init__n)]. ((rte_ok(x,
  default_init__n) = true) -> (to_rep((x[1])) = 0))))

axiom rte_ok__def_axiom1 :
  (forall x:(int,nat) farray.
  (forall default_init__n:int [rte_ok(x, default_init__n)].
  ((to_rep((x[1])) = 0) -> (rte_ok(x, default_init__n) = true))))

predicate dynamic_invariant1(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_194))

axiom temp___result_198qtdef :
  (forall temp___197:int. nat_ok__function_guard(nat_ok(temp___197),
  temp___197))

predicate default_initial_assumption1(temp___expr_195: int,
  temp___skip_top_level_196: bool) = ((temp___expr_195 = 0) and
  ((not (temp___skip_top_level_196 = true)) ->
  (nat_ok(temp___expr_195) = true)))

axiom nat_ok__def_axiom :
  (forall x:int [nat_ok(x)]. ((nat_ok(x) = true) -> (x = 0)))

axiom nat_ok__def_axiom1 :
  (forall x:int [nat_ok(x)]. ((x = 0) -> (nat_ok(x) = true)))

axiom pre_rte_ok__def_axiom :
  (forall default_init__n:int [pre_rte_ok(default_init__n)].
  ((pre_rte_ok(default_init__n) = true) -> (1 <= default_init__n)))

axiom pre_rte_ok__def_axiom1 :
  (forall default_init__n:int [pre_rte_ok(default_init__n)].
  ((pre_rte_ok(default_init__n) = true) -> (default_init__n <= 3)))

axiom pre_rte_ok__def_axiom2 :
  (forall default_init__n:int [pre_rte_ok(default_init__n)].
  (((1 <= default_init__n) and (default_init__n <= 3)) ->
  (pre_rte_ok(default_init__n) = true)))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-N715-017__default_init_cond-15469/src/gnatprove/default_init__rte.mlw", line 495, characters 5-8 *)
goal defqtvc :
  (forall n:int.
  (forall usf:(int,nat) farray.
  ((forall n1:int. forall usf1:(int,nat) farray.
   rte_ok__function_guard(rte_ok(usf1, n1), usf1, n1)) ->
  ((forall temp___369:int. (((1 <= temp___369) and (temp___369 <= 3)) ->
   default_initial_assumption1(to_rep((usf[temp___369])), false))) ->
  ((forall n1:int. pre_rte_ok__function_guard(pre_rte_ok(n1), n1)) ->
  (pre_rte_ok(n) = true))))))
