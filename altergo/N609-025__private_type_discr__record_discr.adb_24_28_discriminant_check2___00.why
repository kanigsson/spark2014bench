(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__private_record__result_ty__found : bool
}

function us_split_discrs_rec__private_record__result_ty__found__projection(a: us_split_discrs) : bool =
  (a).rec__private_record__result_ty__found

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__private_record__result_ty : us_main_type
}

function us_split_fields_rec__private_record__result_ty__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_record__result_ty

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__private_record__result_ty__found) = to_int(((b).us_split_discrs1).rec__private_record__result_ty__found)) and
  (us_main_eq(((a).us_split_fields1).rec__private_record__result_ty,
  ((b).us_split_fields1).rec__private_record__result_ty) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic private_record__result_ty__found__first__bit : int

logic private_record__result_ty__found__last__bit : int

logic private_record__result_ty__found__position : int

axiom private_record__result_ty__found__first__bit_axiom :
  (0 <= private_record__result_ty__found__first__bit)

axiom private_record__result_ty__found__last__bit_axiom :
  (private_record__result_ty__found__first__bit <  private_record__result_ty__found__last__bit)

axiom private_record__result_ty__found__position_axiom :
  (0 <= private_record__result_ty__found__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type result_ty__ref = { result_ty__content : us_rep
}

function result_ty__ref_result_ty__content__projection(a: result_ty__ref) : us_rep =
  (a).result_ty__content

logic r : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range1(rec__private_record__result_ty__found1: bool,
  a: us_rep) =
  (rec__private_record__result_ty__found1 = ((a).us_split_discrs1).rec__private_record__result_ty__found)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic private_record__result_ty__found__first__bit1 : int

logic private_record__result_ty__found__last__bit1 : int

logic private_record__result_ty__found__position1 : int

axiom private_record__result_ty__found__first__bit_axiom1 :
  (0 <= private_record__result_ty__found__first__bit1)

axiom private_record__result_ty__found__last__bit_axiom1 :
  (private_record__result_ty__found__first__bit1 <  private_record__result_ty__found__last__bit1)

axiom private_record__result_ty__found__position_axiom1 :
  (0 <= private_record__result_ty__found__position1)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type res_false__ref = { res_false__content : us_rep
}

function res_false__ref_res_false__content__projection(a: res_false__ref) : us_rep =
  (a).res_false__content

predicate dynamic_invariant(temp___expr_252: us_rep,
  temp___is_init_248: bool, temp___skip_constant_249: bool,
  temp___do_toplevel_250: bool, temp___do_typ_inv_251: bool) =
  ((not (temp___skip_constant_249 = true)) -> in_range1(of_int(0),
  temp___expr_252))

predicate default_initial_assumption(temp___expr_254: us_rep,
  temp___skip_top_level_255: bool) =
  (((temp___expr_254).us_split_discrs1).rec__private_record__result_ty__found = of_int(0))

 (* File "record_discr.adb", line 21, characters 0-0 *)
goal defqtvc : in_range1(of_int(0), r)
