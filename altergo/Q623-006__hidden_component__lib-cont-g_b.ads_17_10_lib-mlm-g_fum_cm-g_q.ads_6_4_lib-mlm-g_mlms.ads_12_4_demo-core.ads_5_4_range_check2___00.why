(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t_c

logic t_cqtint : t_c -> int

axiom t_cqtaxiom : (forall i:t_c. (1 <= t_cqtint(i)))

axiom t_cqtaxiom1 : (forall i:t_c. (t_cqtint(i) <= 2147483647))

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : t_c, t_c -> bool

logic dummy : t_c

type t_c__ref = { t_c__content : t_c
}

function t_c__ref_t_c__content__projection(a: t_c__ref) : t_c =
  (a).t_c__content

predicate dynamic_invariant(temp___expr_246: int, temp___is_init_242: bool,
  temp___skip_constant_243: bool, temp___do_toplevel_244: bool,
  temp___do_typ_inv_245: bool) = (((temp___is_init_242 = true) or
  (1 <= 2147483647)) -> in_range(temp___expr_246))

function to_rep(x: t_c) : int = t_cqtint(x)

logic of_rep : int -> t_c

axiom inversion_axiom : (forall x:t_c [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:t_c [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

type t_id

predicate in_range2(x: int) = ((0 <= x) and (x <= 1))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : t_id, t_id -> bool

logic dummy2 : t_id

type t_id__ref = { t_id__content : t_id
}

function t_id__ref_t_id__content__2__projection(a: t_id__ref) : t_id =
  (a).t_id__content

logic to_rep1 : t_id -> int

logic of_rep1 : int -> t_id

axiom inversion_axiom1 :
  (forall x:t_id [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:t_id [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__ada___demo__core__p_mlms__cm__internal__t_m__id
: t_id
}

function us_split_fields_rec__ada___demo__core__p_mlms__cm__internal__t_m__id__projection(a: us_split_fields) : t_id =
  (a).rec__ada___demo__core__p_mlms__cm__internal__t_m__id

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (to_rep1(((a).us_split_fields1).rec__ada___demo__core__p_mlms__cm__internal__t_m__id) = to_rep1(((b).us_split_fields1).rec__ada___demo__core__p_mlms__cm__internal__t_m__id)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic ada___demo__core__p_mlms__cm__internal__t_m__id__first__bit : int

logic ada___demo__core__p_mlms__cm__internal__t_m__id__last__bit : int

logic ada___demo__core__p_mlms__cm__internal__t_m__id__position : int

axiom ada___demo__core__p_mlms__cm__internal__t_m__id__first__bit_axiom :
  (0 <= ada___demo__core__p_mlms__cm__internal__t_m__id__first__bit)

axiom ada___demo__core__p_mlms__cm__internal__t_m__id__last__bit_axiom :
  (ada___demo__core__p_mlms__cm__internal__t_m__id__first__bit <  ada___demo__core__p_mlms__cm__internal__t_m__id__last__bit)

axiom ada___demo__core__p_mlms__cm__internal__t_m__id__position_axiom :
  (0 <= ada___demo__core__p_mlms__cm__internal__t_m__id__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t_m__ref = { t_m__content : us_rep
}

function t_m__ref_t_m__content__projection(a: t_m__ref) : us_rep =
  (a).t_m__content

type t_e__ref = { t_e__content : us_rep
}

function t_e__ref_t_e__content__projection(a: t_e__ref) : us_rep =
  (a).t_e__content

type tt_countB

logic tt_countBqtint : tt_countB -> int

axiom tt_countBqtaxiom :
  (forall i:tt_countB. ((- 2147483648) <= tt_countBqtint(i)))

axiom tt_countBqtaxiom1 :
  (forall i:tt_countB. (tt_countBqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tt_countB, tt_countB -> bool

logic dummy4 : tt_countB

type tt_countB__ref = { tt_countB__content : tt_countB
}

function tt_countB__ref_tt_countB__content__projection(a: tt_countB__ref) : tt_countB =
  (a).tt_countB__content

function to_rep2(x: tt_countB) : int = tt_countBqtint(x)

logic of_rep2 : int -> tt_countB

axiom inversion_axiom2 :
  (forall x:tt_countB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:tt_countB [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t

logic first : t -> tt_countB

logic last : t -> tt_countB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type t_t__ref = { t_t__content : us_t
}

function t_t__ref_t_t__content__projection(a: t_t__ref) : us_t =
  (a).t_t__content

type t4s__ref = { t4s__content : us_t
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : us_t =
  (a).t4s__content

type us_split_discrs = { rec__ada___demo__core__p_mlms__all_f__q__t__c : t_c
}

function us_split_discrs_rec__ada___demo__core__p_mlms__all_f__q__t__c__projection(a: us_split_discrs) : t_c =
  (a).rec__ada___demo__core__p_mlms__all_f__q__t__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__ada___demo__core__p_mlms__all_f__q__t__e :
us_t; rec__ext__ : us_private
}

function us_split_fields_rec__ada___demo__core__p_mlms__all_f__q__t__e__projection(a: us_split_fields2) : us_t =
  (a).rec__ada___demo__core__p_mlms__all_f__q__t__e

function us_split_fields_rec__ext____projection(a: us_split_fields2) : us_private =
  (a).rec__ext__

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag : int
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__projection(a: us_rep1) : int = (a).attr__tag

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__ada___demo__core__p_mlms__all_f__q__t__c) = to_rep(((b).us_split_discrs1).rec__ada___demo__core__p_mlms__all_f__q__t__c)) and
  (bool_eq6(((a).us_split_fields3).rec__ada___demo__core__p_mlms__all_f__q__t__e,
  ((b).us_split_fields3).rec__ada___demo__core__p_mlms__all_f__q__t__e) = true)) then true else false)

logic us_dispatch_eq : us_rep1, us_rep1 -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic ada___demo__core__p_mlms__all_f__q__t__c__first__bit : int

logic ada___demo__core__p_mlms__all_f__q__t__c__last__bit : int

logic ada___demo__core__p_mlms__all_f__q__t__c__position : int

axiom ada___demo__core__p_mlms__all_f__q__t__c__first__bit_axiom :
  (0 <= ada___demo__core__p_mlms__all_f__q__t__c__first__bit)

axiom ada___demo__core__p_mlms__all_f__q__t__c__last__bit_axiom :
  (ada___demo__core__p_mlms__all_f__q__t__c__first__bit <  ada___demo__core__p_mlms__all_f__q__t__c__last__bit)

axiom ada___demo__core__p_mlms__all_f__q__t__c__position_axiom :
  (0 <= ada___demo__core__p_mlms__all_f__q__t__c__position)

logic ada___demo__core__p_mlms__all_f__q__t__e__first__bit : int

logic ada___demo__core__p_mlms__all_f__q__t__e__last__bit : int

logic ada___demo__core__p_mlms__all_f__q__t__e__position : int

axiom ada___demo__core__p_mlms__all_f__q__t__e__first__bit_axiom :
  (0 <= ada___demo__core__p_mlms__all_f__q__t__e__first__bit)

axiom ada___demo__core__p_mlms__all_f__q__t__e__last__bit_axiom :
  (ada___demo__core__p_mlms__all_f__q__t__e__first__bit <  ada___demo__core__p_mlms__all_f__q__t__e__last__bit)

axiom ada___demo__core__p_mlms__all_f__q__t__e__position_axiom :
  (0 <= ada___demo__core__p_mlms__all_f__q__t__e__position)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type t__ref = { t__content : us_rep1
}

function t__ref_t__content__projection(a: t__ref) : us_rep1 = (a).t__content

predicate dynamic_invariant1(temp___expr_253: int, temp___is_init_249: bool,
  temp___skip_constant_250: bool, temp___do_toplevel_251: bool,
  temp___do_typ_inv_252: bool) = (((temp___is_init_249 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_253))

predicate dynamic_invariant2(temp___expr_266: us_rep1,
  temp___is_init_262: bool, temp___skip_constant_263: bool,
  temp___do_toplevel_264: bool, temp___do_typ_inv_265: bool) =
  (let temp___267 =
  ((temp___expr_266).us_split_discrs1).rec__ada___demo__core__p_mlms__all_f__q__t__c
  : t_c in (dynamic_property(1, to_rep(temp___267),
  first1(((temp___expr_266).us_split_fields3).rec__ada___demo__core__p_mlms__all_f__q__t__e),
  last1(((temp___expr_266).us_split_fields3).rec__ada___demo__core__p_mlms__all_f__q__t__e)) and
  ((first1(((temp___expr_266).us_split_fields3).rec__ada___demo__core__p_mlms__all_f__q__t__e) = 1) and
  (last1(((temp___expr_266).us_split_fields3).rec__ada___demo__core__p_mlms__all_f__q__t__e) = to_rep(temp___267)))))

 (* File "lib-mlm-g_fum_cm-g_q.ads", line 6, characters 0-0 *)
goal defqtvc :
  (forall usf:int. (dynamic_invariant(usf, true, true, true, true) ->
  (forall usf1:us_rep1.
  ((to_rep(((usf1).us_split_discrs1).rec__ada___demo__core__p_mlms__all_f__q__t__c) = usf) ->
  ((1 <= usf) -> (1 <= 1))))))
