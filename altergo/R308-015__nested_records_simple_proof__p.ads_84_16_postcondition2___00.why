(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type type_0

logic type_0qtint : type_0 -> int

axiom type_0qtaxiom : (forall i:type_0. ((- 2147483648) <= type_0qtint(i)))

axiom type_0qtaxiom1 : (forall i:type_0. (type_0qtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : type_0, type_0 -> bool

logic dummy : type_0

type type_0__ref = { type_0__content : type_0
}

function type_0__ref_type_0__content__projection(a: type_0__ref) : type_0 =
  (a).type_0__content

function to_rep(x: type_0) : int = type_0qtint(x)

logic of_rep : int -> type_0

axiom inversion_axiom :
  (forall x:type_0 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:type_0 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p__type_1__field_0 : type_0;
rec__p__type_1__field_1 : type_0; rec__p__type_1__field_2 : type_0;
rec__p__type_1__field_3 : type_0; rec__p__type_1__field_4 : type_0;
rec__p__type_1__field_5 : type_0; rec__p__type_1__field_6 : type_0;
rec__p__type_1__field_7 : type_0
}

function us_split_fields_rec__p__type_1__field_0__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_0

function us_split_fields_rec__p__type_1__field_1__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_1

function us_split_fields_rec__p__type_1__field_2__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_2

function us_split_fields_rec__p__type_1__field_3__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_3

function us_split_fields_rec__p__type_1__field_4__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_4

function us_split_fields_rec__p__type_1__field_5__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_5

function us_split_fields_rec__p__type_1__field_6__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_6

function us_split_fields_rec__p__type_1__field_7__projection(a: us_split_fields) : type_0 =
  (a).rec__p__type_1__field_7

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__p__type_1__field_0) = to_rep(((b).us_split_fields1).rec__p__type_1__field_0)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_1) = to_rep(((b).us_split_fields1).rec__p__type_1__field_1))) and
  ((((to_rep(((a).us_split_fields1).rec__p__type_1__field_2) = to_rep(((b).us_split_fields1).rec__p__type_1__field_2)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_3) = to_rep(((b).us_split_fields1).rec__p__type_1__field_3))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_4) = to_rep(((b).us_split_fields1).rec__p__type_1__field_4))) and
  (((to_rep(((a).us_split_fields1).rec__p__type_1__field_5) = to_rep(((b).us_split_fields1).rec__p__type_1__field_5)) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_6) = to_rep(((b).us_split_fields1).rec__p__type_1__field_6))) and
  (to_rep(((a).us_split_fields1).rec__p__type_1__field_7) = to_rep(((b).us_split_fields1).rec__p__type_1__field_7))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__type_1__field_0__first__bit : int

logic p__type_1__field_0__last__bit : int

logic p__type_1__field_0__position : int

axiom p__type_1__field_0__first__bit_axiom :
  (0 <= p__type_1__field_0__first__bit)

axiom p__type_1__field_0__last__bit_axiom :
  (p__type_1__field_0__first__bit <  p__type_1__field_0__last__bit)

axiom p__type_1__field_0__position_axiom :
  (0 <= p__type_1__field_0__position)

logic p__type_1__field_1__first__bit : int

logic p__type_1__field_1__last__bit : int

logic p__type_1__field_1__position : int

axiom p__type_1__field_1__first__bit_axiom :
  (0 <= p__type_1__field_1__first__bit)

axiom p__type_1__field_1__last__bit_axiom :
  (p__type_1__field_1__first__bit <  p__type_1__field_1__last__bit)

axiom p__type_1__field_1__position_axiom :
  (0 <= p__type_1__field_1__position)

logic p__type_1__field_2__first__bit : int

logic p__type_1__field_2__last__bit : int

logic p__type_1__field_2__position : int

axiom p__type_1__field_2__first__bit_axiom :
  (0 <= p__type_1__field_2__first__bit)

axiom p__type_1__field_2__last__bit_axiom :
  (p__type_1__field_2__first__bit <  p__type_1__field_2__last__bit)

axiom p__type_1__field_2__position_axiom :
  (0 <= p__type_1__field_2__position)

logic p__type_1__field_3__first__bit : int

logic p__type_1__field_3__last__bit : int

logic p__type_1__field_3__position : int

axiom p__type_1__field_3__first__bit_axiom :
  (0 <= p__type_1__field_3__first__bit)

axiom p__type_1__field_3__last__bit_axiom :
  (p__type_1__field_3__first__bit <  p__type_1__field_3__last__bit)

axiom p__type_1__field_3__position_axiom :
  (0 <= p__type_1__field_3__position)

logic p__type_1__field_4__first__bit : int

logic p__type_1__field_4__last__bit : int

logic p__type_1__field_4__position : int

axiom p__type_1__field_4__first__bit_axiom :
  (0 <= p__type_1__field_4__first__bit)

axiom p__type_1__field_4__last__bit_axiom :
  (p__type_1__field_4__first__bit <  p__type_1__field_4__last__bit)

axiom p__type_1__field_4__position_axiom :
  (0 <= p__type_1__field_4__position)

logic p__type_1__field_5__first__bit : int

logic p__type_1__field_5__last__bit : int

logic p__type_1__field_5__position : int

axiom p__type_1__field_5__first__bit_axiom :
  (0 <= p__type_1__field_5__first__bit)

axiom p__type_1__field_5__last__bit_axiom :
  (p__type_1__field_5__first__bit <  p__type_1__field_5__last__bit)

axiom p__type_1__field_5__position_axiom :
  (0 <= p__type_1__field_5__position)

logic p__type_1__field_6__first__bit : int

logic p__type_1__field_6__last__bit : int

logic p__type_1__field_6__position : int

axiom p__type_1__field_6__first__bit_axiom :
  (0 <= p__type_1__field_6__first__bit)

axiom p__type_1__field_6__last__bit_axiom :
  (p__type_1__field_6__first__bit <  p__type_1__field_6__last__bit)

axiom p__type_1__field_6__position_axiom :
  (0 <= p__type_1__field_6__position)

logic p__type_1__field_7__first__bit : int

logic p__type_1__field_7__last__bit : int

logic p__type_1__field_7__position : int

axiom p__type_1__field_7__first__bit_axiom :
  (0 <= p__type_1__field_7__first__bit)

axiom p__type_1__field_7__last__bit_axiom :
  (p__type_1__field_7__first__bit <  p__type_1__field_7__last__bit)

axiom p__type_1__field_7__position_axiom :
  (0 <= p__type_1__field_7__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type type_1__ref = { type_1__content : us_rep
}

function type_1__ref_type_1__content__projection(a: type_1__ref) : us_rep =
  (a).type_1__content

logic create_type_1 : unit -> us_rep

logic create_type_1__function_guard : us_rep, unit -> prop

axiom create_type_1__post_axiom :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_0) = 0))))

axiom create_type_1__post_axiom1 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_1) = 0))))

axiom create_type_1__post_axiom2 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_2) = 0))))

axiom create_type_1__post_axiom3 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_3) = 0))))

axiom create_type_1__post_axiom4 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_4) = 0))))

axiom create_type_1__post_axiom5 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_5) = 0))))

axiom create_type_1__post_axiom6 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_6) = 0))))

axiom create_type_1__post_axiom7 :
  (forall us_void_param:unit [create_type_1(us_void_param)]. (let result =
  create_type_1(us_void_param) : us_rep in
  (create_type_1__function_guard(result, us_void_param) ->
  (to_rep(((result).us_split_fields1).rec__p__type_1__field_7) = 0))))

type us_split_fields2 = { rec__p__type_2__field_0 : us_rep;
rec__p__type_2__field_1 : us_rep; rec__p__type_2__field_2 : us_rep;
rec__p__type_2__field_3 : us_rep; rec__p__type_2__field_4 : us_rep
}

function us_split_fields_rec__p__type_2__field_0__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_0

function us_split_fields_rec__p__type_2__field_1__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_1

function us_split_fields_rec__p__type_2__field_2__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_2

function us_split_fields_rec__p__type_2__field_3__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_3

function us_split_fields_rec__p__type_2__field_4__projection(a: us_split_fields2) : us_rep =
  (a).rec__p__type_2__field_4

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (((bool_eq1(((a).us_split_fields3).rec__p__type_2__field_0,
  ((b).us_split_fields3).rec__p__type_2__field_0) = true) and
  (bool_eq1(((a).us_split_fields3).rec__p__type_2__field_1,
  ((b).us_split_fields3).rec__p__type_2__field_1) = true)) and
  (((bool_eq1(((a).us_split_fields3).rec__p__type_2__field_2,
  ((b).us_split_fields3).rec__p__type_2__field_2) = true) and
  (bool_eq1(((a).us_split_fields3).rec__p__type_2__field_3,
  ((b).us_split_fields3).rec__p__type_2__field_3) = true)) and
  (bool_eq1(((a).us_split_fields3).rec__p__type_2__field_4,
  ((b).us_split_fields3).rec__p__type_2__field_4) = true))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p__type_2__field_0__first__bit : int

logic p__type_2__field_0__last__bit : int

logic p__type_2__field_0__position : int

axiom p__type_2__field_0__first__bit_axiom :
  (0 <= p__type_2__field_0__first__bit)

axiom p__type_2__field_0__last__bit_axiom :
  (p__type_2__field_0__first__bit <  p__type_2__field_0__last__bit)

axiom p__type_2__field_0__position_axiom :
  (0 <= p__type_2__field_0__position)

logic p__type_2__field_1__first__bit : int

logic p__type_2__field_1__last__bit : int

logic p__type_2__field_1__position : int

axiom p__type_2__field_1__first__bit_axiom :
  (0 <= p__type_2__field_1__first__bit)

axiom p__type_2__field_1__last__bit_axiom :
  (p__type_2__field_1__first__bit <  p__type_2__field_1__last__bit)

axiom p__type_2__field_1__position_axiom :
  (0 <= p__type_2__field_1__position)

logic p__type_2__field_2__first__bit : int

logic p__type_2__field_2__last__bit : int

logic p__type_2__field_2__position : int

axiom p__type_2__field_2__first__bit_axiom :
  (0 <= p__type_2__field_2__first__bit)

axiom p__type_2__field_2__last__bit_axiom :
  (p__type_2__field_2__first__bit <  p__type_2__field_2__last__bit)

axiom p__type_2__field_2__position_axiom :
  (0 <= p__type_2__field_2__position)

logic p__type_2__field_3__first__bit : int

logic p__type_2__field_3__last__bit : int

logic p__type_2__field_3__position : int

axiom p__type_2__field_3__first__bit_axiom :
  (0 <= p__type_2__field_3__first__bit)

axiom p__type_2__field_3__last__bit_axiom :
  (p__type_2__field_3__first__bit <  p__type_2__field_3__last__bit)

axiom p__type_2__field_3__position_axiom :
  (0 <= p__type_2__field_3__position)

logic p__type_2__field_4__first__bit : int

logic p__type_2__field_4__last__bit : int

logic p__type_2__field_4__position : int

axiom p__type_2__field_4__first__bit_axiom :
  (0 <= p__type_2__field_4__first__bit)

axiom p__type_2__field_4__last__bit_axiom :
  (p__type_2__field_4__first__bit <  p__type_2__field_4__last__bit)

axiom p__type_2__field_4__position_axiom :
  (0 <= p__type_2__field_4__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type type_2__ref = { type_2__content : us_rep1
}

function type_2__ref_type_2__content__projection(a: type_2__ref) : us_rep1 =
  (a).type_2__content

logic create_type_2 : unit -> us_rep1

logic create_type_2__function_guard : us_rep1, unit -> prop

axiom create_type_2__post_axiom :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_2__post_axiom1 :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_2__post_axiom2 :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_2__post_axiom3 :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_2__post_axiom4 :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_2__post_axiom5 :
  (forall us_void_param:unit [create_type_2(us_void_param)]. (let result =
  create_type_2(us_void_param) : us_rep1 in
  (create_type_2__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields3).rec__p__type_2__field_0,
  create_type_1(void)) = true))))

axiom create_type_2__post_axiom6 :
  (forall us_void_param:unit [create_type_2(us_void_param)]. (let result =
  create_type_2(us_void_param) : us_rep1 in
  (create_type_2__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields3).rec__p__type_2__field_1,
  create_type_1(void)) = true))))

axiom create_type_2__post_axiom7 :
  (forall us_void_param:unit [create_type_2(us_void_param)]. (let result =
  create_type_2(us_void_param) : us_rep1 in
  (create_type_2__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields3).rec__p__type_2__field_2,
  create_type_1(void)) = true))))

axiom create_type_2__post_axiom8 :
  (forall us_void_param:unit [create_type_2(us_void_param)]. (let result =
  create_type_2(us_void_param) : us_rep1 in
  (create_type_2__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields3).rec__p__type_2__field_3,
  create_type_1(void)) = true))))

axiom create_type_2__post_axiom9 :
  (forall us_void_param:unit [create_type_2(us_void_param)]. (let result =
  create_type_2(us_void_param) : us_rep1 in
  (create_type_2__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields3).rec__p__type_2__field_4,
  create_type_1(void)) = true))))

type us_split_fields4 = { rec__p__type_4__field_0 : us_rep;
rec__p__type_4__field_1 : us_rep; rec__p__type_4__field_2 : us_rep1;
rec__p__type_4__field_3 : us_rep1
}

function us_split_fields_rec__p__type_4__field_0__projection(a: us_split_fields4) : us_rep =
  (a).rec__p__type_4__field_0

function us_split_fields_rec__p__type_4__field_1__projection(a: us_split_fields4) : us_rep =
  (a).rec__p__type_4__field_1

function us_split_fields_rec__p__type_4__field_2__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__p__type_4__field_2

function us_split_fields_rec__p__type_4__field_3__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__p__type_4__field_3

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq3(a: us_rep2, b: us_rep2) : bool =
  (if (((bool_eq1(((a).us_split_fields5).rec__p__type_4__field_0,
  ((b).us_split_fields5).rec__p__type_4__field_0) = true) and
  (bool_eq1(((a).us_split_fields5).rec__p__type_4__field_1,
  ((b).us_split_fields5).rec__p__type_4__field_1) = true)) and
  ((bool_eq2(((a).us_split_fields5).rec__p__type_4__field_2,
  ((b).us_split_fields5).rec__p__type_4__field_2) = true) and
  (bool_eq2(((a).us_split_fields5).rec__p__type_4__field_3,
  ((b).us_split_fields5).rec__p__type_4__field_3) = true))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic p__type_4__field_0__first__bit : int

logic p__type_4__field_0__last__bit : int

logic p__type_4__field_0__position : int

axiom p__type_4__field_0__first__bit_axiom :
  (0 <= p__type_4__field_0__first__bit)

axiom p__type_4__field_0__last__bit_axiom :
  (p__type_4__field_0__first__bit <  p__type_4__field_0__last__bit)

axiom p__type_4__field_0__position_axiom :
  (0 <= p__type_4__field_0__position)

logic p__type_4__field_1__first__bit : int

logic p__type_4__field_1__last__bit : int

logic p__type_4__field_1__position : int

axiom p__type_4__field_1__first__bit_axiom :
  (0 <= p__type_4__field_1__first__bit)

axiom p__type_4__field_1__last__bit_axiom :
  (p__type_4__field_1__first__bit <  p__type_4__field_1__last__bit)

axiom p__type_4__field_1__position_axiom :
  (0 <= p__type_4__field_1__position)

logic p__type_4__field_2__first__bit : int

logic p__type_4__field_2__last__bit : int

logic p__type_4__field_2__position : int

axiom p__type_4__field_2__first__bit_axiom :
  (0 <= p__type_4__field_2__first__bit)

axiom p__type_4__field_2__last__bit_axiom :
  (p__type_4__field_2__first__bit <  p__type_4__field_2__last__bit)

axiom p__type_4__field_2__position_axiom :
  (0 <= p__type_4__field_2__position)

logic p__type_4__field_3__first__bit : int

logic p__type_4__field_3__last__bit : int

logic p__type_4__field_3__position : int

axiom p__type_4__field_3__first__bit_axiom :
  (0 <= p__type_4__field_3__first__bit)

axiom p__type_4__field_3__last__bit_axiom :
  (p__type_4__field_3__first__bit <  p__type_4__field_3__last__bit)

axiom p__type_4__field_3__position_axiom :
  (0 <= p__type_4__field_3__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy3 : us_rep2

type type_4__ref = { type_4__content : us_rep2
}

function type_4__ref_type_4__content__projection(a: type_4__ref) : us_rep2 =
  (a).type_4__content

type type_3

logic type_3qtint : type_3 -> int

axiom type_3qtaxiom : (forall i:type_3. ((- 2147483648) <= type_3qtint(i)))

axiom type_3qtaxiom1 : (forall i:type_3. (type_3qtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq4 : type_3, type_3 -> bool

logic dummy4 : type_3

type type_3__ref = { type_3__content : type_3
}

function type_3__ref_type_3__content__projection(a: type_3__ref) : type_3 =
  (a).type_3__content

function to_rep1(x: type_3) : int = type_3qtint(x)

logic of_rep1 : int -> type_3

axiom inversion_axiom1 :
  (forall x:type_3 [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:type_3 [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields6 = { rec__p__type_5__field_0 : type_3;
rec__p__type_5__field_1 : us_rep2; rec__p__type_5__field_2 : us_rep1;
rec__p__type_5__field_3 : us_rep2; rec__p__type_5__field_4 : us_rep2
}

function us_split_fields_rec__p__type_5__field_0__projection(a: us_split_fields6) : type_3 =
  (a).rec__p__type_5__field_0

function us_split_fields_rec__p__type_5__field_1__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__p__type_5__field_1

function us_split_fields_rec__p__type_5__field_2__projection(a: us_split_fields6) : us_rep1 =
  (a).rec__p__type_5__field_2

function us_split_fields_rec__p__type_5__field_3__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__p__type_5__field_3

function us_split_fields_rec__p__type_5__field_4__projection(a: us_split_fields6) : us_rep2 =
  (a).rec__p__type_5__field_4

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq5(a: us_rep3, b: us_rep3) : bool =
  (if (((to_rep1(((a).us_split_fields7).rec__p__type_5__field_0) = to_rep1(((b).us_split_fields7).rec__p__type_5__field_0)) and
  (bool_eq3(((a).us_split_fields7).rec__p__type_5__field_1,
  ((b).us_split_fields7).rec__p__type_5__field_1) = true)) and
  (((bool_eq2(((a).us_split_fields7).rec__p__type_5__field_2,
  ((b).us_split_fields7).rec__p__type_5__field_2) = true) and
  (bool_eq3(((a).us_split_fields7).rec__p__type_5__field_3,
  ((b).us_split_fields7).rec__p__type_5__field_3) = true)) and
  (bool_eq3(((a).us_split_fields7).rec__p__type_5__field_4,
  ((b).us_split_fields7).rec__p__type_5__field_4) = true))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic p__type_5__field_0__first__bit : int

logic p__type_5__field_0__last__bit : int

logic p__type_5__field_0__position : int

axiom p__type_5__field_0__first__bit_axiom :
  (0 <= p__type_5__field_0__first__bit)

axiom p__type_5__field_0__last__bit_axiom :
  (p__type_5__field_0__first__bit <  p__type_5__field_0__last__bit)

axiom p__type_5__field_0__position_axiom :
  (0 <= p__type_5__field_0__position)

logic p__type_5__field_1__first__bit : int

logic p__type_5__field_1__last__bit : int

logic p__type_5__field_1__position : int

axiom p__type_5__field_1__first__bit_axiom :
  (0 <= p__type_5__field_1__first__bit)

axiom p__type_5__field_1__last__bit_axiom :
  (p__type_5__field_1__first__bit <  p__type_5__field_1__last__bit)

axiom p__type_5__field_1__position_axiom :
  (0 <= p__type_5__field_1__position)

logic p__type_5__field_2__first__bit : int

logic p__type_5__field_2__last__bit : int

logic p__type_5__field_2__position : int

axiom p__type_5__field_2__first__bit_axiom :
  (0 <= p__type_5__field_2__first__bit)

axiom p__type_5__field_2__last__bit_axiom :
  (p__type_5__field_2__first__bit <  p__type_5__field_2__last__bit)

axiom p__type_5__field_2__position_axiom :
  (0 <= p__type_5__field_2__position)

logic p__type_5__field_3__first__bit : int

logic p__type_5__field_3__last__bit : int

logic p__type_5__field_3__position : int

axiom p__type_5__field_3__first__bit_axiom :
  (0 <= p__type_5__field_3__first__bit)

axiom p__type_5__field_3__last__bit_axiom :
  (p__type_5__field_3__first__bit <  p__type_5__field_3__last__bit)

axiom p__type_5__field_3__position_axiom :
  (0 <= p__type_5__field_3__position)

logic p__type_5__field_4__first__bit : int

logic p__type_5__field_4__last__bit : int

logic p__type_5__field_4__position : int

axiom p__type_5__field_4__first__bit_axiom :
  (0 <= p__type_5__field_4__first__bit)

axiom p__type_5__field_4__last__bit_axiom :
  (p__type_5__field_4__first__bit <  p__type_5__field_4__last__bit)

axiom p__type_5__field_4__position_axiom :
  (0 <= p__type_5__field_4__position)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type type_5__ref = { type_5__content : us_rep3
}

function type_5__ref_type_5__content__projection(a: type_5__ref) : us_rep3 =
  (a).type_5__content

logic create_type_5 : unit -> us_rep3

logic create_type_5__function_guard : us_rep3, unit -> prop

logic create_type_4 : unit -> us_rep2

logic create_type_4__function_guard : us_rep2, unit -> prop

axiom create_type_5__post_axiom :
  create_type_4__function_guard(create_type_4(void), void)

axiom create_type_5__post_axiom1 :
  create_type_2__function_guard(create_type_2(void), void)

axiom create_type_5__post_axiom2 :
  create_type_4__function_guard(create_type_4(void), void)

axiom create_type_5__post_axiom3 :
  create_type_4__function_guard(create_type_4(void), void)

axiom create_type_5__post_axiom4 :
  (forall us_void_param:unit [create_type_5(us_void_param)]. (let result =
  create_type_5(us_void_param) : us_rep3 in
  (create_type_5__function_guard(result, us_void_param) ->
  (to_rep1(((result).us_split_fields7).rec__p__type_5__field_0) = 0))))

axiom create_type_5__post_axiom5 :
  (forall us_void_param:unit [create_type_5(us_void_param)]. (let result =
  create_type_5(us_void_param) : us_rep3 in
  (create_type_5__function_guard(result, us_void_param) ->
  (bool_eq3(((result).us_split_fields7).rec__p__type_5__field_1,
  create_type_4(void)) = true))))

axiom create_type_5__post_axiom6 :
  (forall us_void_param:unit [create_type_5(us_void_param)]. (let result =
  create_type_5(us_void_param) : us_rep3 in
  (create_type_5__function_guard(result, us_void_param) ->
  (bool_eq2(((result).us_split_fields7).rec__p__type_5__field_2,
  create_type_2(void)) = true))))

axiom create_type_5__post_axiom7 :
  (forall us_void_param:unit [create_type_5(us_void_param)]. (let result =
  create_type_5(us_void_param) : us_rep3 in
  (create_type_5__function_guard(result, us_void_param) ->
  (bool_eq3(((result).us_split_fields7).rec__p__type_5__field_3,
  create_type_4(void)) = true))))

axiom create_type_5__post_axiom8 :
  (forall us_void_param:unit [create_type_5(us_void_param)]. (let result =
  create_type_5(us_void_param) : us_rep3 in
  (create_type_5__function_guard(result, us_void_param) ->
  (bool_eq3(((result).us_split_fields7).rec__p__type_5__field_4,
  create_type_4(void)) = true))))

type us_split_fields8 = { rec__p__type_6__field_0 : us_rep;
rec__p__type_6__field_1 : us_rep3; rec__p__type_6__field_2 : us_rep1;
rec__p__type_6__field_3 : us_rep3
}

function us_split_fields_rec__p__type_6__field_0__projection(a: us_split_fields8) : us_rep =
  (a).rec__p__type_6__field_0

function us_split_fields_rec__p__type_6__field_1__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__p__type_6__field_1

function us_split_fields_rec__p__type_6__field_2__projection(a: us_split_fields8) : us_rep1 =
  (a).rec__p__type_6__field_2

function us_split_fields_rec__p__type_6__field_3__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__p__type_6__field_3

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___split_fields__5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function bool_eq6(a: us_rep4, b: us_rep4) : bool =
  (if (((bool_eq1(((a).us_split_fields9).rec__p__type_6__field_0,
  ((b).us_split_fields9).rec__p__type_6__field_0) = true) and
  (bool_eq5(((a).us_split_fields9).rec__p__type_6__field_1,
  ((b).us_split_fields9).rec__p__type_6__field_1) = true)) and
  ((bool_eq2(((a).us_split_fields9).rec__p__type_6__field_2,
  ((b).us_split_fields9).rec__p__type_6__field_2) = true) and
  (bool_eq5(((a).us_split_fields9).rec__p__type_6__field_3,
  ((b).us_split_fields9).rec__p__type_6__field_3) = true))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic p__type_6__field_0__first__bit : int

logic p__type_6__field_0__last__bit : int

logic p__type_6__field_0__position : int

axiom p__type_6__field_0__first__bit_axiom :
  (0 <= p__type_6__field_0__first__bit)

axiom p__type_6__field_0__last__bit_axiom :
  (p__type_6__field_0__first__bit <  p__type_6__field_0__last__bit)

axiom p__type_6__field_0__position_axiom :
  (0 <= p__type_6__field_0__position)

logic p__type_6__field_1__first__bit : int

logic p__type_6__field_1__last__bit : int

logic p__type_6__field_1__position : int

axiom p__type_6__field_1__first__bit_axiom :
  (0 <= p__type_6__field_1__first__bit)

axiom p__type_6__field_1__last__bit_axiom :
  (p__type_6__field_1__first__bit <  p__type_6__field_1__last__bit)

axiom p__type_6__field_1__position_axiom :
  (0 <= p__type_6__field_1__position)

logic p__type_6__field_2__first__bit : int

logic p__type_6__field_2__last__bit : int

logic p__type_6__field_2__position : int

axiom p__type_6__field_2__first__bit_axiom :
  (0 <= p__type_6__field_2__first__bit)

axiom p__type_6__field_2__last__bit_axiom :
  (p__type_6__field_2__first__bit <  p__type_6__field_2__last__bit)

axiom p__type_6__field_2__position_axiom :
  (0 <= p__type_6__field_2__position)

logic p__type_6__field_3__first__bit : int

logic p__type_6__field_3__last__bit : int

logic p__type_6__field_3__position : int

axiom p__type_6__field_3__first__bit_axiom :
  (0 <= p__type_6__field_3__first__bit)

axiom p__type_6__field_3__last__bit_axiom :
  (p__type_6__field_3__first__bit <  p__type_6__field_3__last__bit)

axiom p__type_6__field_3__position_axiom :
  (0 <= p__type_6__field_3__position)

logic user_eq6 : us_rep4, us_rep4 -> bool

logic dummy6 : us_rep4

type type_6__ref = { type_6__content : us_rep4
}

function type_6__ref_type_6__content__projection(a: type_6__ref) : us_rep4 =
  (a).type_6__content

predicate dynamic_invariant(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_164))

predicate dynamic_invariant1(temp___expr_268: int, temp___is_init_264: bool,
  temp___skip_constant_265: bool, temp___do_toplevel_266: bool,
  temp___do_typ_inv_267: bool) = (((temp___is_init_264 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_268))

axiom create_type_4__post_axiom :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_4__post_axiom1 :
  create_type_1__function_guard(create_type_1(void), void)

axiom create_type_4__post_axiom2 :
  create_type_2__function_guard(create_type_2(void), void)

axiom create_type_4__post_axiom3 :
  create_type_2__function_guard(create_type_2(void), void)

axiom create_type_4__post_axiom4 :
  (forall us_void_param:unit [create_type_4(us_void_param)]. (let result =
  create_type_4(us_void_param) : us_rep2 in
  (create_type_4__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields5).rec__p__type_4__field_0,
  create_type_1(void)) = true))))

axiom create_type_4__post_axiom5 :
  (forall us_void_param:unit [create_type_4(us_void_param)]. (let result =
  create_type_4(us_void_param) : us_rep2 in
  (create_type_4__function_guard(result, us_void_param) ->
  (bool_eq1(((result).us_split_fields5).rec__p__type_4__field_1,
  create_type_1(void)) = true))))

axiom create_type_4__post_axiom6 :
  (forall us_void_param:unit [create_type_4(us_void_param)]. (let result =
  create_type_4(us_void_param) : us_rep2 in
  (create_type_4__function_guard(result, us_void_param) ->
  (bool_eq2(((result).us_split_fields5).rec__p__type_4__field_2,
  create_type_2(void)) = true))))

axiom create_type_4__post_axiom7 :
  (forall us_void_param:unit [create_type_4(us_void_param)]. (let result =
  create_type_4(us_void_param) : us_rep2 in
  (create_type_4__function_guard(result, us_void_param) ->
  (bool_eq2(((result).us_split_fields5).rec__p__type_4__field_3,
  create_type_2(void)) = true))))

 (* File "p.ads", line 82, characters 0-0 *)
goal defqtvc : (let o = create_type_5(void) : us_rep3 in
  (create_type_4__function_guard(create_type_4(void), void) ->
  (create_type_2__function_guard(create_type_2(void), void) ->
  (create_type_4__function_guard(create_type_4(void), void) ->
  (create_type_4__function_guard(create_type_4(void), void) ->
  ((create_type_5__function_guard(o, void) and
  (((((to_rep1(((o).us_split_fields7).rec__p__type_5__field_0) = 0) and
  (bool_eq3(((o).us_split_fields7).rec__p__type_5__field_1,
  create_type_4(void)) = true)) and
  (bool_eq2(((o).us_split_fields7).rec__p__type_5__field_2,
  create_type_2(void)) = true)) and
  (bool_eq3(((o).us_split_fields7).rec__p__type_5__field_3,
  create_type_4(void)) = true)) and
  (bool_eq3(((o).us_split_fields7).rec__p__type_5__field_4,
  create_type_4(void)) = true))) -> (let o1 = create_type_2(void)
  : us_rep1 in (create_type_1__function_guard(create_type_1(void), void) ->
  (create_type_1__function_guard(create_type_1(void), void) ->
  (create_type_1__function_guard(create_type_1(void), void) ->
  (create_type_1__function_guard(create_type_1(void), void) ->
  (create_type_1__function_guard(create_type_1(void), void) ->
  ((create_type_2__function_guard(o1, void) and
  (((((bool_eq1(((o1).us_split_fields3).rec__p__type_2__field_0,
  create_type_1(void)) = true) and
  (bool_eq1(((o1).us_split_fields3).rec__p__type_2__field_1,
  create_type_1(void)) = true)) and
  (bool_eq1(((o1).us_split_fields3).rec__p__type_2__field_2,
  create_type_1(void)) = true)) and
  (bool_eq1(((o1).us_split_fields3).rec__p__type_2__field_3,
  create_type_1(void)) = true)) and
  (bool_eq1(((o1).us_split_fields3).rec__p__type_2__field_4,
  create_type_1(void)) = true))) -> (let o2 = create_type_5(void)
  : us_rep3 in (create_type_4__function_guard(create_type_4(void), void) ->
  (create_type_2__function_guard(create_type_2(void), void) ->
  (create_type_4__function_guard(create_type_4(void), void) ->
  (create_type_4__function_guard(create_type_4(void), void) ->
  ((create_type_5__function_guard(o2, void) and
  (((((to_rep1(((o2).us_split_fields7).rec__p__type_5__field_0) = 0) and
  (bool_eq3(((o2).us_split_fields7).rec__p__type_5__field_1,
  create_type_4(void)) = true)) and
  (bool_eq2(((o2).us_split_fields7).rec__p__type_5__field_2,
  create_type_2(void)) = true)) and
  (bool_eq3(((o2).us_split_fields7).rec__p__type_5__field_3,
  create_type_4(void)) = true)) and
  (bool_eq3(((o2).us_split_fields7).rec__p__type_5__field_4,
  create_type_4(void)) = true))) -> (let o3 = create_type_1(void) : us_rep in
  ((create_type_1__function_guard(o3, void) and
  ((((((((to_rep(((o3).us_split_fields1).rec__p__type_1__field_0) = 0) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_1) = 0)) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_2) = 0)) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_3) = 0)) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_4) = 0)) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_5) = 0)) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_6) = 0)) and
  (to_rep(((o3).us_split_fields1).rec__p__type_1__field_7) = 0))) ->
  (forall p__create_type_6__result:us_split_fields8.
  ((p__create_type_6__result = { rec__p__type_6__field_0 = o3;
  rec__p__type_6__field_1 = o2; rec__p__type_6__field_2 = o1;
  rec__p__type_6__field_3 = o }) ->
  (create_type_1__function_guard(create_type_1(void), void) ->
  (bool_eq1((p__create_type_6__result).rec__p__type_6__field_0,
  create_type_1(void)) = true)))))))))))))))))))))))))
