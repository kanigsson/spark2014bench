(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq3(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 65536))

predicate in_range3(x: int) = ((1 <= x) and (x <= 65536))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type vector_element

logic vector_elementqtint : vector_element -> int

axiom vector_elementqtaxiom :
  (forall i:vector_element. ((- 32768) <= vector_elementqtint(i)))

axiom vector_elementqtaxiom1 :
  (forall i:vector_element. (vector_elementqtint(i) <= 32767))

predicate in_range4(x: int) = (((- 32768) <= x) and (x <= 32767))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : vector_element, vector_element -> bool

logic dummy3 : vector_element

type vector_element__ref = { vector_element__content : vector_element
}

logic of_rep : int -> vector_element

axiom inversion_axiom :
  (forall x:vector_element [vector_elementqtint(x)].
  (of_rep(vector_elementqtint(x)) = x))

axiom range_axiom :
  (forall x:vector_element [vector_elementqtint(x)].
  in_range4(vector_elementqtint(x)))

axiom coerce_axiom :
  (forall x:int [vector_elementqtint(of_rep(x))]. (in_range4(x) ->
  (vector_elementqtint(of_rep(x)) = x)))

type map__ref = { map__content : (int,vector_element) farray
}

logic slide : (int,vector_element) farray, int,
  int -> (int,vector_element) farray

axiom slide_eq :
  (forall a:(int,vector_element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,vector_element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,vector_element) farray, af: int, al: int,
  b: (int,vector_element) farray, bf: int, bl: int) : bool =
  (if ((if (af <= al) then ((al - af) = (bl - bf)) else (bl <  bf)) and
  (forall idx:int. (((af <= idx) and (idx <= al)) ->
  ((a[idx]) = (b[((bf - af) + idx)]))))) then true else false)

logic compare : (int,vector_element) farray, int, int,
  (int,vector_element) farray, int, int -> int

axiom compare_def_eq :
  (forall a:(int,vector_element) farray.
  forall b:(int,vector_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) = 0) -> (bool_eq6(a,
  a_first, a_last, b, b_first, b_last) = true))))

axiom compare_def_eq1 :
  (forall a:(int,vector_element) farray.
  forall b:(int,vector_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((bool_eq6(a, a_first, a_last, b, b_first, b_last) = true) -> (compare(a,
  a_first, a_last, b, b_first, b_last) = 0))))

axiom compare_def_lt :
  (forall a:(int,vector_element) farray.
  forall b:(int,vector_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((compare(a, a_first, a_last, b, b_first, b_last) <  0) ->
  (exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
  ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
  ((i <  a_last) and
  (vector_elementqtint((a[(i + 1)])) <  vector_elementqtint((b[(j + 1)]))))))))))))

axiom compare_def_lt1 :
  (forall a:(int,vector_element) farray.
  forall b:(int,vector_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((exists i:int. exists j:int. ((i <= a_last) and ((j <  b_last) and
   ((bool_eq6(a, a_first, i, b, b_first, j) = true) and ((i = a_last) or
   ((i <  a_last) and
   (vector_elementqtint((a[(i + 1)])) <  vector_elementqtint((b[(j + 1)]))))))))) ->
  (compare(a, a_first, a_last, b, b_first, b_last) <  0))))

axiom compare_def_gt :
  (forall a:(int,vector_element) farray.
  forall b:(int,vector_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((0 <  compare(a, a_first, a_last, b, b_first, b_last)) ->
  (exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
  ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
  ((i <  b_last) and
  (vector_elementqtint((b[(i + 1)])) <  vector_elementqtint((a[(j + 1)]))))))))))))

axiom compare_def_gt1 :
  (forall a:(int,vector_element) farray.
  forall b:(int,vector_element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int [compare(a, a_first, a_last, b, b_first, b_last)].
  ((exists i:int. exists j:int. ((i <= b_last) and ((j <  a_last) and
   ((bool_eq6(a, a_first, j, b, b_first, i) = true) and ((i = b_last) or
   ((i <  b_last) and
   (vector_elementqtint((b[(i + 1)])) <  vector_elementqtint((a[(j + 1)]))))))))) ->
  (0 <  compare(a, a_first, a_last, b, b_first, b_last)))))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep(x)]. (of_rep1(to_rep(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep(of_rep1(x))]. (in_range1(x) ->
  (to_rep(of_rep1(x)) = x)))

predicate index_dynamic_property(first: int, last: int, x: int) =
  ((first <= x) and (x <= last))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (index_dynamic_property(range_first, range_last, low) and
  index_dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,vector_element) farray; rt : t
}

function of_array(a: (int,vector_element) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type vector__ref = { vector__content : us_t
}

function usget(v: us_t, i: int) : int = vector_elementqtint(((v).elts[i]))

predicate dynamic_invariant2(expr: us_t, us: bool, skip_bounds: bool,
  us1: bool, us2: bool) = ((not (skip_bounds = true)) -> dynamic_property(1,
  65536, first1(expr), last1(expr)))

logic x : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic of_rep2 : int -> index

axiom inversion_axiom2 :
  (forall x1:index [indexqtint(x1)]. (of_rep2(indexqtint(x1)) = x1))

axiom range_axiom2 :
  (forall x1:index [indexqtint(x1)]. in_range3(indexqtint(x1)))

axiom coerce_axiom2 :
  (forall x1:int [indexqtint(of_rep2(x1))]. (in_range3(x1) ->
  (indexqtint(of_rep2(x1)) = x1)))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 65536))

predicate in_range5(x1: int) = ((0 <= x1) and (x1 <= 65536))

function bool_eq8(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : extended_index, extended_index -> bool

logic dummy5 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

logic of_rep3 : int -> extended_index

axiom inversion_axiom3 :
  (forall x1:extended_index [extended_indexqtint(x1)].
  (of_rep3(extended_indexqtint(x1)) = x1))

axiom range_axiom3 :
  (forall x1:extended_index [extended_indexqtint(x1)].
  in_range5(extended_indexqtint(x1)))

axiom coerce_axiom3 :
  (forall x1:int [extended_indexqtint(of_rep3(x1))]. (in_range5(x1) ->
  (extended_indexqtint(of_rep3(x1)) = x1)))

type us_split_fields = { rec__sums__slice_bounds__lo : index;
rec__sums__slice_bounds__hi : extended_index }

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

type slice_bounds = { us_split_fields1 : us_split_fields
}

type slice_bounds__ref = { slice_bounds__content : slice_bounds
}

function usrec__lo(b: slice_bounds) : int =
  indexqtint(((b).us_split_fields1).rec__sums__slice_bounds__lo)

function usrec__hi(b: slice_bounds) : int =
  extended_indexqtint(((b).us_split_fields1).rec__sums__slice_bounds__hi)

function bool_eq9(a: slice_bounds, b: slice_bounds) : bool =
  (if ((usrec__lo(a) = usrec__lo(b)) and
  (usrec__hi(a) = usrec__hi(b))) then true else false)

logic dummy6 : slice_bounds

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type t1

logic le : t1, t1 -> prop

logic lt : t1, t1 -> prop

logic gt : t1, t1 -> prop

logic add : t1, t1 -> t1

logic sub : t1, t1 -> t1

logic one : t1

type component_type

type map__ref1 = { map__content1 : (t1,component_type) farray
}

logic slide1 : (t1,component_type) farray, t1,
  t1 -> (t1,component_type) farray

axiom slide_eq1 :
  (forall a:(t1,component_type) farray.
  (forall first2:t1 [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(t1,component_type) farray.
  (forall old_first:t1.
  (forall new_first:t1.
  (forall i:t1 [(slide1(a, old_first, new_first)[i])]. ((slide1(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

logic sum__logic : us_t, slice_bounds -> int

axiom sum_def :
  (forall v:us_t. forall b:slice_bounds [sum__logic(v, b)].
  in_range1(sum__logic(v, b)))

axiom sum_def1 :
  (forall v:us_t. forall b:slice_bounds [sum__logic(v, b)].
  ((usrec__hi(b) <  usrec__lo(b)) -> (sum__logic(v, b) = 0)))

axiom sum_def2 :
  (forall v:us_t. forall b:slice_bounds [sum__logic(v, b)].
  (((first1(v) <= usrec__lo(b)) and ((usrec__lo(b) <= usrec__hi(b)) and
  (usrec__hi(b) <= last1(v)))) -> ((usrec__lo(b) = usrec__hi(b)) ->
  (sum__logic(v, b) = usget(v, usrec__lo(b))))))

axiom sum_def3 :
  (forall v:us_t. forall b:slice_bounds [sum__logic(v, b)].
  (((first1(v) <= usrec__lo(b)) and ((usrec__lo(b) <= usrec__hi(b)) and
  (usrec__hi(b) <= last1(v)))) ->
  (forall b1:slice_bounds [sum__logic(v, b1)].
  (((usrec__hi(b1) = usrec__hi(b)) and ((usrec__lo(b) <  usrec__lo(b1)) and
  (usrec__lo(b1) <= usrec__hi(b)))) -> (sum__logic(v, b) = (sum__logic(v,
  b1) + sum__logic(v, { us_split_fields1 = { rec__sums__slice_bounds__lo =
  ((b).us_split_fields1).rec__sums__slice_bounds__lo;
  rec__sums__slice_bounds__hi = of_rep3((usrec__lo(b1) - 1)) } })))))))

axiom sum_def4 :
  (forall v:us_t. forall b:slice_bounds [sum__logic(v, b)].
  (((first1(v) <= usrec__lo(b)) and ((usrec__lo(b) <= usrec__hi(b)) and
  (usrec__hi(b) <= last1(v)))) ->
  (forall b1:slice_bounds [sum__logic(v, b1)].
  (((usrec__lo(b1) = usrec__lo(b)) and ((usrec__lo(b) <= usrec__hi(b1)) and
  (usrec__hi(b1) <  usrec__hi(b)))) -> (sum__logic(v, b) = (sum__logic(v,
  b1) + sum__logic(v, { us_split_fields1 = { rec__sums__slice_bounds__lo =
  of_rep2((usrec__hi(b1) + 1)); rec__sums__slice_bounds__hi =
  ((b).us_split_fields1).rec__sums__slice_bounds__hi } })))))))

predicate dynamic_property1(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

function bool_eq10(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy7 : integer

type t2b__ref = { t2b__content : integer
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : integer =
  (a).t2b__content

predicate dynamic_property2(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

function bool_eq11(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy8 : integer

type t11b__ref = { t11b__content : integer
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : integer =
  (a).t11b__content

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

logic rliteral : index

axiom rliteral_axiom : (indexqtint(rliteral) = 1)

logic rliteral1 : extended_index

axiom rliteral_axiom1 : (extended_indexqtint(rliteral1) = 0)

 (* File "slice_sums.ads", line 5, characters 0-0 *)
goal defqtvc :
  (forall current_sum:int. (dynamic_invariant2(x, true, false, true, true) ->
  (forall max_sum:int. ((max_sum = 0) -> (dynamic_invariant1(max_sum, true,
  false, true, true) -> (dynamic_invariant(current_sum, false, false, true,
  true) ->
  (forall result____split_fields:us_split_fields.
  ((result____split_fields = { rec__sums__slice_bounds__lo = rliteral;
  rec__sums__slice_bounds__hi = rliteral1 }) -> (let temp___183 = first1(x)
  : int in
  (forall lo:int. ((lo = temp___183) ->
  ((andb((if (temp___183 <= lo) then true else false),
  (if (lo <= last1(x)) then true else false)) = true) ->
  (in_range1((lo - 1)) ->
  (forall max_sum1:int. forall result____split_fields1:us_split_fields.
  forall current_sum1:int. forall lo1:int.
  (((forall lo_index:int. (((first1(x) <= lo_index) and
    (lo_index <= (lo1 - 1))) ->
    (forall hi_index:int. (((first1(x) <= hi_index) and
    (hi_index <= last1(x))) -> (sum__logic(x, { us_split_fields1 = {
    rec__sums__slice_bounds__lo = of_rep2(lo_index);
    rec__sums__slice_bounds__hi = of_rep3(hi_index) } }) <= max_sum1))))) and
  ((indexqtint((result____split_fields1).rec__sums__slice_bounds__lo) <= extended_indexqtint((result____split_fields1).rec__sums__slice_bounds__hi)) ->
  (((first1(x) <= indexqtint((result____split_fields1).rec__sums__slice_bounds__lo)) and
  (extended_indexqtint((result____split_fields1).rec__sums__slice_bounds__hi) <= last1(x))) and
  (max_sum1 = sum__logic(x, { us_split_fields1 = result____split_fields1
  }))))) -> ((andb((if ((dynamic_property1(first1(x), last1(x), lo1) and
  dynamic_invariant1(max_sum1, true, true, true, true)) and
  dynamic_invariant(current_sum1, false, true, true,
  true)) then true else false), (if ((first1(x) <= lo1) and
  (lo1 <= last1(x))) then true else false)) = true) -> (let temp___185 =
  first1(x) : int in
  (forall hi:int. ((hi = temp___185) ->
  ((andb((if (temp___185 <= hi) then true else false),
  (if (hi <= last1(x)) then true else false)) = true) ->
  (in_range1((hi - 1)) -> ((first1(x) <= (lo1 - 1)) -> (1 <= first1(x))))))))))))))))))))))))
