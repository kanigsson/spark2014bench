(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic pub : int -> int

logic pub__function_guard : int, int -> prop

logic attr__ATTRIBUTE_ADDRESS : int

predicate type_invariant(temp___158: int) = (not (temp___158 = 0))

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

predicate dynamic_invariant1(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_164))

axiom pub__post_axiom :
  (forall type_invariant_legal_4__x:int [pub(type_invariant_legal_4__x)].
  ((dynamic_invariant1(type_invariant_legal_4__x, true, true, true, true) and
  type_invariant(type_invariant_legal_4__x)) -> (let result =
  pub(type_invariant_legal_4__x) : int in (pub__function_guard(result,
  type_invariant_legal_4__x) -> dynamic_invariant(result, true, false, true,
  true)))))

logic e_pub : int -> int

logic e_pub__function_guard : int, int -> prop

axiom e_pub__post_axiom :
  (forall type_invariant_legal_4__x:int [e_pub(type_invariant_legal_4__x)].
  ((dynamic_invariant1(type_invariant_legal_4__x, true, true, true, true) and
  type_invariant(type_invariant_legal_4__x)) -> (let result =
  e_pub(type_invariant_legal_4__x) : int in (e_pub__function_guard(result,
  type_invariant_legal_4__x) -> dynamic_invariant(result, true, false, true,
  true)))))

axiom e_pub__def_axiom :
  (forall type_invariant_legal_4__x:int [e_pub(type_invariant_legal_4__x)].
  (dynamic_invariant1(type_invariant_legal_4__x, true, true, true, true) ->
  (e_pub(type_invariant_legal_4__x) = type_invariant_legal_4__x)))

logic priv : int -> int

logic priv__function_guard : int, int -> prop

axiom priv__post_axiom :
  (forall type_invariant_legal_4__x:int [priv(type_invariant_legal_4__x)].
  ((dynamic_invariant1(type_invariant_legal_4__x, true, true, true, true) and
  type_invariant(type_invariant_legal_4__x)) -> (let result =
  priv(type_invariant_legal_4__x) : int in (priv__function_guard(result,
  type_invariant_legal_4__x) -> dynamic_invariant(result, true, false, true,
  true)))))

logic e_priv : int -> int

logic e_priv__function_guard : int, int -> prop

axiom e_priv__post_axiom :
  (forall type_invariant_legal_4__x:int [e_priv(type_invariant_legal_4__x)].
  ((dynamic_invariant1(type_invariant_legal_4__x, true, true, true, true) and
  type_invariant(type_invariant_legal_4__x)) -> (let result =
  e_priv(type_invariant_legal_4__x) : int in (e_priv__function_guard(result,
  type_invariant_legal_4__x) -> dynamic_invariant(result, true, false, true,
  true)))))

axiom e_priv__def_axiom :
  (forall type_invariant_legal_4__x:int [e_priv(type_invariant_legal_4__x)].
  (dynamic_invariant1(type_invariant_legal_4__x, true, true, true, true) ->
  (e_priv(type_invariant_legal_4__x) = type_invariant_legal_4__x)))

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "type_invariant_legal_4.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall x:int. forall tmp:int. (dynamic_invariant1(x, true, false, true,
  true) -> (type_invariant(x) -> (dynamic_invariant(tmp, false, false, true,
  true) -> (type_invariant(x) -> (let o = pub(x) : int in
  ((pub__function_guard(o, x) and dynamic_invariant(o, true, false, true,
  true)) -> (type_invariant(x) -> (let o1 = priv(x) : int in
  ((priv__function_guard(o1, x) and dynamic_invariant(o1, true, false, true,
  true)) -> (type_invariant(x) -> (let o2 = e_pub(x) : int in
  ((e_pub__function_guard(o2, x) and (dynamic_invariant(o2, true, false,
  true, true) and (o2 = x))) -> type_invariant(x))))))))))))))
