(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic a1__first : integer

logic a1__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_property(first_int: int, last_int: int, x1: int) =
  ((first_int <= x1) and (x1 <= last_int))

function bool_eq2(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type tarray1D1__ref = { tarray1D1__content : integer
}

function tarray1D1__ref_tarray1D1__content__projection(a: tarray1D1__ref) : integer =
  (a).tarray1D1__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (dynamic_property(range_first, range_last, low) and
  dynamic_property(range_first, range_last, high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq3(x1: us_t, y: us_t) : bool = bool_eq1((x1).elts,
  to_rep(first((x1).rt)), to_rep(last((x1).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type tarray1B__ref = { tarray1B__content : us_t
}

function tarray1B__ref_tarray1B__content__projection(a: tarray1B__ref) : us_t =
  (a).tarray1B__content

type array1__ref = { array1__content : us_t
}

function array1__ref_array1__content__projection(a: array1__ref) : us_t =
  (a).array1__content

type map__ref1 = { map__content1 : (int,us_t) farray
}

logic slide1 : (int,us_t) farray, int, int -> (int,us_t) farray

axiom slide_eq1 :
  (forall a:(int,us_t) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,us_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_t) farray, a__first: int, a__last: int,
  b: (int,us_t) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq3((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_t) farray. forall b:(int,us_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_t) farray. forall b:(int,us_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_t) farray. forall b:(int,us_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_t) farray. forall b:(int,us_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq3((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic dummy3 : (int,us_t) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,us_t) farray, (int,us_t) farray -> bool

type tarray2D1

logic tarray2D1qtint : tarray2D1 -> int

axiom tarray2D1qtaxiom : (forall i:tarray2D1. (1 <= tarray2D1qtint(i)))

axiom tarray2D1qtaxiom1 : (forall i:tarray2D1. (tarray2D1qtint(i) <= 1))

predicate in_range1(x1: int) = ((1 <= x1) and (x1 <= 1))

function bool_eq5(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : tarray2D1, tarray2D1 -> bool

logic dummy4 : tarray2D1

type tarray2D1__ref = { tarray2D1__content : tarray2D1
}

function tarray2D1__ref_tarray2D1__content__projection(a: tarray2D1__ref) : tarray2D1 =
  (a).tarray2D1__content

predicate dynamic_invariant1(temp___expr_205: (int,us_t) farray,
  temp___is_init_201: bool, temp___skip_constant_202: bool,
  temp___do_toplevel_203: bool, temp___do_typ_inv_204: bool) =
  (forall temp___206:int. (((1 <= temp___206) and (temp___206 <= 1)) ->
  (dynamic_property1(1, x, first1((temp___expr_205[temp___206])),
  last1((temp___expr_205[temp___206]))) and
  ((first1((temp___expr_205[temp___206])) = 1) and
  (last1((temp___expr_205[temp___206])) = x)))))

predicate default_initial_assumption(temp___expr_208: (int,us_t) farray,
  temp___skip_top_level_209: bool) =
  (forall temp___210:int. (((1 <= temp___210) and (temp___210 <= 1)) ->
  ((first1((temp___expr_208[temp___210])) = 1) and
  (last1((temp___expr_208[temp___210])) = x))))

type t22b__ref = { t22b__content : us_t
}

function t22b__ref_t22b__content__projection(a: t22b__ref) : us_t =
  (a).t22b__content

logic component_size_attribute__p__a1__aggregate_def : int, int, int -> us_t

logic component_size_attribute__p__a2__aggregate_def : us_t -> (int,us_t) farray

predicate dynamic_invariant2(temp___expr_195: us_t, temp___is_init_191: bool,
  temp___skip_constant_192: bool, temp___do_toplevel_193: bool,
  temp___do_typ_inv_194: bool) = ((not (temp___skip_constant_192 = true)) ->
  (dynamic_property1(1, x, first1(temp___expr_195),
  last1(temp___expr_195)) and ((first1(temp___expr_195) = 1) and
  (last1(temp___expr_195) = x))))

predicate default_initial_assumption1(temp___expr_197: us_t,
  temp___skip_top_level_198: bool) = ((first1(temp___expr_197) = 1) and
  (last1(temp___expr_197) = x))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___241:int. forall temp___242:int. forall temp___243:int.
  (dynamic_invariant(temp___241, true, true, true, true) ->
  (dynamic_property1(1, x, temp___242, temp___243) ->
  (first1(component_size_attribute__p__a1__aggregate_def(temp___241,
  temp___242, temp___243)) = temp___242))))

axiom def_axiom1 :
  (forall temp___241:int. forall temp___242:int. forall temp___243:int.
  (dynamic_invariant(temp___241, true, true, true, true) ->
  (dynamic_property1(1, x, temp___242, temp___243) ->
  (last1(component_size_attribute__p__a1__aggregate_def(temp___241,
  temp___242, temp___243)) = temp___243))))

axiom def_axiom2 :
  (forall temp___241:int. forall temp___242:int. forall temp___243:int.
  (dynamic_invariant(temp___241, true, true, true, true) ->
  (forall temp___244:int.
  ((to_array(component_size_attribute__p__a1__aggregate_def(temp___241,
  temp___242, temp___243))[temp___244]) = rliteral))))

axiom def_axiom3 :
  (forall temp___249:us_t. (dynamic_invariant2(temp___249, true, true, true,
  true) ->
  (forall temp___250:int.
  ((component_size_attribute__p__a2__aggregate_def(temp___249)[temp___250]) = temp___249))))

 (* File "component_size_attribute.adb", line 13, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x, true, false, true, true) ->
  (let temp___245 = component_size_attribute__p__a1__aggregate_def(1, 1, x)
  : us_t in ((first1(temp___245) = 1) -> ((last1(temp___245) = x) ->
  ((if (first1(temp___245) <= last1(temp___245)) then ((1 <= x) and
  ((last1(temp___245) - first1(temp___245)) = (x - 1))) else (x <  1)) ->
  (let component_size_attribute__p__a1__assume =
  of_array(to_array(temp___245), first1(temp___245), last1(temp___245))
  : us_t in
  (forall a1:(int,integer) farray.
  ((a1 = to_array(component_size_attribute__p__a1__assume)) ->
  ((to_rep(a1__first) = first1(component_size_attribute__p__a1__assume)) ->
  ((to_rep(a1__last) = last1(component_size_attribute__p__a1__assume)) ->
  ((dynamic_property1(1, x, to_rep(a1__first), to_rep(a1__last)) and
  ((to_rep(a1__first) = 1) and (to_rep(a1__last) = x))) ->
  (forall o:int. ((to_rep(a1__last) = o) ->
  (forall o1:int. ((to_rep(a1__first) = o1) ->
  (forall a2:(int,us_t) farray.
  ((a2 = component_size_attribute__p__a2__aggregate_def(of_array(a1, o1,
  o))) -> (dynamic_invariant1(a2, true, false, true, true) ->
  ((0 <= component__size1) -> (component__size1 = 32))))))))))))))))))))
