(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__base__t__c : integer; rec__ext__ : us_private
}

function us_split_fields_rec__base__t__c__projection(a: us_split_fields) : integer =
  (a).rec__base__t__c

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__base__t__c) = to_rep(((b).us_split_fields1).rec__base__t__c)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic base__t__c__first__bit : int

logic base__t__c__last__bit : int

logic base__t__c__position : int

axiom base__t__c__first__bit_axiom : (0 <= base__t__c__first__bit)

axiom base__t__c__last__bit_axiom :
  (base__t__c__first__bit <  base__t__c__last__bit)

axiom base__t__c__position_axiom : (0 <= base__t__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

type us_split_fields2 = { rec__ext__u__d : integer; rec__base__t__c1 :
integer; rec__ext__1 : us_private
}

function us_split_fields_rec__ext__u__d__projection(a: us_split_fields2) : integer =
  (a).rec__ext__u__d

function us_split_fields_rec__base__t__c__2__projection(a: us_split_fields2) : integer =
  (a).rec__base__t__c1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__ext__u__d : us_private -> integer

axiom extract__ext__u__d__conv :
  (forall ext__u__d:integer.
  (forall rec__ext__2:us_private. (extract__ext__u__d(hide_ext__(ext__u__d,
  rec__ext__2)) = ext__u__d)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__base__t__c = ((a).us_split_fields3).rec__base__t__c1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ext__u__d,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__ext__u__d = extract__ext__u__d(((r).us_split_fields1).rec__ext__);
  rec__base__t__c1 = ((r).us_split_fields1).rec__base__t__c; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__ext__u__d) = to_rep(((b).us_split_fields3).rec__ext__u__d)) and
  (to_rep(((a).us_split_fields3).rec__base__t__c1) = to_rep(((b).us_split_fields3).rec__base__t__c1))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ext__u__d__first__bit : int

logic ext__u__d__last__bit : int

logic ext__u__d__position : int

axiom ext__u__d__first__bit_axiom : (0 <= ext__u__d__first__bit)

axiom ext__u__d__last__bit_axiom :
  (ext__u__d__first__bit <  ext__u__d__last__bit)

axiom ext__u__d__position_axiom : (0 <= ext__u__d__position)

logic base__t__c__first__bit1 : int

logic base__t__c__last__bit1 : int

logic base__t__c__position1 : int

axiom base__t__c__first__bit_axiom1 : (0 <= base__t__c__first__bit1)

axiom base__t__c__last__bit_axiom1 :
  (base__t__c__first__bit1 <  base__t__c__last__bit1)

axiom base__t__c__position_axiom1 : (0 <= base__t__c__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type u__ref = { u__content : us_rep1
}

function u__ref_u__content__projection(a: u__ref) : us_rep1 = (a).u__content

logic sum : us_rep -> int

logic sum__function_guard : int, us_rep -> prop

logic sum1 : int, us_rep -> int

logic sum__function_guard1 : int, int, us_rep -> prop

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic sum2 : us_rep1 -> int

logic sum__function_guard2 : int, us_rep1 -> prop

logic sum3 : int, us_rep1 -> int

logic sum__function_guard3 : int, int, us_rep1 -> prop

predicate default_initial_assumption(temp___expr_165: us_rep,
  temp___skip_top_level_166: bool) = ((temp___expr_165).attr__tag = us_tag)

axiom sum__post_axiom :
  (forall x:us_rep [sum(x)]. (let result = sum(x) : int in
  (sum__function_guard(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom sum__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall x:us_rep [sum1(attr__tag2, x)]. (let result = sum1(attr__tag2, x)
  : int in (sum__function_guard1(result, attr__tag2, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom ext__u__compat_axiom :
  (forall x:us_rep [sum1(us_tag1, x)]. (sum__function_guard1(sum1(us_tag1,
  x), us_tag1, x) ->
  (forall x1:us_rep. sum__function_guard2(sum2(of_base(x1)), of_base(x1)))))

axiom ext__u__compat_axiom1 :
  (forall x:us_rep [sum1(us_tag1, x)]. (sum__function_guard1(sum1(us_tag1,
  x), us_tag1, x) -> (sum2(of_base(x)) = sum1(us_tag1, x))))

axiom base__t__compat_axiom :
  (forall x:us_rep [sum1(us_tag, x)]. (sum__function_guard1(sum1(us_tag, x),
  us_tag, x) -> (forall x1:us_rep. sum__function_guard(sum(x1), x1))))

axiom base__t__compat_axiom1 :
  (forall x:us_rep [sum1(us_tag, x)]. (sum__function_guard1(sum1(us_tag, x),
  us_tag, x) -> (sum(x) = sum1(us_tag, x))))

axiom sum__def_axiom :
  (forall x:us_rep [sum(x)].
  (sum(x) = to_rep(((x).us_split_fields1).rec__base__t__c)))

logic create : int -> us_rep

logic create__function_guard : us_rep, int -> prop

logic create1 : int, int -> us_rep

logic create__function_guard1 : us_rep, int, int -> prop

logic create2 : int -> us_rep1

logic create__function_guard2 : us_rep1, int -> prop

logic create3 : int, int -> us_rep1

logic create__function_guard3 : us_rep1, int, int -> prop

predicate default_initial_assumption1(temp___expr_173: us_rep1,
  temp___skip_top_level_174: bool) = ((temp___expr_173).attr__tag1 = us_tag1)

axiom create__post_axiom :
  (forall c:int [create2(c)]. (dynamic_invariant(c, true, true, true,
  true) -> (let result = create2(c) : us_rep1 in
  (create__function_guard2(result, c) -> ((result).attr__tag1 = us_tag1)))))

axiom create__post__dispatch_axiom :
  (forall attr__tag2:int. forall c:int [create3(attr__tag2, c)].
  (dynamic_invariant(c, true, true, true, true) -> (let result =
  create3(attr__tag2, c) : us_rep1 in (create__function_guard3(result,
  attr__tag2, c) -> ((result).attr__tag1 = attr__tag2)))))

axiom ext__u__compat_axiom2 :
  (forall c:int [create3(us_tag1, c)].
  (create__function_guard3(create3(us_tag1, c), us_tag1, c) ->
  (forall c1:int. create__function_guard2(create2(c1), c1))))

axiom ext__u__compat_axiom3 :
  (forall c:int [create3(us_tag1, c)].
  (create__function_guard3(create3(us_tag1, c), us_tag1, c) ->
  (create2(c) = create3(us_tag1, c))))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom create__def_axiom :
  (forall c:int [create2(c)]. (dynamic_invariant(c, true, true, true,
  true) -> (forall c1:int. create__function_guard(create(c1), c1))))

axiom create__def_axiom1 :
  (forall c:int [create2(c)]. (dynamic_invariant(c, true, true, true,
  true) -> (create2(c) = { us_split_fields3 = { rec__ext__u__d = rliteral;
  rec__base__t__c1 = ((create(c)).us_split_fields1).rec__base__t__c;
  rec__ext__1 = us_null_ext__ }; attr__tag1 = us_tag1 })))

logic a : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic b : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom a__def_axiom : create__function_guard2(create2(1), 1)

axiom a__def_axiom1 : (a = create2(1))

axiom b__def_axiom : create__function_guard2(create2(2), 2)

axiom b__def_axiom1 : (b = create2(2))

axiom sum__post_axiom1 :
  (forall x:us_rep1 [sum2(x)]. (let result = sum2(x) : int in
  (sum__function_guard2(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom sum__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall x:us_rep1 [sum3(attr__tag2, x)]. (let result = sum3(attr__tag2, x)
  : int in (sum__function_guard3(result, attr__tag2, x) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom ext__u__compat_axiom4 :
  (forall x:us_rep1 [sum3(us_tag1, x)]. (sum__function_guard3(sum3(us_tag1,
  x), us_tag1, x) ->
  (forall x1:us_rep1. sum__function_guard2(sum2(x1), x1))))

axiom ext__u__compat_axiom5 :
  (forall x:us_rep1 [sum3(us_tag1, x)]. (sum__function_guard3(sum3(us_tag1,
  x), us_tag1, x) -> (sum2(x) = sum3(us_tag1, x))))

axiom sum__def_axiom1 :
  (forall x:us_rep1. sum__function_guard(sum(to_base(x)), to_base(x)))

axiom sum__def_axiom2 :
  (forall x:us_rep1 [sum2(x)].
  (sum2(x) = (sum(to_base(x)) + to_rep(((x).us_split_fields3).rec__ext__u__d))))

axiom create__post_axiom1 :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (forall result:us_rep. sum__function_guard(sum(result), result))))

axiom create__post_axiom2 :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (let result = create(c) : us_rep in (create__function_guard(result, c) ->
  (sum(result) = c)))))

axiom create__post_axiom3 :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (let result = create(c) : us_rep in (create__function_guard(result, c) ->
  ((result).attr__tag = us_tag)))))

axiom create__post__dispatch_axiom1 :
  (forall attr__tag2:int. forall c:int [create1(attr__tag2, c)].
  (dynamic_invariant(c, true, true, true, true) -> (let result =
  create1(attr__tag2, c) : us_rep in (create__function_guard1(result,
  attr__tag2, c) -> ((result).attr__tag = attr__tag2)))))

axiom ext__u__compat_axiom6 :
  (forall c:int [create1(us_tag1, c)].
  (create__function_guard1(create1(us_tag1, c), us_tag1, c) ->
  (forall c1:int. create__function_guard2(create2(c1), c1))))

axiom ext__u__compat_axiom7 :
  (forall c:int [create1(us_tag1, c)].
  (create__function_guard1(create1(us_tag1, c), us_tag1, c) ->
  (to_base(create2(c)) = create1(us_tag1, c))))

axiom base__t__compat_axiom2 :
  (forall c:int [create1(us_tag, c)].
  (create__function_guard1(create1(us_tag, c), us_tag, c) ->
  (forall c1:int. create__function_guard(create(c1), c1))))

axiom base__t__compat_axiom3 :
  (forall c:int [create1(us_tag, c)].
  (create__function_guard1(create1(us_tag, c), us_tag, c) ->
  (create(c) = create1(us_tag, c))))

axiom create__def_axiom2 :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (create(c) = { us_split_fields1 = { rec__base__t__c = of_rep(c);
  rec__ext__ = us_null_ext__ }; attr__tag = us_tag })))

 (* File "ext.ads", line 17, characters 0-0 *)
goal defqtvc : (let ext__test__a__assume = create2(1) : us_rep1 in
  (create__function_guard(create(1), 1) ->
  ((create__function_guard2(ext__test__a__assume, 1) and
  (ext__test__a__assume = { us_split_fields3 = { rec__ext__u__d = rliteral;
  rec__base__t__c1 = ((create(1)).us_split_fields1).rec__base__t__c;
  rec__ext__1 = us_null_ext__ }; attr__tag1 = us_tag1 })) -> (({
  us_split_fields3 = (ext__test__a__assume).us_split_fields3; attr__tag1 =
  us_tag1 } = a) -> (let ext__test__b__assume = create2(2) : us_rep1 in
  (create__function_guard(create(2), 2) ->
  ((create__function_guard2(ext__test__b__assume, 2) and
  (ext__test__b__assume = { us_split_fields3 = { rec__ext__u__d = rliteral;
  rec__base__t__c1 = ((create(2)).us_split_fields1).rec__base__t__c;
  rec__ext__1 = us_null_ext__ }; attr__tag1 = us_tag1 })) -> (({
  us_split_fields3 = (ext__test__b__assume).us_split_fields3; attr__tag1 =
  us_tag1 } = b) -> (sum__function_guard(sum(to_base(a)), to_base(a)) ->
  (sum__function_guard(sum(to_base(b)), to_base(b)) ->
  (sum(to_base(a)) = sum(to_base(b)))))))))))))
