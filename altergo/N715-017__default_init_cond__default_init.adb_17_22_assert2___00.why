(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type simple_priv__ref = { simple_priv__content : us_rep
}

function simple_priv__ref_simple_priv__content__projection(a: simple_priv__ref) : us_rep =
  (a).simple_priv__content

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq1 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type wrong_priv__ref = { wrong_priv__content : us_rep1
}

function wrong_priv__ref_wrong_priv__content__projection(a: wrong_priv__ref) : us_rep1 =
  (a).wrong_priv__content

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq2 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq2 : us_rep2, us_rep2 -> bool

logic dummy2 : us_rep2

type priv_with_glob__ref = { priv_with_glob__content : us_rep2
}

function priv_with_glob__ref_priv_with_glob__content__projection(a: priv_with_glob__ref) : us_rep2 =
  (a).priv_with_glob__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic simple_priv_ok : us_rep -> bool

logic simple_priv_ok__function_guard : bool, us_rep -> prop

logic wrong_priv_ok : us_rep1 -> bool

logic wrong_priv_ok__function_guard : bool, us_rep1 -> prop

logic priv_with_glob_ok : us_rep2, us_private -> bool

logic priv_with_glob_ok__function_guard : bool, us_rep2, us_private -> prop

axiom temp___result_278qtdef :
  (forall temp___277:us_rep.
  simple_priv_ok__function_guard(simple_priv_ok(temp___277), temp___277))

predicate default_initial_assumption(temp___expr_275: us_rep,
  temp___skip_top_level_276: bool) =
  ((not (temp___skip_top_level_276 = true)) ->
  (simple_priv_ok(temp___expr_275) = true))

axiom temp___result_287qtdef :
  (forall temp___286:us_rep1.
  wrong_priv_ok__function_guard(wrong_priv_ok(temp___286), temp___286))

predicate default_initial_assumption1(temp___expr_284: us_rep1,
  temp___skip_top_level_285: bool) =
  ((not (temp___skip_top_level_285 = true)) ->
  (wrong_priv_ok(temp___expr_284) = true))

axiom temp___result_296qtdef :
  (forall private_default__glob:us_private. forall temp___295:us_rep2.
  priv_with_glob_ok__function_guard(priv_with_glob_ok(temp___295,
  private_default__glob), temp___295, private_default__glob))

predicate default_initial_assumption2(temp___expr_293: us_rep2,
  temp___skip_top_level_294: bool, private_default__glob: us_private) =
  ((not (temp___skip_top_level_294 = true)) ->
  (priv_with_glob_ok(temp___expr_293, private_default__glob) = true))

 (* File "default_init.ads", line 34, characters 0-0 *)
goal defqtvc :
  (forall p1:us_rep. forall p2:us_rep1. forall p3:us_rep2.
  forall glob:us_private. (default_initial_assumption(p1, false) ->
  (default_initial_assumption1(p2, false) -> (default_initial_assumption2(p3,
  false, glob) ->
  ((forall p11:us_rep. simple_priv_ok__function_guard(simple_priv_ok(p11),
   p11)) ->
  ((simple_priv_ok(p1) = true) ->
  ((forall p21:us_rep1. wrong_priv_ok__function_guard(wrong_priv_ok(p21),
   p21)) ->
  ((wrong_priv_ok(p2) = true) ->
  ((forall p31:us_rep2. forall glob1:us_private.
   priv_with_glob_ok__function_guard(priv_with_glob_ok(p31, glob1), p31,
   glob1)) ->
  (priv_with_glob_ok(p3, glob) = true))))))))))
