(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type my_array__ref = { my_array__content : us_t
}

function my_array__ref_my_array__content__projection(a: my_array__ref) : us_t =
  (a).my_array__content

type constr_arr__ref = { constr_arr__content : us_t
}

function constr_arr__ref_constr_arr__content__projection(a: constr_arr__ref) : us_t =
  (a).constr_arr__content

type constr_arr_2__ref = { constr_arr_2__content : us_t
}

function constr_arr_2__ref_constr_arr_2__content__projection(a: constr_arr_2__ref) : us_t =
  (a).constr_arr_2__content

logic x__first : integer

logic x__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic y__first : integer

logic y__last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic u__first : integer

logic u__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_183: us_t, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((not (temp___skip_constant_180 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_183),
  last1(temp___expr_183))) and ((temp___do_toplevel_181 = true) ->
  ((temp___is_init_179 = true) -> ((first1(temp___expr_183) <= 1) and
  (3 <= last1(temp___expr_183))))))

predicate dynamic_predicate(temp___186: us_t) =
  ((first1(temp___186) <= 1) and (3 <= last1(temp___186)))

type t17b

logic t17bqtint : t17b -> int

axiom t17bqtaxiom : (forall i:t17b. (1 <= t17bqtint(i)))

axiom t17bqtaxiom1 : (forall i:t17b. (t17bqtint(i) <= 10))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : t17b, t17b -> bool

logic dummy3 : t17b

type t17b__ref = { t17b__content : t17b
}

function t17b__ref_t17b__content__projection(a: t17b__ref) : t17b =
  (a).t17b__content

predicate dynamic_predicate1(temp___269: (int,natural) farray) =
  ((1 <= 1) and (3 <= 10))

type t19b

logic t19bqtint : t19b -> int

axiom t19bqtaxiom : (forall i:t19b. (1 <= t19bqtint(i)))

axiom t19bqtaxiom1 : (forall i:t19b. (t19bqtint(i) <= 10))

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : t19b, t19b -> bool

logic dummy4 : t19b

type t19b__ref = { t19b__content : t19b
}

function t19b__ref_t19b__content__projection(a: t19b__ref) : t19b =
  (a).t19b__content

predicate dynamic_predicate2(temp___271: (int,natural) farray) =
  (((1 <= 1) and (3 <= 10)) and (not (to_rep((temp___271[3])) = 0)))

type t21b

logic t21bqtint : t21b -> int

axiom t21bqtaxiom : (forall i:t21b. (1 <= t21bqtint(i)))

axiom t21bqtaxiom1 : (forall i:t21b. (t21bqtint(i) <= 10))

predicate in_range5(x: int) = ((1 <= x) and (x <= 10))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : t21b, t21b -> bool

logic dummy5 : t21b

type t21b__ref = { t21b__content : t21b
}

function t21b__ref_t21b__content__projection(a: t21b__ref) : t21b =
  (a).t21b__content

predicate dynamic_predicate3(temp___274: (int,natural) farray) =
  (((1 <= 1) and (3 <= 10)) and (not (to_rep((temp___274[3])) = 0)))

predicate dynamic_invariant1(temp___expr_192: us_t, temp___is_init_188: bool,
  temp___skip_constant_189: bool, temp___do_toplevel_190: bool,
  temp___do_typ_inv_191: bool) = (((not (temp___skip_constant_189 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_192),
  last1(temp___expr_192))) and
  (if (temp___do_toplevel_190 = true) then ((temp___is_init_188 = true) ->
  (((first1(temp___expr_192) <= 1) and (3 <= last1(temp___expr_192))) and
  (not (to_rep((to_array(temp___expr_192)[3])) = 0)))) else ((temp___is_init_188 = true) ->
  ((first1(temp___expr_192) <= 1) and (3 <= last1(temp___expr_192))))))

predicate dynamic_predicate4(temp___197: us_t) =
  (((first1(temp___197) <= 1) and (3 <= last1(temp___197))) and
  (not (to_rep((to_array(temp___197)[3])) = 0)))

predicate dynamic_invariant2(temp___expr_204: us_t, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((not (temp___skip_constant_201 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_204),
  last1(temp___expr_204))) and
  (if (temp___do_toplevel_202 = true) then ((temp___is_init_200 = true) ->
  (((first1(temp___expr_204) <= 1) and (3 <= last1(temp___expr_204))) and
  (not (to_rep((to_array(temp___expr_204)[3])) = 0)))) else ((temp___is_init_200 = true) ->
  ((first1(temp___expr_204) <= 1) and (3 <= last1(temp___expr_204))))))

predicate dynamic_predicate5(temp___209: us_t) =
  (((first1(temp___209) <= 1) and (3 <= last1(temp___209))) and
  (not (to_rep((to_array(temp___209)[3])) = 0)))

logic formals_arr_split_pred__x__aggregate_def : int -> (int,natural) farray

logic formals_arr_split_pred__y__aggregate_def : int -> (int,natural) farray

logic formals_arr_split_pred__u__aggregate_def : int -> (int,natural) farray

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 1)

axiom def_axiom :
  (forall temp___278:int. (dynamic_invariant4(temp___278, true, true, true,
  true) ->
  (forall temp___279:int.
  ((formals_arr_split_pred__x__aggregate_def(temp___278)[temp___279]) = rliteral))))

axiom def_axiom1 :
  (forall temp___284:int. (dynamic_invariant4(temp___284, true, true, true,
  true) ->
  (forall temp___285:int.
  ((formals_arr_split_pred__y__aggregate_def(temp___284)[temp___285]) = rliteral))))

axiom def_axiom2 :
  (forall temp___293:int. (dynamic_invariant4(temp___293, true, true, true,
  true) ->
  (forall temp___294:int.
  ((formals_arr_split_pred__u__aggregate_def(temp___293)[temp___294]) = rliteral))))

 (* File "formals_arr_split_pred.adb", line 1, characters 0-0 *)
goal defqtvc :
  dynamic_predicate1(formals_arr_split_pred__x__aggregate_def(1))
