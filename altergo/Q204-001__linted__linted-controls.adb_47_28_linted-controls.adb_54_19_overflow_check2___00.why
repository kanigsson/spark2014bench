(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

type t1

logic tqtint1 : t1 -> int

axiom tqtaxiom2 : (forall i:t1. (0 <= tqtint1(i)))

axiom tqtaxiom3 : (forall i:t1. (tqtint1(i) <= 4294967295))

logic nth1 : t1, int -> bool

axiom nth_out_of_bound1 :
  (forall x:t1. forall n:int. (((n <  0) or (32 <= n)) -> (nth1(x,
  n) = false)))

logic zeros1 : t1

axiom Nth_zeros1 : (forall n:int. (nth1(zeros1, n) = false))

logic one1 : t1

logic ones1 : t1

axiom Nth_ones1 :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth1(ones1, n) = true)))

logic bw_and1 : t1, t1 -> t1

axiom Nth_bw_and1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_and1(v1, v2), n) = andb(nth1(v1, n), nth1(v2, n)))))

logic bw_or1 : t1, t1 -> t1

axiom Nth_bw_or1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_or1(v1, v2), n) = orb(nth1(v1, n), nth1(v2, n)))))

logic bw_xor1 : t1, t1 -> t1

axiom Nth_bw_xor1 :
  (forall v1:t1. forall v2:t1. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth1(bw_xor1(v1, v2), n) = xorb(nth1(v1, n), nth1(v2, n)))))

logic bw_not1 : t1 -> t1

axiom Nth_bw_not1 :
  (forall v:t1. forall n:int. (((0 <= n) and (n <  32)) -> (nth1(bw_not1(v),
  n) = notb(nth1(v, n)))))

logic lsr1 : t1, int -> t1

axiom Lsr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth1(lsr1(b, s), n) = nth1(b, (n + s)))))))

axiom Lsr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth1(lsr1(b, s), n) = false)))))

axiom lsr_zeros1 : (forall x:t1. (lsr1(x, 0) = x))

logic asr1 : t1, int -> t1

axiom Asr_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth1(asr1(b, s), n) = nth1(b,
  (n + s)))))))

axiom Asr_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth1(asr1(b, s), n) = nth1(b,
  (32 - 1)))))))

axiom asr_zeros1 : (forall x:t1. (asr1(x, 0) = x))

logic lsl1 : t1, int -> t1

axiom Lsl_nth_high1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth1(lsl1(b, s), n) = nth1(b, (n - s)))))

axiom Lsl_nth_low1 :
  (forall b:t1. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth1(lsl1(b, s), n) = false)))

axiom lsl_zeros1 : (forall x:t1. (lsl1(x, 0) = x))

logic rotate_right1 : t1, int -> t1

axiom Nth_rotate_right1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_right1(v, n), i) = nth1(v, ((i + n) % 32))))))

logic rotate_left1 : t1, int -> t1

axiom Nth_rotate_left1 :
  (forall v:t1. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth1(rotate_left1(v, n), i) = nth1(v, ((i - n) % 32))))))

logic is_signed_positive1 : t1 -> prop

logic of_int1 : int -> t1

function to_int1(x: t1) : int =
  (if is_signed_positive1(x) then tqtint1(x) else (-(4294967296 - tqtint1(x))))

axiom to_uint_extensionality1 :
  (forall v:t1. forall vqt:t1. ((tqtint1(v) = tqtint1(vqt)) -> (v = vqt)))

axiom to_int_extensionality1 :
  (forall v:t1. forall vqt:t1. ((to_int1(v) = to_int1(vqt)) -> (v = vqt)))

predicate uint_in_range1(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds2 : (forall v:t1. (0 <= tqtint1(v)))

axiom to_uint_bounds3 : (forall v:t1. (tqtint1(v) <  4294967296))

axiom to_uint_of_int1 :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint1(of_int1(i)) = i)))

logic size_bv1 : t1

axiom to_uint_size_bv1 : (tqtint1(size_bv1) = 32)

axiom to_uint_zeros1 : (tqtint1(zeros1) = 0)

axiom to_uint_one1 : (tqtint1(one1) = 1)

axiom to_uint_ones1 : (tqtint1(ones1) = 4294967295)

predicate ult1(x: t1, y: t1) = (tqtint1(x) <  tqtint1(y))

predicate ule1(x: t1, y: t1) = (tqtint1(x) <= tqtint1(y))

predicate ugt1(x: t1, y: t1) = (tqtint1(y) <  tqtint1(x))

predicate uge1(x: t1, y: t1) = (tqtint1(y) <= tqtint1(x))

predicate slt1(v1: t1, v2: t1) = (to_int1(v1) <  to_int1(v2))

predicate sle1(v1: t1, v2: t1) = (to_int1(v1) <= to_int1(v2))

predicate sgt1(v1: t1, v2: t1) = (to_int1(v2) <  to_int1(v1))

predicate sge1(v1: t1, v2: t1) = (to_int1(v2) <= to_int1(v1))

axiom positive_is_ge_zeros2 :
  (forall x:t1. (is_signed_positive1(x) -> sge1(x, zeros1)))

axiom positive_is_ge_zeros3 :
  (forall x:t1. (sge1(x, zeros1) -> is_signed_positive1(x)))

logic add1 : t1, t1 -> t1

axiom to_uint_add_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) + tqtint1(v2)) <  4294967296) -> (tqtint1(add1(v1,
  v2)) = (tqtint1(v1) + tqtint1(v2)))))

logic sub1 : t1, t1 -> t1

axiom to_uint_sub_bounded1 :
  (forall v1:t1. forall v2:t1. (((0 <= (tqtint1(v1) - tqtint1(v2))) and
  ((tqtint1(v1) - tqtint1(v2)) <  4294967296)) -> (tqtint1(sub1(v1,
  v2)) = (tqtint1(v1) - tqtint1(v2)))))

logic neg1 : t1 -> t1

axiom to_uint_neg1 :
  (forall v:t1. (tqtint1(neg1(v)) = ((-tqtint1(v)) % 4294967296)))

logic mul1 : t1, t1 -> t1

axiom to_uint_mul_bounded1 :
  (forall v1:t1. forall v2:t1.
  (((tqtint1(v1) * tqtint1(v2)) <  4294967296) -> (tqtint1(mul1(v1,
  v2)) = (tqtint1(v1) * tqtint1(v2)))))

logic udiv1 : t1, t1 -> t1

axiom to_uint_udiv1 :
  (forall v1:t1. forall v2:t1. (tqtint1(udiv1(v1,
  v2)) = (tqtint1(v1) / tqtint1(v2))))

logic urem1 : t1, t1 -> t1

axiom to_uint_urem1 :
  (forall v1:t1. forall v2:t1. (tqtint1(urem1(v1,
  v2)) = (tqtint1(v1) % tqtint1(v2))))

logic lsr_bv1 : t1, t1 -> t1

axiom lsr_bv_is_lsr1 :
  (forall x:t1. forall n:t1. (lsr_bv1(x, n) = lsr1(x, tqtint1(n))))

axiom to_uint_lsr1 :
  (forall v:t1. forall n:t1. (tqtint1(lsr_bv1(v,
  n)) = (tqtint1(v) / pow2(tqtint1(n)))))

logic asr_bv1 : t1, t1 -> t1

axiom asr_bv_is_asr1 :
  (forall x:t1. forall n:t1. (asr_bv1(x, n) = asr1(x, tqtint1(n))))

logic lsl_bv1 : t1, t1 -> t1

axiom lsl_bv_is_lsl1 :
  (forall x:t1. forall n:t1. (lsl_bv1(x, n) = lsl1(x, tqtint1(n))))

axiom to_uint_lsl1 :
  (forall v:t1. forall n:t1. (tqtint1(lsl_bv1(v,
  n)) = ((tqtint1(v) * pow2(tqtint1(n))) % 4294967296)))

logic rotate_right_bv1 : t1, t1 -> t1

logic rotate_left_bv1 : t1, t1 -> t1

axiom rotate_left_bv_is_rotate_left1 :
  (forall v:t1. forall n:t1. (rotate_left_bv1(v, n) = rotate_left1(v,
  tqtint1(n))))

axiom rotate_right_bv_is_rotate_right1 :
  (forall v:t1. forall n:t1. (rotate_right_bv1(v, n) = rotate_right1(v,
  tqtint1(n))))

logic nth_bv1 : t1, t1 -> bool

axiom Nth_bv_is_nth1 :
  (forall x:t1. forall i:t1. (nth1(x, tqtint1(i)) = nth_bv1(x, i)))

axiom Nth_bv_is_nth21 :
  (forall x:t1. forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (nth_bv1(x, of_int1(i)) = nth1(x, i))))

logic eq_sub_bv1 : t1, t1, t1, t1 -> prop

predicate eq_sub1(a: t1, b: t1, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth1(a, j) = nth1(b,
  j))))

axiom eq_sub_equiv2 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub1(a, b,
  tqtint1(i), tqtint1(n)) -> eq_sub_bv1(a, b, i, n)))

axiom eq_sub_equiv3 :
  (forall a:t1. forall b:t1. forall i:t1. forall n:t1. (eq_sub_bv1(a, b, i,
  n) -> eq_sub1(a, b, tqtint1(i), tqtint1(n))))

axiom Extensionality1 :
  (forall x:t1. forall y:t1 [eq_sub1(x, y, 0, 32)]. (eq_sub1(x, y, 0, 32) ->
  (x = y)))

type t__ref1 = { t__content1 : t1
}

function bool_eq1(x: t1, y: t1) : bool = (if (x = y) then true else false)

function bool_ne1(x: t1, y: t1) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t1, y: t1) : bool = (if ult1(x, y) then true else false)

function bool_le1(x: t1, y: t1) : bool = (if ule1(x, y) then true else false)

function bool_gt1(x: t1, y: t1) : bool = (if ugt1(x, y) then true else false)

function bool_ge1(x: t1, y: t1) : bool = (if uge1(x, y) then true else false)

logic power1 : t1, int -> t1

axiom Power_02 : (forall x:t1. (power1(x, 0) = one1))

axiom Power_12 : (forall x:t1. (power1(x, 1) = x))

axiom Power_s2 :
  (forall x:t1. forall n:int. ((0 <= n) -> (power1(x, (n + 1)) = mul1(x,
  power1(x, n)))))

axiom Power_s_alt1 :
  (forall x:t1. forall n:int. ((0 <  n) -> (power1(x, n) = mul1(x, power1(x,
  (n - 1))))))

axiom Power_sum2 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n + m)) = mul1(power1(x, n), power1(x, m))))))

axiom Power_mult1 :
  (forall x:t1. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power1(x, (n * m)) = power1(power1(x, n), m)))))

axiom Power_mult21 :
  (forall x:t1. forall y:t1. forall n:int. ((0 <= n) -> (power1(mul1(x, y),
  n) = mul1(power1(x, n), power1(y, n)))))

function bv_min1(x: t1, y: t1) : t1 = (if ule1(x, y) then x else y)

function bv_max1(x: t1, y: t1) : t1 = (if ule1(x, y) then y else x)

axiom bv_min_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_min1(x, y)) = min(tqtint1(x),
  tqtint1(y))))

axiom bv_max_to_uint1 :
  (forall x:t1. forall y:t1. (tqtint1(bv_max1(x, y)) = max(tqtint1(x),
  tqtint1(y))))

logic toBig : t -> t1

logic toSmall : t1 -> t

logic rliteral : t1

axiom rliteral_axiom : (tqtint1(rliteral) = 255)

axiom toSmall_to_uint :
  (forall x:t1. (ule1(x, rliteral) -> (tqtint1(x) = tqtint(toSmall(x)))))

axiom toBig_to_uint : (forall x:t. (tqtint(x) = tqtint1(toBig(x))))

type storage_element

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq2(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> t

logic user_eq : storage_element, storage_element -> bool

logic dummy : storage_element

type storage_element__ref = { storage_element__content : storage_element
}

function storage_element__ref_storage_element__content__projection(a: storage_element__ref) : storage_element =
  (a).storage_element__content

logic to_rep : storage_element -> t

logic of_rep : t -> storage_element

axiom inversion_axiom :
  (forall x:storage_element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom coerce_axiom :
  (forall x:t [to_rep(of_rep(x))]. (to_rep(of_rep(x)) = x))

function to_int2(x: storage_element) : int = tqtint(to_rep(x))

axiom range_int_axiom :
  (forall x:storage_element [to_int2(x)]. uint_in_range(to_int2(x)))

type map__ref = { map__content : (int,storage_element) farray
}

logic slide : (int,storage_element) farray, int,
  int -> (int,storage_element) farray

axiom slide_eq :
  (forall a:(int,storage_element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,storage_element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,storage_element) farray, a__first: int,
  a__last: int, b: (int,storage_element) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,storage_element) farray.
  forall b:(int,storage_element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic s : (int,storage_element) farray

logic attr__ATTRIBUTE_ADDRESS : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq4(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int3(b: bool) : int = (if (b = true) then 1 else 0)

function of_int2(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type int__

logic int__qtint : int__ -> int

axiom int__qtaxiom : (forall i:int__. ((- 2147483648) <= int__qtint(i)))

axiom int__qtaxiom1 : (forall i:int__. (int__qtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : int__, int__ -> bool

logic dummy1 : int__

type int____ref = { int____content : int__
}

function int____ref_int____content__projection(a: int____ref) : int__ =
  (a).int____content

function to_rep1(x: int__) : int = int__qtint(x)

logic of_rep1 : int -> int__

axiom inversion_axiom1 :
  (forall x:int__ [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom : (forall x:int__ [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__ada___linted__controls__packet__z_tilt : int__;
rec__ada___linted__controls__packet__x_tilt : int__;
rec__ada___linted__controls__packet__left : bool;
rec__ada___linted__controls__packet__right : bool;
rec__ada___linted__controls__packet__forward : bool;
rec__ada___linted__controls__packet__back : bool;
rec__ada___linted__controls__packet__jumping : bool
}

function us_split_fields_rec__ada___linted__controls__packet__z_tilt__projection(a: us_split_fields) : int__ =
  (a).rec__ada___linted__controls__packet__z_tilt

function us_split_fields_rec__ada___linted__controls__packet__x_tilt__projection(a: us_split_fields) : int__ =
  (a).rec__ada___linted__controls__packet__x_tilt

function us_split_fields_rec__ada___linted__controls__packet__left__projection(a: us_split_fields) : bool =
  (a).rec__ada___linted__controls__packet__left

function us_split_fields_rec__ada___linted__controls__packet__right__projection(a: us_split_fields) : bool =
  (a).rec__ada___linted__controls__packet__right

function us_split_fields_rec__ada___linted__controls__packet__forward__projection(a: us_split_fields) : bool =
  (a).rec__ada___linted__controls__packet__forward

function us_split_fields_rec__ada___linted__controls__packet__back__projection(a: us_split_fields) : bool =
  (a).rec__ada___linted__controls__packet__back

function us_split_fields_rec__ada___linted__controls__packet__jumping__projection(a: us_split_fields) : bool =
  (a).rec__ada___linted__controls__packet__jumping

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if (((to_rep1(((a).us_split_fields1).rec__ada___linted__controls__packet__z_tilt) = to_rep1(((b).us_split_fields1).rec__ada___linted__controls__packet__z_tilt)) and
  (to_rep1(((a).us_split_fields1).rec__ada___linted__controls__packet__x_tilt) = to_rep1(((b).us_split_fields1).rec__ada___linted__controls__packet__x_tilt))) and
  ((((to_int3(((a).us_split_fields1).rec__ada___linted__controls__packet__left) = to_int3(((b).us_split_fields1).rec__ada___linted__controls__packet__left)) and
  (to_int3(((a).us_split_fields1).rec__ada___linted__controls__packet__right) = to_int3(((b).us_split_fields1).rec__ada___linted__controls__packet__right))) and
  (to_int3(((a).us_split_fields1).rec__ada___linted__controls__packet__forward) = to_int3(((b).us_split_fields1).rec__ada___linted__controls__packet__forward))) and
  ((to_int3(((a).us_split_fields1).rec__ada___linted__controls__packet__back) = to_int3(((b).us_split_fields1).rec__ada___linted__controls__packet__back)) and
  (to_int3(((a).us_split_fields1).rec__ada___linted__controls__packet__jumping) = to_int3(((b).us_split_fields1).rec__ada___linted__controls__packet__jumping))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic ada___linted__controls__packet__z_tilt__first__bit : int

logic ada___linted__controls__packet__z_tilt__last__bit : int

logic ada___linted__controls__packet__z_tilt__position : int

axiom ada___linted__controls__packet__z_tilt__first__bit_axiom :
  (0 <= ada___linted__controls__packet__z_tilt__first__bit)

axiom ada___linted__controls__packet__z_tilt__last__bit_axiom :
  (ada___linted__controls__packet__z_tilt__first__bit <  ada___linted__controls__packet__z_tilt__last__bit)

axiom ada___linted__controls__packet__z_tilt__position_axiom :
  (0 <= ada___linted__controls__packet__z_tilt__position)

logic ada___linted__controls__packet__x_tilt__first__bit : int

logic ada___linted__controls__packet__x_tilt__last__bit : int

logic ada___linted__controls__packet__x_tilt__position : int

axiom ada___linted__controls__packet__x_tilt__first__bit_axiom :
  (0 <= ada___linted__controls__packet__x_tilt__first__bit)

axiom ada___linted__controls__packet__x_tilt__last__bit_axiom :
  (ada___linted__controls__packet__x_tilt__first__bit <  ada___linted__controls__packet__x_tilt__last__bit)

axiom ada___linted__controls__packet__x_tilt__position_axiom :
  (0 <= ada___linted__controls__packet__x_tilt__position)

logic ada___linted__controls__packet__left__first__bit : int

logic ada___linted__controls__packet__left__last__bit : int

logic ada___linted__controls__packet__left__position : int

axiom ada___linted__controls__packet__left__first__bit_axiom :
  (0 <= ada___linted__controls__packet__left__first__bit)

axiom ada___linted__controls__packet__left__last__bit_axiom :
  (ada___linted__controls__packet__left__first__bit <  ada___linted__controls__packet__left__last__bit)

axiom ada___linted__controls__packet__left__position_axiom :
  (0 <= ada___linted__controls__packet__left__position)

logic ada___linted__controls__packet__right__first__bit : int

logic ada___linted__controls__packet__right__last__bit : int

logic ada___linted__controls__packet__right__position : int

axiom ada___linted__controls__packet__right__first__bit_axiom :
  (0 <= ada___linted__controls__packet__right__first__bit)

axiom ada___linted__controls__packet__right__last__bit_axiom :
  (ada___linted__controls__packet__right__first__bit <  ada___linted__controls__packet__right__last__bit)

axiom ada___linted__controls__packet__right__position_axiom :
  (0 <= ada___linted__controls__packet__right__position)

logic ada___linted__controls__packet__forward__first__bit : int

logic ada___linted__controls__packet__forward__last__bit : int

logic ada___linted__controls__packet__forward__position : int

axiom ada___linted__controls__packet__forward__first__bit_axiom :
  (0 <= ada___linted__controls__packet__forward__first__bit)

axiom ada___linted__controls__packet__forward__last__bit_axiom :
  (ada___linted__controls__packet__forward__first__bit <  ada___linted__controls__packet__forward__last__bit)

axiom ada___linted__controls__packet__forward__position_axiom :
  (0 <= ada___linted__controls__packet__forward__position)

logic ada___linted__controls__packet__back__first__bit : int

logic ada___linted__controls__packet__back__last__bit : int

logic ada___linted__controls__packet__back__position : int

axiom ada___linted__controls__packet__back__first__bit_axiom :
  (0 <= ada___linted__controls__packet__back__first__bit)

axiom ada___linted__controls__packet__back__last__bit_axiom :
  (ada___linted__controls__packet__back__first__bit <  ada___linted__controls__packet__back__last__bit)

axiom ada___linted__controls__packet__back__position_axiom :
  (0 <= ada___linted__controls__packet__back__position)

logic ada___linted__controls__packet__jumping__first__bit : int

logic ada___linted__controls__packet__jumping__last__bit : int

logic ada___linted__controls__packet__jumping__position : int

axiom ada___linted__controls__packet__jumping__first__bit_axiom :
  (0 <= ada___linted__controls__packet__jumping__first__bit)

axiom ada___linted__controls__packet__jumping__last__bit_axiom :
  (ada___linted__controls__packet__jumping__first__bit <  ada___linted__controls__packet__jumping__last__bit)

axiom ada___linted__controls__packet__jumping__position_axiom :
  (0 <= ada___linted__controls__packet__jumping__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type packet__ref = { packet__content : us_rep
}

function packet__ref_packet__content__projection(a: packet__ref) : us_rep =
  (a).packet__content

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption(temp___expr_172: us_rep,
  temp___skip_top_level_173: bool) =
  (((to_rep1(((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__z_tilt) = 0) and
  (to_rep1(((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__x_tilt) = 0)) and
  ((((((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__left = of_int2(0)) and
  (((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__right = of_int2(0))) and
  (((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__forward = of_int2(0))) and
  ((((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__back = of_int2(0)) and
  (((temp___expr_172).us_split_fields1).rec__ada___linted__controls__packet__jumping = of_int2(0)))))

logic c11b : (int,storage_element) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c38b : (int,storage_element) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

type tintB

logic tintBqtint : tintB -> int

axiom tintBqtaxiom : (forall i:tintB. ((- 2147483648) <= tintBqtint(i)))

axiom tintBqtaxiom1 : (forall i:tintB. (tintBqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : tintB, tintB -> bool

logic dummy3 : tintB

type tintB__ref = { tintB__content : tintB
}

function tintB__ref_tintB__content__projection(a: tintB__ref) : tintB =
  (a).tintB__content

predicate dynamic_invariant(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_164))

type tstorageP1

logic tstorageP1qtint : tstorageP1 -> int

axiom tstorageP1qtaxiom : (forall i:tstorageP1. (1 <= tstorageP1qtint(i)))

axiom tstorageP1qtaxiom1 : (forall i:tstorageP1. (tstorageP1qtint(i) <= 9))

predicate in_range3(x: int) = ((1 <= x) and (x <= 9))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tstorageP1, tstorageP1 -> bool

logic dummy4 : tstorageP1

type tstorageP1__ref = { tstorageP1__content : tstorageP1
}

function tstorageP1__ref_tstorageP1__content__projection(a: tstorageP1__ref) : tstorageP1 =
  (a).tstorageP1__content

type nat

logic attr__ATTRIBUTE_MODULUS1 : t1

function bool_eq9(x: t1, y: t1) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t1

logic user_eq5 : nat, nat -> bool

logic dummy5 : nat

type nat__ref = { nat__content : nat
}

function nat__ref_nat__content__projection(a: nat__ref) : nat =
  (a).nat__content

logic rliteral1 : t1

axiom rliteral_axiom1 : (tqtint1(rliteral1) = 0)

logic rliteral2 : t1

axiom rliteral_axiom2 : (tqtint1(rliteral2) = 4294967295)

predicate dynamic_invariant1(temp___expr_209: t1, temp___is_init_205: bool,
  temp___skip_constant_206: bool, temp___do_toplevel_207: bool,
  temp___do_typ_inv_208: bool) = true

type ttupleP1

logic ttupleP1qtint : ttupleP1 -> int

axiom ttupleP1qtaxiom : (forall i:ttupleP1. (1 <= ttupleP1qtint(i)))

axiom ttupleP1qtaxiom1 : (forall i:ttupleP1. (ttupleP1qtint(i) <= 4))

predicate in_range4(x: int) = ((1 <= x) and (x <= 4))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : ttupleP1, ttupleP1 -> bool

logic dummy6 : ttupleP1

type ttupleP1__ref = { ttupleP1__content : ttupleP1
}

function ttupleP1__ref_ttupleP1__content__projection(a: ttupleP1__ref) : ttupleP1 =
  (a).ttupleP1__content

type t35b

logic t35bqtint : t35b -> int

axiom t35bqtaxiom : (forall i:t35b. (5 <= t35bqtint(i)))

axiom t35bqtaxiom1 : (forall i:t35b. (t35bqtint(i) <= 8))

predicate in_range5(x: int) = ((5 <= x) and (x <= 8))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : t35b, t35b -> bool

logic dummy7 : t35b

type t35b__ref = { t35b__content : t35b
}

function t35b__ref_t35b__content__projection(a: t35b__ref) : t35b =
  (a).t35b__content

type t48b

logic t48bqtint : t48b -> int

axiom t48bqtaxiom : (forall i:t48b. (5 <= t48bqtint(i)))

axiom t48bqtaxiom1 : (forall i:t48b. (t48bqtint(i) <= 8))

predicate in_range6(x: int) = ((5 <= x) and (x <= 8))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq8 : t48b, t48b -> bool

logic dummy8 : t48b

type t48b__ref = { t48b__content : t48b
}

function t48b__ref_t48b__content__projection(a: t48b__ref) : t48b =
  (a).t48b__content

type t52b

logic t52bqtint : t52b -> int

axiom t52bqtaxiom : (forall i:t52b. (5 <= t52bqtint(i)))

axiom t52bqtaxiom1 : (forall i:t52b. (t52bqtint(i) <= 8))

predicate in_range7(x: int) = ((5 <= x) and (x <= 8))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq9 : t52b, t52b -> bool

logic dummy9 : t52b

type t52b__ref = { t52b__content : t52b
}

function t52b__ref_t52b__content__projection(a: t52b__ref) : t52b =
  (a).t52b__content

type t56b

logic t56bqtint : t56b -> int

axiom t56bqtaxiom : (forall i:t56b. (5 <= t56bqtint(i)))

axiom t56bqtaxiom1 : (forall i:t56b. (t56bqtint(i) <= 8))

predicate in_range8(x: int) = ((5 <= x) and (x <= 8))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq10 : t56b, t56b -> bool

logic dummy10 : t56b

type t56b__ref = { t56b__content : t56b
}

function t56b__ref_t56b__content__projection(a: t56b__ref) : t56b =
  (a).t56b__content

type t60b

logic t60bqtint : t60b -> int

axiom t60bqtaxiom : (forall i:t60b. (5 <= t60bqtint(i)))

axiom t60bqtaxiom1 : (forall i:t60b. (t60bqtint(i) <= 8))

predicate in_range9(x: int) = ((5 <= x) and (x <= 8))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq11 : t60b, t60b -> bool

logic dummy11 : t60b

type t60b__ref = { t60b__content : t60b
}

function t60b__ref_t60b__content__projection(a: t60b__ref) : t60b =
  (a).t60b__content

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 0)

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 255)

predicate dynamic_invariant2(temp___expr_185: t, temp___is_init_181: bool,
  temp___skip_constant_182: bool, temp___do_toplevel_183: bool,
  temp___do_typ_inv_184: bool) = true

axiom c11b__def_axiom : (c11b = s)

axiom c38b__def_axiom : (c38b = slide(s, 5, 1))

logic rliteral5 : t1

axiom rliteral_axiom5 : (tqtint1(rliteral5) = 2147483647)

 (* File "linted-controls.ads", line 37, characters 0-0 *)
goal defqtvc :
  (forall x:t1. forall y:int. (((1 <= 4) -> (((1 <= 1) and (1 <= 9)) and
  ((1 <= 4) and (4 <= 9)))) -> ((s = c11b) -> (dynamic_invariant1(x, false,
  false, true, true) -> (dynamic_invariant(y, false, false, true, true) ->
  (((1 <= 4) -> (((1 <= 1) and (1 <= 9)) and ((1 <= 4) and (4 <= 9)))) ->
  (forall o:t. ((to_rep((s[1])) = o) -> (((1 <= 4) -> (((1 <= 1) and
  (1 <= 9)) and ((1 <= 4) and (4 <= 9)))) ->
  (forall o1:t. ((to_rep((s[2])) = o1) -> (((1 <= 4) -> (((1 <= 1) and
  (1 <= 9)) and ((1 <= 4) and (4 <= 9)))) ->
  (forall o2:t. ((to_rep((s[3])) = o2) -> (((1 <= 4) -> (((1 <= 1) and
  (1 <= 9)) and ((1 <= 4) and (4 <= 9)))) ->
  (forall o3:t. ((to_rep((s[4])) = o3) ->
  (forall x1:t1. ((x1 = bw_or1(bw_or1(bw_or1(toBig(o3), lsl_bv1(toBig(o2),
  of_int1(8))), lsl_bv1(toBig(o1), of_int1(16))), lsl_bv1(toBig(o),
  of_int1(24)))) ->
  (forall spark__branch:bool. ((spark__branch = (if ule1(x1,
  rliteral5) then true else false)) -> ((not (spark__branch = true)) ->
  (let o4 = tqtint1(bw_not1(x1)) : int in (in_range1(o4) ->
  in_range2(((-o4) - 1))))))))))))))))))))))))))
