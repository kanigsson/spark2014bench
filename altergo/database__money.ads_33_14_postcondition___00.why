(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type cur

predicate in_range1(x: int) = ((0 <= x) and (x <= 6))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : cur, cur -> bool

logic dummy : cur

type cur__ref = { cur__content : cur
}

function cur__ref_cur__content__projection(a: cur__ref) : cur =
  (a).cur__content

logic to_rep : cur -> int

logic of_rep : int -> cur

axiom inversion_axiom : (forall x:cur [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:cur [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type raw_amount

logic raw_amountqtint : raw_amount -> int

axiom raw_amountqtaxiom : (forall i:raw_amount. (0 <= raw_amountqtint(i)))

axiom raw_amountqtaxiom1 :
  (forall i:raw_amount. (raw_amountqtint(i) <= 1000000))

predicate in_range2(x: int) = ((0 <= x) and (x <= 1000000))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : raw_amount, raw_amount -> bool

logic dummy1 : raw_amount

type raw_amount__ref = { raw_amount__content : raw_amount
}

function raw_amount__ref_raw_amount__content__projection(a: raw_amount__ref) : raw_amount =
  (a).raw_amount__content

function to_rep1(x: raw_amount) : int = raw_amountqtint(x)

logic of_rep1 : int -> raw_amount

axiom inversion_axiom1 :
  (forall x:raw_amount [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:raw_amount [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__money__amount__currency : cur;
rec__money__amount__raw : raw_amount
}

function us_split_fields_rec__money__amount__currency__projection(a: us_split_fields) : cur =
  (a).rec__money__amount__currency

function us_split_fields_rec__money__amount__raw__projection(a: us_split_fields) : raw_amount =
  (a).rec__money__amount__raw

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__money__amount__currency) = to_rep(((b).us_split_fields1).rec__money__amount__currency)) and
  (to_rep1(((a).us_split_fields1).rec__money__amount__raw) = to_rep1(((b).us_split_fields1).rec__money__amount__raw))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic money__amount__currency__first__bit : int

logic money__amount__currency__last__bit : int

logic money__amount__currency__position : int

axiom money__amount__currency__first__bit_axiom :
  (0 <= money__amount__currency__first__bit)

axiom money__amount__currency__last__bit_axiom :
  (money__amount__currency__first__bit <  money__amount__currency__last__bit)

axiom money__amount__currency__position_axiom :
  (0 <= money__amount__currency__position)

logic money__amount__raw__first__bit : int

logic money__amount__raw__last__bit : int

logic money__amount__raw__position : int

axiom money__amount__raw__first__bit_axiom :
  (0 <= money__amount__raw__first__bit)

axiom money__amount__raw__last__bit_axiom :
  (money__amount__raw__first__bit <  money__amount__raw__last__bit)

axiom money__amount__raw__position_axiom :
  (0 <= money__amount__raw__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type amount__ref = { amount__content : us_rep
}

function amount__ref_amount__content__projection(a: amount__ref) : us_rep =
  (a).amount__content

logic a : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic b : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (0 <= 6)) -> in_range1(temp___expr_161))

predicate dynamic_invariant1(temp___expr_175: int, temp___is_init_171: bool,
  temp___skip_constant_172: bool, temp___do_toplevel_173: bool,
  temp___do_typ_inv_174: bool) = (((temp___is_init_171 = true) or
  (0 <= 1000000)) -> in_range2(temp___expr_175))

 (* File "money.ads", line 30, characters 0-0 *)
goal defqtvc :
  (((to_rep(((a).us_split_fields1).rec__money__amount__currency) = to_rep(((b).us_split_fields1).rec__money__amount__currency)) and
  ((to_rep1(((a).us_split_fields1).rec__money__amount__raw) + to_rep1(((b).us_split_fields1).rec__money__amount__raw)) <= 1000000)) ->
  (forall o:int.
  ((to_rep1(((b).us_split_fields1).rec__money__amount__raw) = o) ->
  (forall o1:int.
  ((to_rep1(((a).us_split_fields1).rec__money__amount__raw) = o1) ->
  (let o2 = (o1 + o) : int in (in_range2(o2) ->
  (forall o3:raw_amount. ((to_rep1(o3) = o2) ->
  (forall money__Oadd__result:us_split_fields. ((money__Oadd__result = {
  rec__money__amount__currency =
  ((a).us_split_fields1).rec__money__amount__currency;
  rec__money__amount__raw = o3 }) -> (bool_eq3({ us_split_fields1 =
  money__Oadd__result }, { us_split_fields1 = {
  rec__money__amount__currency =
  ((a).us_split_fields1).rec__money__amount__currency;
  rec__money__amount__raw =
  of_rep1((to_rep1(((a).us_split_fields1).rec__money__amount__raw) + to_rep1(((b).us_split_fields1).rec__money__amount__raw)))
  } }) = true))))))))))))
