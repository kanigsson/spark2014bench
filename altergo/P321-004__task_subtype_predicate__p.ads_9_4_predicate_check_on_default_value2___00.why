(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields = { rec__p__tt : us_main_type
}

function us_split_fields_rec__p__tt__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__tt

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

type tt__ref = { tt__content : us_rep
}

function tt__ref_tt__content__projection(a: tt__ref) : us_rep =
  (a).tt__content

type us_split_fields2 = { rec__p__tt1 : us_main_type
}

function us_split_fields_rec__p__tt__2__projection(a: us_split_fields2) : us_main_type =
  (a).rec__p__tt1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = { rec__p__tt =
  ((a).us_split_fields3).rec__p__tt1 } }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = { rec__p__tt1 =
  ((r).us_split_fields1).rec__p__tt } }

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq1 : us_rep1, us_rep1 -> bool

type s__ref = { s__content : us_rep1
}

function s__ref_s__content__projection(a: s__ref) : us_rep1 = (a).s__content

logic attr__ATTRIBUTE_ADDRESS : int

logic not_reall_true : unit -> bool

logic not_reall_true__function_guard : bool, unit -> prop

axiom temp___result_190qtdef :
  not_reall_true__function_guard(not_reall_true(void), void)

predicate dynamic_invariant(temp___expr_188: us_rep1,
  temp___is_init_184: bool, temp___skip_constant_185: bool,
  temp___do_toplevel_186: bool, temp___do_typ_inv_187: bool) =
  ((temp___do_toplevel_186 = true) -> (not_reall_true(void) = true))

axiom temp___result_195qtdef :
  not_reall_true__function_guard(not_reall_true(void), void)

predicate dynamic_predicate(temp___193: us_rep1) =
  (not_reall_true(void) = true)

axiom not_reall_true__def_axiom :
  (forall us_void_param:unit [not_reall_true(us_void_param)].
  (not (not_reall_true(us_void_param) = true)))

axiom not_reall_true__def_axiom1 : true

 (* File "p.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall usf:us_main_type. dynamic_predicate({ us_split_fields3 = {
  rec__p__tt1 = usf } }))
