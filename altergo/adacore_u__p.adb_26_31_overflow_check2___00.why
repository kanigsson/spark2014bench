(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic is_too_coarse : int -> bool

logic is_too_coarse__function_guard : bool, int -> prop

logic from : int

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic c3b : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic c6b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic c9b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic c10b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic c13b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic c14b : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

axiom c3b__def_axiom : (c3b = from)

axiom c6b__def_axiom : (c6b = from)

axiom c9b__def_axiom : (c9b = from)

 (* File "p.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall memory:(int,integer) farray. forall size:int. forall data1:int.
  forall data2:int. forall addr:int. (dynamic_invariant(size, false, false,
  true, true) -> (dynamic_invariant(data1, false, false, true, true) ->
  (dynamic_invariant(data2, false, false, true, true) ->
  (dynamic_invariant(addr, false, false, true, true) ->
  (dynamic_invariant(from, true, false, true, true) -> ((from = c3b) ->
  (dynamic_invariant(c3b, true, false, true, true) ->
  (forall o:int. ((to_rep((memory[c3b])) = o) -> (let o1 = (o + 0) : int in
  (in_range1(o1) ->
  (forall o2:int. ((to_rep((memory[o1])) = o2) ->
  (forall value:int. ((value = o2) -> (dynamic_invariant(value, true, false,
  true, true) ->
  (forall spark__branch:bool. forall value1:int. ((let o3 =
  is_too_coarse(value) : bool in (is_too_coarse__function_guard(o3,
  value) and ((spark__branch = o3) and
  (if (spark__branch = true) then dynamic_invariant(value1, true, true, true,
  true) else (value1 = value))))) ->
  (forall size1:int. ((size1 = value1) -> ((((1 <= size1) and
  (size1 <= 10)) and
  (to_rep((memory[from])) <  (2147483647 - (2 * size1)))) -> ((from = c6b) ->
  (dynamic_invariant(c6b, true, false, true, true) ->
  (forall o3:int. ((to_rep((memory[c6b])) = o3) -> (let o4 = (o3 + 1)
  : int in (in_range1(o4) ->
  (forall o5:int. ((to_rep((memory[o4])) = o5) ->
  (forall value2:int. ((value2 = o5) -> (dynamic_invariant(value2, true,
  false, true, true) ->
  (forall spark__branch1:bool. forall value3:int. ((let o6 =
  is_too_coarse(value2) : bool in (is_too_coarse__function_guard(o6,
  value2) and ((spark__branch1 = o6) and
  (if (spark__branch1 = true) then dynamic_invariant(value3, true, true,
  true, true) else (value3 = value2))))) -> ((from = c9b) ->
  (dynamic_invariant(c9b, true, false, true, true) -> (let o6 = (size1 + 1)
  : int in (in_range1(o6) -> ((o6 = c10b) -> (dynamic_invariant(c10b, true,
  false, true, true) ->
  (forall o7:int. ((to_rep((memory[c9b])) = o7) -> (let o8 = (o7 + c10b)
  : int in (in_range1(o8) ->
  (forall o9:int. ((to_rep((memory[o8])) = o9) ->
  (forall value4:int. ((value4 = o9) -> (dynamic_invariant(value4, true,
  false, true, true) ->
  (forall spark__branch2:bool. forall value5:int. ((let o10 =
  is_too_coarse(value4) : bool in (is_too_coarse__function_guard(o10,
  value4) and ((spark__branch2 = o10) and
  (if (spark__branch2 = true) then dynamic_invariant(value5, true, true,
  true, true) else (value5 = value4))))) ->
  (forall addr1:int. ((addr1 = value5) ->
  (((to_rep((memory[from])) + size1) <  to_rep((memory[addr1]))) ->
  ((addr1 = c13b) -> (dynamic_invariant(c13b, true, false, true, true) ->
  in_range1((-size1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
