(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__use_unchecked_union__small_record__field1 :
integer; rec__use_unchecked_union__small_record__field2 :
(int,integer) farray
}

function us_split_fields_rec__use_unchecked_union__small_record__field1__projection(a: us_split_fields) : integer =
  (a).rec__use_unchecked_union__small_record__field1

function us_split_fields_rec__use_unchecked_union__small_record__field2__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__use_unchecked_union__small_record__field2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__use_unchecked_union__small_record__field1) = to_rep(((b).us_split_fields1).rec__use_unchecked_union__small_record__field1)) and
  (bool_eq1(((a).us_split_fields1).rec__use_unchecked_union__small_record__field2,
  0, 2,
  ((b).us_split_fields1).rec__use_unchecked_union__small_record__field2, 0,
  2) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic use_unchecked_union__small_record__field1__first__bit : int

logic use_unchecked_union__small_record__field1__last__bit : int

logic use_unchecked_union__small_record__field1__position : int

axiom use_unchecked_union__small_record__field1__first__bit_axiom :
  (0 <= use_unchecked_union__small_record__field1__first__bit)

axiom use_unchecked_union__small_record__field1__last__bit_axiom :
  (use_unchecked_union__small_record__field1__first__bit <  use_unchecked_union__small_record__field1__last__bit)

axiom use_unchecked_union__small_record__field1__position_axiom :
  (0 <= use_unchecked_union__small_record__field1__position)

logic use_unchecked_union__small_record__field2__first__bit : int

logic use_unchecked_union__small_record__field2__last__bit : int

logic use_unchecked_union__small_record__field2__position : int

axiom use_unchecked_union__small_record__field2__first__bit_axiom :
  (0 <= use_unchecked_union__small_record__field2__first__bit)

axiom use_unchecked_union__small_record__field2__last__bit_axiom :
  (use_unchecked_union__small_record__field2__first__bit <  use_unchecked_union__small_record__field2__last__bit)

axiom use_unchecked_union__small_record__field2__position_axiom :
  (0 <= use_unchecked_union__small_record__field2__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type small_record__ref = { small_record__content : us_rep
}

function small_record__ref_small_record__content__projection(a: small_record__ref) : us_rep =
  (a).small_record__content

logic dummy3 : (int,integer) farray

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields2 = { rec__use_unchecked_union__big_record__field1 :
integer; rec__use_unchecked_union__big_record__field2 : (int,integer) farray
}

function us_split_fields_rec__use_unchecked_union__big_record__field1__projection(a: us_split_fields2) : integer =
  (a).rec__use_unchecked_union__big_record__field1

function us_split_fields_rec__use_unchecked_union__big_record__field2__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__use_unchecked_union__big_record__field2

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__use_unchecked_union__big_record__field1) = to_rep(((b).us_split_fields3).rec__use_unchecked_union__big_record__field1)) and
  (bool_eq1(((a).us_split_fields3).rec__use_unchecked_union__big_record__field2,
  0, 3, ((b).us_split_fields3).rec__use_unchecked_union__big_record__field2,
  0, 3) = true)) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic use_unchecked_union__big_record__field1__first__bit : int

logic use_unchecked_union__big_record__field1__last__bit : int

logic use_unchecked_union__big_record__field1__position : int

axiom use_unchecked_union__big_record__field1__first__bit_axiom :
  (0 <= use_unchecked_union__big_record__field1__first__bit)

axiom use_unchecked_union__big_record__field1__last__bit_axiom :
  (use_unchecked_union__big_record__field1__first__bit <  use_unchecked_union__big_record__field1__last__bit)

axiom use_unchecked_union__big_record__field1__position_axiom :
  (0 <= use_unchecked_union__big_record__field1__position)

logic use_unchecked_union__big_record__field2__first__bit : int

logic use_unchecked_union__big_record__field2__last__bit : int

logic use_unchecked_union__big_record__field2__position : int

axiom use_unchecked_union__big_record__field2__first__bit_axiom :
  (0 <= use_unchecked_union__big_record__field2__first__bit)

axiom use_unchecked_union__big_record__field2__last__bit_axiom :
  (use_unchecked_union__big_record__field2__first__bit <  use_unchecked_union__big_record__field2__last__bit)

axiom use_unchecked_union__big_record__field2__position_axiom :
  (0 <= use_unchecked_union__big_record__field2__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type big_record__ref = { big_record__content : us_rep1
}

function big_record__ref_big_record__content__projection(a: big_record__ref) : us_rep1 =
  (a).big_record__content

type us_split_discrs = { rec__use_unchecked_union__myunion__discr : integer
}

function us_split_discrs_rec__use_unchecked_union__myunion__discr__projection(a: us_split_discrs) : integer =
  (a).rec__use_unchecked_union__myunion__discr

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields4 = { rec__use_unchecked_union__myunion__record1 :
us_rep; rec__use_unchecked_union__myunion__record2 : us_rep1
}

function us_split_fields_rec__use_unchecked_union__myunion__record1__projection(a: us_split_fields4) : us_rep =
  (a).rec__use_unchecked_union__myunion__record1

function us_split_fields_rec__use_unchecked_union__myunion__record2__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__use_unchecked_union__myunion__record2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs1 : us_split_discrs; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__projection(a: us_rep2) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

predicate use_unchecked_union__myunion__record1__pred(a: us_rep2) =
  (to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = 0)

predicate use_unchecked_union__myunion__record2__pred(a: us_rep2) =
  (not (to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = 0))

function bool_eq4(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = to_rep(((b).us_split_discrs1).rec__use_unchecked_union__myunion__discr)) and
  ((use_unchecked_union__myunion__record1__pred(a) ->
  (bool_eq2(((a).us_split_fields5).rec__use_unchecked_union__myunion__record1,
  ((b).us_split_fields5).rec__use_unchecked_union__myunion__record1) = true)) and
  (use_unchecked_union__myunion__record2__pred(a) ->
  (bool_eq3(((a).us_split_fields5).rec__use_unchecked_union__myunion__record2,
  ((b).us_split_fields5).rec__use_unchecked_union__myunion__record2) = true)))) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic use_unchecked_union__myunion__discr__first__bit : int

logic use_unchecked_union__myunion__discr__last__bit : int

logic use_unchecked_union__myunion__discr__position : int

axiom use_unchecked_union__myunion__discr__first__bit_axiom :
  (0 <= use_unchecked_union__myunion__discr__first__bit)

axiom use_unchecked_union__myunion__discr__last__bit_axiom :
  (use_unchecked_union__myunion__discr__first__bit <  use_unchecked_union__myunion__discr__last__bit)

axiom use_unchecked_union__myunion__discr__position_axiom :
  (0 <= use_unchecked_union__myunion__discr__position)

logic use_unchecked_union__myunion__record1__first__bit : int

logic use_unchecked_union__myunion__record1__last__bit : int

logic use_unchecked_union__myunion__record1__position : int

axiom use_unchecked_union__myunion__record1__first__bit_axiom :
  (0 <= use_unchecked_union__myunion__record1__first__bit)

axiom use_unchecked_union__myunion__record1__last__bit_axiom :
  (use_unchecked_union__myunion__record1__first__bit <  use_unchecked_union__myunion__record1__last__bit)

axiom use_unchecked_union__myunion__record1__position_axiom :
  (0 <= use_unchecked_union__myunion__record1__position)

logic use_unchecked_union__myunion__record2__first__bit : int

logic use_unchecked_union__myunion__record2__last__bit : int

logic use_unchecked_union__myunion__record2__position : int

axiom use_unchecked_union__myunion__record2__first__bit_axiom :
  (0 <= use_unchecked_union__myunion__record2__first__bit)

axiom use_unchecked_union__myunion__record2__last__bit_axiom :
  (use_unchecked_union__myunion__record2__first__bit <  use_unchecked_union__myunion__record2__last__bit)

axiom use_unchecked_union__myunion__record2__position_axiom :
  (0 <= use_unchecked_union__myunion__record2__position)

logic user_eq5 : us_rep2, us_rep2 -> bool

logic dummy5 : us_rep2

type myunion__ref = { myunion__content : us_rep2
}

function myunion__ref_myunion__content__projection(a: myunion__ref) : us_rep2 =
  (a).myunion__content

logic output__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic temp_____aggregate_def_183 : int, int, int -> (int,integer) farray

logic temp_____aggregate_def_197 : int, int, int, int -> (int,integer) farray

predicate default_initial_assumption(temp___expr_212: us_rep2,
  temp___skip_top_level_213: bool) =
  ((to_rep(((temp___expr_212).us_split_discrs1).rec__use_unchecked_union__myunion__discr) = 0) and
  ((use_unchecked_union__myunion__record1__pred(temp___expr_212) ->
  ((to_rep(((((temp___expr_212).us_split_fields5).rec__use_unchecked_union__myunion__record1).us_split_fields1).rec__use_unchecked_union__small_record__field1) = 0) and
  (((((temp___expr_212).us_split_fields5).rec__use_unchecked_union__myunion__record1).us_split_fields1).rec__use_unchecked_union__small_record__field2 = temp_____aggregate_def_183(0,
  0, 0)))) and
  (use_unchecked_union__myunion__record2__pred(temp___expr_212) ->
  ((to_rep(((((temp___expr_212).us_split_fields5).rec__use_unchecked_union__myunion__record2).us_split_fields3).rec__use_unchecked_union__big_record__field1) = 0) and
  (((((temp___expr_212).us_split_fields5).rec__use_unchecked_union__myunion__record2).us_split_fields3).rec__use_unchecked_union__big_record__field2 = temp_____aggregate_def_197(0,
  0, 0, 0))))))

logic num : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate in_range1(rec__use_unchecked_union__myunion__discr1: int,
  a: us_rep2) =
  (rec__use_unchecked_union__myunion__discr1 = to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic use_unchecked_union__myunion__discr__first__bit1 : int

logic use_unchecked_union__myunion__discr__last__bit1 : int

logic use_unchecked_union__myunion__discr__position1 : int

axiom use_unchecked_union__myunion__discr__first__bit_axiom1 :
  (0 <= use_unchecked_union__myunion__discr__first__bit1)

axiom use_unchecked_union__myunion__discr__last__bit_axiom1 :
  (use_unchecked_union__myunion__discr__first__bit1 <  use_unchecked_union__myunion__discr__last__bit1)

axiom use_unchecked_union__myunion__discr__position_axiom1 :
  (0 <= use_unchecked_union__myunion__discr__position1)

logic use_unchecked_union__myunion__record2__first__bit1 : int

logic use_unchecked_union__myunion__record2__last__bit1 : int

logic use_unchecked_union__myunion__record2__position1 : int

axiom use_unchecked_union__myunion__record2__first__bit_axiom1 :
  (0 <= use_unchecked_union__myunion__record2__first__bit1)

axiom use_unchecked_union__myunion__record2__last__bit_axiom1 :
  (use_unchecked_union__myunion__record2__first__bit1 <  use_unchecked_union__myunion__record2__last__bit1)

axiom use_unchecked_union__myunion__record2__position_axiom1 :
  (0 <= use_unchecked_union__myunion__record2__position1)

logic use_unchecked_union__myunion__record1__first__bit1 : int

logic use_unchecked_union__myunion__record1__last__bit1 : int

logic use_unchecked_union__myunion__record1__position1 : int

axiom use_unchecked_union__myunion__record1__first__bit_axiom1 :
  (0 <= use_unchecked_union__myunion__record1__first__bit1)

axiom use_unchecked_union__myunion__record1__last__bit_axiom1 :
  (use_unchecked_union__myunion__record1__first__bit1 <  use_unchecked_union__myunion__record1__last__bit1)

axiom use_unchecked_union__myunion__record1__position_axiom1 :
  (0 <= use_unchecked_union__myunion__record1__position1)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type t1b__ref = { t1b__content : us_rep2
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep2 =
  (a).t1b__content

predicate in_range2(rec__use_unchecked_union__myunion__discr1: int,
  a: us_rep2) =
  (rec__use_unchecked_union__myunion__discr1 = to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr))

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic use_unchecked_union__myunion__discr__first__bit2 : int

logic use_unchecked_union__myunion__discr__last__bit2 : int

logic use_unchecked_union__myunion__discr__position2 : int

axiom use_unchecked_union__myunion__discr__first__bit_axiom2 :
  (0 <= use_unchecked_union__myunion__discr__first__bit2)

axiom use_unchecked_union__myunion__discr__last__bit_axiom2 :
  (use_unchecked_union__myunion__discr__first__bit2 <  use_unchecked_union__myunion__discr__last__bit2)

axiom use_unchecked_union__myunion__discr__position_axiom2 :
  (0 <= use_unchecked_union__myunion__discr__position2)

logic use_unchecked_union__myunion__record1__first__bit2 : int

logic use_unchecked_union__myunion__record1__last__bit2 : int

logic use_unchecked_union__myunion__record1__position2 : int

axiom use_unchecked_union__myunion__record1__first__bit_axiom2 :
  (0 <= use_unchecked_union__myunion__record1__first__bit2)

axiom use_unchecked_union__myunion__record1__last__bit_axiom2 :
  (use_unchecked_union__myunion__record1__first__bit2 <  use_unchecked_union__myunion__record1__last__bit2)

axiom use_unchecked_union__myunion__record1__position_axiom2 :
  (0 <= use_unchecked_union__myunion__record1__position2)

logic use_unchecked_union__myunion__record2__first__bit2 : int

logic use_unchecked_union__myunion__record2__last__bit2 : int

logic use_unchecked_union__myunion__record2__position2 : int

axiom use_unchecked_union__myunion__record2__first__bit_axiom2 :
  (0 <= use_unchecked_union__myunion__record2__first__bit2)

axiom use_unchecked_union__myunion__record2__last__bit_axiom2 :
  (use_unchecked_union__myunion__record2__first__bit2 <  use_unchecked_union__myunion__record2__last__bit2)

axiom use_unchecked_union__myunion__record2__position_axiom2 :
  (0 <= use_unchecked_union__myunion__record2__position2)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type t4b__ref = { t4b__content : us_rep2
}

function t4b__ref_t4b__content__projection(a: t4b__ref) : us_rep2 =
  (a).t4b__content

predicate in_range3(rec__use_unchecked_union__myunion__discr1: int,
  a: us_rep2) =
  (rec__use_unchecked_union__myunion__discr1 = to_rep(((a).us_split_discrs1).rec__use_unchecked_union__myunion__discr))

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic use_unchecked_union__myunion__discr__first__bit3 : int

logic use_unchecked_union__myunion__discr__last__bit3 : int

logic use_unchecked_union__myunion__discr__position3 : int

axiom use_unchecked_union__myunion__discr__first__bit_axiom3 :
  (0 <= use_unchecked_union__myunion__discr__first__bit3)

axiom use_unchecked_union__myunion__discr__last__bit_axiom3 :
  (use_unchecked_union__myunion__discr__first__bit3 <  use_unchecked_union__myunion__discr__last__bit3)

axiom use_unchecked_union__myunion__discr__position_axiom3 :
  (0 <= use_unchecked_union__myunion__discr__position3)

logic use_unchecked_union__myunion__record1__first__bit3 : int

logic use_unchecked_union__myunion__record1__last__bit3 : int

logic use_unchecked_union__myunion__record1__position3 : int

axiom use_unchecked_union__myunion__record1__first__bit_axiom3 :
  (0 <= use_unchecked_union__myunion__record1__first__bit3)

axiom use_unchecked_union__myunion__record1__last__bit_axiom3 :
  (use_unchecked_union__myunion__record1__first__bit3 <  use_unchecked_union__myunion__record1__last__bit3)

axiom use_unchecked_union__myunion__record1__position_axiom3 :
  (0 <= use_unchecked_union__myunion__record1__position3)

logic use_unchecked_union__myunion__record2__first__bit3 : int

logic use_unchecked_union__myunion__record2__last__bit3 : int

logic use_unchecked_union__myunion__record2__position3 : int

axiom use_unchecked_union__myunion__record2__first__bit_axiom3 :
  (0 <= use_unchecked_union__myunion__record2__first__bit3)

axiom use_unchecked_union__myunion__record2__last__bit_axiom3 :
  (use_unchecked_union__myunion__record2__first__bit3 <  use_unchecked_union__myunion__record2__last__bit3)

axiom use_unchecked_union__myunion__record2__position_axiom3 :
  (0 <= use_unchecked_union__myunion__record2__position3)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type t7b__ref = { t7b__content : us_rep2
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_rep2 =
  (a).t7b__content

logic temp_____aggregate_def_227 : int, int, int -> (int,integer) farray

logic temp_____aggregate_def_236 : int, int, int, int -> (int,integer) farray

logic temp_____aggregate_def_246 : int, int, int, int -> (int,integer) farray

predicate default_initial_assumption1(temp___expr_181: us_rep,
  temp___skip_top_level_182: bool) =
  ((to_rep(((temp___expr_181).us_split_fields1).rec__use_unchecked_union__small_record__field1) = 0) and
  (((temp___expr_181).us_split_fields1).rec__use_unchecked_union__small_record__field2 = temp_____aggregate_def_183(0,
  0, 0)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  (((dynamic_invariant(temp___185, true, true, true, true) and
  dynamic_invariant(temp___186, true, true, true, true)) and
  dynamic_invariant(temp___187, true, true, true, true)) ->
  ((temp_____aggregate_def_183(temp___185, temp___186,
  temp___187)[0]) = rliteral)))

axiom def_axiom1 :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  (((dynamic_invariant(temp___185, true, true, true, true) and
  dynamic_invariant(temp___186, true, true, true, true)) and
  dynamic_invariant(temp___187, true, true, true, true)) ->
  ((temp_____aggregate_def_183(temp___185, temp___186,
  temp___187)[1]) = rliteral)))

axiom def_axiom2 :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  (((dynamic_invariant(temp___185, true, true, true, true) and
  dynamic_invariant(temp___186, true, true, true, true)) and
  dynamic_invariant(temp___187, true, true, true, true)) ->
  ((temp_____aggregate_def_183(temp___185, temp___186,
  temp___187)[2]) = rliteral)))

predicate default_initial_assumption2(temp___expr_195: us_rep1,
  temp___skip_top_level_196: bool) =
  ((to_rep(((temp___expr_195).us_split_fields3).rec__use_unchecked_union__big_record__field1) = 0) and
  (((temp___expr_195).us_split_fields3).rec__use_unchecked_union__big_record__field2 = temp_____aggregate_def_197(0,
  0, 0, 0)))

axiom def_axiom3 :
  (forall temp___199:int. forall temp___200:int. forall temp___201:int.
  forall temp___202:int. (((dynamic_invariant(temp___199, true, true, true,
  true) and dynamic_invariant(temp___200, true, true, true, true)) and
  (dynamic_invariant(temp___201, true, true, true, true) and
  dynamic_invariant(temp___202, true, true, true, true))) ->
  ((temp_____aggregate_def_197(temp___199, temp___200, temp___201,
  temp___202)[0]) = rliteral)))

axiom def_axiom4 :
  (forall temp___199:int. forall temp___200:int. forall temp___201:int.
  forall temp___202:int. (((dynamic_invariant(temp___199, true, true, true,
  true) and dynamic_invariant(temp___200, true, true, true, true)) and
  (dynamic_invariant(temp___201, true, true, true, true) and
  dynamic_invariant(temp___202, true, true, true, true))) ->
  ((temp_____aggregate_def_197(temp___199, temp___200, temp___201,
  temp___202)[1]) = rliteral)))

axiom def_axiom5 :
  (forall temp___199:int. forall temp___200:int. forall temp___201:int.
  forall temp___202:int. (((dynamic_invariant(temp___199, true, true, true,
  true) and dynamic_invariant(temp___200, true, true, true, true)) and
  (dynamic_invariant(temp___201, true, true, true, true) and
  dynamic_invariant(temp___202, true, true, true, true))) ->
  ((temp_____aggregate_def_197(temp___199, temp___200, temp___201,
  temp___202)[2]) = rliteral)))

axiom def_axiom6 :
  (forall temp___199:int. forall temp___200:int. forall temp___201:int.
  forall temp___202:int. (((dynamic_invariant(temp___199, true, true, true,
  true) and dynamic_invariant(temp___200, true, true, true, true)) and
  (dynamic_invariant(temp___201, true, true, true, true) and
  dynamic_invariant(temp___202, true, true, true, true))) ->
  ((temp_____aggregate_def_197(temp___199, temp___200, temp___201,
  temp___202)[3]) = rliteral)))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

logic rliteral2 : integer

axiom rliteral_axiom2 : (integerqtint(rliteral2) = 2)

logic rliteral3 : integer

axiom rliteral_axiom3 : (integerqtint(rliteral3) = 3)

axiom def_axiom7 :
  (forall temp___229:int. forall temp___230:int. forall temp___231:int.
  (((dynamic_invariant(temp___229, true, true, true, true) and
  dynamic_invariant(temp___230, true, true, true, true)) and
  dynamic_invariant(temp___231, true, true, true, true)) ->
  ((temp_____aggregate_def_227(temp___229, temp___230,
  temp___231)[0]) = rliteral1)))

axiom def_axiom8 :
  (forall temp___229:int. forall temp___230:int. forall temp___231:int.
  (((dynamic_invariant(temp___229, true, true, true, true) and
  dynamic_invariant(temp___230, true, true, true, true)) and
  dynamic_invariant(temp___231, true, true, true, true)) ->
  ((temp_____aggregate_def_227(temp___229, temp___230,
  temp___231)[1]) = rliteral2)))

axiom def_axiom9 :
  (forall temp___229:int. forall temp___230:int. forall temp___231:int.
  (((dynamic_invariant(temp___229, true, true, true, true) and
  dynamic_invariant(temp___230, true, true, true, true)) and
  dynamic_invariant(temp___231, true, true, true, true)) ->
  ((temp_____aggregate_def_227(temp___229, temp___230,
  temp___231)[2]) = rliteral3)))

logic rliteral4 : integer

axiom rliteral_axiom4 : (integerqtint(rliteral4) = 4)

axiom def_axiom10 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  forall temp___241:int. (((dynamic_invariant(temp___238, true, true, true,
  true) and dynamic_invariant(temp___239, true, true, true, true)) and
  (dynamic_invariant(temp___240, true, true, true, true) and
  dynamic_invariant(temp___241, true, true, true, true))) ->
  ((temp_____aggregate_def_236(temp___238, temp___239, temp___240,
  temp___241)[0]) = rliteral1)))

axiom def_axiom11 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  forall temp___241:int. (((dynamic_invariant(temp___238, true, true, true,
  true) and dynamic_invariant(temp___239, true, true, true, true)) and
  (dynamic_invariant(temp___240, true, true, true, true) and
  dynamic_invariant(temp___241, true, true, true, true))) ->
  ((temp_____aggregate_def_236(temp___238, temp___239, temp___240,
  temp___241)[1]) = rliteral2)))

axiom def_axiom12 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  forall temp___241:int. (((dynamic_invariant(temp___238, true, true, true,
  true) and dynamic_invariant(temp___239, true, true, true, true)) and
  (dynamic_invariant(temp___240, true, true, true, true) and
  dynamic_invariant(temp___241, true, true, true, true))) ->
  ((temp_____aggregate_def_236(temp___238, temp___239, temp___240,
  temp___241)[2]) = rliteral3)))

axiom def_axiom13 :
  (forall temp___238:int. forall temp___239:int. forall temp___240:int.
  forall temp___241:int. (((dynamic_invariant(temp___238, true, true, true,
  true) and dynamic_invariant(temp___239, true, true, true, true)) and
  (dynamic_invariant(temp___240, true, true, true, true) and
  dynamic_invariant(temp___241, true, true, true, true))) ->
  ((temp_____aggregate_def_236(temp___238, temp___239, temp___240,
  temp___241)[3]) = rliteral4)))

axiom def_axiom14 :
  (forall temp___248:int. forall temp___249:int. forall temp___250:int.
  forall temp___251:int. (((dynamic_invariant(temp___248, true, true, true,
  true) and dynamic_invariant(temp___249, true, true, true, true)) and
  (dynamic_invariant(temp___250, true, true, true, true) and
  dynamic_invariant(temp___251, true, true, true, true))) ->
  ((temp_____aggregate_def_246(temp___248, temp___249, temp___250,
  temp___251)[0]) = rliteral)))

axiom def_axiom15 :
  (forall temp___248:int. forall temp___249:int. forall temp___250:int.
  forall temp___251:int. (((dynamic_invariant(temp___248, true, true, true,
  true) and dynamic_invariant(temp___249, true, true, true, true)) and
  (dynamic_invariant(temp___250, true, true, true, true) and
  dynamic_invariant(temp___251, true, true, true, true))) ->
  ((temp_____aggregate_def_246(temp___248, temp___249, temp___250,
  temp___251)[1]) = rliteral)))

axiom def_axiom16 :
  (forall temp___248:int. forall temp___249:int. forall temp___250:int.
  forall temp___251:int. (((dynamic_invariant(temp___248, true, true, true,
  true) and dynamic_invariant(temp___249, true, true, true, true)) and
  (dynamic_invariant(temp___250, true, true, true, true) and
  dynamic_invariant(temp___251, true, true, true, true))) ->
  ((temp_____aggregate_def_246(temp___248, temp___249, temp___250,
  temp___251)[2]) = rliteral)))

axiom def_axiom17 :
  (forall temp___248:int. forall temp___249:int. forall temp___250:int.
  forall temp___251:int. (((dynamic_invariant(temp___248, true, true, true,
  true) and dynamic_invariant(temp___249, true, true, true, true)) and
  (dynamic_invariant(temp___250, true, true, true, true) and
  dynamic_invariant(temp___251, true, true, true, true))) ->
  ((temp_____aggregate_def_246(temp___248, temp___249, temp___250,
  temp___251)[3]) = rliteral)))

 (* File "use_unchecked_union.ads", line 29, characters 0-0 *)
goal defqtvc :
  (forall output__split_discrs:integer. (dynamic_invariant(num, true, false,
  true, true) -> ((not (output__attr__constrained = true)) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (num = 0) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (num = 1) then true else false)) ->
  ((spark__branch1 = true) -> ((output__attr__constrained = true) ->
  (rliteral1 = output__split_discrs)))))))))))
