(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "constr.ads", line 4, characters 0-0 *)
goal defqtvc :
  (forall x:(int,integer) farray. ((to_rep((x[1])) = 0) ->
  (forall i:int. ((i = 1) ->
  (forall o:int. ((to_rep((x[i])) = o) -> (let o1 = (o + 1) : int in
  (in_range(o1) ->
  (forall o2:integer. ((to_rep(o2) = o1) ->
  (forall x1:(int,integer) farray. ((x1 = (x[i <- o2])) ->
  (forall i1:int. ((i1 = 2) ->
  (forall o3:int. ((to_rep((x1[i1])) = o3) -> (let o4 = (o3 + 1) : int in
  (in_range(o4) ->
  (forall o5:integer. ((to_rep(o5) = o4) ->
  (forall x2:(int,integer) farray. ((x2 = (x1[i1 <- o5])) ->
  (forall i2:int. ((i2 = 3) ->
  (forall o6:int. ((to_rep((x2[i2])) = o6) -> (let o7 = (o6 + 1) : int in
  (in_range(o7) ->
  (forall o8:integer. ((to_rep(o8) = o7) ->
  (forall x3:(int,integer) farray. ((x3 = (x2[i2 <- o8])) ->
  (forall i3:int. ((i3 = 4) ->
  (forall o9:int. ((to_rep((x3[i3])) = o9) -> (let o10 = (o9 + 1) : int in
  (in_range(o10) ->
  (forall o11:integer. ((to_rep(o11) = o10) ->
  (forall x4:(int,integer) farray. ((x4 = (x3[i3 <- o11])) ->
  (forall i4:int. ((i4 = 5) ->
  (forall o12:int. ((to_rep((x4[i4])) = o12) -> (let o13 = (o12 + 1) : int in
  (in_range(o13) ->
  (forall o14:integer. ((to_rep(o14) = o13) ->
  (forall x5:(int,integer) farray. ((x5 = (x4[i4 <- o14])) ->
  (forall i5:int. ((i5 = 6) ->
  (forall o15:int. ((to_rep((x5[i5])) = o15) -> (let o16 = (o15 + 1) : int in
  (in_range(o16) ->
  (forall o17:integer. ((to_rep(o17) = o16) ->
  (forall x6:(int,integer) farray. ((x6 = (x5[i5 <- o17])) ->
  (forall i6:int. ((i6 = 7) ->
  (forall o18:int. ((to_rep((x6[i6])) = o18) -> (let o19 = (o18 + 1) : int in
  (in_range(o19) ->
  (forall o20:integer. ((to_rep(o20) = o19) ->
  (forall x7:(int,integer) farray. ((x7 = (x6[i6 <- o20])) ->
  (forall i7:int. ((i7 = 8) ->
  (forall o21:int. ((to_rep((x7[i7])) = o21) -> (let o22 = (o21 + 1) : int in
  (in_range(o22) ->
  (forall o23:integer. ((to_rep(o23) = o22) ->
  (forall x8:(int,integer) farray. ((x8 = (x7[i7 <- o23])) ->
  (forall i8:int. ((i8 = 9) ->
  (forall o24:int. ((to_rep((x8[i8])) = o24) -> (let o25 = (o24 + 1) : int in
  (in_range(o25) ->
  (forall o26:integer. ((to_rep(o26) = o25) ->
  (forall x9:(int,integer) farray. ((x9 = (x8[i8 <- o26])) ->
  (forall i9:int. ((i9 = 10) ->
  (forall o27:int. ((to_rep((x9[i9])) = o27) -> (let o28 = (o27 + 1) : int in
  (in_range(o28) ->
  (forall o29:integer. ((to_rep(o29) = o28) ->
  (forall x10:(int,integer) farray. ((x10 = (x9[i9 <- o29])) ->
  (to_rep((x10[1])) = 1)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
