(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type t

logic user_eq : t, t -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic dummy : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

type us_split_fields = { rec__eq_null_record__s__x : t
}

function us_split_fields_rec__eq_null_record__s__x__projection(a: us_split_fields) : t =
  (a).rec__eq_null_record__s__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (user_eq(((a).us_split_fields1).rec__eq_null_record__s__x,
  ((b).us_split_fields1).rec__eq_null_record__s__x) = true) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic eq_null_record__s__x__first__bit : int

logic eq_null_record__s__x__last__bit : int

logic eq_null_record__s__x__position : int

axiom eq_null_record__s__x__first__bit_axiom :
  (0 <= eq_null_record__s__x__first__bit)

axiom eq_null_record__s__x__last__bit_axiom :
  (eq_null_record__s__x__first__bit <  eq_null_record__s__x__last__bit)

axiom eq_null_record__s__x__position_axiom :
  (0 <= eq_null_record__s__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type s__ref = { s__content : us_rep
}

function s__ref_s__content__projection(a: s__ref) : us_rep = (a).s__content

logic x : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic y : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic oeq : t, t -> bool

logic oeq__function_guard : bool, t, t -> prop

axiom user_eq__def_axiom :
  (forall a:t. forall b:t. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:t. forall b:t [user_eq(a, b)]. (user_eq(a, b) = oeq(a, b)))

axiom oeq__def_axiom :
  (forall x1:t. forall y1:t [oeq(x1, y1)]. (not (oeq(x1, y1) = true)))

axiom oeq__def_axiom1 : true

 (* File "eq_null_record.ads", line 13, characters 0-0 *)
goal defqtvc :
  (forall eq_null_record__always_true__result:bool.
  ((eq_null_record__always_true__result = of_int(1)) ->
  (eq_null_record__always_true__result = true)))
