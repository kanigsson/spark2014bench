(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x1: int) = (((- 2147483648) <= x1) and (x1 <= 2147483647))

function bool_eq(x1: int, y: int) : bool = (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic get : int, int -> int

logic get__function_guard : int, int, int -> prop

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate type_invariant(temp___157: int) = (not (temp___157 = 0))

axiom get__post_axiom :
  (forall x1:int. forall inside_out__mode:int [get(x1, inside_out__mode)].
  in_range(get(x1, inside_out__mode)))

logic priv_get : int -> int

logic priv_get__function_guard : int, int -> prop

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. ((- 2147483648) <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 2147483647))

predicate in_range1(x1: int) = (((- 2147483648) <= x1) and
  (x1 <= 2147483647))

function bool_eq1(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t, t -> bool

logic dummy1 : t

type t__ref = { t__content : t
}

function t__ref_t__content__projection(a: t__ref) : t = (a).t__content

predicate dynamic_invariant1(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_163))

axiom priv_get__post_axiom :
  (forall x1:int [priv_get(x1)]. (dynamic_invariant1(x1, true, true, true,
  true) -> (let result = priv_get(x1) : int in
  (priv_get__function_guard(result, x1) -> dynamic_invariant(result, true,
  false, true, true)))))

axiom priv_get__def_axiom :
  (forall x1:int [priv_get(x1)]. (dynamic_invariant1(x1, true, true, true,
  true) -> (priv_get(x1) = x1)))

logic body_get : int, int -> int

logic body_get__function_guard : int, int, int -> prop

type mode_t

predicate in_range2(x1: int) = ((0 <= x1) and (x1 <= 2))

function bool_eq2(x1: int, y: int) : bool =
  (if (x1 = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : mode_t, mode_t -> bool

logic dummy2 : mode_t

type mode_t__ref = { mode_t__content : mode_t
}

function mode_t__ref_mode_t__content__projection(a: mode_t__ref) : mode_t =
  (a).mode_t__content

predicate dynamic_invariant2(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 2)) -> in_range2(temp___expr_171))

 (* File "inside_out.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall mode:int. (dynamic_invariant2(mode, true, false, true, true) ->
  (dynamic_invariant1(x, true, false, true, true) -> (type_invariant(x) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (mode = 0) then true else false)) ->
  ((spark__branch = true) -> type_invariant(x))))))))
