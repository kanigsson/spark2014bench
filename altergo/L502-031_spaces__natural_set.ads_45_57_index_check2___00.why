(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type set_length

logic set_lengthqtint : set_length -> int

axiom set_lengthqtaxiom : (forall i:set_length. (0 <= set_lengthqtint(i)))

axiom set_lengthqtaxiom1 : (forall i:set_length. (set_lengthqtint(i) <= 10))

predicate in_range2(x: int) = ((0 <= x) and (x <= 10))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : set_length, set_length -> bool

logic dummy1 : set_length

type set_length__ref = { set_length__content : set_length
}

function set_length__ref_set_length__content__projection(a: set_length__ref) : set_length =
  (a).set_length__content

function to_rep(x: set_length) : int = set_lengthqtint(x)

logic of_rep : int -> set_length

axiom inversion_axiom :
  (forall x:set_length [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:set_length [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type element_t

logic element_tqtint : element_t -> int

axiom element_tqtaxiom : (forall i:element_t. ((- 1) <= element_tqtint(i)))

axiom element_tqtaxiom1 :
  (forall i:element_t. (element_tqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : element_t, element_t -> bool

logic dummy2 : element_t

type element_t__ref = { element_t__content : element_t
}

function element_t__ref_element_t__content__projection(a: element_t__ref) : element_t =
  (a).element_t__content

function to_rep1(x: element_t) : int = element_tqtint(x)

logic of_rep1 : int -> element_t

axiom inversion_axiom1 :
  (forall x:element_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:element_t [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,element_t) farray
}

logic slide : (int,element_t) farray, int, int -> (int,element_t) farray

axiom slide_eq :
  (forall a:(int,element_t) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element_t) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,element_t) farray, a__first: int, a__last: int,
  b: (int,element_t) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element_t) farray. forall b:(int,element_t) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy3 : (int,element_t) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq3 : (int,element_t) farray, (int,element_t) farray -> bool

type us_split_fields = { rec__natural_set__t__len : set_length;
rec__natural_set__t__m : (int,element_t) farray
}

function us_split_fields_rec__natural_set__t__len__projection(a: us_split_fields) : set_length =
  (a).rec__natural_set__t__len

function us_split_fields_rec__natural_set__t__m__projection(a: us_split_fields) : (int,element_t) farray =
  (a).rec__natural_set__t__m

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__natural_set__t__len) = to_rep(((b).us_split_fields1).rec__natural_set__t__len)) and
  (bool_eq4(((a).us_split_fields1).rec__natural_set__t__m, 1, 10,
  ((b).us_split_fields1).rec__natural_set__t__m, 1,
  10) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic natural_set__t__len__first__bit : int

logic natural_set__t__len__last__bit : int

logic natural_set__t__len__position : int

axiom natural_set__t__len__first__bit_axiom :
  (0 <= natural_set__t__len__first__bit)

axiom natural_set__t__len__last__bit_axiom :
  (natural_set__t__len__first__bit <  natural_set__t__len__last__bit)

axiom natural_set__t__len__position_axiom :
  (0 <= natural_set__t__len__position)

logic natural_set__t__m__first__bit : int

logic natural_set__t__m__last__bit : int

logic natural_set__t__m__position : int

axiom natural_set__t__m__first__bit_axiom :
  (0 <= natural_set__t__m__first__bit)

axiom natural_set__t__m__last__bit_axiom :
  (natural_set__t__m__first__bit <  natural_set__t__m__last__bit)

axiom natural_set__t__m__position_axiom : (0 <= natural_set__t__m__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

logic s : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

type set_index

logic set_indexqtint : set_index -> int

axiom set_indexqtaxiom : (forall i:set_index. (1 <= set_indexqtint(i)))

axiom set_indexqtaxiom1 : (forall i:set_index. (set_indexqtint(i) <= 10))

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : set_index, set_index -> bool

logic dummy5 : set_index

type set_index__ref = { set_index__content : set_index
}

function set_index__ref_set_index__content__projection(a: set_index__ref) : set_index =
  (a).set_index__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant1(temp___expr_177: int, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  ((- 1) <= 2147483647)) -> in_range3(temp___expr_177))

predicate dynamic_invariant2(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 10)) -> in_range2(temp___expr_163))

predicate dynamic_invariant3(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (1 <= 10)) -> in_range4(temp___expr_170))

 (* File "natural_set.ads", line 6, characters 0-0 *)
goal defqtvc :
  ((exists o:int.
   (to_rep(((s).us_split_fields1).rec__natural_set__t__len) = o)) ->
  (forall usf:int.
  (forall o:int.
  ((to_rep(((s).us_split_fields1).rec__natural_set__t__len) = o) ->
  ((andb((if (1 <= usf) then true else false),
  (if (usf <= o) then true else false)) = true) -> (1 <= usf))))))
