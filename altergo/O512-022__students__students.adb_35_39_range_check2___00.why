(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type gender_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 2))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : gender_type, gender_type -> bool

logic dummy : gender_type

type gender_type__ref = { gender_type__content : gender_type
}

function gender_type__ref_gender_type__content__projection(a: gender_type__ref) : gender_type =
  (a).gender_type__content

logic to_rep : gender_type -> int

logic of_rep : int -> gender_type

axiom inversion_axiom :
  (forall x:gender_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:gender_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type meal_plan_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : meal_plan_type, meal_plan_type -> bool

logic dummy1 : meal_plan_type

type meal_plan_type__ref = { meal_plan_type__content : meal_plan_type
}

function meal_plan_type__ref_meal_plan_type__content__projection(a: meal_plan_type__ref) : meal_plan_type =
  (a).meal_plan_type__content

logic to_rep1 : meal_plan_type -> int

logic of_rep1 : int -> meal_plan_type

axiom inversion_axiom1 :
  (forall x:meal_plan_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:meal_plan_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type student_id

logic student_idqtint : student_id -> int

axiom student_idqtaxiom : (forall i:student_id. (0 <= student_idqtint(i)))

axiom student_idqtaxiom1 :
  (forall i:student_id. (student_idqtint(i) <= 999999))

predicate in_range3(x: int) = ((0 <= x) and (x <= 999999))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : student_id, student_id -> bool

logic dummy2 : student_id

type student_id__ref = { student_id__content : student_id
}

function student_id__ref_student_id__content__projection(a: student_id__ref) : student_id =
  (a).student_id__content

function to_rep2(x: student_id) : int = student_idqtint(x)

logic of_rep2 : int -> student_id

axiom inversion_axiom2 :
  (forall x:student_id [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:student_id [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type gpa_type

predicate in_range4(x: int) = ((0 <= x) and (x <= 512))

logic dummy3 : gpa_type

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : gpa_type, gpa_type -> bool

type gpa_type__ref = { gpa_type__content : gpa_type
}

function gpa_type__ref_gpa_type__content__projection(a: gpa_type__ref) : gpa_type =
  (a).gpa_type__content

logic to_rep3 : gpa_type -> int

logic of_rep3 : int -> gpa_type

axiom inversion_axiom3 :
  (forall x:gpa_type [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:gpa_type [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type date

logic dateqtint : date -> int

axiom dateqtaxiom : (forall i:date. ((- 2147483648) <= dateqtint(i)))

axiom dateqtaxiom1 : (forall i:date. (dateqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : date, date -> bool

logic dummy4 : date

type date__ref = { date__content : date
}

function date__ref_date__content__projection(a: date__ref) : date =
  (a).date__content

function to_rep4(x: date) : int = dateqtint(x)

logic of_rep4 : int -> date

axiom inversion_axiom4 :
  (forall x:date [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:date [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = { rec__students__student_record__birth_date : date;
rec__students__student_record__id : student_id;
rec__students__student_record__gender : gender_type;
rec__students__student_record__gpa : gpa_type;
rec__students__student_record__part_time : bool;
rec__students__student_record__in_state : bool;
rec__students__student_record__resident : bool;
rec__students__student_record__meal_plan : meal_plan_type;
rec__students__student_record__self_insured : bool
}

function us_split_fields_rec__students__student_record__birth_date__projection(a: us_split_fields) : date =
  (a).rec__students__student_record__birth_date

function us_split_fields_rec__students__student_record__id__projection(a: us_split_fields) : student_id =
  (a).rec__students__student_record__id

function us_split_fields_rec__students__student_record__gender__projection(a: us_split_fields) : gender_type =
  (a).rec__students__student_record__gender

function us_split_fields_rec__students__student_record__gpa__projection(a: us_split_fields) : gpa_type =
  (a).rec__students__student_record__gpa

function us_split_fields_rec__students__student_record__part_time__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__part_time

function us_split_fields_rec__students__student_record__in_state__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__in_state

function us_split_fields_rec__students__student_record__resident__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__resident

function us_split_fields_rec__students__student_record__meal_plan__projection(a: us_split_fields) : meal_plan_type =
  (a).rec__students__student_record__meal_plan

function us_split_fields_rec__students__student_record__self_insured__projection(a: us_split_fields) : bool =
  (a).rec__students__student_record__self_insured

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if (((to_rep4(((a).us_split_fields1).rec__students__student_record__birth_date) = to_rep4(((b).us_split_fields1).rec__students__student_record__birth_date)) and
  (to_rep2(((a).us_split_fields1).rec__students__student_record__id) = to_rep2(((b).us_split_fields1).rec__students__student_record__id))) and
  ((((to_rep(((a).us_split_fields1).rec__students__student_record__gender) = to_rep(((b).us_split_fields1).rec__students__student_record__gender)) and
  (to_rep3(((a).us_split_fields1).rec__students__student_record__gpa) = to_rep3(((b).us_split_fields1).rec__students__student_record__gpa))) and
  ((to_int(((a).us_split_fields1).rec__students__student_record__part_time) = to_int(((b).us_split_fields1).rec__students__student_record__part_time)) and
  (to_int(((a).us_split_fields1).rec__students__student_record__in_state) = to_int(((b).us_split_fields1).rec__students__student_record__in_state)))) and
  (((to_int(((a).us_split_fields1).rec__students__student_record__resident) = to_int(((b).us_split_fields1).rec__students__student_record__resident)) and
  (to_rep1(((a).us_split_fields1).rec__students__student_record__meal_plan) = to_rep1(((b).us_split_fields1).rec__students__student_record__meal_plan))) and
  (to_int(((a).us_split_fields1).rec__students__student_record__self_insured) = to_int(((b).us_split_fields1).rec__students__student_record__self_insured))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic students__student_record__birth_date__first__bit : int

logic students__student_record__birth_date__last__bit : int

logic students__student_record__birth_date__position : int

axiom students__student_record__birth_date__first__bit_axiom :
  (0 <= students__student_record__birth_date__first__bit)

axiom students__student_record__birth_date__last__bit_axiom :
  (students__student_record__birth_date__first__bit <  students__student_record__birth_date__last__bit)

axiom students__student_record__birth_date__position_axiom :
  (0 <= students__student_record__birth_date__position)

logic students__student_record__id__first__bit : int

logic students__student_record__id__last__bit : int

logic students__student_record__id__position : int

axiom students__student_record__id__first__bit_axiom :
  (0 <= students__student_record__id__first__bit)

axiom students__student_record__id__last__bit_axiom :
  (students__student_record__id__first__bit <  students__student_record__id__last__bit)

axiom students__student_record__id__position_axiom :
  (0 <= students__student_record__id__position)

logic students__student_record__gender__first__bit : int

logic students__student_record__gender__last__bit : int

logic students__student_record__gender__position : int

axiom students__student_record__gender__first__bit_axiom :
  (0 <= students__student_record__gender__first__bit)

axiom students__student_record__gender__last__bit_axiom :
  (students__student_record__gender__first__bit <  students__student_record__gender__last__bit)

axiom students__student_record__gender__position_axiom :
  (0 <= students__student_record__gender__position)

logic students__student_record__gpa__first__bit : int

logic students__student_record__gpa__last__bit : int

logic students__student_record__gpa__position : int

axiom students__student_record__gpa__first__bit_axiom :
  (0 <= students__student_record__gpa__first__bit)

axiom students__student_record__gpa__last__bit_axiom :
  (students__student_record__gpa__first__bit <  students__student_record__gpa__last__bit)

axiom students__student_record__gpa__position_axiom :
  (0 <= students__student_record__gpa__position)

logic students__student_record__part_time__first__bit : int

logic students__student_record__part_time__last__bit : int

logic students__student_record__part_time__position : int

axiom students__student_record__part_time__first__bit_axiom :
  (0 <= students__student_record__part_time__first__bit)

axiom students__student_record__part_time__last__bit_axiom :
  (students__student_record__part_time__first__bit <  students__student_record__part_time__last__bit)

axiom students__student_record__part_time__position_axiom :
  (0 <= students__student_record__part_time__position)

logic students__student_record__in_state__first__bit : int

logic students__student_record__in_state__last__bit : int

logic students__student_record__in_state__position : int

axiom students__student_record__in_state__first__bit_axiom :
  (0 <= students__student_record__in_state__first__bit)

axiom students__student_record__in_state__last__bit_axiom :
  (students__student_record__in_state__first__bit <  students__student_record__in_state__last__bit)

axiom students__student_record__in_state__position_axiom :
  (0 <= students__student_record__in_state__position)

logic students__student_record__resident__first__bit : int

logic students__student_record__resident__last__bit : int

logic students__student_record__resident__position : int

axiom students__student_record__resident__first__bit_axiom :
  (0 <= students__student_record__resident__first__bit)

axiom students__student_record__resident__last__bit_axiom :
  (students__student_record__resident__first__bit <  students__student_record__resident__last__bit)

axiom students__student_record__resident__position_axiom :
  (0 <= students__student_record__resident__position)

logic students__student_record__meal_plan__first__bit : int

logic students__student_record__meal_plan__last__bit : int

logic students__student_record__meal_plan__position : int

axiom students__student_record__meal_plan__first__bit_axiom :
  (0 <= students__student_record__meal_plan__first__bit)

axiom students__student_record__meal_plan__last__bit_axiom :
  (students__student_record__meal_plan__first__bit <  students__student_record__meal_plan__last__bit)

axiom students__student_record__meal_plan__position_axiom :
  (0 <= students__student_record__meal_plan__position)

logic students__student_record__self_insured__first__bit : int

logic students__student_record__self_insured__last__bit : int

logic students__student_record__self_insured__position : int

axiom students__student_record__self_insured__first__bit_axiom :
  (0 <= students__student_record__self_insured__first__bit)

axiom students__student_record__self_insured__last__bit_axiom :
  (students__student_record__self_insured__first__bit <  students__student_record__self_insured__last__bit)

axiom students__student_record__self_insured__position_axiom :
  (0 <= students__student_record__self_insured__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type student_record__ref = { student_record__content : us_rep
}

function student_record__ref_student_record__content__projection(a: student_record__ref) : us_rep =
  (a).student_record__content

logic student : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic base_tuition : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

predicate pos_div_relation(res: int, num: int, den: int) = (let exact =
  div(num, den) : int in
  (if (num = 0) then (res = 0) else (if (num = (exact * den)) then (res = exact) else ((exact <= res) and
  (res <= (exact + 1))))))

logic fxp_div_int : int, int -> int

axiom fxp_div_int_def :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((x = 0) -> (fxp_div_int(x, y) = 0))))

axiom fxp_div_int_def1 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> (((0 <  x) and
  (0 <  y)) -> pos_div_relation(fxp_div_int(x, y), x, y)))))

axiom fxp_div_int_def2 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> (((x <  0) and (y <  0)) -> pos_div_relation(fxp_div_int(x,
  y), (-x), (-y)))))))

axiom fxp_div_int_def3 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> ((not ((x <  0) and (y <  0))) -> (((x <  0) and (0 <  y)) ->
  pos_div_relation((-fxp_div_int(x, y)), (-x), y)))))))

axiom fxp_div_int_def4 :
  (forall x:int.
  (forall y:int [fxp_div_int(x, y)]. ((not (x = 0)) -> ((not ((0 <  x) and
  (0 <  y))) -> ((not ((x <  0) and (y <  0))) -> ((not ((x <  0) and
  (0 <  y))) -> (((0 <  x) and (y <  0)) -> pos_div_relation((-fxp_div_int(x,
  y)), x, (-y)))))))))

logic to_int1 : int -> int

axiom to_int_def : (forall x:int [to_int1(x)]. ((x = 0) -> (to_int1(x) = 0)))

axiom to_int_def1 :
  (forall x:int [to_int1(x)]. ((not (x = 0)) -> ((0 <  x) ->
  pos_div_relation(to_int1(x), (x * 1), 128))))

axiom to_int_def2 :
  (forall x:int [to_int1(x)]. ((not (x = 0)) -> ((not (0 <  x)) ->
  pos_div_relation((-to_int1(x)), ((-x) * 1), 128))))

logic of_int1 : int -> int

axiom of_int_def : (forall x:int [of_int1(x)]. ((x = 0) -> (of_int1(x) = 0)))

axiom of_int_def1 :
  (forall x:int [of_int1(x)]. ((not (x = 0)) -> ((0 <  x) ->
  pos_div_relation(of_int1(x), (x * 128), 1))))

axiom of_int_def2 :
  (forall x:int [of_int1(x)]. ((not (x = 0)) -> ((not (0 <  x)) ->
  pos_div_relation((-of_int1(x)), ((-x) * 128), 1))))

type tmoney_typeB

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

logic dummy6 : tmoney_typeB

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : tmoney_typeB, tmoney_typeB -> bool

type tmoney_typeB__ref = { tmoney_typeB__content : tmoney_typeB
}

function tmoney_typeB__ref_tmoney_typeB__content__projection(a: tmoney_typeB__ref) : tmoney_typeB =
  (a).tmoney_typeB__content

type money_type

predicate in_range7(x: int) = (((- 12799999) <= x) and (x <= 12799999))

logic dummy7 : money_type

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq7 : money_type, money_type -> bool

type money_type__ref = { money_type__content : money_type
}

function money_type__ref_money_type__content__projection(a: money_type__ref) : money_type =
  (a).money_type__content

predicate dynamic_invariant(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  ((- 12799999) <= 12799999)) -> in_range7(temp___expr_194))

predicate dynamic_invariant1(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  (0 <= 2)) -> in_range1(temp___expr_159))

predicate dynamic_invariant2(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (0 <= 3)) -> in_range2(temp___expr_166))

predicate dynamic_invariant3(temp___expr_173: int, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = (((temp___is_init_169 = true) or
  (0 <= 999999)) -> in_range3(temp___expr_173))

predicate dynamic_invariant4(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  (0 <= 512)) -> in_range4(temp___expr_187))

predicate dynamic_invariant5(temp___expr_201: int, temp___is_init_197: bool,
  temp___skip_constant_198: bool, temp___do_toplevel_199: bool,
  temp___do_typ_inv_200: bool) = (((temp___is_init_197 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_201))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "students.ads", line 17, characters 0-0 *)
goal defqtvc :
  (forall tuition:int. forall fees:int. (dynamic_invariant(base_tuition,
  true, false, true, true) -> (((0 <= base_tuition) and
  (base_tuition <  2560000)) -> (dynamic_invariant(tuition, false, false,
  true, true) -> (dynamic_invariant(fees, false, false, true, true) ->
  (forall grants:int. ((grants = 0) -> (dynamic_invariant(grants, true,
  false, true, true) ->
  (forall insurance:int. ((insurance = 0) -> (dynamic_invariant(insurance,
  true, false, true, true) ->
  (forall tuition1:int. ((tuition1 = base_tuition) ->
  (forall spark__branch:bool. forall tuition2:int.
  (((spark__branch = (if (((student).us_split_fields1).rec__students__student_record__in_state = true) then false else true)) and
  (if (spark__branch = true) then (tuition2 = (tuition1 + fxp_div_int(tuition1,
  2))) else (tuition2 = tuition1))) -> ((tuition2 <= 3840000) ->
  (forall spark__branch1:bool. forall insurance1:int.
  (((spark__branch1 = (if (((student).us_split_fields1).rec__students__student_record__self_insured = true) then false else true)) and
  (if (spark__branch1 = true) then (insurance1 = 128000) else (insurance1 = insurance))) ->
  (forall spark__branch2:bool. forall fees1:int.
  (((spark__branch2 = ((student).us_split_fields1).rec__students__student_record__part_time) and
  (if (spark__branch2 = true) then (fees1 = 12800) else (fees1 = 64000))) ->
  (forall spark__branch3:bool.
  ((spark__branch3 = ((student).us_split_fields1).rec__students__student_record__resident) ->
  ((spark__branch3 = true) ->
  (forall fees2:int. ((fees2 = (fees1 + 512000)) ->
  (forall o:int.
  ((to_rep1(((student).us_split_fields1).rec__students__student_record__meal_plan) = o) ->
  (forall spark__branch4:bool.
  ((spark__branch4 = (if (o = 0) then true else false)) ->
  ((not (spark__branch4 = true)) ->
  (forall o1:int.
  ((to_rep1(((student).us_split_fields1).rec__students__student_record__meal_plan) = o1) ->
  (forall spark__branch5:bool.
  ((spark__branch5 = (if (o1 = 1) then true else false)) ->
  ((not (spark__branch5 = true)) ->
  (forall o2:int.
  ((to_rep1(((student).us_split_fields1).rec__students__student_record__meal_plan) = o2) ->
  (forall spark__branch6:bool.
  ((spark__branch6 = (if (o2 = 2) then true else false)) ->
  ((not (spark__branch6 = true)) -> in_range7((fees2 + 384000))))))))))))))))))))))))))))))))))))))))))
