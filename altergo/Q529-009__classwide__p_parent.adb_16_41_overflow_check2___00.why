(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type t0

logic t0qtint : t0 -> int

axiom t0qtaxiom : (forall i:t0. ((- 2147483648) <= t0qtint(i)))

axiom t0qtaxiom1 : (forall i:t0. (t0qtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t0, t0 -> bool

logic dummy1 : t0

type t0__ref = { t0__content : t0
}

function t0__ref_t0__content__projection(a: t0__ref) : t0 = (a).t0__content

function to_rep(x: t0) : int = t0qtint(x)

logic of_rep : int -> t0

axiom inversion_axiom : (forall x:t0 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:t0 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p_parent__t_parent__x0 : t0; rec__ext__ :
us_private
}

function us_split_fields_rec__p_parent__t_parent__x0__projection(a: us_split_fields) : t0 =
  (a).rec__p_parent__t_parent__x0

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__p_parent__t_parent__x0) = to_rep(((b).us_split_fields1).rec__p_parent__t_parent__x0)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p_parent__t_parent__x0__first__bit : int

logic p_parent__t_parent__x0__last__bit : int

logic p_parent__t_parent__x0__position : int

axiom p_parent__t_parent__x0__first__bit_axiom :
  (0 <= p_parent__t_parent__x0__first__bit)

axiom p_parent__t_parent__x0__last__bit_axiom :
  (p_parent__t_parent__x0__first__bit <  p_parent__t_parent__x0__last__bit)

axiom p_parent__t_parent__x0__position_axiom :
  (0 <= p_parent__t_parent__x0__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t_parent__ref = { t_parent__content : us_rep
}

function t_parent__ref_t_parent__content__projection(a: t_parent__ref) : us_rep =
  (a).t_parent__content

logic get_x0 : us_rep -> int

logic get_x0__function_guard : int, us_rep -> prop

logic get_x01 : int, us_rep -> int

logic get_x0__function_guard1 : int, int, us_rep -> prop

predicate default_initial_assumption(temp___expr_167: us_rep,
  temp___skip_top_level_168: bool) = ((temp___expr_167).attr__tag = us_tag)

predicate dynamic_invariant(temp___expr_159: int, temp___is_init_155: bool,
  temp___skip_constant_156: bool, temp___do_toplevel_157: bool,
  temp___do_typ_inv_158: bool) = (((temp___is_init_155 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_159))

axiom get_x0__post_axiom :
  (forall this:us_rep [get_x0(this)]. (let result = get_x0(this) : int in
  (get_x0__function_guard(result, this) -> dynamic_invariant(result, true,
  false, true, true))))

axiom get_x0__post__dispatch_axiom :
  (forall attr__tag1:int.
  (forall this:us_rep [get_x01(attr__tag1, this)]. (let result =
  get_x01(attr__tag1, this) : int in (get_x0__function_guard1(result,
  attr__tag1, this) -> dynamic_invariant(result, true, false, true, true)))))

axiom p_parent__t_parent__compat_axiom :
  (forall this:us_rep [get_x01(us_tag, this)].
  (get_x0__function_guard1(get_x01(us_tag, this), us_tag, this) ->
  (forall this1:us_rep. get_x0__function_guard(get_x0(this1), this1))))

axiom p_parent__t_parent__compat_axiom1 :
  (forall this:us_rep [get_x01(us_tag, this)].
  (get_x0__function_guard1(get_x01(us_tag, this), us_tag, this) ->
  (get_x0(this) = get_x01(us_tag, this))))

axiom get_x0__def_axiom :
  (forall this:us_rep [get_x0(this)].
  (get_x0(this) = to_rep(((this).us_split_fields1).rec__p_parent__t_parent__x0)))

logic set_x0__specific_post : int, us_split_fields, int, int,
  us_split_fields -> prop

logic this__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "p_parent.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall this__split_fields:us_split_fields. (let o = { us_split_fields1 =
  this__split_fields; attr__tag = this__attr__tag } : us_rep in (let o1 =
  get_x0(o) : int in ((get_x0__function_guard(o1, o) and
  (dynamic_invariant(o1, true, false, true, true) and
  (o1 = to_rep((this__split_fields).rec__p_parent__t_parent__x0)))) ->
  in_range((o1 + 1))))))
