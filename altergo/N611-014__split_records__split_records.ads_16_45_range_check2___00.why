(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = {
rec__split_records__record_with_mutable_discrs__present : bool
}

function us_split_discrs_rec__split_records__record_with_mutable_discrs__present__projection(a: us_split_discrs) : bool =
  (a).rec__split_records__record_with_mutable_discrs__present

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__split_records__record_with_mutable_discrs__field : natural
}

function us_split_fields_rec__split_records__record_with_mutable_discrs__field__projection(a: us_split_fields) : natural =
  (a).rec__split_records__record_with_mutable_discrs__field

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate split_records__record_with_mutable_discrs__field__pred(a: us_rep) =
  (to_int(((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) = 1)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present) = to_int(((b).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)) and
  (split_records__record_with_mutable_discrs__field__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__split_records__record_with_mutable_discrs__field) = to_rep(((b).us_split_fields1).rec__split_records__record_with_mutable_discrs__field)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic split_records__record_with_mutable_discrs__present__first__bit : int

logic split_records__record_with_mutable_discrs__present__last__bit : int

logic split_records__record_with_mutable_discrs__present__position : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom :
  (split_records__record_with_mutable_discrs__present__first__bit <  split_records__record_with_mutable_discrs__present__last__bit)

axiom split_records__record_with_mutable_discrs__present__position_axiom :
  (0 <= split_records__record_with_mutable_discrs__present__position)

logic split_records__record_with_mutable_discrs__field__first__bit : int

logic split_records__record_with_mutable_discrs__field__last__bit : int

logic split_records__record_with_mutable_discrs__field__position : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom :
  (split_records__record_with_mutable_discrs__field__first__bit <  split_records__record_with_mutable_discrs__field__last__bit)

axiom split_records__record_with_mutable_discrs__field__position_axiom :
  (0 <= split_records__record_with_mutable_discrs__field__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type record_with_mutable_discrs__ref = { record_with_mutable_discrs__content
: us_rep
}

function record_with_mutable_discrs__ref_record_with_mutable_discrs__content__projection(a: record_with_mutable_discrs__ref) : us_rep =
  (a).record_with_mutable_discrs__content

predicate in_range2(rec__split_records__record_with_mutable_discrs__present1: bool,
  a: us_rep) =
  (rec__split_records__record_with_mutable_discrs__present1 = ((a).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic split_records__record_with_mutable_discrs__present__first__bit1 : int

logic split_records__record_with_mutable_discrs__present__last__bit1 : int

logic split_records__record_with_mutable_discrs__present__position1 : int

axiom split_records__record_with_mutable_discrs__present__first__bit_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__present__first__bit1)

axiom split_records__record_with_mutable_discrs__present__last__bit_axiom1 :
  (split_records__record_with_mutable_discrs__present__first__bit1 <  split_records__record_with_mutable_discrs__present__last__bit1)

axiom split_records__record_with_mutable_discrs__present__position_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__present__position1)

logic split_records__record_with_mutable_discrs__field__first__bit1 : int

logic split_records__record_with_mutable_discrs__field__last__bit1 : int

logic split_records__record_with_mutable_discrs__field__position1 : int

axiom split_records__record_with_mutable_discrs__field__first__bit_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__field__first__bit1)

axiom split_records__record_with_mutable_discrs__field__last__bit_axiom1 :
  (split_records__record_with_mutable_discrs__field__first__bit1 <  split_records__record_with_mutable_discrs__field__last__bit1)

axiom split_records__record_with_mutable_discrs__field__position_axiom1 :
  (0 <= split_records__record_with_mutable_discrs__field__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t1s__ref = { t1s__content : us_rep
}

function t1s__ref_t1s__content__projection(a: t1s__ref) : us_rep =
  (a).t1s__content

type us_split_discrs2 = { rec__split_records__holder__present : bool
}

function us_split_discrs_rec__split_records__holder__present__projection(a: us_split_discrs2) : bool =
  (a).rec__split_records__holder__present

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__split_records__holder__content : us_rep
}

function us_split_fields_rec__split_records__holder__content__projection(a: us_split_fields2) : us_rep =
  (a).rec__split_records__holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if ((to_int(((a).us_split_discrs3).rec__split_records__holder__present) = to_int(((b).us_split_discrs3).rec__split_records__holder__present)) and
  (bool_eq2(((a).us_split_fields3).rec__split_records__holder__content,
  ((b).us_split_fields3).rec__split_records__holder__content) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic split_records__holder__present__first__bit : int

logic split_records__holder__present__last__bit : int

logic split_records__holder__present__position : int

axiom split_records__holder__present__first__bit_axiom :
  (0 <= split_records__holder__present__first__bit)

axiom split_records__holder__present__last__bit_axiom :
  (split_records__holder__present__first__bit <  split_records__holder__present__last__bit)

axiom split_records__holder__present__position_axiom :
  (0 <= split_records__holder__present__position)

logic split_records__holder__content__first__bit : int

logic split_records__holder__content__last__bit : int

logic split_records__holder__content__position : int

axiom split_records__holder__content__first__bit_axiom :
  (0 <= split_records__holder__content__first__bit)

axiom split_records__holder__content__last__bit_axiom :
  (split_records__holder__content__first__bit <  split_records__holder__content__last__bit)

axiom split_records__holder__content__position_axiom :
  (0 <= split_records__holder__content__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type holder__ref = { holder__content : us_rep1
}

function holder__ref_holder__content__projection(a: holder__ref) : us_rep1 =
  (a).holder__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate default_initial_assumption(temp___expr_164: us_rep,
  temp___skip_top_level_165: bool) =
  (((temp___expr_164).us_split_discrs1).rec__split_records__record_with_mutable_discrs__present = of_int(0))

predicate dynamic_invariant1(temp___expr_183: us_rep1,
  temp___is_init_179: bool, temp___skip_constant_180: bool,
  temp___do_toplevel_181: bool, temp___do_typ_inv_182: bool) =
  in_range2(((temp___expr_183).us_split_discrs3).rec__split_records__holder__present,
  ((temp___expr_183).us_split_fields3).rec__split_records__holder__content)

 (* File "split_records.ads", line 1, characters 0-0 *)
goal defqtvc :
  (forall usf:bool.
  (forall usf1:us_rep1.
  ((((usf1).us_split_discrs3).rec__split_records__holder__present = usf) ->
  in_range(to_int(usf)))))
