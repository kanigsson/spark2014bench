(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : capacity_range, capacity_range -> bool

logic dummy : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep : int -> capacity_range

axiom inversion_axiom :
  (forall x:capacity_range [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:capacity_range [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__common_formal_containers__int64_vects__vector__capacity : capacity_range
}

function us_split_discrs_rec__common_formal_containers__int64_vects__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__common_formal_containers__int64_vects__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__common_formal_containers__int64_vects__vector :
us_main_type
}

function us_split_fields_rec__common_formal_containers__int64_vects__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__common_formal_containers__int64_vects__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__common_formal_containers__int64_vects__vector__capacity) = to_rep(((b).us_split_discrs1).rec__common_formal_containers__int64_vects__vector__capacity)) and
  (us_main_eq(((a).us_split_fields1).rec__common_formal_containers__int64_vects__vector,
  ((b).us_split_fields1).rec__common_formal_containers__int64_vects__vector) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic common_formal_containers__int64_vects__vector__capacity__first__bit : int

logic common_formal_containers__int64_vects__vector__capacity__last__bit : int

logic common_formal_containers__int64_vects__vector__capacity__position : int

axiom common_formal_containers__int64_vects__vector__capacity__first__bit_axiom :
  (0 <= common_formal_containers__int64_vects__vector__capacity__first__bit)

axiom common_formal_containers__int64_vects__vector__capacity__last__bit_axiom :
  (common_formal_containers__int64_vects__vector__capacity__first__bit <  common_formal_containers__int64_vects__vector__capacity__last__bit)

axiom common_formal_containers__int64_vects__vector__capacity__position_axiom :
  (0 <= common_formal_containers__int64_vects__vector__capacity__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

predicate in_range2(rec__common_formal_containers__int64_vects__vector__capacity1: int,
  a: us_rep) =
  (rec__common_formal_containers__int64_vects__vector__capacity1 = to_rep(((a).us_split_discrs1).rec__common_formal_containers__int64_vects__vector__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic common_formal_containers__int64_vects__vector__capacity__first__bit1 : int

logic common_formal_containers__int64_vects__vector__capacity__last__bit1 : int

logic common_formal_containers__int64_vects__vector__capacity__position1 : int

axiom common_formal_containers__int64_vects__vector__capacity__first__bit_axiom1 :
  (0 <= common_formal_containers__int64_vects__vector__capacity__first__bit1)

axiom common_formal_containers__int64_vects__vector__capacity__last__bit_axiom1 :
  (common_formal_containers__int64_vects__vector__capacity__first__bit1 <  common_formal_containers__int64_vects__vector__capacity__last__bit1)

axiom common_formal_containers__int64_vects__vector__capacity__position_axiom1 :
  (0 <= common_formal_containers__int64_vects__vector__capacity__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type int64_vect__ref = { int64_vect__content : us_rep
}

function int64_vect__ref_int64_vect__content__projection(a: int64_vect__ref) : us_rep =
  (a).int64_vect__content

logic v : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : count_type, count_type -> bool

logic dummy3 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep1(x: count_type) : int = count_typeqtint(x)

logic of_rep1 : int -> count_type

axiom inversion_axiom1 :
  (forall x:count_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:count_type [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = {
rec__common_formal_containers__int64_sets__set__capacity : count_type
}

function us_split_discrs_rec__common_formal_containers__int64_sets__set__capacity__projection(a: us_split_discrs2) : count_type =
  (a).rec__common_formal_containers__int64_sets__set__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__common_formal_containers__int64_sets__set :
us_main_type1
}

function us_split_fields_rec__common_formal_containers__int64_sets__set__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__common_formal_containers__int64_sets__set

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs3).rec__common_formal_containers__int64_sets__set__capacity) = to_rep1(((b).us_split_discrs3).rec__common_formal_containers__int64_sets__set__capacity)) and
  (us_main_eq1(((a).us_split_fields3).rec__common_formal_containers__int64_sets__set,
  ((b).us_split_fields3).rec__common_formal_containers__int64_sets__set) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic common_formal_containers__int64_sets__set__capacity__first__bit : int

logic common_formal_containers__int64_sets__set__capacity__last__bit : int

logic common_formal_containers__int64_sets__set__capacity__position : int

axiom common_formal_containers__int64_sets__set__capacity__first__bit_axiom :
  (0 <= common_formal_containers__int64_sets__set__capacity__first__bit)

axiom common_formal_containers__int64_sets__set__capacity__last__bit_axiom :
  (common_formal_containers__int64_sets__set__capacity__first__bit <  common_formal_containers__int64_sets__set__capacity__last__bit)

axiom common_formal_containers__int64_sets__set__capacity__position_axiom :
  (0 <= common_formal_containers__int64_sets__set__capacity__position)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type set__ref = { set__content : us_rep1
}

function set__ref_set__content__projection(a: set__ref) : us_rep1 =
  (a).set__content

predicate in_range4(rec__common_formal_containers__int64_sets__set__capacity1: int,
  a: us_rep1) =
  (rec__common_formal_containers__int64_sets__set__capacity1 = to_rep1(((a).us_split_discrs3).rec__common_formal_containers__int64_sets__set__capacity))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic common_formal_containers__int64_sets__set__capacity__first__bit1 : int

logic common_formal_containers__int64_sets__set__capacity__last__bit1 : int

logic common_formal_containers__int64_sets__set__capacity__position1 : int

axiom common_formal_containers__int64_sets__set__capacity__first__bit_axiom1 :
  (0 <= common_formal_containers__int64_sets__set__capacity__first__bit1)

axiom common_formal_containers__int64_sets__set__capacity__last__bit_axiom1 :
  (common_formal_containers__int64_sets__set__capacity__first__bit1 <  common_formal_containers__int64_sets__set__capacity__last__bit1)

axiom common_formal_containers__int64_sets__set__capacity__position_axiom1 :
  (0 <= common_formal_containers__int64_sets__set__capacity__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type int64_set__ref = { int64_set__content : us_rep1
}

function int64_set__ref_int64_set__content__projection(a: int64_set__ref) : us_rep1 =
  (a).int64_set__content

logic s : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

logic first_index__function_guard : int, us_rep -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (0 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : index_type, index_type -> bool

logic dummy6 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant(temp___expr_255: int, temp___is_init_251: bool,
  temp___skip_constant_252: bool, temp___do_toplevel_253: bool,
  temp___do_typ_inv_254: bool) = (((temp___is_init_251 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_255))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep2

logic bool_eq6 : us_rep2, us_rep2 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic length : us_rep2 -> int

logic length__function_guard : int, us_rep2 -> prop

function last(container: us_rep2) : int = ((- 1) + length(container))

logic last__function_guard : int, us_rep2 -> prop

logic model : us_rep -> us_rep2

logic model__function_guard : us_rep2, us_rep -> prop

function last_index(container: us_rep) : int = last(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. ((- 1) <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range6(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_264: int, temp___is_init_260: bool,
  temp___skip_constant_261: bool, temp___do_toplevel_262: bool,
  temp___do_typ_inv_263: bool) = (((temp___is_init_260 = true) or
  ((- 1) <= 2147483647)) -> in_range6(temp___expr_264))

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

function element(container: us_rep, index: int) : int = get(model(container),
  index)

logic element__function_guard : int, us_rep, int -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 9223372036854775808) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 9223372036854775807))

predicate in_range7(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : element_type, element_type -> bool

logic dummy9 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant2(temp___expr_304: int, temp___is_init_300: bool,
  temp___skip_constant_301: bool, temp___do_toplevel_302: bool,
  temp___do_typ_inv_303: bool) = (((temp___is_init_300 = true) or
  ((- 9223372036854775808) <= 9223372036854775807)) ->
  in_range7(temp___expr_304))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep3

logic bool_eq9 : us_rep3, us_rep3 -> bool

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy10 : us_rep3

type set__ref1 = { set__content1 : us_rep3
}

function set__ref_set__content__2__projection(a: set__ref1) : us_rep3 =
  (a).set__content1

logic model1 : us_rep1 -> us_rep3

logic model__function_guard1 : us_rep3, us_rep1 -> prop

logic contains : us_rep3, int -> bool

logic contains__function_guard : bool, us_rep3, int -> prop

function contains1(container: us_rep1, item: int) : bool =
  contains(model1(container), item)

logic contains__function_guard1 : bool, us_rep1, int -> prop

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq2(a, b)]. (user_eq2(a,
  b) = oeq(a, b)))

predicate dynamic_invariant3(temp___expr_229: us_rep,
  temp___is_init_225: bool, temp___skip_constant_226: bool,
  temp___do_toplevel_227: bool, temp___do_typ_inv_228: bool) =
  ((not (temp___skip_constant_226 = true)) -> in_range2(200,
  temp___expr_229))

predicate default_initial_assumption(temp___expr_231: us_rep,
  temp___skip_top_level_232: bool) =
  ((to_rep(((temp___expr_231).us_split_discrs1).rec__common_formal_containers__int64_vects__vector__capacity) = 200) and
  ((not (temp___skip_top_level_232 = true)) ->
  (is_empty(temp___expr_231) = true)))

logic is_empty1 : us_rep1 -> bool

logic is_empty__function_guard1 : bool, us_rep1 -> prop

predicate dynamic_invariant4(temp___expr_245: us_rep1,
  temp___is_init_241: bool, temp___skip_constant_242: bool,
  temp___do_toplevel_243: bool, temp___do_typ_inv_244: bool) =
  ((not (temp___skip_constant_242 = true)) -> in_range4(200,
  temp___expr_245))

predicate default_initial_assumption1(temp___expr_247: us_rep1,
  temp___skip_top_level_248: bool) =
  ((to_rep1(((temp___expr_247).us_split_discrs3).rec__common_formal_containers__int64_sets__set__capacity) = 200) and
  ((not (temp___skip_top_level_248 = true)) ->
  (is_empty1(temp___expr_247) = true)))

predicate dynamic_invariant5(temp___expr_209: int, temp___is_init_205: bool,
  temp___skip_constant_206: bool, temp___do_toplevel_207: bool,
  temp___do_typ_inv_208: bool) = (((temp___is_init_205 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_209))

predicate dynamic_invariant6(temp___expr_216: int, temp___is_init_212: bool,
  temp___skip_constant_213: bool, temp___do_toplevel_214: bool,
  temp___do_typ_inv_215: bool) = (((temp___is_init_212 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_216))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

function capacity(container: us_rep) : int =
  to_rep(((container).us_split_discrs1).rec__common_formal_containers__int64_vects__vector__capacity)

logic capacity__function_guard : int, us_rep -> prop

logic length1 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

axiom length__post_axiom :
  (forall container:us_rep [length1(container)].
  (length1(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep [length1(container)].
  dynamic_invariant6(length1(container), true, false, true, true))

logic bool_eq10 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq10(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq10(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length2(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function oeq1(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq10(length(left), length(right)),
  (if (forall n:int. (((0 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq7(a, b)]. (user_eq7(a,
  b) = oeq1(a, b)))

predicate default_initial_assumption2(temp___expr_279: us_rep2,
  temp___skip_top_level_280: bool) =
  ((not (temp___skip_top_level_280 = true)) -> (length(temp___expr_279) = 0))

axiom model__post_axiom :
  (forall container:us_rep [model(container)].
  (length(model(container)) = length1(container)))

axiom oeq__post_axiom :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)]. ((oeq(left,
  right) = true) -> (oeq1(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep. forall right:us_rep [oeq(left, right)].
  ((oeq1(model(left), model(right)) = true) -> (oeq(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length1(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep [is_empty(container)].
  ((length1(container) = 0) -> (is_empty(container) = true)))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. ((- 1) <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 2147483647))

predicate in_range8(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq11 : extended_index1, extended_index1 -> bool

logic dummy11 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant7(temp___expr_271: int, temp___is_init_267: bool,
  temp___skip_constant_268: bool, temp___do_toplevel_269: bool,
  temp___do_typ_inv_270: bool) = (((temp___is_init_267 = true) or
  ((- 1) <= 2147483647)) -> in_range8(temp___expr_271))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length(container)].
  (((- 1) + length(container)) <= 2147483647))

axiom length__post_axiom3 :
  (forall container:us_rep2 [length(container)].
  dynamic_invariant5(length(container), true, false, true, true))

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1.
  ((- 9223372036854775808) <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 9223372036854775807))

predicate in_range9(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : element_type1, element_type1 -> bool

logic dummy12 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : element_type1 =
  (a).element_type__content1

predicate dynamic_invariant8(temp___expr_311: int, temp___is_init_307: bool,
  temp___skip_constant_308: bool, temp___do_toplevel_309: bool,
  temp___do_typ_inv_310: bool) = (((temp___is_init_307 = true) or
  ((- 9223372036854775808) <= 9223372036854775807)) ->
  in_range9(temp___expr_311))

axiom get__post_axiom :
  (forall container:us_rep2.
  (forall position:int [get(container, position)].
  ((dynamic_invariant7(position, true, true, true, true) and
  ((0 <= position) and (position <= last(container)))) ->
  dynamic_invariant8(get(container, position), true, false, true, true))))

function equivalent_elements(left: int, right: int) : bool =
  andb(notb(bool_lt(left, right)), notb(bool_lt(right, left)))

logic equivalent_elements__function_guard : bool, int, int -> prop

logic length3 : us_rep1 -> int

logic length__function_guard2 : int, us_rep1 -> prop

axiom length__post_axiom4 :
  (forall container:us_rep1 [length3(container)].
  (length3(container) <= to_rep1(((container).us_split_discrs3).rec__common_formal_containers__int64_sets__set__capacity)))

axiom length__post_axiom5 :
  (forall container:us_rep1 [length3(container)].
  dynamic_invariant5(length3(container), true, false, true, true))

logic length4 : us_rep3 -> int

logic length__function_guard3 : int, us_rep3 -> prop

logic is_empty2 : us_rep3 -> bool

logic is_empty__function_guard2 : bool, us_rep3 -> prop

predicate default_initial_assumption3(temp___expr_332: us_rep3,
  temp___skip_top_level_333: bool) =
  ((not (temp___skip_top_level_333 = true)) ->
  (is_empty2(temp___expr_332) = true))

axiom model__post_axiom1 :
  (forall container:us_rep1 [model1(container)].
  (length4(model1(container)) = length3(container)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep1 [is_empty1(container)].
  ((is_empty1(container) = true) -> (length3(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep1 [is_empty1(container)].
  ((length3(container) = 0) -> (is_empty1(container) = true)))

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2.
  ((- 9223372036854775808) <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 9223372036854775807))

predicate in_range10(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : element_type2, element_type2 -> bool

logic dummy13 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref2) : element_type2 =
  (a).element_type__content2

predicate dynamic_invariant9(temp___expr_343: int, temp___is_init_339: bool,
  temp___skip_constant_340: bool, temp___do_toplevel_341: bool,
  temp___do_typ_inv_342: bool) = (((temp___is_init_339 = true) or
  ((- 9223372036854775808) <= 9223372036854775807)) ->
  in_range10(temp___expr_343))

axiom contains__post_axiom :
  (forall container:us_rep3.
  (forall item:int [contains(container, item)]. (dynamic_invariant9(item,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists e:int. ((in_range10(e) and (contains(container, e) = true)) and
   (equivalent_elements(e, item) = true))) ->
  (contains(container, item) = true))))))

axiom length__post_axiom6 :
  (forall container:us_rep3 [length4(container)].
  dynamic_invariant5(length4(container), true, false, true, true))

axiom is_empty__post_axiom4 :
  (forall container:us_rep3 [is_empty2(container)].
  ((is_empty2(container) = true) ->
  (forall item:int. (not (in_range10(item) and (contains(container,
  item) = true))))))

axiom is_empty__post_axiom5 :
  (forall container:us_rep3 [is_empty2(container)].
  ((forall item:int. (not (in_range10(item) and (contains(container,
   item) = true)))) ->
  (is_empty2(container) = true)))

axiom is_empty__post_axiom6 :
  (forall container:us_rep3 [is_empty2(container)].
  ((is_empty2(container) = true) -> (length4(container) = 0)))

axiom is_empty__post_axiom7 :
  (forall container:us_rep3 [is_empty2(container)].
  ((length4(container) = 0) -> (is_empty2(container) = true)))

 (* File "automation_request_validation-spark.ads", line 9, characters 0-0 *)
goal defqtvc : (dynamic_invariant3(v, true, false, true, true) ->
  (dynamic_invariant4(s, true, false, true, true) ->
  (forall usf:int. (let o = v : us_rep in (let o1 = last_index(o) : int in
  ((dynamic_invariant1(o1, true, false, true, true) and
  (o1 = last(model(o)))) -> ((dynamic_invariant(0, true, false, true,
  true) and (0 = 0)) -> ((andb((if (0 <= usf) then true else false),
  (if (usf <= o1) then true else false)) = true) -> (in_range5(usf) ->
  (0 <= usf))))))))))
