(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type us_split_fields = { rec__rec_aggregate__r2__x : integer;
rec__rec_aggregate__r2__y : integer
}

function us_split_fields_rec__rec_aggregate__r2__x__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__x

function us_split_fields_rec__rec_aggregate__r2__y__projection(a: us_split_fields) : integer =
  (a).rec__rec_aggregate__r2__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__x) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__x)) and
  (to_rep(((a).us_split_fields1).rec__rec_aggregate__r2__y) = to_rep(((b).us_split_fields1).rec__rec_aggregate__r2__y))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic rec_aggregate__r2__x__first__bit : int

logic rec_aggregate__r2__x__last__bit : int

logic rec_aggregate__r2__x__position : int

axiom rec_aggregate__r2__x__first__bit_axiom :
  (0 <= rec_aggregate__r2__x__first__bit)

axiom rec_aggregate__r2__x__last__bit_axiom :
  (rec_aggregate__r2__x__first__bit <  rec_aggregate__r2__x__last__bit)

axiom rec_aggregate__r2__x__position_axiom :
  (0 <= rec_aggregate__r2__x__position)

logic rec_aggregate__r2__y__first__bit : int

logic rec_aggregate__r2__y__last__bit : int

logic rec_aggregate__r2__y__position : int

axiom rec_aggregate__r2__y__first__bit_axiom :
  (0 <= rec_aggregate__r2__y__first__bit)

axiom rec_aggregate__r2__y__last__bit_axiom :
  (rec_aggregate__r2__y__first__bit <  rec_aggregate__r2__y__last__bit)

axiom rec_aggregate__r2__y__position_axiom :
  (0 <= rec_aggregate__r2__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type r2__ref = { r2__content : us_rep
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep =
  (a).r2__content

type us_split_fields2 = { rec__rec_aggregate__r3__x : integer;
rec__rec_aggregate__r3__y : integer; rec__rec_aggregate__r3__z : us_rep
}

function us_split_fields_rec__rec_aggregate__r3__x__projection(a: us_split_fields2) : integer =
  (a).rec__rec_aggregate__r3__x

function us_split_fields_rec__rec_aggregate__r3__y__projection(a: us_split_fields2) : integer =
  (a).rec__rec_aggregate__r3__y

function us_split_fields_rec__rec_aggregate__r3__z__projection(a: us_split_fields2) : us_rep =
  (a).rec__rec_aggregate__r3__z

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__x) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__x)) and
  (to_rep(((a).us_split_fields3).rec__rec_aggregate__r3__y) = to_rep(((b).us_split_fields3).rec__rec_aggregate__r3__y))) and
  (bool_eq1(((a).us_split_fields3).rec__rec_aggregate__r3__z,
  ((b).us_split_fields3).rec__rec_aggregate__r3__z) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic rec_aggregate__r3__x__first__bit : int

logic rec_aggregate__r3__x__last__bit : int

logic rec_aggregate__r3__x__position : int

axiom rec_aggregate__r3__x__first__bit_axiom :
  (0 <= rec_aggregate__r3__x__first__bit)

axiom rec_aggregate__r3__x__last__bit_axiom :
  (rec_aggregate__r3__x__first__bit <  rec_aggregate__r3__x__last__bit)

axiom rec_aggregate__r3__x__position_axiom :
  (0 <= rec_aggregate__r3__x__position)

logic rec_aggregate__r3__y__first__bit : int

logic rec_aggregate__r3__y__last__bit : int

logic rec_aggregate__r3__y__position : int

axiom rec_aggregate__r3__y__first__bit_axiom :
  (0 <= rec_aggregate__r3__y__first__bit)

axiom rec_aggregate__r3__y__last__bit_axiom :
  (rec_aggregate__r3__y__first__bit <  rec_aggregate__r3__y__last__bit)

axiom rec_aggregate__r3__y__position_axiom :
  (0 <= rec_aggregate__r3__y__position)

logic rec_aggregate__r3__z__first__bit : int

logic rec_aggregate__r3__z__last__bit : int

logic rec_aggregate__r3__z__position : int

axiom rec_aggregate__r3__z__first__bit_axiom :
  (0 <= rec_aggregate__r3__z__first__bit)

axiom rec_aggregate__r3__z__last__bit_axiom :
  (rec_aggregate__r3__z__first__bit <  rec_aggregate__r3__z__last__bit)

axiom rec_aggregate__r3__z__position_axiom :
  (0 <= rec_aggregate__r3__z__position)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type r3__ref = { r3__content : us_rep1
}

function r3__ref_r3__content__projection(a: r3__ref) : us_rep1 =
  (a).r3__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 1)

 (* File "rec_aggregate.ads", line 45, characters 0-0 *)
goal defqtvc :
  (forall one:int. (dynamic_invariant(one, true, false, true, true) ->
  (dynamic_invariant(b, true, false, true, true) -> ((one = 1) ->
  (forall r__split_fields:us_split_fields2.
  ((exists spark__branch:bool.
   ((spark__branch = (if (b = 1) then true else false)) and
   (if (spark__branch = true) then (exists o:integer. ((to_rep(o) = one) and
                                   (exists o1:integer.
                                   ((to_rep(o1) = one) and
                                   (r__split_fields = {
                                   rec__rec_aggregate__r3__x = o1;
                                   rec__rec_aggregate__r3__y = rliteral;
                                   rec__rec_aggregate__r3__z = {
                                   us_split_fields1 = {
                                   rec__rec_aggregate__r2__x = o;
                                   rec__rec_aggregate__r2__y = rliteral } }
                                   }))))) else (exists spark__branch1:bool.
                                               ((spark__branch1 = (if (b = 2) then true else false)) and
                                               (if (spark__branch1 = true) then 
                                               (exists o:integer.
                                               ((to_rep(o) = one) and
                                               (exists o1:integer.
                                               ((to_rep(o1) = one) and
                                               (exists o2:integer.
                                               ((to_rep(o2) = one) and
                                               (exists o3:integer.
                                               ((to_rep(o3) = one) and
                                               (r__split_fields = {
                                               rec__rec_aggregate__r3__x =
                                               o3;
                                               rec__rec_aggregate__r3__y =
                                               o2;
                                               rec__rec_aggregate__r3__z = {
                                               us_split_fields1 = {
                                               rec__rec_aggregate__r2__x =
                                               o1;
                                               rec__rec_aggregate__r2__y = o
                                               } } }))))))))) else (exists spark__branch2:bool.
                                                                   ((spark__branch2 = (if (b = 3) then true else false)) and
                                                                   (if (spark__branch2 = true) then 
                                                                   (exists o:integer.
                                                                   ((to_rep(o) = one) and
                                                                   (exists o1:integer.
                                                                   ((to_rep(o1) = one) and
                                                                   (exists o2:integer.
                                                                   ((to_rep(o2) = one) and
                                                                   (r__split_fields = {
                                                                   rec__rec_aggregate__r3__x =
                                                                   o2;
                                                                   rec__rec_aggregate__r3__y =
                                                                   o1;
                                                                   rec__rec_aggregate__r3__z =
                                                                   {
                                                                   us_split_fields1 =
                                                                   {
                                                                   rec__rec_aggregate__r2__x =
                                                                   rliteral1;
                                                                   rec__rec_aggregate__r2__y =
                                                                   o } } }))))))) else 
                                                                   (exists spark__branch3:bool.
                                                                   ((spark__branch3 = (if (b = 4) then true else false)) and
                                                                   (if (spark__branch3 = true) then 
                                                                   (exists o:integer.
                                                                   ((to_rep(o) = one) and
                                                                   (exists o1:integer.
                                                                   ((to_rep(o1) = one) and
                                                                   (r__split_fields = {
                                                                   rec__rec_aggregate__r3__x =
                                                                   rliteral;
                                                                   rec__rec_aggregate__r3__y =
                                                                   o1;
                                                                   rec__rec_aggregate__r3__z =
                                                                   {
                                                                   us_split_fields1 =
                                                                   {
                                                                   rec__rec_aggregate__r2__x =
                                                                   rliteral;
                                                                   rec__rec_aggregate__r2__y =
                                                                   o } } }))))) else 
                                                                   (exists o:integer.
                                                                   ((to_rep(o) = one) and
                                                                   (exists o1:integer.
                                                                   ((to_rep(o1) = one) and
                                                                   (r__split_fields = {
                                                                   rec__rec_aggregate__r3__x =
                                                                   o1;
                                                                   rec__rec_aggregate__r3__y =
                                                                   rliteral;
                                                                   rec__rec_aggregate__r3__z =
                                                                   {
                                                                   us_split_fields1 =
                                                                   {
                                                                   rec__rec_aggregate__r2__x =
                                                                   o;
                                                                   rec__rec_aggregate__r2__y =
                                                                   rliteral }
                                                                   } }))))))))))))))))) ->
  ((b = 1) -> (bool_eq2({ us_split_fields3 = r__split_fields }, {
  us_split_fields3 = { rec__rec_aggregate__r3__x = of_rep(one);
  rec__rec_aggregate__r3__y = rliteral; rec__rec_aggregate__r3__z = {
  us_split_fields1 = { rec__rec_aggregate__r2__x = of_rep(one);
  rec__rec_aggregate__r2__y = rliteral } } } }) = true))))))))
