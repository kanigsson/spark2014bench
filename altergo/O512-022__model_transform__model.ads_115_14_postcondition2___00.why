(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type uml_action_access

logic uml_action_accessqtint : uml_action_access -> int

axiom uml_action_accessqtaxiom :
  (forall i:uml_action_access. (0 <= uml_action_accessqtint(i)))

axiom uml_action_accessqtaxiom1 :
  (forall i:uml_action_access. (uml_action_accessqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : uml_action_access, uml_action_access -> bool

logic dummy : uml_action_access

type uml_action_access__ref = { uml_action_access__content :
uml_action_access
}

function uml_action_access__ref_uml_action_access__content__projection(a: uml_action_access__ref) : uml_action_access =
  (a).uml_action_access__content

function to_rep(x: uml_action_access) : int = uml_action_accessqtint(x)

logic of_rep : int -> uml_action_access

axiom inversion_axiom :
  (forall x:uml_action_access [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:uml_action_access [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__model__uml_control_flow__from_data :
uml_action_access; rec__model__uml_control_flow__to_data : uml_action_access
}

function us_split_fields_rec__model__uml_control_flow__from_data__projection(a: us_split_fields) : uml_action_access =
  (a).rec__model__uml_control_flow__from_data

function us_split_fields_rec__model__uml_control_flow__to_data__projection(a: us_split_fields) : uml_action_access =
  (a).rec__model__uml_control_flow__to_data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__model__uml_control_flow__from_data) = to_rep(((b).us_split_fields1).rec__model__uml_control_flow__from_data)) and
  (to_rep(((a).us_split_fields1).rec__model__uml_control_flow__to_data) = to_rep(((b).us_split_fields1).rec__model__uml_control_flow__to_data))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic model__uml_control_flow__from_data__first__bit : int

logic model__uml_control_flow__from_data__last__bit : int

logic model__uml_control_flow__from_data__position : int

axiom model__uml_control_flow__from_data__first__bit_axiom :
  (0 <= model__uml_control_flow__from_data__first__bit)

axiom model__uml_control_flow__from_data__last__bit_axiom :
  (model__uml_control_flow__from_data__first__bit <  model__uml_control_flow__from_data__last__bit)

axiom model__uml_control_flow__from_data__position_axiom :
  (0 <= model__uml_control_flow__from_data__position)

logic model__uml_control_flow__to_data__first__bit : int

logic model__uml_control_flow__to_data__last__bit : int

logic model__uml_control_flow__to_data__position : int

axiom model__uml_control_flow__to_data__first__bit_axiom :
  (0 <= model__uml_control_flow__to_data__first__bit)

axiom model__uml_control_flow__to_data__last__bit_axiom :
  (model__uml_control_flow__to_data__first__bit <  model__uml_control_flow__to_data__last__bit)

axiom model__uml_control_flow__to_data__position_axiom :
  (0 <= model__uml_control_flow__to_data__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type uml_control_flow__ref = { uml_control_flow__content : us_rep
}

function uml_control_flow__ref_uml_control_flow__content__projection(a: uml_control_flow__ref) : us_rep =
  (a).uml_control_flow__content

logic from : us_rep -> int

logic from__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_307: int, temp___is_init_303: bool,
  temp___skip_constant_304: bool, temp___do_toplevel_305: bool,
  temp___do_typ_inv_306: bool) = (((temp___is_init_303 = true) or
  (0 <= 100)) -> in_range1(temp___expr_307))

axiom from__post_axiom :
  (forall self:us_rep [from(self)]. (let result = from(self) : int in
  (from__function_guard(result, self) -> dynamic_invariant(result, true,
  false, true, true))))

axiom from__def_axiom :
  (forall self:us_rep [from(self)].
  (from(self) = to_rep(((self).us_split_fields1).rec__model__uml_control_flow__from_data)))

logic to__ : us_rep -> int

logic to____function_guard : int, us_rep -> prop

axiom to____post_axiom :
  (forall self:us_rep [to__(self)]. (let result = to__(self) : int in
  (to____function_guard(result, self) -> dynamic_invariant(result, true,
  false, true, true))))

axiom to____def_axiom :
  (forall self:us_rep [to__(self)].
  (to__(self) = to_rep(((self).us_split_fields1).rec__model__uml_control_flow__to_data)))

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "model.ads", line 112, characters 0-0 *)
goal defqtvc :
  (forall self__split_fields:us_split_fields.
  (forall self__split_fields1:us_split_fields.
  ((self__split_fields1 = self__split_fields) -> (dynamic_invariant(val__,
  true, false, true, true) ->
  (forall o:uml_action_access. ((to_rep(o) = val__) ->
  (forall self__split_fields2:us_split_fields. ((self__split_fields2 = {
  rec__model__uml_control_flow__from_data =
  (self__split_fields).rec__model__uml_control_flow__from_data;
  rec__model__uml_control_flow__to_data = o }) ->
  ((forall self__split_fields3:us_split_fields. to____function_guard(to__({
   us_split_fields1 = self__split_fields3 }), { us_split_fields1 =
   self__split_fields3 })) ->
  (to__({ us_split_fields1 = self__split_fields2 }) = val__))))))))))
