(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic b : int -> bool

logic b__function_guard : bool, int -> prop

logic e : unit -> int

logic e__function_guard : int, unit -> prop

type enum

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : enum, enum -> bool

logic dummy1 : enum

type enum__ref = { enum__content : enum
}

function enum__ref_enum__content__projection(a: enum__ref) : enum =
  (a).enum__content

predicate dynamic_invariant1(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  (0 <= 2)) -> in_range2(temp___expr_181))

axiom e__post_axiom :
  (forall us_void_param:unit [e(us_void_param)]. (let result =
  e(us_void_param) : int in (e__function_guard(result, us_void_param) ->
  dynamic_invariant1(result, true, false, true, true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type t1b

logic t1bqtint : t1b -> int

axiom t1bqtaxiom : (forall i:t1b. (1 <= t1bqtint(i)))

axiom t1bqtaxiom1 : (forall i:t1b. (t1bqtint(i) <= 2))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t1b, t1b -> bool

logic dummy2 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : t1b =
  (a).t1b__content

 (* File "test_goto.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x:int. ((x = 0) -> (dynamic_invariant(x, true, false, true,
  true) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 2) then true else false)) = true) -> (let o = b(1) : bool in
  (b__function_guard(o, 1) ->
  (forall spark__branch:bool. ((spark__branch = o) ->
  ((spark__branch = true) -> (let o1 = e(void) : int in
  ((e__function_guard(o1, void) and dynamic_invariant1(o1, true, false, true,
  true)) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (o1 = 1) then true else false)) ->
  ((spark__branch1 = true) -> (let o2 = b(3) : bool in (b__function_guard(o2,
  3) ->
  (forall spark__branch2:bool. ((spark__branch2 = o2) ->
  ((spark__branch2 = true) ->
  (forall y:int. ((y = 10) -> (dynamic_invariant(y, true, false, true,
  true) ->
  (forall r2b:int. ((r2b = y) -> (dynamic_invariant(r2b, true, false, true,
  true) ->
  (forall i1:int. ((i1 = 1) -> ((andb((if (1 <= i1) then true else false),
  (if (i1 <= r2b) then true else false)) = true) ->
  (forall x1:int. forall i2:int. ((andb((if dynamic_invariant(x1, true, true,
  true, true) then true else false), (if ((1 <= i2) and
  (i2 <= r2b)) then true else false)) = true) -> in_range1((x1 + 1))))))))))))))))))))))))))))))))))
