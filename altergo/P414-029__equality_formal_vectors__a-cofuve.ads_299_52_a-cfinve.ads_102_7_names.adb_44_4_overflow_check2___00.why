(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep

logic bool_eq : us_rep, us_rep -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant(temp___expr_365: int, temp___is_init_361: bool,
  temp___skip_constant_362: bool, temp___do_toplevel_363: bool,
  temp___do_typ_inv_364: bool) = (((temp___is_init_361 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_365))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq2(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq3(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

function last(container: us_rep) : int = (0 + length(container))

logic last__function_guard : int, us_rep -> prop

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type name_id

logic name_idqtint : name_id -> int

axiom name_idqtaxiom : (forall i:name_id. (0 <= name_idqtint(i)))

axiom name_idqtaxiom1 : (forall i:name_id. (name_idqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : name_id, name_id -> bool

logic dummy3 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref_name_id__content__projection(a: name_id__ref) : name_id =
  (a).name_id__content

function to_rep1(x: name_id) : int = name_idqtint(x)

logic of_rep1 : int -> name_id

axiom inversion_axiom1 :
  (forall x:name_id [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:name_id [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type char_table_index

logic char_table_indexqtint : char_table_index -> int

axiom char_table_indexqtaxiom :
  (forall i:char_table_index. (0 <= char_table_indexqtint(i)))

axiom char_table_indexqtaxiom1 :
  (forall i:char_table_index. (char_table_indexqtint(i) <= 2147483646))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483646))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : char_table_index, char_table_index -> bool

logic dummy4 : char_table_index

type char_table_index__ref = { char_table_index__content : char_table_index
}

function char_table_index__ref_char_table_index__content__projection(a: char_table_index__ref) : char_table_index =
  (a).char_table_index__content

function to_rep2(x: char_table_index) : int = char_table_indexqtint(x)

logic of_rep2 : int -> char_table_index

axiom inversion_axiom2 :
  (forall x:char_table_index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:char_table_index [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields = { rec__names__name_entry__table_index :
char_table_index; rec__names__name_entry__length : positive;
rec__names__name_entry__next_hash : name_id
}

function us_split_fields_rec__names__name_entry__table_index__projection(a: us_split_fields) : char_table_index =
  (a).rec__names__name_entry__table_index

function us_split_fields_rec__names__name_entry__length__projection(a: us_split_fields) : positive =
  (a).rec__names__name_entry__length

function us_split_fields_rec__names__name_entry__next_hash__projection(a: us_split_fields) : name_id =
  (a).rec__names__name_entry__next_hash

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep2(((a).us_split_fields1).rec__names__name_entry__table_index) = to_rep2(((b).us_split_fields1).rec__names__name_entry__table_index)) and
  (to_rep(((a).us_split_fields1).rec__names__name_entry__length) = to_rep(((b).us_split_fields1).rec__names__name_entry__length))) and
  (to_rep1(((a).us_split_fields1).rec__names__name_entry__next_hash) = to_rep1(((b).us_split_fields1).rec__names__name_entry__next_hash))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic names__name_entry__table_index__first__bit : int

logic names__name_entry__table_index__last__bit : int

logic names__name_entry__table_index__position : int

axiom names__name_entry__table_index__first__bit_axiom :
  (0 <= names__name_entry__table_index__first__bit)

axiom names__name_entry__table_index__last__bit_axiom :
  (names__name_entry__table_index__first__bit <  names__name_entry__table_index__last__bit)

axiom names__name_entry__table_index__position_axiom :
  (0 <= names__name_entry__table_index__position)

logic names__name_entry__length__first__bit : int

logic names__name_entry__length__last__bit : int

logic names__name_entry__length__position : int

axiom names__name_entry__length__first__bit_axiom :
  (0 <= names__name_entry__length__first__bit)

axiom names__name_entry__length__last__bit_axiom :
  (names__name_entry__length__first__bit <  names__name_entry__length__last__bit)

axiom names__name_entry__length__position_axiom :
  (0 <= names__name_entry__length__position)

logic names__name_entry__next_hash__first__bit : int

logic names__name_entry__next_hash__last__bit : int

logic names__name_entry__next_hash__position : int

axiom names__name_entry__next_hash__first__bit_axiom :
  (0 <= names__name_entry__next_hash__first__bit)

axiom names__name_entry__next_hash__last__bit_axiom :
  (names__name_entry__next_hash__first__bit <  names__name_entry__next_hash__last__bit)

axiom names__name_entry__next_hash__position_axiom :
  (0 <= names__name_entry__next_hash__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type name_entry__ref = { name_entry__content : us_rep1
}

function name_entry__ref_name_entry__content__projection(a: name_entry__ref) : us_rep1 =
  (a).name_entry__content

type element_type__ref = { element_type__content : us_rep1
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref) : us_rep1 =
  (a).element_type__content

logic get : us_rep, int -> us_rep1

logic get__function_guard : us_rep1, us_rep, int -> prop

function oeq(left: us_rep, right: us_rep) : bool =
  andb(bool_eq2(length(left), length(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (bool_eq7(get(left,
      n), get(right, n)) = true))) then true else false))

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep [user_eq(a, b)]. (user_eq(a, b) = oeq(a,
  b)))

predicate default_initial_assumption(temp___expr_496: us_rep,
  temp___skip_top_level_497: bool) =
  ((not (temp___skip_top_level_497 = true)) -> (length(temp___expr_496) = 0))

axiom length__post_axiom :
  (forall container:us_rep [length(container)].
  ((0 + length(container)) <= 2147483647))

axiom length__post_axiom1 :
  (forall container:us_rep [length(container)].
  dynamic_invariant(length(container), true, false, true, true))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : extended_index, extended_index -> bool

logic dummy6 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__4__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant1(temp___expr_488: int, temp___is_init_484: bool,
  temp___skip_constant_485: bool, temp___do_toplevel_486: bool,
  temp___do_typ_inv_487: bool) = (((temp___is_init_484 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_488))

logic container : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic position : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic new_item : us_rep1

logic attr__ATTRIBUTE_ADDRESS2 : int

type tname_idB

logic tname_idBqtint : tname_idB -> int

axiom tname_idBqtaxiom :
  (forall i:tname_idB. ((- 2147483648) <= tname_idBqtint(i)))

axiom tname_idBqtaxiom1 :
  (forall i:tname_idB. (tname_idBqtint(i) <= 2147483647))

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : tname_idB, tname_idB -> bool

logic dummy7 : tname_idB

type tname_idB__ref = { tname_idB__content : tname_idB
}

function tname_idB__ref_tname_idB__content__projection(a: tname_idB__ref) : tname_idB =
  (a).tname_idB__content

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq8 : index_type, index_type -> bool

logic dummy8 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__4__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant2(temp___expr_471: int, temp___is_init_467: bool,
  temp___skip_constant_468: bool, temp___do_toplevel_469: bool,
  temp___do_typ_inv_470: bool) = (((temp___is_init_467 = true) or
  (1 <= 2147483647)) -> in_range7(temp___expr_471))

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant4(temp___expr_337: int, temp___is_init_333: bool,
  temp___skip_constant_334: bool, temp___do_toplevel_335: bool,
  temp___do_typ_inv_336: bool) = (((temp___is_init_333 = true) or
  (0 <= 2147483646)) -> in_range4(temp___expr_337))

predicate dynamic_invariant5(temp___expr_282: int, temp___is_init_278: bool,
  temp___skip_constant_279: bool, temp___do_toplevel_280: bool,
  temp___do_typ_inv_281: bool) = (((temp___is_init_278 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_282))

 (* File "a-cofuve.ads", line 287, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(position, true, false, true, true) ->
  (let o = length(container) : int in ((dynamic_invariant(o, true, false,
  true, true) and ((0 + o) <= 2147483647)) -> (((not (o <  2147483647)) or
  (let o1 = container : us_rep in (let o2 = last(o1) : int in
  (dynamic_invariant1(o2, true, false, true, true) and
  (o2 = (0 + length(o1))))))) -> (((o <  2147483647) and
  (last(container) <  2147483647)) -> (let o1 = container : us_rep in
  (let o2 = last(o1) : int in ((dynamic_invariant1(o2, true, false, true,
  true) and (o2 = (0 + length(o1)))) -> (not (o2 = 2147483647))))))))))
