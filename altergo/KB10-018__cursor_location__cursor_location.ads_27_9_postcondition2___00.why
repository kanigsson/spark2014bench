(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic change_side : int -> int

logic change_side__function_guard : int, int -> prop

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)]))))))))

logic fulfill_condition : int, (int,bool) farray, (int,bool) farray -> bool

logic fulfill_condition__function_guard : bool, int, (int,bool) farray,
  (int,bool) farray -> prop

type location

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : location, location -> bool

logic dummy : location

type location__ref = { location__content : location
}

function location__ref_location__content__projection(a: location__ref) : location =
  (a).location__content

predicate dynamic_invariant(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (1 <= 2)) -> in_range1(temp___expr_169))

axiom fulfill_condition__post_axiom :
  (forall side:int. (dynamic_invariant(side, true, true, true, true) ->
  (forall side1:int. change_side__function_guard(change_side(side1), side1))))

axiom fulfill_condition__post_axiom1 :
  (forall side:int.
  (forall request:(int,bool) farray. forall du_available:(int,bool) farray
  [fulfill_condition(side, request, du_available)]. (dynamic_invariant(side,
  true, true, true, true) ->
  (fulfill_condition__function_guard(fulfill_condition(side, request,
  du_available), side, request, du_available) ->
  ((du_available[side]) = true)))))

axiom fulfill_condition__post_axiom2 :
  (forall side:int.
  (forall request:(int,bool) farray. forall du_available:(int,bool) farray
  [fulfill_condition(side, request, du_available)]. (dynamic_invariant(side,
  true, true, true, true) ->
  (fulfill_condition__function_guard(fulfill_condition(side, request,
  du_available), side, request, du_available) -> (((request[side]) = true) or
  (not ((du_available[change_side(side)]) = true)))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic request : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic du_available : (int,bool) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic none_available : (int,bool) farray -> bool

logic none_available__function_guard : bool, (int,bool) farray -> prop

axiom none_available__post_axiom :
  (forall du_available1:(int,bool) farray [none_available(du_available1)].
  (none_available__function_guard(none_available(du_available1),
  du_available1) -> (not ((du_available1[1]) = true))))

axiom none_available__post_axiom1 :
  (forall du_available1:(int,bool) farray [none_available(du_available1)].
  (none_available__function_guard(none_available(du_available1),
  du_available1) -> (not ((du_available1[2]) = true))))

type extended_location

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : extended_location, extended_location -> bool

logic dummy1 : extended_location

type extended_location__ref = { extended_location__content :
extended_location
}

function extended_location__ref_extended_location__content__projection(a: extended_location__ref) : extended_location =
  (a).extended_location__content

predicate dynamic_invariant1(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 2)) -> in_range2(temp___expr_162))

axiom change_side__post_axiom :
  (forall side:int [change_side(side)]. (dynamic_invariant(side, true, true,
  true, true) -> (let result = change_side(side) : int in
  (change_side__function_guard(result, side) -> dynamic_invariant(result,
  true, false, true, true)))))

axiom change_side__def_axiom :
  (forall side:int [change_side(side)]. (dynamic_invariant(side, true, true,
  true, true) -> (change_side(side) = (if (side = 1) then 2 else 1))))

 (* File "cursor_location.ads", line 22, characters 0-0 *)
goal defqtvc :
  (forall current:int. (dynamic_invariant1(current, true, false, true,
  true) ->
  (forall current1:int. (change_side__function_guard(change_side(1), 1) ->
  (change_side__function_guard(change_side(2), 2) -> ((let o = du_available
  : (int,bool) farray in (let o1 = request : (int,bool) farray in (let o2 =
  fulfill_condition(1, o1, o) : bool in
  ((fulfill_condition__function_guard(o2, 1, o1, o) and (((o[1]) = true) and
  (((o1[1]) = true) or (not ((o[change_side(1)]) = true))))) and
  (exists spark__branch:bool. ((spark__branch = o2) and
  (if (spark__branch = true) then (current1 = 1) else (let o3 = du_available
  : (int,bool) farray in (let o4 = request : (int,bool) farray in (let o5 =
  fulfill_condition(2, o4, o3) : bool in
  ((fulfill_condition__function_guard(o5, 2, o4, o3) and
  (((o3[2]) = true) and (((o4[2]) = true) or
  (not ((o3[change_side(2)]) = true))))) and
  (exists spark__branch1:bool. ((spark__branch1 = o5) and
  (if (spark__branch1 = true) then (current1 = 2) else (let o6 = du_available
  : (int,bool) farray in (let o7 = none_available(o6) : bool in
  ((none_available__function_guard(o7, o6) and ((not ((o6[1]) = true)) and
  (not ((o6[2]) = true)))) and
  (exists spark__branch2:bool. ((spark__branch2 = o7) and
  (if (spark__branch2 = true) then (current1 = 0) else (current1 = current))))))))))))))))))))) ->
  ((not ((du_available[1]) = true)) -> (not (current1 = 1)))))))))
