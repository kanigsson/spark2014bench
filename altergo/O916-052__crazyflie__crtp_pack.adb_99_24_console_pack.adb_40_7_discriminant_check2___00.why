(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int1(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

type crpt_packet_representation

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : crpt_packet_representation,
  crpt_packet_representation -> bool

logic dummy3 : crpt_packet_representation

type crpt_packet_representation__ref = { crpt_packet_representation__content
: crpt_packet_representation
}

function crpt_packet_representation__ref_crpt_packet_representation__content__projection(a: crpt_packet_representation__ref) : crpt_packet_representation =
  (a).crpt_packet_representation__content

logic to_rep1 : crpt_packet_representation -> int

logic of_rep1 : int -> crpt_packet_representation

axiom inversion_axiom1 :
  (forall x:crpt_packet_representation [to_rep1(x)].
  (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:crpt_packet_representation [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t_uint8

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq6(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic user_eq4 : t_uint8, t_uint8 -> bool

logic dummy4 : t_uint8

type t_uint8__ref = { t_uint8__content : t_uint8
}

function t_uint8__ref_t_uint8__content__projection(a: t_uint8__ref) : t_uint8 =
  (a).t_uint8__content

logic to_rep2 : t_uint8 -> t

logic of_rep2 : t -> t_uint8

axiom inversion_axiom2 :
  (forall x:t_uint8 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int2(x: t_uint8) : int = tqtint(to_rep2(x))

axiom range_int_axiom :
  (forall x:t_uint8 [to_int2(x)]. uint_in_range(to_int2(x)))

type crtp_channel

logic attr__ATTRIBUTE_MODULUS1 : t

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 3)

predicate in_range5(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 3))

function bool_eq7(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq5 : crtp_channel, crtp_channel -> bool

logic dummy5 : crtp_channel

type crtp_channel__ref = { crtp_channel__content : crtp_channel
}

function crtp_channel__ref_crtp_channel__content__projection(a: crtp_channel__ref) : crtp_channel =
  (a).crtp_channel__content

logic to_rep3 : crtp_channel -> t

logic of_rep3 : t -> crtp_channel

axiom inversion_axiom3 :
  (forall x:crtp_channel [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom2 :
  (forall x:crtp_channel [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:t [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

function to_int3(x: crtp_channel) : int = tqtint(to_rep3(x))

axiom range_int_axiom1 :
  (forall x:crtp_channel [to_int3(x)]. in_range_int(to_int3(x)))

type crtp_reserved

logic attr__ATTRIBUTE_MODULUS2 : t

predicate in_range6(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 3))

function bool_eq8(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> t

logic user_eq6 : crtp_reserved, crtp_reserved -> bool

logic dummy6 : crtp_reserved

type crtp_reserved__ref = { crtp_reserved__content : crtp_reserved
}

function crtp_reserved__ref_crtp_reserved__content__projection(a: crtp_reserved__ref) : crtp_reserved =
  (a).crtp_reserved__content

logic to_rep4 : crtp_reserved -> t

logic of_rep4 : t -> crtp_reserved

axiom inversion_axiom4 :
  (forall x:crtp_reserved [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom3 :
  (forall x:crtp_reserved [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:t [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

function to_int4(x: crtp_reserved) : int = tqtint(to_rep4(x))

axiom range_int_axiom2 :
  (forall x:crtp_reserved [to_int4(x)]. in_range_int1(to_int4(x)))

type crtp_port

predicate in_range7(x: int) = ((0 <= x) and (x <= 6))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : crtp_port, crtp_port -> bool

logic dummy7 : crtp_port

type crtp_port__ref = { crtp_port__content : crtp_port
}

function crtp_port__ref_crtp_port__content__projection(a: crtp_port__ref) : crtp_port =
  (a).crtp_port__content

logic to_rep5 : crtp_port -> int

logic of_rep5 : int -> crtp_port

axiom inversion_axiom5 :
  (forall x:crtp_port [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom4 : (forall x:crtp_port [to_rep5(x)]. in_range7(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range7(x) ->
  (to_rep5(of_rep5(x)) = x)))

type map__ref = { map__content : (int,t_uint8) farray
}

logic slide : (int,t_uint8) farray, int, int -> (int,t_uint8) farray

axiom slide_eq :
  (forall a:(int,t_uint8) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,t_uint8) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq10(a: (int,t_uint8) farray, a__first: int, a__last: int,
  b: (int,t_uint8) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,t_uint8) farray. forall b:(int,t_uint8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,t_uint8) farray. forall b:(int,t_uint8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,t_uint8) farray. forall b:(int,t_uint8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,t_uint8) farray. forall b:(int,t_uint8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq10(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep2((a[temp___idx_155])) = to_rep2((b[((b__first - a__first) + temp___idx_155)]))))))))

logic dummy8 : (int,t_uint8) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq8 : (int,t_uint8) farray, (int,t_uint8) farray -> bool

logic dummy9 : (int,t_uint8) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq9 : (int,t_uint8) farray, (int,t_uint8) farray -> bool

type us_split_discrs = { rec__crtp_pack__crtp_packet__repr :
crpt_packet_representation
}

function us_split_discrs_rec__crtp_pack__crtp_packet__repr__projection(a: us_split_discrs) : crpt_packet_representation =
  (a).rec__crtp_pack__crtp_packet__repr

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__crtp_pack__crtp_packet__size : t_uint8;
rec__crtp_pack__crtp_packet__channel : crtp_channel;
rec__crtp_pack__crtp_packet__reserved : crtp_reserved;
rec__crtp_pack__crtp_packet__port : crtp_port;
rec__crtp_pack__crtp_packet__data_1 : (int,t_uint8) farray;
rec__crtp_pack__crtp_packet__header : t_uint8;
rec__crtp_pack__crtp_packet__data_2 : (int,t_uint8) farray;
rec__crtp_pack__crtp_packet__raw : (int,t_uint8) farray
}

function us_split_fields_rec__crtp_pack__crtp_packet__size__projection(a: us_split_fields) : t_uint8 =
  (a).rec__crtp_pack__crtp_packet__size

function us_split_fields_rec__crtp_pack__crtp_packet__channel__projection(a: us_split_fields) : crtp_channel =
  (a).rec__crtp_pack__crtp_packet__channel

function us_split_fields_rec__crtp_pack__crtp_packet__reserved__projection(a: us_split_fields) : crtp_reserved =
  (a).rec__crtp_pack__crtp_packet__reserved

function us_split_fields_rec__crtp_pack__crtp_packet__port__projection(a: us_split_fields) : crtp_port =
  (a).rec__crtp_pack__crtp_packet__port

function us_split_fields_rec__crtp_pack__crtp_packet__data_1__projection(a: us_split_fields) : (int,t_uint8) farray =
  (a).rec__crtp_pack__crtp_packet__data_1

function us_split_fields_rec__crtp_pack__crtp_packet__header__projection(a: us_split_fields) : t_uint8 =
  (a).rec__crtp_pack__crtp_packet__header

function us_split_fields_rec__crtp_pack__crtp_packet__data_2__projection(a: us_split_fields) : (int,t_uint8) farray =
  (a).rec__crtp_pack__crtp_packet__data_2

function us_split_fields_rec__crtp_pack__crtp_packet__raw__projection(a: us_split_fields) : (int,t_uint8) farray =
  (a).rec__crtp_pack__crtp_packet__raw

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate crtp_pack__crtp_packet__channel__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 0)

predicate crtp_pack__crtp_packet__reserved__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 0)

predicate crtp_pack__crtp_packet__port__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 0)

predicate crtp_pack__crtp_packet__data_1__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 0)

predicate crtp_pack__crtp_packet__header__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 1)

predicate crtp_pack__crtp_packet__data_2__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 1)

predicate crtp_pack__crtp_packet__raw__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 2)

function bool_eq11(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = to_rep1(((b).us_split_discrs1).rec__crtp_pack__crtp_packet__repr)) and
  (((to_rep2(((a).us_split_fields1).rec__crtp_pack__crtp_packet__size) = to_rep2(((b).us_split_fields1).rec__crtp_pack__crtp_packet__size)) and
  (crtp_pack__crtp_packet__channel__pred(a) ->
  (to_rep3(((a).us_split_fields1).rec__crtp_pack__crtp_packet__channel) = to_rep3(((b).us_split_fields1).rec__crtp_pack__crtp_packet__channel)))) and
  ((((crtp_pack__crtp_packet__reserved__pred(a) ->
  (to_rep4(((a).us_split_fields1).rec__crtp_pack__crtp_packet__reserved) = to_rep4(((b).us_split_fields1).rec__crtp_pack__crtp_packet__reserved))) and
  (crtp_pack__crtp_packet__port__pred(a) ->
  (to_rep5(((a).us_split_fields1).rec__crtp_pack__crtp_packet__port) = to_rep5(((b).us_split_fields1).rec__crtp_pack__crtp_packet__port)))) and
  (crtp_pack__crtp_packet__data_1__pred(a) ->
  (bool_eq10(((a).us_split_fields1).rec__crtp_pack__crtp_packet__data_1, 1,
  30, ((b).us_split_fields1).rec__crtp_pack__crtp_packet__data_1, 1,
  30) = true))) and (((crtp_pack__crtp_packet__header__pred(a) ->
  (to_rep2(((a).us_split_fields1).rec__crtp_pack__crtp_packet__header) = to_rep2(((b).us_split_fields1).rec__crtp_pack__crtp_packet__header))) and
  (crtp_pack__crtp_packet__data_2__pred(a) ->
  (bool_eq10(((a).us_split_fields1).rec__crtp_pack__crtp_packet__data_2, 1,
  30, ((b).us_split_fields1).rec__crtp_pack__crtp_packet__data_2, 1,
  30) = true))) and (crtp_pack__crtp_packet__raw__pred(a) ->
  (bool_eq10(((a).us_split_fields1).rec__crtp_pack__crtp_packet__raw, 1, 31,
  ((b).us_split_fields1).rec__crtp_pack__crtp_packet__raw, 1,
  31) = true)))))) then true else false)

predicate in_range8(rec__crtp_pack__crtp_packet__repr1: int,
  a: us_split_discrs) =
  (rec__crtp_pack__crtp_packet__repr1 = to_rep1((a).rec__crtp_pack__crtp_packet__repr))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic crtp_pack__crtp_packet__repr__first__bit : int

logic crtp_pack__crtp_packet__repr__last__bit : int

logic crtp_pack__crtp_packet__repr__position : int

axiom crtp_pack__crtp_packet__repr__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__repr__first__bit)

axiom crtp_pack__crtp_packet__repr__last__bit_axiom :
  (crtp_pack__crtp_packet__repr__first__bit <  crtp_pack__crtp_packet__repr__last__bit)

axiom crtp_pack__crtp_packet__repr__position_axiom :
  (0 <= crtp_pack__crtp_packet__repr__position)

logic crtp_pack__crtp_packet__size__first__bit : int

logic crtp_pack__crtp_packet__size__last__bit : int

logic crtp_pack__crtp_packet__size__position : int

axiom crtp_pack__crtp_packet__size__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__size__first__bit)

axiom crtp_pack__crtp_packet__size__last__bit_axiom :
  (crtp_pack__crtp_packet__size__first__bit <  crtp_pack__crtp_packet__size__last__bit)

axiom crtp_pack__crtp_packet__size__position_axiom :
  (0 <= crtp_pack__crtp_packet__size__position)

logic crtp_pack__crtp_packet__channel__first__bit : int

logic crtp_pack__crtp_packet__channel__last__bit : int

logic crtp_pack__crtp_packet__channel__position : int

axiom crtp_pack__crtp_packet__channel__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__channel__first__bit)

axiom crtp_pack__crtp_packet__channel__last__bit_axiom :
  (crtp_pack__crtp_packet__channel__first__bit <  crtp_pack__crtp_packet__channel__last__bit)

axiom crtp_pack__crtp_packet__channel__position_axiom :
  (0 <= crtp_pack__crtp_packet__channel__position)

logic crtp_pack__crtp_packet__reserved__first__bit : int

logic crtp_pack__crtp_packet__reserved__last__bit : int

logic crtp_pack__crtp_packet__reserved__position : int

axiom crtp_pack__crtp_packet__reserved__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__reserved__first__bit)

axiom crtp_pack__crtp_packet__reserved__last__bit_axiom :
  (crtp_pack__crtp_packet__reserved__first__bit <  crtp_pack__crtp_packet__reserved__last__bit)

axiom crtp_pack__crtp_packet__reserved__position_axiom :
  (0 <= crtp_pack__crtp_packet__reserved__position)

logic crtp_pack__crtp_packet__port__first__bit : int

logic crtp_pack__crtp_packet__port__last__bit : int

logic crtp_pack__crtp_packet__port__position : int

axiom crtp_pack__crtp_packet__port__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__port__first__bit)

axiom crtp_pack__crtp_packet__port__last__bit_axiom :
  (crtp_pack__crtp_packet__port__first__bit <  crtp_pack__crtp_packet__port__last__bit)

axiom crtp_pack__crtp_packet__port__position_axiom :
  (0 <= crtp_pack__crtp_packet__port__position)

logic crtp_pack__crtp_packet__data_1__first__bit : int

logic crtp_pack__crtp_packet__data_1__last__bit : int

logic crtp_pack__crtp_packet__data_1__position : int

axiom crtp_pack__crtp_packet__data_1__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__data_1__first__bit)

axiom crtp_pack__crtp_packet__data_1__last__bit_axiom :
  (crtp_pack__crtp_packet__data_1__first__bit <  crtp_pack__crtp_packet__data_1__last__bit)

axiom crtp_pack__crtp_packet__data_1__position_axiom :
  (0 <= crtp_pack__crtp_packet__data_1__position)

logic crtp_pack__crtp_packet__header__first__bit : int

logic crtp_pack__crtp_packet__header__last__bit : int

logic crtp_pack__crtp_packet__header__position : int

axiom crtp_pack__crtp_packet__header__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__header__first__bit)

axiom crtp_pack__crtp_packet__header__last__bit_axiom :
  (crtp_pack__crtp_packet__header__first__bit <  crtp_pack__crtp_packet__header__last__bit)

axiom crtp_pack__crtp_packet__header__position_axiom :
  (0 <= crtp_pack__crtp_packet__header__position)

logic crtp_pack__crtp_packet__data_2__first__bit : int

logic crtp_pack__crtp_packet__data_2__last__bit : int

logic crtp_pack__crtp_packet__data_2__position : int

axiom crtp_pack__crtp_packet__data_2__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__data_2__first__bit)

axiom crtp_pack__crtp_packet__data_2__last__bit_axiom :
  (crtp_pack__crtp_packet__data_2__first__bit <  crtp_pack__crtp_packet__data_2__last__bit)

axiom crtp_pack__crtp_packet__data_2__position_axiom :
  (0 <= crtp_pack__crtp_packet__data_2__position)

logic crtp_pack__crtp_packet__raw__first__bit : int

logic crtp_pack__crtp_packet__raw__last__bit : int

logic crtp_pack__crtp_packet__raw__position : int

axiom crtp_pack__crtp_packet__raw__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet__raw__first__bit)

axiom crtp_pack__crtp_packet__raw__last__bit_axiom :
  (crtp_pack__crtp_packet__raw__first__bit <  crtp_pack__crtp_packet__raw__last__bit)

axiom crtp_pack__crtp_packet__raw__position_axiom :
  (0 <= crtp_pack__crtp_packet__raw__position)

logic user_eq10 : us_rep, us_rep -> bool

logic dummy10 : us_rep

type crtp_packet__ref = { crtp_packet__content : us_rep
}

function crtp_packet__ref_crtp_packet__content__projection(a: crtp_packet__ref) : us_rep =
  (a).crtp_packet__content

type us_split_fields2 = { rec__crtp_pack__crtp_packet_handler__packet :
us_rep; rec__crtp_pack__crtp_packet_handler__index : positive
}

function us_split_fields_rec__crtp_pack__crtp_packet_handler__packet__projection(a: us_split_fields2) : us_rep =
  (a).rec__crtp_pack__crtp_packet_handler__packet

function us_split_fields_rec__crtp_pack__crtp_packet_handler__index__projection(a: us_split_fields2) : positive =
  (a).rec__crtp_pack__crtp_packet_handler__index

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq12(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq11(((a).us_split_fields3).rec__crtp_pack__crtp_packet_handler__packet,
  ((b).us_split_fields3).rec__crtp_pack__crtp_packet_handler__packet) = true) and
  (to_rep(((a).us_split_fields3).rec__crtp_pack__crtp_packet_handler__index) = to_rep(((b).us_split_fields3).rec__crtp_pack__crtp_packet_handler__index))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic crtp_pack__crtp_packet_handler__packet__first__bit : int

logic crtp_pack__crtp_packet_handler__packet__last__bit : int

logic crtp_pack__crtp_packet_handler__packet__position : int

axiom crtp_pack__crtp_packet_handler__packet__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet_handler__packet__first__bit)

axiom crtp_pack__crtp_packet_handler__packet__last__bit_axiom :
  (crtp_pack__crtp_packet_handler__packet__first__bit <  crtp_pack__crtp_packet_handler__packet__last__bit)

axiom crtp_pack__crtp_packet_handler__packet__position_axiom :
  (0 <= crtp_pack__crtp_packet_handler__packet__position)

logic crtp_pack__crtp_packet_handler__index__first__bit : int

logic crtp_pack__crtp_packet_handler__index__last__bit : int

logic crtp_pack__crtp_packet_handler__index__position : int

axiom crtp_pack__crtp_packet_handler__index__first__bit_axiom :
  (0 <= crtp_pack__crtp_packet_handler__index__first__bit)

axiom crtp_pack__crtp_packet_handler__index__last__bit_axiom :
  (crtp_pack__crtp_packet_handler__index__first__bit <  crtp_pack__crtp_packet_handler__index__last__bit)

axiom crtp_pack__crtp_packet_handler__index__position_axiom :
  (0 <= crtp_pack__crtp_packet_handler__index__position)

logic user_eq11 : us_rep1, us_rep1 -> bool

logic dummy11 : us_rep1

type crtp_packet_handler__ref = { crtp_packet_handler__content : us_rep1
}

function crtp_packet_handler__ref_crtp_packet_handler__content__projection(a: crtp_packet_handler__ref) : us_rep1 =
  (a).crtp_packet_handler__content

predicate default_initial_assumption(temp___expr_295: us_rep1,
  temp___skip_top_level_296: bool) =
  (to_rep1(((((temp___expr_295).us_split_fields3).rec__crtp_pack__crtp_packet_handler__packet).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 0)

logic attr__ATTRIBUTE_ADDRESS : int

logic data : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic data_size : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic data_to_byte_array : int -> (int,t_uint8) farray

logic data_to_byte_array__function_guard : (int,t_uint8) farray, int -> prop

type t_data

predicate in_range9(x: int) = ((0 <= x) and (x <= 255))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq12 : t_data, t_data -> bool

logic dummy12 : t_data

type t_data__ref = { t_data__content : t_data
}

function t_data__ref_t_data__content__projection(a: t_data__ref) : t_data =
  (a).t_data__content

predicate dynamic_invariant3(temp___expr_367: int, temp___is_init_363: bool,
  temp___skip_constant_364: bool, temp___do_toplevel_365: bool,
  temp___do_typ_inv_366: bool) = (((temp___is_init_363 = true) or
  (0 <= 255)) -> in_range9(temp___expr_367))

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r7b : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type tcrtp_dataP1

logic tcrtp_dataP1qtint : tcrtp_dataP1 -> int

axiom tcrtp_dataP1qtaxiom :
  (forall i:tcrtp_dataP1. (1 <= tcrtp_dataP1qtint(i)))

axiom tcrtp_dataP1qtaxiom1 :
  (forall i:tcrtp_dataP1. (tcrtp_dataP1qtint(i) <= 30))

predicate in_range10(x: int) = ((1 <= x) and (x <= 30))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq13 : tcrtp_dataP1, tcrtp_dataP1 -> bool

logic dummy13 : tcrtp_dataP1

type tcrtp_dataP1__ref = { tcrtp_dataP1__content : tcrtp_dataP1
}

function tcrtp_dataP1__ref_tcrtp_dataP1__content__projection(a: tcrtp_dataP1__ref) : tcrtp_dataP1 =
  (a).tcrtp_dataP1__content

type tbyte_array_dataP1

logic tbyte_array_dataP1qtint : tbyte_array_dataP1 -> int

axiom tbyte_array_dataP1qtaxiom :
  (forall i:tbyte_array_dataP1. (1 <= tbyte_array_dataP1qtint(i)))

axiom tbyte_array_dataP1qtaxiom1 :
  (forall i:tbyte_array_dataP1. (tbyte_array_dataP1qtint(i) <= 1))

predicate in_range11(x: int) = ((1 <= x) and (x <= 1))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq14 : tbyte_array_dataP1, tbyte_array_dataP1 -> bool

logic dummy14 : tbyte_array_dataP1

type tbyte_array_dataP1__ref = { tbyte_array_dataP1__content :
tbyte_array_dataP1
}

function tbyte_array_dataP1__ref_tbyte_array_dataP1__content__projection(a: tbyte_array_dataP1__ref) : tbyte_array_dataP1 =
  (a).tbyte_array_dataP1__content

function to_rep6(x: integer) : int = integerqtint(x)

logic of_rep6 : int -> integer

axiom inversion_axiom6 :
  (forall x:integer [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom5 : (forall x:integer [to_rep6(x)]. in_range1(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range1(x) ->
  (to_rep6(of_rep6(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep6(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep6(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,t_uint8) farray; rt : t1
}

function to_array(a: us_t) : (int,t_uint8) farray = (a).elts

function of_array(a: (int,t_uint8) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep6(first((a).rt))

function last1(a: us_t) : int = to_rep6(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size4 : int

logic object__size4 : int

logic component__size2 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom4 : (0 <= alignment4)

function bool_eq16(x: us_t, y: us_t) : bool = bool_eq10((x).elts,
  to_rep6(first((x).rt)), to_rep6(last((x).rt)), (y).elts,
  to_rep6(first((y).rt)), to_rep6(last((y).rt)))

logic user_eq15 : us_t, us_t -> bool

logic dummy15 : us_t

type t_uint8_array__ref = { t_uint8_array__content : us_t
}

function t_uint8_array__ref_t_uint8_array__content__projection(a: t_uint8_array__ref) : us_t =
  (a).t_uint8_array__content

type t9b__ref = { t9b__content : us_t
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : us_t =
  (a).t9b__content

predicate dynamic_invariant4(temp___expr_217: t, temp___is_init_213: bool,
  temp___skip_constant_214: bool, temp___do_toplevel_215: bool,
  temp___do_typ_inv_216: bool) = (((temp___is_init_213 = true) or
  ule(rliteral, rliteral1)) -> in_range5(temp___expr_217))

predicate dynamic_invariant5(temp___expr_231: int, temp___is_init_227: bool,
  temp___skip_constant_228: bool, temp___do_toplevel_229: bool,
  temp___do_typ_inv_230: bool) = (((temp___is_init_227 = true) or
  (0 <= 6)) -> in_range7(temp___expr_231))

predicate dynamic_invariant6(temp___expr_224: t, temp___is_init_220: bool,
  temp___skip_constant_221: bool, temp___do_toplevel_222: bool,
  temp___do_typ_inv_223: bool) = (((temp___is_init_220 = true) or
  ule(rliteral, rliteral1)) -> in_range6(temp___expr_224))

predicate dynamic_invariant7(temp___expr_196: int, temp___is_init_192: bool,
  temp___skip_constant_193: bool, temp___do_toplevel_194: bool,
  temp___do_typ_inv_195: bool) = (((temp___is_init_192 = true) or
  (0 <= 2)) -> in_range4(temp___expr_196))

predicate default_initial_assumption1(temp___expr_269: us_rep,
  temp___skip_top_level_270: bool) =
  (to_rep1(((temp___expr_269).us_split_discrs1).rec__crtp_pack__crtp_packet__repr) = 0)

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 255)

predicate dynamic_invariant8(temp___expr_210: t, temp___is_init_206: bool,
  temp___skip_constant_207: bool, temp___do_toplevel_208: bool,
  temp___do_typ_inv_209: bool) = true

axiom data_size__def_axiom : (data_size = 1)

 (* File "console_pack.adb", line 40, characters 0-0 *)
goal defqtvc :
  (forall handler__split_fields:us_split_fields2. (dynamic_invariant3(data,
  true, false, true, true) -> (dynamic_invariant(data_size, true, false,
  true, true) ->
  (forall o:int.
  ((to_rep((handler__split_fields).rec__crtp_pack__crtp_packet_handler__index) = o) ->
  (let o1 = (o + 1) : int in (in_range1(o1) ->
  (forall spark__branch:bool.
  ((spark__branch = (if ((o1 - 1) <= 30) then true else false)) ->
  ((spark__branch = true) ->
  (forall console_pack__console_put_line__crtp_append_character_data__R6b__assume:int.
  ((to_rep((handler__split_fields).rec__crtp_pack__crtp_packet_handler__index) = console_pack__console_put_line__crtp_append_character_data__R6b__assume) ->
  ((console_pack__console_put_line__crtp_append_character_data__R6b__assume = r6b) ->
  (dynamic_invariant1(r6b, true, false, true, true) ->
  (forall o2:int.
  ((to_rep((handler__split_fields).rec__crtp_pack__crtp_packet_handler__index) = o2) ->
  (let o3 = (o2 + 1) : int in (in_range1(o3) -> (((o3 - 1) = r7b) ->
  (dynamic_invariant2(r7b, true, false, true, true) ->
  crtp_pack__crtp_packet__data_1__pred((handler__split_fields).rec__crtp_pack__crtp_packet_handler__packet)))))))))))))))))))))
