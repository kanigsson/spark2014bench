(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type component_type

logic component_typeqtint : component_type -> int

axiom component_typeqtaxiom :
  (forall i:component_type. (0 <= component_typeqtint(i)))

axiom component_typeqtaxiom1 :
  (forall i:component_type. (component_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : component_type, component_type -> bool

logic dummy1 : component_type

type component_type__ref = { component_type__content : component_type
}

function component_type__ref_component_type__content__projection(a: component_type__ref) : component_type =
  (a).component_type__content

type component_index_type

logic component_index_typeqtint : component_index_type -> int

axiom component_index_typeqtaxiom :
  (forall i:component_index_type. (1 <= component_index_typeqtint(i)))

axiom component_index_typeqtaxiom1 :
  (forall i:component_index_type. (component_index_typeqtint(i) <= 15))

predicate in_range3(x: int) = ((1 <= x) and (x <= 15))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : component_index_type, component_index_type -> bool

logic dummy2 : component_index_type

type component_index_type__ref = { component_index_type__content :
component_index_type
}

function component_index_type__ref_component_index_type__content__projection(a: component_index_type__ref) : component_index_type =
  (a).component_index_type__content

function to_rep1(x: component_type) : int = component_typeqtint(x)

logic of_rep1 : int -> component_type

axiom inversion_axiom1 :
  (forall x:component_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:component_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,component_type) farray
}

logic slide : (int,component_type) farray, int,
  int -> (int,component_type) farray

axiom slide_eq :
  (forall a:(int,component_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,component_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,component_type) farray, a__first: int,
  a__last: int, b: (int,component_type) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,component_type) farray.
  forall b:(int,component_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,component_type) farray; rt : t
}

function to_array(a: us_t) : (int,component_type) farray = (a).elts

function of_array(a: (int,component_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type component_array__ref = { component_array__content : us_t
}

function component_array__ref_component_array__content__projection(a: component_array__ref) : us_t =
  (a).component_array__content

type root_component_type

logic root_component_typeqtint : root_component_type -> int

axiom root_component_typeqtaxiom :
  (forall i:root_component_type. (0 <= root_component_typeqtint(i)))

axiom root_component_typeqtaxiom1 :
  (forall i:root_component_type. (root_component_typeqtint(i) <= 2))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : root_component_type, root_component_type -> bool

logic dummy4 : root_component_type

type root_component_type__ref = { root_component_type__content :
root_component_type
}

function root_component_type__ref_root_component_type__content__projection(a: root_component_type__ref) : root_component_type =
  (a).root_component_type__content

function to_rep2(x: root_component_type) : int = root_component_typeqtint(x)

logic of_rep2 : int -> root_component_type

axiom inversion_axiom2 :
  (forall x:root_component_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:root_component_type [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type second_level_component_type

logic second_level_component_typeqtint : second_level_component_type -> int

axiom second_level_component_typeqtaxiom :
  (forall i:second_level_component_type.
  (0 <= second_level_component_typeqtint(i)))

axiom second_level_component_typeqtaxiom1 :
  (forall i:second_level_component_type.
  (second_level_component_typeqtint(i) <= 175))

predicate in_range5(x: int) = ((0 <= x) and (x <= 175))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : second_level_component_type,
  second_level_component_type -> bool

logic dummy5 : second_level_component_type

type second_level_component_type__ref = {
second_level_component_type__content : second_level_component_type
}

function second_level_component_type__ref_second_level_component_type__content__projection(a: second_level_component_type__ref) : second_level_component_type =
  (a).second_level_component_type__content

function to_rep3(x: second_level_component_type) : int =
  second_level_component_typeqtint(x)

logic of_rep3 : int -> second_level_component_type

axiom inversion_axiom3 :
  (forall x:second_level_component_type [to_rep3(x)].
  (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:second_level_component_type [to_rep3(x)]. in_range5(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range5(x) ->
  (to_rep3(of_rep3(x)) = x)))

logic dummy6 : (int,component_type) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq6 : (int,component_type) farray,
  (int,component_type) farray -> bool

type other_count_type

logic other_count_typeqtint : other_count_type -> int

axiom other_count_typeqtaxiom :
  (forall i:other_count_type. (0 <= other_count_typeqtint(i)))

axiom other_count_typeqtaxiom1 :
  (forall i:other_count_type. (other_count_typeqtint(i) <= 13))

predicate in_range6(x: int) = ((0 <= x) and (x <= 13))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : other_count_type, other_count_type -> bool

logic dummy7 : other_count_type

type other_count_type__ref = { other_count_type__content : other_count_type
}

function other_count_type__ref_other_count_type__content__projection(a: other_count_type__ref) : other_count_type =
  (a).other_count_type__content

function to_rep4(x: other_count_type) : int = other_count_typeqtint(x)

logic of_rep4 : int -> other_count_type

axiom inversion_axiom4 :
  (forall x:other_count_type [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:other_count_type [to_rep4(x)]. in_range6(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range6(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields = {
rec__ada___hermes__oid__object_identifier__root_component :
root_component_type;
rec__ada___hermes__oid__object_identifier__second_level_component :
second_level_component_type;
rec__ada___hermes__oid__object_identifier__other_components :
(int,component_type) farray;
rec__ada___hermes__oid__object_identifier__other_component_count :
other_count_type
}

function us_split_fields_rec__ada___hermes__oid__object_identifier__root_component__projection(a: us_split_fields) : root_component_type =
  (a).rec__ada___hermes__oid__object_identifier__root_component

function us_split_fields_rec__ada___hermes__oid__object_identifier__second_level_component__projection(a: us_split_fields) : second_level_component_type =
  (a).rec__ada___hermes__oid__object_identifier__second_level_component

function us_split_fields_rec__ada___hermes__oid__object_identifier__other_components__projection(a: us_split_fields) : (int,component_type) farray =
  (a).rec__ada___hermes__oid__object_identifier__other_components

function us_split_fields_rec__ada___hermes__oid__object_identifier__other_component_count__projection(a: us_split_fields) : other_count_type =
  (a).rec__ada___hermes__oid__object_identifier__other_component_count

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep, b: us_rep) : bool =
  (if (((to_rep2(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__root_component) = to_rep2(((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__root_component)) and
  (to_rep3(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__second_level_component) = to_rep3(((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__second_level_component))) and
  ((bool_eq5(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_components,
  1, 13,
  ((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_components,
  1, 13) = true) and
  (to_rep4(((a).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = to_rep4(((b).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count)))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic ada___hermes__oid__object_identifier__root_component__first__bit : int

logic ada___hermes__oid__object_identifier__root_component__last__bit : int

logic ada___hermes__oid__object_identifier__root_component__position : int

axiom ada___hermes__oid__object_identifier__root_component__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__root_component__first__bit)

axiom ada___hermes__oid__object_identifier__root_component__last__bit_axiom :
  (ada___hermes__oid__object_identifier__root_component__first__bit <  ada___hermes__oid__object_identifier__root_component__last__bit)

axiom ada___hermes__oid__object_identifier__root_component__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__root_component__position)

logic ada___hermes__oid__object_identifier__second_level_component__first__bit : int

logic ada___hermes__oid__object_identifier__second_level_component__last__bit : int

logic ada___hermes__oid__object_identifier__second_level_component__position : int

axiom ada___hermes__oid__object_identifier__second_level_component__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__second_level_component__first__bit)

axiom ada___hermes__oid__object_identifier__second_level_component__last__bit_axiom :
  (ada___hermes__oid__object_identifier__second_level_component__first__bit <  ada___hermes__oid__object_identifier__second_level_component__last__bit)

axiom ada___hermes__oid__object_identifier__second_level_component__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__second_level_component__position)

logic ada___hermes__oid__object_identifier__other_components__first__bit : int

logic ada___hermes__oid__object_identifier__other_components__last__bit : int

logic ada___hermes__oid__object_identifier__other_components__position : int

axiom ada___hermes__oid__object_identifier__other_components__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_components__first__bit)

axiom ada___hermes__oid__object_identifier__other_components__last__bit_axiom :
  (ada___hermes__oid__object_identifier__other_components__first__bit <  ada___hermes__oid__object_identifier__other_components__last__bit)

axiom ada___hermes__oid__object_identifier__other_components__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_components__position)

logic ada___hermes__oid__object_identifier__other_component_count__first__bit : int

logic ada___hermes__oid__object_identifier__other_component_count__last__bit : int

logic ada___hermes__oid__object_identifier__other_component_count__position : int

axiom ada___hermes__oid__object_identifier__other_component_count__first__bit_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_component_count__first__bit)

axiom ada___hermes__oid__object_identifier__other_component_count__last__bit_axiom :
  (ada___hermes__oid__object_identifier__other_component_count__first__bit <  ada___hermes__oid__object_identifier__other_component_count__last__bit)

axiom ada___hermes__oid__object_identifier__other_component_count__position_axiom :
  (0 <= ada___hermes__oid__object_identifier__other_component_count__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type object_identifier__ref = { object_identifier__content : us_rep
}

function object_identifier__ref_object_identifier__content__projection(a: object_identifier__ref) : us_rep =
  (a).object_identifier__content

logic identifier : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type component_count_type

logic component_count_typeqtint : component_count_type -> int

axiom component_count_typeqtaxiom :
  (forall i:component_count_type. (0 <= component_count_typeqtint(i)))

axiom component_count_typeqtaxiom1 :
  (forall i:component_count_type. (component_count_typeqtint(i) <= 15))

predicate in_range7(x: int) = ((0 <= x) and (x <= 15))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq9 : component_count_type, component_count_type -> bool

logic dummy9 : component_count_type

type component_count_type__ref = { component_count_type__content :
component_count_type
}

function component_count_type__ref_component_count_type__content__projection(a: component_count_type__ref) : component_count_type =
  (a).component_count_type__content

predicate dynamic_invariant(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (0 <= 15)) -> in_range7(temp___expr_170))

type t10b__ref = { t10b__content : us_t
}

function t10b__ref_t10b__content__projection(a: t10b__ref) : us_t =
  (a).t10b__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq10 : integer, integer -> bool

logic dummy10 : integer

type t11b__ref = { t11b__content : integer
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : integer =
  (a).t11b__content

logic temp_____aggregate_def_327 : int, int, int -> us_t

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant2(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_163))

logic rliteral : component_type

axiom rliteral_axiom : (component_typeqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___329:int. forall temp___330:int. forall temp___331:int.
  (dynamic_invariant2(temp___329, true, true, true, true) ->
  (dynamic_property(1, 15, temp___330, temp___331) ->
  (first1(temp_____aggregate_def_327(temp___329, temp___330,
  temp___331)) = temp___330))))

axiom def_axiom1 :
  (forall temp___329:int. forall temp___330:int. forall temp___331:int.
  (dynamic_invariant2(temp___329, true, true, true, true) ->
  (dynamic_property(1, 15, temp___330, temp___331) ->
  (last1(temp_____aggregate_def_327(temp___329, temp___330,
  temp___331)) = temp___331))))

axiom def_axiom2 :
  (forall temp___329:int. forall temp___330:int. forall temp___331:int.
  (dynamic_invariant2(temp___329, true, true, true, true) ->
  (forall temp___332:int. ((to_array(temp_____aggregate_def_327(temp___329,
  temp___330, temp___331))[temp___332]) = rliteral))))

predicate dynamic_invariant3(temp___expr_177: int, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  (1 <= 15)) -> in_range3(temp___expr_177))

predicate dynamic_invariant4(temp___expr_184: us_t, temp___is_init_180: bool,
  temp___skip_constant_181: bool, temp___do_toplevel_182: bool,
  temp___do_typ_inv_183: bool) = ((not (temp___skip_constant_181 = true)) ->
  dynamic_property(1, 15, first1(temp___expr_184), last1(temp___expr_184)))

predicate dynamic_invariant5(temp___expr_197: int, temp___is_init_193: bool,
  temp___skip_constant_194: bool, temp___do_toplevel_195: bool,
  temp___do_typ_inv_196: bool) = (((temp___is_init_193 = true) or
  (0 <= 2)) -> in_range4(temp___expr_197))

predicate dynamic_invariant6(temp___expr_204: int, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((temp___is_init_200 = true) or
  (0 <= 175)) -> in_range5(temp___expr_204))

predicate dynamic_invariant7(temp___expr_228: int, temp___is_init_224: bool,
  temp___skip_constant_225: bool, temp___do_toplevel_226: bool,
  temp___do_typ_inv_227: bool) = (((temp___is_init_224 = true) or
  (0 <= 13)) -> in_range6(temp___expr_228))

 (* File "hermes-oid.ads", line 38, characters 0-0 *)
goal defqtvc :
  (forall number_of_components:int. (dynamic_property(1, 15,
  to_rep(result____first), to_rep(result____last)) ->
  (dynamic_invariant(number_of_components, false, false, true, true) ->
  (forall o:int. ((to_rep(result____last) = o) ->
  (forall o1:int. ((to_rep(result____first) = o1) -> (let temp___333 =
  temp_____aggregate_def_327(0, o1, o) : us_t in
  ((first1(temp___333) = to_rep(result____first)) ->
  ((last1(temp___333) = to_rep(result____last)) -> (let temp___335 =
  of_array(to_array(temp___333), first1(temp___333), last1(temp___333))
  : us_t in
  ((if (first1(temp___335) <= last1(temp___335)) then ((to_rep(result____first) <= to_rep(result____last)) and
  ((last1(temp___335) - first1(temp___335)) = (to_rep(result____last) - to_rep(result____first)))) else (to_rep(result____last) <  to_rep(result____first))) ->
  (forall o2:int. ((to_rep(result____first) = o2) ->
  (forall result__:(int,component_type) farray.
  ((result__ = slide(to_array(temp___335), first1(temp___335), o2)) ->
  (forall o3:int. ((to_rep(result____last) = o3) ->
  (forall o4:int. ((to_rep(result____first) = o4) -> (let o5 = length(o4, o3)
  : int in (in_range1(o5) ->
  (forall o6:int.
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = o6) ->
  (forall spark__branch:bool.
  ((spark__branch = (if ((o6 + 2) <= o5) then true else false)) ->
  ((spark__branch = true) ->
  (forall o7:int.
  ((to_rep2(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__root_component) = o7) ->
  (forall o8:component_type. ((to_rep1(o8) = o7) ->
  (forall temp___337:int. ((to_rep(result____first) = temp___337) ->
  (((to_rep(result____first) <= temp___337) and
  (temp___337 <= to_rep(result____last))) ->
  (forall result__1:(int,component_type) farray.
  ((result__1 = (result__[temp___337 <- o8])) ->
  (forall o9:int.
  ((to_rep3(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__second_level_component) = o9) ->
  (forall o10:component_type. ((to_rep1(o10) = o9) ->
  (forall o11:int. ((to_rep(result____first) = o11) -> (let o12 = (o11 + 1)
  : int in (in_range1(o12) -> (((to_rep(result____first) <= o12) and
  (o12 <= to_rep(result____last))) ->
  (forall result__2:(int,component_type) farray.
  ((result__2 = (result__1[o12 <- o10])) ->
  (forall temp___340:int.
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = temp___340) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= temp___340) then true else false)) = true) ->
  (forall temp___loop_entry_348:us_split_fields.
  (let temp___loop_entry_3481 = { us_split_fields1 = temp___loop_entry_348 }
  : us_rep in ((temp___loop_entry_3481 = identifier) ->
  (forall o13:int. ((to_rep(result____last) = o13) ->
  (forall o14:int. ((to_rep(result____first) = o14) -> (in_range1(length(o14,
  o13)) ->
  (forall o15:int.
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = o15) ->
  (forall o16:int.
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = o16) ->
  (forall result__3:(int,component_type) farray. forall i1:int.
  ((((i1 <= to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count)) and
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) + 2) <= length(to_rep(result____first),
  to_rep(result____last)))) and (bool_eq10(identifier,
  temp___loop_entry_3481) = true)) -> ((andb((if dynamic_property1(1,
  to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count),
  i1) then true else false), (if ((1 <= i1) and
  (i1 <= to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count))) then true else false)) = true) ->
  (forall o17:int.
  ((to_rep1((((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_components[i1])) = o17) ->
  (forall o18:component_type. ((to_rep1(o18) = o17) ->
  (forall o19:int. ((to_rep(result____first) = o19) -> (let o20 = (o19 + 2)
  : int in (in_range1(o20) -> (let o21 = (o20 + (i1 - 1)) : int in
  (in_range1(o21) -> (((to_rep(result____first) <= o21) and
  (o21 <= to_rep(result____last))) ->
  (forall result__4:(int,component_type) farray.
  ((result__4 = (result__3[o21 <- o18])) -> ((not (i1 = temp___340)) ->
  (forall i2:int. ((i2 = (i1 + 1)) ->
  (forall o22:int. ((to_rep(result____last) = o22) ->
  (forall o23:int. ((to_rep(result____first) = o23) -> (in_range1(length(o23,
  o22)) ->
  (forall o24:int.
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = o24) ->
  (forall o25:int.
  ((to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count) = o25) ->
  (i2 <= to_rep4(((identifier).us_split_fields1).rec__ada___hermes__oid__object_identifier__other_component_count))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
