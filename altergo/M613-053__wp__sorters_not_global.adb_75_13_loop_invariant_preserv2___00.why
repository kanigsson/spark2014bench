(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic limit : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic index_of_minimum : int, int, (int,integer) farray -> int

logic index_of_minimum__function_guard : int, int, int,
  (int,integer) farray -> prop

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 64))

predicate in_range2(x: int) = ((1 <= x) and (x <= 64))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (1 <= 64)) -> in_range2(temp___expr_167))

axiom index_of_minimum__post_axiom :
  (forall starting_at:int. forall limit1:int.
  (forall values:(int,integer) farray [index_of_minimum(starting_at, limit1,
  values)]. (((dynamic_invariant(starting_at, true, true, true, true) and
  dynamic_invariant(limit1, true, true, true, true)) and
  (starting_at <= limit1)) -> (let result = index_of_minimum(starting_at,
  limit1, values) : int in (index_of_minimum__function_guard(result,
  starting_at, limit1, values) -> (starting_at <= result))))))

axiom index_of_minimum__post_axiom1 :
  (forall starting_at:int. forall limit1:int.
  (forall values:(int,integer) farray [index_of_minimum(starting_at, limit1,
  values)]. (((dynamic_invariant(starting_at, true, true, true, true) and
  dynamic_invariant(limit1, true, true, true, true)) and
  (starting_at <= limit1)) -> (let result = index_of_minimum(starting_at,
  limit1, values) : int in (index_of_minimum__function_guard(result,
  starting_at, limit1, values) -> (result <= limit1))))))

axiom index_of_minimum__post_axiom2 :
  (forall starting_at:int. forall limit1:int.
  (forall values:(int,integer) farray [index_of_minimum(starting_at, limit1,
  values)]. (((dynamic_invariant(starting_at, true, true, true, true) and
  dynamic_invariant(limit1, true, true, true, true)) and
  (starting_at <= limit1)) -> (let result = index_of_minimum(starting_at,
  limit1, values) : int in (index_of_minimum__function_guard(result,
  starting_at, limit1, values) ->
  (forall j:int. (((starting_at <= j) and (j <= limit1)) ->
  (to_rep((values[result])) <= to_rep((values[j]))))))))))

axiom index_of_minimum__post_axiom3 :
  (forall starting_at:int. forall limit1:int.
  (forall values:(int,integer) farray [index_of_minimum(starting_at, limit1,
  values)]. (((dynamic_invariant(starting_at, true, true, true, true) and
  dynamic_invariant(limit1, true, true, true, true)) and
  (starting_at <= limit1)) -> (let result = index_of_minimum(starting_at,
  limit1, values) : int in (index_of_minimum__function_guard(result,
  starting_at, limit1, values) -> dynamic_invariant(result, true, false,
  true, true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type t15b__ref = { t15b__content : integer
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : integer =
  (a).t15b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "sorters_not_global.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall values:(int,integer) farray. forall smallest:int.
  (dynamic_invariant(limit, true, false, true, true) ->
  (dynamic_invariant(smallest, false, false, true, true) -> (let temp___186 =
  limit : int in
  (forall current:int. ((current = 1) ->
  ((andb((if (1 <= current) then true else false),
  (if (current <= temp___186) then true else false)) = true) -> (let o =
  limit : int in (let o1 = index_of_minimum(current, o, values) : int in
  ((index_of_minimum__function_guard(o1, current, o, values) and
  (dynamic_invariant(o1, true, false, true, true) and (((current <= o1) and
  (o1 <= o)) and
  (forall j:int. (((current <= j) and (j <= o)) ->
  (to_rep((values[o1])) <= to_rep((values[j])))))))) ->
  (forall smallest1:int. ((smallest1 = o1) ->
  (forall spark__branch:bool. forall values1:(int,integer) farray.
  (((spark__branch = (if (smallest1 = current) then false else true)) and
  (if (spark__branch = true) then (((to_rep((values1[current])) = to_rep((values[smallest1]))) and
  (to_rep((values1[smallest1])) = to_rep((values[current])))) and
  (forall j:int. (((1 <= j) and (j <= 64)) -> (((not (j = current)) and
  (not (j = smallest1))) -> (to_rep((values1[j])) = to_rep((values[j]))))))) else (values1 = values))) ->
  (forall values2:(int,integer) farray. forall smallest2:int.
  forall current1:int.
  (((forall j:int. (((1 <= j) and (j <= (current1 - 1))) ->
    (to_rep((values2[j])) <= to_rep((values2[(j + 1)]))))) and
  (forall j:int. (((current1 <= j) and (j <= limit)) ->
  (to_rep((values2[current1])) <= to_rep((values2[j])))))) ->
  ((andb((if (dynamic_property(1, limit, current1) and
  dynamic_invariant(smallest2, false, true, true,
  true)) then true else false), (if ((1 <= current1) and
  (current1 <= limit)) then true else false)) = true) ->
  ((not (current1 = temp___186)) ->
  (forall current2:int. ((current2 = (current1 + 1)) -> (let o2 = limit
  : int in (let o3 = index_of_minimum(current2, o2, values2) : int in
  ((index_of_minimum__function_guard(o3, current2, o2, values2) and
  (dynamic_invariant(o3, true, false, true, true) and (((current2 <= o3) and
  (o3 <= o2)) and
  (forall j:int. (((current2 <= j) and (j <= o2)) ->
  (to_rep((values2[o3])) <= to_rep((values2[j])))))))) ->
  (forall smallest3:int. ((smallest3 = o3) ->
  (forall values3:(int,integer) farray.
  ((exists spark__branch1:bool.
   ((spark__branch1 = (if (smallest3 = current2) then false else true)) and
   (if (spark__branch1 = true) then (((to_rep((values3[current2])) = to_rep((values2[smallest3]))) and
   (to_rep((values3[smallest3])) = to_rep((values2[current2])))) and
   (forall j:int. (((1 <= j) and (j <= 64)) -> (((not (j = current2)) and
   (not (j = smallest3))) -> (to_rep((values3[j])) = to_rep((values2[j]))))))) else (values3 = values2)))) ->
  (forall j:int. (((1 <= j) and (j <= (current2 - 1))) ->
  (to_rep((values3[j])) <= to_rep((values3[(j + 1)]))))))))))))))))))))))))))))))))
