(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

function to_rep(x: positive) : int = positiveqtint(x)

logic of_rep : int -> positive

axiom inversion_axiom :
  (forall x:positive [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:positive [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep1(x: count_type) : int = count_typeqtint(x)

logic of_rep1 : int -> count_type

axiom inversion_axiom1 :
  (forall x:count_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:count_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = {
rec__partition_refinement__inverse_sets__cursor__node : count_type
}

function us_split_fields_rec__partition_refinement__inverse_sets__cursor__node__projection(a: us_split_fields) : count_type =
  (a).rec__partition_refinement__inverse_sets__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (to_rep1(((a).us_split_fields1).rec__partition_refinement__inverse_sets__cursor__node) = to_rep1(((b).us_split_fields1).rec__partition_refinement__inverse_sets__cursor__node)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic partition_refinement__inverse_sets__cursor__node__first__bit : int

logic partition_refinement__inverse_sets__cursor__node__last__bit : int

logic partition_refinement__inverse_sets__cursor__node__position : int

axiom partition_refinement__inverse_sets__cursor__node__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__first__bit)

axiom partition_refinement__inverse_sets__cursor__node__last__bit_axiom :
  (partition_refinement__inverse_sets__cursor__node__first__bit <  partition_refinement__inverse_sets__cursor__node__last__bit)

axiom partition_refinement__inverse_sets__cursor__node__position_axiom :
  (0 <= partition_refinement__inverse_sets__cursor__node__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__2__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__partition_refinement__inverse_sets__map__capacity : count_type
}

function us_split_discrs_rec__partition_refinement__inverse_sets__map__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__partition_refinement__inverse_sets__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__partition_refinement__inverse_sets__map :
us_main_type
}

function us_split_fields_rec__partition_refinement__inverse_sets__map__projection(a: us_split_fields2) : us_main_type =
  (a).rec__partition_refinement__inverse_sets__map

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity) = to_rep1(((b).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__partition_refinement__inverse_sets__map,
  ((b).us_split_fields3).rec__partition_refinement__inverse_sets__map) = true)) then true else false)

predicate in_range3(rec__partition_refinement__inverse_sets__map__capacity1: int,
  a: us_split_discrs) =
  (rec__partition_refinement__inverse_sets__map__capacity1 = to_rep1((a).rec__partition_refinement__inverse_sets__map__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic partition_refinement__inverse_sets__map__capacity__first__bit : int

logic partition_refinement__inverse_sets__map__capacity__last__bit : int

logic partition_refinement__inverse_sets__map__capacity__position : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom :
  (partition_refinement__inverse_sets__map__capacity__first__bit <  partition_refinement__inverse_sets__map__capacity__last__bit)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom :
  (0 <= partition_refinement__inverse_sets__map__capacity__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type map__ref = { map__content : us_rep1
}

function map__ref_map__content__2__projection(a: map__ref) : us_rep1 =
  (a).map__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type sequence__ref = { sequence__content : us_rep2
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref) : us_rep2 =
  (a).sequence__content

logic bool_eq6 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq6(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq6(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic length1 : us_rep2 -> int

logic length__function_guard : int, us_rep2 -> prop

function last(container: us_rep2) : int = (0 + length1(container))

logic last__function_guard : int, us_rep2 -> prop

logic get : us_rep2, int -> int

logic get__function_guard : int, us_rep2, int -> prop

function oeq(left: us_rep2, right: us_rep2) : bool =
  andb(bool_eq6(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard : bool, us_rep2, us_rep2 -> prop

logic keys : us_rep1 -> us_rep2

logic keys__function_guard : us_rep2, us_rep1 -> prop

function equivalent_keys(left: int, right: int) : bool =
  andb(notb(bool_lt(left, right)), notb(bool_lt(right, left)))

logic equivalent_keys__function_guard : bool, int, int -> prop

logic length2 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq7 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type map__ref1 = { map__content1 : us_rep3
}

function map__ref_map__content__3__projection(a: map__ref1) : us_rep3 =
  (a).map__content1

logic has_key : us_rep3, int -> bool

logic has_key__function_guard : bool, us_rep3, int -> prop

function iter_has_element(container: us_rep2, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container)) then true else false))

logic iter_has_element__function_guard : bool, us_rep2, int -> prop

function k_bigger_than_range(container: us_rep2, fst: int, lst: int,
  key: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(container,
      i) <  key))) then true else false)

logic k_bigger_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

function k_smaller_than_range(container: us_rep2, fst: int, lst: int,
  key: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (key <  get(container,
      i)))) then true else false)

logic k_smaller_than_range__function_guard : bool, us_rep2, int, int,
  int -> prop

function k_is_find(container: us_rep2, key: int, position: int) : bool =
  andb((if (0 <  position) then k_bigger_than_range(container, 1,
  (position - 1), key) else of_int(1)),
  (if (position <  length1(container)) then k_smaller_than_range(container,
  (position + 1), length1(container), key) else of_int(1)))

logic k_is_find__function_guard : bool, us_rep2, int, int -> prop

logic find : us_rep2, int -> int

logic find__function_guard : int, us_rep2, int -> prop

logic model : us_rep1 -> us_rep3

logic model__function_guard : us_rep3, us_rep1 -> prop

logic oeq1 : us_rep1, us_rep1 -> bool

logic oeq__function_guard1 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq1(a, b)))

type key_type

logic key_typeqtint : key_type -> int

axiom key_typeqtaxiom : (forall i:key_type. (1 <= key_typeqtint(i)))

axiom key_typeqtaxiom1 :
  (forall i:key_type. (key_typeqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : key_type, key_type -> bool

logic dummy6 : key_type

type key_type__ref = { key_type__content : key_type
}

function key_type__ref_key_type__content__3__projection(a: key_type__ref) : key_type =
  (a).key_type__content

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : extended_index, extended_index -> bool

logic dummy7 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

axiom user_eq__def_axiom1 :
  (forall a:us_rep2. forall b:us_rep2 [user_eq4(a, b)]. (user_eq4(a,
  b) = oeq(a, b)))

predicate default_initial_assumption(temp___expr_888: us_rep2,
  temp___skip_top_level_889: bool) =
  ((not (temp___skip_top_level_889 = true)) ->
  (length1(temp___expr_888) = 0))

axiom keys__post_axiom :
  (forall container:us_rep1 [keys(container)].
  (length1(keys(container)) = length2(container)))

axiom keys__post_axiom1 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep2 in
  (forall temp___960:int. ((in_range5(temp___960) and
  (iter_has_element(result, temp___960) = true)) ->
  (has_key(model(container), get(result, temp___960)) = true)))))

axiom keys__post_axiom2 :
  (forall container:us_rep1 [keys(container)].
  (forall key:int. ((in_range4(key) and (has_key(model(container),
  key) = true)) -> (0 <  find(keys(container), key)))))

axiom keys__post_axiom3 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep2 in
  (forall key:int. ((in_range4(key) and (has_key(model(container),
  key) = true)) -> (equivalent_keys(get(result, find(result, key)),
  key) = true)))))

axiom keys__post_axiom4 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep2 in
  (forall i:int. (((1 <= i) and (i <= length2(container))) -> (find(result,
  get(result, i)) = i)))))

axiom keys__post_axiom5 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep2 in
  (forall i:int. (((1 <= i) and (i <= length2(container))) ->
  (k_is_find(result, get(result, i), i) = true)))))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq10 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq8 : us_rep4, us_rep4 -> bool

logic dummy8 : us_rep4

type map__ref2 = { map__content2 : us_rep4
}

function map__ref_map__content__4__projection(a: map__ref2) : us_rep4 =
  (a).map__content2

type key_type__ref1 = { key_type__content1 : us_rep
}

function key_type__ref_key_type__content__4__projection(a: key_type__ref1) : us_rep =
  (a).key_type__content1

logic has_key1 : us_rep4, us_rep -> bool

logic has_key__function_guard1 : bool, us_rep4, us_rep -> prop

logic positions : us_rep1 -> us_rep4

logic positions__function_guard : us_rep4, us_rep1 -> prop

function has_element(container: us_rep1, position: us_rep) : bool =
  has_key1(positions(container), position)

logic has_element__function_guard : bool, us_rep1, us_rep -> prop

logic get1 : us_rep4, us_rep -> int

logic get__function_guard1 : int, us_rep4, us_rep -> prop

function key(container: us_rep1, position: us_rep) : int =
  get(keys(container), get1(positions(container), position))

logic key__function_guard : int, us_rep1, us_rep -> prop

type key_type1

logic key_typeqtint1 : key_type1 -> int

axiom key_typeqtaxiom2 : (forall i:key_type1. (1 <= key_typeqtint1(i)))

axiom key_typeqtaxiom3 :
  (forall i:key_type1. (key_typeqtint1(i) <= 2147483647))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : key_type1, key_type1 -> bool

logic dummy9 : key_type1

type key_type__ref2 = { key_type__content2 : key_type1
}

function key_type__ref_key_type__content__2__projection(a: key_type__ref2) : key_type1 =
  (a).key_type__content2

predicate dynamic_invariant1(temp___expr_800: int, temp___is_init_796: bool,
  temp___skip_constant_797: bool, temp___do_toplevel_798: bool,
  temp___do_typ_inv_799: bool) = (((temp___is_init_796 = true) or
  (1 <= 2147483647)) -> in_range6(temp___expr_800))

logic get2 : us_rep3, int -> int

logic get__function_guard2 : int, us_rep3, int -> prop

function element(container: us_rep1, position: us_rep) : int =
  get2(model(container), key(container, position))

logic element__function_guard : int, us_rep1, us_rep -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. (0 <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 5))

predicate in_range7(x: int) = ((0 <= x) and (x <= 5))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : element_type, element_type -> bool

logic dummy10 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__4__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant2(temp___expr_807: int, temp___is_init_803: bool,
  temp___skip_constant_804: bool, temp___do_toplevel_805: bool,
  temp___do_typ_inv_806: bool) = (((temp___is_init_803 = true) or
  (0 <= 5)) -> in_range7(temp___expr_807))

function contains(container: us_rep1, key1: int) : bool =
  has_key(model(container), key1)

logic contains__function_guard : bool, us_rep1, int -> prop

function element1(container: us_rep1, key1: int) : int =
  get2(model(container), key1)

logic element__function_guard1 : int, us_rep1, int -> prop

logic keys_included : us_rep3, us_rep3 -> bool

logic keys_included__function_guard : bool, us_rep3, us_rep3 -> prop

function same_keys(left: us_rep3, right: us_rep3) : bool =
  andb(keys_included(left, right), keys_included(right, left))

logic same_keys__function_guard : bool, us_rep3, us_rep3 -> prop

logic elements_equal_except : us_rep3, us_rep3, int -> bool

logic elements_equal_except__function_guard : bool, us_rep3, us_rep3,
  int -> prop

function equal_except(left: us_rep2, right: us_rep2, position: int) : bool =
  andb(bool_eq6(length1(left), length1(right)),
  (if (forall i:int. (((1 <= i) and (i <= last(left))) ->
      ((not (i = position)) -> (get(left, i) = get(right, i))))) then true else false))

logic equal_except__function_guard : bool, us_rep2, us_rep2, int -> prop

logic oeq2 : us_rep4, us_rep4 -> bool

logic oeq__function_guard2 : bool, us_rep4, us_rep4 -> prop

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 10001))

predicate in_range8(x: int) = ((0 <= x) and (x <= 10001))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq11 : capacity_range, capacity_range -> bool

logic dummy11 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep2(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep2 : int -> capacity_range

axiom inversion_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. in_range8(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range8(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_main_type4

logic us_main_eq4 : us_main_type4, us_main_type4 -> bool

type us_split_discrs2 = {
rec__partition_refinement__partitions__vector__capacity : capacity_range
}

function us_split_discrs_rec__partition_refinement__partitions__vector__capacity__projection(a: us_split_discrs2) : capacity_range =
  (a).rec__partition_refinement__partitions__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__partition_refinement__partitions__vector :
us_main_type4
}

function us_split_fields_rec__partition_refinement__partitions__vector__projection(a: us_split_fields4) : us_main_type4 =
  (a).rec__partition_refinement__partitions__vector

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep5 = { us_split_discrs3 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep5) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__6__projection(a: us_rep5) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq14(a: us_rep5, b: us_rep5) : bool =
  (if ((to_rep2(((a).us_split_discrs3).rec__partition_refinement__partitions__vector__capacity) = to_rep2(((b).us_split_discrs3).rec__partition_refinement__partitions__vector__capacity)) and
  (us_main_eq4(((a).us_split_fields5).rec__partition_refinement__partitions__vector,
  ((b).us_split_fields5).rec__partition_refinement__partitions__vector) = true)) then true else false)

predicate in_range9(rec__partition_refinement__partitions__vector__capacity1: int,
  a: us_split_discrs2) =
  (rec__partition_refinement__partitions__vector__capacity1 = to_rep2((a).rec__partition_refinement__partitions__vector__capacity))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic partition_refinement__partitions__vector__capacity__first__bit : int

logic partition_refinement__partitions__vector__capacity__last__bit : int

logic partition_refinement__partitions__vector__capacity__position : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom :
  (partition_refinement__partitions__vector__capacity__first__bit <  partition_refinement__partitions__vector__capacity__last__bit)

axiom partition_refinement__partitions__vector__capacity__position_axiom :
  (0 <= partition_refinement__partitions__vector__capacity__position)

logic user_eq12 : us_rep5, us_rep5 -> bool

logic dummy12 : us_rep5

type vector__ref = { vector__content : us_rep5
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep5 =
  (a).vector__content

function capacity(container: us_rep5) : int =
  to_rep2(((container).us_split_discrs3).rec__partition_refinement__partitions__vector__capacity)

logic capacity__function_guard : int, us_rep5 -> prop

predicate dynamic_invariant3(temp___expr_1157: int,
  temp___is_init_1153: bool, temp___skip_constant_1154: bool,
  temp___do_toplevel_1155: bool, temp___do_typ_inv_1156: bool) =
  (((temp___is_init_1153 = true) or (0 <= 10001)) ->
  in_range8(temp___expr_1157))

logic length3 : us_rep5 -> int

logic length__function_guard2 : int, us_rep5 -> prop

logic oeq3 : us_rep5, us_rep5 -> bool

logic oeq__function_guard3 : bool, us_rep5, us_rep5 -> prop

axiom user_eq__def_axiom2 :
  (forall a:us_rep5. forall b:us_rep5 [user_eq12(a, b)]. (user_eq12(a,
  b) = oeq3(a, b)))

axiom length__post_axiom :
  (forall container:us_rep5 [length3(container)].
  (length3(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep5 [length3(container)].
  dynamic_invariant3(length3(container), true, false, true, true))

type index_count

logic index_countqtint : index_count -> int

axiom index_countqtaxiom : (forall i:index_count. (0 <= index_countqtint(i)))

axiom index_countqtaxiom1 :
  (forall i:index_count. (index_countqtint(i) <= 6))

predicate in_range10(x: int) = ((0 <= x) and (x <= 6))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : index_count, index_count -> bool

logic dummy13 : index_count

type index_count__ref = { index_count__content : index_count
}

function index_count__ref_index_count__content__projection(a: index_count__ref) : index_count =
  (a).index_count__content

function to_rep3(x: index_count) : int = index_countqtint(x)

logic of_rep3 : int -> index_count

axiom inversion_axiom3 :
  (forall x:index_count [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:index_count [to_rep3(x)]. in_range10(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range10(x) ->
  (to_rep3(of_rep3(x)) = x)))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 5))

predicate in_range11(x: int) = ((0 <= x) and (x <= 5))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq14 : index, index -> bool

logic dummy14 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

function to_rep4(x: index) : int = indexqtint(x)

logic of_rep4 : int -> index

axiom inversion_axiom4 :
  (forall x:index [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:index [to_rep4(x)]. in_range11(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range11(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_split_fields6 = { rec__partition_refinement__interval__first : index;
rec__partition_refinement__interval__last : index;
rec__partition_refinement__interval__count : index_count
}

function us_split_fields_rec__partition_refinement__interval__first__projection(a: us_split_fields6) : index =
  (a).rec__partition_refinement__interval__first

function us_split_fields_rec__partition_refinement__interval__last__projection(a: us_split_fields6) : index =
  (a).rec__partition_refinement__interval__last

function us_split_fields_rec__partition_refinement__interval__count__projection(a: us_split_fields6) : index_count =
  (a).rec__partition_refinement__interval__count

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep6 = { us_split_fields7 : us_split_fields6
}

function us_rep___split_fields__5__projection(a: us_rep6) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq17(a: us_rep6, b: us_rep6) : bool =
  (if (((to_rep4(((a).us_split_fields7).rec__partition_refinement__interval__first) = to_rep4(((b).us_split_fields7).rec__partition_refinement__interval__first)) and
  (to_rep4(((a).us_split_fields7).rec__partition_refinement__interval__last) = to_rep4(((b).us_split_fields7).rec__partition_refinement__interval__last))) and
  (to_rep3(((a).us_split_fields7).rec__partition_refinement__interval__count) = to_rep3(((b).us_split_fields7).rec__partition_refinement__interval__count))) then true else false)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic partition_refinement__interval__first__first__bit : int

logic partition_refinement__interval__first__last__bit : int

logic partition_refinement__interval__first__position : int

axiom partition_refinement__interval__first__first__bit_axiom :
  (0 <= partition_refinement__interval__first__first__bit)

axiom partition_refinement__interval__first__last__bit_axiom :
  (partition_refinement__interval__first__first__bit <  partition_refinement__interval__first__last__bit)

axiom partition_refinement__interval__first__position_axiom :
  (0 <= partition_refinement__interval__first__position)

logic partition_refinement__interval__last__first__bit : int

logic partition_refinement__interval__last__last__bit : int

logic partition_refinement__interval__last__position : int

axiom partition_refinement__interval__last__first__bit_axiom :
  (0 <= partition_refinement__interval__last__first__bit)

axiom partition_refinement__interval__last__last__bit_axiom :
  (partition_refinement__interval__last__first__bit <  partition_refinement__interval__last__last__bit)

axiom partition_refinement__interval__last__position_axiom :
  (0 <= partition_refinement__interval__last__position)

logic partition_refinement__interval__count__first__bit : int

logic partition_refinement__interval__count__last__bit : int

logic partition_refinement__interval__count__position : int

axiom partition_refinement__interval__count__first__bit_axiom :
  (0 <= partition_refinement__interval__count__first__bit)

axiom partition_refinement__interval__count__last__bit_axiom :
  (partition_refinement__interval__count__first__bit <  partition_refinement__interval__count__last__bit)

axiom partition_refinement__interval__count__position_axiom :
  (0 <= partition_refinement__interval__count__position)

logic user_eq15 : us_rep6, us_rep6 -> bool

logic dummy15 : us_rep6

type interval__ref = { interval__content : us_rep6
}

function interval__ref_interval__content__projection(a: interval__ref) : us_rep6 =
  (a).interval__content

type element_type__ref1 = { element_type__content1 : us_rep6
}

function element_type__ref_element_type__content__8__projection(a: element_type__ref1) : us_rep6 =
  (a).element_type__content1

type us_main_type5

logic us_main_eq5 : us_main_type5, us_main_type5 -> bool

type us_rep7

logic bool_eq18 : us_rep7, us_rep7 -> bool

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic user_eq16 : us_rep7, us_rep7 -> bool

logic dummy16 : us_rep7

type sequence__ref1 = { sequence__content1 : us_rep7
}

function sequence__ref_sequence__content__3__projection(a: sequence__ref1) : us_rep7 =
  (a).sequence__content1

type element_type__ref2 = { element_type__content2 : us_rep6
}

function element_type__ref_element_type__content__9__projection(a: element_type__ref2) : us_rep6 =
  (a).element_type__content2

logic get3 : us_rep7, int -> us_rep6

logic get__function_guard3 : us_rep6, us_rep7, int -> prop

logic model1 : us_rep5 -> us_rep7

logic model__function_guard1 : us_rep7, us_rep5 -> prop

function element2(container: us_rep5, index1: int) : us_rep6 =
  get3(model1(container), index1)

logic element__function_guard2 : us_rep6, us_rep5, int -> prop

logic length4 : us_rep7 -> int

logic length__function_guard3 : int, us_rep7 -> prop

function last1(container: us_rep7) : int = ((- 1) + length4(container))

logic last__function_guard1 : int, us_rep7 -> prop

function last_index(container: us_rep5) : int = last1(model1(container))

logic last_index__function_guard : int, us_rep5 -> prop

logic first_index__function_guard : int, us_rep5 -> prop

function equal_except1(left: us_rep7, right: us_rep7, position: int) : bool =
  andb(bool_eq6(length4(left), length4(right)),
  (if (forall i:int. (((0 <= i) and (i <= last1(left))) ->
      ((not (i = position)) -> (bool_eq17(get3(left, i), get3(right,
      i)) = true)))) then true else false))

logic equal_except__function_guard1 : bool, us_rep7, us_rep7, int -> prop

logic value__size8 : int

logic object__size8 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom alignment_axiom8 : (0 <= alignment8)

logic partition_refinement__inverse_sets__map__capacity__first__bit1 : int

logic partition_refinement__inverse_sets__map__capacity__last__bit1 : int

logic partition_refinement__inverse_sets__map__capacity__position1 : int

axiom partition_refinement__inverse_sets__map__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__inverse_sets__map__capacity__first__bit1)

axiom partition_refinement__inverse_sets__map__capacity__last__bit_axiom1 :
  (partition_refinement__inverse_sets__map__capacity__first__bit1 <  partition_refinement__inverse_sets__map__capacity__last__bit1)

axiom partition_refinement__inverse_sets__map__capacity__position_axiom1 :
  (0 <= partition_refinement__inverse_sets__map__capacity__position1)

logic user_eq17 : us_rep1, us_rep1 -> bool

logic dummy17 : us_rep1

type inverse_set__ref = { inverse_set__content : us_rep1
}

function inverse_set__ref_inverse_set__content__projection(a: inverse_set__ref) : us_rep1 =
  (a).inverse_set__content

axiom user_eq__def_axiom3 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq17(a, b)]. (user_eq17(a,
  b) = oeq1(a, b)))

logic value__size9 : int

logic object__size9 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom alignment_axiom9 : (0 <= alignment9)

logic partition_refinement__partitions__vector__capacity__first__bit1 : int

logic partition_refinement__partitions__vector__capacity__last__bit1 : int

logic partition_refinement__partitions__vector__capacity__position1 : int

axiom partition_refinement__partitions__vector__capacity__first__bit_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__first__bit1)

axiom partition_refinement__partitions__vector__capacity__last__bit_axiom1 :
  (partition_refinement__partitions__vector__capacity__first__bit1 <  partition_refinement__partitions__vector__capacity__last__bit1)

axiom partition_refinement__partitions__vector__capacity__position_axiom1 :
  (0 <= partition_refinement__partitions__vector__capacity__position1)

logic user_eq18 : us_rep5, us_rep5 -> bool

logic dummy18 : us_rep5

type partition__ref = { partition__content : us_rep5
}

function partition__ref_partition__content__projection(a: partition__ref) : us_rep5 =
  (a).partition__content

axiom user_eq__def_axiom4 :
  (forall a:us_rep5. forall b:us_rep5 [user_eq18(a, b)]. (user_eq18(a,
  b) = oeq3(a, b)))

type map__ref3 = { map__content3 : (int,positive) farray
}

logic slide : (int,positive) farray, int, int -> (int,positive) farray

axiom slide_eq :
  (forall a:(int,positive) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,positive) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq19(a: (int,positive) farray, a__first: int, a__last: int,
  b: (int,positive) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,positive) farray. forall b:(int,positive) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq19(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic d__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic p__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS2 : int

type partition_index

logic partition_indexqtint : partition_index -> int

axiom partition_indexqtaxiom :
  (forall i:partition_index. (0 <= partition_indexqtint(i)))

axiom partition_indexqtaxiom1 :
  (forall i:partition_index. (partition_indexqtint(i) <= 10000))

predicate in_range12(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq20(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq19 : partition_index, partition_index -> bool

logic dummy19 : partition_index

type partition_index__ref = { partition_index__content : partition_index
}

function partition_index__ref_partition_index__content__projection(a: partition_index__ref) : partition_index =
  (a).partition_index__content

function to_rep5(x: partition_index) : int = partition_indexqtint(x)

logic of_rep5 : int -> partition_index

axiom inversion_axiom5 :
  (forall x:partition_index [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:partition_index [to_rep5(x)]. in_range12(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range12(x) ->
  (to_rep5(of_rep5(x)) = x)))

type map__ref4 = { map__content4 : (int,partition_index) farray
}

logic slide1 : (int,partition_index) farray, int,
  int -> (int,partition_index) farray

axiom slide_eq1 :
  (forall a:(int,partition_index) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,partition_index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq21(a: (int,partition_index) farray, a__first: int,
  a__last: int, b: (int,partition_index) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_403:int. (((a__first <= temp___idx_403) and
  (temp___idx_403 <= a__last)) ->
  (to_rep5((a[temp___idx_403])) = to_rep5((b[((b__first - a__first) + temp___idx_403)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,partition_index) farray.
  forall b:(int,partition_index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq21(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_403:int. (((a__first <= temp___idx_403) and
  (temp___idx_403 <= a__last)) ->
  (to_rep5((a[temp___idx_403])) = to_rep5((b[((b__first - a__first) + temp___idx_403)]))))))))

logic f : (int,partition_index) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic x_elem : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic j : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic a_old : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS8 : int

logic a_update : (int,positive) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

predicate dynamic_invariant4(temp___expr_423: int, temp___is_init_419: bool,
  temp___skip_constant_420: bool, temp___do_toplevel_421: bool,
  temp___do_typ_inv_422: bool) = (((temp___is_init_419 = true) or
  (0 <= 5)) -> in_range11(temp___expr_423))

logic temp_____aggregate_def_404 : (int,positive) farray, int, int, int,
  int -> (int,positive) farray

axiom a_update__def_axiom : (a_update = temp_____aggregate_def_404(a_old, i,
  to_rep((a_old[j])), j, to_rep((a_old[i]))))

axiom def_axiom :
  (forall temp___406:(int,positive) farray.
  (forall temp___407:int. forall temp___408:int. forall temp___409:int.
  forall temp___410:int. ((dynamic_invariant4(temp___407, true, true, true,
  true) and ((dynamic_invariant(temp___408, true, true, true, true) and
  dynamic_invariant4(temp___409, true, true, true, true)) and
  dynamic_invariant(temp___410, true, true, true, true))) ->
  (forall temp___411:int. ((temp___411 = temp___409) ->
  (to_rep((temp_____aggregate_def_404(temp___406, temp___407, temp___408,
  temp___409, temp___410)[temp___411])) = temp___410))))))

axiom def_axiom1 :
  (forall temp___406:(int,positive) farray.
  (forall temp___407:int. forall temp___408:int. forall temp___409:int.
  forall temp___410:int. ((dynamic_invariant4(temp___407, true, true, true,
  true) and ((dynamic_invariant(temp___408, true, true, true, true) and
  dynamic_invariant4(temp___409, true, true, true, true)) and
  dynamic_invariant(temp___410, true, true, true, true))) ->
  (forall temp___411:int. ((not (temp___411 = temp___409)) ->
  ((temp___411 = temp___407) ->
  (to_rep((temp_____aggregate_def_404(temp___406, temp___407, temp___408,
  temp___409, temp___410)[temp___411])) = temp___408)))))))

axiom def_axiom2 :
  (forall temp___406:(int,positive) farray.
  (forall temp___407:int. forall temp___408:int. forall temp___409:int.
  forall temp___410:int. ((dynamic_invariant4(temp___407, true, true, true,
  true) and ((dynamic_invariant(temp___408, true, true, true, true) and
  dynamic_invariant4(temp___409, true, true, true, true)) and
  dynamic_invariant(temp___410, true, true, true, true))) ->
  (forall temp___411:int. ((not (temp___411 = temp___409)) ->
  ((not (temp___411 = temp___407)) ->
  ((temp_____aggregate_def_404(temp___406, temp___407, temp___408,
  temp___409, temp___410)[temp___411]) = (temp___406[temp___411]))))))))

predicate dynamic_invariant5(temp___expr_416: int, temp___is_init_412: bool,
  temp___skip_constant_413: bool, temp___do_toplevel_414: bool,
  temp___do_typ_inv_415: bool) = (((temp___is_init_412 = true) or
  (0 <= 6)) -> in_range10(temp___expr_416))

predicate dynamic_invariant6(temp___expr_1126: int,
  temp___is_init_1122: bool, temp___skip_constant_1123: bool,
  temp___do_toplevel_1124: bool, temp___do_typ_inv_1125: bool) =
  (((temp___is_init_1122 = true) or (0 <= 10000)) ->
  in_range12(temp___expr_1126))

predicate dynamic_invariant7(temp___expr_447: int, temp___is_init_443: bool,
  temp___skip_constant_444: bool, temp___do_toplevel_445: bool,
  temp___do_typ_inv_446: bool) = (((temp___is_init_443 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_447))

logic no_element : us_rep

logic attr__ATTRIBUTE_ADDRESS10 : int

logic rliteral : count_type

axiom rliteral_axiom : (count_typeqtint(rliteral) = 0)

axiom no_element__def_axiom : (no_element = { us_split_fields1 = {
  rec__partition_refinement__inverse_sets__cursor__node = rliteral } })

axiom length__post_axiom2 :
  (forall container:us_rep1 [length2(container)].
  (length2(container) <= to_rep1(((container).us_split_discrs1).rec__partition_refinement__inverse_sets__map__capacity)))

axiom length__post_axiom3 :
  (forall container:us_rep1 [length2(container)].
  dynamic_invariant7(length2(container), true, false, true, true))

axiom find__post_axiom :
  (forall container:us_rep2.
  (forall key1:int [find(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> (let result = find(container, key1) : int in
  ((0 <  result) -> (result <= length1(container)))))))

axiom find__post_axiom1 :
  (forall container:us_rep2.
  (forall key1:int [find(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> (let result = find(container, key1) : int in
  ((0 <  result) -> (equivalent_keys(key1, get(container,
  result)) = true))))))

axiom find__post_axiom2 :
  (forall container:us_rep2.
  (forall key1:int [find(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> dynamic_invariant7(find(container, key1), true, false,
  true, true))))

logic length5 : us_rep3 -> int

logic length__function_guard4 : int, us_rep3 -> prop

logic oeq4 : us_rep3, us_rep3 -> bool

logic oeq__function_guard4 : bool, us_rep3, us_rep3 -> prop

logic is_empty : us_rep3 -> bool

logic is_empty__function_guard : bool, us_rep3 -> prop

axiom user_eq__def_axiom5 :
  (forall a:us_rep3. forall b:us_rep3 [user_eq5(a, b)]. (user_eq5(a,
  b) = oeq4(a, b)))

predicate default_initial_assumption1(temp___expr_852: us_rep3,
  temp___skip_top_level_853: bool) =
  ((not (temp___skip_top_level_853 = true)) ->
  ((is_empty(temp___expr_852) = true) and (length5(temp___expr_852) = 0)))

logic length6 : us_rep4 -> int

logic length__function_guard5 : int, us_rep4 -> prop

logic is_empty1 : us_rep4 -> bool

logic is_empty__function_guard1 : bool, us_rep4 -> prop

axiom user_eq__def_axiom6 :
  (forall a:us_rep4. forall b:us_rep4 [user_eq8(a, b)]. (user_eq8(a,
  b) = oeq2(a, b)))

predicate default_initial_assumption2(temp___expr_911: us_rep4,
  temp___skip_top_level_912: bool) =
  ((not (temp___skip_top_level_912 = true)) ->
  ((is_empty1(temp___expr_911) = true) and (length6(temp___expr_911) = 0)))

axiom positions__post_axiom :
  (forall container:us_rep1 [positions(container)].
  (not (has_key1(positions(container), no_element) = true)))

axiom positions__post_axiom1 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep4 in
  (forall i1:us_rep. ((has_key1(result, i1) = true) -> (1 <= get1(result,
  i1))))))

axiom positions__post_axiom2 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep4 in
  (forall i1:us_rep. ((has_key1(result, i1) = true) -> (get1(result,
  i1) <= length2(container))))))

axiom positions__post_axiom3 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep4 in
  (forall i1:us_rep. ((has_key1(result, i1) = true) ->
  (forall j1:us_rep. ((has_key1(result, j1) = true) -> ((get1(result,
  i1) = get1(result, j1)) -> (bool_eq3(i1, j1) = true))))))))

axiom oeq__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [oeq1(left, right)].
  ((oeq1(left, right) = true) -> (oeq4(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq1(left, right)].
  ((oeq4(model(left), model(right)) = true) -> (oeq1(left, right) = true)))

predicate dynamic_invariant8(temp___expr_837: int, temp___is_init_833: bool,
  temp___skip_constant_834: bool, temp___do_toplevel_835: bool,
  temp___do_typ_inv_836: bool) = (((temp___is_init_833 = true) or
  (1 <= 2147483647)) -> in_range4(temp___expr_837))

axiom has_key__post_axiom :
  (forall container:us_rep3.
  (forall key1:int [has_key(container, key1)]. (dynamic_invariant8(key1,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists k:int. ((in_range4(k) and (has_key(container, k) = true)) and
   (equivalent_keys(k, key1) = true))) ->
  (has_key(container, key1) = true))))))

logic witness : us_rep3, int -> int

logic witness__function_guard : int, us_rep3, int -> prop

logic w_get : us_rep3, int -> int

logic w_get__function_guard : int, us_rep3, int -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i1:element_type1. (0 <= element_typeqtint1(i1)))

axiom element_typeqtaxiom3 :
  (forall i1:element_type1. (element_typeqtint1(i1) <= 5))

predicate in_range13(x: int) = ((0 <= x) and (x <= 5))

function bool_eq22(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq20 : element_type1, element_type1 -> bool

logic dummy20 : element_type1

type element_type__ref3 = { element_type__content3 : element_type1
}

function element_type__ref_element_type__content__5__projection(a: element_type__ref3) : element_type1 =
  (a).element_type__content3

predicate dynamic_invariant9(temp___expr_844: int, temp___is_init_840: bool,
  temp___skip_constant_841: bool, temp___do_toplevel_842: bool,
  temp___do_typ_inv_843: bool) = (((temp___is_init_840 = true) or
  (0 <= 5)) -> in_range13(temp___expr_844))

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant8(key1, true,
  true, true, true) and (has_key(container, key1) = true)) ->
  ((of_int(1) = true) -> (get2(container, key1) = w_get(container,
  witness(container, key1)))))))

axiom get__post_axiom1 :
  (forall container:us_rep3.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant8(key1, true,
  true, true, true) and (has_key(container, key1) = true)) ->
  ((of_int(1) = true) ->
  (forall k:int. ((in_range4(k) and (has_key(container, k) = true)) ->
  ((equivalent_keys(k, key1) = true) -> (witness(container,
  key1) = witness(container, k)))))))))

axiom get__post_axiom2 :
  (forall container:us_rep3.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant8(key1, true,
  true, true, true) and (has_key(container, key1) = true)) ->
  ((of_int(1) = true) ->
  (forall k:int. ((in_range4(k) and (has_key(container, k) = true)) ->
  ((witness(container, key1) = witness(container, k)) -> (equivalent_keys(k,
  key1) = true))))))))

axiom get__post_axiom3 :
  (forall container:us_rep3.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant8(key1, true,
  true, true, true) and (has_key(container, key1) = true)) ->
  dynamic_invariant9(get2(container, key1), true, false, true, true))))

axiom length__post_axiom4 :
  (forall container:us_rep3 [length5(container)].
  dynamic_invariant7(length5(container), true, false, true, true))

axiom oeq__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3 [oeq4(left, right)].
  ((oeq4(left, right) = true) ->
  (forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
  (has_key(right, key1) = true)))))

axiom oeq__post_axiom3 :
  (forall left:us_rep3. forall right:us_rep3 [oeq4(left, right)].
  ((oeq4(left, right) = true) ->
  (forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
  (get2(right, key1) = get2(left, key1))))))

axiom oeq__post_axiom4 :
  (forall left:us_rep3. forall right:us_rep3 [oeq4(left, right)].
  ((oeq4(left, right) = true) ->
  (forall key1:int. ((in_range4(key1) and (has_key(right, key1) = true)) ->
  (has_key(left, key1) = true)))))

axiom oeq__post_axiom5 :
  (forall left:us_rep3. forall right:us_rep3 [oeq4(left, right)].
  (((forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
    ((has_key(right, key1) = true) and (get2(right, key1) = get2(left,
    key1))))) and
  (forall key1:int. ((in_range4(key1) and (has_key(right, key1) = true)) ->
  (has_key(left, key1) = true)))) -> (oeq4(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep3 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall key1:int. (not (in_range4(key1) and (has_key(container,
  key1) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep3 [is_empty(container)].
  ((forall key1:int. (not (in_range4(key1) and (has_key(container,
   key1) = true)))) ->
  (is_empty(container) = true)))

axiom keys_included__post_axiom :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((keys_included(left, right) = true) ->
  (forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
  (has_key(right, key1) = true)))))

axiom keys_included__post_axiom1 :
  (forall left:us_rep3. forall right:us_rep3 [keys_included(left, right)].
  ((forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
   (has_key(right, key1) = true))) ->
  (keys_included(left, right) = true)))

axiom elements_equal_except__post_axiom :
  (forall left:us_rep3. forall right:us_rep3.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (dynamic_invariant8(new_key, true, true, true, true) ->
  ((elements_equal_except(left, right, new_key) = true) ->
  (forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
  ((not (equivalent_keys(key1, new_key) = true)) -> (has_key(right,
  key1) = true))))))))

axiom elements_equal_except__post_axiom1 :
  (forall left:us_rep3. forall right:us_rep3.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (dynamic_invariant8(new_key, true, true, true, true) ->
  ((elements_equal_except(left, right, new_key) = true) ->
  (forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
  ((not (equivalent_keys(key1, new_key) = true)) -> (get2(left,
  key1) = get2(right, key1)))))))))

axiom elements_equal_except__post_axiom2 :
  (forall left:us_rep3. forall right:us_rep3.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (dynamic_invariant8(new_key, true, true, true, true) ->
  ((forall key1:int. ((in_range4(key1) and (has_key(left, key1) = true)) ->
   ((not (equivalent_keys(key1, new_key) = true)) -> ((has_key(right,
   key1) = true) and (get2(left, key1) = get2(right, key1)))))) ->
  (elements_equal_except(left, right, new_key) = true)))))

logic has_witness : us_rep3, int -> bool

logic has_witness__function_guard : bool, us_rep3, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep3.
  (forall key1:int [witness(container, key1)]. ((dynamic_invariant8(key1,
  true, true, true, true) and (has_key(container, key1) = true)) ->
  (has_witness(container, witness(container, key1)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep3.
  (forall key1:int [witness(container, key1)]. ((dynamic_invariant8(key1,
  true, true, true, true) and (has_key(container, key1) = true)) ->
  dynamic_invariant7(witness(container, key1), true, false, true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep3.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant7(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant9(w_get(container, witness1), true, false, true, true))))

predicate dynamic_invariant10(temp___expr_880: int, temp___is_init_876: bool,
  temp___skip_constant_877: bool, temp___do_toplevel_878: bool,
  temp___do_typ_inv_879: bool) = (((temp___is_init_876 = true) or
  (0 <= 2147483647)) -> in_range5(temp___expr_880))

axiom length__post_axiom5 :
  (forall container:us_rep2 [length1(container)].
  ((0 + length1(container)) <= 2147483647))

axiom length__post_axiom6 :
  (forall container:us_rep2 [length1(container)].
  dynamic_invariant7(length1(container), true, false, true, true))

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i1:element_type2. (1 <= element_typeqtint2(i1)))

axiom element_typeqtaxiom5 :
  (forall i1:element_type2. (element_typeqtint2(i1) <= 2147483647))

predicate in_range14(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq23(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE12 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> int

logic user_eq21 : element_type2, element_type2 -> bool

logic dummy21 : element_type2

type element_type__ref4 = { element_type__content4 : element_type2
}

function element_type__ref_element_type__content__6__projection(a: element_type__ref4) : element_type2 =
  (a).element_type__content4

predicate dynamic_invariant11(temp___expr_873: int, temp___is_init_869: bool,
  temp___skip_constant_870: bool, temp___do_toplevel_871: bool,
  temp___do_typ_inv_872: bool) = (((temp___is_init_869 = true) or
  (1 <= 2147483647)) -> in_range14(temp___expr_873))

axiom get__post_axiom4 :
  (forall container:us_rep2.
  (forall position:int [get(container, position)].
  ((dynamic_invariant10(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant11(get(container, position), true, false, true, true))))

axiom has_key__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:us_rep [has_key1(container, key1)]. ((of_int(0) = true) ->
  ((exists k:us_rep. ((has_key1(container, k) = true) and (bool_eq3(k,
   key1) = true))) ->
  (has_key1(container, key1) = true)))))

logic witness1 : us_rep4, us_rep -> int

logic witness__function_guard1 : int, us_rep4, us_rep -> prop

logic w_get1 : us_rep4, int -> int

logic w_get__function_guard1 : int, us_rep4, int -> prop

type element_type3

logic element_typeqtint3 : element_type3 -> int

axiom element_typeqtaxiom6 :
  (forall i1:element_type3. (1 <= element_typeqtint3(i1)))

axiom element_typeqtaxiom7 :
  (forall i1:element_type3. (element_typeqtint3(i1) <= 2147483647))

predicate in_range15(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq24(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq22 : element_type3, element_type3 -> bool

logic dummy22 : element_type3

type element_type__ref5 = { element_type__content5 : element_type3
}

function element_type__ref_element_type__content__7__projection(a: element_type__ref5) : element_type3 =
  (a).element_type__content5

predicate dynamic_invariant12(temp___expr_903: int, temp___is_init_899: bool,
  temp___skip_constant_900: bool, temp___do_toplevel_901: bool,
  temp___do_typ_inv_902: bool) = (((temp___is_init_899 = true) or
  (1 <= 2147483647)) -> in_range15(temp___expr_903))

axiom get__post_axiom5 :
  (forall container:us_rep4.
  (forall key1:us_rep [get1(container, key1)]. ((has_key1(container,
  key1) = true) -> ((of_int(0) = true) -> (get1(container,
  key1) = w_get1(container, witness1(container, key1)))))))

axiom get__post_axiom6 :
  (forall container:us_rep4.
  (forall key1:us_rep [get1(container, key1)]. ((has_key1(container,
  key1) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep. ((has_key1(container, k) = true) -> ((bool_eq3(k,
  key1) = true) -> (witness1(container, key1) = witness1(container, k)))))))))

axiom get__post_axiom7 :
  (forall container:us_rep4.
  (forall key1:us_rep [get1(container, key1)]. ((has_key1(container,
  key1) = true) -> ((of_int(0) = true) ->
  (forall k:us_rep. ((has_key1(container, k) = true) -> ((witness1(container,
  key1) = witness1(container, k)) -> (bool_eq3(k, key1) = true))))))))

axiom get__post_axiom8 :
  (forall container:us_rep4.
  (forall key1:us_rep [get1(container, key1)]. ((has_key1(container,
  key1) = true) -> dynamic_invariant12(get1(container, key1), true, false,
  true, true))))

axiom length__post_axiom7 :
  (forall container:us_rep4 [length6(container)].
  dynamic_invariant7(length6(container), true, false, true, true))

axiom oeq__post_axiom6 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key1:us_rep. ((has_key1(left, key1) = true) -> (has_key1(right,
  key1) = true)))))

axiom oeq__post_axiom7 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key1:us_rep. ((has_key1(left, key1) = true) -> (get1(right,
  key1) = get1(left, key1))))))

axiom oeq__post_axiom8 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  ((oeq2(left, right) = true) ->
  (forall key1:us_rep. ((has_key1(right, key1) = true) -> (has_key1(left,
  key1) = true)))))

axiom oeq__post_axiom9 :
  (forall left:us_rep4. forall right:us_rep4 [oeq2(left, right)].
  (((forall key1:us_rep. ((has_key1(left, key1) = true) -> ((has_key1(right,
    key1) = true) and (get1(right, key1) = get1(left, key1))))) and
  (forall key1:us_rep. ((has_key1(right, key1) = true) -> (has_key1(left,
  key1) = true)))) -> (oeq2(left, right) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep4 [is_empty1(container)].
  ((is_empty1(container) = true) ->
  (forall key1:us_rep. (not (has_key1(container, key1) = true)))))

axiom is_empty__post_axiom3 :
  (forall container:us_rep4 [is_empty1(container)].
  ((forall key1:us_rep. (not (has_key1(container, key1) = true))) ->
  (is_empty1(container) = true)))

logic has_witness1 : us_rep4, int -> bool

logic has_witness__function_guard1 : bool, us_rep4, int -> prop

axiom witness__post_axiom2 :
  (forall container:us_rep4.
  (forall key1:us_rep [witness1(container, key1)]. ((has_key1(container,
  key1) = true) -> (has_witness1(container, witness1(container,
  key1)) = true))))

axiom witness__post_axiom3 :
  (forall container:us_rep4.
  (forall key1:us_rep [witness1(container, key1)]. ((has_key1(container,
  key1) = true) -> dynamic_invariant7(witness1(container, key1), true, false,
  true, true))))

axiom w_get__post_axiom1 :
  (forall container:us_rep4.
  (forall witness2:int [w_get1(container, witness2)].
  ((dynamic_invariant7(witness2, true, true, true, true) and
  (has_witness1(container, witness2) = true)) ->
  dynamic_invariant12(w_get1(container, witness2), true, false, true, true))))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i1:extended_index1. ((- 1) <= extended_indexqtint1(i1)))

axiom extended_indexqtaxiom3 :
  (forall i1:extended_index1. (extended_indexqtint1(i1) <= 10001))

predicate in_range16(x: int) = (((- 1) <= x) and (x <= 10001))

function bool_eq25(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq23 : extended_index1, extended_index1 -> bool

logic dummy23 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant13(temp___expr_1150: int,
  temp___is_init_1146: bool, temp___skip_constant_1147: bool,
  temp___do_toplevel_1148: bool, temp___do_typ_inv_1149: bool) =
  (((temp___is_init_1146 = true) or ((- 1) <= 10001)) ->
  in_range16(temp___expr_1150))

function oeq5(left: us_rep7, right: us_rep7) : bool =
  andb(bool_eq6(length4(left), length4(right)),
  (if (forall n:int. (((0 <= n) and (n <= last1(left))) ->
      (bool_eq17(get3(left, n), get3(right, n)) = true))) then true else false))

logic oeq__function_guard5 : bool, us_rep7, us_rep7 -> prop

axiom user_eq__def_axiom7 :
  (forall a:us_rep7. forall b:us_rep7 [user_eq16(a, b)]. (user_eq16(a,
  b) = oeq5(a, b)))

predicate default_initial_assumption3(temp___expr_1199: us_rep7,
  temp___skip_top_level_1200: bool) =
  ((not (temp___skip_top_level_1200 = true)) ->
  (length4(temp___expr_1199) = 0))

axiom model__post_axiom :
  (forall container:us_rep5 [model1(container)].
  (length4(model1(container)) = length3(container)))

axiom oeq__post_axiom10 :
  (forall left:us_rep5. forall right:us_rep5 [oeq3(left, right)].
  ((oeq3(left, right) = true) -> (oeq5(model1(left), model1(right)) = true)))

axiom oeq__post_axiom11 :
  (forall left:us_rep5. forall right:us_rep5 [oeq3(left, right)].
  ((oeq5(model1(left), model1(right)) = true) -> (oeq3(left, right) = true)))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i1:index_type. (0 <= index_typeqtint(i1)))

axiom index_typeqtaxiom1 :
  (forall i1:index_type. (index_typeqtint(i1) <= 10000))

predicate in_range17(x: int) = ((0 <= x) and (x <= 10000))

function bool_eq26(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq24 : index_type, index_type -> bool

logic dummy24 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__3__projection(a: index_type__ref) : index_type =
  (a).index_type__content

predicate dynamic_invariant14(temp___expr_1133: int,
  temp___is_init_1129: bool, temp___skip_constant_1130: bool,
  temp___do_toplevel_1131: bool, temp___do_typ_inv_1132: bool) =
  (((temp___is_init_1129 = true) or (0 <= 10000)) ->
  in_range17(temp___expr_1133))

type extended_index2

logic extended_indexqtint2 : extended_index2 -> int

axiom extended_indexqtaxiom4 :
  (forall i1:extended_index2. ((- 1) <= extended_indexqtint2(i1)))

axiom extended_indexqtaxiom5 :
  (forall i1:extended_index2. (extended_indexqtint2(i1) <= 10000))

predicate in_range18(x: int) = (((- 1) <= x) and (x <= 10000))

function bool_eq27(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq25 : extended_index2, extended_index2 -> bool

logic dummy25 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref_extended_index__content__4__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

predicate dynamic_invariant15(temp___expr_1191: int,
  temp___is_init_1187: bool, temp___skip_constant_1188: bool,
  temp___do_toplevel_1189: bool, temp___do_typ_inv_1190: bool) =
  (((temp___is_init_1187 = true) or ((- 1) <= 10000)) ->
  in_range18(temp___expr_1191))

axiom length__post_axiom8 :
  (forall container:us_rep7 [length4(container)].
  (((- 1) + length4(container)) <= 10000))

axiom length__post_axiom9 :
  (forall container:us_rep7 [length4(container)].
  dynamic_invariant7(length4(container), true, false, true, true))

 (* File "partition_refinement.adb", line 16, characters 0-0 *)
goal defqtvc :
  (forall a:(int,positive) farray. forall d__split_fields:us_main_type.
  forall p__split_fields:us_main_type4.
  (forall a1:(int,positive) farray. ((a1 = a) -> (dynamic_invariant(x_elem,
  true, false, true, true) -> ((((((length3({ us_split_discrs3 =
  p__split_discrs; us_split_fields5 = {
  rec__partition_refinement__partitions__vector = p__split_fields }
  }) <  10000) and (contains({ us_split_discrs1 = d__split_discrs;
  us_split_fields3 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }, x_elem) = true)) and (let temp___2259 =
  to_rep5((f[element1({ us_split_discrs1 = d__split_discrs;
  us_split_fields3 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }, x_elem)])) : int in ((0 <= temp___2259) and
  (temp___2259 <= (length3({ us_split_discrs3 = p__split_discrs;
  us_split_fields5 = { rec__partition_refinement__partitions__vector =
  p__split_fields } }) - 1))))) and
  (forall j1:int. (((0 <= j1) and (j1 <= 5)) -> (contains({
  us_split_discrs1 = d__split_discrs; us_split_fields3 = {
  rec__partition_refinement__inverse_sets__map = d__split_fields } },
  to_rep((a[j1]))) = true)))) and
  (forall c:us_rep. ((has_element({ us_split_discrs1 = d__split_discrs;
  us_split_fields3 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } }, c) = true) -> (to_rep((a[element({ us_split_discrs1 =
  d__split_discrs; us_split_fields3 = {
  rec__partition_refinement__inverse_sets__map = d__split_fields } },
  c)])) = key({ us_split_discrs1 = d__split_discrs; us_split_fields3 = {
  rec__partition_refinement__inverse_sets__map = d__split_fields } }, c))))) ->
  (let o = x_elem : int in (let o1 = { us_split_discrs1 = d__split_discrs;
  us_split_fields3 = { rec__partition_refinement__inverse_sets__map =
  d__split_fields } } : us_rep1 in
  (let partition_refinement__refine_one__i__assume = element1(o1, o) : int in
  ((dynamic_invariant2(partition_refinement__refine_one__i__assume, true,
  false, true, true) and
  (partition_refinement__refine_one__i__assume = get2(model(o1), o))) ->
  ((partition_refinement__refine_one__i__assume = i) ->
  (dynamic_invariant4(i, true, false, true, true) ->
  (forall o2:int. ((to_rep5((f[i])) = o2) -> (o2 <= last_index({
  us_split_discrs3 = p__split_discrs; us_split_fields5 = {
  rec__partition_refinement__partitions__vector = p__split_fields } })))))))))))))))
