(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (0 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 : (forall i:index_type. (index_typeqtint(i) <= 128))

predicate in_range(x: int) = ((0 <= x) and (x <= 128))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : index_type, index_type -> bool

logic dummy : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

function to_rep(x: index_type) : int = index_typeqtint(x)

logic of_rep : int -> index_type

axiom inversion_axiom :
  (forall x:index_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index_type [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__list_handler__integer_list__iterator__pointer :
index_type
}

function us_split_fields_rec__list_handler__integer_list__iterator__pointer__projection(a: us_split_fields) : index_type =
  (a).rec__list_handler__integer_list__iterator__pointer

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__list_handler__integer_list__iterator__pointer) = to_rep(((b).us_split_fields1).rec__list_handler__integer_list__iterator__pointer)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic list_handler__integer_list__iterator__pointer__first__bit : int

logic list_handler__integer_list__iterator__pointer__last__bit : int

logic list_handler__integer_list__iterator__pointer__position : int

axiom list_handler__integer_list__iterator__pointer__first__bit_axiom :
  (0 <= list_handler__integer_list__iterator__pointer__first__bit)

axiom list_handler__integer_list__iterator__pointer__last__bit_axiom :
  (list_handler__integer_list__iterator__pointer__first__bit <  list_handler__integer_list__iterator__pointer__last__bit)

axiom list_handler__integer_list__iterator__pointer__position_axiom :
  (0 <= list_handler__integer_list__iterator__pointer__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type iterator__ref = { iterator__content : us_rep
}

function iterator__ref_iterator__content__projection(a: iterator__ref) : us_rep =
  (a).iterator__content

logic it : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic item : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : element_type, element_type -> bool

logic dummy2 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

function to_rep1(x: element_type) : int = element_typeqtint(x)

logic of_rep1 : int -> element_type

axiom inversion_axiom1 :
  (forall x:element_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:element_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__list_handler__integer_list__list_node__value :
element_type; rec__list_handler__integer_list__list_node__next : index_type;
rec__list_handler__integer_list__list_node__previous : index_type
}

function us_split_fields_rec__list_handler__integer_list__list_node__value__projection(a: us_split_fields2) : element_type =
  (a).rec__list_handler__integer_list__list_node__value

function us_split_fields_rec__list_handler__integer_list__list_node__next__projection(a: us_split_fields2) : index_type =
  (a).rec__list_handler__integer_list__list_node__next

function us_split_fields_rec__list_handler__integer_list__list_node__previous__projection(a: us_split_fields2) : index_type =
  (a).rec__list_handler__integer_list__list_node__previous

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep1(((a).us_split_fields3).rec__list_handler__integer_list__list_node__value) = to_rep1(((b).us_split_fields3).rec__list_handler__integer_list__list_node__value)) and
  (to_rep(((a).us_split_fields3).rec__list_handler__integer_list__list_node__next) = to_rep(((b).us_split_fields3).rec__list_handler__integer_list__list_node__next))) and
  (to_rep(((a).us_split_fields3).rec__list_handler__integer_list__list_node__previous) = to_rep(((b).us_split_fields3).rec__list_handler__integer_list__list_node__previous))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic list_handler__integer_list__list_node__value__first__bit : int

logic list_handler__integer_list__list_node__value__last__bit : int

logic list_handler__integer_list__list_node__value__position : int

axiom list_handler__integer_list__list_node__value__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__value__first__bit)

axiom list_handler__integer_list__list_node__value__last__bit_axiom :
  (list_handler__integer_list__list_node__value__first__bit <  list_handler__integer_list__list_node__value__last__bit)

axiom list_handler__integer_list__list_node__value__position_axiom :
  (0 <= list_handler__integer_list__list_node__value__position)

logic list_handler__integer_list__list_node__next__first__bit : int

logic list_handler__integer_list__list_node__next__last__bit : int

logic list_handler__integer_list__list_node__next__position : int

axiom list_handler__integer_list__list_node__next__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__next__first__bit)

axiom list_handler__integer_list__list_node__next__last__bit_axiom :
  (list_handler__integer_list__list_node__next__first__bit <  list_handler__integer_list__list_node__next__last__bit)

axiom list_handler__integer_list__list_node__next__position_axiom :
  (0 <= list_handler__integer_list__list_node__next__position)

logic list_handler__integer_list__list_node__previous__first__bit : int

logic list_handler__integer_list__list_node__previous__last__bit : int

logic list_handler__integer_list__list_node__previous__position : int

axiom list_handler__integer_list__list_node__previous__first__bit_axiom :
  (0 <= list_handler__integer_list__list_node__previous__first__bit)

axiom list_handler__integer_list__list_node__previous__last__bit_axiom :
  (list_handler__integer_list__list_node__previous__first__bit <  list_handler__integer_list__list_node__previous__last__bit)

axiom list_handler__integer_list__list_node__previous__position_axiom :
  (0 <= list_handler__integer_list__list_node__previous__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type list_node__ref = { list_node__content : us_rep1
}

function list_node__ref_list_node__content__projection(a: list_node__ref) : us_rep1 =
  (a).list_node__content

type map__ref = { map__content : (int,us_rep1) farray
}

logic slide : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq3((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq3((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type map__ref1 = { map__content1 : (int,index_type) farray
}

logic slide1 : (int,index_type) farray, int, int -> (int,index_type) farray

axiom slide_eq1 :
  (forall a:(int,index_type) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,index_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,index_type) farray, a__first: int, a__last: int,
  b: (int,index_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,index_type) farray. forall b:(int,index_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)]))))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

predicate dynamic_invariant(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_166))

type status_type

predicate in_range2(x: int) = ((0 <= x) and (x <= 3))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : status_type, status_type -> bool

logic dummy4 : status_type

type status_type__ref = { status_type__content : status_type
}

function status_type__ref_status_type__content__projection(a: status_type__ref) : status_type =
  (a).status_type__content

predicate dynamic_invariant1(temp___expr_173: int, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = (((temp___is_init_169 = true) or
  (0 <= 3)) -> in_range2(temp___expr_173))

predicate dynamic_invariant2(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  (0 <= 128)) -> in_range(temp___expr_180))

 (* File "double_list.ads", line 20, characters 0-0 *)
goal defqtvc :
  (forall status:int. forall memory:(int,us_rep1) farray. forall count:int.
  forall free_list:(int,index_type) farray. forall free:int.
  forall new_pointer:int. (dynamic_invariant(item, true, false, true,
  true) -> (dynamic_invariant1(status, false, false, true, true) ->
  (dynamic_invariant2(count, true, false, true, true) ->
  (dynamic_invariant2(free, true, false, true, true) ->
  (dynamic_invariant2(new_pointer, false, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (count = 128) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall new_pointer1:int. ((new_pointer1 = free) ->
  ((exists o:int. (to_rep((free_list[free])) = o)) ->
  (forall o:int.
  ((to_rep(((it).us_split_fields1).rec__list_handler__integer_list__iterator__pointer) = o) ->
  (forall o1:element_type. ((to_rep1(o1) = item) ->
  (forall memory1:(int,us_rep1) farray. ((memory1 = (memory[new_pointer1 <- {
  us_split_fields3 = { rec__list_handler__integer_list__list_node__value =
  o1; rec__list_handler__integer_list__list_node__next =
  ((it).us_split_fields1).rec__list_handler__integer_list__iterator__pointer;
  rec__list_handler__integer_list__list_node__previous =
  (((memory[o])).us_split_fields3).rec__list_handler__integer_list__list_node__previous
  } }])) ->
  (forall o2:int.
  ((to_rep(((it).us_split_fields1).rec__list_handler__integer_list__iterator__pointer) = o2) ->
  (forall o3:int.
  ((to_rep((((memory1[o2])).us_split_fields3).rec__list_handler__integer_list__list_node__previous) = o3) ->
  (let q_ = ((memory1[o3])).us_split_fields3 : us_split_fields2 in
  (forall o4:index_type. ((to_rep(o4) = new_pointer1) ->
  (forall o5:int.
  ((to_rep(((it).us_split_fields1).rec__list_handler__integer_list__iterator__pointer) = o5) ->
  (forall o6:int.
  ((to_rep((((memory1[o5])).us_split_fields3).rec__list_handler__integer_list__list_node__previous) = o6) ->
  (forall memory2:(int,us_rep1) farray. ((memory2 = (memory1[o6 <- {
  us_split_fields3 = { rec__list_handler__integer_list__list_node__value =
  (q_).rec__list_handler__integer_list__list_node__value;
  rec__list_handler__integer_list__list_node__next = o4;
  rec__list_handler__integer_list__list_node__previous =
  (q_).rec__list_handler__integer_list__list_node__previous } }])) ->
  (forall o7:int.
  ((to_rep(((it).us_split_fields1).rec__list_handler__integer_list__iterator__pointer) = o7) ->
  (forall o8:index_type. ((to_rep(o8) = new_pointer1) ->
  (forall o9:int.
  ((to_rep(((it).us_split_fields1).rec__list_handler__integer_list__iterator__pointer) = o9) ->
  in_range((count + 1)))))))))))))))))))))))))))))))))))))))
