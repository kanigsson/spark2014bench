(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic x : int

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type ta1C

logic ta1Cqtint : ta1C -> int

axiom ta1Cqtaxiom : (forall i:ta1C. (1 <= ta1Cqtint(i)))

axiom ta1Cqtaxiom1 : (forall i:ta1C. (ta1Cqtint(i) <= 10))

predicate in_range1(x1: int) = ((1 <= x1) and (x1 <= 10))

function bool_eq1(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : ta1C, ta1C -> bool

logic dummy1 : ta1C

type ta1C__ref = { ta1C__content : ta1C
}

function ta1C__ref_ta1C__content__projection(a: ta1C__ref) : ta1C =
  (a).ta1C__content

function to_rep(x1: ta1C) : int = ta1Cqtint(x1)

logic of_rep : int -> ta1C

axiom inversion_axiom :
  (forall x1:ta1C [to_rep(x1)]. (of_rep(to_rep(x1)) = x1))

axiom range_axiom : (forall x1:ta1C [to_rep(x1)]. in_range1(to_rep(x1)))

axiom coerce_axiom :
  (forall x1:int [to_rep(of_rep(x1))]. (in_range1(x1) ->
  (to_rep(of_rep(x1)) = x1)))

type map__ref = { map__content : (int,ta1C) farray
}

logic slide : (int,ta1C) farray, int, int -> (int,ta1C) farray

axiom slide_eq :
  (forall a:(int,ta1C) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,ta1C) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,ta1C) farray, a__first: int, a__last: int,
  b: (int,ta1C) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,ta1C) farray. forall b:(int,ta1C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,ta1C) farray. forall b:(int,ta1C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,ta1C) farray. forall b:(int,ta1C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,ta1C) farray. forall b:(int,ta1C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

type ttmp3C

logic ttmp3Cqtint : ttmp3C -> int

axiom ttmp3Cqtaxiom : (forall i:ttmp3C. (1 <= ttmp3Cqtint(i)))

axiom ttmp3Cqtaxiom1 : (forall i:ttmp3C. (ttmp3Cqtint(i) <= 5))

predicate in_range2(x1: int) = ((1 <= x1) and (x1 <= 5))

function bool_eq3(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : ttmp3C, ttmp3C -> bool

logic dummy2 : ttmp3C

type ttmp3C__ref = { ttmp3C__content : ttmp3C
}

function ttmp3C__ref_ttmp3C__content__projection(a: ttmp3C__ref) : ttmp3C =
  (a).ttmp3C__content

function to_rep1(x1: ttmp3C) : int = ttmp3Cqtint(x1)

logic of_rep1 : int -> ttmp3C

axiom inversion_axiom1 :
  (forall x1:ttmp3C [to_rep1(x1)]. (of_rep1(to_rep1(x1)) = x1))

axiom range_axiom1 : (forall x1:ttmp3C [to_rep1(x1)]. in_range2(to_rep1(x1)))

axiom coerce_axiom1 :
  (forall x1:int [to_rep1(of_rep1(x1))]. (in_range2(x1) ->
  (to_rep1(of_rep1(x1)) = x1)))

type map__ref1 = { map__content1 : (int,ttmp3C) farray
}

logic slide1 : (int,ttmp3C) farray, int, int -> (int,ttmp3C) farray

axiom slide_eq1 :
  (forall a:(int,ttmp3C) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,ttmp3C) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,ttmp3C) farray, a__first: int, a__last: int,
  b: (int,ttmp3C) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,ttmp3C) farray. forall b:(int,ttmp3C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,ttmp3C) farray. forall b:(int,ttmp3C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,ttmp3C) farray. forall b:(int,ttmp3C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,ttmp3C) farray. forall b:(int,ttmp3C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep1((a[temp___idx_155])) = to_rep1((b[((b__first - a__first) + temp___idx_155)]))))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

type ttmp4C

logic ttmp4Cqtint : ttmp4C -> int

axiom ttmp4Cqtaxiom : (forall i:ttmp4C. (1 <= ttmp4Cqtint(i)))

axiom ttmp4Cqtaxiom1 : (forall i:ttmp4C. (ttmp4Cqtint(i) <= 5))

predicate in_range3(x1: int) = ((1 <= x1) and (x1 <= 5))

function bool_eq5(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : ttmp4C, ttmp4C -> bool

logic dummy3 : ttmp4C

type ttmp4C__ref = { ttmp4C__content : ttmp4C
}

function ttmp4C__ref_ttmp4C__content__projection(a: ttmp4C__ref) : ttmp4C =
  (a).ttmp4C__content

function to_rep2(x1: ttmp4C) : int = ttmp4Cqtint(x1)

logic of_rep2 : int -> ttmp4C

axiom inversion_axiom2 :
  (forall x1:ttmp4C [to_rep2(x1)]. (of_rep2(to_rep2(x1)) = x1))

axiom range_axiom2 : (forall x1:ttmp4C [to_rep2(x1)]. in_range3(to_rep2(x1)))

axiom coerce_axiom2 :
  (forall x1:int [to_rep2(of_rep2(x1))]. (in_range3(x1) ->
  (to_rep2(of_rep2(x1)) = x1)))

type map__ref2 = { map__content2 : (int,ttmp4C) farray
}

logic slide2 : (int,ttmp4C) farray, int, int -> (int,ttmp4C) farray

axiom slide_eq2 :
  (forall a:(int,ttmp4C) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,ttmp4C) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,ttmp4C) farray, a__first: int, a__last: int,
  b: (int,ttmp4C) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,ttmp4C) farray. forall b:(int,ttmp4C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,ttmp4C) farray. forall b:(int,ttmp4C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,ttmp4C) farray. forall b:(int,ttmp4C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,ttmp4C) farray. forall b:(int,ttmp4C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep2((a[temp___idx_156])) = to_rep2((b[((b__first - a__first) + temp___idx_156)]))))))))

logic attr__ATTRIBUTE_ADDRESS4 : int

type ttmp5C

logic ttmp5Cqtint : ttmp5C -> int

axiom ttmp5Cqtaxiom : (forall i:ttmp5C. (1 <= ttmp5Cqtint(i)))

axiom ttmp5Cqtaxiom1 : (forall i:ttmp5C. (ttmp5Cqtint(i) <= 5))

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 5))

function bool_eq7(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : ttmp5C, ttmp5C -> bool

logic dummy4 : ttmp5C

type ttmp5C__ref = { ttmp5C__content : ttmp5C
}

function ttmp5C__ref_ttmp5C__content__projection(a: ttmp5C__ref) : ttmp5C =
  (a).ttmp5C__content

function to_rep3(x1: ttmp5C) : int = ttmp5Cqtint(x1)

logic of_rep3 : int -> ttmp5C

axiom inversion_axiom3 :
  (forall x1:ttmp5C [to_rep3(x1)]. (of_rep3(to_rep3(x1)) = x1))

axiom range_axiom3 : (forall x1:ttmp5C [to_rep3(x1)]. in_range4(to_rep3(x1)))

axiom coerce_axiom3 :
  (forall x1:int [to_rep3(of_rep3(x1))]. (in_range4(x1) ->
  (to_rep3(of_rep3(x1)) = x1)))

type map__ref3 = { map__content3 : (int,ttmp5C) farray
}

logic slide3 : (int,ttmp5C) farray, int, int -> (int,ttmp5C) farray

axiom slide_eq3 :
  (forall a:(int,ttmp5C) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,ttmp5C) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,ttmp5C) farray, a__first: int, a__last: int,
  b: (int,ttmp5C) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep3((a[temp___idx_157])) = to_rep3((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev12 :
  (forall a:(int,ttmp5C) farray. forall b:(int,ttmp5C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev13 :
  (forall a:(int,ttmp5C) farray. forall b:(int,ttmp5C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev14 :
  (forall a:(int,ttmp5C) farray. forall b:(int,ttmp5C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev15 :
  (forall a:(int,ttmp5C) farray. forall b:(int,ttmp5C) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep3((a[temp___idx_157])) = to_rep3((b[((b__first - a__first) + temp___idx_157)]))))))))

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

 (* File "p.adb", line 1, characters 0-0 *)
goal defqtvc : (dynamic_invariant(x, true, false, true, true) ->
  (dynamic_invariant(y, true, false, true, true) -> in_range1(x)))
