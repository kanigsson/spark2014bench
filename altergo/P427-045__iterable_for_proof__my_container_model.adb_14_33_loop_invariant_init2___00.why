(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic m_has_element : (int,natural) farray, int -> bool

logic m_has_element__function_guard : bool, (int,natural) farray, int -> prop

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

axiom m_has_element__def_axiom :
  (forall c:(int,natural) farray.
  (forall p:int [m_has_element(c, p)]. ((m_has_element(c, p) = true) ->
  (1 <= p))))

axiom m_has_element__def_axiom1 :
  (forall c:(int,natural) farray.
  (forall p:int [m_has_element(c, p)]. ((m_has_element(c, p) = true) ->
  (p <= 100))))

axiom m_has_element__def_axiom2 :
  (forall c:(int,natural) farray.
  (forall p:int [m_has_element(c, p)]. (((1 <= p) and (p <= 100)) ->
  (m_has_element(c, p) = true))))

logic m_element : (int,natural) farray, int -> int

logic m_element__function_guard : int, (int,natural) farray, int -> prop

axiom m_element__post_axiom :
  (forall c:(int,natural) farray. forall p:int.
  m_has_element__function_guard(m_has_element(c, p), c, p))

axiom m_element__post_axiom1 :
  (forall c:(int,natural) farray.
  (forall p:int [m_element(c, p)]. ((dynamic_invariant(p, true, true, true,
  true) and (m_has_element(c, p) = true)) -> (let result = m_element(c, p)
  : int in (m_element__function_guard(result, c, p) ->
  dynamic_invariant(result, true, false, true, true))))))

axiom m_element__def_axiom :
  (forall c:(int,natural) farray.
  (forall p:int [m_element(c, p)]. (dynamic_invariant(p, true, true, true,
  true) -> (m_element(c, p) = to_rep((c[p]))))))

logic get_model : (int,natural) farray -> (int,natural) farray

logic get_model__function_guard : (int,natural) farray,
  (int,natural) farray -> prop

axiom get_model__def_axiom :
  (forall c:(int,natural) farray [get_model(c)]. (get_model(c) = c))

logic valid : int -> bool

logic valid__function_guard : bool, int -> prop

axiom valid__def_axiom :
  (forall e:int [valid(e)]. ((valid(e) = true) -> (0 <  e)))

axiom valid__def_axiom1 :
  (forall e:int [valid(e)]. ((0 <  e) -> (valid(e) = true)))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type my_index

logic my_indexqtint : my_index -> int

axiom my_indexqtaxiom : (forall i:my_index. (1 <= my_indexqtint(i)))

axiom my_indexqtaxiom1 : (forall i:my_index. (my_indexqtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : my_index, my_index -> bool

logic dummy1 : my_index

type my_index__ref = { my_index__content : my_index
}

function my_index__ref_my_index__content__projection(a: my_index__ref) : my_index =
  (a).my_index__content

type t3b

logic t3bqtint : t3b -> int

axiom t3bqtaxiom : (forall i:t3b. (1 <= t3bqtint(i)))

axiom t3bqtaxiom1 : (forall i:t3b. (t3bqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : t3b, t3b -> bool

logic dummy2 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : t3b =
  (a).t3b__content

predicate dynamic_invariant1(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (1 <= 100)) -> in_range2(temp___expr_169))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 1)

 (* File "my_container_model.ads", line 25, characters 0-0 *)
goal defqtvc :
  (forall c:(int,natural) farray.
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 100) then true else false)) = true) ->
  (forall spark__branch:bool. forall c1:(int,natural) farray.
  ((exists o:int. ((to_rep((c[i])) = o) and
   ((spark__branch = (if (o = 0) then true else false)) and
   (if (spark__branch = true) then (c1 = (c[i <- rliteral])) else (c1 = c))))) ->
  (forall j:int. (((1 <= j) and (j <= i)) ->
  ((forall c2:(int,natural) farray. forall j1:int.
   valid__function_guard(valid(to_rep((c2[j1]))), to_rep((c2[j1])))) ->
  (valid(to_rep((c1[j]))) = true))))))))))
