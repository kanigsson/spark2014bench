(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__p__dot__x : integer; rec__p__dot__y : integer
}

function us_split_fields_rec__p__dot__x__projection(a: us_split_fields) : integer =
  (a).rec__p__dot__x

function us_split_fields_rec__p__dot__y__projection(a: us_split_fields) : integer =
  (a).rec__p__dot__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__p__dot__x) = to_rep(((b).us_split_fields1).rec__p__dot__x)) and
  (to_rep(((a).us_split_fields1).rec__p__dot__y) = to_rep(((b).us_split_fields1).rec__p__dot__y))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__dot__x__first__bit : int

logic p__dot__x__last__bit : int

logic p__dot__x__position : int

axiom p__dot__x__first__bit_axiom : (0 <= p__dot__x__first__bit)

axiom p__dot__x__last__bit_axiom :
  (p__dot__x__first__bit <  p__dot__x__last__bit)

axiom p__dot__x__position_axiom : (0 <= p__dot__x__position)

logic p__dot__y__first__bit : int

logic p__dot__y__last__bit : int

logic p__dot__y__position : int

axiom p__dot__y__first__bit_axiom : (0 <= p__dot__y__first__bit)

axiom p__dot__y__last__bit_axiom :
  (p__dot__y__first__bit <  p__dot__y__last__bit)

axiom p__dot__y__position_axiom : (0 <= p__dot__y__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type dot__ref = { dot__content : us_rep
}

function dot__ref_dot__content__projection(a: dot__ref) : us_rep =
  (a).dot__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy2 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : (int,us_rep) farray, (int,us_rep) farray -> bool

type us_split_fields2 = { rec__p__painting__plain : (int,us_rep) farray;
rec__p__painting__shadow : (int,us_rep) farray
}

function us_split_fields_rec__p__painting__plain__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__p__painting__plain

function us_split_fields_rec__p__painting__shadow__projection(a: us_split_fields2) : (int,us_rep) farray =
  (a).rec__p__painting__shadow

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((bool_eq3(((a).us_split_fields3).rec__p__painting__plain, 0, 2,
  ((b).us_split_fields3).rec__p__painting__plain, 0, 2) = true) and
  (bool_eq3(((a).us_split_fields3).rec__p__painting__shadow, 0, 2,
  ((b).us_split_fields3).rec__p__painting__shadow, 0,
  2) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic p__painting__plain__first__bit : int

logic p__painting__plain__last__bit : int

logic p__painting__plain__position : int

axiom p__painting__plain__first__bit_axiom :
  (0 <= p__painting__plain__first__bit)

axiom p__painting__plain__last__bit_axiom :
  (p__painting__plain__first__bit <  p__painting__plain__last__bit)

axiom p__painting__plain__position_axiom :
  (0 <= p__painting__plain__position)

logic p__painting__shadow__first__bit : int

logic p__painting__shadow__last__bit : int

logic p__painting__shadow__position : int

axiom p__painting__shadow__first__bit_axiom :
  (0 <= p__painting__shadow__first__bit)

axiom p__painting__shadow__last__bit_axiom :
  (p__painting__shadow__first__bit <  p__painting__shadow__last__bit)

axiom p__painting__shadow__position_axiom :
  (0 <= p__painting__shadow__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type painting__ref = { painting__content : us_rep1
}

function painting__ref_painting__content__projection(a: painting__ref) : us_rep1 =
  (a).painting__content

logic attr__ATTRIBUTE_ADDRESS : int

logic d : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type color

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : color, color -> bool

logic dummy4 : color

type color__ref = { color__content : color
}

function color__ref_color__content__projection(a: color__ref) : color =
  (a).color__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant1(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 2)) -> in_range2(temp___expr_171))

 (* File "p.ads", line 16, characters 0-0 *)
goal defqtvc :
  (forall p__split_fields:us_split_fields2.
  (forall p__split_fields1:us_split_fields2.
  ((p__split_fields1 = p__split_fields) ->
  ((exists c:int. (((0 <= c) and (c <= 2)) and
   (bool_eq2(((p__split_fields).rec__p__painting__plain[c]), d) = true))) ->
  (forall c:int. ((c = 0) -> ((andb((if (0 <= c) then true else false),
  (if (c <= 2) then true else false)) = true) ->
  (forall temp___loop_entry_264:us_split_fields2.
  ((temp___loop_entry_264 = p__split_fields) ->
  (((not (bool_eq3((p__split_fields).rec__p__painting__plain, 0, 2,
  (temp___loop_entry_264).rec__p__painting__plain, 0, 2) = true)) or
  (not (c = 0))) ->
  (forall p__split_fields2:us_split_fields2. forall c1:int.
  (((bool_eq3((p__split_fields2).rec__p__painting__plain, 0, 2,
  (temp___loop_entry_264).rec__p__painting__plain, 0, 2) = true) and
  (forall j:int. (((0 <= j) and (j <= (c1 - 1))) ->
  ((bool_eq2(((p__split_fields2).rec__p__painting__plain[j]), d) = true) ->
  (bool_eq2(((p__split_fields2).rec__p__painting__shadow[j]), d) = true))))) ->
  ((andb((if ((((p__split_fields2).rec__p__painting__plain = (p__split_fields).rec__p__painting__plain) and
  (forall temp___261:int. (((0 <= temp___261) and (temp___261 <= 2)) ->
  (((2 <  temp___261) or ((temp___261 <  0) or (c1 <= temp___261))) ->
  (((p__split_fields2).rec__p__painting__shadow[temp___261]) = ((p__split_fields).rec__p__painting__shadow[temp___261])))))) and
  in_range2(c1)) then true else false), (if ((0 <= c1) and
  (c1 <= 2)) then true else false)) = true) ->
  (forall p__split_fields3:us_split_fields2.
  ((exists spark__branch:bool.
   ((spark__branch = bool_eq2(((p__split_fields2).rec__p__painting__plain[c1]),
   d)) and (if (spark__branch = true) then (p__split_fields3 = {
   rec__p__painting__plain = (p__split_fields2).rec__p__painting__plain;
   rec__p__painting__shadow =
   ((p__split_fields2).rec__p__painting__shadow[c1 <- d])
   }) else (p__split_fields3 = p__split_fields2)))) ->
  ((not (c1 = 2)) ->
  (forall c2:int. ((c2 = (c1 + 1)) ->
  (((not (bool_eq3((p__split_fields3).rec__p__painting__plain, 0, 2,
  (temp___loop_entry_264).rec__p__painting__plain, 0, 2) = true)) or
  (not (c2 = 0))) ->
  (forall j:int. (((0 <= j) and (j <= (c2 - 1))) ->
  ((bool_eq2(((p__split_fields3).rec__p__painting__plain[j]), d) = true) ->
  (bool_eq2(((p__split_fields3).rec__p__painting__shadow[j]), d) = true)))))))))))))))))))))))
