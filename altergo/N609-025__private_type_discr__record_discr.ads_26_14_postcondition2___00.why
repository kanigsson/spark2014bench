(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__private_record__result_ty__found : bool
}

function us_split_discrs_rec__private_record__result_ty__found__projection(a: us_split_discrs) : bool =
  (a).rec__private_record__result_ty__found

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__private_record__result_ty : us_main_type
}

function us_split_fields_rec__private_record__result_ty__projection(a: us_split_fields) : us_main_type =
  (a).rec__private_record__result_ty

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__private_record__result_ty__found) = to_int(((b).us_split_discrs1).rec__private_record__result_ty__found)) and
  (us_main_eq(((a).us_split_fields1).rec__private_record__result_ty,
  ((b).us_split_fields1).rec__private_record__result_ty) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic private_record__result_ty__found__first__bit : int

logic private_record__result_ty__found__last__bit : int

logic private_record__result_ty__found__position : int

axiom private_record__result_ty__found__first__bit_axiom :
  (0 <= private_record__result_ty__found__first__bit)

axiom private_record__result_ty__found__last__bit_axiom :
  (private_record__result_ty__found__first__bit <  private_record__result_ty__found__last__bit)

axiom private_record__result_ty__found__position_axiom :
  (0 <= private_record__result_ty__found__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type result_ty__ref = { result_ty__content : us_rep
}

function result_ty__ref_result_ty__content__projection(a: result_ty__ref) : us_rep =
  (a).result_ty__content

logic get_content : us_rep -> int

logic get_content__function_guard : int, us_rep -> prop

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

axiom get_content__post_axiom :
  (forall r:us_rep [get_content(r)]. in_range2(get_content(r)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref_nat_array__content__projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

type t4s__ref = { t4s__content : us_t
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : us_t =
  (a).t4s__content

type us_split_discrs2 = { rec__record_discr__interm_result__upto : natural
}

function us_split_discrs_rec__record_discr__interm_result__upto__projection(a: us_split_discrs2) : natural =
  (a).rec__record_discr__interm_result__upto

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__record_discr__interm_result__to_search : us_t
}

function us_split_fields_rec__record_discr__interm_result__to_search__projection(a: us_split_fields2) : us_t =
  (a).rec__record_discr__interm_result__to_search

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq8(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs3).rec__record_discr__interm_result__upto) = to_rep(((b).us_split_discrs3).rec__record_discr__interm_result__upto)) and
  (bool_eq7(((a).us_split_fields3).rec__record_discr__interm_result__to_search,
  ((b).us_split_fields3).rec__record_discr__interm_result__to_search) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic record_discr__interm_result__upto__first__bit : int

logic record_discr__interm_result__upto__last__bit : int

logic record_discr__interm_result__upto__position : int

axiom record_discr__interm_result__upto__first__bit_axiom :
  (0 <= record_discr__interm_result__upto__first__bit)

axiom record_discr__interm_result__upto__last__bit_axiom :
  (record_discr__interm_result__upto__first__bit <  record_discr__interm_result__upto__last__bit)

axiom record_discr__interm_result__upto__position_axiom :
  (0 <= record_discr__interm_result__upto__position)

logic record_discr__interm_result__to_search__first__bit : int

logic record_discr__interm_result__to_search__last__bit : int

logic record_discr__interm_result__to_search__position : int

axiom record_discr__interm_result__to_search__first__bit_axiom :
  (0 <= record_discr__interm_result__to_search__first__bit)

axiom record_discr__interm_result__to_search__last__bit_axiom :
  (record_discr__interm_result__to_search__first__bit <  record_discr__interm_result__to_search__last__bit)

axiom record_discr__interm_result__to_search__position_axiom :
  (0 <= record_discr__interm_result__to_search__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type interm_result__ref = { interm_result__content : us_rep1
}

function interm_result__ref_interm_result__content__projection(a: interm_result__ref) : us_rep1 =
  (a).interm_result__content

logic r : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic search_upto : us_rep1, int -> us_rep

logic search_upto__function_guard : us_rep, us_rep1, int -> prop

logic mk_result : bool, int -> us_rep

logic mk_result__function_guard : us_rep, bool, int -> prop

axiom mk_result__post_axiom :
  (forall found:bool.
  (forall content:int [mk_result(found, content)].
  (dynamic_invariant1(content, true, true, true, true) ->
  (forall result:us_rep. get_content__function_guard(get_content(result),
  result)))))

axiom mk_result__post_axiom1 :
  (forall found:bool.
  (forall content:int [mk_result(found, content)].
  (dynamic_invariant1(content, true, true, true, true) -> (let result =
  mk_result(found, content) : us_rep in (mk_result__function_guard(result,
  found, content) ->
  ((((result).us_split_discrs1).rec__private_record__result_ty__found = true) ->
  (found = true)))))))

axiom mk_result__post_axiom2 :
  (forall found:bool.
  (forall content:int [mk_result(found, content)].
  (dynamic_invariant1(content, true, true, true, true) -> (let result =
  mk_result(found, content) : us_rep in (mk_result__function_guard(result,
  found, content) -> ((found = true) ->
  (((result).us_split_discrs1).rec__private_record__result_ty__found = true)))))))

axiom mk_result__post_axiom3 :
  (forall found:bool.
  (forall content:int [mk_result(found, content)].
  (dynamic_invariant1(content, true, true, true, true) -> (let result =
  mk_result(found, content) : us_rep in (mk_result__function_guard(result,
  found, content) -> ((found = true) -> (get_content(result) = content)))))))

logic result__ : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate in_range4(rec__private_record__result_ty__found1: bool,
  a: us_rep) =
  (rec__private_record__result_ty__found1 = ((a).us_split_discrs1).rec__private_record__result_ty__found)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic private_record__result_ty__found__first__bit1 : int

logic private_record__result_ty__found__last__bit1 : int

logic private_record__result_ty__found__position1 : int

axiom private_record__result_ty__found__first__bit_axiom1 :
  (0 <= private_record__result_ty__found__first__bit1)

axiom private_record__result_ty__found__last__bit_axiom1 :
  (private_record__result_ty__found__first__bit1 <  private_record__result_ty__found__last__bit1)

axiom private_record__result_ty__found__position_axiom1 :
  (0 <= private_record__result_ty__found__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type my_res__ref = { my_res__content : us_rep
}

function my_res__ref_my_res__content__projection(a: my_res__ref) : us_rep =
  (a).my_res__content

logic result1 : us_rep

logic attr__ATTRIBUTE_ADDRESS3 : int

logic result1_base : us_rep

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant2(temp___expr_182: us_rep1,
  temp___is_init_178: bool, temp___skip_constant_179: bool,
  temp___do_toplevel_180: bool, temp___do_typ_inv_181: bool) =
  (let temp___183 =
  ((temp___expr_182).us_split_discrs3).rec__record_discr__interm_result__upto
  : natural in (dynamic_property(1, to_rep(temp___183),
  first1(((temp___expr_182).us_split_fields3).rec__record_discr__interm_result__to_search),
  last1(((temp___expr_182).us_split_fields3).rec__record_discr__interm_result__to_search)) and
  ((first1(((temp___expr_182).us_split_fields3).rec__record_discr__interm_result__to_search) = 1) and
  (last1(((temp___expr_182).us_split_fields3).rec__record_discr__interm_result__to_search) = to_rep(temp___183)))))

predicate dynamic_invariant3(temp___expr_243: us_rep,
  temp___is_init_239: bool, temp___skip_constant_240: bool,
  temp___do_toplevel_241: bool, temp___do_typ_inv_242: bool) =
  ((not (temp___skip_constant_240 = true)) ->
  in_range4(bool_ne(to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto),
  0), temp___expr_243))

predicate default_initial_assumption(temp___expr_245: us_rep,
  temp___skip_top_level_246: bool) =
  (((temp___expr_245).us_split_discrs1).rec__private_record__result_ty__found = bool_ne(to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto),
  0))

type t12b__ref = { t12b__content : us_t
}

function t12b__ref_t12b__content__projection(a: t12b__ref) : us_t =
  (a).t12b__content

type us_split_fields4 = { rec__record_discr__interm_result__to_search1 : us_t
}

function us_split_fields_rec__record_discr__interm_result__to_search__4__projection(a: us_split_fields4) : us_t =
  (a).rec__record_discr__interm_result__to_search1

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__5__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs4

function us_rep___split_fields__5__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function to_base(a: us_rep2) : us_rep1 = { us_split_discrs3 =
  (a).us_split_discrs4; us_split_fields3 = {
  rec__record_discr__interm_result__to_search =
  of_array(to_array(((a).us_split_fields5).rec__record_discr__interm_result__to_search1),
  first1(((a).us_split_fields5).rec__record_discr__interm_result__to_search1),
  last1(((a).us_split_fields5).rec__record_discr__interm_result__to_search1))
  } }

function of_base(r1: us_rep1) : us_rep2 = { us_split_discrs4 =
  (r1).us_split_discrs3; us_split_fields5 = {
  rec__record_discr__interm_result__to_search1 =
  of_array(to_array(((r1).us_split_fields3).rec__record_discr__interm_result__to_search),
  first1(((r1).us_split_fields3).rec__record_discr__interm_result__to_search),
  last1(((r1).us_split_fields3).rec__record_discr__interm_result__to_search))
  } }

function bool_eq9(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep(((a).us_split_discrs4).rec__record_discr__interm_result__upto) = to_rep(((b).us_split_discrs4).rec__record_discr__interm_result__upto)) and
  (bool_eq7(((a).us_split_fields5).rec__record_discr__interm_result__to_search1,
  ((b).us_split_fields5).rec__record_discr__interm_result__to_search1) = true)) then true else false)

predicate in_range5(rec__record_discr__interm_result__upto1: int,
  a: us_rep1) =
  (rec__record_discr__interm_result__upto1 = to_rep(((a).us_split_discrs3).rec__record_discr__interm_result__upto))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic record_discr__interm_result__upto__first__bit1 : int

logic record_discr__interm_result__upto__last__bit1 : int

logic record_discr__interm_result__upto__position1 : int

axiom record_discr__interm_result__upto__first__bit_axiom1 :
  (0 <= record_discr__interm_result__upto__first__bit1)

axiom record_discr__interm_result__upto__last__bit_axiom1 :
  (record_discr__interm_result__upto__first__bit1 <  record_discr__interm_result__upto__last__bit1)

axiom record_discr__interm_result__upto__position_axiom1 :
  (0 <= record_discr__interm_result__upto__position1)

logic record_discr__interm_result__to_search__first__bit1 : int

logic record_discr__interm_result__to_search__last__bit1 : int

logic record_discr__interm_result__to_search__position1 : int

axiom record_discr__interm_result__to_search__first__bit_axiom1 :
  (0 <= record_discr__interm_result__to_search__first__bit1)

axiom record_discr__interm_result__to_search__last__bit_axiom1 :
  (record_discr__interm_result__to_search__first__bit1 <  record_discr__interm_result__to_search__last__bit1)

axiom record_discr__interm_result__to_search__position_axiom1 :
  (0 <= record_discr__interm_result__to_search__position1)

logic user_eq7 : us_rep2, us_rep2 -> bool

logic dummy7 : us_rep2

type t11b__ref = { t11b__content : us_rep2
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_rep2 =
  (a).t11b__content

type t15b__ref = { t15b__content : us_t
}

function t15b__ref_t15b__content__projection(a: t15b__ref) : us_t =
  (a).t15b__content

axiom result____def_axiom :
  mk_result__function_guard(mk_result(bool_ne(to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto),
  0),
  (if (to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = 0) then 1 else to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto))),
  bool_ne(to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto),
  0),
  (if (to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = 0) then 1 else to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto)))

axiom result____def_axiom1 :
  (result__ = mk_result(bool_ne(to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto),
  0),
  (if (to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = 0) then 1 else to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto))))

axiom result1__def_axiom : (result1 = result__)

axiom result1_base__def_axiom : (result1_base = result1)

 (* File "record_discr.ads", line 25, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(r, true, false, true, true) ->
  (dynamic_invariant(e, true, false, true, true) ->
  (forall record_discr__search_upto__result:us_rep.
  ((forall record_discr__search_upto__result__assume:us_rep.
   get_content__function_guard(get_content(record_discr__search_upto__result__assume),
   record_discr__search_upto__result__assume)) ->
  ((forall o:us_rep. get_content__function_guard(get_content(o), o)) ->
  ((forall o:us_rep. get_content__function_guard(get_content(o), o)) ->
  ((exists o:int.
   ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o) and
   (exists o1:int.
   ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o1) and
   (exists o2:int.
   ((exists o3:int.
    ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o3) and
    (if (o3 = 0) then (o2 = 1) else (exists o4:int.
                                    ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o4) and
                                    ((o2 = o4) and in_range2(o4))))))) and
   (exists o3:int.
   ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o3) and
   (let o4 = (if (o3 = 0) then false else true) : bool in
   (let record_discr__search_upto__result__assume = mk_result(o4, o2)
   : us_rep in
   ((mk_result__function_guard(record_discr__search_upto__result__assume, o4,
   o2) and
   (((((record_discr__search_upto__result__assume).us_split_discrs1).rec__private_record__result_ty__found = true) <->
   (not (o3 = 0))) and ((not (o3 = 0)) ->
   (get_content(record_discr__search_upto__result__assume) = o2)))) and
   ((record_discr__search_upto__result__assume = result__) and
   (exists o5:int.
   ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o5) and
   ((result__ = result1) and (dynamic_invariant3(result1, true, false, true,
   true) and ((result1 = result1_base) and
   (exists o6:bool.
   ((exists o7:int.
    ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o7) and
    (if (o7 = 0) then (o6 = true) else (let temp___318 =
    ((r).us_split_fields3).rec__record_discr__interm_result__to_search
    : us_t in
    (exists temp___319:int.
    ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = temp___319) and
    (((first1(temp___318) <= temp___319) and
    (temp___319 <= last1(temp___318))) and
    (exists o8:int. ((to_rep((to_array(temp___318)[temp___319])) = o8) and
    (o6 = (if (o8 = e) then true else false))))))))))) and
   (exists spark__branch:bool. ((spark__branch = o6) and
   (if (spark__branch = true) then (record_discr__search_upto__result = result1_base) else (let o7 =
   e : int in
   (exists o8:int.
   ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o8) and
   (let temp___315 = (o8 - 1) : int in (let temp___316 =
   ((r).us_split_fields3).rec__record_discr__interm_result__to_search
   : us_t in (((1 <= temp___315) -> (((first1(temp___316) <= 1) and
   (1 <= last1(temp___316))) and ((first1(temp___316) <= temp___315) and
   (temp___315 <= last1(temp___316))))) and (let temp___317 =
   of_array(to_array(temp___316), 1, temp___315) : us_t in
   ((if (first1(temp___317) <= last1(temp___317)) then ((1 <= (to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) - 1)) and
   ((last1(temp___317) - first1(temp___317)) = ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) - 1) - 1))) else ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) - 1) <  1)) and
   (exists o9:int.
   ((to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto) = o9) and
   (let o10 = (o9 - 1) : int in (in_range1(o10) and
   (exists o11:natural. ((to_rep(o11) = o10) and (let o12 = to_base({
   us_split_discrs4 = { rec__record_discr__interm_result__upto = o11 };
   us_split_fields5 = { rec__record_discr__interm_result__to_search1 =
   of_array(to_array(temp___317), first1(temp___317), last1(temp___317)) } })
   : us_rep1 in (let o13 = search_upto(o12, o7) : us_rep in
   ((search_upto__function_guard(o13, o12, o7) and
   (if (((o13).us_split_discrs1).rec__private_record__result_ty__found = true) then ((get_content(o13) <= to_rep(((o12).us_split_discrs3).rec__record_discr__interm_result__upto)) and
   (to_rep((to_array(((o12).us_split_fields3).rec__record_discr__interm_result__to_search)[get_content(o13)])) = o7)) else 
   (forall i:int. (((1 <= i) and
   (i <= to_rep(((o12).us_split_discrs3).rec__record_discr__interm_result__upto))) ->
   (not (to_rep((to_array(((o12).us_split_fields3).rec__record_discr__interm_result__to_search)[i])) = o7)))))) and
   (record_discr__search_upto__result = o13)))))))))))))))))))))))))))))))))))))))) ->
  ((((record_discr__search_upto__result).us_split_discrs1).rec__private_record__result_ty__found = true) ->
  ((forall record_discr__search_upto__result1:us_rep.
   get_content__function_guard(get_content(record_discr__search_upto__result1),
   record_discr__search_upto__result1)) ->
  (get_content(record_discr__search_upto__result) <= to_rep(((r).us_split_discrs3).rec__record_discr__interm_result__upto)))))))))))
