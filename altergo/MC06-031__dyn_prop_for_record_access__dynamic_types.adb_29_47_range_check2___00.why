(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref_nat_array__content__projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic a : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic c : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic from : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic first2 : int

logic last2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type a_range__ref = { a_range__content : integer
}

function a_range__ref_a_range__content__projection(a1: a_range__ref) : integer =
  (a1).a_range__content

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a1:(int,integer) farray.
  (forall first3:int [slide1(a1, first3, first3)]. (slide1(a1, first3,
  first3) = a1)))

axiom slide_def1 :
  (forall a1:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a1, old_first, new_first)[i])]. ((slide1(a1,
  old_first, new_first)[i]) = (a1[(i - (new_first - old_first))]))))))

function bool_eq7(a1: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a1[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a1:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a1, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a1:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a1, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a1:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a1, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a1:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a1, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1((a1[temp___idx_156])) = to_rep1((b[((b__first - a__first) + temp___idx_156)]))))))))

logic dummy5 : (int,integer) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq5 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__dynamic_types__search__result_type__from :
(int,integer) farray; rec__dynamic_types__search__result_type__result :
natural
}

function us_split_fields_rec__dynamic_types__search__result_type__from__projection(a1: us_split_fields) : (int,integer) farray =
  (a1).rec__dynamic_types__search__result_type__from

function us_split_fields_rec__dynamic_types__search__result_type__result__projection(a1: us_split_fields) : natural =
  (a1).rec__dynamic_types__search__result_type__result

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a1: us_split_fields__ref) : us_split_fields =
  (a1).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a1: us_rep) : us_split_fields =
  (a1).us_split_fields1

function bool_eq8(a1: us_rep, b: us_rep) : bool =
  (if ((bool_eq7(((a1).us_split_fields1).rec__dynamic_types__search__result_type__from,
  1, 1, ((b).us_split_fields1).rec__dynamic_types__search__result_type__from,
  1, 1) = true) and
  (to_rep(((a1).us_split_fields1).rec__dynamic_types__search__result_type__result) = to_rep(((b).us_split_fields1).rec__dynamic_types__search__result_type__result))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic dynamic_types__search__result_type__from__first__bit : int

logic dynamic_types__search__result_type__from__last__bit : int

logic dynamic_types__search__result_type__from__position : int

axiom dynamic_types__search__result_type__from__first__bit_axiom :
  (0 <= dynamic_types__search__result_type__from__first__bit)

axiom dynamic_types__search__result_type__from__last__bit_axiom :
  (dynamic_types__search__result_type__from__first__bit <  dynamic_types__search__result_type__from__last__bit)

axiom dynamic_types__search__result_type__from__position_axiom :
  (0 <= dynamic_types__search__result_type__from__position)

logic dynamic_types__search__result_type__result__first__bit : int

logic dynamic_types__search__result_type__result__last__bit : int

logic dynamic_types__search__result_type__result__position : int

axiom dynamic_types__search__result_type__result__first__bit_axiom :
  (0 <= dynamic_types__search__result_type__result__first__bit)

axiom dynamic_types__search__result_type__result__last__bit_axiom :
  (dynamic_types__search__result_type__result__first__bit <  dynamic_types__search__result_type__result__last__bit)

axiom dynamic_types__search__result_type__result__position_axiom :
  (0 <= dynamic_types__search__result_type__result__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type result_type__ref = { result_type__content : us_rep
}

function result_type__ref_result_type__content__projection(a1: result_type__ref) : us_rep =
  (a1).result_type__content

predicate dynamic_invariant1(temp___expr_162: us_t, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = ((not (temp___skip_constant_159 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_162),
  last1(temp___expr_162)))

logic temp_____aggregate_def_219 : int -> (int,integer) farray

logic temp_____aggregate_def_223 : int -> (int,integer) farray

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant4(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  (first2 <= last2)) -> dynamic_property1(first2, last2, temp___expr_179))

axiom first__def_axiom : (first2 = first1(a))

axiom last__def_axiom : (last2 = last1(a))

type twrapperD1

logic twrapperD1qtint : twrapperD1 -> int

axiom twrapperD1qtaxiom : (forall i:twrapperD1. (1 <= twrapperD1qtint(i)))

axiom twrapperD1qtaxiom1 : (forall i:twrapperD1. (twrapperD1qtint(i) <= 1))

predicate in_range4(x: int) = ((1 <= x) and (x <= 1))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : twrapperD1, twrapperD1 -> bool

logic dummy7 : twrapperD1

type twrapperD1__ref = { twrapperD1__content : twrapperD1
}

function twrapperD1__ref_twrapperD1__content__projection(a1: twrapperD1__ref) : twrapperD1 =
  (a1).twrapperD1__content

predicate dynamic_invariant5(temp___expr_186: (int,integer) farray,
  temp___is_init_182: bool, temp___skip_constant_183: bool,
  temp___do_toplevel_184: bool, temp___do_typ_inv_185: bool) =
  (forall temp___187:int. (((1 <= temp___187) and (temp___187 <= 1)) ->
  (((temp___is_init_182 = true) or (first2 <= last2)) ->
  dynamic_property1(first2, last2, to_rep1((temp___expr_186[temp___187]))))))

predicate dynamic_invariant6(temp___expr_196: us_rep,
  temp___is_init_192: bool, temp___skip_constant_193: bool,
  temp___do_toplevel_194: bool, temp___do_typ_inv_195: bool) =
  (forall temp___197:int. (((1 <= temp___197) and (temp___197 <= 1)) ->
  (((temp___is_init_192 = true) or (first2 <= last2)) ->
  dynamic_property1(first2, last2,
  to_rep1((((temp___expr_196).us_split_fields1).rec__dynamic_types__search__result_type__from[temp___197]))))))

axiom def_axiom :
  (forall temp___221:int. (dynamic_invariant4(temp___221, true, true, true,
  true) ->
  (to_rep1((temp_____aggregate_def_219(temp___221)[1])) = temp___221)))

axiom def_axiom1 :
  (forall temp___225:int. (dynamic_invariant4(temp___225, true, true, true,
  true) ->
  (to_rep1((temp_____aggregate_def_223(temp___225)[1])) = temp___225)))

 (* File "dynamic_types.adb", line 13, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(a, true, false, true, true) ->
  (dynamic_invariant(c, true, false, true, true) -> (dynamic_invariant(from,
  true, false, true, true) -> (dynamic_invariant1(a, true, false, true,
  true) -> (dynamic_invariant(c, true, false, true, true) ->
  (((first1(a) <= from) and (from <= last1(a))) -> (((first1(a) <= from) and
  (from <= last1(a))) ->
  (forall o:int. ((to_rep((to_array(a)[from])) = o) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o = c) then true else false)) ->
  ((not (spark__branch = true)) -> dynamic_property1(first2, last2, from)))))))))))))
