(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type length_t

logic length_tqtint : length_t -> int

axiom length_tqtaxiom : (forall i:length_t. (0 <= length_tqtint(i)))

axiom length_tqtaxiom1 : (forall i:length_t. (length_tqtint(i) <= 5))

predicate in_range(x: int) = ((0 <= x) and (x <= 5))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : length_t, length_t -> bool

logic dummy : length_t

type length_t__ref = { length_t__content : length_t
}

function length_t__ref_length_t__content__projection(a: length_t__ref) : length_t =
  (a).length_t__content

function to_rep(x: length_t) : int = length_tqtint(x)

logic of_rep : int -> length_t

axiom inversion_axiom :
  (forall x:length_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:length_t [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

logic dummy2 : (int,character) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__array_aggregates__string_t__len : length_t;
rec__array_aggregates__string_t__elem : (int,character) farray
}

function us_split_fields_rec__array_aggregates__string_t__len__projection(a: us_split_fields) : length_t =
  (a).rec__array_aggregates__string_t__len

function us_split_fields_rec__array_aggregates__string_t__elem__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__array_aggregates__string_t__elem

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__3__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__array_aggregates__string_t__len) = to_rep(((b).us_split_fields1).rec__array_aggregates__string_t__len)) and
  (bool_eq2(((a).us_split_fields1).rec__array_aggregates__string_t__elem, 1,
  5, ((b).us_split_fields1).rec__array_aggregates__string_t__elem, 1,
  5) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic array_aggregates__string_t__len__first__bit : int

logic array_aggregates__string_t__len__last__bit : int

logic array_aggregates__string_t__len__position : int

axiom array_aggregates__string_t__len__first__bit_axiom :
  (0 <= array_aggregates__string_t__len__first__bit)

axiom array_aggregates__string_t__len__last__bit_axiom :
  (array_aggregates__string_t__len__first__bit <  array_aggregates__string_t__len__last__bit)

axiom array_aggregates__string_t__len__position_axiom :
  (0 <= array_aggregates__string_t__len__position)

logic array_aggregates__string_t__elem__first__bit : int

logic array_aggregates__string_t__elem__last__bit : int

logic array_aggregates__string_t__elem__position : int

axiom array_aggregates__string_t__elem__first__bit_axiom :
  (0 <= array_aggregates__string_t__elem__first__bit)

axiom array_aggregates__string_t__elem__last__bit_axiom :
  (array_aggregates__string_t__elem__first__bit <  array_aggregates__string_t__elem__last__bit)

axiom array_aggregates__string_t__elem__position_axiom :
  (0 <= array_aggregates__string_t__elem__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type string_t__ref = { string_t__content : us_rep
}

function string_t__ref_string_t__content__projection(a: string_t__ref) : us_rep =
  (a).string_t__content

type map__ref1 = { map__content1 : (int,us_rep) farray
}

logic slide1 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq1 :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_165:int. (((a__first <= temp___idx_165) and
  (temp___idx_165 <= a__last)) -> (bool_eq3((a[temp___idx_165]),
  (b[((b__first - a__first) + temp___idx_165)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_165:int. (((a__first <= temp___idx_165) and
  (temp___idx_165 <= a__last)) -> (bool_eq3((a[temp___idx_165]),
  (b[((b__first - a__first) + temp___idx_165)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic temp_____aggregate_def_600 : us_rep -> (int,us_rep) farray

logic temp_____aggregate_def_604 : int, int, int, int,
  int -> (int,character) farray

predicate dynamic_invariant(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

predicate dynamic_invariant1(temp___expr_309: int, temp___is_init_305: bool,
  temp___skip_constant_306: bool, temp___do_toplevel_307: bool,
  temp___do_typ_inv_308: bool) = (((temp___is_init_305 = true) or
  (0 <= 5)) -> in_range(temp___expr_309))

axiom def_axiom :
  (forall temp___602:us_rep.
  (forall temp___603:int.
  ((temp_____aggregate_def_600(temp___602)[temp___603]) = temp___602)))

axiom def_axiom1 :
  (forall temp___606:int. forall temp___607:int. forall temp___608:int.
  forall temp___609:int. forall temp___610:int.
  (((dynamic_invariant(temp___606, true, true, true, true) and
  dynamic_invariant(temp___607, true, true, true, true)) and
  ((dynamic_invariant(temp___608, true, true, true, true) and
  dynamic_invariant(temp___609, true, true, true, true)) and
  dynamic_invariant(temp___610, true, true, true, true))) ->
  (to_rep1((temp_____aggregate_def_604(temp___606, temp___607, temp___608,
  temp___609, temp___610)[1])) = temp___606)))

axiom def_axiom2 :
  (forall temp___606:int. forall temp___607:int. forall temp___608:int.
  forall temp___609:int. forall temp___610:int.
  (((dynamic_invariant(temp___606, true, true, true, true) and
  dynamic_invariant(temp___607, true, true, true, true)) and
  ((dynamic_invariant(temp___608, true, true, true, true) and
  dynamic_invariant(temp___609, true, true, true, true)) and
  dynamic_invariant(temp___610, true, true, true, true))) ->
  (to_rep1((temp_____aggregate_def_604(temp___606, temp___607, temp___608,
  temp___609, temp___610)[2])) = temp___607)))

axiom def_axiom3 :
  (forall temp___606:int. forall temp___607:int. forall temp___608:int.
  forall temp___609:int. forall temp___610:int.
  (((dynamic_invariant(temp___606, true, true, true, true) and
  dynamic_invariant(temp___607, true, true, true, true)) and
  ((dynamic_invariant(temp___608, true, true, true, true) and
  dynamic_invariant(temp___609, true, true, true, true)) and
  dynamic_invariant(temp___610, true, true, true, true))) ->
  (to_rep1((temp_____aggregate_def_604(temp___606, temp___607, temp___608,
  temp___609, temp___610)[3])) = temp___608)))

axiom def_axiom4 :
  (forall temp___606:int. forall temp___607:int. forall temp___608:int.
  forall temp___609:int. forall temp___610:int.
  (((dynamic_invariant(temp___606, true, true, true, true) and
  dynamic_invariant(temp___607, true, true, true, true)) and
  ((dynamic_invariant(temp___608, true, true, true, true) and
  dynamic_invariant(temp___609, true, true, true, true)) and
  dynamic_invariant(temp___610, true, true, true, true))) ->
  (to_rep1((temp_____aggregate_def_604(temp___606, temp___607, temp___608,
  temp___609, temp___610)[4])) = temp___609)))

axiom def_axiom5 :
  (forall temp___606:int. forall temp___607:int. forall temp___608:int.
  forall temp___609:int. forall temp___610:int.
  (((dynamic_invariant(temp___606, true, true, true, true) and
  dynamic_invariant(temp___607, true, true, true, true)) and
  ((dynamic_invariant(temp___608, true, true, true, true) and
  dynamic_invariant(temp___609, true, true, true, true)) and
  dynamic_invariant(temp___610, true, true, true, true))) ->
  (to_rep1((temp_____aggregate_def_604(temp___606, temp___607, temp___608,
  temp___609, temp___610)[5])) = temp___610)))

logic rliteral : length_t

axiom rliteral_axiom : (length_tqtint(rliteral) = 5)

 (* File "array_aggregates.adb", line 262, characters 0-0 *)
goal defqtvc :
  (forall x:(int,us_rep) farray. ((x = temp_____aggregate_def_600({
  us_split_fields1 = { rec__array_aggregates__string_t__len = rliteral;
  rec__array_aggregates__string_t__elem = temp_____aggregate_def_604(72, 101,
  108, 108, 111) } })) ->
  (to_rep((((x[3])).us_split_fields1).rec__array_aggregates__string_t__len) = 3)))
