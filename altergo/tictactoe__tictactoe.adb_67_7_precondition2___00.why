(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant1(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type slot

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : slot, slot -> bool

logic dummy5 : slot

type slot__ref = { slot__content : slot
}

function slot__ref_slot__content__projection(a: slot__ref) : slot =
  (a).slot__content

logic to_rep2 : slot -> int

logic of_rep2 : int -> slot

axiom inversion_axiom2 :
  (forall x:slot [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:slot [to_rep2(x)]. in_range5(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range5(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref1 = { map__content1 : (int,slot) farray
}

logic slide1 : (int,slot) farray, int, int -> (int,slot) farray

axiom slide_eq1 :
  (forall a:(int,slot) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,slot) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq8(a: (int,slot) farray, a__first: int, a__last: int,
  b: (int,slot) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,slot) farray. forall b:(int,slot) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq8(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy6 : (int,slot) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq6 : (int,slot) farray, (int,slot) farray -> bool

type map__ref2 = { map__content2 : (int,(int,slot) farray) farray
}

logic slide2 : (int,(int,slot) farray) farray, int,
  int -> (int,(int,slot) farray) farray

axiom slide_eq2 :
  (forall a:(int,(int,slot) farray) farray.
  (forall first2:int [slide2(a, first2, first2)]. (slide2(a, first2,
  first2) = a)))

axiom slide_def2 :
  (forall a:(int,(int,slot) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,(int,slot) farray) farray, a__first: int,
  a__last: int, b: (int,(int,slot) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq8((a[temp___idx_155]), 1, 3,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 3) = true)))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,(int,slot) farray) farray.
  forall b:(int,(int,slot) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq8((a[temp___idx_155]), 1, 3,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 3) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic num_free_slots : (int,(int,slot) farray) farray -> int

logic num_free_slots__function_guard : int,
  (int,(int,slot) farray) farray -> prop

logic count_free_slots : int, int, (int,(int,slot) farray) farray -> int

logic count_free_slots__function_guard : int, int, int,
  (int,(int,slot) farray) farray -> prop

axiom num_free_slots__post_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [num_free_slots(tictactoe__my_board)]. (let result =
  num_free_slots(tictactoe__my_board) : int in
  (num_free_slots__function_guard(result, tictactoe__my_board) ->
  dynamic_invariant(result, true, false, true, true))))

axiom num_free_slots__def_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  count_free_slots__function_guard(count_free_slots(3, 3,
  tictactoe__my_board), 3, 3, tictactoe__my_board))

axiom num_free_slots__def_axiom1 :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [num_free_slots(tictactoe__my_board)].
  (num_free_slots(tictactoe__my_board) = count_free_slots(3, 3,
  tictactoe__my_board)))

logic is_full : (int,(int,slot) farray) farray -> bool

logic is_full__function_guard : bool, (int,(int,slot) farray) farray -> prop

axiom is_full__def_axiom :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  num_free_slots__function_guard(num_free_slots(tictactoe__my_board),
  tictactoe__my_board))

axiom is_full__def_axiom1 :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [is_full(tictactoe__my_board)]. ((is_full(tictactoe__my_board) = true) ->
  (num_free_slots(tictactoe__my_board) = 0)))

axiom is_full__def_axiom2 :
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [is_full(tictactoe__my_board)].
  ((num_free_slots(tictactoe__my_board) = 0) ->
  (is_full(tictactoe__my_board) = true)))

type pos

logic posqtint : pos -> int

axiom posqtaxiom : (forall i:pos. (1 <= posqtint(i)))

axiom posqtaxiom1 : (forall i:pos. (posqtint(i) <= 3))

predicate in_range6(x: int) = ((1 <= x) and (x <= 3))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : pos, pos -> bool

logic dummy7 : pos

type pos__ref = { pos__content : pos
}

function pos__ref_pos__content__projection(a: pos__ref) : pos =
  (a).pos__content

function to_rep3(x: pos) : int = posqtint(x)

logic of_rep3 : int -> pos

axiom inversion_axiom3 :
  (forall x:pos [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:pos [to_rep3(x)]. in_range6(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range6(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields = { rec__tictactoe__position__x : pos;
rec__tictactoe__position__y : pos
}

function us_split_fields_rec__tictactoe__position__x__projection(a: us_split_fields) : pos =
  (a).rec__tictactoe__position__x

function us_split_fields_rec__tictactoe__position__y__projection(a: us_split_fields) : pos =
  (a).rec__tictactoe__position__y

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq11(a: us_rep, b: us_rep) : bool =
  (if ((to_rep3(((a).us_split_fields1).rec__tictactoe__position__x) = to_rep3(((b).us_split_fields1).rec__tictactoe__position__x)) and
  (to_rep3(((a).us_split_fields1).rec__tictactoe__position__y) = to_rep3(((b).us_split_fields1).rec__tictactoe__position__y))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic tictactoe__position__x__first__bit : int

logic tictactoe__position__x__last__bit : int

logic tictactoe__position__x__position : int

axiom tictactoe__position__x__first__bit_axiom :
  (0 <= tictactoe__position__x__first__bit)

axiom tictactoe__position__x__last__bit_axiom :
  (tictactoe__position__x__first__bit <  tictactoe__position__x__last__bit)

axiom tictactoe__position__x__position_axiom :
  (0 <= tictactoe__position__x__position)

logic tictactoe__position__y__first__bit : int

logic tictactoe__position__y__last__bit : int

logic tictactoe__position__y__position : int

axiom tictactoe__position__y__first__bit_axiom :
  (0 <= tictactoe__position__y__first__bit)

axiom tictactoe__position__y__last__bit_axiom :
  (tictactoe__position__y__first__bit <  tictactoe__position__y__last__bit)

axiom tictactoe__position__y__position_axiom :
  (0 <= tictactoe__position__y__position)

logic user_eq8 : us_rep, us_rep -> bool

logic dummy8 : us_rep

type position__ref = { position__content : us_rep
}

function position__ref_position__content__projection(a: position__ref) : us_rep =
  (a).position__content

type map__ref3 = { map__content3 : (int,us_rep) farray
}

logic slide3 : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq3 :
  (forall a:(int,us_rep) farray.
  (forall first2:int [slide3(a, first2, first2)]. (slide3(a, first2,
  first2) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq12(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_163:int. (((a__first <= temp___idx_163) and
  (temp___idx_163 <= a__last)) -> (bool_eq11((a[temp___idx_163]),
  (b[((b__first - a__first) + temp___idx_163)])) = true)))) then true else false)

axiom bool_eq_rev12 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev13 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev14 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev15 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_163:int. (((a__first <= temp___idx_163) and
  (temp___idx_163 <= a__last)) -> (bool_eq11((a[temp___idx_163]),
  (b[((b__first - a__first) + temp___idx_163)])) = true))))))

logic dummy9 : (int,us_rep) farray

logic value__size3 : int

logic object__size3 : int

logic component__size2 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq9 : (int,us_rep) farray, (int,us_rep) farray -> bool

type map__ref4 = { map__content4 : (int,(int,us_rep) farray) farray
}

logic slide4 : (int,(int,us_rep) farray) farray, int,
  int -> (int,(int,us_rep) farray) farray

axiom slide_eq4 :
  (forall a:(int,(int,us_rep) farray) farray.
  (forall first2:int [slide4(a, first2, first2)]. (slide4(a, first2,
  first2) = a)))

axiom slide_def4 :
  (forall a:(int,(int,us_rep) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide4(a, old_first, new_first)[i])]. ((slide4(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq13(a: (int,(int,us_rep) farray) farray, a__first: int,
  a__last: int, b: (int,(int,us_rep) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) -> (bool_eq12((a[temp___idx_164]), 1, 3,
  (b[((b__first - a__first) + temp___idx_164)]), 1, 3) = true)))) then true else false)

axiom bool_eq_rev16 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev17 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev18 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev19 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq13(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_164:int. (((a__first <= temp___idx_164) and
  (temp___idx_164 <= a__last)) -> (bool_eq12((a[temp___idx_164]), 1, 3,
  (b[((b__first - a__first) + temp___idx_164)]), 1, 3) = true))))))

logic won : (int,(int,us_rep) farray) farray,
  (int,(int,slot) farray) farray -> int

logic won__function_guard : int, (int,(int,us_rep) farray) farray,
  (int,(int,slot) farray) farray -> prop

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant2(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 2)) -> in_range5(temp___expr_171))

axiom won__post_axiom :
  (forall tictactoe__all_solutions:(int,(int,us_rep) farray) farray.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [won(tictactoe__all_solutions, tictactoe__my_board)]. (let result =
  won(tictactoe__all_solutions, tictactoe__my_board) : int in
  (won__function_guard(result, tictactoe__all_solutions,
  tictactoe__my_board) -> dynamic_invariant2(result, true, false, true,
  true)))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic bool_eq14 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq14(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq14(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic line_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic line_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic page_length : us_private, us_private, us_private, us_private,
  us_private, us_private, us_private -> int

logic page_length__function_guard : int, us_private, us_private, us_private,
  us_private, us_private, us_private, us_private -> prop

logic attr__ATTRIBUTE_ADDRESS6 : int

type tTsSP1

logic tTsSP1qtint : tTsSP1 -> int

axiom tTsSP1qtaxiom : (forall i:tTsSP1. (1 <= tTsSP1qtint(i)))

axiom tTsSP1qtaxiom1 : (forall i:tTsSP1. (tTsSP1qtint(i) <= 1))

predicate in_range7(x: int) = ((1 <= x) and (x <= 1))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq10 : tTsSP1, tTsSP1 -> bool

logic dummy10 : tTsSP1

type tTsSP1__ref = { tTsSP1__content : tTsSP1
}

function tTsSP1__ref_tTsSP1__content__projection(a: tTsSP1__ref) : tTsSP1 =
  (a).tTsSP1__content

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range4(temp___expr_46))

predicate dynamic_invariant5(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant6(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (1 <= 3)) -> in_range6(temp___expr_178))

logic one_free_slot : int, int, (int,(int,slot) farray) farray -> int

logic one_free_slot__function_guard : int, int, int,
  (int,(int,slot) farray) farray -> prop

axiom one_free_slot__post_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [one_free_slot(x, y, tictactoe__my_board)]. ((dynamic_invariant6(x, true,
  true, true, true) and dynamic_invariant6(y, true, true, true, true)) ->
  (let result = one_free_slot(x, y, tictactoe__my_board) : int in
  (one_free_slot__function_guard(result, x, y, tictactoe__my_board) ->
  dynamic_invariant3(result, true, false, true, true))))))

axiom one_free_slot__def_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [one_free_slot(x, y, tictactoe__my_board)]. ((dynamic_invariant6(x, true,
  true, true, true) and dynamic_invariant6(y, true, true, true, true)) ->
  (one_free_slot(x, y,
  tictactoe__my_board) = (if (to_rep2(((tictactoe__my_board[x])[y])) = 0) then 1 else 0)))))

axiom count_free_slots__post_axiom :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [count_free_slots(x, y, tictactoe__my_board)]. ((dynamic_invariant6(x,
  true, true, true, true) and dynamic_invariant6(y, true, true, true,
  true)) -> (let result = count_free_slots(x, y, tictactoe__my_board)
  : int in (count_free_slots__function_guard(result, x, y,
  tictactoe__my_board) -> dynamic_invariant3(result, true, false, true,
  true))))))

axiom count_free_slots__def_axiom :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(1, 1, tictactoe__my_board), 1,
  1, tictactoe__my_board))))

axiom count_free_slots__def_axiom1 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(1, 2, tictactoe__my_board), 1,
  2, tictactoe__my_board))))

axiom count_free_slots__def_axiom2 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(1, 3, tictactoe__my_board), 1,
  3, tictactoe__my_board))))

axiom count_free_slots__def_axiom3 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(2, 1, tictactoe__my_board), 2,
  1, tictactoe__my_board))))

axiom count_free_slots__def_axiom4 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(2, 2, tictactoe__my_board), 2,
  2, tictactoe__my_board))))

axiom count_free_slots__def_axiom5 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(2, 3, tictactoe__my_board), 2,
  3, tictactoe__my_board))))

axiom count_free_slots__def_axiom6 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(3, 1, tictactoe__my_board), 3,
  1, tictactoe__my_board))))

axiom count_free_slots__def_axiom7 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(3, 2, tictactoe__my_board), 3,
  2, tictactoe__my_board))))

axiom count_free_slots__def_axiom8 :
  (forall x:int. forall y:int. ((dynamic_invariant6(x, true, true, true,
  true) and dynamic_invariant6(y, true, true, true, true)) ->
  (forall tictactoe__my_board:(int,(int,slot) farray) farray.
  one_free_slot__function_guard(one_free_slot(3, 3, tictactoe__my_board), 3,
  3, tictactoe__my_board))))

axiom count_free_slots__def_axiom9 :
  (forall x:int. forall y:int.
  (forall tictactoe__my_board:(int,(int,slot) farray) farray
  [count_free_slots(x, y, tictactoe__my_board)]. ((dynamic_invariant6(x,
  true, true, true, true) and dynamic_invariant6(y, true, true, true,
  true)) -> (count_free_slots(x, y,
  tictactoe__my_board) = ((((one_free_slot(1, 1,
  tictactoe__my_board) + (if (2 <= y) then one_free_slot(1, 2,
  tictactoe__my_board) else 0)) + (if (3 <= y) then one_free_slot(1, 3,
  tictactoe__my_board) else 0)) + (if (2 <= x) then ((one_free_slot(2, 1,
  tictactoe__my_board) + (if (2 <= y) then one_free_slot(2, 2,
  tictactoe__my_board) else 0)) + (if (3 <= y) then one_free_slot(2, 3,
  tictactoe__my_board) else 0)) else 0)) + (if (3 <= x) then ((one_free_slot(3,
  1, tictactoe__my_board) + (if (2 <= y) then one_free_slot(3, 2,
  tictactoe__my_board) else 0)) + (if (3 <= y) then one_free_slot(3, 3,
  tictactoe__my_board) else 0)) else 0))))))

type count

logic countqtint : count -> int

axiom countqtaxiom : (forall i:count. (0 <= countqtint(i)))

axiom countqtaxiom1 : (forall i:count. (countqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq11 : count, count -> bool

logic dummy11 : count

type count__ref = { count__content : count
}

function count__ref_count__content__projection(a: count__ref) : count =
  (a).count__content

predicate dynamic_invariant7(temp___expr_283: int, temp___is_init_279: bool,
  temp___skip_constant_280: bool, temp___do_toplevel_281: bool,
  temp___do_typ_inv_282: bool) = (((temp___is_init_279 = true) or
  (0 <= 2147483647)) -> in_range8(temp___expr_283))

axiom line_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant7(line_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

axiom page_length__post_axiom :
  (forall ada___ada__text_io__standard_in:us_private.
  forall ada___ada__text_io__file_system:us_private.
  forall ada___ada__text_io__standard_out:us_private.
  forall ada___ada__text_io__standard_err:us_private.
  forall ada___ada__text_io__current_in:us_private.
  forall ada___ada__text_io__current_out:us_private.
  forall ada___ada__text_io__current_err:us_private
  [page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err)].
  dynamic_invariant7(page_length(ada___ada__text_io__standard_in,
  ada___ada__text_io__file_system, ada___ada__text_io__standard_out,
  ada___ada__text_io__standard_err, ada___ada__text_io__current_in,
  ada___ada__text_io__current_out, ada___ada__text_io__current_err), true,
  false, true, true))

logic rliteral : pos

axiom rliteral_axiom : (posqtint(rliteral) = 1)

logic rliteral1 : pos

axiom rliteral_axiom1 : (posqtint(rliteral1) = 2)

logic rliteral2 : pos

axiom rliteral_axiom2 : (posqtint(rliteral2) = 3)

 (* File "tictactoe.ads", line 38, characters 0-0 *)
goal defqtvc :
  (forall my_board:(int,(int,slot) farray) farray.
  forall all_solutions:(int,(int,us_rep) farray) farray.
  (forall my_board1:(int,(int,slot) farray) farray.
  ((my_board1 = my_board) ->
  ((forall my_board2:(int,(int,slot) farray) farray.
   is_full__function_guard(is_full(my_board2), my_board2)) ->
  ((forall my_board2:(int,(int,slot) farray) farray.
   forall all_solutions1:(int,(int,us_rep) farray) farray.
   won__function_guard(won(all_solutions1, my_board2), all_solutions1,
   my_board2)) ->
  (((not (is_full(my_board) = true)) and (won(all_solutions,
  my_board) = 0)) ->
  (forall p__split_fields:us_split_fields.
  ((exists last2:int. exists standard_in:us_private.
   exists file_system:us_private. exists standard_out:us_private.
   exists standard_err:us_private. exists current_in:us_private.
   exists current_out:us_private. exists current_err:us_private.
   (dynamic_invariant(last2, false, false, true, true) and
   (exists found:bool. ((found = of_int(1)) and
   (exists o:integer. ((to_rep1(o) = 1) and
   (exists o1:integer. ((to_rep1(o1) = 1) and
   (exists last3:int. exists standard_in1:us_private.
   exists file_system1:us_private. exists standard_out1:us_private.
   exists standard_err1:us_private. exists current_in1:us_private.
   exists current_out1:us_private. exists current_err1:us_private.
   exists ada___ada__text_io__get_line__2__item:(int,character) farray.
   (((((line_length(standard_in, file_system, standard_out, standard_err,
   current_in, current_out, current_err) = line_length(standard_in1,
   file_system1, standard_out1, standard_err1, current_in1, current_out1,
   current_err1)) and (page_length(standard_in, file_system, standard_out,
   standard_err, current_in, current_out,
   current_err) = page_length(standard_in1, file_system1, standard_out1,
   standard_err1, current_in1, current_out1, current_err1))) and
   (if (0 <  length1(to_rep1(o1),
   to_rep1(o))) then (((to_rep1(o1) - 1) <= last3) and
   (last3 <= to_rep1(o))) else (last3 = (to_rep1(o1) - 1)))) and
   dynamic_invariant(last3, true, true, true, true)) and (let temp___494 =
   of_array(ada___ada__text_io__get_line__2__item, 1, 1) : us_t in
   (exists s:(int,character) farray. ((s = slide(to_array(temp___494),
   first1(temp___494), 1)) and
   (exists standard_in2:us_private. exists file_system2:us_private.
   exists standard_out2:us_private. exists standard_err2:us_private.
   exists current_in2:us_private. exists current_out2:us_private.
   exists current_err2:us_private. (((line_length(standard_in1, file_system1,
   standard_out1, standard_err1, current_in1, current_out1,
   current_err1) = line_length(standard_in2, file_system2, standard_out2,
   standard_err2, current_in2, current_out2, current_err2)) and
   (page_length(standard_in1, file_system1, standard_out1, standard_err1,
   current_in1, current_out1, current_err1) = page_length(standard_in2,
   file_system2, standard_out2, standard_err2, current_in2, current_out2,
   current_err2))) and
   (exists spark__branch:bool.
   ((spark__branch = (if (1 <= last3) then true else false)) and
   ((spark__branch = true) and
   (exists o2:int. ((to_rep((s[1])) = o2) and
   (exists c:int. ((c = o2) and (dynamic_invariant1(c, true, false, true,
   true) and
   (exists p__split_fields1:us_split_fields. ((p__split_fields1 = {
   rec__tictactoe__position__x = rliteral; rec__tictactoe__position__y =
   rliteral }) and
   (exists spark__branch1:bool. exists found1:bool.
   ((exists spark__branch2:bool.
    ((spark__branch2 = (if (c = 49) then true else false)) and
    (if (spark__branch2 = true) then (((p__split_fields = {
    rec__tictactoe__position__x = rliteral; rec__tictactoe__position__y =
    rliteral }) and (spark__branch1 = spark__branch2)) and
    (found1 = found)) else (exists spark__branch3:bool.
                           ((spark__branch3 = (if (c = 50) then true else false)) and
                           (if (spark__branch3 = true) then (((p__split_fields = {
                           rec__tictactoe__position__x = rliteral1;
                           rec__tictactoe__position__y = rliteral }) and
                           (spark__branch1 = spark__branch3)) and
                           (found1 = found)) else (exists spark__branch4:bool.
                                                  ((spark__branch4 = (if (c = 51) then true else false)) and
                                                  (if (spark__branch4 = true) then (((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral2;
                                                  rec__tictactoe__position__y =
                                                  rliteral }) and
                                                  (spark__branch1 = spark__branch4)) and
                                                  (found1 = found)) else 
                                                  (exists spark__branch5:bool.
                                                  ((spark__branch5 = (if (c = 52) then true else false)) and
                                                  (if (spark__branch5 = true) then (((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral;
                                                  rec__tictactoe__position__y =
                                                  rliteral1 }) and
                                                  (spark__branch1 = spark__branch5)) and
                                                  (found1 = found)) else 
                                                  (exists spark__branch6:bool.
                                                  ((spark__branch6 = (if (c = 53) then true else false)) and
                                                  (if (spark__branch6 = true) then (((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral1;
                                                  rec__tictactoe__position__y =
                                                  rliteral1 }) and
                                                  (spark__branch1 = spark__branch6)) and
                                                  (found1 = found)) else 
                                                  (exists spark__branch7:bool.
                                                  ((spark__branch7 = (if (c = 54) then true else false)) and
                                                  (if (spark__branch7 = true) then (((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral2;
                                                  rec__tictactoe__position__y =
                                                  rliteral1 }) and
                                                  (spark__branch1 = spark__branch7)) and
                                                  (found1 = found)) else 
                                                  (exists spark__branch8:bool.
                                                  ((spark__branch8 = (if (c = 55) then true else false)) and
                                                  (if (spark__branch8 = true) then (((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral;
                                                  rec__tictactoe__position__y =
                                                  rliteral2 }) and
                                                  (spark__branch1 = spark__branch8)) and
                                                  (found1 = found)) else 
                                                  (exists spark__branch9:bool.
                                                  ((spark__branch9 = (if (c = 56) then true else false)) and
                                                  (if (spark__branch9 = true) then (((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral1;
                                                  rec__tictactoe__position__y =
                                                  rliteral2 }) and
                                                  (spark__branch1 = spark__branch9)) and
                                                  (found1 = found)) else ((spark__branch1 = (if (c = 57) then true else false)) and
                                                  (if (spark__branch1 = true) then ((p__split_fields = {
                                                  rec__tictactoe__position__x =
                                                  rliteral2;
                                                  rec__tictactoe__position__y =
                                                  rliteral2 }) and
                                                  (found1 = found)) else ((found1 = of_int(0)) and
                                                  (p__split_fields = p__split_fields1)))))))))))))))))))))))))))) and
   (exists o3:bool.
   ((if (found1 = true) then (exists o4:int.
                             ((to_rep3((p__split_fields).rec__tictactoe__position__x) = o4) and
                             (exists o5:int.
                             ((to_rep3((p__split_fields).rec__tictactoe__position__y) = o5) and
                             (exists o6:int.
                             ((to_rep2(((my_board[o4])[o5])) = o6) and
                             (o3 = (if (o6 = 0) then true else false)))))))) else (o3 = false)) and
   (exists spark__branch2:bool. ((spark__branch2 = o3) and
   (spark__branch2 = true)))))))))))))))))))))))))))))))) ->
  (to_rep2(((my_board[to_rep3((p__split_fields).rec__tictactoe__position__x)])[to_rep3((p__split_fields).rec__tictactoe__position__y)])) = 0)))))))))
