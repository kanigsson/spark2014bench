(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type et1

logic et1qtint : et1 -> int

axiom et1qtaxiom : (forall i:et1. (0 <= et1qtint(i)))

axiom et1qtaxiom1 : (forall i:et1. (et1qtint(i) <= 99))

predicate in_range1(x: int) = ((0 <= x) and (x <= 99))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : et1, et1 -> bool

logic dummy : et1

type et1__ref = { et1__content : et1
}

function et1__ref_et1__content__projection(a: et1__ref) : et1 =
  (a).et1__content

function to_rep(x: et1) : int = et1qtint(x)

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,et1) farray, a__first: int, a__last: int,
  b: (int,et1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type it1

logic it1qtint : it1 -> int

axiom it1qtaxiom : (forall i1:it1. (1 <= it1qtint(i1)))

axiom it1qtaxiom1 : (forall i1:it1. (it1qtint(i1) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : it1, it1 -> bool

logic dummy1 : it1

type it1__ref = { it1__content : it1
}

function it1__ref_it1__content__projection(a: it1__ref) : it1 =
  (a).it1__content

predicate dynamic_invariant(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (1 <= 10)) -> in_range2(temp___expr_166))

predicate dynamic_invariant1(temp___expr_173: int, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = (((temp___is_init_169 = true) or
  (0 <= 99)) -> in_range1(temp___expr_173))

type tnatbyteB

logic tnatbyteBqtint : tnatbyteB -> int

axiom tnatbyteBqtaxiom :
  (forall i1:tnatbyteB. ((- 32768) <= tnatbyteBqtint(i1)))

axiom tnatbyteBqtaxiom1 :
  (forall i1:tnatbyteB. (tnatbyteBqtint(i1) <= 32767))

predicate in_range3(x: int) = (((- 32768) <= x) and (x <= 32767))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tnatbyteB, tnatbyteB -> bool

logic dummy2 : tnatbyteB

type tnatbyteB__ref = { tnatbyteB__content : tnatbyteB
}

function tnatbyteB__ref_tnatbyteB__content__projection(a: tnatbyteB__ref) : tnatbyteB =
  (a).tnatbyteB__content

function to_rep1(x: tnatbyteB) : int = tnatbyteBqtint(x)

logic of_rep1 : int -> tnatbyteB

axiom inversion_axiom1 :
  (forall x:tnatbyteB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:tnatbyteB [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> tnatbyteB

logic last : t -> tnatbyteB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,et1) farray; rt : t
}

function to_array(a: us_t) : (int,et1) farray = (a).elts

function of_array(a: (int,et1) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type tarr1tB__ref = { tarr1tB__content : us_t
}

function tarr1tB__ref_tarr1tB__content__projection(a: tarr1tB__ref) : us_t =
  (a).tarr1tB__content

type t8b__ref = { t8b__content : us_t
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : us_t =
  (a).t8b__content

logic temp_____aggregate_def_248 : int, int, int -> us_t

axiom def_axiom :
  (forall temp___250:int. forall temp___251:int. forall temp___252:int.
  (dynamic_invariant1(temp___250, true, true, true, true) ->
  (dynamic_property(1, 10, temp___251, temp___252) ->
  (first1(temp_____aggregate_def_248(temp___250, temp___251,
  temp___252)) = temp___251))))

axiom def_axiom1 :
  (forall temp___250:int. forall temp___251:int. forall temp___252:int.
  (dynamic_invariant1(temp___250, true, true, true, true) ->
  (dynamic_property(1, 10, temp___251, temp___252) ->
  (last1(temp_____aggregate_def_248(temp___250, temp___251,
  temp___252)) = temp___252))))

axiom def_axiom2 :
  (forall temp___250:int. forall temp___251:int. forall temp___252:int.
  (dynamic_invariant1(temp___250, true, true, true, true) ->
  (forall temp___253:int.
  (to_rep((to_array(temp_____aggregate_def_248(temp___250, temp___251,
  temp___252))[temp___253])) = temp___250))))

 (* File "ar.adb", line 64, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  (dynamic_invariant1(e, true, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = andb((if (i <  10) then true else false),
  (if (0 <  e) then true else false))) -> ((spark__branch = true) -> (let o =
  (e - 1) : int in (in_range1(o) -> (let temp___254 =
  temp_____aggregate_def_248(o, (i + 1), (i + 1)) : us_t in
  ((first1(temp___254) = (i + 1)) -> ((last1(temp___254) = (i + 1)) ->
  (first1(temp___254) = 1)))))))))))
