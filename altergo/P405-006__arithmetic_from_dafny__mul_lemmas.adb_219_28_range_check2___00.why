(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type small_integer

logic small_integerqtint : small_integer -> int

axiom small_integerqtaxiom :
  (forall i:small_integer. ((- 1000) <= small_integerqtint(i)))

axiom small_integerqtaxiom1 :
  (forall i:small_integer. (small_integerqtint(i) <= 1000))

predicate in_range1(x: int) = (((- 1000) <= x) and (x <= 1000))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : small_integer, small_integer -> bool

logic dummy1 : small_integer

type small_integer__ref = { small_integer__content : small_integer
}

function small_integer__ref_small_integer__content__projection(a: small_integer__ref) : small_integer =
  (a).small_integer__content

type small_natural

logic small_naturalqtint : small_natural -> int

axiom small_naturalqtaxiom :
  (forall i:small_natural. (0 <= small_naturalqtint(i)))

axiom small_naturalqtaxiom1 :
  (forall i:small_natural. (small_naturalqtint(i) <= 1000))

predicate in_range2(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : small_natural, small_natural -> bool

logic dummy2 : small_natural

type small_natural__ref = { small_natural__content : small_natural
}

function small_natural__ref_small_natural__content__projection(a: small_natural__ref) : small_natural =
  (a).small_natural__content

type small_positive

logic small_positiveqtint : small_positive -> int

axiom small_positiveqtaxiom :
  (forall i:small_positive. (1 <= small_positiveqtint(i)))

axiom small_positiveqtaxiom1 :
  (forall i:small_positive. (small_positiveqtint(i) <= 1000))

predicate in_range3(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : small_positive, small_positive -> bool

logic dummy3 : small_positive

type small_positive__ref = { small_positive__content : small_positive
}

function small_positive__ref_small_positive__content__projection(a: small_positive__ref) : small_positive =
  (a).small_positive__content

predicate dynamic_invariant1(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  ((- 1000) <= 1000)) -> in_range1(temp___expr_180))

predicate dynamic_invariant2(temp___expr_187: int, temp___is_init_183: bool,
  temp___skip_constant_184: bool, temp___do_toplevel_185: bool,
  temp___do_typ_inv_186: bool) = (((temp___is_init_183 = true) or
  (0 <= 1000)) -> in_range2(temp___expr_187))

predicate dynamic_invariant3(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (1 <= 1000)) -> in_range3(temp___expr_194))

 (* File "mul_lemmas.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall x:int. forall y:int. forall z:int. forall r:int. forall s:int.
  (dynamic_invariant(x, false, false, true, true) -> (dynamic_invariant(y,
  false, false, true, true) -> (dynamic_invariant(z, false, false, true,
  true) -> (dynamic_invariant(r, false, false, true, true) ->
  (dynamic_invariant(s, false, false, true, true) ->
  (forall x1:int. ((x1 = 4) ->
  (forall y1:int. ((y1 = 827) -> (in_range3(y1) -> (in_range3(x1) ->
  (forall r1:int. (((0 <  r1) and dynamic_invariant(r1, true, true, true,
  true)) ->
  (forall x2:int. ((x2 = 4) ->
  (forall y2:int. ((y2 = 827) -> (in_range1(y2) -> (in_range1(x2) ->
  (forall r2:int. ((((not (r2 = 0)) -> ((not (x2 = 0)) and
  (not (y2 = 0)))) and dynamic_invariant(r2, true, true, true, true)) ->
  (forall x3:int. ((x3 = 4) ->
  (forall y3:int. ((y3 = 827) ->
  (forall z1:int. ((z1 = 827) -> (in_range1(z1) -> (in_range1(y3) ->
  (in_range1(x3) ->
  (forall r3:int. forall s1:int. (((r3 = s1) and (dynamic_invariant(r3, true,
  true, true, true) and dynamic_invariant(s1, true, true, true, true))) ->
  (forall x4:int. ((x4 = 4) ->
  (forall y4:int. ((y4 = 827) ->
  (forall z2:int. ((z2 = 827) -> (in_range1(z2) -> (in_range1(y4) ->
  (in_range1(x4) ->
  (forall r4:int. forall s2:int. (((r4 = s2) and (dynamic_invariant(r4, true,
  true, true, true) and dynamic_invariant(s2, true, true, true, true))) ->
  (forall x5:int. ((x5 = 4) ->
  (forall y5:int. ((y5 = 827) -> (in_range3(y5) -> (in_range3(x5) ->
  (forall r5:int. ((((x5 <= r5) and (y5 <= r5)) and dynamic_invariant(r5,
  true, true, true, true)) ->
  (forall x6:int. ((x6 = 4) ->
  (forall y6:int. ((y6 = 827) ->
  (forall z3:int. ((z3 = 827) -> (in_range3(z3) -> (in_range1(y6) ->
  (in_range1(x6) ->
  (forall r6:int. forall s3:int. (((r6 <  s3) and (dynamic_invariant(r6,
  true, true, true, true) and dynamic_invariant(s3, true, true, true,
  true))) ->
  (forall x7:int. ((x7 = 4) ->
  (forall y7:int. ((y7 = 827) ->
  (forall z4:int. ((z4 = 827) -> (in_range3(z4) -> (in_range1(y7) ->
  (in_range1(x7) ->
  (forall r7:int. forall s4:int. (((r7 <= s4) and (dynamic_invariant(r7,
  true, true, true, true) and dynamic_invariant(s4, true, true, true,
  true))) ->
  (forall x8:int. ((x8 = 4) ->
  (forall y8:int. ((y8 = 827) -> (let o = (y8 + 123) : int in (in_range(o) ->
  (in_range2(o) -> (in_range2(y8) -> (let o1 = (x8 + 34) : int in
  (in_range(o1) -> (in_range2(o1) -> (in_range2(x8) ->
  (forall r8:int. forall s5:int. (((r8 <= s5) and (dynamic_invariant(r8,
  true, true, true, true) and dynamic_invariant(s5, true, true, true,
  true))) ->
  (forall x9:int. ((x9 = 4) ->
  (forall y9:int. ((y9 = 827) -> (let o2 = (y9 + 123) : int in
  (in_range(o2) -> (in_range2(o2) -> (in_range2(y9) -> (let o3 = (x9 + 34)
  : int in (in_range(o3) -> (in_range2(o3) -> (in_range2(x9) ->
  (forall r9:int. forall s6:int. (((r9 <  s6) and (dynamic_invariant(r9,
  true, true, true, true) and dynamic_invariant(s6, true, true, true,
  true))) ->
  (forall x10:int. ((x10 = 4) ->
  (forall y10:int. ((y10 = 827) ->
  (forall z5:int. ((z5 = 827) -> (in_range1(z5) -> in_range1(y10))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
