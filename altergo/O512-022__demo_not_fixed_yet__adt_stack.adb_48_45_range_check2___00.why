(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,integer) farray, (int,integer) farray -> bool

type stack_range

logic stack_rangeqtint : stack_range -> int

axiom stack_rangeqtaxiom : (forall i:stack_range. (0 <= stack_rangeqtint(i)))

axiom stack_rangeqtaxiom1 :
  (forall i:stack_range. (stack_rangeqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : stack_range, stack_range -> bool

logic dummy2 : stack_range

type stack_range__ref = { stack_range__content : stack_range
}

function stack_range__ref_stack_range__content__projection(a: stack_range__ref) : stack_range =
  (a).stack_range__content

function to_rep1(x: stack_range) : int = stack_rangeqtint(x)

logic of_rep1 : int -> stack_range

axiom inversion_axiom1 :
  (forall x:stack_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:stack_range [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__adt_stack__stack__stack_vector :
(int,integer) farray; rec__adt_stack__stack__stack_top : stack_range;
rec__ext__ : us_private
}

function us_split_fields_rec__adt_stack__stack__stack_vector__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__adt_stack__stack__stack_vector

function us_split_fields_rec__adt_stack__stack__stack_top__projection(a: us_split_fields) : stack_range =
  (a).rec__adt_stack__stack__stack_top

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq1(((a).us_split_fields1).rec__adt_stack__stack__stack_vector,
  1, 100, ((b).us_split_fields1).rec__adt_stack__stack__stack_vector, 1,
  100) = true) and
  (to_rep1(((a).us_split_fields1).rec__adt_stack__stack__stack_top) = to_rep1(((b).us_split_fields1).rec__adt_stack__stack__stack_top))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic adt_stack__stack__stack_vector__first__bit : int

logic adt_stack__stack__stack_vector__last__bit : int

logic adt_stack__stack__stack_vector__position : int

axiom adt_stack__stack__stack_vector__first__bit_axiom :
  (0 <= adt_stack__stack__stack_vector__first__bit)

axiom adt_stack__stack__stack_vector__last__bit_axiom :
  (adt_stack__stack__stack_vector__first__bit <  adt_stack__stack__stack_vector__last__bit)

axiom adt_stack__stack__stack_vector__position_axiom :
  (0 <= adt_stack__stack__stack_vector__position)

logic adt_stack__stack__stack_top__first__bit : int

logic adt_stack__stack__stack_top__last__bit : int

logic adt_stack__stack__stack_top__position : int

axiom adt_stack__stack__stack_top__first__bit_axiom :
  (0 <= adt_stack__stack__stack_top__first__bit)

axiom adt_stack__stack__stack_top__last__bit_axiom :
  (adt_stack__stack__stack_top__first__bit <  adt_stack__stack__stack_top__last__bit)

axiom adt_stack__stack__stack_top__position_axiom :
  (0 <= adt_stack__stack__stack_top__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type stack__ref = { stack__content : us_rep
}

function stack__ref_stack__content__projection(a: stack__ref) : us_rep =
  (a).stack__content

predicate default_initial_assumption(temp___expr_181: us_rep,
  temp___skip_top_level_182: bool) = ((temp___expr_181).attr__tag = us_tag)

logic s : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic t : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

type tvectorD1

logic tvectorD1qtint : tvectorD1 -> int

axiom tvectorD1qtaxiom : (forall i:tvectorD1. (1 <= tvectorD1qtint(i)))

axiom tvectorD1qtaxiom1 : (forall i:tvectorD1. (tvectorD1qtint(i) <= 100))

predicate in_range2(x: int) = ((1 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : tvectorD1, tvectorD1 -> bool

logic dummy4 : tvectorD1

type tvectorD1__ref = { tvectorD1__content : tvectorD1
}

function tvectorD1__ref_tvectorD1__content__projection(a: tvectorD1__ref) : tvectorD1 =
  (a).tvectorD1__content

type tstack_rangeB

logic tstack_rangeBqtint : tstack_rangeB -> int

axiom tstack_rangeBqtaxiom :
  (forall i:tstack_rangeB. ((- 2147483648) <= tstack_rangeBqtint(i)))

axiom tstack_rangeBqtaxiom1 :
  (forall i:tstack_rangeB. (tstack_rangeBqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tstack_rangeB, tstack_rangeB -> bool

logic dummy5 : tstack_rangeB

type tstack_rangeB__ref = { tstack_rangeB__content : tstack_rangeB
}

function tstack_rangeB__ref_tstack_rangeB__content__projection(a: tstack_rangeB__ref) : tstack_rangeB =
  (a).tstack_rangeB__content

function to_rep2(x: tstack_rangeB) : int = tstack_rangeBqtint(x)

logic of_rep2 : int -> tstack_rangeB

axiom inversion_axiom2 :
  (forall x:tstack_rangeB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tstack_rangeB [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t1

logic first : t1 -> tstack_rangeB

logic last : t1 -> tstack_rangeB

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t1
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq1((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : us_t

type tvectorB__ref = { tvectorB__content : us_t
}

function tvectorB__ref_tvectorB__content__projection(a: tvectorB__ref) : us_t =
  (a).tvectorB__content

type t7b__ref = { t7b__content : us_t
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : us_t =
  (a).t7b__content

type t9b__ref = { t9b__content : us_t
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : us_t =
  (a).t9b__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant1(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (0 <= 100)) -> in_range1(temp___expr_172))

 (* File "adt_stack.ads", line 23, characters 0-0 *)
goal defqtvc :
  (forall temp___237:int.
  ((to_rep1(((t).us_split_fields1).rec__adt_stack__stack__stack_top) = temp___237) ->
  ((1 <= temp___237) -> (1 <= 1))))
