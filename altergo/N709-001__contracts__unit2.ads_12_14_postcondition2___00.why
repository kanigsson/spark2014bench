(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__unit1__t1__c1 : integer; rec__ext__ :
us_private
}

function us_split_fields_rec__unit1__t1__c1__projection(a: us_split_fields) : integer =
  (a).rec__unit1__t1__c1

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__unit1__t1__c1) = to_rep(((b).us_split_fields1).rec__unit1__t1__c1)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic unit1__t1__c1__first__bit : int

logic unit1__t1__c1__last__bit : int

logic unit1__t1__c1__position : int

axiom unit1__t1__c1__first__bit_axiom : (0 <= unit1__t1__c1__first__bit)

axiom unit1__t1__c1__last__bit_axiom :
  (unit1__t1__c1__first__bit <  unit1__t1__c1__last__bit)

axiom unit1__t1__c1__position_axiom : (0 <= unit1__t1__c1__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t1__ref = { t1__content : us_rep
}

function t1__ref_t1__content__projection(a: t1__ref) : us_rep =
  (a).t1__content

type us_split_fields2 = { rec__unit2__t2__c2 : integer; rec__unit1__t1__c11 :
integer; rec__ext__1 : us_private
}

function us_split_fields_rec__unit2__t2__c2__projection(a: us_split_fields2) : integer =
  (a).rec__unit2__t2__c2

function us_split_fields_rec__unit1__t1__c1__2__projection(a: us_split_fields2) : integer =
  (a).rec__unit1__t1__c11

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : integer, us_private -> us_private

logic extract__unit2__t2__c2 : us_private -> integer

axiom extract__unit2__t2__c2__conv :
  (forall unit2__t2__c2:integer.
  (forall rec__ext__2:us_private.
  (extract__unit2__t2__c2(hide_ext__(unit2__t2__c2,
  rec__ext__2)) = unit2__t2__c2)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__unit1__t1__c1 = ((a).us_split_fields3).rec__unit1__t1__c11;
  rec__ext__ = hide_ext__(((a).us_split_fields3).rec__unit2__t2__c2,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__unit2__t2__c2 =
  extract__unit2__t2__c2(((r).us_split_fields1).rec__ext__);
  rec__unit1__t1__c11 = ((r).us_split_fields1).rec__unit1__t1__c1;
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_fields3).rec__unit2__t2__c2) = to_rep(((b).us_split_fields3).rec__unit2__t2__c2)) and
  (to_rep(((a).us_split_fields3).rec__unit1__t1__c11) = to_rep(((b).us_split_fields3).rec__unit1__t1__c11))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic unit2__t2__c2__first__bit : int

logic unit2__t2__c2__last__bit : int

logic unit2__t2__c2__position : int

axiom unit2__t2__c2__first__bit_axiom : (0 <= unit2__t2__c2__first__bit)

axiom unit2__t2__c2__last__bit_axiom :
  (unit2__t2__c2__first__bit <  unit2__t2__c2__last__bit)

axiom unit2__t2__c2__position_axiom : (0 <= unit2__t2__c2__position)

logic unit1__t1__c1__first__bit1 : int

logic unit1__t1__c1__last__bit1 : int

logic unit1__t1__c1__position1 : int

axiom unit1__t1__c1__first__bit_axiom1 : (0 <= unit1__t1__c1__first__bit1)

axiom unit1__t1__c1__last__bit_axiom1 :
  (unit1__t1__c1__first__bit1 <  unit1__t1__c1__last__bit1)

axiom unit1__t1__c1__position_axiom1 : (0 <= unit1__t1__c1__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type t2__ref = { t2__content : us_rep1
}

function t2__ref_t2__content__projection(a: t2__ref) : us_rep1 =
  (a).t2__content

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_173: us_rep1,
  temp___skip_top_level_174: bool) = ((temp___expr_173).attr__tag1 = us_tag1)

logic is_zero : us_rep -> bool

logic is_zero__function_guard : bool, us_rep -> prop

logic is_zero1 : int, us_rep -> bool

logic is_zero__function_guard1 : bool, int, us_rep -> prop

predicate default_initial_assumption1(temp___expr_165: us_rep,
  temp___skip_top_level_166: bool) = ((temp___expr_165).attr__tag = us_tag)

logic create__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom unit2__t2__compat_axiom :
  (forall unit1__create__x__fields:us_split_fields.
  forall unit1__create__x__old__fields:us_split_fields.
  (forall x__attr__tag1:int [create__specific_post(us_tag1,
  unit1__create__x__fields, x__attr__tag1, unit1__create__x__old__fields)].
  (create__specific_post(us_tag1, unit1__create__x__fields, x__attr__tag1,
  unit1__create__x__old__fields) -> (to_rep(((of_base({ us_split_fields1 =
  unit1__create__x__fields; attr__tag = x__attr__tag1
  })).us_split_fields3).rec__unit1__t1__c11) = 0))))

axiom unit2__t2__compat_axiom1 :
  (forall unit1__create__x__fields:us_split_fields.
  forall unit1__create__x__old__fields:us_split_fields.
  (forall x__attr__tag1:int [create__specific_post(us_tag1,
  unit1__create__x__fields, x__attr__tag1, unit1__create__x__old__fields)].
  (create__specific_post(us_tag1, unit1__create__x__fields, x__attr__tag1,
  unit1__create__x__old__fields) -> (to_rep(((of_base({ us_split_fields1 =
  unit1__create__x__fields; attr__tag = x__attr__tag1
  })).us_split_fields3).rec__unit2__t2__c2) = 0))))

axiom unit1__t1__compat_axiom :
  (forall unit1__create__x__fields:us_split_fields.
  forall unit1__create__x__old__fields:us_split_fields.
  (forall x__attr__tag1:int [create__specific_post(us_tag,
  unit1__create__x__fields, x__attr__tag1, unit1__create__x__old__fields)].
  (create__specific_post(us_tag, unit1__create__x__fields, x__attr__tag1,
  unit1__create__x__old__fields) -> (to_rep((({ us_split_fields1 =
  unit1__create__x__fields; attr__tag = x__attr__tag1
  }).us_split_fields1).rec__unit1__t1__c1) = 0))))

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq3(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

logic is_zero2 : us_rep1 -> bool

logic is_zero__function_guard2 : bool, us_rep1 -> prop

logic is_zero3 : int, us_rep1 -> bool

logic is_zero__function_guard3 : bool, int, us_rep1 -> prop

axiom unit2__t2__compat_axiom2 :
  (forall x:us_rep1 [is_zero3(us_tag1, x)].
  (is_zero__function_guard3(is_zero3(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep1. is_zero__function_guard2(is_zero2(x1), x1))))

axiom unit2__t2__compat_axiom3 :
  (forall x:us_rep1 [is_zero3(us_tag1, x)].
  (is_zero__function_guard3(is_zero3(us_tag1, x), us_tag1, x) ->
  (to_int(is_zero2(x)) = to_int(is_zero3(us_tag1, x)))))

axiom is_zero__def_axiom :
  (forall x:us_rep1. is_zero__function_guard(is_zero(to_base(x)),
  to_base(x)))

axiom is_zero__def_axiom1 :
  (forall x:us_rep1 [is_zero2(x)]. ((is_zero2(x) = true) ->
  (is_zero(to_base(x)) = true)))

axiom is_zero__def_axiom2 :
  (forall x:us_rep1 [is_zero2(x)]. ((is_zero2(x) = true) ->
  (to_rep(((x).us_split_fields3).rec__unit2__t2__c2) = 0)))

axiom is_zero__def_axiom3 :
  (forall x:us_rep1 [is_zero2(x)]. (((is_zero(to_base(x)) = true) and
  (to_rep(((x).us_split_fields3).rec__unit2__t2__c2) = 0)) ->
  (is_zero2(x) = true)))

axiom unit2__t2__compat_axiom4 :
  (forall x:us_rep [is_zero1(us_tag1, x)].
  (is_zero__function_guard1(is_zero1(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep. is_zero__function_guard2(is_zero2(of_base(x1)),
  of_base(x1)))))

axiom unit2__t2__compat_axiom5 :
  (forall x:us_rep [is_zero1(us_tag1, x)].
  (is_zero__function_guard1(is_zero1(us_tag1, x), us_tag1, x) ->
  (to_int(is_zero2(of_base(x))) = to_int(is_zero1(us_tag1, x)))))

axiom unit1__t1__compat_axiom1 :
  (forall x:us_rep [is_zero1(us_tag, x)].
  (is_zero__function_guard1(is_zero1(us_tag, x), us_tag, x) ->
  (forall x1:us_rep. is_zero__function_guard(is_zero(x1), x1))))

axiom unit1__t1__compat_axiom2 :
  (forall x:us_rep [is_zero1(us_tag, x)].
  (is_zero__function_guard1(is_zero1(us_tag, x), us_tag, x) ->
  (to_int(is_zero(x)) = to_int(is_zero1(us_tag, x)))))

axiom is_zero__def_axiom4 :
  (forall x:us_rep [is_zero(x)]. ((is_zero(x) = true) ->
  (to_rep(((x).us_split_fields1).rec__unit1__t1__c1) = 0)))

axiom is_zero__def_axiom5 :
  (forall x:us_rep [is_zero(x)].
  ((to_rep(((x).us_split_fields1).rec__unit1__t1__c1) = 0) ->
  (is_zero(x) = true)))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

 (* File "unit2.ads", line 11, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_split_fields2.
  (forall unit1__create__x__fields:us_split_fields.
  ((to_rep((unit1__create__x__fields).rec__unit1__t1__c1) = 0) ->
  (forall x__split_fields1:us_split_fields2. ((x__split_fields1 = (of_base({
  us_split_fields1 = unit1__create__x__fields; attr__tag = (to_base({
  us_split_fields3 = x__split_fields; attr__tag1 = x__attr__tag })).attr__tag
  })).us_split_fields3) ->
  (forall x__split_fields2:us_split_fields2. ((x__split_fields2 = {
  rec__unit2__t2__c2 = rliteral; rec__unit1__t1__c11 =
  (x__split_fields1).rec__unit1__t1__c11; rec__ext__1 =
  (x__split_fields1).rec__ext__1 }) ->
  (to_rep((x__split_fields2).rec__unit1__t1__c11) = 0))))))))
