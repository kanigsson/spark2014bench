(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range4(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range4(x) ->
  (to_rep(of_rep(x)) = x)))

type read_status

predicate in_range5(x: int) = ((0 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : read_status, read_status -> bool

logic dummy4 : read_status

type read_status__ref = { read_status__content : read_status
}

function read_status__ref_read_status__content__projection(a: read_status__ref) : read_status =
  (a).read_status__content

logic to_rep1 : read_status -> int

logic of_rep1 : int -> read_status

axiom inversion_axiom1 :
  (forall x:read_status [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:read_status [to_rep1(x)]. in_range5(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range5(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__file_io__read_result__status : read_status
}

function us_split_discrs_rec__file_io__read_result__status__projection(a: us_split_discrs) : read_status =
  (a).rec__file_io__read_result__status

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__file_io__read_result__c : character
}

function us_split_fields_rec__file_io__read_result__c__projection(a: us_split_fields) : character =
  (a).rec__file_io__read_result__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__2__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate file_io__read_result__c__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = 0)

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__file_io__read_result__status) = to_rep1(((b).us_split_discrs1).rec__file_io__read_result__status)) and
  (file_io__read_result__c__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__file_io__read_result__c) = to_rep(((b).us_split_fields1).rec__file_io__read_result__c)))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic file_io__read_result__status__first__bit : int

logic file_io__read_result__status__last__bit : int

logic file_io__read_result__status__position : int

axiom file_io__read_result__status__first__bit_axiom :
  (0 <= file_io__read_result__status__first__bit)

axiom file_io__read_result__status__last__bit_axiom :
  (file_io__read_result__status__first__bit <  file_io__read_result__status__last__bit)

axiom file_io__read_result__status__position_axiom :
  (0 <= file_io__read_result__status__position)

logic file_io__read_result__c__first__bit : int

logic file_io__read_result__c__last__bit : int

logic file_io__read_result__c__position : int

axiom file_io__read_result__c__first__bit_axiom :
  (0 <= file_io__read_result__c__first__bit)

axiom file_io__read_result__c__last__bit_axiom :
  (file_io__read_result__c__first__bit <  file_io__read_result__c__last__bit)

axiom file_io__read_result__c__position_axiom :
  (0 <= file_io__read_result__c__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type read_result__ref = { read_result__content : us_rep
}

function read_result__ref_read_result__content__projection(a: read_result__ref) : us_rep =
  (a).read_result__content

logic current_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate default_initial_assumption(temp___expr_215: us_rep,
  temp___skip_top_level_216: bool) =
  (to_rep1(((temp___expr_215).us_split_discrs1).rec__file_io__read_result__status) = 2)

logic next_read__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic local_invariant : us_split_fields, us_split_discrs, us_split_fields,
  us_split_discrs -> bool

logic local_invariant__function_guard : bool, us_split_fields,
  us_split_discrs, us_split_fields, us_split_discrs -> prop

axiom local_invariant__def_axiom :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true) ->
  (not (current_read__attr__constrained = true)))))

axiom local_invariant__def_axiom1 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs)].
  ((local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true) ->
  (not (next_read__attr__constrained = true)))))

axiom local_invariant__def_axiom2 :
  (forall lexer__current_read__fields:us_split_fields.
  forall lexer__next_read__fields:us_split_fields.
  (forall lexer__current_read__discrs:us_split_discrs.
  forall lexer__next_read__discrs:us_split_discrs
  [local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs)].
  (((not (current_read__attr__constrained = true)) and
  (not (next_read__attr__constrained = true))) ->
  (local_invariant(lexer__current_read__fields, lexer__current_read__discrs,
  lexer__next_read__fields, lexer__next_read__discrs) = true))))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_rep1

logic bool_eq7 : us_rep1, us_rep1 -> bool

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type file__ref = { file__content : us_rep1
}

function file__ref_file__content__projection(a: file__ref) : us_rep1 =
  (a).file__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq7 : capacity_range, capacity_range -> bool

logic dummy7 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_discrs2 = {
rec__unbounded_strings__char_vectors__vector__capacity : capacity_range
}

function us_split_discrs_rec__unbounded_strings__char_vectors__vector__capacity__projection(a: us_split_discrs2) : capacity_range =
  (a).rec__unbounded_strings__char_vectors__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__unbounded_strings__char_vectors__vector :
us_main_type1
}

function us_split_fields_rec__unbounded_strings__char_vectors__vector__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__unbounded_strings__char_vectors__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic unbounded_strings__char_vectors__vector__capacity__first__bit : int

logic unbounded_strings__char_vectors__vector__capacity__last__bit : int

logic unbounded_strings__char_vectors__vector__capacity__position : int

axiom unbounded_strings__char_vectors__vector__capacity__first__bit_axiom :
  (0 <= unbounded_strings__char_vectors__vector__capacity__first__bit)

axiom unbounded_strings__char_vectors__vector__capacity__last__bit_axiom :
  (unbounded_strings__char_vectors__vector__capacity__first__bit <  unbounded_strings__char_vectors__vector__capacity__last__bit)

axiom unbounded_strings__char_vectors__vector__capacity__position_axiom :
  (0 <= unbounded_strings__char_vectors__vector__capacity__position)

logic user_eq8 : us_rep2, us_rep2 -> bool

logic dummy8 : us_rep2

type vector__ref = { vector__content : us_rep2
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep2 =
  (a).vector__content

function to_rep2(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep2 : int -> capacity_range

axiom inversion_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. in_range6(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range6(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate in_range7(rec__unbounded_strings__char_vectors__vector__capacity1: int,
  a: us_rep2) =
  (rec__unbounded_strings__char_vectors__vector__capacity1 = to_rep2(((a).us_split_discrs3).rec__unbounded_strings__char_vectors__vector__capacity))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic unbounded_strings__char_vectors__vector__capacity__first__bit1 : int

logic unbounded_strings__char_vectors__vector__capacity__last__bit1 : int

logic unbounded_strings__char_vectors__vector__capacity__position1 : int

axiom unbounded_strings__char_vectors__vector__capacity__first__bit_axiom1 :
  (0 <= unbounded_strings__char_vectors__vector__capacity__first__bit1)

axiom unbounded_strings__char_vectors__vector__capacity__last__bit_axiom1 :
  (unbounded_strings__char_vectors__vector__capacity__first__bit1 <  unbounded_strings__char_vectors__vector__capacity__last__bit1)

axiom unbounded_strings__char_vectors__vector__capacity__position_axiom1 :
  (0 <= unbounded_strings__char_vectors__vector__capacity__position1)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type unbounded_string__ref = { unbounded_string__content : us_rep2
}

function unbounded_string__ref_unbounded_string__content__projection(a: unbounded_string__ref) : us_rep2 =
  (a).unbounded_string__content

logic s__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS6 : int

logic length : us_rep2 -> int

logic length__function_guard : int, us_rep2 -> prop

predicate dynamic_invariant2(temp___expr_300: us_rep2,
  temp___is_init_296: bool, temp___skip_constant_297: bool,
  temp___do_toplevel_298: bool, temp___do_typ_inv_299: bool) =
  ((not (temp___skip_constant_297 = true)) -> in_range7(32, temp___expr_300))

axiom temp___result_306qtdef :
  (forall temp___305:us_rep2. length__function_guard(length(temp___305),
  temp___305))

predicate default_initial_assumption1(temp___expr_302: us_rep2,
  temp___skip_top_level_303: bool) =
  ((to_rep2(((temp___expr_302).us_split_discrs3).rec__unbounded_strings__char_vectors__vector__capacity) = 32) and
  ((not (temp___skip_top_level_303 = true)) ->
  (length(temp___expr_302) = 0)))

axiom length__post_axiom :
  (forall s:us_rep2 [length(s)]. (dynamic_invariant2(s, true, true, true,
  true) -> (let result = length(s) : int in (length__function_guard(result,
  s) -> dynamic_invariant(result, true, false, true, true)))))

predicate dynamic_invariant3(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range4(temp___expr_74))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant5(temp___expr_206: int, temp___is_init_202: bool,
  temp___skip_constant_203: bool, temp___do_toplevel_204: bool,
  temp___do_typ_inv_205: bool) = (((temp___is_init_202 = true) or
  (0 <= 2)) -> in_range5(temp___expr_206))

predicate dynamic_invariant6(temp___expr_287: int, temp___is_init_283: bool,
  temp___skip_constant_284: bool, temp___do_toplevel_285: bool,
  temp___do_typ_inv_286: bool) = (((temp___is_init_283 = true) or
  (0 <= 2147483647)) -> in_range6(temp___expr_287))

 (* File "lexer.adb", line 153, characters 0-0 *)
goal defqtvc :
  (forall current_read__split_fields:character.
  forall current_read__split_discrs:read_status.
  forall next_read__split_fields:character.
  forall next_read__split_discrs:read_status. forall current_line:int.
  forall current_col:int. forall current_pos:int.
  forall s__split_fields:us_main_type1.
  (forall current_pos1:int. ((current_pos1 = current_pos) ->
  ((current_read__attr__constrained = false) ->
  (dynamic_invariant1(current_line, true, false, true, true) ->
  (dynamic_invariant(current_col, true, false, true, true) ->
  (dynamic_invariant(current_pos, true, false, true, true) ->
  ((next_read__attr__constrained = false) -> (dynamic_invariant2({
  us_split_discrs3 = s__split_discrs; us_split_fields3 = {
  rec__unbounded_strings__char_vectors__vector = s__split_fields } }, true,
  false, true, true) ->
  ((forall current_read__split_fields1:character.
   forall current_read__split_discrs1:read_status.
   forall next_read__split_fields1:character.
   forall next_read__split_discrs1:read_status.
   local_invariant__function_guard(local_invariant({
   rec__file_io__read_result__c = current_read__split_fields1 }, {
   rec__file_io__read_result__status = current_read__split_discrs1 }, {
   rec__file_io__read_result__c = next_read__split_fields1 }, {
   rec__file_io__read_result__status = next_read__split_discrs1 }), {
   rec__file_io__read_result__c = current_read__split_fields1 }, {
   rec__file_io__read_result__status = current_read__split_discrs1 }, {
   rec__file_io__read_result__c = next_read__split_fields1 }, {
   rec__file_io__read_result__status = next_read__split_discrs1 })) ->
  (((local_invariant({ rec__file_io__read_result__c =
  current_read__split_fields }, { rec__file_io__read_result__status =
  current_read__split_discrs }, { rec__file_io__read_result__c =
  next_read__split_fields }, { rec__file_io__read_result__status =
  next_read__split_discrs }) = true) and
  (to_rep1(current_read__split_discrs) = 0)) ->
  ((exists o:int. (to_rep(current_read__split_fields) = o)) -> (let o =
  s__split_discrs : us_split_discrs2 in
  (forall s__split_fields1:us_main_type1.
  ((forall o1:us_split_discrs2. forall s__split_fields2:us_main_type1.
   length__function_guard(length({ us_split_discrs3 = o1; us_split_fields3 =
   { rec__unbounded_strings__char_vectors__vector = s__split_fields2 } }), {
   us_split_discrs3 = o1; us_split_fields3 = {
   rec__unbounded_strings__char_vectors__vector = s__split_fields2 } })) ->
  ((forall s__split_fields2:us_main_type1. forall o1:us_split_discrs2.
   length__function_guard(length({ us_split_discrs3 = o1; us_split_fields3 =
   { rec__unbounded_strings__char_vectors__vector = s__split_fields2 } }), {
   us_split_discrs3 = o1; us_split_fields3 = {
   rec__unbounded_strings__char_vectors__vector = s__split_fields2 } })) ->
  (((length({ us_split_discrs3 = o; us_split_fields3 = {
  rec__unbounded_strings__char_vectors__vector = s__split_fields1 }
  }) = (length({ us_split_discrs3 = o; us_split_fields3 = {
  rec__unbounded_strings__char_vectors__vector = s__split_fields }
  }) + 1)) and dynamic_invariant2({ us_split_discrs3 = o; us_split_fields3 =
  { rec__unbounded_strings__char_vectors__vector = s__split_fields1 } },
  true, true, true, true)) ->
  ((forall current_read__split_fields1:character.
   forall current_read__split_discrs1:read_status.
   forall next_read__split_fields1:character.
   forall next_read__split_discrs1:read_status.
   local_invariant__function_guard(local_invariant({
   rec__file_io__read_result__c = current_read__split_fields1 }, {
   rec__file_io__read_result__status = current_read__split_discrs1 }, {
   rec__file_io__read_result__c = next_read__split_fields1 }, {
   rec__file_io__read_result__status = next_read__split_discrs1 }), {
   rec__file_io__read_result__c = current_read__split_fields1 }, {
   rec__file_io__read_result__status = current_read__split_discrs1 }, {
   rec__file_io__read_result__c = next_read__split_fields1 }, {
   rec__file_io__read_result__status = next_read__split_discrs1 })) ->
  (local_invariant({ rec__file_io__read_result__c =
  current_read__split_fields }, { rec__file_io__read_result__status =
  current_read__split_discrs }, { rec__file_io__read_result__c =
  next_read__split_fields }, { rec__file_io__read_result__status =
  next_read__split_discrs }) = true)))))))))))))))))))
