(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type my_boolean

predicate in_range2(x: int) = ((0 <= x) and (x <= 1))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : my_boolean, my_boolean -> bool

logic dummy1 : my_boolean

type my_boolean__ref = { my_boolean__content : my_boolean
}

function my_boolean__ref_my_boolean__content__projection(a: my_boolean__ref) : my_boolean =
  (a).my_boolean__content

logic to_rep1 : my_boolean -> int

logic of_rep1 : int -> my_boolean

axiom inversion_axiom1 :
  (forall x:my_boolean [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:my_boolean [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,my_boolean) farray
}

logic slide : (int,my_boolean) farray, int, int -> (int,my_boolean) farray

axiom slide_eq :
  (forall a:(int,my_boolean) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,my_boolean) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,my_boolean) farray, a__first: int, a__last: int,
  b: (int,my_boolean) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,my_boolean) farray; rt : t
}

function to_array(a: us_t) : (int,my_boolean) farray = (a).elts

function of_array(a: (int,my_boolean) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type bool_array__ref = { bool_array__content : us_t
}

function bool_array__ref_bool_array__content__projection(a: bool_array__ref) : us_t =
  (a).bool_array__content

logic x : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic y : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic r1 : us_t

logic attr__ATTRIBUTE_ADDRESS2 : int

function to_bool(x1: my_boolean) : bool = of_int(to_rep1(x1))

function of_bool(x1: bool) : my_boolean = of_rep1(to_int(x1))

logic xorb1 : (int,my_boolean) farray, int, int, (int,my_boolean) farray,
  int, int -> (int,my_boolean) farray

logic andb1 : (int,my_boolean) farray, int, int, (int,my_boolean) farray,
  int, int -> (int,my_boolean) farray

logic orb1 : (int,my_boolean) farray, int, int, (int,my_boolean) farray, int,
  int -> (int,my_boolean) farray

logic notb1 : (int,my_boolean) farray, int, int -> (int,my_boolean) farray

axiom op_def :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(orb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((orb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = of_bool(orb(to_bool((a[i])),
  to_bool((b[((i - a_first) + b_first)])))))))))

axiom op_def1 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(andb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((andb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = of_bool(andb(to_bool((a[i])),
  to_bool((b[((i - a_first) + b_first)])))))))))

axiom op_def2 :
  (forall a:(int,my_boolean) farray. forall b:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(xorb1(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((xorb1(a, a_first, a_last, b,
  b_first, b_last)[i]) = of_bool(xorb(to_bool((a[i])),
  to_bool((b[((i - a_first) + b_first)])))))))))

axiom notb_def :
  (forall a:(int,my_boolean) farray.
  (forall a_first:int. forall a_last:int.
  (forall i:int [(notb1(a, a_first, a_last)[i])]. (((a_first <= i) and
  (i <= a_last)) -> ((notb1(a, a_first,
  a_last)[i]) = of_bool(notb(to_bool((a[i])))))))))

predicate dynamic_invariant(temp___expr_235: us_t, temp___is_init_231: bool,
  temp___skip_constant_232: bool, temp___do_toplevel_233: bool,
  temp___do_typ_inv_234: bool) = ((not (temp___skip_constant_232 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_235),
  last1(temp___expr_235)))

type t1b

logic t1bqtint : t1b -> int

axiom t1bqtaxiom : (forall i:t1b. (1 <= t1bqtint(i)))

axiom t1bqtaxiom1 : (forall i:t1b. (t1bqtint(i) <= 40))

predicate in_range3(x1: int) = ((1 <= x1) and (x1 <= 40))

function bool_eq5(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : t1b, t1b -> bool

logic dummy3 : t1b

type t1b__ref = { t1b__content : t1b
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : t1b =
  (a).t1b__content

logic array_logical_ops__test_ok1__x__aggregate_def : int, int, int,
  int -> (int,my_boolean) farray

type t3b

logic t3bqtint : t3b -> int

axiom t3bqtaxiom : (forall i:t3b. (1 <= t3bqtint(i)))

axiom t3bqtaxiom1 : (forall i:t3b. (t3bqtint(i) <= 40))

predicate in_range4(x1: int) = ((1 <= x1) and (x1 <= 40))

function bool_eq6(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : t3b, t3b -> bool

logic dummy4 : t3b

type t3b__ref = { t3b__content : t3b
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : t3b =
  (a).t3b__content

logic array_logical_ops__test_ok1__y__aggregate_def : int, int,
  int -> (int,my_boolean) farray

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom x__def_axiom :
  (x = of_array(array_logical_ops__test_ok1__x__aggregate_def(1, 0, 1, 0), 1,
  40))

predicate dynamic_invariant2(temp___expr_228: int, temp___is_init_224: bool,
  temp___skip_constant_225: bool, temp___do_toplevel_226: bool,
  temp___do_typ_inv_227: bool) = (((temp___is_init_224 = true) or
  (0 <= 1)) -> in_range2(temp___expr_228))

axiom def_axiom :
  (forall temp___157:int. forall temp___158:int. forall temp___159:int.
  forall temp___160:int. (((dynamic_invariant2(temp___157, true, true, true,
  true) and dynamic_invariant2(temp___158, true, true, true, true)) and
  (dynamic_invariant2(temp___159, true, true, true, true) and
  dynamic_invariant2(temp___160, true, true, true, true))) ->
  (forall temp___161:int. (((31 <= temp___161) and (temp___161 <= 40)) ->
  (to_rep1((array_logical_ops__test_ok1__x__aggregate_def(temp___157,
  temp___158, temp___159, temp___160)[temp___161])) = temp___160)))))

axiom def_axiom1 :
  (forall temp___157:int. forall temp___158:int. forall temp___159:int.
  forall temp___160:int. (((dynamic_invariant2(temp___157, true, true, true,
  true) and dynamic_invariant2(temp___158, true, true, true, true)) and
  (dynamic_invariant2(temp___159, true, true, true, true) and
  dynamic_invariant2(temp___160, true, true, true, true))) ->
  (forall temp___161:int. ((not ((31 <= temp___161) and
  (temp___161 <= 40))) -> (((21 <= temp___161) and (temp___161 <= 30)) ->
  (to_rep1((array_logical_ops__test_ok1__x__aggregate_def(temp___157,
  temp___158, temp___159, temp___160)[temp___161])) = temp___159))))))

axiom def_axiom2 :
  (forall temp___157:int. forall temp___158:int. forall temp___159:int.
  forall temp___160:int. (((dynamic_invariant2(temp___157, true, true, true,
  true) and dynamic_invariant2(temp___158, true, true, true, true)) and
  (dynamic_invariant2(temp___159, true, true, true, true) and
  dynamic_invariant2(temp___160, true, true, true, true))) ->
  (forall temp___161:int. ((not ((31 <= temp___161) and
  (temp___161 <= 40))) -> ((not ((21 <= temp___161) and
  (temp___161 <= 30))) -> (((11 <= temp___161) and (temp___161 <= 20)) ->
  (to_rep1((array_logical_ops__test_ok1__x__aggregate_def(temp___157,
  temp___158, temp___159, temp___160)[temp___161])) = temp___158)))))))

axiom def_axiom3 :
  (forall temp___157:int. forall temp___158:int. forall temp___159:int.
  forall temp___160:int. (((dynamic_invariant2(temp___157, true, true, true,
  true) and dynamic_invariant2(temp___158, true, true, true, true)) and
  (dynamic_invariant2(temp___159, true, true, true, true) and
  dynamic_invariant2(temp___160, true, true, true, true))) ->
  (forall temp___161:int. ((not ((31 <= temp___161) and
  (temp___161 <= 40))) -> ((not ((21 <= temp___161) and
  (temp___161 <= 30))) -> ((not ((11 <= temp___161) and
  (temp___161 <= 20))) -> (((1 <= temp___161) and (temp___161 <= 10)) ->
  (to_rep1((array_logical_ops__test_ok1__x__aggregate_def(temp___157,
  temp___158, temp___159, temp___160)[temp___161])) = temp___157))))))))

axiom y__def_axiom :
  (y = of_array(array_logical_ops__test_ok1__y__aggregate_def(0, 1, 0), 1,
  40))

axiom def_axiom4 :
  (forall temp___163:int. forall temp___164:int. forall temp___165:int.
  (((dynamic_invariant2(temp___163, true, true, true, true) and
  dynamic_invariant2(temp___164, true, true, true, true)) and
  dynamic_invariant2(temp___165, true, true, true, true)) ->
  (forall temp___166:int. (((31 <= temp___166) and (temp___166 <= 40)) ->
  (to_rep1((array_logical_ops__test_ok1__y__aggregate_def(temp___163,
  temp___164, temp___165)[temp___166])) = temp___165)))))

axiom def_axiom5 :
  (forall temp___163:int. forall temp___164:int. forall temp___165:int.
  (((dynamic_invariant2(temp___163, true, true, true, true) and
  dynamic_invariant2(temp___164, true, true, true, true)) and
  dynamic_invariant2(temp___165, true, true, true, true)) ->
  (forall temp___166:int. ((not ((31 <= temp___166) and
  (temp___166 <= 40))) -> (((11 <= temp___166) and (temp___166 <= 30)) ->
  (to_rep1((array_logical_ops__test_ok1__y__aggregate_def(temp___163,
  temp___164, temp___165)[temp___166])) = temp___164))))))

axiom def_axiom6 :
  (forall temp___163:int. forall temp___164:int. forall temp___165:int.
  (((dynamic_invariant2(temp___163, true, true, true, true) and
  dynamic_invariant2(temp___164, true, true, true, true)) and
  dynamic_invariant2(temp___165, true, true, true, true)) ->
  (forall temp___166:int. ((not ((31 <= temp___166) and
  (temp___166 <= 40))) -> ((not ((11 <= temp___166) and
  (temp___166 <= 30))) -> (((1 <= temp___166) and (temp___166 <= 10)) ->
  (to_rep1((array_logical_ops__test_ok1__y__aggregate_def(temp___163,
  temp___164, temp___165)[temp___166])) = temp___163)))))))

axiom r1__def_axiom : (r1 = of_array(andb1(to_array(x), first1(x), last1(x),
  to_array(y), first1(y), last1(y)), first1(x), last1(x)))

 (* File "array_logical_ops.ads", line 12, characters 0-0 *)
goal defqtvc : ((of_array(array_logical_ops__test_ok1__x__aggregate_def(1, 0,
  1, 0), 1, 40) = x) -> (dynamic_invariant(x, true, false, true, true) ->
  ((of_array(array_logical_ops__test_ok1__y__aggregate_def(0, 1, 0), 1,
  40) = y) -> (dynamic_invariant(y, true, false, true, true) ->
  ((of_array(andb1(to_array(x), first1(x), last1(x), to_array(y), first1(y),
  last1(y)), first1(x), last1(x)) = r1) -> (dynamic_invariant(r1, true,
  false, true, true) -> ((first1(r1) = 1) ->
  ((forall i:int. (((1 <= i) and (i <= 20)) ->
   (not (of_int(to_rep1((to_array(r1)[i]))) = true)))) ->
  ((forall i:int. (((31 <= i) and (i <= 40)) ->
   (not (of_int(to_rep1((to_array(r1)[i]))) = true)))) ->
  (forall usf:int. ((andb((if (21 <= usf) then true else false),
  (if (usf <= 30) then true else false)) = true) -> (first1(r1) <= usf))))))))))))
