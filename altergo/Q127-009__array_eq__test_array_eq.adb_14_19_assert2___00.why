(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__test_array_eq__my_rec__f1 : integer;
rec__test_array_eq__my_rec__f2 : integer
}

function us_split_fields_rec__test_array_eq__my_rec__f1__projection(a: us_split_fields) : integer =
  (a).rec__test_array_eq__my_rec__f1

function us_split_fields_rec__test_array_eq__my_rec__f2__projection(a: us_split_fields) : integer =
  (a).rec__test_array_eq__my_rec__f2

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_fields1).rec__test_array_eq__my_rec__f1) = to_rep(((b).us_split_fields1).rec__test_array_eq__my_rec__f1)) and
  (to_rep(((a).us_split_fields1).rec__test_array_eq__my_rec__f2) = to_rep(((b).us_split_fields1).rec__test_array_eq__my_rec__f2))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_array_eq__my_rec__f1__first__bit : int

logic test_array_eq__my_rec__f1__last__bit : int

logic test_array_eq__my_rec__f1__position : int

axiom test_array_eq__my_rec__f1__first__bit_axiom :
  (0 <= test_array_eq__my_rec__f1__first__bit)

axiom test_array_eq__my_rec__f1__last__bit_axiom :
  (test_array_eq__my_rec__f1__first__bit <  test_array_eq__my_rec__f1__last__bit)

axiom test_array_eq__my_rec__f1__position_axiom :
  (0 <= test_array_eq__my_rec__f1__position)

logic test_array_eq__my_rec__f2__first__bit : int

logic test_array_eq__my_rec__f2__last__bit : int

logic test_array_eq__my_rec__f2__position : int

axiom test_array_eq__my_rec__f2__first__bit_axiom :
  (0 <= test_array_eq__my_rec__f2__first__bit)

axiom test_array_eq__my_rec__f2__last__bit_axiom :
  (test_array_eq__my_rec__f2__first__bit <  test_array_eq__my_rec__f2__last__bit)

axiom test_array_eq__my_rec__f2__position_axiom :
  (0 <= test_array_eq__my_rec__f2__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref_my_rec__content__projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (user_eq1((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (user_eq1((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type tmy_arrayD1

logic tmy_arrayD1qtint : tmy_arrayD1 -> int

axiom tmy_arrayD1qtaxiom : (forall i:tmy_arrayD1. (1 <= tmy_arrayD1qtint(i)))

axiom tmy_arrayD1qtaxiom1 :
  (forall i:tmy_arrayD1. (tmy_arrayD1qtint(i) <= 2))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : tmy_arrayD1, tmy_arrayD1 -> bool

logic dummy2 : tmy_arrayD1

type tmy_arrayD1__ref = { tmy_arrayD1__content : tmy_arrayD1
}

function tmy_arrayD1__ref_tmy_arrayD1__content__projection(a: tmy_arrayD1__ref) : tmy_arrayD1 =
  (a).tmy_arrayD1__content

logic test_array_eq__a__aggregate_def : us_rep, us_rep -> (int,us_rep) farray

logic test_array_eq__b__aggregate_def : us_rep, us_rep -> (int,us_rep) farray

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic oeq : us_rep, us_rep -> bool

logic oeq__function_guard : bool, us_rep, us_rep -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep. forall b:us_rep. oeq__function_guard(oeq(a, b), a, b))

axiom user_eq__def_axiom1 :
  (forall a:us_rep. forall b:us_rep [user_eq1(a, b)]. (user_eq1(a,
  b) = oeq(a, b)))

axiom oeq__def_axiom :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)]. ((oeq(x, y) = true) ->
  (to_rep(((x).us_split_fields1).rec__test_array_eq__my_rec__f1) = to_rep(((y).us_split_fields1).rec__test_array_eq__my_rec__f1))))

axiom oeq__def_axiom1 :
  (forall x:us_rep. forall y:us_rep [oeq(x, y)].
  ((to_rep(((x).us_split_fields1).rec__test_array_eq__my_rec__f1) = to_rep(((y).us_split_fields1).rec__test_array_eq__my_rec__f1)) ->
  (oeq(x, y) = true)))

axiom def_axiom :
  (forall temp___201:us_rep. forall temp___202:us_rep.
  ((test_array_eq__a__aggregate_def(temp___201,
  temp___202)[1]) = temp___201))

axiom def_axiom1 :
  (forall temp___201:us_rep. forall temp___202:us_rep.
  ((test_array_eq__a__aggregate_def(temp___201,
  temp___202)[2]) = temp___202))

axiom def_axiom2 :
  (forall temp___205:us_rep. forall temp___206:us_rep.
  ((test_array_eq__b__aggregate_def(temp___205,
  temp___206)[1]) = temp___205))

axiom def_axiom3 :
  (forall temp___205:us_rep. forall temp___206:us_rep.
  ((test_array_eq__b__aggregate_def(temp___205,
  temp___206)[2]) = temp___206))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 2)

logic rliteral2 : integer

axiom rliteral_axiom2 : (integerqtint(rliteral2) = 3)

logic rliteral3 : integer

axiom rliteral_axiom3 : (integerqtint(rliteral3) = 4)

 (* File "test_array_eq.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall a:(int,us_rep) farray. ((a = test_array_eq__a__aggregate_def({
  us_split_fields1 = { rec__test_array_eq__my_rec__f1 = rliteral;
  rec__test_array_eq__my_rec__f2 = rliteral1 } }, { us_split_fields1 = {
  rec__test_array_eq__my_rec__f1 = rliteral2;
  rec__test_array_eq__my_rec__f2 = rliteral3 } })) ->
  (forall b:(int,us_rep) farray. ((b = test_array_eq__b__aggregate_def({
  us_split_fields1 = { rec__test_array_eq__my_rec__f1 = rliteral;
  rec__test_array_eq__my_rec__f2 = rliteral } }, { us_split_fields1 = {
  rec__test_array_eq__my_rec__f1 = rliteral2;
  rec__test_array_eq__my_rec__f2 = rliteral2 } })) -> (bool_eq2(a, 1, 2, b,
  1, 2) = true)))))
