(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type pointer_range

logic pointer_rangeqtint : pointer_range -> int

axiom pointer_rangeqtaxiom :
  (forall i:pointer_range. (0 <= pointer_rangeqtint(i)))

axiom pointer_rangeqtaxiom1 :
  (forall i:pointer_range. (pointer_rangeqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : pointer_range, pointer_range -> bool

logic dummy1 : pointer_range

type pointer_range__ref = { pointer_range__content : pointer_range
}

function pointer_range__ref_pointer_range__content__projection(a: pointer_range__ref) : pointer_range =
  (a).pointer_range__content

function to_rep1(x: pointer_range) : int = pointer_rangeqtint(x)

logic of_rep1 : int -> pointer_range

axiom inversion_axiom1 :
  (forall x:pointer_range [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:pointer_range [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy2 : (int,integer) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq2 : (int,integer) farray, (int,integer) farray -> bool

type us_split_fields = { rec__stacks_14__stack__stack_vector :
(int,integer) farray; rec__stacks_14__stack__stack_pointer : pointer_range;
rec__ext__ : us_private
}

function us_split_fields_rec__stacks_14__stack__stack_vector__projection(a: us_split_fields) : (int,integer) farray =
  (a).rec__stacks_14__stack__stack_vector

function us_split_fields_rec__stacks_14__stack__stack_pointer__projection(a: us_split_fields) : pointer_range =
  (a).rec__stacks_14__stack__stack_pointer

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq2(((a).us_split_fields1).rec__stacks_14__stack__stack_vector,
  1, 100, ((b).us_split_fields1).rec__stacks_14__stack__stack_vector, 1,
  100) = true) and
  (to_rep1(((a).us_split_fields1).rec__stacks_14__stack__stack_pointer) = to_rep1(((b).us_split_fields1).rec__stacks_14__stack__stack_pointer))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic stacks_14__stack__stack_vector__first__bit : int

logic stacks_14__stack__stack_vector__last__bit : int

logic stacks_14__stack__stack_vector__position : int

axiom stacks_14__stack__stack_vector__first__bit_axiom :
  (0 <= stacks_14__stack__stack_vector__first__bit)

axiom stacks_14__stack__stack_vector__last__bit_axiom :
  (stacks_14__stack__stack_vector__first__bit <  stacks_14__stack__stack_vector__last__bit)

axiom stacks_14__stack__stack_vector__position_axiom :
  (0 <= stacks_14__stack__stack_vector__position)

logic stacks_14__stack__stack_pointer__first__bit : int

logic stacks_14__stack__stack_pointer__last__bit : int

logic stacks_14__stack__stack_pointer__position : int

axiom stacks_14__stack__stack_pointer__first__bit_axiom :
  (0 <= stacks_14__stack__stack_pointer__first__bit)

axiom stacks_14__stack__stack_pointer__last__bit_axiom :
  (stacks_14__stack__stack_pointer__first__bit <  stacks_14__stack__stack_pointer__last__bit)

axiom stacks_14__stack__stack_pointer__position_axiom :
  (0 <= stacks_14__stack__stack_pointer__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type stack__ref = { stack__content : us_rep
}

function stack__ref_stack__content__projection(a: stack__ref) : us_rep =
  (a).stack__content

type us_split_fields2 = {
rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector :
(int,integer) farray;
rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value :
integer; rec__stacks_14__stack__stack_vector1 : (int,integer) farray;
rec__stacks_14__stack__stack_pointer1 : pointer_range; rec__ext__1 :
us_private
}

function us_split_fields_rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector

function us_split_fields_rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value__projection(a: us_split_fields2) : integer =
  (a).rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value

function us_split_fields_rec__stacks_14__stack__stack_vector__2__projection(a: us_split_fields2) : (int,integer) farray =
  (a).rec__stacks_14__stack__stack_vector1

function us_split_fields_rec__stacks_14__stack__stack_pointer__2__projection(a: us_split_fields2) : pointer_range =
  (a).rec__stacks_14__stack__stack_pointer1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : (int,integer) farray, integer, us_private -> us_private

logic extract__ada___stacks_14__monitored_14__monitored_stack__monitor_vector : us_private -> (int,integer) farray

axiom extract__ada___stacks_14__monitored_14__monitored_stack__monitor_vector__conv :
  (forall ada___stacks_14__monitored_14__monitored_stack__monitor_vector:(int,integer) farray.
  (forall ada___stacks_14__monitored_14__monitored_stack__next_identity_value:integer.
  (forall rec__ext__2:us_private.
  (extract__ada___stacks_14__monitored_14__monitored_stack__monitor_vector(hide_ext__(ada___stacks_14__monitored_14__monitored_stack__monitor_vector,
  ada___stacks_14__monitored_14__monitored_stack__next_identity_value,
  rec__ext__2)) = ada___stacks_14__monitored_14__monitored_stack__monitor_vector))))

logic extract__ada___stacks_14__monitored_14__monitored_stack__next_identity_value : us_private -> integer

axiom extract__ada___stacks_14__monitored_14__monitored_stack__next_identity_value__conv :
  (forall ada___stacks_14__monitored_14__monitored_stack__monitor_vector:(int,integer) farray.
  (forall ada___stacks_14__monitored_14__monitored_stack__next_identity_value:integer.
  (forall rec__ext__2:us_private.
  (extract__ada___stacks_14__monitored_14__monitored_stack__next_identity_value(hide_ext__(ada___stacks_14__monitored_14__monitored_stack__monitor_vector,
  ada___stacks_14__monitored_14__monitored_stack__next_identity_value,
  rec__ext__2)) = ada___stacks_14__monitored_14__monitored_stack__next_identity_value))))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__stacks_14__stack__stack_vector =
  ((a).us_split_fields3).rec__stacks_14__stack__stack_vector1;
  rec__stacks_14__stack__stack_pointer =
  ((a).us_split_fields3).rec__stacks_14__stack__stack_pointer1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector,
  ((a).us_split_fields3).rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector =
  extract__ada___stacks_14__monitored_14__monitored_stack__monitor_vector(((r).us_split_fields1).rec__ext__);
  rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value =
  extract__ada___stacks_14__monitored_14__monitored_stack__next_identity_value(((r).us_split_fields1).rec__ext__);
  rec__stacks_14__stack__stack_vector1 =
  ((r).us_split_fields1).rec__stacks_14__stack__stack_vector;
  rec__stacks_14__stack__stack_pointer1 =
  ((r).us_split_fields1).rec__stacks_14__stack__stack_pointer; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if (((bool_eq2(((a).us_split_fields3).rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector,
  1, 100,
  ((b).us_split_fields3).rec__ada___stacks_14__monitored_14__monitored_stack__monitor_vector,
  1, 100) = true) and
  (to_rep(((a).us_split_fields3).rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value) = to_rep(((b).us_split_fields3).rec__ada___stacks_14__monitored_14__monitored_stack__next_identity_value))) and
  ((bool_eq2(((a).us_split_fields3).rec__stacks_14__stack__stack_vector1, 1,
  100, ((b).us_split_fields3).rec__stacks_14__stack__stack_vector1, 1,
  100) = true) and
  (to_rep1(((a).us_split_fields3).rec__stacks_14__stack__stack_pointer1) = to_rep1(((b).us_split_fields3).rec__stacks_14__stack__stack_pointer1)))) then true else false)

logic us_tag1 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic ada___stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit : int

logic ada___stacks_14__monitored_14__monitored_stack__monitor_vector__last__bit : int

logic ada___stacks_14__monitored_14__monitored_stack__monitor_vector__position : int

axiom ada___stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit_axiom :
  (0 <= ada___stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit)

axiom ada___stacks_14__monitored_14__monitored_stack__monitor_vector__last__bit_axiom :
  (ada___stacks_14__monitored_14__monitored_stack__monitor_vector__first__bit <  ada___stacks_14__monitored_14__monitored_stack__monitor_vector__last__bit)

axiom ada___stacks_14__monitored_14__monitored_stack__monitor_vector__position_axiom :
  (0 <= ada___stacks_14__monitored_14__monitored_stack__monitor_vector__position)

logic ada___stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit : int

logic ada___stacks_14__monitored_14__monitored_stack__next_identity_value__last__bit : int

logic ada___stacks_14__monitored_14__monitored_stack__next_identity_value__position : int

axiom ada___stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit_axiom :
  (0 <= ada___stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit)

axiom ada___stacks_14__monitored_14__monitored_stack__next_identity_value__last__bit_axiom :
  (ada___stacks_14__monitored_14__monitored_stack__next_identity_value__first__bit <  ada___stacks_14__monitored_14__monitored_stack__next_identity_value__last__bit)

axiom ada___stacks_14__monitored_14__monitored_stack__next_identity_value__position_axiom :
  (0 <= ada___stacks_14__monitored_14__monitored_stack__next_identity_value__position)

logic stacks_14__stack__stack_vector__first__bit1 : int

logic stacks_14__stack__stack_vector__last__bit1 : int

logic stacks_14__stack__stack_vector__position1 : int

axiom stacks_14__stack__stack_vector__first__bit_axiom1 :
  (0 <= stacks_14__stack__stack_vector__first__bit1)

axiom stacks_14__stack__stack_vector__last__bit_axiom1 :
  (stacks_14__stack__stack_vector__first__bit1 <  stacks_14__stack__stack_vector__last__bit1)

axiom stacks_14__stack__stack_vector__position_axiom1 :
  (0 <= stacks_14__stack__stack_vector__position1)

logic stacks_14__stack__stack_pointer__first__bit1 : int

logic stacks_14__stack__stack_pointer__last__bit1 : int

logic stacks_14__stack__stack_pointer__position1 : int

axiom stacks_14__stack__stack_pointer__first__bit_axiom1 :
  (0 <= stacks_14__stack__stack_pointer__first__bit1)

axiom stacks_14__stack__stack_pointer__last__bit_axiom1 :
  (stacks_14__stack__stack_pointer__first__bit1 <  stacks_14__stack__stack_pointer__last__bit1)

axiom stacks_14__stack__stack_pointer__position_axiom1 :
  (0 <= stacks_14__stack__stack_pointer__position1)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type monitored_stack__ref = { monitored_stack__content : us_rep1
}

function monitored_stack__ref_monitored_stack__content__projection(a: monitored_stack__ref) : us_rep1 =
  (a).monitored_stack__content

predicate default_initial_assumption(temp___expr_202: us_rep1,
  temp___skip_top_level_203: bool) = ((temp___expr_202).attr__tag1 = us_tag1)

logic s : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq5(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

logic is_empty1 : int, us_rep -> bool

logic is_empty__function_guard1 : bool, int, us_rep -> prop

predicate default_initial_assumption1(temp___expr_189: us_rep,
  temp___skip_top_level_190: bool) = ((temp___expr_189).attr__tag = us_tag)

axiom ada___stacks_14__monitored_14__monitored_stack__compat_axiom :
  (forall s1:us_rep [is_empty1(us_tag1, s1)].
  (is_empty__function_guard1(is_empty1(us_tag1, s1), us_tag1, s1) ->
  (forall s2:us_rep. is_empty__function_guard(is_empty(s2), s2))))

axiom ada___stacks_14__monitored_14__monitored_stack__compat_axiom1 :
  (forall s1:us_rep [is_empty1(us_tag1, s1)].
  (is_empty__function_guard1(is_empty1(us_tag1, s1), us_tag1, s1) ->
  (to_int(is_empty(s1)) = to_int(is_empty1(us_tag1, s1)))))

axiom stacks_14__stack__compat_axiom :
  (forall s1:us_rep [is_empty1(us_tag, s1)].
  (is_empty__function_guard1(is_empty1(us_tag, s1), us_tag, s1) ->
  (forall s2:us_rep. is_empty__function_guard(is_empty(s2), s2))))

axiom stacks_14__stack__compat_axiom1 :
  (forall s1:us_rep [is_empty1(us_tag, s1)].
  (is_empty__function_guard1(is_empty1(us_tag, s1), us_tag, s1) ->
  (to_int(is_empty(s1)) = to_int(is_empty1(us_tag, s1)))))

type index_range

logic index_rangeqtint : index_range -> int

axiom index_rangeqtaxiom : (forall i:index_range. (1 <= index_rangeqtint(i)))

axiom index_rangeqtaxiom1 :
  (forall i:index_range. (index_rangeqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : index_range, index_range -> bool

logic dummy5 : index_range

type index_range__ref = { index_range__content : index_range
}

function index_range__ref_index_range__content__projection(a: index_range__ref) : index_range =
  (a).index_range__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant1(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 100)) -> in_range1(temp___expr_163))

predicate dynamic_invariant2(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (1 <= 100)) -> in_range3(temp___expr_170))

 (* File "stacks_14-monitored_14.ads", line 15, characters 0-0 *)
goal defqtvc : (let o = to_base(s) : us_rep in (let o1 = is_empty(o)
  : bool in (is_empty__function_guard(o1, o) -> ((not (o1 = true)) ->
  (forall temp___291:int.
  ((to_rep1(((s).us_split_fields3).rec__stacks_14__stack__stack_pointer1) = temp___291) ->
  (1 <= temp___291)))))))
