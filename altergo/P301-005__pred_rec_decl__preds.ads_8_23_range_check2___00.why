(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic i9s : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type int_bad

logic int_badqtint : int_bad -> int

axiom int_badqtaxiom :
  (forall i:int_bad. ((- 2147483648) <= int_badqtint(i)))

axiom int_badqtaxiom1 : (forall i:int_bad. (int_badqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : int_bad, int_bad -> bool

logic dummy : int_bad

type int_bad__ref = { int_bad__content : int_bad
}

function int_bad__ref_int_bad__content__projection(a: int_bad__ref) : int_bad =
  (a).int_bad__content

predicate dynamic_invariant(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = ((((temp___is_init_178 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_182)) and
  ((temp___do_toplevel_180 = true) ->
  ((((- 2147483648) <= temp___expr_182) and (temp___expr_182 <= (- 1))) or
  ((1 <= temp___expr_182) and (temp___expr_182 <= 2147483647)))))

predicate dynamic_predicate(temp___186: int) =
  ((((- 2147483648) <= temp___186) and (temp___186 <= (- 1))) or
  ((1 <= temp___186) and (temp___186 <= 2147483647)))

function to_rep(x: int_bad) : int = int_badqtint(x)

logic of_rep : int -> int_bad

axiom inversion_axiom :
  (forall x:int_bad [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:int_bad [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

 (* File "preds.ads", line 12, characters 0-0 *)
goal defqtvc :
  (forall x:int. (dynamic_invariant(i9s, true, false, true, true) ->
  (dynamic_invariant(i9s, true, false, true, true) -> (dynamic_invariant(x,
  false, false, true, true) -> in_range(0)))))
