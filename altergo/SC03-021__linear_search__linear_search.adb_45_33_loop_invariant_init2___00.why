(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

type us_main_type

type us_rep = { rec__linear_search__list__is_null_pointer : bool;
rec__linear_search__list__pointer_address : int;
rec__linear_search__list__pointer_value_abstr : us_main_type
}

function us_rep_rec__linear_search__list__is_null_pointer__projection(a: us_rep) : bool =
  (a).rec__linear_search__list__is_null_pointer

function us_rep_rec__linear_search__list__pointer_address__projection(a: us_rep) : int =
  (a).rec__linear_search__list__pointer_address

function us_rep_rec__linear_search__list__pointer_value_abstr__projection(a: us_rep) : us_main_type =
  (a).rec__linear_search__list__pointer_value_abstr

type us_rep__ref = { us_rep__content : us_rep
}

function us_rep__ref___rep__content__2__projection(a: us_rep__ref) : us_rep =
  (a).us_rep__content

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((a).rec__linear_search__list__is_null_pointer = (b).rec__linear_search__list__is_null_pointer) and
  ((not ((a).rec__linear_search__list__is_null_pointer = true)) ->
  (((a).rec__linear_search__list__pointer_address = (b).rec__linear_search__list__pointer_address) and
  ((a).rec__linear_search__list__pointer_value_abstr = (b).rec__linear_search__list__pointer_value_abstr)))) then true else false)

logic dummy2 : us_rep

type t2b__ref = { t2b__content : us_rep
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : us_rep =
  (a).t2b__content

logic length : us_rep -> int

logic length__function_guard : int, us_rep -> prop

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy3 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_39))

logic dummy4 : us_rep

type list__ref = { list__content : us_rep
}

function list__ref_list__content__projection(a: list__ref) : us_rep =
  (a).list__content

type us_rep1 = { rec__linear_search__int_acc__is_null_pointer : bool;
rec__linear_search__int_acc__pointer_address : int;
rec__linear_search__int_acc__pointer_value : integer
}

function us_rep_rec__linear_search__int_acc__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__linear_search__int_acc__is_null_pointer

function us_rep_rec__linear_search__int_acc__pointer_address__projection(a: us_rep1) : int =
  (a).rec__linear_search__int_acc__pointer_address

function us_rep_rec__linear_search__int_acc__pointer_value__projection(a: us_rep1) : integer =
  (a).rec__linear_search__int_acc__pointer_value

type us_rep__ref1 = { us_rep__content1 : us_rep1
}

function us_rep__ref___rep__content__projection(a: us_rep__ref1) : us_rep1 =
  (a).us_rep__content1

function bool_eq5(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__linear_search__int_acc__is_null_pointer = (b).rec__linear_search__int_acc__is_null_pointer) and
  ((not ((a).rec__linear_search__int_acc__is_null_pointer = true)) ->
  (((a).rec__linear_search__int_acc__pointer_address = (b).rec__linear_search__int_acc__pointer_address) and
  ((a).rec__linear_search__int_acc__pointer_value = (b).rec__linear_search__int_acc__pointer_value)))) then true else false)

predicate rec__linear_search__int_acc__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__linear_search__int_acc__is_null_pointer = true))

logic us_null_pointer : us_rep1

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__linear_search__int_acc__is_null_pointer = true)

logic dummy5 : us_rep1

type t1b__ref = { t1b__content : us_rep1
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep1 =
  (a).t1b__content

type us_split_fields = { rec__linear_search__list_cell__data : us_rep1;
rec__linear_search__list_cell__next : us_rep
}

function us_split_fields_rec__linear_search__list_cell__data__projection(a: us_split_fields) : us_rep1 =
  (a).rec__linear_search__list_cell__data

function us_split_fields_rec__linear_search__list_cell__next__projection(a: us_split_fields) : us_rep =
  (a).rec__linear_search__list_cell__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep2 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep2) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep2, b: us_rep2) : bool =
  (if ((bool_eq5(((a).us_split_fields1).rec__linear_search__list_cell__data,
  ((b).us_split_fields1).rec__linear_search__list_cell__data) = true) and
  (bool_eq3(((a).us_split_fields1).rec__linear_search__list_cell__next,
  ((b).us_split_fields1).rec__linear_search__list_cell__next) = true)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic linear_search__list_cell__data__first__bit : int

logic linear_search__list_cell__data__last__bit : int

logic linear_search__list_cell__data__position : int

axiom linear_search__list_cell__data__first__bit_axiom :
  (0 <= linear_search__list_cell__data__first__bit)

axiom linear_search__list_cell__data__last__bit_axiom :
  (linear_search__list_cell__data__first__bit <  linear_search__list_cell__data__last__bit)

axiom linear_search__list_cell__data__position_axiom :
  (0 <= linear_search__list_cell__data__position)

logic linear_search__list_cell__next__first__bit : int

logic linear_search__list_cell__next__last__bit : int

logic linear_search__list_cell__next__position : int

axiom linear_search__list_cell__next__first__bit_axiom :
  (0 <= linear_search__list_cell__next__first__bit)

axiom linear_search__list_cell__next__last__bit_axiom :
  (linear_search__list_cell__next__first__bit <  linear_search__list_cell__next__last__bit)

axiom linear_search__list_cell__next__position_axiom :
  (0 <= linear_search__list_cell__next__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type list_cell__ref = { list_cell__content : us_rep2
}

function list_cell__ref_list_cell__content__projection(a: list_cell__ref) : us_rep2 =
  (a).list_cell__content

logic us_open : us_main_type -> us_rep2

logic us_close : us_rep2 -> us_main_type

axiom close_open :
  (forall x:us_main_type [us_open(x)]. (us_close(us_open(x)) = x))

axiom open_close :
  (forall x:us_rep2 [us_close(x)]. (us_open(us_close(x)) = x))

function rec__linear_search__list__pointer_value(a: us_rep) : us_rep2 =
  us_open((a).rec__linear_search__list__pointer_value_abstr)

predicate rec__linear_search__list__pointer_value__pred(a: us_rep) =
  (not ((a).rec__linear_search__list__is_null_pointer = true))

logic us_null_pointer1 : us_rep

axiom us_null_pointer__def_axiom1 :
  ((us_null_pointer1).rec__linear_search__list__is_null_pointer = true)

logic temp___dynamic_invariant_215 : us_rep, bool, bool, bool, bool -> prop

predicate dynamic_invariant3(temp___expr_214: us_rep,
  temp___is_init_210: bool, temp___skip_constant_211: bool,
  temp___do_toplevel_212: bool, temp___do_typ_inv_213: bool) =
  ((not ((temp___expr_214).rec__linear_search__list__is_null_pointer = true)) ->
  ((not ((((rec__linear_search__list__pointer_value(temp___expr_214)).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__is_null_pointer = true)) and
  temp___dynamic_invariant_215(((rec__linear_search__list__pointer_value(temp___expr_214)).us_split_fields1).rec__linear_search__list_cell__next,
  true, false, true, temp___do_typ_inv_213)))

axiom def_axiom :
  (forall temp___expr_220:us_rep.
  (forall temp___is_init_216:bool. forall temp___skip_constant_217:bool.
  forall temp___do_toplevel_218:bool. forall temp___do_typ_inv_219:bool
  [temp___dynamic_invariant_215(temp___expr_220, temp___is_init_216,
  temp___skip_constant_217, temp___do_toplevel_218, temp___do_typ_inv_219)].
  (temp___dynamic_invariant_215(temp___expr_220, temp___is_init_216,
  temp___skip_constant_217, temp___do_toplevel_218, temp___do_typ_inv_219) ->
  ((not ((temp___expr_220).rec__linear_search__list__is_null_pointer = true)) ->
  (not ((((rec__linear_search__list__pointer_value(temp___expr_220)).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__is_null_pointer = true))))))

axiom def_axiom1 :
  (forall temp___expr_220:us_rep.
  (forall temp___is_init_216:bool. forall temp___skip_constant_217:bool.
  forall temp___do_toplevel_218:bool. forall temp___do_typ_inv_219:bool
  [temp___dynamic_invariant_215(temp___expr_220, temp___is_init_216,
  temp___skip_constant_217, temp___do_toplevel_218, temp___do_typ_inv_219)].
  (temp___dynamic_invariant_215(temp___expr_220, temp___is_init_216,
  temp___skip_constant_217, temp___do_toplevel_218, temp___do_typ_inv_219) ->
  ((not ((temp___expr_220).rec__linear_search__list__is_null_pointer = true)) ->
  temp___dynamic_invariant_215(((rec__linear_search__list__pointer_value(temp___expr_220)).us_split_fields1).rec__linear_search__list_cell__next,
  true, false, true, temp___do_typ_inv_219)))))

axiom def_axiom2 :
  (forall temp___expr_220:us_rep.
  (forall temp___is_init_216:bool. forall temp___skip_constant_217:bool.
  forall temp___do_toplevel_218:bool. forall temp___do_typ_inv_219:bool
  [temp___dynamic_invariant_215(temp___expr_220, temp___is_init_216,
  temp___skip_constant_217, temp___do_toplevel_218, temp___do_typ_inv_219)].
  (((not ((temp___expr_220).rec__linear_search__list__is_null_pointer = true)) ->
  ((not ((((rec__linear_search__list__pointer_value(temp___expr_220)).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__is_null_pointer = true)) and
  temp___dynamic_invariant_215(((rec__linear_search__list__pointer_value(temp___expr_220)).us_split_fields1).rec__linear_search__list_cell__next,
  true, false, true, temp___do_typ_inv_219))) ->
  temp___dynamic_invariant_215(temp___expr_220, temp___is_init_216,
  temp___skip_constant_217, temp___do_toplevel_218, temp___do_typ_inv_219))))

predicate default_initial_assumption(temp___expr_221: us_rep,
  temp___skip_top_level_222: bool) =
  ((temp___expr_221).rec__linear_search__list__is_null_pointer = true)

predicate dynamic_invariant4(temp___expr_227: us_rep2,
  temp___is_init_223: bool, temp___skip_constant_224: bool,
  temp___do_toplevel_225: bool, temp___do_typ_inv_226: bool) =
  ((not ((((temp___expr_227).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__is_null_pointer = true)) and
  ((not ((((temp___expr_227).us_split_fields1).rec__linear_search__list_cell__next).rec__linear_search__list__is_null_pointer = true)) ->
  ((not ((((rec__linear_search__list__pointer_value(((temp___expr_227).us_split_fields1).rec__linear_search__list_cell__next)).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__is_null_pointer = true)) and
  temp___dynamic_invariant_215(((rec__linear_search__list__pointer_value(((temp___expr_227).us_split_fields1).rec__linear_search__list_cell__next)).us_split_fields1).rec__linear_search__list_cell__next,
  true, false, true, temp___do_typ_inv_226))))

predicate default_initial_assumption1(temp___expr_228: us_rep2,
  temp___skip_top_level_229: bool) =
  (((((temp___expr_228).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__is_null_pointer = true) and
  ((((temp___expr_228).us_split_fields1).rec__linear_search__list_cell__next).rec__linear_search__list__is_null_pointer = true))

axiom length__def_axiom :
  (forall l:us_rep [length(l)].
  (((not ((l).rec__linear_search__list__is_null_pointer = true)) ->
  dynamic_invariant4(rec__linear_search__list__pointer_value(l), true, false,
  true, true)) -> (length(l) = (if (bool_eq3(l,
  us_null_pointer1) = true) then 0 else (min(2147483646,
  length(((rec__linear_search__list__pointer_value(l)).us_split_fields1).rec__linear_search__list_cell__next)) + 1)))))

logic dummy7 : us_rep

type t3b__ref = { t3b__content : us_rep
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : us_rep =
  (a).t3b__content

logic nth : us_rep, int -> int

logic nth__function_guard : int, us_rep, int -> prop

axiom nth__def_axiom :
  (forall l:us_rep.
  (forall n:int [nth(l, n)].
  ((((not ((l).rec__linear_search__list__is_null_pointer = true)) ->
  dynamic_invariant4(rec__linear_search__list__pointer_value(l), true, false,
  true, true)) and dynamic_invariant1(n, true, true, true, true)) -> (nth(l,
  n) = (if (n = 1) then to_rep((((rec__linear_search__list__pointer_value(l)).us_split_fields1).rec__linear_search__list_cell__data).rec__linear_search__int_acc__pointer_value) else nth(((rec__linear_search__list__pointer_value(l)).us_split_fields1).rec__linear_search__list_cell__next,
  (n - 1)))))))

logic dummy8 : us_rep

type t8b__ref = { t8b__content : us_rep
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : us_rep =
  (a).t8b__content

logic l : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic v : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic dummy9 : us_rep

type t12b__ref = { t12b__content : us_rep
}

function t12b__ref_t12b__content__projection(a: t12b__ref) : us_rep =
  (a).t12b__content

axiom length__post_axiom :
  (forall l1:us_rep [length(l1)].
  (((not ((l1).rec__linear_search__list__is_null_pointer = true)) ->
  dynamic_invariant4(rec__linear_search__list__pointer_value(l1), true,
  false, true, true)) -> dynamic_invariant2(length(l1), true, false, true,
  true)))

axiom nth__post_axiom :
  (forall l1:us_rep.
  (forall n:int [nth(l1, n)].
  (((((not ((l1).rec__linear_search__list__is_null_pointer = true)) ->
  dynamic_invariant4(rec__linear_search__list__pointer_value(l1), true,
  false, true, true)) and dynamic_invariant1(n, true, true, true, true)) and
  (n <= length(l1))) -> dynamic_invariant(nth(l1, n), true, false, true,
  true))))

 (* File "linear_search.adb", line 32, characters 0-0 *)
goal defqtvc :
  (((not ((l).rec__linear_search__list__is_null_pointer = true)) ->
  dynamic_invariant4(rec__linear_search__list__pointer_value(l), true, false,
  true, true)) -> (dynamic_invariant(v, true, false, true, true) ->
  ((length(l) <  2147483647) ->
  (let linear_search__linear_search__x__assume = l : us_rep in
  (forall x__pointer_value:us_split_fields. (({ us_split_fields1 =
  x__pointer_value
  } = rec__linear_search__list__pointer_value(linear_search__linear_search__x__assume)) ->
  (forall x__pointer_address:int.
  ((x__pointer_address = (linear_search__linear_search__x__assume).rec__linear_search__list__pointer_address) ->
  (forall x__is_null_pointer:bool.
  ((x__is_null_pointer = (linear_search__linear_search__x__assume).rec__linear_search__list__is_null_pointer) ->
  (((not (x__is_null_pointer = true)) ->
  dynamic_invariant4(rec__linear_search__list__pointer_value({
  rec__linear_search__list__is_null_pointer = x__is_null_pointer;
  rec__linear_search__list__pointer_address = x__pointer_address;
  rec__linear_search__list__pointer_value_abstr = us_close({
  us_split_fields1 = x__pointer_value }) }), true, false, true, true)) ->
  (forall i:int. ((i = 1) -> (dynamic_invariant1(i, true, false, true,
  true) -> ((notb(bool_eq3({ rec__linear_search__list__is_null_pointer =
  x__is_null_pointer; rec__linear_search__list__pointer_address =
  x__pointer_address; rec__linear_search__list__pointer_value_abstr =
  us_close({ us_split_fields1 = x__pointer_value }) },
  us_null_pointer1)) = true) -> (let usf = length({
  rec__linear_search__list__is_null_pointer = x__is_null_pointer;
  rec__linear_search__list__pointer_address = x__pointer_address;
  rec__linear_search__list__pointer_value_abstr = us_close({
  us_split_fields1 = x__pointer_value }) }) : int in (let o = {
  rec__linear_search__list__is_null_pointer = x__is_null_pointer;
  rec__linear_search__list__pointer_address = x__pointer_address;
  rec__linear_search__list__pointer_value_abstr = us_close({
  us_split_fields1 = x__pointer_value }) } : us_rep in (let o1 = length(o)
  : int in ((dynamic_invariant2(o1, true, false, true, true) and
  (o1 = (if (bool_eq3(o,
  us_null_pointer1) = true) then 0 else (min(2147483646,
  length(((rec__linear_search__list__pointer_value(o)).us_split_fields1).rec__linear_search__list_cell__next)) + 1)))) ->
  (let o2 = (usf - o1) : int in (in_range1(o2) -> (in_range1((o2 + 1)) ->
  (i = ((usf - length({ rec__linear_search__list__is_null_pointer =
  x__is_null_pointer; rec__linear_search__list__pointer_address =
  x__pointer_address; rec__linear_search__list__pointer_value_abstr =
  us_close({ us_split_fields1 = x__pointer_value }) })) + 1))))))))))))))))))))))))
