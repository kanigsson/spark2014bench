(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__frame_condition__cell__value : natural;
rec__frame_condition__cell__max_left : natural;
rec__frame_condition__cell__max_right : natural
}

function us_split_fields_rec__frame_condition__cell__value__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__value

function us_split_fields_rec__frame_condition__cell__max_left__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__max_left

function us_split_fields_rec__frame_condition__cell__max_right__projection(a: us_split_fields) : natural =
  (a).rec__frame_condition__cell__max_right

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__frame_condition__cell__value) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__value)) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_left))) and
  (to_rep(((a).us_split_fields1).rec__frame_condition__cell__max_right) = to_rep(((b).us_split_fields1).rec__frame_condition__cell__max_right))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic frame_condition__cell__value__first__bit : int

logic frame_condition__cell__value__last__bit : int

logic frame_condition__cell__value__position : int

axiom frame_condition__cell__value__first__bit_axiom :
  (0 <= frame_condition__cell__value__first__bit)

axiom frame_condition__cell__value__last__bit_axiom :
  (frame_condition__cell__value__first__bit <  frame_condition__cell__value__last__bit)

axiom frame_condition__cell__value__position_axiom :
  (0 <= frame_condition__cell__value__position)

logic frame_condition__cell__max_left__first__bit : int

logic frame_condition__cell__max_left__last__bit : int

logic frame_condition__cell__max_left__position : int

axiom frame_condition__cell__max_left__first__bit_axiom :
  (0 <= frame_condition__cell__max_left__first__bit)

axiom frame_condition__cell__max_left__last__bit_axiom :
  (frame_condition__cell__max_left__first__bit <  frame_condition__cell__max_left__last__bit)

axiom frame_condition__cell__max_left__position_axiom :
  (0 <= frame_condition__cell__max_left__position)

logic frame_condition__cell__max_right__first__bit : int

logic frame_condition__cell__max_right__last__bit : int

logic frame_condition__cell__max_right__position : int

axiom frame_condition__cell__max_right__first__bit_axiom :
  (0 <= frame_condition__cell__max_right__first__bit)

axiom frame_condition__cell__max_right__last__bit_axiom :
  (frame_condition__cell__max_right__first__bit <  frame_condition__cell__max_right__last__bit)

axiom frame_condition__cell__max_right__position_axiom :
  (0 <= frame_condition__cell__max_right__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type cell__ref = { cell__content : us_rep
}

function cell__ref_cell__content__projection(a: cell__ref) : us_rep =
  (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq5((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic a__first : integer

logic a__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type cell_array__ref = { cell_array__content : us_t
}

function cell_array__ref_cell_array__content__projection(a: cell_array__ref) : us_t =
  (a).cell_array__content

logic c164b : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic not_kind : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic first2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic last2 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic c166b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic c198b : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic c201b : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic not_kind1 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic first3 : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic last3 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c203b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

logic c235b : int

logic attr__ATTRIBUTE_ADDRESS20 : int

type max_kind

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : max_kind, max_kind -> bool

logic dummy5 : max_kind

type max_kind__ref = { max_kind__content : max_kind
}

function max_kind__ref_max_kind__content__projection(a: max_kind__ref) : max_kind =
  (a).max_kind__content

predicate dynamic_invariant2(temp___expr_258: int, temp___is_init_254: bool,
  temp___skip_constant_255: bool, temp___do_toplevel_256: bool,
  temp___do_typ_inv_257: bool) = (((temp___is_init_254 = true) or
  (0 <= 1)) -> in_range4(temp___expr_258))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant4(temp___expr_173: us_t, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = ((not (temp___skip_constant_170 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_173),
  last1(temp___expr_173)))

axiom not_kind__def_axiom : (not_kind = 1)

axiom first__def_axiom :
  (first2 = (if true then to_rep1(a__first) else to_rep1(a__last)))

axiom last__def_axiom :
  (last2 = (if true then to_rep1(a__last) else to_rep1(a__first)))

axiom c164b__def_axiom : (c164b = 0)

axiom c166b__def_axiom : (c166b = 0)

axiom c198b__def_axiom : (c198b = 0)

axiom not_kind__def_axiom1 : (not_kind1 = 0)

axiom first__def_axiom1 :
  (first3 = (if (1 = 0) then to_rep1(a__first) else to_rep1(a__last)))

axiom last__def_axiom1 :
  (last3 = (if (1 = 0) then to_rep1(a__last) else to_rep1(a__first)))

axiom c201b__def_axiom : (c201b = 1)

axiom c203b__def_axiom : (c203b = 1)

axiom c235b__def_axiom : (c235b = 1)

 (* File "frame_condition.ads", line 24, characters 0-0 *)
goal defqtvc :
  (forall a:(int,us_rep) farray.
  (forall a1:(int,us_rep) farray. ((a1 = a) -> (dynamic_property(1,
  2147483647, to_rep1(a__first), to_rep1(a__last)) ->
  (forall a2:(int,us_rep) farray.
  ((exists o:int. ((to_rep1(a__last) = o) and
   (exists o1:int. ((to_rep1(a__first) = o1) and
   (exists spark__branch:bool. ((spark__branch = (if (length(o1,
   o) = 0) then true else false)) and
   (if (spark__branch = true) then (a2 = a) else (dynamic_invariant2(c164b,
   true, false, true, true) and
   (exists spark__branch1:bool. exists a3:(int,us_rep) farray.
   ((dynamic_invariant2(not_kind, true, false, true, true) and
   (exists frame_condition__update_max_3__B165b__first__assume:int.
   ((exists o2:int. ((to_rep1(a__first) = o2) and
    ((frame_condition__update_max_3__B165b__first__assume = o2) and
    in_range3(o2)))) and
   ((frame_condition__update_max_3__B165b__first__assume = first2) and
   (dynamic_invariant1(first2, true, false, true, true) and
   (exists frame_condition__update_max_3__B165b__last__assume:int.
   ((exists o2:int. ((to_rep1(a__last) = o2) and
    ((frame_condition__update_max_3__B165b__last__assume = o2) and
    in_range3(o2)))) and
   ((frame_condition__update_max_3__B165b__last__assume = last2) and
   (dynamic_invariant1(last2, true, false, true, true) and
   (exists k:int. ((k = first2) and (dynamic_invariant1(k, true, false, true,
   true) and
   (exists max:int. ((max = 0) and (dynamic_invariant(max, true, false, true,
   true) and
   (exists temp___loop_entry_300:(int,us_rep) farray.
   ((temp___loop_entry_300 = a) and
   (exists spark__branch2:bool. exists max1:int.
   ((((to_rep1(a__first) <= k) and (k <= to_rep1(a__last))) and
   (exists o2:int.
   ((to_rep((((a[k])).us_split_fields1).rec__frame_condition__cell__value) = o2) and
   ((spark__branch2 = (if (max <  o2) then true else false)) and
   (if (spark__branch2 = true) then (((to_rep1(a__first) <= k) and
   (k <= to_rep1(a__last))) and
   (exists o3:int.
   ((to_rep((((a[k])).us_split_fields1).rec__frame_condition__cell__value) = o3) and
   (max1 = o3)))) else (max1 = max)))))) and (dynamic_invariant2(c166b, true,
   false, true, true) and
   (exists c167b:int. ((c167b = k) and (dynamic_invariant1(c167b, true,
   false, true, true) and
   (exists c168b:int. ((c168b = max1) and (dynamic_invariant(c168b, true,
   false, true, true) and
   (exists spark__branch3:bool. exists a4:(int,us_rep) farray.
   (((spark__branch3 = (if true then true else false)) and
   (if (spark__branch3 = true) then (let q_ = ((a[c167b])).us_split_fields1
   : us_split_fields in
   (exists o2:natural. ((to_rep(o2) = c168b) and
   (((to_rep1(a__first) <= c167b) and (c167b <= to_rep1(a__last))) and
   (a4 = (a[c167b <- { us_split_fields1 = {
   rec__frame_condition__cell__value =
   (q_).rec__frame_condition__cell__value;
   rec__frame_condition__cell__max_left = o2;
   rec__frame_condition__cell__max_right =
   (q_).rec__frame_condition__cell__max_right } }])))))) else (let q_ =
   ((a[c167b])).us_split_fields1 : us_split_fields in
   (exists o2:natural. ((to_rep(o2) = c168b) and
   (((to_rep1(a__first) <= c167b) and (c167b <= to_rep1(a__last))) and
   (a4 = (a[c167b <- { us_split_fields1 = {
   rec__frame_condition__cell__value =
   (q_).rec__frame_condition__cell__value;
   rec__frame_condition__cell__max_left =
   (q_).rec__frame_condition__cell__max_left;
   rec__frame_condition__cell__max_right = o2 } }])))))))) and
   (exists o2:int. ((to_rep1(a__last) = o2) and
   (exists o3:int. ((to_rep1(a__first) = o3) and
   (exists spark__branch4:bool. exists k1:int. exists max2:int.
   exists c167b1:int. exists c168b1:int. ((((to_rep1(a__first) <= k1) and
   (k1 <= to_rep1(a__last))) and
   (((forall i:int. (((first2 <= i) and (i <= k1)) ->
     (to_rep((((a3[i])).us_split_fields1).rec__frame_condition__cell__value) <= max2))) and
   (forall i:int. (((k1 <= i) and (i <= first2)) ->
   (to_rep((((a3[i])).us_split_fields1).rec__frame_condition__cell__value) <= max2)))) and
   (forall i:int. (((to_rep1(a__first) <= i) and (i <= k1)) ->
   (forall j:int. (((i <= j) and (j <= k1)) ->
   (to_rep((((a3[i])).us_split_fields1).rec__frame_condition__cell__value) <= to_rep((((a3[j])).us_split_fields1).rec__frame_condition__cell__max_left)))))))) and
   ((((((forall temp___294:int. (((to_rep1(a__first) <= temp___294) and
        (temp___294 <= to_rep1(a__last))) ->
        ((((a3[temp___294])).us_split_fields1).rec__frame_condition__cell__value = (((a[temp___294])).us_split_fields1).rec__frame_condition__cell__value))) and
   dynamic_invariant1(c167b1, true, true, true, true)) and
   dynamic_invariant1(k1, true, true, true, true)) and
   dynamic_invariant(c168b1, true, true, true, true)) and
   dynamic_invariant(max2, true, true, true, true)) and ((k1 = last2) and
   (spark__branch1 = spark__branch4))))))))))))))))))))))))))))))))))))) and
   (dynamic_invariant2(c201b, true, false, true, true) and
   (dynamic_invariant2(not_kind1, true, false, true, true) and
   (exists frame_condition__update_max_3__B202b__first__assume:int.
   ((if (1 = 0) then (exists o2:int. ((to_rep1(a__first) = o2) and
                     ((frame_condition__update_max_3__B202b__first__assume = o2) and
                     in_range3(o2)))) else (exists o2:int.
                                           ((to_rep1(a__last) = o2) and
                                           ((frame_condition__update_max_3__B202b__first__assume = o2) and
                                           in_range3(o2))))) and
   ((frame_condition__update_max_3__B202b__first__assume = first3) and
   (dynamic_invariant1(first3, true, false, true, true) and
   (exists frame_condition__update_max_3__B202b__last__assume:int.
   ((if (1 = 0) then (exists o2:int. ((to_rep1(a__last) = o2) and
                     ((frame_condition__update_max_3__B202b__last__assume = o2) and
                     in_range3(o2)))) else (exists o2:int.
                                           ((to_rep1(a__first) = o2) and
                                           ((frame_condition__update_max_3__B202b__last__assume = o2) and
                                           in_range3(o2))))) and
   ((frame_condition__update_max_3__B202b__last__assume = last3) and
   (dynamic_invariant1(last3, true, false, true, true) and
   (exists k:int. ((k = first3) and (dynamic_invariant1(k, true, false, true,
   true) and
   (exists max:int. ((max = 0) and (dynamic_invariant(max, true, false, true,
   true) and
   (exists temp___loop_entry_315:(int,us_rep) farray.
   ((temp___loop_entry_315 = a3) and
   (exists spark__branch2:bool. exists max1:int.
   ((((to_rep1(a__first) <= k) and (k <= to_rep1(a__last))) and
   (exists o2:int.
   ((to_rep((((a3[k])).us_split_fields1).rec__frame_condition__cell__value) = o2) and
   ((spark__branch2 = (if (max <  o2) then true else false)) and
   (if (spark__branch2 = true) then (((to_rep1(a__first) <= k) and
   (k <= to_rep1(a__last))) and
   (exists o3:int.
   ((to_rep((((a3[k])).us_split_fields1).rec__frame_condition__cell__value) = o3) and
   (max1 = o3)))) else (max1 = max)))))) and (dynamic_invariant2(c203b, true,
   false, true, true) and
   (exists c204b:int. ((c204b = k) and (dynamic_invariant1(c204b, true,
   false, true, true) and
   (exists c205b:int. ((c205b = max1) and (dynamic_invariant(c205b, true,
   false, true, true) and
   (exists spark__branch3:bool. exists a4:(int,us_rep) farray.
   (((spark__branch3 = (if (1 = 0) then true else false)) and
   (if (spark__branch3 = true) then (let q_ = ((a3[c204b])).us_split_fields1
   : us_split_fields in
   (exists o2:natural. ((to_rep(o2) = c205b) and
   (((to_rep1(a__first) <= c204b) and (c204b <= to_rep1(a__last))) and
   (a4 = (a3[c204b <- { us_split_fields1 = {
   rec__frame_condition__cell__value =
   (q_).rec__frame_condition__cell__value;
   rec__frame_condition__cell__max_left = o2;
   rec__frame_condition__cell__max_right =
   (q_).rec__frame_condition__cell__max_right } }])))))) else (let q_ =
   ((a3[c204b])).us_split_fields1 : us_split_fields in
   (exists o2:natural. ((to_rep(o2) = c205b) and
   (((to_rep1(a__first) <= c204b) and (c204b <= to_rep1(a__last))) and
   (a4 = (a3[c204b <- { us_split_fields1 = {
   rec__frame_condition__cell__value =
   (q_).rec__frame_condition__cell__value;
   rec__frame_condition__cell__max_left =
   (q_).rec__frame_condition__cell__max_left;
   rec__frame_condition__cell__max_right = o2 } }])))))))) and
   (exists o2:int. ((to_rep1(a__last) = o2) and
   (exists o3:int. ((to_rep1(a__first) = o3) and
   (exists k1:int. exists max2:int. exists c204b1:int. exists c205b1:int.
   ((((to_rep1(a__first) <= k1) and (k1 <= to_rep1(a__last))) and
   (((forall i:int. (((first3 <= i) and (i <= k1)) ->
     (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__value) <= max2))) and
   (forall i:int. (((k1 <= i) and (i <= first3)) ->
   (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__value) <= max2)))) and
   ((forall i:int. (((k1 <= i) and (i <= to_rep1(a__last))) ->
    (forall j:int. (((i <= j) and (j <= to_rep1(a__last))) ->
    (to_rep((((a2[j])).us_split_fields1).rec__frame_condition__cell__value) <= to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__max_right)))))) and
   (forall i:int. (((to_rep1(a__first) <= i) and (i <= to_rep1(a__last))) ->
   (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__max_left) = to_rep((((temp___loop_entry_315[i])).us_split_fields1).rec__frame_condition__cell__max_left))))))) and
   (((((dynamic_invariant1(k1, true, true, true, true) and
   (forall temp___310:int. (((to_rep1(a__first) <= temp___310) and
   (temp___310 <= to_rep1(a__last))) ->
   ((((a2[temp___310])).us_split_fields1).rec__frame_condition__cell__value = (((a3[temp___310])).us_split_fields1).rec__frame_condition__cell__value)))) and
   dynamic_invariant(c205b1, true, true, true, true)) and
   dynamic_invariant(max2, true, true, true, true)) and
   dynamic_invariant1(c204b1, true, true, true, true)) and (k1 = last3))))))))))))))))))))))))))))))))))))))))))))))) ->
  (forall i:int. (((to_rep1(a__first) <= i) and (i <= to_rep1(a__last))) ->
  (to_rep((((a2[i])).us_split_fields1).rec__frame_condition__cell__value) = to_rep((((a1[i])).us_split_fields1).rec__frame_condition__cell__value))))))))))
