(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

logic is_even : int -> bool

logic is_even__function_guard : bool, int -> prop

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom is_even__def_axiom :
  (forall k:int [is_even(k)]. ((is_even(k) = true) -> (mod1(k, 2) = 0)))

axiom is_even__def_axiom1 :
  (forall k:int [is_even(k)]. ((mod1(k, 2) = 0) -> (is_even(k) = true)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic summation : (int,integer) farray, int, int -> int

logic summation__function_guard : int, (int,integer) farray, int, int -> prop

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 7))

predicate in_range4(x: int) = ((0 <= x) and (x <= 7))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant3(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 7)) -> in_range4(temp___expr_162))

axiom summation__post_axiom :
  (forall a:(int,integer) farray.
  (forall start_pos:int. forall end_pos:int [summation(a, start_pos,
  end_pos)]. (((dynamic_invariant3(start_pos, true, true, true, true) and
  dynamic_invariant3(end_pos, true, true, true, true)) and
  (start_pos <= end_pos)) -> ((start_pos = end_pos) -> (summation(a,
  start_pos, end_pos) = to_rep((a[start_pos])))))))

axiom summation__post_axiom1 :
  (forall a:(int,integer) farray.
  (forall start_pos:int. forall end_pos:int [summation(a, start_pos,
  end_pos)]. (((dynamic_invariant3(start_pos, true, true, true, true) and
  dynamic_invariant3(end_pos, true, true, true, true)) and
  (start_pos <= end_pos)) -> dynamic_invariant2(summation(a, start_pos,
  end_pos), true, false, true, true))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic a_old : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS5 : int

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "prefixsum_general.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall a:(int,integer) farray. forall output_space:int. forall left:int.
  forall right:int.
  (forall a1:(int,integer) farray. ((a1 = a) ->
  (dynamic_invariant1(output_space, false, false, true, true) ->
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (let temp___218 =
   to_rep((a[k])) : int in (((- 268435455) <= temp___218) and
   (temp___218 <= 268435455))))) ->
  (forall space:int. ((space = 1) -> (dynamic_invariant1(space, true, false,
  true, true) -> (dynamic_invariant(left, false, false, true, true) ->
  (dynamic_invariant(right, false, false, true, true) -> ((a = a_old) ->
  ((space <  8) ->
  (forall temp___loop_entry_207:(int,integer) farray.
  ((temp___loop_entry_207 = a) ->
  (forall temp___loop_entry_208:(int,integer) farray.
  ((temp___loop_entry_208 = a) ->
  (forall left1:int. ((left1 = (space - 1)) ->
  ((exists o:bool.
   (exists o1:bool.
   ((exists o2:bool.
    ((exists o3:bool.
     ((exists o4:bool.
      ((exists o5:bool. ((if (mod1(8,
       space) = 0) then (o5 = (if ((2 * space) <= 8) then true else false)) else (o5 = false)) and
       (if (o5 = true) then (let o6 = (left1 + space) : int in (let o7 =
       is_even(o6) : bool in (((o7 = true) <-> (mod1(o6, 2) = 0)) and
       (o4 = (if (o7 = true) then false else true))))) else (o4 = false)))) and
      (if (o4 = true) then (o3 = (if (left1 <  space) then true else false)) else (o3 = false)))) and
     (if (o3 = true) then (o2 = (if (mod1((left1 + 1),
     space) = 0) then true else false)) else (o2 = false)))) and
    (if (o2 = true) then (o1 = (if (forall k:int. (((0 <= k) and (k <= 7)) ->
                                   (let temp___206 = to_rep((a[k])) : int in
                                   (((-(268435455 * space)) <= temp___206) and
                                   (temp___206 <= (268435455 * space)))))) then true else false)) else (o1 = false)))) and
   (if (o1 = true) then (o = (if (forall k:int. (((0 <= k) and (k <= 7)) ->
                                 ((is_even(k) = true) ->
                                 (to_rep((a[k])) = to_rep((temp___loop_entry_207[k])))))) then true else false)) else (o = false))))) ->
  (forall a2:(int,integer) farray. forall space1:int. forall left2:int.
  forall right1:int. (((((((((mod1(8, space1) = 0) and
  ((2 * space1) <= 8)) and (not (is_even((left2 + space1)) = true))) and
  (left2 <  space1)) and (mod1((left2 + 1), space1) = 0)) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> (let temp___209 =
  to_rep((a2[k])) : int in (((-(268435455 * space1)) <= temp___209) and
  (temp___209 <= (268435455 * space1))))))) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((is_even(k) = true) ->
  (to_rep((a2[k])) = to_rep((temp___loop_entry_207[k]))))))) and
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((mod1((k + 1), space1) = 0) ->
  (to_rep((a2[k])) = summation(temp___loop_entry_208, ((k + 1) - space1),
  k)))))) -> (((dynamic_invariant1(space1, true, true, true, true) and
  dynamic_invariant(left2, false, true, true, true)) and
  dynamic_invariant(right1, false, true, true, true)) ->
  (forall temp___210:int. ((temp___210 = space1) -> (let o = (left2 + space1)
  : int in (in_range1(o) -> ((o <  8) ->
  (forall temp___loop_entry_194:(int,integer) farray.
  ((temp___loop_entry_194 = a2) ->
  (forall o1:bool.
  ((exists o2:bool.
   ((exists o3:bool.
    ((exists o4:bool.
     ((exists o5:bool.
      ((exists o6:bool.
       ((exists o7:bool. ((if ((left2 + space1) <  8) then (o7 = (if (mod1(8,
        space1) = 0) then true else false)) else (o7 = false)) and
        (if (o7 = true) then (o6 = (if ((2 * space1) <= 8) then true else false)) else (o6 = false)))) and
       (if (o6 = true) then (let o7 = (left2 + space1) : int in (let o8 =
       is_even(o7) : bool in (((o8 = true) <-> (mod1(o7, 2) = 0)) and
       (o5 = (if (o8 = true) then false else true))))) else (o5 = false)))) and
      (if (o5 = true) then (o4 = (if (mod1((left2 + 1),
      space1) = 0) then true else false)) else (o4 = false)))) and
     (if (o4 = true) then (o3 = (if (forall k:int. (((0 <= k) and
                                    (k <= 7)) ->
                                    (if (k <  left2) then (let temp___192 =
                                    to_rep((a2[k])) : int in
                                    (((-((268435455 * space1) * 2)) <= temp___192) and
                                    (temp___192 <= ((268435455 * space1) * 2)))) else (let temp___193 =
                                    to_rep((a2[k])) : int in
                                    (((-(268435455 * space1)) <= temp___193) and
                                    (temp___193 <= (268435455 * space1))))))) then true else false)) else (o3 = false)))) and
    (if (o3 = true) then (o2 = (if (forall k:int. (((0 <= k) and (k <= 7)) ->
                                   ((is_even(k) = true) ->
                                   (to_rep((a2[k])) = to_rep((temp___loop_entry_194[k])))))) then true else false)) else (o2 = false)))) and
   (if (o2 = true) then (o1 = (if (forall k:int. (((0 <= k) and (k <= 7)) ->
                                  (if ((k <  left2) and (mod1((k + 1),
                                  (space1 * 2)) = 0)) then (to_rep((a2[k])) = summation(a_old,
                                  ((k + 1) - (space1 * 2)),
                                  k)) else (((left2 <= k) and (mod1((k + 1),
                                  space1) = 0)) ->
                                  (to_rep((a2[k])) = summation(a_old,
                                  ((k + 1) - space1), k)))))) then true else false)) else (o1 = false)))) ->
  ((o1 = true) -> in_range4(left2)))))))))))))))))))))))))))))))))
