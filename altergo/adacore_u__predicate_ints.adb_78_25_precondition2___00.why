(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__predicate_ints__int__min : integer;
rec__predicate_ints__int__max : integer; rec__predicate_ints__int__value :
integer; rec__ext__ : us_private
}

function us_split_fields_rec__predicate_ints__int__min__projection(a: us_split_fields) : integer =
  (a).rec__predicate_ints__int__min

function us_split_fields_rec__predicate_ints__int__max__projection(a: us_split_fields) : integer =
  (a).rec__predicate_ints__int__max

function us_split_fields_rec__predicate_ints__int__value__projection(a: us_split_fields) : integer =
  (a).rec__predicate_ints__int__value

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_fields1).rec__predicate_ints__int__min) = to_rep(((b).us_split_fields1).rec__predicate_ints__int__min)) and
  (to_rep(((a).us_split_fields1).rec__predicate_ints__int__max) = to_rep(((b).us_split_fields1).rec__predicate_ints__int__max))) and
  (to_rep(((a).us_split_fields1).rec__predicate_ints__int__value) = to_rep(((b).us_split_fields1).rec__predicate_ints__int__value))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic predicate_ints__int__min__first__bit : int

logic predicate_ints__int__min__last__bit : int

logic predicate_ints__int__min__position : int

axiom predicate_ints__int__min__first__bit_axiom :
  (0 <= predicate_ints__int__min__first__bit)

axiom predicate_ints__int__min__last__bit_axiom :
  (predicate_ints__int__min__first__bit <  predicate_ints__int__min__last__bit)

axiom predicate_ints__int__min__position_axiom :
  (0 <= predicate_ints__int__min__position)

logic predicate_ints__int__max__first__bit : int

logic predicate_ints__int__max__last__bit : int

logic predicate_ints__int__max__position : int

axiom predicate_ints__int__max__first__bit_axiom :
  (0 <= predicate_ints__int__max__first__bit)

axiom predicate_ints__int__max__last__bit_axiom :
  (predicate_ints__int__max__first__bit <  predicate_ints__int__max__last__bit)

axiom predicate_ints__int__max__position_axiom :
  (0 <= predicate_ints__int__max__position)

logic predicate_ints__int__value__first__bit : int

logic predicate_ints__int__value__last__bit : int

logic predicate_ints__int__value__position : int

axiom predicate_ints__int__value__first__bit_axiom :
  (0 <= predicate_ints__int__value__first__bit)

axiom predicate_ints__int__value__last__bit_axiom :
  (predicate_ints__int__value__first__bit <  predicate_ints__int__value__last__bit)

axiom predicate_ints__int__value__position_axiom :
  (0 <= predicate_ints__int__value__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type int____ref = { int____content : us_rep
}

function int____ref_int____content__projection(a: int____ref) : us_rep =
  (a).int____content

predicate default_initial_assumption(temp___expr_167: us_rep,
  temp___skip_top_level_168: bool) = ((temp___expr_167).attr__tag = us_tag)

logic oadd : us_rep, us_rep -> us_rep

logic oadd__function_guard : us_rep, us_rep, us_rep -> prop

logic oadd1 : int, us_rep, us_rep -> us_rep

logic oadd__function_guard1 : us_rep, int, us_rep, us_rep -> prop

type us_split_fields2 = { rec__predicate_ints__approx_int__precision :
natural; rec__predicate_ints__int__min1 : integer;
rec__predicate_ints__int__max1 : integer; rec__predicate_ints__int__value1 :
integer; rec__ext__1 : us_private
}

function us_split_fields_rec__predicate_ints__approx_int__precision__projection(a: us_split_fields2) : natural =
  (a).rec__predicate_ints__approx_int__precision

function us_split_fields_rec__predicate_ints__int__min__2__projection(a: us_split_fields2) : integer =
  (a).rec__predicate_ints__int__min1

function us_split_fields_rec__predicate_ints__int__max__2__projection(a: us_split_fields2) : integer =
  (a).rec__predicate_ints__int__max1

function us_split_fields_rec__predicate_ints__int__value__2__projection(a: us_split_fields2) : integer =
  (a).rec__predicate_ints__int__value1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : natural, us_private -> us_private

logic extract__predicate_ints__approx_int__precision : us_private -> natural

axiom extract__predicate_ints__approx_int__precision__conv :
  (forall predicate_ints__approx_int__precision:natural.
  (forall rec__ext__2:us_private.
  (extract__predicate_ints__approx_int__precision(hide_ext__(predicate_ints__approx_int__precision,
  rec__ext__2)) = predicate_ints__approx_int__precision)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__predicate_ints__int__min =
  ((a).us_split_fields3).rec__predicate_ints__int__min1;
  rec__predicate_ints__int__max =
  ((a).us_split_fields3).rec__predicate_ints__int__max1;
  rec__predicate_ints__int__value =
  ((a).us_split_fields3).rec__predicate_ints__int__value1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__predicate_ints__approx_int__precision,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__predicate_ints__approx_int__precision =
  extract__predicate_ints__approx_int__precision(((r).us_split_fields1).rec__ext__);
  rec__predicate_ints__int__min1 =
  ((r).us_split_fields1).rec__predicate_ints__int__min;
  rec__predicate_ints__int__max1 =
  ((r).us_split_fields1).rec__predicate_ints__int__max;
  rec__predicate_ints__int__value1 =
  ((r).us_split_fields1).rec__predicate_ints__int__value; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq3(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep1(((a).us_split_fields3).rec__predicate_ints__approx_int__precision) = to_rep1(((b).us_split_fields3).rec__predicate_ints__approx_int__precision)) and
  (to_rep(((a).us_split_fields3).rec__predicate_ints__int__min1) = to_rep(((b).us_split_fields3).rec__predicate_ints__int__min1))) and
  ((to_rep(((a).us_split_fields3).rec__predicate_ints__int__max1) = to_rep(((b).us_split_fields3).rec__predicate_ints__int__max1)) and
  (to_rep(((a).us_split_fields3).rec__predicate_ints__int__value1) = to_rep(((b).us_split_fields3).rec__predicate_ints__int__value1)))) then true else false)

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic predicate_ints__approx_int__precision__first__bit : int

logic predicate_ints__approx_int__precision__last__bit : int

logic predicate_ints__approx_int__precision__position : int

axiom predicate_ints__approx_int__precision__first__bit_axiom :
  (0 <= predicate_ints__approx_int__precision__first__bit)

axiom predicate_ints__approx_int__precision__last__bit_axiom :
  (predicate_ints__approx_int__precision__first__bit <  predicate_ints__approx_int__precision__last__bit)

axiom predicate_ints__approx_int__precision__position_axiom :
  (0 <= predicate_ints__approx_int__precision__position)

logic predicate_ints__int__min__first__bit1 : int

logic predicate_ints__int__min__last__bit1 : int

logic predicate_ints__int__min__position1 : int

axiom predicate_ints__int__min__first__bit_axiom1 :
  (0 <= predicate_ints__int__min__first__bit1)

axiom predicate_ints__int__min__last__bit_axiom1 :
  (predicate_ints__int__min__first__bit1 <  predicate_ints__int__min__last__bit1)

axiom predicate_ints__int__min__position_axiom1 :
  (0 <= predicate_ints__int__min__position1)

logic predicate_ints__int__max__first__bit1 : int

logic predicate_ints__int__max__last__bit1 : int

logic predicate_ints__int__max__position1 : int

axiom predicate_ints__int__max__first__bit_axiom1 :
  (0 <= predicate_ints__int__max__first__bit1)

axiom predicate_ints__int__max__last__bit_axiom1 :
  (predicate_ints__int__max__first__bit1 <  predicate_ints__int__max__last__bit1)

axiom predicate_ints__int__max__position_axiom1 :
  (0 <= predicate_ints__int__max__position1)

logic predicate_ints__int__value__first__bit1 : int

logic predicate_ints__int__value__last__bit1 : int

logic predicate_ints__int__value__position1 : int

axiom predicate_ints__int__value__first__bit_axiom1 :
  (0 <= predicate_ints__int__value__first__bit1)

axiom predicate_ints__int__value__last__bit_axiom1 :
  (predicate_ints__int__value__first__bit1 <  predicate_ints__int__value__last__bit1)

axiom predicate_ints__int__value__position_axiom1 :
  (0 <= predicate_ints__int__value__position1)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type approx_int__ref = { approx_int__content : us_rep1
}

function approx_int__ref_approx_int__content__projection(a: approx_int__ref) : us_rep1 =
  (a).approx_int__content

logic oadd2 : us_rep1, us_rep1 -> us_rep1

logic oadd__function_guard2 : us_rep1, us_rep1, us_rep1 -> prop

logic oadd3 : int, us_rep1, us_rep1 -> us_rep1

logic oadd__function_guard3 : us_rep1, int, us_rep1, us_rep1 -> prop

axiom oadd__post_axiom :
  (forall arg1:us_rep. forall arg2:us_rep [oadd(arg1, arg2)].
  (((to_rep(((arg1).us_split_fields1).rec__predicate_ints__int__min) = to_rep(((arg2).us_split_fields1).rec__predicate_ints__int__min)) and
  (to_rep(((arg1).us_split_fields1).rec__predicate_ints__int__max) = to_rep(((arg2).us_split_fields1).rec__predicate_ints__int__max))) ->
  (let result = oadd(arg1, arg2) : us_rep in (oadd__function_guard(result,
  arg1, arg2) -> ((result).attr__tag = us_tag)))))

axiom oadd__post__dispatch_axiom :
  (forall attr__tag2:int.
  (forall arg1:us_rep. forall arg2:us_rep [oadd1(attr__tag2, arg1, arg2)].
  (((to_rep(((arg1).us_split_fields1).rec__predicate_ints__int__min) = to_rep(((arg2).us_split_fields1).rec__predicate_ints__int__min)) and
  (to_rep(((arg1).us_split_fields1).rec__predicate_ints__int__max) = to_rep(((arg2).us_split_fields1).rec__predicate_ints__int__max))) ->
  (let result = oadd1(attr__tag2, arg1, arg2) : us_rep in
  (oadd__function_guard1(result, attr__tag2, arg1, arg2) ->
  ((result).attr__tag = attr__tag2))))))

axiom predicate_ints__int__compat_axiom :
  (forall arg1:us_rep. forall arg2:us_rep [oadd1(us_tag, arg1, arg2)].
  (oadd__function_guard1(oadd1(us_tag, arg1, arg2), us_tag, arg1, arg2) ->
  (forall arg11:us_rep. forall arg21:us_rep. oadd__function_guard(oadd(arg11,
  arg21), arg11, arg21))))

axiom predicate_ints__int__compat_axiom1 :
  (forall arg1:us_rep. forall arg2:us_rep [oadd1(us_tag, arg1, arg2)].
  (oadd__function_guard1(oadd1(us_tag, arg1, arg2), us_tag, arg1, arg2) ->
  (oadd(arg1, arg2) = oadd1(us_tag, arg1, arg2))))

axiom predicate_ints__approx_int__compat_axiom :
  (forall arg1:us_rep. forall arg2:us_rep [oadd1(us_tag1, arg1, arg2)].
  (oadd__function_guard1(oadd1(us_tag1, arg1, arg2), us_tag1, arg1, arg2) ->
  (forall arg11:us_rep. forall arg21:us_rep.
  oadd__function_guard2(oadd2(of_base(arg11), of_base(arg21)),
  of_base(arg11), of_base(arg21)))))

axiom predicate_ints__approx_int__compat_axiom1 :
  (forall arg1:us_rep. forall arg2:us_rep [oadd1(us_tag1, arg1, arg2)].
  (oadd__function_guard1(oadd1(us_tag1, arg1, arg2), us_tag1, arg1, arg2) ->
  (to_base(oadd2(of_base(arg1), of_base(arg2))) = oadd1(us_tag1, arg1,
  arg2))))

predicate default_initial_assumption1(temp___expr_196: us_rep1,
  temp___skip_top_level_197: bool) = ((temp___expr_196).attr__tag1 = us_tag1)

logic arg1 : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic arg2 : us_rep1

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

axiom oadd__post_axiom1 :
  (forall arg11:us_rep1. forall arg21:us_rep1 [oadd2(arg11, arg21)].
  (((to_rep(((arg11).us_split_fields3).rec__predicate_ints__int__min1) = to_rep(((arg21).us_split_fields3).rec__predicate_ints__int__min1)) and
  (to_rep(((arg11).us_split_fields3).rec__predicate_ints__int__max1) = to_rep(((arg21).us_split_fields3).rec__predicate_ints__int__max1))) ->
  (let result = oadd2(arg11, arg21) : us_rep1 in
  (oadd__function_guard2(result, arg11, arg21) ->
  ((result).attr__tag1 = us_tag1)))))

axiom oadd__post__dispatch_axiom1 :
  (forall attr__tag2:int.
  (forall arg11:us_rep1. forall arg21:us_rep1 [oadd3(attr__tag2, arg11,
  arg21)].
  (((to_rep(((arg11).us_split_fields3).rec__predicate_ints__int__min1) = to_rep(((arg21).us_split_fields3).rec__predicate_ints__int__min1)) and
  (to_rep(((arg11).us_split_fields3).rec__predicate_ints__int__max1) = to_rep(((arg21).us_split_fields3).rec__predicate_ints__int__max1))) ->
  (let result = oadd3(attr__tag2, arg11, arg21) : us_rep1 in
  (oadd__function_guard3(result, attr__tag2, arg11, arg21) ->
  ((result).attr__tag1 = attr__tag2))))))

axiom predicate_ints__approx_int__compat_axiom2 :
  (forall arg11:us_rep1. forall arg21:us_rep1 [oadd3(us_tag1, arg11, arg21)].
  (oadd__function_guard3(oadd3(us_tag1, arg11, arg21), us_tag1, arg11,
  arg21) ->
  (forall arg12:us_rep1. forall arg22:us_rep1.
  oadd__function_guard2(oadd2(arg12, arg22), arg12, arg22))))

axiom predicate_ints__approx_int__compat_axiom3 :
  (forall arg11:us_rep1. forall arg21:us_rep1 [oadd3(us_tag1, arg11, arg21)].
  (oadd__function_guard3(oadd3(us_tag1, arg11, arg21), us_tag1, arg11,
  arg21) -> (oadd2(arg11, arg21) = oadd3(us_tag1, arg11, arg21))))

 (* File "predicate_ints.ads", line 33, characters 0-0 *)
goal defqtvc :
  (((to_rep(((arg1).us_split_fields3).rec__predicate_ints__int__min1) = to_rep(((arg2).us_split_fields3).rec__predicate_ints__int__min1)) and
  (to_rep(((arg1).us_split_fields3).rec__predicate_ints__int__max1) = to_rep(((arg2).us_split_fields3).rec__predicate_ints__int__max1))) ->
  (to_rep(((to_base(arg1)).us_split_fields1).rec__predicate_ints__int__min) = to_rep(((to_base(arg2)).us_split_fields1).rec__predicate_ints__int__min)))
