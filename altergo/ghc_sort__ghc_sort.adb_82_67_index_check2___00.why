(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type int_array__ref = { int_array__content : us_t
}

function int_array__ref_int_array__content__projection(a: int_array__ref) : us_t =
  (a).int_array__content

logic s1 : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic s2 : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic r__first : integer

logic r__last : integer

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_invariant1(temp___expr_171: us_t, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((not (temp___skip_constant_168 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_171),
  last1(temp___expr_171))) and ((temp___do_toplevel_169 = true) ->
  ((temp___is_init_167 = true) -> (first1(temp___expr_171) = 1))))

predicate dynamic_predicate(temp___174: us_t) = (first1(temp___174) = 1)

type trS__ref = { trS__content : us_t
}

function trS__ref_trS__content__projection(a: trS__ref) : us_t =
  (a).trS__content

type t40b__ref = { t40b__content : us_t
}

function t40b__ref_t40b__content__projection(a: t40b__ref) : us_t =
  (a).t40b__content

predicate dynamic_invariant2(temp___expr_253: us_t, temp___is_init_249: bool,
  temp___skip_constant_250: bool, temp___do_toplevel_251: bool,
  temp___do_typ_inv_252: bool) = (((not (temp___skip_constant_250 = true)) ->
  (dynamic_property(1, (length(s1) + length(s2)), first1(temp___expr_253),
  last1(temp___expr_253)) and ((first1(temp___expr_253) = 1) and
  (last1(temp___expr_253) = (length(s1) + length(s2)))))) and
  ((temp___is_init_249 = true) -> (first1(temp___expr_253) = 1)))

predicate default_initial_assumption(temp___expr_257: us_t,
  temp___skip_top_level_258: bool) = ((first1(temp___expr_257) = 1) and
  (last1(temp___expr_257) = (length(s1) + length(s2))))

predicate dynamic_predicate1(temp___261: us_t) = (first1(temp___261) = 1)

predicate dynamic_predicate2(temp___263: us_t) = (first1(temp___263) = 1)

logic temp_____aggregate_def_495 : int, int, int -> us_t

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___497:int. forall temp___498:int. forall temp___499:int.
  (dynamic_invariant3(temp___497, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___498, temp___499) ->
  (first1(temp_____aggregate_def_495(temp___497, temp___498,
  temp___499)) = temp___498))))

axiom def_axiom1 :
  (forall temp___497:int. forall temp___498:int. forall temp___499:int.
  (dynamic_invariant3(temp___497, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___498, temp___499) ->
  (last1(temp_____aggregate_def_495(temp___497, temp___498,
  temp___499)) = temp___499))))

axiom def_axiom2 :
  (forall temp___497:int. forall temp___498:int. forall temp___499:int.
  (dynamic_invariant3(temp___497, true, true, true, true) ->
  (forall temp___500:int. ((to_array(temp_____aggregate_def_495(temp___497,
  temp___498, temp___499))[temp___500]) = rliteral))))

 (* File "ghc_sort.ads", line 36, characters 0-0 *)
goal defqtvc :
  (forall r:(int,integer) farray. (dynamic_invariant1(s1, true, false, true,
  true) -> (dynamic_invariant1(s2, true, false, true, true) ->
  ((((length(s1) <  (2147483647 - length(s2))) and
  (forall l:int. (((2 <= l) and (l <= last1(s1))) ->
  (to_rep((to_array(s1)[(l - 1)])) <= to_rep((to_array(s1)[l])))))) and
  (forall l:int. (((2 <= l) and (l <= last1(s2))) ->
  (to_rep((to_array(s2)[(l - 1)])) <= to_rep((to_array(s2)[l])))))) ->
  (forall j1:int. ((j1 = 1) -> (dynamic_invariant(j1, true, false, true,
  true) ->
  (forall j2:int. ((j2 = 1) -> (dynamic_invariant(j2, true, false, true,
  true) ->
  (forall j:int. ((j = 1) -> (dynamic_invariant(j, true, false, true,
  true) -> (default_initial_assumption(of_array(r, to_rep(r__first),
  to_rep(r__last)), false) -> ((dynamic_property(1,
  (length(s1) + length(s2)), to_rep(r__first), to_rep(r__last)) and
  ((to_rep(r__first) = 1) and
  (to_rep(r__last) = (length(s1) + length(s2))))) -> (let temp___501 =
  temp_____aggregate_def_495(0, 1, (length(s1) + length(s2))) : us_t in
  ((first1(temp___501) = 1) ->
  ((last1(temp___501) = (length(s1) + length(s2))) ->
  (dynamic_predicate2(temp___501) ->
  ((if (first1(temp___501) <= last1(temp___501)) then ((1 <= (length(s1) + length(s2))) and
  ((last1(temp___501) - first1(temp___501)) = ((length(s1) + length(s2)) - 1))) else ((length(s1) + length(s2)) <  1)) ->
  (let temp___504 = of_array(to_array(temp___501), first1(temp___501),
  last1(temp___501)) : us_t in (dynamic_predicate1(temp___504) ->
  ((if (first1(temp___504) <= last1(temp___504)) then ((to_rep(r__first) <= to_rep(r__last)) and
  ((last1(temp___504) - first1(temp___504)) = (to_rep(r__last) - to_rep(r__first)))) else (to_rep(r__last) <  to_rep(r__first))) ->
  (forall r1:(int,integer) farray. ((r1 = to_array(temp___504)) ->
  (forall j11:int. forall j21:int. forall j3:int.
  forall r2:(int,integer) farray.
  ((exists o:bool. ((if (andb((if (first1(s1) <= j1) then true else false),
   (if (j1 <= last1(s1)) then true else false)) = true) then (o = andb((if (first1(s2) <= j2) then true else false),
   (if (j2 <= last1(s2)) then true else false))) else (o = false)) and
   (if (o = true) then (in_range1((j1 + j2)) and
   (exists j12:int. exists j22:int. exists j4:int.
   exists r3:(int,integer) farray. (((j4 = ((j12 + j22) - 1)) and
   (((1 <  j4) ->
   (to_rep((r3[(j4 - 1)])) <= to_rep((to_array(s1)[j12])))) and
   (((1 <  j4) ->
   (to_rep((r3[(j4 - 1)])) <= to_rep((to_array(s2)[j22])))) and
   (forall l:int. (((2 <= l) and (l <= (j4 - 1))) ->
   (to_rep((r3[(l - 1)])) <= to_rep((r3[l])))))))) and
   ((andb((if ((dynamic_invariant(j22, true, true, true, true) and
   dynamic_invariant(j4, true, true, true, true)) and dynamic_invariant(j12,
   true, true, true, true)) then true else false),
   (if (((first1(s1) <= j12) and (j12 <= last1(s1))) and
   ((first1(s2) <= j22) and
   (j22 <= last1(s2)))) then true else false)) = true) and
   ((((first1(s2) <= j22) and (j22 <= last1(s2))) and
   (exists o1:int. ((to_rep((to_array(s2)[j22])) = o1) and
   (((first1(s1) <= j12) and (j12 <= last1(s1))) and
   (exists o2:int. ((to_rep((to_array(s1)[j12])) = o2) and
   (exists spark__branch:bool.
   ((spark__branch = (if (o2 <  o1) then true else false)) and
   (if (spark__branch = true) then ((((first1(s1) <= j12) and
   (j12 <= last1(s1))) and
   (exists o3:int. ((to_rep((to_array(s1)[j12])) = o3) and
   (exists o4:integer. ((to_rep(o4) = o3) and (((to_rep(r__first) <= j4) and
   (j4 <= to_rep(r__last))) and ((to_rep(r__first) = 1) and
   ((r2 = (r3[j4 <- o4])) and (let o5 = (j12 + 1) : int in (in_range1(o5) and
   (j11 = o5))))))))))) and (j21 = j22)) else ((((first1(s2) <= j22) and
   (j22 <= last1(s2))) and
   (exists o3:int. ((to_rep((to_array(s2)[j22])) = o3) and
   (exists o4:integer. ((to_rep(o4) = o3) and (((to_rep(r__first) <= j4) and
   (j4 <= to_rep(r__last))) and ((to_rep(r__first) = 1) and
   ((r2 = (r3[j4 <- o4])) and (let o5 = (j22 + 1) : int in (in_range1(o5) and
   (j21 = o5))))))))))) and (j11 = j12))))))))))) and (let o1 = (j4 + 1)
   : int in (in_range1(o1) and ((j3 = o1) and
   (exists o2:bool. ((if (andb((if (first1(s1) <= j11) then true else false),
   (if (j11 <= last1(s1)) then true else false)) = true) then (o2 = andb((if (first1(s2) <= j21) then true else false),
   (if (j21 <= last1(s2)) then true else false))) else (o2 = false)) and
   (not (o2 = true)))))))))))) else ((((j11 = j1) and (j21 = j2)) and
   (j3 = j)) and (r2 = r1))))) ->
  ((andb((if (first1(s1) <= j11) then true else false),
  (if (j11 <= last1(s1)) then true else false)) = true) ->
  (in_range1((j11 + j21)) -> ((1 <  j3) -> (first1(s1) <= j11)))))))))))))))))))))))))))))))
