(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) ->
  (to_rep((a[temp___idx_155])) = to_rep((b[((b__first - a__first) + temp___idx_155)]))))))))

logic a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic c : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

logic d : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp_____aggregate_def_242 : (int,integer) farray, int,
  int -> (int,integer) farray

logic temp_____aggregate_def_251 : (int,integer) farray, int, int, int,
  int -> (int,integer) farray

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 42)

axiom def_axiom :
  (forall temp___244:(int,integer) farray.
  (forall temp___245:int. forall temp___246:int.
  ((dynamic_invariant(temp___245, true, true, true, true) and
  dynamic_invariant(temp___246, true, true, true, true)) ->
  (forall temp___247:int. ((temp___247 = temp___245) ->
  ((temp_____aggregate_def_242(temp___244, temp___245,
  temp___246)[temp___247]) = rliteral))))))

axiom def_axiom1 :
  (forall temp___244:(int,integer) farray.
  (forall temp___245:int. forall temp___246:int.
  ((dynamic_invariant(temp___245, true, true, true, true) and
  dynamic_invariant(temp___246, true, true, true, true)) ->
  (forall temp___247:int. ((not (temp___247 = temp___245)) ->
  ((temp_____aggregate_def_242(temp___244, temp___245,
  temp___246)[temp___247]) = (temp___244[temp___247])))))))

logic rliteral1 : integer

axiom rliteral_axiom1 : (integerqtint(rliteral1) = 23)

axiom def_axiom2 :
  (forall temp___253:(int,integer) farray.
  (forall temp___254:int. forall temp___255:int. forall temp___256:int.
  forall temp___257:int. ((dynamic_invariant(temp___254, true, true, true,
  true) and ((dynamic_invariant(temp___255, true, true, true, true) and
  dynamic_invariant(temp___256, true, true, true, true)) and
  dynamic_invariant(temp___257, true, true, true, true))) ->
  (forall temp___258:int. ((temp___258 = temp___256) ->
  ((temp_____aggregate_def_251(temp___253, temp___254, temp___255,
  temp___256, temp___257)[temp___258]) = rliteral))))))

axiom def_axiom3 :
  (forall temp___253:(int,integer) farray.
  (forall temp___254:int. forall temp___255:int. forall temp___256:int.
  forall temp___257:int. ((dynamic_invariant(temp___254, true, true, true,
  true) and ((dynamic_invariant(temp___255, true, true, true, true) and
  dynamic_invariant(temp___256, true, true, true, true)) and
  dynamic_invariant(temp___257, true, true, true, true))) ->
  (forall temp___258:int. ((not (temp___258 = temp___256)) ->
  ((temp___258 = temp___254) -> ((temp_____aggregate_def_251(temp___253,
  temp___254, temp___255, temp___256,
  temp___257)[temp___258]) = rliteral1)))))))

axiom def_axiom4 :
  (forall temp___253:(int,integer) farray.
  (forall temp___254:int. forall temp___255:int. forall temp___256:int.
  forall temp___257:int. ((dynamic_invariant(temp___254, true, true, true,
  true) and ((dynamic_invariant(temp___255, true, true, true, true) and
  dynamic_invariant(temp___256, true, true, true, true)) and
  dynamic_invariant(temp___257, true, true, true, true))) ->
  (forall temp___258:int. ((not (temp___258 = temp___256)) ->
  ((not (temp___258 = temp___254)) ->
  ((temp_____aggregate_def_251(temp___253, temp___254, temp___255,
  temp___256, temp___257)[temp___258]) = (temp___253[temp___258]))))))))

 (* File "simple_arrays.adb", line 108, characters 0-0 *)
goal defqtvc : ((((bool_eq2(b, (- 2147483648), 2147483647,
  temp_____aggregate_def_242(a, 23, 42), (- 2147483648),
  2147483647) = true) and (bool_eq2(c, (- 2147483648), 2147483647,
  temp_____aggregate_def_251(a, 42, 23, 23, 42), (- 2147483648),
  2147483647) = true)) and ((bool_eq2(d, (- 2147483648), 2147483647, b,
  (- 2147483648), 2147483647) = true) or (bool_eq2(d, (- 2147483648),
  2147483647, c, (- 2147483648), 2147483647) = true))) ->
  (forall o:int. ((to_rep((d[23])) = o) ->
  (forall simple_arrays__array_axiom_transitivity_worse__result:int.
  ((simple_arrays__array_axiom_transitivity_worse__result = o) ->
  (simple_arrays__array_axiom_transitivity_worse__result = 42))))))
