(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__test_constrained__r__b : bool
}

function us_split_discrs_rec__test_constrained__r__b__projection(a: us_split_discrs) : bool =
  (a).rec__test_constrained__r__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__test_constrained__r__x : integer
}

function us_split_fields_rec__test_constrained__r__x__projection(a: us_split_fields) : integer =
  (a).rec__test_constrained__r__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_discrs1).rec__test_constrained__r__b) = to_int(((b).us_split_discrs1).rec__test_constrained__r__b)) and
  (to_rep(((a).us_split_fields1).rec__test_constrained__r__x) = to_rep(((b).us_split_fields1).rec__test_constrained__r__x))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_constrained__r__b__first__bit : int

logic test_constrained__r__b__last__bit : int

logic test_constrained__r__b__position : int

axiom test_constrained__r__b__first__bit_axiom :
  (0 <= test_constrained__r__b__first__bit)

axiom test_constrained__r__b__last__bit_axiom :
  (test_constrained__r__b__first__bit <  test_constrained__r__b__last__bit)

axiom test_constrained__r__b__position_axiom :
  (0 <= test_constrained__r__b__position)

logic test_constrained__r__x__first__bit : int

logic test_constrained__r__x__last__bit : int

logic test_constrained__r__x__position : int

axiom test_constrained__r__x__first__bit_axiom :
  (0 <= test_constrained__r__x__first__bit)

axiom test_constrained__r__x__last__bit_axiom :
  (test_constrained__r__x__first__bit <  test_constrained__r__x__last__bit)

axiom test_constrained__r__x__position_axiom :
  (0 <= test_constrained__r__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type r__ref = { r__content : us_rep
}

function r__ref_r__content__projection(a: r__ref) : us_rep = (a).r__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic x__pointer_address : int

logic x__is_null_pointer : bool

logic attr__ATTRIBUTE_ADDRESS : int

type tr_aD1

logic tr_aD1qtint : tr_aD1 -> int

axiom tr_aD1qtaxiom : (forall i:tr_aD1. (1 <= tr_aD1qtint(i)))

axiom tr_aD1qtaxiom1 : (forall i:tr_aD1. (tr_aD1qtint(i) <= 10))

predicate in_range2(x: int) = ((1 <= x) and (x <= 10))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tr_aD1, tr_aD1 -> bool

logic dummy2 : tr_aD1

type tr_aD1__ref = { tr_aD1__content : tr_aD1
}

function tr_aD1__ref_tr_aD1__content__projection(a: tr_aD1__ref) : tr_aD1 =
  (a).tr_aD1__content

predicate default_initial_assumption(temp___expr_201: (int,us_rep) farray,
  temp___skip_top_level_202: bool) =
  (forall temp___203:int. (((1 <= temp___203) and (temp___203 <= 10)) ->
  (((((temp___expr_201[temp___203])).us_split_discrs1).rec__test_constrained__r__b = of_int(1)) and
  (to_rep((((temp___expr_201[temp___203])).us_split_fields1).rec__test_constrained__r__x) = 0))))

type us_rep1 = { rec__test_constrained__r_a_acc__is_null_pointer : bool;
rec__test_constrained__r_a_acc__pointer_address : int;
rec__test_constrained__r_a_acc__pointer_value : (int,us_rep) farray
}

function us_rep_rec__test_constrained__r_a_acc__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__test_constrained__r_a_acc__is_null_pointer

function us_rep_rec__test_constrained__r_a_acc__pointer_address__projection(a: us_rep1) : int =
  (a).rec__test_constrained__r_a_acc__pointer_address

function us_rep_rec__test_constrained__r_a_acc__pointer_value__projection(a: us_rep1) : (int,us_rep) farray =
  (a).rec__test_constrained__r_a_acc__pointer_value

type us_rep__ref = { us_rep__content : us_rep1
}

function us_rep__ref___rep__content__2__projection(a: us_rep__ref) : us_rep1 =
  (a).us_rep__content

function bool_eq6(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__test_constrained__r_a_acc__is_null_pointer = (b).rec__test_constrained__r_a_acc__is_null_pointer) and
  ((not ((a).rec__test_constrained__r_a_acc__is_null_pointer = true)) ->
  (((a).rec__test_constrained__r_a_acc__pointer_address = (b).rec__test_constrained__r_a_acc__pointer_address) and
  ((a).rec__test_constrained__r_a_acc__pointer_value = (b).rec__test_constrained__r_a_acc__pointer_value)))) then true else false)

predicate rec__test_constrained__r_a_acc__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__test_constrained__r_a_acc__is_null_pointer = true))

logic us_null_pointer : us_rep1

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__test_constrained__r_a_acc__is_null_pointer = true)

logic dummy3 : us_rep1

type r_a_acc__ref = { r_a_acc__content : us_rep1
}

function r_a_acc__ref_r_a_acc__content__projection(a: r_a_acc__ref) : us_rep1 =
  (a).r_a_acc__content

predicate default_initial_assumption1(temp___expr_220: us_rep1,
  temp___skip_top_level_221: bool) =
  ((temp___expr_220).rec__test_constrained__r_a_acc__is_null_pointer = true)

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate default_initial_assumption2(temp___expr_182: us_rep,
  temp___skip_top_level_183: bool) =
  ((((temp___expr_182).us_split_discrs1).rec__test_constrained__r__b = of_int(1)) and
  (to_rep(((temp___expr_182).us_split_fields1).rec__test_constrained__r__x) = 0))

 (* File "test_constrained.adb", line 42, characters 0-0 *)
goal defqtvc :
  (forall us_next_pointer_address:int.
  (forall temp___alloc_289:us_rep1.
  (((not ((temp___alloc_289).rec__test_constrained__r_a_acc__is_null_pointer = true)) and
  ((temp___alloc_289).rec__test_constrained__r_a_acc__pointer_address = us_next_pointer_address)) ->
  (forall usf:(int,us_rep) farray. (default_initial_assumption(usf, false) ->
  (((temp___alloc_289).rec__test_constrained__r_a_acc__pointer_value = usf) ->
  (forall x__pointer_value:(int,us_rep) farray.
  ((x__pointer_value = (temp___alloc_289).rec__test_constrained__r_a_acc__pointer_value) ->
  ((x__pointer_address = (temp___alloc_289).rec__test_constrained__r_a_acc__pointer_address) ->
  (not (x__is_null_pointer = (temp___alloc_289).rec__test_constrained__r_a_acc__is_null_pointer)))))))))))
