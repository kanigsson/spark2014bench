(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_fields = {
rec__tree_logic__branch_read_iterator_type__m_is_valid : bool
}

function us_split_fields_rec__tree_logic__branch_read_iterator_type__m_is_valid__projection(a: us_split_fields) : bool =
  (a).rec__tree_logic__branch_read_iterator_type__m_is_valid

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_int(((a).us_split_fields1).rec__tree_logic__branch_read_iterator_type__m_is_valid) = to_int(((b).us_split_fields1).rec__tree_logic__branch_read_iterator_type__m_is_valid)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic tree_logic__branch_read_iterator_type__m_is_valid__first__bit : int

logic tree_logic__branch_read_iterator_type__m_is_valid__last__bit : int

logic tree_logic__branch_read_iterator_type__m_is_valid__position : int

axiom tree_logic__branch_read_iterator_type__m_is_valid__first__bit_axiom :
  (0 <= tree_logic__branch_read_iterator_type__m_is_valid__first__bit)

axiom tree_logic__branch_read_iterator_type__m_is_valid__last__bit_axiom :
  (tree_logic__branch_read_iterator_type__m_is_valid__first__bit <  tree_logic__branch_read_iterator_type__m_is_valid__last__bit)

axiom tree_logic__branch_read_iterator_type__m_is_valid__position_axiom :
  (0 <= tree_logic__branch_read_iterator_type__m_is_valid__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type branch_read_iterator_type__ref = { branch_read_iterator_type__content :
us_rep
}

function branch_read_iterator_type__ref_branch_read_iterator_type__content__projection(a: branch_read_iterator_type__ref) : us_rep =
  (a).branch_read_iterator_type__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type subtree_enum

predicate in_range2(x: int) = ((0 <= x) and (x <= 1))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : subtree_enum, subtree_enum -> bool

logic dummy2 : subtree_enum

type subtree_enum__ref = { subtree_enum__content : subtree_enum
}

function subtree_enum__ref_subtree_enum__content__projection(a: subtree_enum__ref) : subtree_enum =
  (a).subtree_enum__content

logic to_rep1 : subtree_enum -> int

logic of_rep1 : int -> subtree_enum

axiom inversion_axiom1 :
  (forall x:subtree_enum [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:subtree_enum [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__tree_logic__branch_type__m_variant :
subtree_enum
}

function us_split_discrs_rec__tree_logic__branch_type__m_variant__projection(a: us_split_discrs) : subtree_enum =
  (a).rec__tree_logic__branch_type__m_variant

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__tree_logic__branch_type__m_logical_address :
integer
}

function us_split_fields_rec__tree_logic__branch_type__m_logical_address__projection(a: us_split_fields2) : integer =
  (a).rec__tree_logic__branch_type__m_logical_address

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__tree_logic__branch_type__m_variant) = to_rep1(((b).us_split_discrs1).rec__tree_logic__branch_type__m_variant)) and
  (to_rep(((a).us_split_fields3).rec__tree_logic__branch_type__m_logical_address) = to_rep(((b).us_split_fields3).rec__tree_logic__branch_type__m_logical_address))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic tree_logic__branch_type__m_variant__first__bit : int

logic tree_logic__branch_type__m_variant__last__bit : int

logic tree_logic__branch_type__m_variant__position : int

axiom tree_logic__branch_type__m_variant__first__bit_axiom :
  (0 <= tree_logic__branch_type__m_variant__first__bit)

axiom tree_logic__branch_type__m_variant__last__bit_axiom :
  (tree_logic__branch_type__m_variant__first__bit <  tree_logic__branch_type__m_variant__last__bit)

axiom tree_logic__branch_type__m_variant__position_axiom :
  (0 <= tree_logic__branch_type__m_variant__position)

logic tree_logic__branch_type__m_logical_address__first__bit : int

logic tree_logic__branch_type__m_logical_address__last__bit : int

logic tree_logic__branch_type__m_logical_address__position : int

axiom tree_logic__branch_type__m_logical_address__first__bit_axiom :
  (0 <= tree_logic__branch_type__m_logical_address__first__bit)

axiom tree_logic__branch_type__m_logical_address__last__bit_axiom :
  (tree_logic__branch_type__m_logical_address__first__bit <  tree_logic__branch_type__m_logical_address__last__bit)

axiom tree_logic__branch_type__m_logical_address__position_axiom :
  (0 <= tree_logic__branch_type__m_logical_address__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type t1s__ref = { t1s__content : us_rep1
}

function t1s__ref_t1s__content__projection(a: t1s__ref) : us_rep1 =
  (a).t1s__content

type us_split_discrs2 = { rec__primitives__primitive_type__m_io_error : bool
}

function us_split_discrs_rec__primitives__primitive_type__m_io_error__projection(a: us_split_discrs2) : bool =
  (a).rec__primitives__primitive_type__m_io_error

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__primitives__primitive_type__m_read_branch :
us_rep1; rec__primitives__primitive_type__m_read_iterator : us_rep
}

function us_split_fields_rec__primitives__primitive_type__m_read_branch__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__primitives__primitive_type__m_read_branch

function us_split_fields_rec__primitives__primitive_type__m_read_iterator__projection(a: us_split_fields4) : us_rep =
  (a).rec__primitives__primitive_type__m_read_iterator

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs3 : us_split_discrs2; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__2__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq5(a: us_rep2, b: us_rep2) : bool =
  (if ((to_int(((a).us_split_discrs3).rec__primitives__primitive_type__m_io_error) = to_int(((b).us_split_discrs3).rec__primitives__primitive_type__m_io_error)) and
  ((bool_eq4(((a).us_split_fields5).rec__primitives__primitive_type__m_read_branch,
  ((b).us_split_fields5).rec__primitives__primitive_type__m_read_branch) = true) and
  (bool_eq1(((a).us_split_fields5).rec__primitives__primitive_type__m_read_iterator,
  ((b).us_split_fields5).rec__primitives__primitive_type__m_read_iterator) = true))) then true else false)

predicate in_range3(rec__primitives__primitive_type__m_io_error1: bool,
  a: us_split_discrs2) =
  (rec__primitives__primitive_type__m_io_error1 = (a).rec__primitives__primitive_type__m_io_error)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic primitives__primitive_type__m_io_error__first__bit : int

logic primitives__primitive_type__m_io_error__last__bit : int

logic primitives__primitive_type__m_io_error__position : int

axiom primitives__primitive_type__m_io_error__first__bit_axiom :
  (0 <= primitives__primitive_type__m_io_error__first__bit)

axiom primitives__primitive_type__m_io_error__last__bit_axiom :
  (primitives__primitive_type__m_io_error__first__bit <  primitives__primitive_type__m_io_error__last__bit)

axiom primitives__primitive_type__m_io_error__position_axiom :
  (0 <= primitives__primitive_type__m_io_error__position)

logic primitives__primitive_type__m_read_branch__first__bit : int

logic primitives__primitive_type__m_read_branch__last__bit : int

logic primitives__primitive_type__m_read_branch__position : int

axiom primitives__primitive_type__m_read_branch__first__bit_axiom :
  (0 <= primitives__primitive_type__m_read_branch__first__bit)

axiom primitives__primitive_type__m_read_branch__last__bit_axiom :
  (primitives__primitive_type__m_read_branch__first__bit <  primitives__primitive_type__m_read_branch__last__bit)

axiom primitives__primitive_type__m_read_branch__position_axiom :
  (0 <= primitives__primitive_type__m_read_branch__position)

logic primitives__primitive_type__m_read_iterator__first__bit : int

logic primitives__primitive_type__m_read_iterator__last__bit : int

logic primitives__primitive_type__m_read_iterator__position : int

axiom primitives__primitive_type__m_read_iterator__first__bit_axiom :
  (0 <= primitives__primitive_type__m_read_iterator__first__bit)

axiom primitives__primitive_type__m_read_iterator__last__bit_axiom :
  (primitives__primitive_type__m_read_iterator__first__bit <  primitives__primitive_type__m_read_iterator__last__bit)

axiom primitives__primitive_type__m_read_iterator__position_axiom :
  (0 <= primitives__primitive_type__m_read_iterator__position)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type primitive_type__ref = { primitive_type__content : us_rep2
}

function primitive_type__ref_primitive_type__content__projection(a: primitive_type__ref) : us_rep2 =
  (a).primitive_type__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate in_range4(rec__tree_logic__branch_type__m_variant1: int,
  a: us_split_discrs) =
  (rec__tree_logic__branch_type__m_variant1 = to_rep1((a).rec__tree_logic__branch_type__m_variant))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic tree_logic__branch_type__m_variant__first__bit1 : int

logic tree_logic__branch_type__m_variant__last__bit1 : int

logic tree_logic__branch_type__m_variant__position1 : int

axiom tree_logic__branch_type__m_variant__first__bit_axiom1 :
  (0 <= tree_logic__branch_type__m_variant__first__bit1)

axiom tree_logic__branch_type__m_variant__last__bit_axiom1 :
  (tree_logic__branch_type__m_variant__first__bit1 <  tree_logic__branch_type__m_variant__last__bit1)

axiom tree_logic__branch_type__m_variant__position_axiom1 :
  (0 <= tree_logic__branch_type__m_variant__position1)

logic tree_logic__branch_type__m_logical_address__first__bit1 : int

logic tree_logic__branch_type__m_logical_address__last__bit1 : int

logic tree_logic__branch_type__m_logical_address__position1 : int

axiom tree_logic__branch_type__m_logical_address__first__bit_axiom1 :
  (0 <= tree_logic__branch_type__m_logical_address__first__bit1)

axiom tree_logic__branch_type__m_logical_address__last__bit_axiom1 :
  (tree_logic__branch_type__m_logical_address__first__bit1 <  tree_logic__branch_type__m_logical_address__last__bit1)

axiom tree_logic__branch_type__m_logical_address__position_axiom1 :
  (0 <= tree_logic__branch_type__m_logical_address__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type branch_type__ref = { branch_type__content : us_rep1
}

function branch_type__ref_branch_type__content__projection(a: branch_type__ref) : us_rep1 =
  (a).branch_type__content

predicate dynamic_invariant1(temp___expr_183: us_rep2,
  temp___is_init_179: bool, temp___skip_constant_180: bool,
  temp___do_toplevel_181: bool, temp___do_typ_inv_182: bool) = in_range4(0,
  (((temp___expr_183).us_split_fields5).rec__primitives__primitive_type__m_read_branch).us_split_discrs1)

predicate default_initial_assumption(temp___expr_186: us_rep2,
  temp___skip_top_level_187: bool) =
  ((((temp___expr_186).us_split_discrs3).rec__primitives__primitive_type__m_io_error = of_int(0)) and
  (to_rep1(((((temp___expr_186).us_split_fields5).rec__primitives__primitive_type__m_read_branch).us_split_discrs1).rec__tree_logic__branch_type__m_variant) = 0))

predicate dynamic_invariant2(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  (0 <= 1)) -> in_range2(temp___expr_158))

predicate default_initial_assumption1(temp___expr_167: us_rep1,
  temp___skip_top_level_168: bool) =
  (to_rep1(((temp___expr_167).us_split_discrs1).rec__tree_logic__branch_type__m_variant) = 0)

 (* File "primitives.ads", line 3, characters 0-0 *)
goal defqtvc :
  (forall usf:bool.
  (forall usf1:us_rep2.
  ((((usf1).us_split_discrs3).rec__primitives__primitive_type__m_io_error = usf) ->
  in_range2(0))))
