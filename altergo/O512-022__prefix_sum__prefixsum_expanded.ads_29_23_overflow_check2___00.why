(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic all_elements_in : (int,integer) farray, int -> bool

logic all_elements_in__function_guard : bool, (int,integer) farray,
  int -> prop

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

axiom all_elements_in__def_axiom :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> ((-max) <= to_rep((a[k]))))))))

axiom all_elements_in__def_axiom1 :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)]. ((all_elements_in(a,
  max) = true) ->
  (forall k:int. (((0 <= k) and (k <= 7)) -> (to_rep((a[k])) <= max))))))

axiom all_elements_in__def_axiom2 :
  (forall a:(int,integer) farray.
  (forall max:int [all_elements_in(a, max)].
  ((forall k:int. (((0 <= k) and (k <= 7)) -> (((-max) <= to_rep((a[k]))) and
   (to_rep((a[k])) <= max)))) ->
  (all_elements_in(a, max) = true))))

logic a : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic b : (int,integer) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "prefixsum_expanded.ads", line 20, characters 0-0 *)
goal defqtvc : (((all_elements_in(a, 8000000) = true) and (all_elements_in(b,
  1000000) = true)) ->
  (forall o:bool.
  ((exists o1:int. ((to_rep((b[7])) = o1) and
   (exists o2:int. ((to_rep((b[6])) = o2) and
   (exists o3:int. ((to_rep((b[5])) = o3) and
   (exists o4:int. ((to_rep((b[4])) = o4) and
   (exists o5:int. ((to_rep((b[3])) = o5) and
   (exists o6:int. ((to_rep((b[2])) = o6) and
   (exists o7:int. ((to_rep((b[1])) = o7) and
   (exists o8:int. ((to_rep((b[0])) = o8) and (let o9 = (o8 + o7) : int in
   (in_range(o9) and (let o10 = (o9 + o6) : int in (in_range(o10) and
   (let o11 = (o10 + o5) : int in (in_range(o11) and (let o12 = (o11 + o4)
   : int in (in_range(o12) and (let o13 = (o12 + o3) : int in
   (in_range(o13) and (let o14 = (o13 + o2) : int in (in_range(o14) and
   (let o15 = (o14 + o1) : int in (in_range(o15) and
   (exists o16:int. ((to_rep((a[7])) = o16) and
   (if (o16 = o15) then (exists o17:int. ((to_rep((b[0])) = o17) and
                        (exists o18:int. ((to_rep((b[1])) = o18) and
                        (exists o19:int. ((to_rep((b[2])) = o19) and
                        (exists o20:int. ((to_rep((b[3])) = o20) and
                        (let o21 = (o20 + o19) : int in (in_range(o21) and
                        (let o22 = (o21 + o18) : int in (in_range(o22) and
                        (let o23 = (o22 + o17) : int in (in_range(o23) and
                        (exists o24:int. ((to_rep((a[3])) = o24) and
                        (o = (if (o24 = o23) then true else false)))))))))))))))))) else (o = false)))))))))))))))))))))))))))))))))) ->
  ((o = true) ->
  (forall o1:int. ((to_rep((b[4])) = o1) ->
  (forall o2:int. ((to_rep((b[5])) = o2) -> in_range((o2 + o1))))))))))
