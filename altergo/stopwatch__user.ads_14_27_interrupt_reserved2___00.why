(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type buttonsT

logic user_eq : buttonsT, buttonsT -> bool

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

type buttonsT__ref = { buttonsT__content : buttonsT
}

function buttonsT__ref_buttonsT__content__projection(a: buttonsT__ref) : buttonsT =
  (a).buttonsT__content

type interrupt_priority

logic interrupt_priorityqtint : interrupt_priority -> int

axiom interrupt_priorityqtaxiom :
  (forall i:interrupt_priority. (98 <= interrupt_priorityqtint(i)))

axiom interrupt_priorityqtaxiom1 :
  (forall i:interrupt_priority. (interrupt_priorityqtint(i) <= 98))

predicate in_range(x: int) = ((98 <= x) and (x <= 98))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq1 : interrupt_priority, interrupt_priority -> bool

logic dummy : interrupt_priority

type interrupt_priority__ref = { interrupt_priority__content :
interrupt_priority
}

function interrupt_priority__ref_interrupt_priority__content__projection(a: interrupt_priority__ref) : interrupt_priority =
  (a).interrupt_priority__content

predicate dynamic_invariant(temp___expr_172: int, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = (((temp___is_init_168 = true) or
  (98 <= 98)) -> in_range(temp___expr_172))

logic self__ : buttonsT

 (* File "user.ads", line 9, characters 0-0 *)
goal defqtvc : (forall temp___191:bool. (temp___191 = false))
