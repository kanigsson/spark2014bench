(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 4294967295))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (32 <= n)) -> (nth(x,
  n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  32)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  32)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  32)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  32) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((32 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> (((n + s) <  32) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  32)) -> ((32 <= (n + s)) -> (nth(asr(b, s), n) = nth(b,
  (32 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  32))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 32))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  32)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 32))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(4294967296 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 4294967295))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  4294967296))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  4294967296)) ->
  (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 32)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 4294967295)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  4294967296) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  4294967296)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg :
  (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 4294967296)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  4294967296) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 4294967296)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  4294967296)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 32)]. (eq_sub(x, y, 0, 32) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int1(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t1
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : capacity_range, capacity_range -> bool

logic dummy4 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = {
rec__ada___names__data__entry_tables__vector__capacity : capacity_range
}

function us_split_discrs_rec__ada___names__data__entry_tables__vector__capacity__projection(a: us_split_discrs) : capacity_range =
  (a).rec__ada___names__data__entry_tables__vector__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__ada___names__data__entry_tables__vector :
us_main_type
}

function us_split_fields_rec__ada___names__data__entry_tables__vector__projection(a: us_split_fields) : us_main_type =
  (a).rec__ada___names__data__entry_tables__vector

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ada___names__data__entry_tables__vector__capacity__first__bit : int

logic ada___names__data__entry_tables__vector__capacity__last__bit : int

logic ada___names__data__entry_tables__vector__capacity__position : int

axiom ada___names__data__entry_tables__vector__capacity__first__bit_axiom :
  (0 <= ada___names__data__entry_tables__vector__capacity__first__bit)

axiom ada___names__data__entry_tables__vector__capacity__last__bit_axiom :
  (ada___names__data__entry_tables__vector__capacity__first__bit <  ada___names__data__entry_tables__vector__capacity__last__bit)

axiom ada___names__data__entry_tables__vector__capacity__position_axiom :
  (0 <= ada___names__data__entry_tables__vector__capacity__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type tentry_tableS__ref = { tentry_tableS__content : us_rep
}

function tentry_tableS__ref_tentry_tableS__content__projection(a: tentry_tableS__ref) : us_rep =
  (a).tentry_tableS__content

function to_rep2(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep2 : int -> capacity_range

axiom inversion_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:capacity_range [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

predicate in_range5(rec__ada___names__data__entry_tables__vector__capacity1: int,
  a: us_split_discrs) =
  (rec__ada___names__data__entry_tables__vector__capacity1 = to_rep2((a).rec__ada___names__data__entry_tables__vector__capacity))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic ada___names__data__entry_tables__vector__capacity__first__bit1 : int

logic ada___names__data__entry_tables__vector__capacity__last__bit1 : int

logic ada___names__data__entry_tables__vector__capacity__position1 : int

axiom ada___names__data__entry_tables__vector__capacity__first__bit_axiom1 :
  (0 <= ada___names__data__entry_tables__vector__capacity__first__bit1)

axiom ada___names__data__entry_tables__vector__capacity__last__bit_axiom1 :
  (ada___names__data__entry_tables__vector__capacity__first__bit1 <  ada___names__data__entry_tables__vector__capacity__last__bit1)

axiom ada___names__data__entry_tables__vector__capacity__position_axiom1 :
  (0 <= ada___names__data__entry_tables__vector__capacity__position1)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type vector__ref = { vector__content : us_rep
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep =
  (a).vector__content

logic entry_table__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

predicate dynamic_invariant1(temp___expr_224: us_rep,
  temp___is_init_220: bool, temp___skip_constant_221: bool,
  temp___do_toplevel_222: bool, temp___do_typ_inv_223: bool) =
  ((not (temp___skip_constant_221 = true)) -> in_range5(256,
  (temp___expr_224).us_split_discrs1))

predicate default_initial_assumption(temp___expr_226: us_rep,
  temp___skip_top_level_227: bool) =
  ((to_rep2(((temp___expr_226).us_split_discrs1).rec__ada___names__data__entry_tables__vector__capacity) = 256) and
  ((not (temp___skip_top_level_227 = true)) ->
  (is_empty(temp___expr_226) = true)))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep1

logic bool_eq8 : us_rep1, us_rep1 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type sequence__ref = { sequence__content : us_rep1
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep1 =
  (a).sequence__content

logic model : us_rep -> us_rep1

logic model__function_guard : us_rep1, us_rep -> prop

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

function last2(container: us_rep1) : int = (0 + length1(container))

logic last__function_guard : int, us_rep1 -> prop

function last_index(container: us_rep) : int = last2(model(container))

logic last_index__function_guard : int, us_rep -> prop

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq8 : extended_index, extended_index -> bool

logic dummy8 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant2(temp___expr_197: int, temp___is_init_193: bool,
  temp___skip_constant_194: bool, temp___do_toplevel_195: bool,
  temp___do_typ_inv_196: bool) = (((temp___is_init_193 = true) or
  (0 <= 2147483647)) -> in_range6(temp___expr_197))

type capacity_range1

logic capacity_rangeqtint1 : capacity_range1 -> int

axiom capacity_rangeqtaxiom2 :
  (forall i:capacity_range1. (0 <= capacity_rangeqtint1(i)))

axiom capacity_rangeqtaxiom3 :
  (forall i:capacity_range1. (capacity_rangeqtint1(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq9 : capacity_range1, capacity_range1 -> bool

logic dummy9 : capacity_range1

type capacity_range__ref1 = { capacity_range__content1 : capacity_range1
}

function capacity_range__ref_capacity_range__content__2__projection(a: capacity_range__ref1) : capacity_range1 =
  (a).capacity_range__content1

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_discrs2 = {
rec__ada___names__data__char_tables__vector__capacity : capacity_range1
}

function us_split_discrs_rec__ada___names__data__char_tables__vector__capacity__projection(a: us_split_discrs2) : capacity_range1 =
  (a).rec__ada___names__data__char_tables__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields2 = { rec__ada___names__data__char_tables__vector :
us_main_type2
}

function us_split_fields_rec__ada___names__data__char_tables__vector__projection(a: us_split_fields2) : us_main_type2 =
  (a).rec__ada___names__data__char_tables__vector

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep2 = { us_split_discrs3 : us_split_discrs2; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep2) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__2__projection(a: us_rep2) : us_split_fields2 =
  (a).us_split_fields3

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic ada___names__data__char_tables__vector__capacity__first__bit : int

logic ada___names__data__char_tables__vector__capacity__last__bit : int

logic ada___names__data__char_tables__vector__capacity__position : int

axiom ada___names__data__char_tables__vector__capacity__first__bit_axiom :
  (0 <= ada___names__data__char_tables__vector__capacity__first__bit)

axiom ada___names__data__char_tables__vector__capacity__last__bit_axiom :
  (ada___names__data__char_tables__vector__capacity__first__bit <  ada___names__data__char_tables__vector__capacity__last__bit)

axiom ada___names__data__char_tables__vector__capacity__position_axiom :
  (0 <= ada___names__data__char_tables__vector__capacity__position)

logic user_eq10 : us_rep2, us_rep2 -> bool

logic dummy10 : us_rep2

type tchar_tableS__ref = { tchar_tableS__content : us_rep2
}

function tchar_tableS__ref_tchar_tableS__content__projection(a: tchar_tableS__ref) : us_rep2 =
  (a).tchar_tableS__content

function to_rep3(x: capacity_range1) : int = capacity_rangeqtint1(x)

logic of_rep3 : int -> capacity_range1

axiom inversion_axiom3 :
  (forall x:capacity_range1 [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:capacity_range1 [to_rep3(x)]. in_range7(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range7(x) ->
  (to_rep3(of_rep3(x)) = x)))

predicate in_range8(rec__ada___names__data__char_tables__vector__capacity1: int,
  a: us_split_discrs2) =
  (rec__ada___names__data__char_tables__vector__capacity1 = to_rep3((a).rec__ada___names__data__char_tables__vector__capacity))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic ada___names__data__char_tables__vector__capacity__first__bit1 : int

logic ada___names__data__char_tables__vector__capacity__last__bit1 : int

logic ada___names__data__char_tables__vector__capacity__position1 : int

axiom ada___names__data__char_tables__vector__capacity__first__bit_axiom1 :
  (0 <= ada___names__data__char_tables__vector__capacity__first__bit1)

axiom ada___names__data__char_tables__vector__capacity__last__bit_axiom1 :
  (ada___names__data__char_tables__vector__capacity__first__bit1 <  ada___names__data__char_tables__vector__capacity__last__bit1)

axiom ada___names__data__char_tables__vector__capacity__position_axiom1 :
  (0 <= ada___names__data__char_tables__vector__capacity__position1)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type vector__ref1 = { vector__content1 : us_rep2
}

function vector__ref_vector__content__2__projection(a: vector__ref1) : us_rep2 =
  (a).vector__content1

logic char_table__split_discrs : us_split_discrs2

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_empty1 : us_rep2 -> bool

logic is_empty__function_guard1 : bool, us_rep2 -> prop

predicate dynamic_invariant3(temp___expr_297: us_rep2,
  temp___is_init_293: bool, temp___skip_constant_294: bool,
  temp___do_toplevel_295: bool, temp___do_typ_inv_296: bool) =
  ((not (temp___skip_constant_294 = true)) -> in_range8(1024,
  (temp___expr_297).us_split_discrs3))

predicate default_initial_assumption1(temp___expr_299: us_rep2,
  temp___skip_top_level_300: bool) =
  ((to_rep3(((temp___expr_299).us_split_discrs3).rec__ada___names__data__char_tables__vector__capacity) = 1024) and
  ((not (temp___skip_top_level_300 = true)) ->
  (is_empty1(temp___expr_299) = true)))

function to_rep4(x: positive) : int = positiveqtint(x)

logic of_rep4 : int -> positive

axiom inversion_axiom4 :
  (forall x:positive [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:positive [to_rep4(x)]. in_range3(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range3(x) ->
  (to_rep4(of_rep4(x)) = x)))

type name_id

logic name_idqtint : name_id -> int

axiom name_idqtaxiom : (forall i:name_id. (0 <= name_idqtint(i)))

axiom name_idqtaxiom1 : (forall i:name_id. (name_idqtint(i) <= 2147483647))

predicate in_range9(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq12 : name_id, name_id -> bool

logic dummy12 : name_id

type name_id__ref = { name_id__content : name_id
}

function name_id__ref_name_id__content__projection(a: name_id__ref) : name_id =
  (a).name_id__content

function to_rep5(x: name_id) : int = name_idqtint(x)

logic of_rep5 : int -> name_id

axiom inversion_axiom5 :
  (forall x:name_id [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 : (forall x:name_id [to_rep5(x)]. in_range9(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range9(x) ->
  (to_rep5(of_rep5(x)) = x)))

type char_table_index

logic char_table_indexqtint : char_table_index -> int

axiom char_table_indexqtaxiom :
  (forall i:char_table_index. (0 <= char_table_indexqtint(i)))

axiom char_table_indexqtaxiom1 :
  (forall i:char_table_index. (char_table_indexqtint(i) <= 2147483646))

predicate in_range10(x: int) = ((0 <= x) and (x <= 2147483646))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq13 : char_table_index, char_table_index -> bool

logic dummy13 : char_table_index

type char_table_index__ref = { char_table_index__content : char_table_index
}

function char_table_index__ref_char_table_index__content__projection(a: char_table_index__ref) : char_table_index =
  (a).char_table_index__content

function to_rep6(x: char_table_index) : int = char_table_indexqtint(x)

logic of_rep6 : int -> char_table_index

axiom inversion_axiom6 :
  (forall x:char_table_index [to_rep6(x)]. (of_rep6(to_rep6(x)) = x))

axiom range_axiom6 :
  (forall x:char_table_index [to_rep6(x)]. in_range10(to_rep6(x)))

axiom coerce_axiom6 :
  (forall x:int [to_rep6(of_rep6(x))]. (in_range10(x) ->
  (to_rep6(of_rep6(x)) = x)))

type us_split_fields4 = { rec__ada___names__data__name_entry__table_index :
char_table_index; rec__ada___names__data__name_entry__length : positive;
rec__ada___names__data__name_entry__next_hash : name_id
}

function us_split_fields_rec__ada___names__data__name_entry__table_index__projection(a: us_split_fields4) : char_table_index =
  (a).rec__ada___names__data__name_entry__table_index

function us_split_fields_rec__ada___names__data__name_entry__length__projection(a: us_split_fields4) : positive =
  (a).rec__ada___names__data__name_entry__length

function us_split_fields_rec__ada___names__data__name_entry__next_hash__projection(a: us_split_fields4) : name_id =
  (a).rec__ada___names__data__name_entry__next_hash

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep3 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep3) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq13(a: us_rep3, b: us_rep3) : bool =
  (if (((to_rep6(((a).us_split_fields5).rec__ada___names__data__name_entry__table_index) = to_rep6(((b).us_split_fields5).rec__ada___names__data__name_entry__table_index)) and
  (to_rep4(((a).us_split_fields5).rec__ada___names__data__name_entry__length) = to_rep4(((b).us_split_fields5).rec__ada___names__data__name_entry__length))) and
  (to_rep5(((a).us_split_fields5).rec__ada___names__data__name_entry__next_hash) = to_rep5(((b).us_split_fields5).rec__ada___names__data__name_entry__next_hash))) then true else false)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic ada___names__data__name_entry__table_index__first__bit : int

logic ada___names__data__name_entry__table_index__last__bit : int

logic ada___names__data__name_entry__table_index__position : int

axiom ada___names__data__name_entry__table_index__first__bit_axiom :
  (0 <= ada___names__data__name_entry__table_index__first__bit)

axiom ada___names__data__name_entry__table_index__last__bit_axiom :
  (ada___names__data__name_entry__table_index__first__bit <  ada___names__data__name_entry__table_index__last__bit)

axiom ada___names__data__name_entry__table_index__position_axiom :
  (0 <= ada___names__data__name_entry__table_index__position)

logic ada___names__data__name_entry__length__first__bit : int

logic ada___names__data__name_entry__length__last__bit : int

logic ada___names__data__name_entry__length__position : int

axiom ada___names__data__name_entry__length__first__bit_axiom :
  (0 <= ada___names__data__name_entry__length__first__bit)

axiom ada___names__data__name_entry__length__last__bit_axiom :
  (ada___names__data__name_entry__length__first__bit <  ada___names__data__name_entry__length__last__bit)

axiom ada___names__data__name_entry__length__position_axiom :
  (0 <= ada___names__data__name_entry__length__position)

logic ada___names__data__name_entry__next_hash__first__bit : int

logic ada___names__data__name_entry__next_hash__last__bit : int

logic ada___names__data__name_entry__next_hash__position : int

axiom ada___names__data__name_entry__next_hash__first__bit_axiom :
  (0 <= ada___names__data__name_entry__next_hash__first__bit)

axiom ada___names__data__name_entry__next_hash__last__bit_axiom :
  (ada___names__data__name_entry__next_hash__first__bit <  ada___names__data__name_entry__next_hash__last__bit)

axiom ada___names__data__name_entry__next_hash__position_axiom :
  (0 <= ada___names__data__name_entry__next_hash__position)

logic user_eq14 : us_rep3, us_rep3 -> bool

logic dummy14 : us_rep3

type name_entry__ref = { name_entry__content : us_rep3
}

function name_entry__ref_name_entry__content__projection(a: name_entry__ref) : us_rep3 =
  (a).name_entry__content

type element_type__ref = { element_type__content : us_rep3
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : us_rep3 =
  (a).element_type__content

logic first_index__function_guard : int, us_rep -> prop

type element_type__ref1 = { element_type__content1 : us_rep3
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : us_rep3 =
  (a).element_type__content1

logic get : us_rep1, int -> us_rep3

logic get__function_guard : us_rep3, us_rep1, int -> prop

function element(container: us_rep, index: int) : us_rep3 =
  get(model(container), index)

logic element__function_guard : us_rep3, us_rep, int -> prop

type map__ref1 = { map__content1 : (t,name_id) farray
}

logic slide1 : (t,name_id) farray, t, t -> (t,name_id) farray

axiom slide_eq1 :
  (forall a:(t,name_id) farray.
  (forall first2:t [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(t,name_id) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide1(a, old_first, new_first)[i])]. ((slide1(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

function bool_eq14(a: (t,name_id) farray, a__first: t, a__last: t,
  b: (t,name_id) farray, b__first: t, b__last: t) : bool =
  (if ((if ule(a__first, a__last) then (ule(b__first, b__last) and
  (sub(a__last, a__first) = sub(b__last, b__first))) else ugt(b__first,
  b__last)) and
  (forall temp___idx_173:t. ((ule(a__first, temp___idx_173) and
  ule(temp___idx_173, a__last)) ->
  (to_rep5((a[temp___idx_173])) = to_rep5((b[add(sub(b__first, a__first),
  temp___idx_173)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq14(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> ule(b__first, b__last)))))

axiom bool_eq_rev5 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq14(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> (sub(a__last, a__first) = sub(b__last,
  b__first))))))

axiom bool_eq_rev6 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq14(b, b__first, b__last, a, a__first, a__last) = true) ->
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last)))))

axiom bool_eq_rev7 :
  (forall a:(t,name_id) farray. forall b:(t,name_id) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq14(b, b__first, b__last, a, a__first, a__last) = true) ->
  (forall temp___idx_173:t. ((ule(a__first, temp___idx_173) and
  ule(temp___idx_173, a__last)) ->
  (to_rep5((a[temp___idx_173])) = to_rep5((b[add(sub(b__first, a__first),
  temp___idx_173)]))))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic invariant__ : (t,name_id) farray, us_split_fields2,
  us_split_fields -> bool

logic invariant____function_guard : bool, (t,name_id) farray,
  us_split_fields2, us_split_fields -> prop

logic valid_tables : us_split_fields2, us_split_fields -> bool

logic valid_tables__function_guard : bool, us_split_fields2,
  us_split_fields -> prop

logic valid_name_table : us_split_fields2, us_split_fields -> bool

logic valid_name_table__function_guard : bool, us_split_fields2,
  us_split_fields -> prop

logic valid_hashes : (t,name_id) farray, us_split_fields -> bool

logic valid_hashes__function_guard : bool, (t,name_id) farray,
  us_split_fields -> prop

axiom invariant____def_axiom :
  (forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields.
  valid_tables__function_guard(valid_tables(names__char_table__fields,
  names__entry_table__fields), names__char_table__fields,
  names__entry_table__fields))

axiom invariant____def_axiom1 :
  (forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields.
  valid_name_table__function_guard(valid_name_table(names__char_table__fields,
  names__entry_table__fields), names__char_table__fields,
  names__entry_table__fields))

axiom invariant____def_axiom2 :
  (forall names__hash_table:(t,name_id) farray.
  forall names__entry_table__fields:us_split_fields.
  valid_hashes__function_guard(valid_hashes(names__hash_table,
  names__entry_table__fields), names__hash_table,
  names__entry_table__fields))

axiom invariant____def_axiom3 :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [invariant__(names__hash_table, names__char_table__fields,
  names__entry_table__fields)]. ((invariant__(names__hash_table,
  names__char_table__fields, names__entry_table__fields) = true) ->
  (valid_tables(names__char_table__fields,
  names__entry_table__fields) = true)))))

axiom invariant____def_axiom4 :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [invariant__(names__hash_table, names__char_table__fields,
  names__entry_table__fields)]. ((invariant__(names__hash_table,
  names__char_table__fields, names__entry_table__fields) = true) ->
  (valid_name_table(names__char_table__fields,
  names__entry_table__fields) = true)))))

axiom invariant____def_axiom5 :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [invariant__(names__hash_table, names__char_table__fields,
  names__entry_table__fields)]. ((invariant__(names__hash_table,
  names__char_table__fields, names__entry_table__fields) = true) ->
  (valid_hashes(names__hash_table, names__entry_table__fields) = true)))))

axiom invariant____def_axiom6 :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [invariant__(names__hash_table, names__char_table__fields,
  names__entry_table__fields)]. ((((valid_tables(names__char_table__fields,
  names__entry_table__fields) = true) and
  (valid_name_table(names__char_table__fields,
  names__entry_table__fields) = true)) and (valid_hashes(names__hash_table,
  names__entry_table__fields) = true)) -> (invariant__(names__hash_table,
  names__char_table__fields, names__entry_table__fields) = true)))))

logic s : us_t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic to_string : int, (t,name_id) farray, us_split_fields2,
  us_split_fields -> us_t

logic to_string__function_guard : us_t, int, (t,name_id) farray,
  us_split_fields2, us_split_fields -> prop

predicate dynamic_invariant4(temp___expr_249: int, temp___is_init_245: bool,
  temp___skip_constant_246: bool, temp___do_toplevel_247: bool,
  temp___do_typ_inv_248: bool) = (((temp___is_init_245 = true) or
  (0 <= 2147483647)) -> in_range9(temp___expr_249))

axiom to_string__post_axiom :
  (forall names__hash_table:(t,name_id) farray.
  forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields.
  invariant____function_guard(invariant__(names__hash_table,
  names__char_table__fields, names__entry_table__fields), names__hash_table,
  names__char_table__fields, names__entry_table__fields))

axiom to_string__post_axiom1 :
  (forall n:int.
  (forall names__hash_table:(t,name_id) farray.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [to_string(n,
  names__hash_table, names__char_table__fields, names__entry_table__fields)].
  ((((dynamic_invariant4(n, true, true, true, true) and dynamic_invariant3({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 =
  names__char_table__fields }, true, true, true, true)) and
  dynamic_invariant1({ us_split_discrs1 = entry_table__split_discrs;
  us_split_fields1 = names__entry_table__fields }, true, true, true,
  true)) and (invariant__(names__hash_table, names__char_table__fields,
  names__entry_table__fields) = true)) -> (let result = to_string(n,
  names__hash_table, names__char_table__fields, names__entry_table__fields)
  : us_t in (to_string__function_guard(result, n, names__hash_table,
  names__char_table__fields, names__entry_table__fields) ->
  dynamic_invariant(result, true, false, true, true))))))))

logic length2 : us_rep -> int

logic length__function_guard1 : int, us_rep -> prop

logic length3 : us_rep2 -> int

logic length__function_guard2 : int, us_rep2 -> prop

logic attr__ATTRIBUTE_ADDRESS5 : int

logic hash : us_t -> t

logic hash__function_guard : t, us_t -> prop

type hash_type

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq15(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> t

logic user_eq15 : hash_type, hash_type -> bool

logic dummy15 : hash_type

type hash_type__ref = { hash_type__content : hash_type
}

function hash_type__ref_hash_type__content__projection(a: hash_type__ref) : hash_type =
  (a).hash_type__content

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 4294967295)

predicate dynamic_invariant5(temp___expr_395: t, temp___is_init_391: bool,
  temp___skip_constant_392: bool, temp___do_toplevel_393: bool,
  temp___do_typ_inv_394: bool) = true

axiom hash__post_axiom :
  (forall key:us_t [hash(key)]. (dynamic_invariant(key, true, true, true,
  true) -> dynamic_invariant5(hash(key), true, false, true, true)))

logic h : t

logic attr__ATTRIBUTE_ADDRESS6 : int

logic bool_eq16 : int, int -> bool

logic bool_ne1 : int, int -> bool

logic bool_lt1 : int, int -> bool

logic bool_le1 : int, int -> bool

logic bool_gt1 : int, int -> bool

logic bool_ge1 : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq16(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq16(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne1(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne1(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt1(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt1(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le1(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le1(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt1(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt1(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge1(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge1(x, y) = true))))

function length4(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function equal_except(left: us_rep1, right: us_rep1, position: int) : bool =
  andb(bool_eq16(length1(left), length1(right)),
  (if (forall i:int. (((1 <= i) and (i <= last2(left))) ->
      ((not (i = position)) -> (bool_eq13(get(left, i), get(right,
      i)) = true)))) then true else false))

logic equal_except__function_guard : bool, us_rep1, us_rep1, int -> prop

type valid_name_id

logic valid_name_idqtint : valid_name_id -> int

axiom valid_name_idqtaxiom :
  (forall i:valid_name_id. (1 <= valid_name_idqtint(i)))

axiom valid_name_idqtaxiom1 :
  (forall i:valid_name_id. (valid_name_idqtint(i) <= 2147483647))

predicate in_range11(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq16 : valid_name_id, valid_name_id -> bool

logic dummy16 : valid_name_id

type valid_name_id__ref = { valid_name_id__content : valid_name_id
}

function valid_name_id__ref_valid_name_id__content__projection(a: valid_name_id__ref) : valid_name_id =
  (a).valid_name_id__content

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range12(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq18(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq17 : index_type, index_type -> bool

logic dummy17 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

type hash_table_index_t

logic attr__ATTRIBUTE_MODULUS1 : t

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 255)

predicate in_range13(x: t) = (ule(rliteral, x) and ule(x, rliteral2))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 255))

function bool_eq19(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE12 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check12 : us_image -> prop

logic attr__ATTRIBUTE_VALUE12 : us_image -> t

logic user_eq18 : hash_table_index_t, hash_table_index_t -> bool

logic dummy18 : hash_table_index_t

type hash_table_index_t__ref = { hash_table_index_t__content :
hash_table_index_t
}

function hash_table_index_t__ref_hash_table_index_t__content__projection(a: hash_table_index_t__ref) : hash_table_index_t =
  (a).hash_table_index_t__content

predicate dynamic_invariant6(temp___expr_402: t, temp___is_init_398: bool,
  temp___skip_constant_399: bool, temp___do_toplevel_400: bool,
  temp___do_typ_inv_401: bool) = (((temp___is_init_398 = true) or
  ule(rliteral, rliteral2)) -> in_range13(temp___expr_402))

predicate dynamic_invariant7(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant8(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

predicate dynamic_invariant9(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq20 : us_rep4, us_rep4 -> bool

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic user_eq19 : us_rep4, us_rep4 -> bool

logic dummy19 : us_rep4

type sequence__ref1 = { sequence__content1 : us_rep4
}

function sequence__ref_sequence__content__2__projection(a: sequence__ref1) : us_rep4 =
  (a).sequence__content1

logic model1 : us_rep2 -> us_rep4

logic model__function_guard1 : us_rep4, us_rep2 -> prop

logic length5 : us_rep4 -> int

logic length__function_guard3 : int, us_rep4 -> prop

function last3(container: us_rep4) : int = ((- 1) + length5(container))

logic last__function_guard1 : int, us_rep4 -> prop

function last_index1(container: us_rep2) : int = last3(model1(container))

logic last_index__function_guard1 : int, us_rep2 -> prop

axiom valid_tables__def_axiom :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_tables(names__char_table__fields, names__entry_table__fields)].
  ((valid_tables(names__char_table__fields,
  names__entry_table__fields) = true) -> (last_index({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
  }) <= 2147483647))))

axiom valid_tables__def_axiom1 :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_tables(names__char_table__fields, names__entry_table__fields)].
  ((valid_tables(names__char_table__fields,
  names__entry_table__fields) = true) -> (last_index1({ us_split_discrs3 =
  char_table__split_discrs; us_split_fields3 = names__char_table__fields
  }) <= 2147483646))))

axiom valid_tables__def_axiom2 :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_tables(names__char_table__fields, names__entry_table__fields)].
  (((last_index({ us_split_discrs1 = entry_table__split_discrs;
  us_split_fields1 = names__entry_table__fields }) <= 2147483647) and
  (last_index1({ us_split_discrs3 = char_table__split_discrs;
  us_split_fields3 = names__char_table__fields }) <= 2147483646)) ->
  (valid_tables(names__char_table__fields,
  names__entry_table__fields) = true))))

axiom valid_hashes__def_axiom :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__entry_table__fields:us_split_fields
  [valid_hashes(names__hash_table, names__entry_table__fields)].
  ((valid_hashes(names__hash_table, names__entry_table__fields) = true) ->
  (forall h1:t. ((ule(rliteral, h1) and ule(h1, rliteral2)) ->
  (to_rep5((names__hash_table[h1])) <= last_index({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
  })))))))

axiom valid_hashes__def_axiom1 :
  (forall names__hash_table:(t,name_id) farray.
  (forall names__entry_table__fields:us_split_fields
  [valid_hashes(names__hash_table, names__entry_table__fields)].
  ((forall h1:t. ((ule(rliteral, h1) and ule(h1, rliteral2)) ->
   (to_rep5((names__hash_table[h1])) <= last_index({ us_split_discrs1 =
   entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
   })))) ->
  (valid_hashes(names__hash_table, names__entry_table__fields) = true))))

logic valid_entry : us_rep3, us_split_fields2, us_split_fields -> bool

logic valid_entry__function_guard : bool, us_rep3, us_split_fields2,
  us_split_fields -> prop

axiom valid_entry__post_axiom :
  (forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields.
  valid_tables__function_guard(valid_tables(names__char_table__fields,
  names__entry_table__fields), names__char_table__fields,
  names__entry_table__fields))

axiom valid_entry__def_axiom :
  (forall e:us_rep3.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [valid_entry(e,
  names__char_table__fields, names__entry_table__fields)]. ((valid_entry(e,
  names__char_table__fields, names__entry_table__fields) = true) ->
  (to_rep5(((e).us_split_fields5).rec__ada___names__data__name_entry__next_hash) <= last_index({
  us_split_discrs1 = entry_table__split_discrs; us_split_fields1 =
  names__entry_table__fields }))))))

axiom valid_entry__def_axiom1 :
  (forall e:us_rep3.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [valid_entry(e,
  names__char_table__fields, names__entry_table__fields)]. ((valid_entry(e,
  names__char_table__fields, names__entry_table__fields) = true) ->
  ((to_rep4(((e).us_split_fields5).rec__ada___names__data__name_entry__length) - 1) <= (last_index1({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 =
  names__char_table__fields
  }) - to_rep6(((e).us_split_fields5).rec__ada___names__data__name_entry__table_index)))))))

axiom valid_entry__def_axiom2 :
  (forall e:us_rep3.
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields [valid_entry(e,
  names__char_table__fields, names__entry_table__fields)].
  (((to_rep5(((e).us_split_fields5).rec__ada___names__data__name_entry__next_hash) <= last_index({
  us_split_discrs1 = entry_table__split_discrs; us_split_fields1 =
  names__entry_table__fields })) and
  ((to_rep4(((e).us_split_fields5).rec__ada___names__data__name_entry__length) - 1) <= (last_index1({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 =
  names__char_table__fields
  }) - to_rep6(((e).us_split_fields5).rec__ada___names__data__name_entry__table_index)))) ->
  (valid_entry(e, names__char_table__fields,
  names__entry_table__fields) = true)))))

axiom valid_name_table__post_axiom :
  (forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields.
  valid_tables__function_guard(valid_tables(names__char_table__fields,
  names__entry_table__fields), names__char_table__fields,
  names__entry_table__fields))

axiom valid_name_table__def_axiom :
  (forall names__char_table__fields:us_split_fields2.
  forall names__entry_table__fields:us_split_fields. forall i:int.
  valid_entry__function_guard(valid_entry(element({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = names__entry_table__fields },
  i), names__char_table__fields, names__entry_table__fields), element({
  us_split_discrs1 = entry_table__split_discrs; us_split_fields1 =
  names__entry_table__fields }, i), names__char_table__fields,
  names__entry_table__fields))

axiom valid_name_table__def_axiom1 :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_name_table(names__char_table__fields, names__entry_table__fields)].
  ((valid_name_table(names__char_table__fields,
  names__entry_table__fields) = true) ->
  (forall i:int. (((1 <= i) and (i <= last_index({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
  }))) -> (valid_entry(element({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = names__entry_table__fields },
  i), names__char_table__fields, names__entry_table__fields) = true))))))

axiom valid_name_table__def_axiom2 :
  (forall names__char_table__fields:us_split_fields2.
  (forall names__entry_table__fields:us_split_fields
  [valid_name_table(names__char_table__fields, names__entry_table__fields)].
  ((forall i:int. (((1 <= i) and (i <= last_index({ us_split_discrs1 =
   entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
   }))) -> (valid_entry(element({ us_split_discrs1 =
   entry_table__split_discrs; us_split_fields1 = names__entry_table__fields
   }, i), names__char_table__fields, names__entry_table__fields) = true))) ->
  (valid_name_table(names__char_table__fields,
  names__entry_table__fields) = true))))

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 256)

axiom h__def_axiom : (h = urem(hash(s), rliteral3))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range14(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq21(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE13 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check13 : us_image -> prop

logic attr__ATTRIBUTE_VALUE13 : us_image -> int

logic user_eq20 : count_type, count_type -> bool

logic dummy20 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant10(temp___expr_204: int, temp___is_init_200: bool,
  temp___skip_constant_201: bool, temp___do_toplevel_202: bool,
  temp___do_typ_inv_203: bool) = (((temp___is_init_200 = true) or
  (0 <= 2147483647)) -> in_range14(temp___expr_204))

predicate dynamic_invariant11(temp___expr_256: int, temp___is_init_252: bool,
  temp___skip_constant_253: bool, temp___do_toplevel_254: bool,
  temp___do_typ_inv_255: bool) = (((temp___is_init_252 = true) or
  (1 <= 2147483647)) -> in_range11(temp___expr_256))

predicate dynamic_invariant12(temp___expr_322: int, temp___is_init_318: bool,
  temp___skip_constant_319: bool, temp___do_toplevel_320: bool,
  temp___do_typ_inv_321: bool) = (((temp___is_init_318 = true) or
  (0 <= 2147483646)) -> in_range10(temp___expr_322))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. ((- 1) <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 2147483647))

predicate in_range15(x: int) = (((- 1) <= x) and (x <= 2147483647))

function bool_eq22(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE14 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check14 : us_image -> prop

logic attr__ATTRIBUTE_VALUE14 : us_image -> int

logic user_eq21 : extended_index1, extended_index1 -> bool

logic dummy21 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__3__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant13(temp___expr_277: int, temp___is_init_273: bool,
  temp___skip_constant_274: bool, temp___do_toplevel_275: bool,
  temp___do_typ_inv_276: bool) = (((temp___is_init_273 = true) or
  ((- 1) <= 2147483647)) -> in_range15(temp___expr_277))

predicate dynamic_invariant14(temp___expr_284: int, temp___is_init_280: bool,
  temp___skip_constant_281: bool, temp___do_toplevel_282: bool,
  temp___do_typ_inv_283: bool) = (((temp___is_init_280 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_284))

function capacity(container: us_rep2) : int =
  (if (of_int1(0) = true) then to_rep3(((container).us_split_discrs3).rec__ada___names__data__char_tables__vector__capacity) else 2147483647)

logic capacity__function_guard : int, us_rep2 -> prop

axiom length__post_axiom :
  (forall container:us_rep2 [length3(container)].
  (length3(container) <= capacity(container)))

axiom length__post_axiom1 :
  (forall container:us_rep2 [length3(container)].
  dynamic_invariant14(length3(container), true, false, true, true))

predicate default_initial_assumption2(temp___expr_315: us_rep4,
  temp___skip_top_level_316: bool) =
  ((not (temp___skip_top_level_316 = true)) ->
  (length5(temp___expr_315) = 0))

axiom model__post_axiom :
  (forall container:us_rep2 [model1(container)].
  (length5(model1(container)) = length3(container)))

axiom is_empty__post_axiom :
  (forall container:us_rep2 [is_empty1(container)].
  ((is_empty1(container) = true) -> (length3(container) = 0)))

axiom is_empty__post_axiom1 :
  (forall container:us_rep2 [is_empty1(container)].
  ((length3(container) = 0) -> (is_empty1(container) = true)))

type extended_index2

logic extended_indexqtint2 : extended_index2 -> int

axiom extended_indexqtaxiom4 :
  (forall i:extended_index2. ((- 1) <= extended_indexqtint2(i)))

axiom extended_indexqtaxiom5 :
  (forall i:extended_index2. (extended_indexqtint2(i) <= 2147483646))

predicate in_range16(x: int) = (((- 1) <= x) and (x <= 2147483646))

function bool_eq23(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE15 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check15 : us_image -> prop

logic attr__ATTRIBUTE_VALUE15 : us_image -> int

logic user_eq22 : extended_index2, extended_index2 -> bool

logic dummy22 : extended_index2

type extended_index__ref2 = { extended_index__content2 : extended_index2
}

function extended_index__ref_extended_index__content__4__projection(a: extended_index__ref2) : extended_index2 =
  (a).extended_index__content2

predicate dynamic_invariant15(temp___expr_307: int, temp___is_init_303: bool,
  temp___skip_constant_304: bool, temp___do_toplevel_305: bool,
  temp___do_typ_inv_306: bool) = (((temp___is_init_303 = true) or
  ((- 1) <= 2147483646)) -> in_range16(temp___expr_307))

axiom length__post_axiom2 :
  (forall container:us_rep4 [length5(container)].
  (((- 1) + length5(container)) <= 2147483646))

axiom length__post_axiom3 :
  (forall container:us_rep4 [length5(container)].
  dynamic_invariant10(length5(container), true, false, true, true))

predicate dynamic_invariant16(temp___expr_211: int, temp___is_init_207: bool,
  temp___skip_constant_208: bool, temp___do_toplevel_209: bool,
  temp___do_typ_inv_210: bool) = (((temp___is_init_207 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_211))

function capacity1(container: us_rep) : int =
  (if (of_int1(0) = true) then to_rep2(((container).us_split_discrs1).rec__ada___names__data__entry_tables__vector__capacity) else 2147483647)

logic capacity__function_guard1 : int, us_rep -> prop

axiom length__post_axiom4 :
  (forall container:us_rep [length2(container)].
  (length2(container) <= capacity1(container)))

axiom length__post_axiom5 :
  (forall container:us_rep [length2(container)].
  dynamic_invariant16(length2(container), true, false, true, true))

predicate default_initial_assumption3(temp___expr_242: us_rep1,
  temp___skip_top_level_243: bool) =
  ((not (temp___skip_top_level_243 = true)) ->
  (length1(temp___expr_242) = 0))

axiom model__post_axiom1 :
  (forall container:us_rep [model(container)].
  (length1(model(container)) = length2(container)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep [is_empty(container)].
  ((is_empty(container) = true) -> (length2(container) = 0)))

axiom is_empty__post_axiom3 :
  (forall container:us_rep [is_empty(container)].
  ((length2(container) = 0) -> (is_empty(container) = true)))

predicate dynamic_invariant17(temp___expr_263: int, temp___is_init_259: bool,
  temp___skip_constant_260: bool, temp___do_toplevel_261: bool,
  temp___do_typ_inv_262: bool) = (((temp___is_init_259 = true) or
  (1 <= 2147483647)) -> in_range12(temp___expr_263))

type extended_index3

logic extended_indexqtint3 : extended_index3 -> int

axiom extended_indexqtaxiom6 :
  (forall i:extended_index3. (0 <= extended_indexqtint3(i)))

axiom extended_indexqtaxiom7 :
  (forall i:extended_index3. (extended_indexqtint3(i) <= 2147483647))

predicate in_range17(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq24(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE16 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check16 : us_image -> prop

logic attr__ATTRIBUTE_VALUE16 : us_image -> int

logic user_eq23 : extended_index3, extended_index3 -> bool

logic dummy23 : extended_index3

type extended_index__ref3 = { extended_index__content3 : extended_index3
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref3) : extended_index3 =
  (a).extended_index__content3

predicate dynamic_invariant18(temp___expr_234: int, temp___is_init_230: bool,
  temp___skip_constant_231: bool, temp___do_toplevel_232: bool,
  temp___do_typ_inv_233: bool) = (((temp___is_init_230 = true) or
  (0 <= 2147483647)) -> in_range17(temp___expr_234))

axiom length__post_axiom6 :
  (forall container:us_rep1 [length1(container)].
  ((0 + length1(container)) <= 2147483647))

axiom length__post_axiom7 :
  (forall container:us_rep1 [length1(container)].
  dynamic_invariant10(length1(container), true, false, true, true))

 (* File "names.ads", line 44, characters 0-0 *)
goal defqtvc :
  (forall entry_table__split_fields:us_main_type.
  forall char_table__split_fields:us_main_type2.
  forall hash_table:(t,name_id) farray. forall n:int. (dynamic_invariant3({
  us_split_discrs3 = char_table__split_discrs; us_split_fields3 = {
  rec__ada___names__data__char_tables__vector = char_table__split_fields } },
  true, false, true, true) -> (dynamic_invariant1({ us_split_discrs1 =
  entry_table__split_discrs; us_split_fields1 = {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields }
  }, true, false, true, true) -> (dynamic_invariant(s, true, false, true,
  true) -> (dynamic_invariant4(n, false, false, true, true) ->
  ((forall entry_table__split_fields1:us_main_type.
   forall char_table__split_fields1:us_main_type2.
   forall hash_table1:(t,name_id) farray.
   invariant____function_guard(invariant__(hash_table1, {
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 }), hash_table1, {
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 })) ->
  ((invariant__(hash_table, { rec__ada___names__data__char_tables__vector =
  char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) = true) ->
  (forall ptr:int. ((ptr = 0) -> (dynamic_invariant4(ptr, true, false, true,
  true) -> (let o = hash(s) : t in (dynamic_invariant5(o, true, false, true,
  true) -> (let o1 = urem(o, rliteral3) : t in (in_range13(o1) ->
  ((o1 = h) -> (dynamic_invariant6(h, true, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (length(s) = 0) then true else false)) ->
  ((not (spark__branch = true)) ->
  (forall o2:int. ((to_rep5((hash_table[h])) = o2) ->
  (forall n1:int. ((n1 = o2) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if in_range11(n1) then true else false)) ->
  ((spark__branch1 = true) ->
  (forall ptr1:int. ((ptr1 = n1) -> (let temp___545 = to_string(ptr1,
  hash_table, { rec__ada___names__data__char_tables__vector =
  char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields })
  : us_t in ((to_string__function_guard(temp___545, ptr1, hash_table, {
  rec__ada___names__data__char_tables__vector = char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) and dynamic_invariant(temp___545, true, false, true, true)) ->
  (forall spark__branch2:bool.
  ((spark__branch2 = bool_eq3(to_array(temp___545), first1(temp___545),
  last1(temp___545), to_array(s), first1(s), last1(s))) ->
  ((not (spark__branch2 = true)) -> (let o3 = invariant__(hash_table, {
  rec__ada___names__data__char_tables__vector = char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields })
  : bool in
  ((forall entry_table__split_fields1:us_main_type.
   forall char_table__split_fields1:us_main_type2.
   valid_tables__function_guard(valid_tables({
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 }), {
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 })) ->
  ((forall entry_table__split_fields1:us_main_type.
   forall char_table__split_fields1:us_main_type2.
   valid_name_table__function_guard(valid_name_table({
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 }), {
   rec__ada___names__data__char_tables__vector = char_table__split_fields1 },
   { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 })) ->
  ((forall entry_table__split_fields1:us_main_type.
   forall hash_table1:(t,name_id) farray.
   valid_hashes__function_guard(valid_hashes(hash_table1, {
   rec__ada___names__data__entry_tables__vector = entry_table__split_fields1
   }), hash_table1, { rec__ada___names__data__entry_tables__vector =
   entry_table__split_fields1 })) ->
  ((invariant____function_guard(o3, hash_table, {
  rec__ada___names__data__char_tables__vector = char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) and ((o3 = true) <-> (((valid_tables({
  rec__ada___names__data__char_tables__vector = char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) = true) and (valid_name_table({
  rec__ada___names__data__char_tables__vector = char_table__split_fields }, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) = true)) and (valid_hashes(hash_table, {
  rec__ada___names__data__entry_tables__vector = entry_table__split_fields
  }) = true)))) -> (let o4 = { us_split_discrs1 = entry_table__split_discrs;
  us_split_fields1 = { rec__ada___names__data__entry_tables__vector =
  entry_table__split_fields } } : us_rep in (let o5 = last_index(o4) : int in
  ((dynamic_invariant2(o5, true, false, true, true) and
  (o5 = last2(model(o4)))) -> in_range11(ptr1))))))))))))))))))))))))))))))))))))))))))
