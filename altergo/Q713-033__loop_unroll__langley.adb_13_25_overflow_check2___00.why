(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer_32

logic integer_32qtint : integer_32 -> int

axiom integer_32qtaxiom :
  (forall i:integer_32. ((- 2147483648) <= integer_32qtint(i)))

axiom integer_32qtaxiom1 :
  (forall i:integer_32. (integer_32qtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer_32, integer_32 -> bool

logic dummy : integer_32

type integer_32__ref = { integer_32__content : integer_32
}

function integer_32__ref_integer_32__content__2__projection(a: integer_32__ref) : integer_32 =
  (a).integer_32__content

function to_rep(x: integer_32) : int = integer_32qtint(x)

logic of_rep : int -> integer_32

axiom inversion_axiom :
  (forall x:integer_32 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer_32 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer_32) farray
}

logic slide : (int,integer_32) farray, int, int -> (int,integer_32) farray

axiom slide_eq :
  (forall a:(int,integer_32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer_32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer_32) farray, a__first: int, a__last: int,
  b: (int,integer_32) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic x : (int,integer_32) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (int,integer_32) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tinteger_32B

logic tinteger_32Bqtint : tinteger_32B -> int

axiom tinteger_32Bqtaxiom :
  (forall i:tinteger_32B. ((- 2147483648) <= tinteger_32Bqtint(i)))

axiom tinteger_32Bqtaxiom1 :
  (forall i:tinteger_32B. (tinteger_32Bqtint(i) <= 2147483647))

predicate in_range2(x1: int) = (((- 2147483648) <= x1) and
  (x1 <= 2147483647))

function bool_eq3(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tinteger_32B, tinteger_32B -> bool

logic dummy1 : tinteger_32B

type tinteger_32B__ref = { tinteger_32B__content : tinteger_32B
}

function tinteger_32B__ref_tinteger_32B__content__projection(a: tinteger_32B__ref) : tinteger_32B =
  (a).tinteger_32B__content

predicate dynamic_invariant(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_181))

 (* File "langley.adb", line 5, characters 0-0 *)
goal defqtvc :
  ((forall i:int. (((0 <= i) and (i <= 9)) ->
   ((((to_rep((x[i])) <  1073741824) and
   ((- 1073741824) <  to_rep((x[i])))) and
   (to_rep((y[i])) <  1073741824)) and ((- 1073741824) <  to_rep((y[i])))))) ->
  (forall i:int. ((i = 0) ->
  (forall o:int. ((to_rep((y[i])) = o) ->
  (forall o1:int. ((to_rep((x[i])) = o1) -> in_range2((o1 + o)))))))))
