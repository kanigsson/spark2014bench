(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type element

logic elementqtint : element -> int

axiom elementqtaxiom : (forall i:element. (0 <= elementqtint(i)))

axiom elementqtaxiom1 : (forall i:element. (elementqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : element, element -> bool

logic dummy : element

type element__ref = { element__content : element
}

function element__ref_element__content__projection(a: element__ref) : element =
  (a).element__content

function to_rep(x: element) : int = elementqtint(x)

logic of_rep : int -> element

axiom inversion_axiom :
  (forall x:element [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:element [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,element) farray
}

logic slide : (int,element) farray, int, int -> (int,element) farray

axiom slide_eq :
  (forall a:(int,element) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,element) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,element) farray, a__first: int, a__last: int,
  b: (int,element) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,element) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,element) farray, (int,element) farray -> bool

type less_than_max

logic less_than_maxqtint : less_than_max -> int

axiom less_than_maxqtaxiom :
  (forall i:less_than_max. (0 <= less_than_maxqtint(i)))

axiom less_than_maxqtaxiom1 :
  (forall i:less_than_max. (less_than_maxqtint(i) <= 100))

predicate in_range1(x: int) = ((0 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : less_than_max, less_than_max -> bool

logic dummy2 : less_than_max

type less_than_max__ref = { less_than_max__content : less_than_max
}

function less_than_max__ref_less_than_max__content__projection(a: less_than_max__ref) : less_than_max =
  (a).less_than_max__content

function to_rep1(x: less_than_max) : int = less_than_maxqtint(x)

logic of_rep1 : int -> less_than_max

axiom inversion_axiom1 :
  (forall x:less_than_max [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:less_than_max [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__stacks__stack_root__content :
(int,element) farray; rec__stacks__stack_root__length : less_than_max;
rec__ext__ : us_private
}

function us_split_fields_rec__stacks__stack_root__content__projection(a: us_split_fields) : (int,element) farray =
  (a).rec__stacks__stack_root__content

function us_split_fields_rec__stacks__stack_root__length__projection(a: us_split_fields) : less_than_max =
  (a).rec__stacks__stack_root__length

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if ((bool_eq1(((a).us_split_fields1).rec__stacks__stack_root__content, 1,
  100, ((b).us_split_fields1).rec__stacks__stack_root__content, 1,
  100) = true) and
  (to_rep1(((a).us_split_fields1).rec__stacks__stack_root__length) = to_rep1(((b).us_split_fields1).rec__stacks__stack_root__length))) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic stacks__stack_root__content__first__bit : int

logic stacks__stack_root__content__last__bit : int

logic stacks__stack_root__content__position : int

axiom stacks__stack_root__content__first__bit_axiom :
  (0 <= stacks__stack_root__content__first__bit)

axiom stacks__stack_root__content__last__bit_axiom :
  (stacks__stack_root__content__first__bit <  stacks__stack_root__content__last__bit)

axiom stacks__stack_root__content__position_axiom :
  (0 <= stacks__stack_root__content__position)

logic stacks__stack_root__length__first__bit : int

logic stacks__stack_root__length__last__bit : int

logic stacks__stack_root__length__position : int

axiom stacks__stack_root__length__first__bit_axiom :
  (0 <= stacks__stack_root__length__first__bit)

axiom stacks__stack_root__length__last__bit_axiom :
  (stacks__stack_root__length__first__bit <  stacks__stack_root__length__last__bit)

axiom stacks__stack_root__length__position_axiom :
  (0 <= stacks__stack_root__length__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type stack_root__ref = { stack_root__content : us_rep
}

function stack_root__ref_stack_root__content__projection(a: stack_root__ref) : us_rep =
  (a).stack_root__content

logic s__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic size : us_rep -> int

logic size__function_guard : int, us_rep -> prop

logic temp_____aggregate_def_192 : int -> (int,element) farray

axiom temp___result_197qtdef :
  (forall temp___196:us_rep. size__function_guard(size(temp___196),
  temp___196))

predicate default_initial_assumption(temp___expr_190: us_rep,
  temp___skip_top_level_191: bool) =
  ((((temp___expr_190).attr__tag = us_tag) and
  ((((temp___expr_190).us_split_fields1).rec__stacks__stack_root__content = temp_____aggregate_def_192(0)) and
  (to_rep1(((temp___expr_190).us_split_fields1).rec__stacks__stack_root__length) = 0))) and
  ((not (temp___skip_top_level_191 = true)) -> (size(temp___expr_190) = 0)))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic is_empty : us_rep -> bool

logic is_empty__function_guard : bool, us_rep -> prop

axiom is_empty__def_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom is_empty__def_axiom1 :
  (forall s:us_rep [is_empty(s)]. ((is_empty(s) = true) -> (size(s) = 0)))

axiom is_empty__def_axiom2 :
  (forall s:us_rep [is_empty(s)]. ((size(s) = 0) -> (is_empty(s) = true)))

logic reset__specific_post : int, us_split_fields, int,
  us_split_fields -> prop

axiom stacks__stack_root__compat_axiom :
  (forall stacks__reset__s__fields:us_split_fields.
  forall stacks__reset__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int [reset__specific_post(us_tag,
  stacks__reset__s__fields, s__attr__tag1, stacks__reset__s__old__fields)].
  (reset__specific_post(us_tag, stacks__reset__s__fields, s__attr__tag1,
  stacks__reset__s__old__fields) ->
  (forall stacks__reset__s__fields1:us_split_fields.
  forall s__attr__tag2:int. is_empty__function_guard(is_empty({
  us_split_fields1 = stacks__reset__s__fields1; attr__tag = s__attr__tag2 }),
  { us_split_fields1 = stacks__reset__s__fields1; attr__tag = s__attr__tag2
  })))))

axiom stacks__stack_root__compat_axiom1 :
  (forall stacks__reset__s__fields:us_split_fields.
  forall stacks__reset__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int [reset__specific_post(us_tag,
  stacks__reset__s__fields, s__attr__tag1, stacks__reset__s__old__fields)].
  (reset__specific_post(us_tag, stacks__reset__s__fields, s__attr__tag1,
  stacks__reset__s__old__fields) -> (is_empty({ us_split_fields1 =
  stacks__reset__s__fields; attr__tag = s__attr__tag1 }) = true))))

logic attr__ATTRIBUTE_ADDRESS2 : int

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq4 : integer, integer -> bool

logic dummy4 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : positive, positive -> bool

logic dummy5 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,element) farray; rt : t
}

function to_array(a: us_t) : (int,element) farray = (a).elts

function of_array(a: (int,element) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq1((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq6 : us_t, us_t -> bool

logic dummy6 : us_t

type model__ref = { model__content : us_t
}

function model__ref_model__content__projection(a: model__ref) : us_t =
  (a).model__content

logic get_model : us_rep -> us_t

logic get_model__function_guard : us_t, us_rep -> prop

logic get_model1 : int, us_rep -> us_t

logic get_model__function_guard1 : us_t, int, us_rep -> prop

predicate dynamic_invariant(temp___expr_224: us_t, temp___is_init_220: bool,
  temp___skip_constant_221: bool, temp___do_toplevel_222: bool,
  temp___do_typ_inv_223: bool) = ((not (temp___skip_constant_221 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_224),
  last1(temp___expr_224)))

axiom get_model__post_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom get_model__post_axiom1 :
  (forall s:us_rep [get_model(s)]. (let result = get_model(s) : us_t in
  (get_model__function_guard(result, s) -> in_range1(first1(result)))))

axiom get_model__post_axiom2 :
  (forall s:us_rep [get_model(s)]. (let result = get_model(s) : us_t in
  (get_model__function_guard(result, s) -> in_range1(last1(result)))))

axiom get_model__post_axiom3 :
  (forall s:us_rep [get_model(s)]. (let result = get_model(s) : us_t in
  (get_model__function_guard(result, s) -> (length(result) = size(s)))))

axiom get_model__post_axiom4 :
  (forall s:us_rep [get_model(s)]. (let result = get_model(s) : us_t in
  (get_model__function_guard(result, s) -> dynamic_invariant(result, true,
  false, true, true))))

axiom get_model__post__dispatch_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom get_model__post__dispatch_axiom1 :
  (forall attr__tag1:int.
  (forall s:us_rep [get_model1(attr__tag1, s)]. (let result =
  get_model1(attr__tag1, s) : us_t in (get_model__function_guard1(result,
  attr__tag1, s) -> in_range1(first1(result))))))

axiom get_model__post__dispatch_axiom2 :
  (forall attr__tag1:int.
  (forall s:us_rep [get_model1(attr__tag1, s)]. (let result =
  get_model1(attr__tag1, s) : us_t in (get_model__function_guard1(result,
  attr__tag1, s) -> in_range1(last1(result))))))

axiom get_model__post__dispatch_axiom3 :
  (forall attr__tag1:int.
  (forall s:us_rep [get_model1(attr__tag1, s)]. (let result =
  get_model1(attr__tag1, s) : us_t in (get_model__function_guard1(result,
  attr__tag1, s) -> (length(result) = size(s))))))

axiom get_model__post__dispatch_axiom4 :
  (forall attr__tag1:int.
  (forall s:us_rep [get_model1(attr__tag1, s)]. (let result =
  get_model1(attr__tag1, s) : us_t in (get_model__function_guard1(result,
  attr__tag1, s) -> dynamic_invariant(result, true, false, true, true)))))

axiom stacks__stack_root__compat_axiom2 :
  (forall s:us_rep [get_model1(us_tag, s)].
  (get_model__function_guard1(get_model1(us_tag, s), us_tag, s) ->
  (forall s1:us_rep. get_model__function_guard(get_model(s1), s1))))

axiom stacks__stack_root__compat_axiom3 :
  (forall s:us_rep [get_model1(us_tag, s)].
  (get_model__function_guard1(get_model1(us_tag, s), us_tag, s) ->
  (get_model(s) = get_model1(us_tag, s))))

logic bool_eq7 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq7(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq7(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length1(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic is_full : us_rep -> bool

logic is_full__function_guard : bool, us_rep -> prop

logic concat : (int,element) farray, int, int, (int,element) farray, int,
  int -> (int,element) farray

axiom concat_def :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))))))

axiom concat_def1 :
  (forall a:(int,element) farray. forall b:(int,element) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((a_last <  i) -> ((concat(a, a_first, a_last, b, b_first,
  b_last)[i]) = (b[((i - a_last) + (b_first - 1))]))))))

logic concat_singleton_left : element, int, (int,element) farray, int,
  int -> (int,element) farray

axiom concat_singleton_left_def :
  (forall a:element.
  (forall b:(int,element) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  ((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a))))

axiom concat_singleton_left_def1 :
  (forall a:element.
  (forall b:(int,element) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))])))))))

logic concat_singleton_right : (int,element) farray, int, int,
  element -> (int,element) farray

axiom concat_singleton_right_def :
  (forall a:(int,element) farray.
  (forall b:element.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. ((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b))))

axiom concat_singleton_right_def1 :
  (forall a:(int,element) farray.
  (forall b:element.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)].
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i])))))))

logic concat_singletons : element, int, element -> (int,element) farray

axiom concat_singletons_def :
  (forall a:element. forall b:element.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  ((concat_singletons(a, a_first, b)[a_first]) = a)))

axiom concat_singletons_def1 :
  (forall a:element. forall b:element.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b)))

logic singleton : element, int -> (int,element) farray

axiom singleton_def :
  (forall v:element.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

logic push__specific_post : int, us_split_fields, int, int,
  us_split_fields -> prop

axiom stacks__stack_root__compat_axiom4 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag,
  stacks__push__s__fields, s__attr__tag1, e, stacks__push__s__old__fields)].
  (push__specific_post(us_tag, stacks__push__s__fields, s__attr__tag1, e,
  stacks__push__s__old__fields) ->
  (forall stacks__push__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. get_model__function_guard(get_model({
  us_split_fields1 = stacks__push__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__push__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom5 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag,
  stacks__push__s__fields, s__attr__tag1, e, stacks__push__s__old__fields)].
  (push__specific_post(us_tag, stacks__push__s__fields, s__attr__tag1, e,
  stacks__push__s__old__fields) ->
  (forall stacks__push__s__fields1:us_split_fields. forall s__attr__tag2:int.
  get_model__function_guard(get_model({ us_split_fields1 =
  stacks__push__s__fields1; attr__tag = s__attr__tag2 }), {
  us_split_fields1 = stacks__push__s__fields1; attr__tag = s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom6 :
  (forall stacks__push__s__fields:us_split_fields.
  forall stacks__push__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall e:int [push__specific_post(us_tag,
  stacks__push__s__fields, s__attr__tag1, e, stacks__push__s__old__fields)].
  (push__specific_post(us_tag, stacks__push__s__fields, s__attr__tag1, e,
  stacks__push__s__old__fields) -> (let temp___old_255 = get_model({
  us_split_fields1 = stacks__push__s__old__fields; attr__tag = s__attr__tag1
  }) : us_t in (bool_eq1(to_array(get_model({ us_split_fields1 =
  stacks__push__s__fields; attr__tag = s__attr__tag1 })), first1(get_model({
  us_split_fields1 = stacks__push__s__fields; attr__tag = s__attr__tag1 })),
  last1(get_model({ us_split_fields1 = stacks__push__s__fields; attr__tag =
  s__attr__tag1 })),
  to_array((if (length(temp___old_255) = 0) then of_array(singleton(of_rep(e),
  1), 1, 1) else of_array(concat_singleton_right(to_array(temp___old_255),
  first1(temp___old_255), last1(temp___old_255), of_rep(e)),
  first1(temp___old_255),
  ((first1(temp___old_255) + (length1(first1(temp___old_255),
  last1(temp___old_255)) + 1)) - 1)))),
  first1((if (length(temp___old_255) = 0) then of_array(singleton(of_rep(e),
  1), 1, 1) else of_array(concat_singleton_right(to_array(temp___old_255),
  first1(temp___old_255), last1(temp___old_255), of_rep(e)),
  first1(temp___old_255),
  ((first1(temp___old_255) + (length1(first1(temp___old_255),
  last1(temp___old_255)) + 1)) - 1)))),
  last1((if (length(temp___old_255) = 0) then of_array(singleton(of_rep(e),
  1), 1, 1) else of_array(concat_singleton_right(to_array(temp___old_255),
  first1(temp___old_255), last1(temp___old_255), of_rep(e)),
  first1(temp___old_255),
  ((first1(temp___old_255) + (length1(first1(temp___old_255),
  last1(temp___old_255)) + 1)) - 1))))) = true)))))

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant1(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_164))

type t14s__ref = { t14s__content : us_t
}

function t14s__ref_t14s__content__projection(a: t14s__ref) : us_t =
  (a).t14s__content

type t5b__ref = { t5b__content : us_t
}

function t5b__ref_t5b__content__projection(a: t5b__ref) : us_t =
  (a).t5b__content

logic pop__specific_post : int, us_split_fields, int, int, us_split_fields,
  int -> prop

axiom stacks__stack_root__compat_axiom7 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. get_model__function_guard(get_model({
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__pop__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom8 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. get_model__function_guard(get_model({
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__pop__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom9 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. is_empty__function_guard(is_empty({
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__pop__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom10 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. get_model__function_guard(get_model({
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__pop__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom11 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. get_model__function_guard(get_model({
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__pop__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom12 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__old__fields1:us_split_fields.
  forall s__attr__tag2:int. get_model__function_guard(get_model({
  us_split_fields1 = stacks__pop__s__old__fields1; attr__tag = s__attr__tag2
  }), { us_split_fields1 = stacks__pop__s__old__fields1; attr__tag =
  s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom13 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (forall stacks__pop__s__fields1:us_split_fields. forall s__attr__tag2:int.
  get_model__function_guard(get_model({ us_split_fields1 =
  stacks__pop__s__fields1; attr__tag = s__attr__tag2 }), { us_split_fields1 =
  stacks__pop__s__fields1; attr__tag = s__attr__tag2 })))))

axiom stacks__stack_root__compat_axiom14 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  (let temp___old_299 = get_model({ us_split_fields1 =
  stacks__pop__s__old__fields; attr__tag = s__attr__tag1 }) : us_t in
  (let temp___old_297 = get_model({ us_split_fields1 =
  stacks__pop__s__old__fields; attr__tag = s__attr__tag1 }) : us_t in
  (let temp___old_301 = get_model({ us_split_fields1 =
  stacks__pop__s__old__fields; attr__tag = s__attr__tag1 }) : us_t in
  (bool_eq1(to_array(get_model({ us_split_fields1 = stacks__pop__s__fields;
  attr__tag = s__attr__tag1 })), first1(get_model({ us_split_fields1 =
  stacks__pop__s__fields; attr__tag = s__attr__tag1 })), last1(get_model({
  us_split_fields1 = stacks__pop__s__fields; attr__tag = s__attr__tag1 })),
  to_array(of_array(to_array(temp___old_301), first1(temp___old_297),
  (last1(temp___old_299) - 1))), first1(of_array(to_array(temp___old_301),
  first1(temp___old_297), (last1(temp___old_299) - 1))),
  last1(of_array(to_array(temp___old_301), first1(temp___old_297),
  (last1(temp___old_299) - 1)))) = true)))))))

axiom stacks__stack_root__compat_axiom15 :
  (forall stacks__pop__s__fields:us_split_fields.
  forall stacks__pop__s__old__fields:us_split_fields.
  (forall s__attr__tag1:int. forall stacks__pop__e:int.
  forall stacks__pop__e__old:int [pop__specific_post(us_tag,
  stacks__pop__s__fields, s__attr__tag1, stacks__pop__e,
  stacks__pop__s__old__fields, stacks__pop__e__old)].
  (pop__specific_post(us_tag, stacks__pop__s__fields, s__attr__tag1,
  stacks__pop__e, stacks__pop__s__old__fields, stacks__pop__e__old) ->
  ((not (is_empty({ us_split_fields1 = stacks__pop__s__old__fields;
  attr__tag = s__attr__tag1 }) = true)) ->
  (stacks__pop__e = to_rep((to_array(get_model({ us_split_fields1 =
  stacks__pop__s__old__fields; attr__tag = s__attr__tag1
  }))[last1(get_model({ us_split_fields1 = stacks__pop__s__old__fields;
  attr__tag = s__attr__tag1 }))])))))))

type t2b

logic t2bqtint : t2b -> int

axiom t2bqtaxiom : (forall i:t2b. (1 <= t2bqtint(i)))

axiom t2bqtaxiom1 : (forall i:t2b. (t2bqtint(i) <= 5))

predicate in_range4(x: int) = ((1 <= x) and (x <= 5))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : t2b, t2b -> bool

logic dummy7 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : t2b =
  (a).t2b__content

logic temp_____aggregate_def_341 : int, int, int, int,
  int -> (int,element) farray

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

logic rliteral : element

axiom rliteral_axiom : (elementqtint(rliteral) = 1)

logic rliteral1 : element

axiom rliteral_axiom1 : (elementqtint(rliteral1) = 2)

logic rliteral2 : element

axiom rliteral_axiom2 : (elementqtint(rliteral2) = 3)

logic rliteral3 : element

axiom rliteral_axiom3 : (elementqtint(rliteral3) = 4)

logic rliteral4 : element

axiom rliteral_axiom4 : (elementqtint(rliteral4) = 5)

axiom def_axiom :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  forall temp___346:int. forall temp___347:int.
  (((dynamic_invariant1(temp___343, true, true, true, true) and
  dynamic_invariant1(temp___344, true, true, true, true)) and
  ((dynamic_invariant1(temp___345, true, true, true, true) and
  dynamic_invariant1(temp___346, true, true, true, true)) and
  dynamic_invariant1(temp___347, true, true, true, true))) ->
  ((temp_____aggregate_def_341(temp___343, temp___344, temp___345,
  temp___346, temp___347)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  forall temp___346:int. forall temp___347:int.
  (((dynamic_invariant1(temp___343, true, true, true, true) and
  dynamic_invariant1(temp___344, true, true, true, true)) and
  ((dynamic_invariant1(temp___345, true, true, true, true) and
  dynamic_invariant1(temp___346, true, true, true, true)) and
  dynamic_invariant1(temp___347, true, true, true, true))) ->
  ((temp_____aggregate_def_341(temp___343, temp___344, temp___345,
  temp___346, temp___347)[2]) = rliteral1)))

axiom def_axiom2 :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  forall temp___346:int. forall temp___347:int.
  (((dynamic_invariant1(temp___343, true, true, true, true) and
  dynamic_invariant1(temp___344, true, true, true, true)) and
  ((dynamic_invariant1(temp___345, true, true, true, true) and
  dynamic_invariant1(temp___346, true, true, true, true)) and
  dynamic_invariant1(temp___347, true, true, true, true))) ->
  ((temp_____aggregate_def_341(temp___343, temp___344, temp___345,
  temp___346, temp___347)[3]) = rliteral2)))

axiom def_axiom3 :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  forall temp___346:int. forall temp___347:int.
  (((dynamic_invariant1(temp___343, true, true, true, true) and
  dynamic_invariant1(temp___344, true, true, true, true)) and
  ((dynamic_invariant1(temp___345, true, true, true, true) and
  dynamic_invariant1(temp___346, true, true, true, true)) and
  dynamic_invariant1(temp___347, true, true, true, true))) ->
  ((temp_____aggregate_def_341(temp___343, temp___344, temp___345,
  temp___346, temp___347)[4]) = rliteral3)))

axiom def_axiom4 :
  (forall temp___343:int. forall temp___344:int. forall temp___345:int.
  forall temp___346:int. forall temp___347:int.
  (((dynamic_invariant1(temp___343, true, true, true, true) and
  dynamic_invariant1(temp___344, true, true, true, true)) and
  ((dynamic_invariant1(temp___345, true, true, true, true) and
  dynamic_invariant1(temp___346, true, true, true, true)) and
  dynamic_invariant1(temp___347, true, true, true, true))) ->
  ((temp_____aggregate_def_341(temp___343, temp___344, temp___345,
  temp___346, temp___347)[5]) = rliteral4)))

predicate dynamic_invariant4(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  (0 <= 100)) -> in_range1(temp___expr_181))

axiom size__post_axiom :
  (forall s:us_rep [size(s)]. (let result = size(s) : int in
  (size__function_guard(result, s) -> dynamic_invariant4(result, true, false,
  true, true))))

axiom size__def_axiom :
  (forall s:us_rep [size(s)].
  (size(s) = to_rep1(((s).us_split_fields1).rec__stacks__stack_root__length)))

axiom is_full__def_axiom :
  (forall s:us_rep. size__function_guard(size(s), s))

axiom is_full__def_axiom1 :
  (forall s:us_rep [is_full(s)]. ((is_full(s) = true) -> (size(s) = 100)))

axiom is_full__def_axiom2 :
  (forall s:us_rep [is_full(s)]. ((size(s) = 100) -> (is_full(s) = true)))

logic rliteral5 : element

axiom rliteral_axiom5 : (elementqtint(rliteral5) = 0)

axiom def_axiom5 :
  (forall temp___194:int. (dynamic_invariant1(temp___194, true, true, true,
  true) ->
  (forall temp___195:int.
  ((temp_____aggregate_def_192(temp___194)[temp___195]) = rliteral5))))

 (* File "test_stack.adb", line 2, characters 0-0 *)
goal defqtvc :
  (forall s__split_fields:us_split_fields. forall e:int.
  (dynamic_invariant1(e, false, false, true, true) -> (let o = s__attr__tag
  : int in
  (forall s__split_fields1:us_split_fields.
  ((forall o1:int. forall s__split_fields2:us_split_fields.
   is_empty__function_guard(is_empty({ us_split_fields1 = s__split_fields2;
   attr__tag = o1 }), { us_split_fields1 = s__split_fields2; attr__tag = o1
   })) ->
  (((is_empty({ us_split_fields1 = s__split_fields1; attr__tag = o
  }) = true) and reset__specific_post(o, s__split_fields1, o,
  s__split_fields)) ->
  (forall i:int. ((i = 1) -> (let o1 = s__attr__tag : int in
  (forall s__split_fields2:us_split_fields.
  ((forall s__split_fields3:us_split_fields. forall o2:int.
   get_model__function_guard1(get_model1(o2, { us_split_fields1 =
   s__split_fields3; attr__tag = o2 }), o2, { us_split_fields1 =
   s__split_fields3; attr__tag = o2 })) ->
  ((forall o2:int. forall s__split_fields3:us_split_fields.
   get_model__function_guard1(get_model1(o2, { us_split_fields1 =
   s__split_fields3; attr__tag = o2 }), o2, { us_split_fields1 =
   s__split_fields3; attr__tag = o2 })) ->
  (((bool_eq1(to_array(get_model1(o1, { us_split_fields1 = s__split_fields2;
  attr__tag = o1 })), first1(get_model1(o1, { us_split_fields1 =
  s__split_fields2; attr__tag = o1 })), last1(get_model1(o1, {
  us_split_fields1 = s__split_fields2; attr__tag = o1 })),
  to_array((if (length(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })) = 0) then of_array(singleton(of_rep(i), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o1, {
  us_split_fields1 = s__split_fields1; attr__tag = o1 })),
  first1(get_model1(o1, { us_split_fields1 = s__split_fields1; attr__tag = o1
  })), last1(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })), of_rep(i)), first1(get_model1(o1, { us_split_fields1 =
  s__split_fields1; attr__tag = o1 })), ((first1(get_model1(o1, {
  us_split_fields1 = s__split_fields1; attr__tag = o1
  })) + (length1(first1(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })), last1(get_model1(o1, { us_split_fields1 =
  s__split_fields1; attr__tag = o1 }))) + 1)) - 1)))),
  first1((if (length(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })) = 0) then of_array(singleton(of_rep(i), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o1, {
  us_split_fields1 = s__split_fields1; attr__tag = o1 })),
  first1(get_model1(o1, { us_split_fields1 = s__split_fields1; attr__tag = o1
  })), last1(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })), of_rep(i)), first1(get_model1(o1, { us_split_fields1 =
  s__split_fields1; attr__tag = o1 })), ((first1(get_model1(o1, {
  us_split_fields1 = s__split_fields1; attr__tag = o1
  })) + (length1(first1(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })), last1(get_model1(o1, { us_split_fields1 =
  s__split_fields1; attr__tag = o1 }))) + 1)) - 1)))),
  last1((if (length(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })) = 0) then of_array(singleton(of_rep(i), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o1, {
  us_split_fields1 = s__split_fields1; attr__tag = o1 })),
  first1(get_model1(o1, { us_split_fields1 = s__split_fields1; attr__tag = o1
  })), last1(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })), of_rep(i)), first1(get_model1(o1, { us_split_fields1 =
  s__split_fields1; attr__tag = o1 })), ((first1(get_model1(o1, {
  us_split_fields1 = s__split_fields1; attr__tag = o1
  })) + (length1(first1(get_model1(o1, { us_split_fields1 = s__split_fields1;
  attr__tag = o1 })), last1(get_model1(o1, { us_split_fields1 =
  s__split_fields1; attr__tag = o1 }))) + 1)) - 1))))) = true) and
  push__specific_post(o1, s__split_fields2, o1, i, s__split_fields1)) ->
  (forall i1:int. ((i1 = 2) -> (let o2 = s__attr__tag : int in
  (forall s__split_fields3:us_split_fields.
  ((forall s__split_fields4:us_split_fields. forall o3:int.
   get_model__function_guard1(get_model1(o3, { us_split_fields1 =
   s__split_fields4; attr__tag = o3 }), o3, { us_split_fields1 =
   s__split_fields4; attr__tag = o3 })) ->
  ((forall o3:int. forall s__split_fields4:us_split_fields.
   get_model__function_guard1(get_model1(o3, { us_split_fields1 =
   s__split_fields4; attr__tag = o3 }), o3, { us_split_fields1 =
   s__split_fields4; attr__tag = o3 })) ->
  (((bool_eq1(to_array(get_model1(o2, { us_split_fields1 = s__split_fields3;
  attr__tag = o2 })), first1(get_model1(o2, { us_split_fields1 =
  s__split_fields3; attr__tag = o2 })), last1(get_model1(o2, {
  us_split_fields1 = s__split_fields3; attr__tag = o2 })),
  to_array((if (length(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })) = 0) then of_array(singleton(of_rep(i1), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o2, {
  us_split_fields1 = s__split_fields2; attr__tag = o2 })),
  first1(get_model1(o2, { us_split_fields1 = s__split_fields2; attr__tag = o2
  })), last1(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })), of_rep(i1)), first1(get_model1(o2, { us_split_fields1 =
  s__split_fields2; attr__tag = o2 })), ((first1(get_model1(o2, {
  us_split_fields1 = s__split_fields2; attr__tag = o2
  })) + (length1(first1(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })), last1(get_model1(o2, { us_split_fields1 =
  s__split_fields2; attr__tag = o2 }))) + 1)) - 1)))),
  first1((if (length(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })) = 0) then of_array(singleton(of_rep(i1), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o2, {
  us_split_fields1 = s__split_fields2; attr__tag = o2 })),
  first1(get_model1(o2, { us_split_fields1 = s__split_fields2; attr__tag = o2
  })), last1(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })), of_rep(i1)), first1(get_model1(o2, { us_split_fields1 =
  s__split_fields2; attr__tag = o2 })), ((first1(get_model1(o2, {
  us_split_fields1 = s__split_fields2; attr__tag = o2
  })) + (length1(first1(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })), last1(get_model1(o2, { us_split_fields1 =
  s__split_fields2; attr__tag = o2 }))) + 1)) - 1)))),
  last1((if (length(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })) = 0) then of_array(singleton(of_rep(i1), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o2, {
  us_split_fields1 = s__split_fields2; attr__tag = o2 })),
  first1(get_model1(o2, { us_split_fields1 = s__split_fields2; attr__tag = o2
  })), last1(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })), of_rep(i1)), first1(get_model1(o2, { us_split_fields1 =
  s__split_fields2; attr__tag = o2 })), ((first1(get_model1(o2, {
  us_split_fields1 = s__split_fields2; attr__tag = o2
  })) + (length1(first1(get_model1(o2, { us_split_fields1 = s__split_fields2;
  attr__tag = o2 })), last1(get_model1(o2, { us_split_fields1 =
  s__split_fields2; attr__tag = o2 }))) + 1)) - 1))))) = true) and
  push__specific_post(o2, s__split_fields3, o2, i1, s__split_fields2)) ->
  (forall i2:int. ((i2 = 3) -> (let o3 = s__attr__tag : int in
  (forall s__split_fields4:us_split_fields.
  ((forall s__split_fields5:us_split_fields. forall o4:int.
   get_model__function_guard1(get_model1(o4, { us_split_fields1 =
   s__split_fields5; attr__tag = o4 }), o4, { us_split_fields1 =
   s__split_fields5; attr__tag = o4 })) ->
  ((forall o4:int. forall s__split_fields5:us_split_fields.
   get_model__function_guard1(get_model1(o4, { us_split_fields1 =
   s__split_fields5; attr__tag = o4 }), o4, { us_split_fields1 =
   s__split_fields5; attr__tag = o4 })) ->
  (((bool_eq1(to_array(get_model1(o3, { us_split_fields1 = s__split_fields4;
  attr__tag = o3 })), first1(get_model1(o3, { us_split_fields1 =
  s__split_fields4; attr__tag = o3 })), last1(get_model1(o3, {
  us_split_fields1 = s__split_fields4; attr__tag = o3 })),
  to_array((if (length(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })) = 0) then of_array(singleton(of_rep(i2), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o3, {
  us_split_fields1 = s__split_fields3; attr__tag = o3 })),
  first1(get_model1(o3, { us_split_fields1 = s__split_fields3; attr__tag = o3
  })), last1(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })), of_rep(i2)), first1(get_model1(o3, { us_split_fields1 =
  s__split_fields3; attr__tag = o3 })), ((first1(get_model1(o3, {
  us_split_fields1 = s__split_fields3; attr__tag = o3
  })) + (length1(first1(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })), last1(get_model1(o3, { us_split_fields1 =
  s__split_fields3; attr__tag = o3 }))) + 1)) - 1)))),
  first1((if (length(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })) = 0) then of_array(singleton(of_rep(i2), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o3, {
  us_split_fields1 = s__split_fields3; attr__tag = o3 })),
  first1(get_model1(o3, { us_split_fields1 = s__split_fields3; attr__tag = o3
  })), last1(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })), of_rep(i2)), first1(get_model1(o3, { us_split_fields1 =
  s__split_fields3; attr__tag = o3 })), ((first1(get_model1(o3, {
  us_split_fields1 = s__split_fields3; attr__tag = o3
  })) + (length1(first1(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })), last1(get_model1(o3, { us_split_fields1 =
  s__split_fields3; attr__tag = o3 }))) + 1)) - 1)))),
  last1((if (length(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })) = 0) then of_array(singleton(of_rep(i2), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o3, {
  us_split_fields1 = s__split_fields3; attr__tag = o3 })),
  first1(get_model1(o3, { us_split_fields1 = s__split_fields3; attr__tag = o3
  })), last1(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })), of_rep(i2)), first1(get_model1(o3, { us_split_fields1 =
  s__split_fields3; attr__tag = o3 })), ((first1(get_model1(o3, {
  us_split_fields1 = s__split_fields3; attr__tag = o3
  })) + (length1(first1(get_model1(o3, { us_split_fields1 = s__split_fields3;
  attr__tag = o3 })), last1(get_model1(o3, { us_split_fields1 =
  s__split_fields3; attr__tag = o3 }))) + 1)) - 1))))) = true) and
  push__specific_post(o3, s__split_fields4, o3, i2, s__split_fields3)) ->
  (forall i3:int. ((i3 = 4) -> (let o4 = s__attr__tag : int in
  (forall s__split_fields5:us_split_fields.
  ((forall s__split_fields6:us_split_fields. forall o5:int.
   get_model__function_guard1(get_model1(o5, { us_split_fields1 =
   s__split_fields6; attr__tag = o5 }), o5, { us_split_fields1 =
   s__split_fields6; attr__tag = o5 })) ->
  ((forall o5:int. forall s__split_fields6:us_split_fields.
   get_model__function_guard1(get_model1(o5, { us_split_fields1 =
   s__split_fields6; attr__tag = o5 }), o5, { us_split_fields1 =
   s__split_fields6; attr__tag = o5 })) ->
  (((bool_eq1(to_array(get_model1(o4, { us_split_fields1 = s__split_fields5;
  attr__tag = o4 })), first1(get_model1(o4, { us_split_fields1 =
  s__split_fields5; attr__tag = o4 })), last1(get_model1(o4, {
  us_split_fields1 = s__split_fields5; attr__tag = o4 })),
  to_array((if (length(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })) = 0) then of_array(singleton(of_rep(i3), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o4, {
  us_split_fields1 = s__split_fields4; attr__tag = o4 })),
  first1(get_model1(o4, { us_split_fields1 = s__split_fields4; attr__tag = o4
  })), last1(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })), of_rep(i3)), first1(get_model1(o4, { us_split_fields1 =
  s__split_fields4; attr__tag = o4 })), ((first1(get_model1(o4, {
  us_split_fields1 = s__split_fields4; attr__tag = o4
  })) + (length1(first1(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })), last1(get_model1(o4, { us_split_fields1 =
  s__split_fields4; attr__tag = o4 }))) + 1)) - 1)))),
  first1((if (length(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })) = 0) then of_array(singleton(of_rep(i3), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o4, {
  us_split_fields1 = s__split_fields4; attr__tag = o4 })),
  first1(get_model1(o4, { us_split_fields1 = s__split_fields4; attr__tag = o4
  })), last1(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })), of_rep(i3)), first1(get_model1(o4, { us_split_fields1 =
  s__split_fields4; attr__tag = o4 })), ((first1(get_model1(o4, {
  us_split_fields1 = s__split_fields4; attr__tag = o4
  })) + (length1(first1(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })), last1(get_model1(o4, { us_split_fields1 =
  s__split_fields4; attr__tag = o4 }))) + 1)) - 1)))),
  last1((if (length(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })) = 0) then of_array(singleton(of_rep(i3), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o4, {
  us_split_fields1 = s__split_fields4; attr__tag = o4 })),
  first1(get_model1(o4, { us_split_fields1 = s__split_fields4; attr__tag = o4
  })), last1(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })), of_rep(i3)), first1(get_model1(o4, { us_split_fields1 =
  s__split_fields4; attr__tag = o4 })), ((first1(get_model1(o4, {
  us_split_fields1 = s__split_fields4; attr__tag = o4
  })) + (length1(first1(get_model1(o4, { us_split_fields1 = s__split_fields4;
  attr__tag = o4 })), last1(get_model1(o4, { us_split_fields1 =
  s__split_fields4; attr__tag = o4 }))) + 1)) - 1))))) = true) and
  push__specific_post(o4, s__split_fields5, o4, i3, s__split_fields4)) ->
  (forall i4:int. ((i4 = 5) -> (let o5 = s__attr__tag : int in
  (forall s__split_fields6:us_split_fields.
  ((forall s__split_fields7:us_split_fields. forall o6:int.
   get_model__function_guard1(get_model1(o6, { us_split_fields1 =
   s__split_fields7; attr__tag = o6 }), o6, { us_split_fields1 =
   s__split_fields7; attr__tag = o6 })) ->
  ((forall o6:int. forall s__split_fields7:us_split_fields.
   get_model__function_guard1(get_model1(o6, { us_split_fields1 =
   s__split_fields7; attr__tag = o6 }), o6, { us_split_fields1 =
   s__split_fields7; attr__tag = o6 })) ->
  (((bool_eq1(to_array(get_model1(o5, { us_split_fields1 = s__split_fields6;
  attr__tag = o5 })), first1(get_model1(o5, { us_split_fields1 =
  s__split_fields6; attr__tag = o5 })), last1(get_model1(o5, {
  us_split_fields1 = s__split_fields6; attr__tag = o5 })),
  to_array((if (length(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })) = 0) then of_array(singleton(of_rep(i4), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o5, {
  us_split_fields1 = s__split_fields5; attr__tag = o5 })),
  first1(get_model1(o5, { us_split_fields1 = s__split_fields5; attr__tag = o5
  })), last1(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })), of_rep(i4)), first1(get_model1(o5, { us_split_fields1 =
  s__split_fields5; attr__tag = o5 })), ((first1(get_model1(o5, {
  us_split_fields1 = s__split_fields5; attr__tag = o5
  })) + (length1(first1(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })), last1(get_model1(o5, { us_split_fields1 =
  s__split_fields5; attr__tag = o5 }))) + 1)) - 1)))),
  first1((if (length(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })) = 0) then of_array(singleton(of_rep(i4), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o5, {
  us_split_fields1 = s__split_fields5; attr__tag = o5 })),
  first1(get_model1(o5, { us_split_fields1 = s__split_fields5; attr__tag = o5
  })), last1(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })), of_rep(i4)), first1(get_model1(o5, { us_split_fields1 =
  s__split_fields5; attr__tag = o5 })), ((first1(get_model1(o5, {
  us_split_fields1 = s__split_fields5; attr__tag = o5
  })) + (length1(first1(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })), last1(get_model1(o5, { us_split_fields1 =
  s__split_fields5; attr__tag = o5 }))) + 1)) - 1)))),
  last1((if (length(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })) = 0) then of_array(singleton(of_rep(i4), 1), 1,
  1) else of_array(concat_singleton_right(to_array(get_model1(o5, {
  us_split_fields1 = s__split_fields5; attr__tag = o5 })),
  first1(get_model1(o5, { us_split_fields1 = s__split_fields5; attr__tag = o5
  })), last1(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })), of_rep(i4)), first1(get_model1(o5, { us_split_fields1 =
  s__split_fields5; attr__tag = o5 })), ((first1(get_model1(o5, {
  us_split_fields1 = s__split_fields5; attr__tag = o5
  })) + (length1(first1(get_model1(o5, { us_split_fields1 = s__split_fields5;
  attr__tag = o5 })), last1(get_model1(o5, { us_split_fields1 =
  s__split_fields5; attr__tag = o5 }))) + 1)) - 1))))) = true) and
  push__specific_post(o5, s__split_fields6, o5, i4, s__split_fields5)) ->
  ((forall s__split_fields7:us_split_fields.
   get_model__function_guard1(get_model1(s__attr__tag, { us_split_fields1 =
   s__split_fields7; attr__tag = s__attr__tag }), s__attr__tag, {
   us_split_fields1 = s__split_fields7; attr__tag = s__attr__tag })) ->
  (bool_eq1(to_array(get_model1(s__attr__tag, { us_split_fields1 =
  s__split_fields6; attr__tag = s__attr__tag })),
  first1(get_model1(s__attr__tag, { us_split_fields1 = s__split_fields6;
  attr__tag = s__attr__tag })), last1(get_model1(s__attr__tag, {
  us_split_fields1 = s__split_fields6; attr__tag = s__attr__tag })),
  temp_____aggregate_def_341(1, 2, 3, 4, 5), 1, 5) = true)))))))))))))))))))))))))))))))))))))))))))
