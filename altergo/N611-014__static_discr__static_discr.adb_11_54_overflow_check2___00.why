(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref_nat_array__content__projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

type t4s__ref = { t4s__content : us_t
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : us_t =
  (a).t4s__content

type us_split_discrs = { rec__static_discr__i_holder__unused : natural;
rec__static_discr__i_holder__c : natural
}

function us_split_discrs_rec__static_discr__i_holder__unused__projection(a: us_split_discrs) : natural =
  (a).rec__static_discr__i_holder__unused

function us_split_discrs_rec__static_discr__i_holder__c__projection(a: us_split_discrs) : natural =
  (a).rec__static_discr__i_holder__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__static_discr__i_holder__content : us_t
}

function us_split_fields_rec__static_discr__i_holder__content__projection(a: us_split_fields) : us_t =
  (a).rec__static_discr__i_holder__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if (((to_rep(((a).us_split_discrs1).rec__static_discr__i_holder__unused) = to_rep(((b).us_split_discrs1).rec__static_discr__i_holder__unused)) and
  (to_rep(((a).us_split_discrs1).rec__static_discr__i_holder__c) = to_rep(((b).us_split_discrs1).rec__static_discr__i_holder__c))) and
  (bool_eq5(((a).us_split_fields1).rec__static_discr__i_holder__content,
  ((b).us_split_fields1).rec__static_discr__i_holder__content) = true)) then true else false)

predicate in_range4(rec__static_discr__i_holder__unused1: int,
  rec__static_discr__i_holder__c1: int, a: us_split_discrs) =
  ((rec__static_discr__i_holder__unused1 = to_rep((a).rec__static_discr__i_holder__unused)) and
  (rec__static_discr__i_holder__c1 = to_rep((a).rec__static_discr__i_holder__c)))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic static_discr__i_holder__unused__first__bit : int

logic static_discr__i_holder__unused__last__bit : int

logic static_discr__i_holder__unused__position : int

axiom static_discr__i_holder__unused__first__bit_axiom :
  (0 <= static_discr__i_holder__unused__first__bit)

axiom static_discr__i_holder__unused__last__bit_axiom :
  (static_discr__i_holder__unused__first__bit <  static_discr__i_holder__unused__last__bit)

axiom static_discr__i_holder__unused__position_axiom :
  (0 <= static_discr__i_holder__unused__position)

logic static_discr__i_holder__c__first__bit : int

logic static_discr__i_holder__c__last__bit : int

logic static_discr__i_holder__c__position : int

axiom static_discr__i_holder__c__first__bit_axiom :
  (0 <= static_discr__i_holder__c__first__bit)

axiom static_discr__i_holder__c__last__bit_axiom :
  (static_discr__i_holder__c__first__bit <  static_discr__i_holder__c__last__bit)

axiom static_discr__i_holder__c__position_axiom :
  (0 <= static_discr__i_holder__c__position)

logic static_discr__i_holder__content__first__bit : int

logic static_discr__i_holder__content__last__bit : int

logic static_discr__i_holder__content__position : int

axiom static_discr__i_holder__content__first__bit_axiom :
  (0 <= static_discr__i_holder__content__first__bit)

axiom static_discr__i_holder__content__last__bit_axiom :
  (static_discr__i_holder__content__first__bit <  static_discr__i_holder__content__last__bit)

axiom static_discr__i_holder__content__position_axiom :
  (0 <= static_discr__i_holder__content__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type i_holder__ref = { i_holder__content : us_rep
}

function i_holder__ref_i_holder__content__projection(a: i_holder__ref) : us_rep =
  (a).i_holder__content

type t6s__ref = { t6s__content : us_t
}

function t6s__ref_t6s__content__projection(a: t6s__ref) : us_t =
  (a).t6s__content

type us_split_fields2 = { rec__static_discr__i_holder__content1 : us_t
}

function us_split_fields_rec__static_discr__i_holder__content__2__projection(a: us_split_fields2) : us_t =
  (a).rec__static_discr__i_holder__content1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__static_discr__i_holder__content =
  of_array(to_array(((a).us_split_fields3).rec__static_discr__i_holder__content1),
  first1(((a).us_split_fields3).rec__static_discr__i_holder__content1),
  last1(((a).us_split_fields3).rec__static_discr__i_holder__content1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__static_discr__i_holder__content1 =
  of_array(to_array(((r).us_split_fields1).rec__static_discr__i_holder__content),
  first1(((r).us_split_fields1).rec__static_discr__i_holder__content),
  last1(((r).us_split_fields1).rec__static_discr__i_holder__content)) } }

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if (((to_rep(((a).us_split_discrs2).rec__static_discr__i_holder__unused) = to_rep(((b).us_split_discrs2).rec__static_discr__i_holder__unused)) and
  (to_rep(((a).us_split_discrs2).rec__static_discr__i_holder__c) = to_rep(((b).us_split_discrs2).rec__static_discr__i_holder__c))) and
  (bool_eq5(((a).us_split_fields3).rec__static_discr__i_holder__content1,
  ((b).us_split_fields3).rec__static_discr__i_holder__content1) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic static_discr__i_holder__unused__first__bit1 : int

logic static_discr__i_holder__unused__last__bit1 : int

logic static_discr__i_holder__unused__position1 : int

axiom static_discr__i_holder__unused__first__bit_axiom1 :
  (0 <= static_discr__i_holder__unused__first__bit1)

axiom static_discr__i_holder__unused__last__bit_axiom1 :
  (static_discr__i_holder__unused__first__bit1 <  static_discr__i_holder__unused__last__bit1)

axiom static_discr__i_holder__unused__position_axiom1 :
  (0 <= static_discr__i_holder__unused__position1)

logic static_discr__i_holder__c__first__bit1 : int

logic static_discr__i_holder__c__last__bit1 : int

logic static_discr__i_holder__c__position1 : int

axiom static_discr__i_holder__c__first__bit_axiom1 :
  (0 <= static_discr__i_holder__c__first__bit1)

axiom static_discr__i_holder__c__last__bit_axiom1 :
  (static_discr__i_holder__c__first__bit1 <  static_discr__i_holder__c__last__bit1)

axiom static_discr__i_holder__c__position_axiom1 :
  (0 <= static_discr__i_holder__c__position1)

logic static_discr__i_holder__content__first__bit1 : int

logic static_discr__i_holder__content__last__bit1 : int

logic static_discr__i_holder__content__position1 : int

axiom static_discr__i_holder__content__first__bit_axiom1 :
  (0 <= static_discr__i_holder__content__first__bit1)

axiom static_discr__i_holder__content__last__bit_axiom1 :
  (static_discr__i_holder__content__first__bit1 <  static_discr__i_holder__content__last__bit1)

axiom static_discr__i_holder__content__position_axiom1 :
  (0 <= static_discr__i_holder__content__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type t5s__ref = { t5s__content : us_rep1
}

function t5s__ref_t5s__content__projection(a: t5s__ref) : us_rep1 =
  (a).t5s__content

type us_split_discrs3 = { rec__static_discr__holder__unused : natural;
rec__static_discr__holder__c : natural
}

function us_split_discrs_rec__static_discr__holder__unused__projection(a: us_split_discrs3) : natural =
  (a).rec__static_discr__holder__unused

function us_split_discrs_rec__static_discr__holder__c__projection(a: us_split_discrs3) : natural =
  (a).rec__static_discr__holder__c

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs3
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs3 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__static_discr__holder__content : us_rep1;
rec__static_discr__holder__length : natural
}

function us_split_fields_rec__static_discr__holder__content__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__static_discr__holder__content

function us_split_fields_rec__static_discr__holder__length__projection(a: us_split_fields4) : natural =
  (a).rec__static_discr__holder__length

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs3; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__3__projection(a: us_rep2) : us_split_discrs3 =
  (a).us_split_discrs4

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq8(a: us_rep2, b: us_rep2) : bool =
  (if (((to_rep(((a).us_split_discrs4).rec__static_discr__holder__unused) = to_rep(((b).us_split_discrs4).rec__static_discr__holder__unused)) and
  (to_rep(((a).us_split_discrs4).rec__static_discr__holder__c) = to_rep(((b).us_split_discrs4).rec__static_discr__holder__c))) and
  ((bool_eq7(((a).us_split_fields5).rec__static_discr__holder__content,
  ((b).us_split_fields5).rec__static_discr__holder__content) = true) and
  (to_rep(((a).us_split_fields5).rec__static_discr__holder__length) = to_rep(((b).us_split_fields5).rec__static_discr__holder__length)))) then true else false)

predicate in_range5(rec__static_discr__holder__unused1: int,
  rec__static_discr__holder__c1: int, a: us_split_discrs3) =
  ((rec__static_discr__holder__unused1 = to_rep((a).rec__static_discr__holder__unused)) and
  (rec__static_discr__holder__c1 = to_rep((a).rec__static_discr__holder__c)))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic static_discr__holder__unused__first__bit : int

logic static_discr__holder__unused__last__bit : int

logic static_discr__holder__unused__position : int

axiom static_discr__holder__unused__first__bit_axiom :
  (0 <= static_discr__holder__unused__first__bit)

axiom static_discr__holder__unused__last__bit_axiom :
  (static_discr__holder__unused__first__bit <  static_discr__holder__unused__last__bit)

axiom static_discr__holder__unused__position_axiom :
  (0 <= static_discr__holder__unused__position)

logic static_discr__holder__c__first__bit : int

logic static_discr__holder__c__last__bit : int

logic static_discr__holder__c__position : int

axiom static_discr__holder__c__first__bit_axiom :
  (0 <= static_discr__holder__c__first__bit)

axiom static_discr__holder__c__last__bit_axiom :
  (static_discr__holder__c__first__bit <  static_discr__holder__c__last__bit)

axiom static_discr__holder__c__position_axiom :
  (0 <= static_discr__holder__c__position)

logic static_discr__holder__content__first__bit : int

logic static_discr__holder__content__last__bit : int

logic static_discr__holder__content__position : int

axiom static_discr__holder__content__first__bit_axiom :
  (0 <= static_discr__holder__content__first__bit)

axiom static_discr__holder__content__last__bit_axiom :
  (static_discr__holder__content__first__bit <  static_discr__holder__content__last__bit)

axiom static_discr__holder__content__position_axiom :
  (0 <= static_discr__holder__content__position)

logic static_discr__holder__length__first__bit : int

logic static_discr__holder__length__last__bit : int

logic static_discr__holder__length__position : int

axiom static_discr__holder__length__first__bit_axiom :
  (0 <= static_discr__holder__length__first__bit)

axiom static_discr__holder__length__last__bit_axiom :
  (static_discr__holder__length__first__bit <  static_discr__holder__length__last__bit)

axiom static_discr__holder__length__position_axiom :
  (0 <= static_discr__holder__length__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type holder__ref = { holder__content : us_rep2
}

function holder__ref_holder__content__projection(a: holder__ref) : us_rep2 =
  (a).holder__content

type tT8sP1

logic tT8sP1qtint : tT8sP1 -> int

axiom tT8sP1qtaxiom : (forall i:tT8sP1. (1 <= tT8sP1qtint(i)))

axiom tT8sP1qtaxiom1 : (forall i:tT8sP1. (tT8sP1qtint(i) <= 100))

predicate in_range6(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : tT8sP1, tT8sP1 -> bool

logic dummy7 : tT8sP1

type tT8sP1__ref = { tT8sP1__content : tT8sP1
}

function tT8sP1__ref_tT8sP1__content__projection(a: tT8sP1__ref) : tT8sP1 =
  (a).tT8sP1__content

logic dummy8 : (int,natural) farray

logic value__size4 : int

logic object__size4 : int

logic component__size1 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq8 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields6 = { rec__static_discr__i_holder__content2 :
(int,natural) farray
}

function us_split_fields_rec__static_discr__i_holder__content__3__projection(a: us_split_fields6) : (int,natural) farray =
  (a).rec__static_discr__i_holder__content2

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs5 : us_split_discrs; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__4__projection(a: us_rep3) : us_split_discrs =
  (a).us_split_discrs5

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base1(a: us_rep3) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs5; us_split_fields1 = {
  rec__static_discr__i_holder__content =
  of_array(((a).us_split_fields7).rec__static_discr__i_holder__content2, 1,
  100) } }

function of_base1(r: us_rep) : us_rep3 = { us_split_discrs5 =
  (r).us_split_discrs1; us_split_fields7 = {
  rec__static_discr__i_holder__content2 =
  to_array(((r).us_split_fields1).rec__static_discr__i_holder__content) } }

function bool_eq10(a: us_rep3, b: us_rep3) : bool =
  (if (((to_rep(((a).us_split_discrs5).rec__static_discr__i_holder__unused) = to_rep(((b).us_split_discrs5).rec__static_discr__i_holder__unused)) and
  (to_rep(((a).us_split_discrs5).rec__static_discr__i_holder__c) = to_rep(((b).us_split_discrs5).rec__static_discr__i_holder__c))) and
  (bool_eq4(((a).us_split_fields7).rec__static_discr__i_holder__content2, 1,
  100, ((b).us_split_fields7).rec__static_discr__i_holder__content2, 1,
  100) = true)) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic static_discr__i_holder__unused__first__bit2 : int

logic static_discr__i_holder__unused__last__bit2 : int

logic static_discr__i_holder__unused__position2 : int

axiom static_discr__i_holder__unused__first__bit_axiom2 :
  (0 <= static_discr__i_holder__unused__first__bit2)

axiom static_discr__i_holder__unused__last__bit_axiom2 :
  (static_discr__i_holder__unused__first__bit2 <  static_discr__i_holder__unused__last__bit2)

axiom static_discr__i_holder__unused__position_axiom2 :
  (0 <= static_discr__i_holder__unused__position2)

logic static_discr__i_holder__c__first__bit2 : int

logic static_discr__i_holder__c__last__bit2 : int

logic static_discr__i_holder__c__position2 : int

axiom static_discr__i_holder__c__first__bit_axiom2 :
  (0 <= static_discr__i_holder__c__first__bit2)

axiom static_discr__i_holder__c__last__bit_axiom2 :
  (static_discr__i_holder__c__first__bit2 <  static_discr__i_holder__c__last__bit2)

axiom static_discr__i_holder__c__position_axiom2 :
  (0 <= static_discr__i_holder__c__position2)

logic static_discr__i_holder__content__first__bit2 : int

logic static_discr__i_holder__content__last__bit2 : int

logic static_discr__i_holder__content__position2 : int

axiom static_discr__i_holder__content__first__bit_axiom2 :
  (0 <= static_discr__i_holder__content__first__bit2)

axiom static_discr__i_holder__content__last__bit_axiom2 :
  (static_discr__i_holder__content__first__bit2 <  static_discr__i_holder__content__last__bit2)

axiom static_discr__i_holder__content__position_axiom2 :
  (0 <= static_discr__i_holder__content__position2)

logic user_eq9 : us_rep3, us_rep3 -> bool

logic dummy9 : us_rep3

type t7s__ref = { t7s__content : us_rep3
}

function t7s__ref_t7s__content__projection(a: t7s__ref) : us_rep3 =
  (a).t7s__content

type us_split_fields8 = { rec__static_discr__holder__content1 : us_rep3;
rec__static_discr__holder__length1 : natural
}

function us_split_fields_rec__static_discr__holder__content__2__projection(a: us_split_fields8) : us_rep3 =
  (a).rec__static_discr__holder__content1

function us_split_fields_rec__static_discr__holder__length__2__projection(a: us_split_fields8) : natural =
  (a).rec__static_discr__holder__length1

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs6 : us_split_discrs3; us_split_fields9 :
us_split_fields8
}

function us_rep___split_discrs__5__projection(a: us_rep4) : us_split_discrs3 =
  (a).us_split_discrs6

function us_rep___split_fields__5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function to_base2(a: us_rep4) : us_rep2 = { us_split_discrs4 =
  (a).us_split_discrs6; us_split_fields5 = {
  rec__static_discr__holder__content =
  of_base(to_base1(((a).us_split_fields9).rec__static_discr__holder__content1));
  rec__static_discr__holder__length =
  ((a).us_split_fields9).rec__static_discr__holder__length1 } }

function of_base2(r: us_rep2) : us_rep4 = { us_split_discrs6 =
  (r).us_split_discrs4; us_split_fields9 = {
  rec__static_discr__holder__content1 =
  of_base1(to_base(((r).us_split_fields5).rec__static_discr__holder__content));
  rec__static_discr__holder__length1 =
  ((r).us_split_fields5).rec__static_discr__holder__length } }

function bool_eq11(a: us_rep4, b: us_rep4) : bool =
  (if (((to_rep(((a).us_split_discrs6).rec__static_discr__holder__unused) = to_rep(((b).us_split_discrs6).rec__static_discr__holder__unused)) and
  (to_rep(((a).us_split_discrs6).rec__static_discr__holder__c) = to_rep(((b).us_split_discrs6).rec__static_discr__holder__c))) and
  ((bool_eq10(((a).us_split_fields9).rec__static_discr__holder__content1,
  ((b).us_split_fields9).rec__static_discr__holder__content1) = true) and
  (to_rep(((a).us_split_fields9).rec__static_discr__holder__length1) = to_rep(((b).us_split_fields9).rec__static_discr__holder__length1)))) then true else false)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic static_discr__holder__unused__first__bit1 : int

logic static_discr__holder__unused__last__bit1 : int

logic static_discr__holder__unused__position1 : int

axiom static_discr__holder__unused__first__bit_axiom1 :
  (0 <= static_discr__holder__unused__first__bit1)

axiom static_discr__holder__unused__last__bit_axiom1 :
  (static_discr__holder__unused__first__bit1 <  static_discr__holder__unused__last__bit1)

axiom static_discr__holder__unused__position_axiom1 :
  (0 <= static_discr__holder__unused__position1)

logic static_discr__holder__c__first__bit1 : int

logic static_discr__holder__c__last__bit1 : int

logic static_discr__holder__c__position1 : int

axiom static_discr__holder__c__first__bit_axiom1 :
  (0 <= static_discr__holder__c__first__bit1)

axiom static_discr__holder__c__last__bit_axiom1 :
  (static_discr__holder__c__first__bit1 <  static_discr__holder__c__last__bit1)

axiom static_discr__holder__c__position_axiom1 :
  (0 <= static_discr__holder__c__position1)

logic static_discr__holder__content__first__bit1 : int

logic static_discr__holder__content__last__bit1 : int

logic static_discr__holder__content__position1 : int

axiom static_discr__holder__content__first__bit_axiom1 :
  (0 <= static_discr__holder__content__first__bit1)

axiom static_discr__holder__content__last__bit_axiom1 :
  (static_discr__holder__content__first__bit1 <  static_discr__holder__content__last__bit1)

axiom static_discr__holder__content__position_axiom1 :
  (0 <= static_discr__holder__content__position1)

logic static_discr__holder__length__first__bit1 : int

logic static_discr__holder__length__last__bit1 : int

logic static_discr__holder__length__position1 : int

axiom static_discr__holder__length__first__bit_axiom1 :
  (0 <= static_discr__holder__length__first__bit1)

axiom static_discr__holder__length__last__bit_axiom1 :
  (static_discr__holder__length__first__bit1 <  static_discr__holder__length__last__bit1)

axiom static_discr__holder__length__position_axiom1 :
  (0 <= static_discr__holder__length__position1)

logic user_eq10 : us_rep4, us_rep4 -> bool

logic dummy10 : us_rep4

type holder_max__ref = { holder_max__content : us_rep4
}

function holder_max__ref_holder_max__content__projection(a: holder_max__ref) : us_rep4 =
  (a).holder_max__content

logic e : int

logic attr__ATTRIBUTE_ADDRESS : int

logic current__split_discrs : us_split_discrs3

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_205: us_rep4,
  temp___is_init_201: bool, temp___skip_constant_202: bool,
  temp___do_toplevel_203: bool, temp___do_typ_inv_204: bool) =
  (((not (temp___skip_constant_202 = true)) -> in_range5(100, 100,
  (to_base2(temp___expr_205)).us_split_discrs4)) and in_range4(100, 100,
  (to_base1(((temp___expr_205).us_split_fields9).rec__static_discr__holder__content1)).us_split_discrs1))

predicate default_initial_assumption(temp___expr_211: us_rep4,
  temp___skip_top_level_212: bool) =
  (((to_rep(((temp___expr_211).us_split_discrs6).rec__static_discr__holder__unused) = 100) and
  (to_rep(((temp___expr_211).us_split_discrs6).rec__static_discr__holder__c) = 100)) and
  ((to_rep(((((temp___expr_211).us_split_fields9).rec__static_discr__holder__content1).us_split_discrs5).rec__static_discr__i_holder__unused) = 100) and
  (to_rep(((((temp___expr_211).us_split_fields9).rec__static_discr__holder__content1).us_split_discrs5).rec__static_discr__i_holder__c) = 100)))

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant3(temp___expr_187: us_rep,
  temp___is_init_183: bool, temp___skip_constant_184: bool,
  temp___do_toplevel_185: bool, temp___do_typ_inv_186: bool) =
  (let temp___189 =
  ((temp___expr_187).us_split_discrs1).rec__static_discr__i_holder__c
  : natural in (dynamic_property(1, to_rep(temp___189),
  first1(((temp___expr_187).us_split_fields1).rec__static_discr__i_holder__content),
  last1(((temp___expr_187).us_split_fields1).rec__static_discr__i_holder__content)) and
  ((first1(((temp___expr_187).us_split_fields1).rec__static_discr__i_holder__content) = 1) and
  (last1(((temp___expr_187).us_split_fields1).rec__static_discr__i_holder__content) = to_rep(temp___189)))))

predicate dynamic_invariant4(temp___expr_195: us_rep2,
  temp___is_init_191: bool, temp___skip_constant_192: bool,
  temp___do_toplevel_193: bool, temp___do_typ_inv_194: bool) =
  (let temp___197 =
  ((temp___expr_195).us_split_discrs4).rec__static_discr__holder__c
  : natural in
  (in_range4(to_rep(((temp___expr_195).us_split_discrs4).rec__static_discr__holder__unused),
  to_rep(temp___197),
  (to_base(((temp___expr_195).us_split_fields5).rec__static_discr__holder__content)).us_split_discrs1) and
  (dynamic_property(1, to_rep(temp___197),
  first1(((((temp___expr_195).us_split_fields5).rec__static_discr__holder__content).us_split_fields3).rec__static_discr__i_holder__content1),
  last1(((((temp___expr_195).us_split_fields5).rec__static_discr__holder__content).us_split_fields3).rec__static_discr__i_holder__content1)) and
  ((first1(((((temp___expr_195).us_split_fields5).rec__static_discr__holder__content).us_split_fields3).rec__static_discr__i_holder__content1) = 1) and
  (last1(((((temp___expr_195).us_split_fields5).rec__static_discr__holder__content).us_split_fields3).rec__static_discr__i_holder__content1) = to_rep(temp___197))))))

 (* File "static_discr.adb", line 4, characters 0-0 *)
goal defqtvc :
  (forall current__split_fields:us_split_fields8. forall result__:int.
  (forall current__split_fields1:us_split_fields8.
  ((current__split_fields1 = current__split_fields) -> (dynamic_invariant(e,
  true, false, true, true) -> (dynamic_invariant1({ us_split_discrs6 =
  current__split_discrs; us_split_fields9 = current__split_fields }, true,
  false, true, true) -> (dynamic_invariant(result__, false, false, true,
  true) -> (dynamic_invariant(e, true, false, true, true) ->
  ((let temp___478 =
  to_rep((current__split_fields).rec__static_discr__holder__length1) : int in
  ((1 <= temp___478) and
  (temp___478 <= to_rep((current__split_discrs).rec__static_discr__holder__c)))) ->
  (forall result__1:int.
  ((exists temp___463:int.
   ((to_rep((current__split_fields).rec__static_discr__holder__length1) = temp___463) and
   (((1 <= temp___463) and (temp___463 <= 100)) and
   (exists o:int.
   ((to_rep(((((current__split_fields).rec__static_discr__holder__content1).us_split_fields7).rec__static_discr__i_holder__content2[temp___463])) = o) and
   (exists spark__branch:bool.
   ((spark__branch = (if (o = e) then true else false)) and
   (if (spark__branch = true) then (exists o1:int.
                                   ((to_rep((current__split_fields).rec__static_discr__holder__length1) = o1) and
                                   (result__1 = o1))) else (result__1 = 0))))))))) ->
  (forall o:int.
  ((to_rep((current__split_fields).rec__static_discr__holder__length1) = o) ->
  (let o1 = (o - 1) : int in (in_range2(o1) ->
  (forall o2:natural. ((to_rep(o2) = o1) ->
  (forall current__split_fields2:us_split_fields8.
  ((current__split_fields2 = { rec__static_discr__holder__content1 =
  (current__split_fields).rec__static_discr__holder__content1;
  rec__static_discr__holder__length1 = o2 }) ->
  (forall o3:bool.
  ((if (bool_eq4((((current__split_fields2).rec__static_discr__holder__content1).us_split_fields7).rec__static_discr__i_holder__content2,
  1, 100,
  (((current__split_fields).rec__static_discr__holder__content1).us_split_fields7).rec__static_discr__i_holder__content2,
  1,
  100) = true) then (exists o4:int.
                    ((to_rep((current__split_fields).rec__static_discr__holder__length1) = o4) and
                    (exists o5:int.
                    ((to_rep((current__split_fields2).rec__static_discr__holder__length1) = o5) and
                    (o3 = (if (o5 <  o4) then true else false)))))) else (o3 = false)) ->
  ((o3 = true) -> ((result__1 = 0) ->
  (forall o4:int.
  ((to_rep((current__split_fields).rec__static_discr__holder__length1) = o4) ->
  (forall o5:int.
  ((to_rep((current__split_fields2).rec__static_discr__holder__length1) = o5) ->
  in_range1((o5 + 1))))))))))))))))))))))))))))
