(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type small

logic smallqtint : small -> int

axiom smallqtaxiom : (forall i:small. (0 <= smallqtint(i)))

axiom smallqtaxiom1 : (forall i:small. (smallqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : small, small -> bool

logic dummy1 : small

type small__ref = { small__content : small
}

function small__ref_small__content__projection(a: small__ref) : small =
  (a).small__content

function to_rep(x: small) : int = smallqtint(x)

logic of_rep : int -> small

axiom inversion_axiom : (forall x:small [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:small [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,small) farray
}

logic slide : (int,small) farray, int, int -> (int,small) farray

axiom slide_eq :
  (forall a:(int,small) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,small) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,small) farray, a__first: int, a__last: int,
  b: (int,small) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,small) farray. forall b:(int,small) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,small) farray. forall b:(int,small) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,small) farray. forall b:(int,small) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,small) farray. forall b:(int,small) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic y : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i3s : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = ((((temp___is_init_161 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_165)) and
  ((temp___do_toplevel_163 = true) -> ((temp___is_init_161 = true) ->
  ((2 * temp___expr_165) <  100000))))

predicate dynamic_predicate(temp___169: int) = ((2 * temp___169) <  100000)

type tsmall_arrayD1

logic tsmall_arrayD1qtint : tsmall_arrayD1 -> int

axiom tsmall_arrayD1qtaxiom :
  (forall i:tsmall_arrayD1. (1 <= tsmall_arrayD1qtint(i)))

axiom tsmall_arrayD1qtaxiom1 :
  (forall i:tsmall_arrayD1. (tsmall_arrayD1qtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y1: int) : bool =
  (if (x = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tsmall_arrayD1, tsmall_arrayD1 -> bool

logic dummy2 : tsmall_arrayD1

type tsmall_arrayD1__ref = { tsmall_arrayD1__content : tsmall_arrayD1
}

function tsmall_arrayD1__ref_tsmall_arrayD1__content__projection(a: tsmall_arrayD1__ref) : tsmall_arrayD1 =
  (a).tsmall_arrayD1__content

predicate dynamic_invariant2(temp___expr_196: (int,small) farray,
  temp___is_init_192: bool, temp___skip_constant_193: bool,
  temp___do_toplevel_194: bool, temp___do_typ_inv_195: bool) =
  (forall temp___197:int. (((1 <= temp___197) and (temp___197 <= 2)) ->
  ((temp___is_init_192 = true) ->
  ((2 * to_rep((temp___expr_196[temp___197]))) <  100000))))

 (* File "dynamic_preds_rte.ads", line 24, characters 0-0 *)
goal defqtvc :
  (forall x:(int,small) farray. (dynamic_invariant1(i3s, true, false, true,
  true) -> (dynamic_invariant1(i3s, true, false, true, true) ->
  (dynamic_invariant2(x, false, false, true, true) -> (dynamic_invariant(y,
  true, false, true, true) -> (let o = y : int in (in_range1(o) ->
  (((2 * o) <  100000) ->
  (forall o1:small. ((to_rep(o1) = o) ->
  (forall x1:(int,small) farray. ((x1 = (x[1 <- o1])) -> in_range1(y)))))))))))))
