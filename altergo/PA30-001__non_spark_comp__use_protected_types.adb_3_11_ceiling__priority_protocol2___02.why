(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields = { rec__spark_mode_auto__my_prot : us_main_type
}

function us_split_fields_rec__spark_mode_auto__my_prot__projection(a: us_split_fields) : us_main_type =
  (a).rec__spark_mode_auto__my_prot

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : us_rep, us_rep -> bool

type my_prot__ref = { my_prot__content : us_rep
}

function my_prot__ref_my_prot__content__projection(a: my_prot__ref) : us_rep =
  (a).my_prot__content

logic attr__ATTRIBUTE_ADDRESS1 : int

logic get_x : us_rep, us_type_of_heap -> int

logic get_x__function_guard : int, us_rep, us_type_of_heap -> prop

axiom get_x__post_axiom :
  (forall self__:us_rep.
  (forall us_HEAP:us_type_of_heap [get_x(self__, us_HEAP)].
  in_range(get_x(self__, us_HEAP))))

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_fields2 = { rec__spark_mode_on__my_prot : us_main_type1
}

function us_split_fields_rec__spark_mode_on__my_prot__projection(a: us_split_fields2) : us_main_type1 =
  (a).rec__spark_mode_on__my_prot

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : us_rep1, us_rep1 -> bool

type my_prot__ref1 = { my_prot__content1 : us_rep1
}

function my_prot__ref_my_prot__content__2__projection(a: my_prot__ref1) : us_rep1 =
  (a).my_prot__content1

logic attr__ATTRIBUTE_ADDRESS2 : int

logic get_x1 : us_rep1, us_type_of_heap -> int

logic get_x__function_guard1 : int, us_rep1, us_type_of_heap -> prop

axiom get_x__post_axiom1 :
  (forall self__:us_rep1.
  (forall us_HEAP:us_type_of_heap [get_x1(self__, us_HEAP)].
  in_range(get_x1(self__, us_HEAP))))

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_split_fields4 = { rec__spark_mode_auto__sT__y : integer;
rec__spark_mode_auto__z : integer; rec__spark_mode_auto__sT : us_main_type2
}

function us_split_fields_rec__spark_mode_auto__sT__y__projection(a: us_split_fields4) : integer =
  (a).rec__spark_mode_auto__sT__y

function us_split_fields_rec__spark_mode_auto__z__projection(a: us_split_fields4) : integer =
  (a).rec__spark_mode_auto__z

function us_split_fields_rec__spark_mode_auto__sT__projection(a: us_split_fields4) : us_main_type2 =
  (a).rec__spark_mode_auto__sT

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic spark_mode_auto__sT__y__first__bit : int

logic spark_mode_auto__sT__y__last__bit : int

logic spark_mode_auto__sT__y__position : int

axiom spark_mode_auto__sT__y__first__bit_axiom :
  (0 <= spark_mode_auto__sT__y__first__bit)

axiom spark_mode_auto__sT__y__last__bit_axiom :
  (spark_mode_auto__sT__y__first__bit <  spark_mode_auto__sT__y__last__bit)

axiom spark_mode_auto__sT__y__position_axiom :
  (0 <= spark_mode_auto__sT__y__position)

logic user_eq3 : us_rep2, us_rep2 -> bool

type sT__ref = { sT__content : us_rep2
}

function sT__ref_sT__content__projection(a: sT__ref) : us_rep2 =
  (a).sT__content

logic attr__ATTRIBUTE_ADDRESS3 : int

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

predicate default_initial_assumption(temp___expr_200: us_rep2,
  temp___skip_top_level_201: bool) =
  ((to_rep(((temp___expr_200).us_split_fields5).rec__spark_mode_auto__sT__y) = 0) and
  (to_rep(((temp___expr_200).us_split_fields5).rec__spark_mode_auto__z) = 0))

logic get_x2 : us_rep2, us_type_of_heap -> int

logic get_x__function_guard2 : int, us_rep2, us_type_of_heap -> prop

axiom get_x__post_axiom2 :
  (forall self__:us_rep2.
  (forall us_HEAP:us_type_of_heap [get_x2(self__, us_HEAP)].
  in_range(get_x2(self__, us_HEAP))))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_split_fields6 = { rec__spark_mode_on__sT__y : integer;
rec__spark_mode_on__z : integer; rec__spark_mode_on__sT : us_main_type3
}

function us_split_fields_rec__spark_mode_on__sT__y__projection(a: us_split_fields6) : integer =
  (a).rec__spark_mode_on__sT__y

function us_split_fields_rec__spark_mode_on__z__projection(a: us_split_fields6) : integer =
  (a).rec__spark_mode_on__z

function us_split_fields_rec__spark_mode_on__sT__projection(a: us_split_fields6) : us_main_type3 =
  (a).rec__spark_mode_on__sT

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic spark_mode_on__sT__y__first__bit : int

logic spark_mode_on__sT__y__last__bit : int

logic spark_mode_on__sT__y__position : int

axiom spark_mode_on__sT__y__first__bit_axiom :
  (0 <= spark_mode_on__sT__y__first__bit)

axiom spark_mode_on__sT__y__last__bit_axiom :
  (spark_mode_on__sT__y__first__bit <  spark_mode_on__sT__y__last__bit)

axiom spark_mode_on__sT__y__position_axiom :
  (0 <= spark_mode_on__sT__y__position)

logic user_eq4 : us_rep3, us_rep3 -> bool

type sT__ref1 = { sT__content1 : us_rep3
}

function sT__ref_sT__content__2__projection(a: sT__ref1) : us_rep3 =
  (a).sT__content1

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate default_initial_assumption1(temp___expr_207: us_rep3,
  temp___skip_top_level_208: bool) =
  ((to_rep(((temp___expr_207).us_split_fields7).rec__spark_mode_on__sT__y) = 0) and
  (to_rep(((temp___expr_207).us_split_fields7).rec__spark_mode_on__z) = 0))

logic get_x3 : us_rep3, us_type_of_heap -> int

logic get_x__function_guard3 : int, us_rep3, us_type_of_heap -> prop

axiom get_x__post_axiom3 :
  (forall self__:us_rep3.
  (forall us_HEAP:us_type_of_heap [get_x3(self__, us_HEAP)].
  in_range(get_x3(self__, us_HEAP))))

type us_main_type4

logic us_main_eq4 : us_main_type4, us_main_type4 -> bool

type us_split_fields8 = { rec__spark_mode_auto__y2 : integer;
rec__spark_mode_auto__z2 : integer; rec__spark_mode_auto__s2T : us_main_type4
}

function us_split_fields_rec__spark_mode_auto__y2__projection(a: us_split_fields8) : integer =
  (a).rec__spark_mode_auto__y2

function us_split_fields_rec__spark_mode_auto__z2__projection(a: us_split_fields8) : integer =
  (a).rec__spark_mode_auto__z2

function us_split_fields_rec__spark_mode_auto__s2T__projection(a: us_split_fields8) : us_main_type4 =
  (a).rec__spark_mode_auto__s2T

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___split_fields__5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq5 : us_rep4, us_rep4 -> bool

type s2T__ref = { s2T__content : us_rep4
}

function s2T__ref_s2T__content__projection(a: s2T__ref) : us_rep4 =
  (a).s2T__content

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate default_initial_assumption2(temp___expr_214: us_rep4,
  temp___skip_top_level_215: bool) =
  ((to_rep(((temp___expr_214).us_split_fields9).rec__spark_mode_auto__y2) = 0) and
  (to_rep(((temp___expr_214).us_split_fields9).rec__spark_mode_auto__z2) = 0))

logic get_x4 : us_rep4, us_type_of_heap -> int

logic get_x__function_guard4 : int, us_rep4, us_type_of_heap -> prop

axiom get_x__post_axiom4 :
  (forall self__:us_rep4.
  (forall us_HEAP:us_type_of_heap [get_x4(self__, us_HEAP)].
  in_range(get_x4(self__, us_HEAP))))

type us_main_type5

logic us_main_eq5 : us_main_type5, us_main_type5 -> bool

type us_split_fields10 = { rec__spark_mode_on__s2T : us_main_type5
}

function us_split_fields_rec__spark_mode_on__s2T__projection(a: us_split_fields10) : us_main_type5 =
  (a).rec__spark_mode_on__s2T

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___split_fields__6__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic user_eq6 : us_rep5, us_rep5 -> bool

type s2T__ref1 = { s2T__content1 : us_rep5
}

function s2T__ref_s2T__content__2__projection(a: s2T__ref1) : us_rep5 =
  (a).s2T__content1

logic attr__ATTRIBUTE_ADDRESS6 : int

logic get_x5 : us_rep5, us_type_of_heap -> int

logic get_x__function_guard5 : int, us_rep5, us_type_of_heap -> prop

axiom get_x__post_axiom5 :
  (forall self__:us_rep5.
  (forall us_HEAP:us_type_of_heap [get_x5(self__, us_HEAP)].
  in_range(get_x5(self__, us_HEAP))))

type priority

logic priorityqtint : priority -> int

axiom priorityqtaxiom : (forall i:priority. (0 <= priorityqtint(i)))

axiom priorityqtaxiom1 : (forall i:priority. (priorityqtint(i) <= 97))

predicate in_range1(x: int) = ((0 <= x) and (x <= 97))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq7 : priority, priority -> bool

logic dummy1 : priority

type priority__ref = { priority__content : priority
}

function priority__ref_priority__content__projection(a: priority__ref) : priority =
  (a).priority__content

predicate dynamic_invariant1(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (0 <= 97)) -> in_range1(temp___expr_171))

 (* File "use_protected_types.adb", line 3, characters 0-0 *)
goal defqtvc : (48 <= 97)
