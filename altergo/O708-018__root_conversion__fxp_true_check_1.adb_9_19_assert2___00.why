(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type my_duration

predicate in_range(x: int) = (((- 9223372036854775808) <= x) and
  (x <= 9223372036854775807))

logic dummy : my_duration

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : my_duration, my_duration -> bool

type my_duration__ref = { my_duration__content : my_duration
}

function my_duration__ref_my_duration__content__projection(a: my_duration__ref) : my_duration =
  (a).my_duration__content

predicate dynamic_invariant(temp___expr_179: int, temp___is_init_175: bool,
  temp___skip_constant_176: bool, temp___do_toplevel_177: bool,
  temp___do_typ_inv_178: bool) = (((temp___is_init_175 = true) or
  ((- 9223372036854775808) <= 9223372036854775807)) ->
  in_range(temp___expr_179))

type my_subduration

predicate in_range1(x: int) = (((- 10000000000) <= x) and (x <= 10000000000))

logic dummy1 : my_subduration

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : my_subduration, my_subduration -> bool

type my_subduration__ref = { my_subduration__content : my_subduration
}

function my_subduration__ref_my_subduration__content__projection(a: my_subduration__ref) : my_subduration =
  (a).my_subduration__content

predicate dynamic_invariant1(temp___expr_186: int, temp___is_init_182: bool,
  temp___skip_constant_183: bool, temp___do_toplevel_184: bool,
  temp___do_typ_inv_185: bool) = (((temp___is_init_182 = true) or
  ((- 10000000000) <= 10000000000)) -> in_range1(temp___expr_186))

 (* File "fxp_true_check_1.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall md:int. ((md = 0) -> (dynamic_invariant(md, true, false, true,
  true) ->
  (forall ms:int. ((ms = 0) -> (dynamic_invariant1(ms, true, false, true,
  true) -> ((0 <= md) -> ((0 <= ms) -> (md <  1000000000)))))))))
