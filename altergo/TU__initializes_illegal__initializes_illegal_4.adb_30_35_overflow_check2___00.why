(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic f1 : int -> int

logic f1__function_guard : int, int -> prop

axiom f1__post_axiom :
  (forall initializes_illegal_4__g_var2:int
  [f1(initializes_illegal_4__g_var2)].
  (dynamic_invariant(initializes_illegal_4__g_var2, true, true, true,
  true) -> (let result = f1(initializes_illegal_4__g_var2) : int in
  (f1__function_guard(result, initializes_illegal_4__g_var2) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom f1__def_axiom :
  (forall initializes_illegal_4__g_var2:int
  [f1(initializes_illegal_4__g_var2)].
  (dynamic_invariant(initializes_illegal_4__g_var2, true, true, true,
  true) ->
  (f1(initializes_illegal_4__g_var2) = initializes_illegal_4__g_var2)))

logic attr__ATTRIBUTE_ADDRESS3 : int

 (* File "initializes_illegal_4.ads", line 39, characters 0-0 *)
goal defqtvc :
  (forall g_var:int. forall g_var2:int. (dynamic_invariant(g_var, true,
  false, true, true) -> (let o = (g_var + g_var2) : int in (in_range(o) ->
  (forall var:int. ((var = o) -> (dynamic_invariant(var, true, false, true,
  true) -> (let o1 = f1(g_var2) : int in ((f1__function_guard(o1, g_var2) and
  (dynamic_invariant(o1, true, false, true, true) and (o1 = g_var2))) ->
  in_range((g_var - o1)))))))))))
