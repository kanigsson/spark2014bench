(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type small_integer

logic small_integerqtint : small_integer -> int

axiom small_integerqtaxiom :
  (forall i:small_integer. ((- 1000) <= small_integerqtint(i)))

axiom small_integerqtaxiom1 :
  (forall i:small_integer. (small_integerqtint(i) <= 1000))

predicate in_range3(x: int) = (((- 1000) <= x) and (x <= 1000))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : small_integer, small_integer -> bool

logic dummy3 : small_integer

type small_integer__ref = { small_integer__content : small_integer
}

function small_integer__ref_small_integer__content__projection(a: small_integer__ref) : small_integer =
  (a).small_integer__content

type small_positive

logic small_positiveqtint : small_positive -> int

axiom small_positiveqtaxiom :
  (forall i:small_positive. (1 <= small_positiveqtint(i)))

axiom small_positiveqtaxiom1 :
  (forall i:small_positive. (small_positiveqtint(i) <= 1000))

predicate in_range4(x: int) = ((1 <= x) and (x <= 1000))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : small_positive, small_positive -> bool

logic dummy4 : small_positive

type small_positive__ref = { small_positive__content : small_positive
}

function small_positive__ref_small_positive__content__projection(a: small_positive__ref) : small_positive =
  (a).small_positive__content

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant3(temp___expr_180: int, temp___is_init_176: bool,
  temp___skip_constant_177: bool, temp___do_toplevel_178: bool,
  temp___do_typ_inv_179: bool) = (((temp___is_init_176 = true) or
  ((- 1000) <= 1000)) -> in_range3(temp___expr_180))

predicate dynamic_invariant4(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (1 <= 1000)) -> in_range4(temp___expr_194))

 (* File "mod_lemmas.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall x:int. forall y:int. forall z:int. forall r:int. forall s:int.
  (dynamic_invariant(x, false, false, true, true) -> (dynamic_invariant(y,
  false, false, true, true) -> (dynamic_invariant(z, false, false, true,
  true) -> (dynamic_invariant(r, false, false, true, true) ->
  (dynamic_invariant(s, false, false, true, true) ->
  (forall x1:int. ((x1 = 4) -> (in_range2(x1) ->
  (forall r1:int. (((r1 = 0) and dynamic_invariant(r1, true, true, true,
  true)) ->
  (forall x2:int. ((x2 = 2356) -> (in_range2(x2) ->
  (forall r2:int. (((r2 = 0) and dynamic_invariant(r2, true, true, true,
  true)) ->
  (forall x3:int. ((x3 = 4) -> (in_range2(x3) ->
  (forall r3:int. forall s1:int. ((((r3 = 0) and (s1 = 0)) and
  (dynamic_invariant(r3, true, true, true, true) and dynamic_invariant(s1,
  true, true, true, true))) ->
  (forall x4:int. ((x4 = 4) ->
  (forall y1:int. ((y1 = 2356) -> (in_range2(y1) -> (in_range1(x4) ->
  (forall r4:int. (((r4 = x4) and dynamic_invariant(r4, true, true, true,
  true)) ->
  (forall x5:int. ((x5 = 2356) ->
  (forall y2:int. ((y2 = 4) -> (in_range2(y2) ->
  (forall r5:int. ((((0 <= r5) and (r5 <= (y2 - 1))) and
  dynamic_invariant(r5, true, true, true, true)) ->
  (forall x6:int. ((x6 = 2356) ->
  (forall y3:int. ((y3 = 4) -> (in_range2(y3) ->
  (forall r6:int. forall s2:int. (((r6 = s2) and (dynamic_invariant(r6, true,
  true, true, true) and dynamic_invariant(s2, true, true, true, true))) ->
  (forall x7:int. ((x7 = 356) ->
  (forall y4:int. ((y4 = 43) ->
  (forall z1:int. ((z1 = 4) -> (in_range4(z1) -> in_range3(y4)))))))))))))))))))))))))))))))))))))))))))))))))))
