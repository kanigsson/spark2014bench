(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__types__value__e : integer
}

function us_split_fields_rec__types__value__e__projection(a: us_split_fields) : integer =
  (a).rec__types__value__e

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__types__value__e) = to_rep(((b).us_split_fields1).rec__types__value__e)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic types__value__e__first__bit : int

logic types__value__e__last__bit : int

logic types__value__e__position : int

axiom types__value__e__first__bit_axiom : (0 <= types__value__e__first__bit)

axiom types__value__e__last__bit_axiom :
  (types__value__e__first__bit <  types__value__e__last__bit)

axiom types__value__e__position_axiom : (0 <= types__value__e__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type value__ref = { value__content : us_rep
}

function value__ref_value__content__projection(a: value__ref) : us_rep =
  (a).value__content

type token_kind

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : token_kind, token_kind -> bool

logic dummy2 : token_kind

type token_kind__ref = { token_kind__content : token_kind
}

function token_kind__ref_token_kind__content__projection(a: token_kind__ref) : token_kind =
  (a).token_kind__content

logic to_rep1 : token_kind -> int

logic of_rep1 : int -> token_kind

axiom inversion_axiom1 :
  (forall x:token_kind [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:token_kind [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type operation

predicate in_range3(x: int) = ((0 <= x) and (x <= 3))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq3 : operation, operation -> bool

logic dummy3 : operation

type operation__ref = { operation__content : operation
}

function operation__ref_operation__content__projection(a: operation__ref) : operation =
  (a).operation__content

logic to_rep2 : operation -> int

logic of_rep2 : int -> operation

axiom inversion_axiom2 :
  (forall x:operation [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:operation [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type instruction

predicate in_range4(x: int) = ((0 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : instruction, instruction -> bool

logic dummy4 : instruction

type instruction__ref = { instruction__content : instruction
}

function instruction__ref_instruction__content__projection(a: instruction__ref) : instruction =
  (a).instruction__content

logic to_rep3 : instruction -> int

logic of_rep3 : int -> instruction

axiom inversion_axiom3 :
  (forall x:instruction [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 :
  (forall x:instruction [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_discrs = { rec__tokens__token__kind : token_kind
}

function us_split_discrs_rec__tokens__token__kind__projection(a: us_split_discrs) : token_kind =
  (a).rec__tokens__token__kind

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__tokens__token__val : us_rep;
rec__tokens__token__op : operation; rec__tokens__token__instr : instruction
}

function us_split_fields_rec__tokens__token__val__projection(a: us_split_fields2) : us_rep =
  (a).rec__tokens__token__val

function us_split_fields_rec__tokens__token__op__projection(a: us_split_fields2) : operation =
  (a).rec__tokens__token__op

function us_split_fields_rec__tokens__token__instr__projection(a: us_split_fields2) : instruction =
  (a).rec__tokens__token__instr

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

predicate tokens__token__val__pred(a: us_rep1) =
  (to_rep1(((a).us_split_discrs1).rec__tokens__token__kind) = 0)

predicate tokens__token__op__pred(a: us_rep1) =
  (to_rep1(((a).us_split_discrs1).rec__tokens__token__kind) = 1)

predicate tokens__token__instr__pred(a: us_rep1) =
  (to_rep1(((a).us_split_discrs1).rec__tokens__token__kind) = 2)

function bool_eq6(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__tokens__token__kind) = to_rep1(((b).us_split_discrs1).rec__tokens__token__kind)) and
  (((tokens__token__val__pred(a) ->
  (bool_eq2(((a).us_split_fields3).rec__tokens__token__val,
  ((b).us_split_fields3).rec__tokens__token__val) = true)) and
  (tokens__token__op__pred(a) ->
  (to_rep2(((a).us_split_fields3).rec__tokens__token__op) = to_rep2(((b).us_split_fields3).rec__tokens__token__op)))) and
  (tokens__token__instr__pred(a) ->
  (to_rep3(((a).us_split_fields3).rec__tokens__token__instr) = to_rep3(((b).us_split_fields3).rec__tokens__token__instr))))) then true else false)

predicate in_range5(rec__tokens__token__kind1: int, a: us_split_discrs) =
  (rec__tokens__token__kind1 = to_rep1((a).rec__tokens__token__kind))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic tokens__token__kind__first__bit : int

logic tokens__token__kind__last__bit : int

logic tokens__token__kind__position : int

axiom tokens__token__kind__first__bit_axiom :
  (0 <= tokens__token__kind__first__bit)

axiom tokens__token__kind__last__bit_axiom :
  (tokens__token__kind__first__bit <  tokens__token__kind__last__bit)

axiom tokens__token__kind__position_axiom :
  (0 <= tokens__token__kind__position)

logic tokens__token__val__first__bit : int

logic tokens__token__val__last__bit : int

logic tokens__token__val__position : int

axiom tokens__token__val__first__bit_axiom :
  (0 <= tokens__token__val__first__bit)

axiom tokens__token__val__last__bit_axiom :
  (tokens__token__val__first__bit <  tokens__token__val__last__bit)

axiom tokens__token__val__position_axiom :
  (0 <= tokens__token__val__position)

logic tokens__token__op__first__bit : int

logic tokens__token__op__last__bit : int

logic tokens__token__op__position : int

axiom tokens__token__op__first__bit_axiom :
  (0 <= tokens__token__op__first__bit)

axiom tokens__token__op__last__bit_axiom :
  (tokens__token__op__first__bit <  tokens__token__op__last__bit)

axiom tokens__token__op__position_axiom : (0 <= tokens__token__op__position)

logic tokens__token__instr__first__bit : int

logic tokens__token__instr__last__bit : int

logic tokens__token__instr__position : int

axiom tokens__token__instr__first__bit_axiom :
  (0 <= tokens__token__instr__first__bit)

axiom tokens__token__instr__last__bit_axiom :
  (tokens__token__instr__first__bit <  tokens__token__instr__last__bit)

axiom tokens__token__instr__position_axiom :
  (0 <= tokens__token__instr__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type token__ref = { token__content : us_rep1
}

function token__ref_token__content__projection(a: token__ref) : us_rep1 =
  (a).token__content

predicate default_initial_assumption(temp___expr_194: us_rep1,
  temp___skip_top_level_195: bool) =
  (to_rep1(((temp___expr_194).us_split_discrs1).rec__tokens__token__kind) = 0)

logic t : us_rep1

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic full : int -> bool

logic full__function_guard : bool, int -> prop

type tlastS

logic tlastSqtint : tlastS -> int

axiom tlastSqtaxiom : (forall i:tlastS. (0 <= tlastSqtint(i)))

axiom tlastSqtaxiom1 : (forall i:tlastS. (tlastSqtint(i) <= 200))

predicate in_range6(x: int) = ((0 <= x) and (x <= 200))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : tlastS, tlastS -> bool

logic dummy6 : tlastS

type tlastS__ref = { tlastS__content : tlastS
}

function tlastS__ref_tlastS__content__projection(a: tlastS__ref) : tlastS =
  (a).tlastS__content

predicate dynamic_invariant(temp___expr_206: int, temp___is_init_202: bool,
  temp___skip_constant_203: bool, temp___do_toplevel_204: bool,
  temp___do_typ_inv_205: bool) = (((temp___is_init_202 = true) or
  (0 <= 200)) -> in_range6(temp___expr_206))

axiom full__def_axiom :
  (forall stack__last:int [full(stack__last)]. ((full(stack__last) = true) ->
  (200 <= stack__last)))

axiom full__def_axiom1 :
  (forall stack__last:int [full(stack__last)]. ((200 <= stack__last) ->
  (full(stack__last) = true)))

logic size : int -> int

logic size__function_guard : int, int -> prop

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom size__post_axiom :
  (forall stack__last:int [size(stack__last)].
  (dynamic_invariant(stack__last, true, true, true, true) -> (let result =
  size(stack__last) : int in (size__function_guard(result, stack__last) ->
  dynamic_invariant1(result, true, false, true, true)))))

axiom size__def_axiom :
  (forall stack__last:int [size(stack__last)].
  (dynamic_invariant(stack__last, true, true, true, true) ->
  (size(stack__last) = stack__last)))

predicate dynamic_invariant2(temp___expr_163: int, temp___is_init_159: bool,
  temp___skip_constant_160: bool, temp___do_toplevel_161: bool,
  temp___do_typ_inv_162: bool) = (((temp___is_init_159 = true) or
  (0 <= 2)) -> in_range2(temp___expr_163))

predicate dynamic_invariant3(temp___expr_185: int, temp___is_init_181: bool,
  temp___skip_constant_182: bool, temp___do_toplevel_183: bool,
  temp___do_typ_inv_184: bool) = (((temp___is_init_181 = true) or
  (0 <= 2)) -> in_range4(temp___expr_185))

predicate dynamic_invariant4(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (0 <= 3)) -> in_range3(temp___expr_178))

 (* File "tokens.ads", line 23, characters 0-0 *)
goal defqtvc :
  (forall last:int. (dynamic_invariant(last, true, false, true, true) ->
  ((forall last1:int. full__function_guard(full(last1), last1)) ->
  ((forall last1:int. size__function_guard(size(last1), last1)) ->
  (((to_rep1(((t).us_split_discrs1).rec__tokens__token__kind) = 0) ->
  ((not (full(last) = true)) and
  ((to_rep1(((t).us_split_discrs1).rec__tokens__token__kind) = 1) ->
  (2 <= size(last))))) ->
  (forall o:int.
  ((to_rep1(((t).us_split_discrs1).rec__tokens__token__kind) = o) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o = 0) then true else false)) ->
  ((spark__branch = true) ->
  ((forall last1:int. full__function_guard(full(last1), last1)) ->
  (not (full(last) = true)))))))))))))
