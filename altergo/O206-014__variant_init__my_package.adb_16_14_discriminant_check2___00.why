(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic ci : int

logic attr__ATTRIBUTE_ADDRESS : int

logic xi : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type enum_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : enum_type, enum_type -> bool

logic dummy1 : enum_type

type enum_type__ref = { enum_type__content : enum_type
}

function enum_type__ref_enum_type__content__projection(a: enum_type__ref) : enum_type =
  (a).enum_type__content

logic to_rep1 : enum_type -> int

logic of_rep1 : int -> enum_type

axiom inversion_axiom1 :
  (forall x:enum_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:enum_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__my_package__variant_type__m_v : enum_type
}

function us_split_discrs_rec__my_package__variant_type__m_v__projection(a: us_split_discrs) : enum_type =
  (a).rec__my_package__variant_type__m_v

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__my_package__variant_type__m_c : integer;
rec__my_package__variant_type__m_a : integer;
rec__my_package__variant_type__m_b : integer
}

function us_split_fields_rec__my_package__variant_type__m_c__projection(a: us_split_fields) : integer =
  (a).rec__my_package__variant_type__m_c

function us_split_fields_rec__my_package__variant_type__m_a__projection(a: us_split_fields) : integer =
  (a).rec__my_package__variant_type__m_a

function us_split_fields_rec__my_package__variant_type__m_b__projection(a: us_split_fields) : integer =
  (a).rec__my_package__variant_type__m_b

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate my_package__variant_type__m_a__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__my_package__variant_type__m_v) = 0)

predicate my_package__variant_type__m_b__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__my_package__variant_type__m_v) = 1)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__my_package__variant_type__m_v) = to_rep1(((b).us_split_discrs1).rec__my_package__variant_type__m_v)) and
  (((to_rep(((a).us_split_fields1).rec__my_package__variant_type__m_c) = to_rep(((b).us_split_fields1).rec__my_package__variant_type__m_c)) and
  (my_package__variant_type__m_a__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__my_package__variant_type__m_a) = to_rep(((b).us_split_fields1).rec__my_package__variant_type__m_a)))) and
  (my_package__variant_type__m_b__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__my_package__variant_type__m_b) = to_rep(((b).us_split_fields1).rec__my_package__variant_type__m_b))))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic my_package__variant_type__m_v__first__bit : int

logic my_package__variant_type__m_v__last__bit : int

logic my_package__variant_type__m_v__position : int

axiom my_package__variant_type__m_v__first__bit_axiom :
  (0 <= my_package__variant_type__m_v__first__bit)

axiom my_package__variant_type__m_v__last__bit_axiom :
  (my_package__variant_type__m_v__first__bit <  my_package__variant_type__m_v__last__bit)

axiom my_package__variant_type__m_v__position_axiom :
  (0 <= my_package__variant_type__m_v__position)

logic my_package__variant_type__m_c__first__bit : int

logic my_package__variant_type__m_c__last__bit : int

logic my_package__variant_type__m_c__position : int

axiom my_package__variant_type__m_c__first__bit_axiom :
  (0 <= my_package__variant_type__m_c__first__bit)

axiom my_package__variant_type__m_c__last__bit_axiom :
  (my_package__variant_type__m_c__first__bit <  my_package__variant_type__m_c__last__bit)

axiom my_package__variant_type__m_c__position_axiom :
  (0 <= my_package__variant_type__m_c__position)

logic my_package__variant_type__m_a__first__bit : int

logic my_package__variant_type__m_a__last__bit : int

logic my_package__variant_type__m_a__position : int

axiom my_package__variant_type__m_a__first__bit_axiom :
  (0 <= my_package__variant_type__m_a__first__bit)

axiom my_package__variant_type__m_a__last__bit_axiom :
  (my_package__variant_type__m_a__first__bit <  my_package__variant_type__m_a__last__bit)

axiom my_package__variant_type__m_a__position_axiom :
  (0 <= my_package__variant_type__m_a__position)

logic my_package__variant_type__m_b__first__bit : int

logic my_package__variant_type__m_b__last__bit : int

logic my_package__variant_type__m_b__position : int

axiom my_package__variant_type__m_b__first__bit_axiom :
  (0 <= my_package__variant_type__m_b__first__bit)

axiom my_package__variant_type__m_b__last__bit_axiom :
  (my_package__variant_type__m_b__first__bit <  my_package__variant_type__m_b__last__bit)

axiom my_package__variant_type__m_b__position_axiom :
  (0 <= my_package__variant_type__m_b__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type variant_type__ref = { variant_type__content : us_rep
}

function variant_type__ref_variant_type__content__projection(a: variant_type__ref) : us_rep =
  (a).variant_type__content

logic v__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_158: int, temp___is_init_154: bool,
  temp___skip_constant_155: bool, temp___do_toplevel_156: bool,
  temp___do_typ_inv_157: bool) = (((temp___is_init_154 = true) or
  (0 <= 1)) -> in_range1(temp___expr_158))

 (* File "my_package.ads", line 18, characters 0-0 *)
goal defqtvc :
  (forall v__split_fields:us_split_fields. (dynamic_invariant(ci, true,
  false, true, true) -> (dynamic_invariant(xi, true, false, true, true) ->
  ((not (ci = 0)) ->
  (forall o:integer. ((to_rep(o) = ci) ->
  (forall v__split_fields1:us_split_fields. ((v__split_fields1 = {
  rec__my_package__variant_type__m_c = o;
  rec__my_package__variant_type__m_a =
  (v__split_fields).rec__my_package__variant_type__m_a;
  rec__my_package__variant_type__m_b =
  (v__split_fields).rec__my_package__variant_type__m_b }) ->
  (forall o1:int.
  ((to_rep1((v__split_discrs).rec__my_package__variant_type__m_v) = o1) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (o1 = 0) then true else false)) ->
  ((not (spark__branch = true)) -> my_package__variant_type__m_b__pred({
  us_split_discrs1 = v__split_discrs; us_split_fields1 = v__split_fields1
  }))))))))))))))
