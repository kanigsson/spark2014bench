(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : natural, natural -> bool

logic dummy2 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep1(x: natural) : int = naturalqtint(x)

logic of_rep1 : int -> natural

axiom inversion_axiom1 :
  (forall x:natural [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:natural [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic values__first : integer

logic values__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

type index

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

predicate dynamic_invariant1(expr: us_t, us: bool, skip_bounds: bool,
  us1: bool, us2: bool) = ((not (skip_bounds = true)) -> dynamic_property(1,
  100, first1(expr), last1(expr)))

logic occ : natural, us_t -> int

axiom occ_empty :
  (forall v:natural. forall a:us_t. ((last1(a) <  first1(a)) -> (occ(v,
  a) = 0)))

axiom occ_set :
  (forall e:natural. forall v:natural. forall a:us_t. forall i:int.
  (((first1(a) <= i) and (i <= last1(a))) -> ((not (((a).elts[i]) = e)) ->
  ((not (v = e)) -> (occ(e, of_array(((a).elts[i <- v]), first1(a),
  last1(a))) = occ(e, a))))))

axiom occ_set1 :
  (forall e:natural. forall v:natural. forall a:us_t. forall i:int.
  (((first1(a) <= i) and (i <= last1(a))) -> ((not (((a).elts[i]) = e)) ->
  ((v = e) -> (occ(e, of_array(((a).elts[i <- v]), first1(a),
  last1(a))) = (occ(e, a) + 1))))))

axiom occ_set2 :
  (forall e:natural. forall v:natural. forall a:us_t. forall i:int.
  (((first1(a) <= i) and (i <= last1(a))) -> ((((a).elts[i]) = e) ->
  ((not (v = e)) -> (occ(e, of_array(((a).elts[i <- v]), first1(a),
  last1(a))) = (occ(e, a) - 1))))))

axiom occ_set3 :
  (forall e:natural. forall v:natural. forall a:us_t. forall i:int.
  (((first1(a) <= i) and (i <= last1(a))) -> ((((a).elts[i]) = e) ->
  ((v = e) -> (occ(e, of_array(((a).elts[i <- v]), first1(a),
  last1(a))) = occ(e, a))))))

function is_perm__logic(a: us_t, b: us_t) : bool =
  (if (forall v:natural. (occ(v, a) = occ(v, b))) then true else false)

logic index_of_minimum : us_t -> int

logic index_of_minimum__function_guard : int, us_t -> prop

axiom index_of_minimum__post_axiom :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) ->
  (first1(values) <= result)))))

axiom index_of_minimum__post_axiom1 :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) ->
  (result <= last1(values))))))

axiom index_of_minimum__post_axiom2 :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) -> in_range4(result)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type t11b__ref = { t11b__content : integer
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : integer =
  (a).t11b__content

type t13b__ref = { t13b__content : us_t
}

function t13b__ref_t13b__content__projection(a: t13b__ref) : us_t =
  (a).t13b__content

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "sort.ads", line 6, characters 0-0 *)
goal defqtvc :
  (forall values:(int,natural) farray. forall smallest:int.
  (forall values1:(int,natural) farray. ((values1 = values) ->
  (dynamic_property(1, 100, to_rep(values__first), to_rep(values__last)) ->
  (forall values2:(int,natural) farray. ((dynamic_invariant(smallest, false,
  false, true, true) and
  (exists o:int. ((to_rep(values__last) = o) and
  (exists o1:int. ((to_rep(values__first) = o1) and
  (exists spark__branch:bool. ((spark__branch = (if (length(o1,
  o) = 0) then true else false)) and
  (if (spark__branch = true) then (values2 = values) else (exists temp___190:int.
                                                          ((to_rep(values__first) = temp___190) and
                                                          (exists o2:int.
                                                          ((to_rep(values__last) = o2) and
                                                          (let o3 = (o2 - 1)
                                                          : int in
                                                          (in_range1(o3) and
                                                          (exists current:int.
                                                          ((current = temp___190) and
                                                          (if (andb((if (temp___190 <= current) then true else false),
                                                          (if (current <= o3) then true else false)) = true) then 
                                                          (exists temp___loop_entry_199:(int,natural) farray.
                                                          ((temp___loop_entry_199 = values) and
                                                          (exists temp___192:int.
                                                          ((to_rep(values__last) = temp___192) and
                                                          (((current <= temp___192) ->
                                                          (((to_rep(values__first) <= current) and
                                                          (current <= to_rep(values__last))) and
                                                          ((to_rep(values__first) <= temp___192) and
                                                          (temp___192 <= to_rep(values__last))))) and
                                                          (let temp___193 =
                                                          of_array(values,
                                                          current,
                                                          temp___192)
                                                          : us_t in (let o4 =
                                                          of_array((temp___193).elts,
                                                          first1(temp___193),
                                                          last1(temp___193))
                                                          : us_t in (let o5 =
                                                          index_of_minimum(o4)
                                                          : int in
                                                          ((index_of_minimum__function_guard(o5,
                                                          o4) and
                                                          (in_range4(o5) and
                                                          ((first1(o4) <= o5) and
                                                          (o5 <= last1(o4))))) and
                                                          (exists smallest1:int.
                                                          ((smallest1 = o5) and
                                                          (exists spark__branch1:bool.
                                                          exists values3:(int,natural) farray.
                                                          (((spark__branch1 = (if (smallest1 = current) then false else true)) and
                                                          (if (spark__branch1 = true) then (in_range4(smallest1) and
                                                          (in_range4(current) and
                                                          (let o6 =
                                                          values__last
                                                          : integer in
                                                          (let o7 =
                                                          values__first
                                                          : integer in
                                                          (exists o8:(int,natural) farray.
                                                          ((o8 = values3) and
                                                          (is_perm__logic(of_array(values,
                                                          to_rep(o7),
                                                          to_rep(o6)),
                                                          of_array(o8,
                                                          to_rep(o7),
                                                          to_rep(o6))) = true))))))) else (values3 = values))) and
                                                          (exists o6:int.
                                                          ((to_rep(values__last) = o6) and
                                                          (exists o7:int.
                                                          ((to_rep(values__first) = o7) and
                                                          (exists o8:int.
                                                          ((to_rep(values__last) = o8) and
                                                          (exists o9:int.
                                                          ((to_rep(values__first) = o9) and
                                                          (exists smallest2:int.
                                                          exists current1:int.
                                                          ((is_perm__logic(of_array(temp___loop_entry_199,
                                                          to_rep(values__first),
                                                          to_rep(values__last)),
                                                          of_array(values2,
                                                          to_rep(values__first),
                                                          to_rep(values__last))) = true) and
                                                          ((andb((if (dynamic_invariant(smallest2,
                                                          false, true, true,
                                                          true) and
                                                          dynamic_property1(to_rep(values__first),
                                                          (to_rep(values__last) - 1),
                                                          current1)) then true else false),
                                                          (if ((to_rep(values__first) <= current1) and
                                                          (current1 <= (to_rep(values__last) - 1))) then true else false)) = true) and
                                                          (current1 = o3))))))))))))))))))))))))) else (values2 = values)))))))))))))))))) ->
  (is_perm__logic(of_array(values1, to_rep(values__first),
  to_rep(values__last)), of_array(values2, to_rep(values__first),
  to_rep(values__last))) = true)))))))
