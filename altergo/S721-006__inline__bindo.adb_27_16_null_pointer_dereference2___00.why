(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,natural) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields = { rec__bindo__library_graph_attributes__counts :
(int,natural) farray
}

function us_split_fields_rec__bindo__library_graph_attributes__counts__projection(a: us_split_fields) : (int,natural) farray =
  (a).rec__bindo__library_graph_attributes__counts

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (bool_eq1(((a).us_split_fields1).rec__bindo__library_graph_attributes__counts,
  0, 0, ((b).us_split_fields1).rec__bindo__library_graph_attributes__counts,
  0, 0) = true) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic bindo__library_graph_attributes__counts__first__bit : int

logic bindo__library_graph_attributes__counts__last__bit : int

logic bindo__library_graph_attributes__counts__position : int

axiom bindo__library_graph_attributes__counts__first__bit_axiom :
  (0 <= bindo__library_graph_attributes__counts__first__bit)

axiom bindo__library_graph_attributes__counts__last__bit_axiom :
  (bindo__library_graph_attributes__counts__first__bit <  bindo__library_graph_attributes__counts__last__bit)

axiom bindo__library_graph_attributes__counts__position_axiom :
  (0 <= bindo__library_graph_attributes__counts__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type library_graph_attributes__ref = { library_graph_attributes__content :
us_rep
}

function library_graph_attributes__ref_library_graph_attributes__content__projection(a: library_graph_attributes__ref) : us_rep =
  (a).library_graph_attributes__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq3(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type us_rep1 = { rec__bindo__library_graph__is_null_pointer : bool;
rec__bindo__library_graph__pointer_address : int;
rec__bindo__library_graph__pointer_value : us_rep
}

function us_rep_rec__bindo__library_graph__is_null_pointer__projection(a: us_rep1) : bool =
  (a).rec__bindo__library_graph__is_null_pointer

function us_rep_rec__bindo__library_graph__pointer_address__projection(a: us_rep1) : int =
  (a).rec__bindo__library_graph__pointer_address

function us_rep_rec__bindo__library_graph__pointer_value__projection(a: us_rep1) : us_rep =
  (a).rec__bindo__library_graph__pointer_value

type us_rep__ref = { us_rep__content : us_rep1
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep1 =
  (a).us_rep__content

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if (((a).rec__bindo__library_graph__is_null_pointer = (b).rec__bindo__library_graph__is_null_pointer) and
  ((not ((a).rec__bindo__library_graph__is_null_pointer = true)) ->
  (((a).rec__bindo__library_graph__pointer_address = (b).rec__bindo__library_graph__pointer_address) and
  ((a).rec__bindo__library_graph__pointer_value = (b).rec__bindo__library_graph__pointer_value)))) then true else false)

predicate rec__bindo__library_graph__pointer_value__pred(a: us_rep1) =
  (not ((a).rec__bindo__library_graph__is_null_pointer = true))

logic us_null_pointer : us_rep1

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__bindo__library_graph__is_null_pointer = true)

logic dummy3 : us_rep1

type library_graph__ref = { library_graph__content : us_rep1
}

function library_graph__ref_library_graph__content__projection(a: library_graph__ref) : us_rep1 =
  (a).library_graph__content

logic g__pointer_address : int

logic g__is_null_pointer : bool

logic attr__ATTRIBUTE_ADDRESS : int

logic kind : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type library_graph_edge_kind

predicate in_range2(x: int) = ((0 <= x) and (x <= 0))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : library_graph_edge_kind, library_graph_edge_kind -> bool

logic dummy4 : library_graph_edge_kind

type library_graph_edge_kind__ref = { library_graph_edge_kind__content :
library_graph_edge_kind
}

function library_graph_edge_kind__ref_library_graph_edge_kind__content__projection(a: library_graph_edge_kind__ref) : library_graph_edge_kind =
  (a).library_graph_edge_kind__content

predicate dynamic_invariant(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 0)) -> in_range2(temp___expr_167))

predicate default_initial_assumption(temp___expr_197: us_rep1,
  temp___skip_top_level_198: bool) =
  ((temp___expr_197).rec__bindo__library_graph__is_null_pointer = true)

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

logic temp_____aggregate_def_188 : int -> (int,natural) farray

predicate default_initial_assumption1(temp___expr_186: us_rep,
  temp___skip_top_level_187: bool) =
  (((temp___expr_186).us_split_fields1).rec__bindo__library_graph_attributes__counts = temp_____aggregate_def_188(0))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___190:int. (dynamic_invariant1(temp___190, true, true, true,
  true) ->
  (forall temp___191:int.
  ((temp_____aggregate_def_188(temp___190)[temp___191]) = rliteral))))

 (* File "bindo.adb", line 20, characters 0-0 *)
goal defqtvc :
  (forall g__pointer_value:(int,natural) farray. (dynamic_invariant(kind,
  true, false, true, true) ->
  rec__bindo__library_graph__pointer_value__pred({
  rec__bindo__library_graph__is_null_pointer = g__is_null_pointer;
  rec__bindo__library_graph__pointer_address = g__pointer_address;
  rec__bindo__library_graph__pointer_value = { us_split_fields1 = {
  rec__bindo__library_graph_attributes__counts = g__pointer_value } } })))
