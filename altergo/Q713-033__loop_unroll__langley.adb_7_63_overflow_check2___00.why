(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer_32

logic integer_32qtint : integer_32 -> int

axiom integer_32qtaxiom :
  (forall i:integer_32. ((- 2147483648) <= integer_32qtint(i)))

axiom integer_32qtaxiom1 :
  (forall i:integer_32. (integer_32qtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer_32, integer_32 -> bool

logic dummy : integer_32

type integer_32__ref = { integer_32__content : integer_32
}

function integer_32__ref_integer_32__content__2__projection(a: integer_32__ref) : integer_32 =
  (a).integer_32__content

function to_rep(x: integer_32) : int = integer_32qtint(x)

logic of_rep : int -> integer_32

axiom inversion_axiom :
  (forall x:integer_32 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer_32 [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,integer_32) farray
}

logic slide : (int,integer_32) farray, int, int -> (int,integer_32) farray

axiom slide_eq :
  (forall a:(int,integer_32) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer_32) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,integer_32) farray, a__first: int, a__last: int,
  b: (int,integer_32) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer_32) farray. forall b:(int,integer_32) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic x : (int,integer_32) farray

logic attr__ATTRIBUTE_ADDRESS : int

logic y : (int,integer_32) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tinteger_32B

logic tinteger_32Bqtint : tinteger_32B -> int

axiom tinteger_32Bqtaxiom :
  (forall i:tinteger_32B. ((- 2147483648) <= tinteger_32Bqtint(i)))

axiom tinteger_32Bqtaxiom1 :
  (forall i:tinteger_32B. (tinteger_32Bqtint(i) <= 2147483647))

predicate in_range2(x1: int) = (((- 2147483648) <= x1) and
  (x1 <= 2147483647))

function bool_eq3(x1: int, y1: int) : bool =
  (if (x1 = y1) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tinteger_32B, tinteger_32B -> bool

logic dummy1 : tinteger_32B

type tinteger_32B__ref = { tinteger_32B__content : tinteger_32B
}

function tinteger_32B__ref_tinteger_32B__content__projection(a: tinteger_32B__ref) : tinteger_32B =
  (a).tinteger_32B__content

predicate dynamic_invariant(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_181))

 (* File "langley.adb", line 5, characters 0-0 *)
goal defqtvc :
  (forall sum:(int,integer_32) farray.
  ((forall i:int. (((0 <= i) and (i <= 9)) ->
   ((((to_rep((x[i])) <  1073741824) and
   ((- 1073741824) <  to_rep((x[i])))) and
   (to_rep((y[i])) <  1073741824)) and ((- 1073741824) <  to_rep((y[i])))))) ->
  (forall i:int. ((i = 0) ->
  (forall o:int. ((to_rep((y[i])) = o) ->
  (forall o1:int. ((to_rep((x[i])) = o1) -> (let o2 = (o1 + o) : int in
  (in_range2(o2) ->
  (forall o3:integer_32. ((to_rep(o3) = o2) ->
  (forall sum1:(int,integer_32) farray. ((sum1 = (sum[i <- o3])) ->
  (forall i1:int. ((i1 = 1) ->
  (forall o4:int. ((to_rep((y[i1])) = o4) ->
  (forall o5:int. ((to_rep((x[i1])) = o5) -> (let o6 = (o5 + o4) : int in
  (in_range2(o6) ->
  (forall o7:integer_32. ((to_rep(o7) = o6) ->
  (forall sum2:(int,integer_32) farray. ((sum2 = (sum1[i1 <- o7])) ->
  (forall i2:int. ((i2 = 2) ->
  (forall o8:int. ((to_rep((y[i2])) = o8) ->
  (forall o9:int. ((to_rep((x[i2])) = o9) -> (let o10 = (o9 + o8) : int in
  (in_range2(o10) ->
  (forall o11:integer_32. ((to_rep(o11) = o10) ->
  (forall sum3:(int,integer_32) farray. ((sum3 = (sum2[i2 <- o11])) ->
  (forall i3:int. ((i3 = 3) ->
  (forall o12:int. ((to_rep((y[i3])) = o12) ->
  (forall o13:int. ((to_rep((x[i3])) = o13) -> (let o14 = (o13 + o12)
  : int in (in_range2(o14) ->
  (forall o15:integer_32. ((to_rep(o15) = o14) ->
  (forall sum4:(int,integer_32) farray. ((sum4 = (sum3[i3 <- o15])) ->
  (forall i4:int. ((i4 = 4) ->
  (forall o16:int. ((to_rep((y[i4])) = o16) ->
  (forall o17:int. ((to_rep((x[i4])) = o17) -> (let o18 = (o17 + o16)
  : int in (in_range2(o18) ->
  (forall o19:integer_32. ((to_rep(o19) = o18) ->
  (forall sum5:(int,integer_32) farray. ((sum5 = (sum4[i4 <- o19])) ->
  (forall i5:int. ((i5 = 5) ->
  (forall o20:int. ((to_rep((y[i5])) = o20) ->
  (forall o21:int. ((to_rep((x[i5])) = o21) -> (let o22 = (o21 + o20)
  : int in (in_range2(o22) ->
  (forall o23:integer_32. ((to_rep(o23) = o22) ->
  (forall sum6:(int,integer_32) farray. ((sum6 = (sum5[i5 <- o23])) ->
  (forall i6:int. ((i6 = 6) ->
  (forall o24:int. ((to_rep((y[i6])) = o24) ->
  (forall o25:int. ((to_rep((x[i6])) = o25) -> (let o26 = (o25 + o24)
  : int in (in_range2(o26) ->
  (forall o27:integer_32. ((to_rep(o27) = o26) ->
  (forall sum7:(int,integer_32) farray. ((sum7 = (sum6[i6 <- o27])) ->
  (forall i7:int. ((i7 = 7) ->
  (forall o28:int. ((to_rep((y[i7])) = o28) ->
  (forall o29:int. ((to_rep((x[i7])) = o29) -> (let o30 = (o29 + o28)
  : int in (in_range2(o30) ->
  (forall o31:integer_32. ((to_rep(o31) = o30) ->
  (forall sum8:(int,integer_32) farray. ((sum8 = (sum7[i7 <- o31])) ->
  (forall i8:int. ((i8 = 8) ->
  (forall o32:int. ((to_rep((y[i8])) = o32) ->
  (forall o33:int. ((to_rep((x[i8])) = o33) -> (let o34 = (o33 + o32)
  : int in (in_range2(o34) ->
  (forall o35:integer_32. ((to_rep(o35) = o34) ->
  (forall sum9:(int,integer_32) farray. ((sum9 = (sum8[i8 <- o35])) ->
  (forall i9:int. ((i9 = 9) ->
  (forall o36:int. ((to_rep((y[i9])) = o36) ->
  (forall o37:int. ((to_rep((x[i9])) = o37) -> (let o38 = (o37 + o36)
  : int in (in_range2(o38) ->
  (forall o39:integer_32. ((to_rep(o39) = o38) ->
  (forall sum10:(int,integer_32) farray. ((sum10 = (sum9[i9 <- o39])) ->
  (forall langley__add__result:(int,integer_32) farray.
  ((langley__add__result = sum10) ->
  (forall usf:int. ((andb((if (0 <= usf) then true else false),
  (if (usf <= 9) then true else false)) = true) ->
  (forall o40:int. ((to_rep((y[usf])) = o40) ->
  (forall o41:int. ((to_rep((x[usf])) = o41) -> in_range2((o41 + o40))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
