(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref_nat_array__content__projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

type t4s__ref = { t4s__content : us_t
}

function t4s__ref_t4s__content__projection(a: t4s__ref) : us_t =
  (a).t4s__content

type us_split_discrs = { rec__p__my_rec__c : natural
}

function us_split_discrs_rec__p__my_rec__c__projection(a: us_split_discrs) : natural =
  (a).rec__p__my_rec__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__my_rec__content : us_t
}

function us_split_fields_rec__p__my_rec__content__projection(a: us_split_fields) : us_t =
  (a).rec__p__my_rec__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__p__my_rec__c) = to_rep(((b).us_split_discrs1).rec__p__my_rec__c)) and
  (bool_eq5(((a).us_split_fields1).rec__p__my_rec__content,
  ((b).us_split_fields1).rec__p__my_rec__content) = true)) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p__my_rec__c__first__bit : int

logic p__my_rec__c__last__bit : int

logic p__my_rec__c__position : int

axiom p__my_rec__c__first__bit_axiom : (0 <= p__my_rec__c__first__bit)

axiom p__my_rec__c__last__bit_axiom :
  (p__my_rec__c__first__bit <  p__my_rec__c__last__bit)

axiom p__my_rec__c__position_axiom : (0 <= p__my_rec__c__position)

logic p__my_rec__content__first__bit : int

logic p__my_rec__content__last__bit : int

logic p__my_rec__content__position : int

axiom p__my_rec__content__first__bit_axiom :
  (0 <= p__my_rec__content__first__bit)

axiom p__my_rec__content__last__bit_axiom :
  (p__my_rec__content__first__bit <  p__my_rec__content__last__bit)

axiom p__my_rec__content__position_axiom :
  (0 <= p__my_rec__content__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type my_rec__ref = { my_rec__content : us_rep
}

function my_rec__ref_my_rec__content__projection(a: my_rec__ref) : us_rep =
  (a).my_rec__content

type t6s__ref = { t6s__content : us_t
}

function t6s__ref_t6s__content__projection(a: t6s__ref) : us_t =
  (a).t6s__content

type us_split_fields2 = { rec__p__my_rec__content1 : us_t
}

function us_split_fields_rec__p__my_rec__content__2__projection(a: us_split_fields2) : us_t =
  (a).rec__p__my_rec__content1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__p__my_rec__content =
  of_array(to_array(((a).us_split_fields3).rec__p__my_rec__content1),
  first1(((a).us_split_fields3).rec__p__my_rec__content1),
  last1(((a).us_split_fields3).rec__p__my_rec__content1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__p__my_rec__content1 =
  of_array(to_array(((r).us_split_fields1).rec__p__my_rec__content),
  first1(((r).us_split_fields1).rec__p__my_rec__content),
  last1(((r).us_split_fields1).rec__p__my_rec__content)) } }

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs2).rec__p__my_rec__c) = to_rep(((b).us_split_discrs2).rec__p__my_rec__c)) and
  (bool_eq5(((a).us_split_fields3).rec__p__my_rec__content1,
  ((b).us_split_fields3).rec__p__my_rec__content1) = true)) then true else false)

predicate in_range4(rec__p__my_rec__c1: int, a: us_rep) =
  (rec__p__my_rec__c1 = to_rep(((a).us_split_discrs1).rec__p__my_rec__c))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic p__my_rec__c__first__bit1 : int

logic p__my_rec__c__last__bit1 : int

logic p__my_rec__c__position1 : int

axiom p__my_rec__c__first__bit_axiom1 : (0 <= p__my_rec__c__first__bit1)

axiom p__my_rec__c__last__bit_axiom1 :
  (p__my_rec__c__first__bit1 <  p__my_rec__c__last__bit1)

axiom p__my_rec__c__position_axiom1 : (0 <= p__my_rec__c__position1)

logic p__my_rec__content__first__bit1 : int

logic p__my_rec__content__last__bit1 : int

logic p__my_rec__content__position1 : int

axiom p__my_rec__content__first__bit_axiom1 :
  (0 <= p__my_rec__content__first__bit1)

axiom p__my_rec__content__last__bit_axiom1 :
  (p__my_rec__content__first__bit1 <  p__my_rec__content__last__bit1)

axiom p__my_rec__content__position_axiom1 :
  (0 <= p__my_rec__content__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type t5s__ref = { t5s__content : us_rep1
}

function t5s__ref_t5s__content__projection(a: t5s__ref) : us_rep1 =
  (a).t5s__content

type us_split_discrs3 = { rec__p__pp__b : bool; rec__p__pp__c : natural
}

function us_split_discrs_rec__p__pp__b__projection(a: us_split_discrs3) : bool =
  (a).rec__p__pp__b

function us_split_discrs_rec__p__pp__c__projection(a: us_split_discrs3) : natural =
  (a).rec__p__pp__c

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs3
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs3 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__p__pp__dummy : bool; rec__p__pp__r : us_rep1
}

function us_split_fields_rec__p__pp__dummy__projection(a: us_split_fields4) : bool =
  (a).rec__p__pp__dummy

function us_split_fields_rec__p__pp__r__projection(a: us_split_fields4) : us_rep1 =
  (a).rec__p__pp__r

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs3; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__4__projection(a: us_rep2) : us_split_discrs3 =
  (a).us_split_discrs4

function us_rep___split_fields__4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic p__pp__b__first__bit : int

logic p__pp__b__last__bit : int

logic p__pp__b__position : int

axiom p__pp__b__first__bit_axiom : (0 <= p__pp__b__first__bit)

axiom p__pp__b__last__bit_axiom :
  (p__pp__b__first__bit <  p__pp__b__last__bit)

axiom p__pp__b__position_axiom : (0 <= p__pp__b__position)

logic p__pp__c__first__bit : int

logic p__pp__c__last__bit : int

logic p__pp__c__position : int

axiom p__pp__c__first__bit_axiom : (0 <= p__pp__c__first__bit)

axiom p__pp__c__last__bit_axiom :
  (p__pp__c__first__bit <  p__pp__c__last__bit)

axiom p__pp__c__position_axiom : (0 <= p__pp__c__position)

logic p__pp__dummy__first__bit : int

logic p__pp__dummy__last__bit : int

logic p__pp__dummy__position : int

axiom p__pp__dummy__first__bit_axiom : (0 <= p__pp__dummy__first__bit)

axiom p__pp__dummy__last__bit_axiom :
  (p__pp__dummy__first__bit <  p__pp__dummy__last__bit)

axiom p__pp__dummy__position_axiom : (0 <= p__pp__dummy__position)

logic p__pp__r__first__bit : int

logic p__pp__r__last__bit : int

logic p__pp__r__position : int

axiom p__pp__r__first__bit_axiom : (0 <= p__pp__r__first__bit)

axiom p__pp__r__last__bit_axiom :
  (p__pp__r__first__bit <  p__pp__r__last__bit)

axiom p__pp__r__position_axiom : (0 <= p__pp__r__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

type pp__ref = { pp__content : us_rep2
}

function pp__ref_pp__content__projection(a: pp__ref) : us_rep2 =
  (a).pp__content

logic prot : us_rep2 -> bool

logic prot__function_guard : bool, us_rep2 -> prop

predicate dynamic_invariant1(temp___expr_200: us_rep2,
  temp___is_init_196: bool, temp___skip_constant_197: bool,
  temp___do_toplevel_198: bool, temp___do_typ_inv_199: bool) =
  (let temp___202 = ((temp___expr_200).us_split_discrs4).rec__p__pp__c
  : natural in (in_range4(to_rep(temp___202),
  to_base(((temp___expr_200).us_split_fields5).rec__p__pp__r)) and
  (dynamic_property(1, to_rep(temp___202),
  first1(((((temp___expr_200).us_split_fields5).rec__p__pp__r).us_split_fields3).rec__p__my_rec__content1),
  last1(((((temp___expr_200).us_split_fields5).rec__p__pp__r).us_split_fields3).rec__p__my_rec__content1)) and
  ((first1(((((temp___expr_200).us_split_fields5).rec__p__pp__r).us_split_fields3).rec__p__my_rec__content1) = 1) and
  (last1(((((temp___expr_200).us_split_fields5).rec__p__pp__r).us_split_fields3).rec__p__my_rec__content1) = to_rep(temp___202))))))

axiom prot__def_axiom :
  (forall self__:us_rep2 [prot(self__)]. ((prot(self__) = true) ->
  (((self__).us_split_discrs4).rec__p__pp__b = true)))

axiom prot__def_axiom1 :
  (forall self__:us_rep2 [prot(self__)]. ((prot(self__) = true) ->
  (((self__).us_split_fields5).rec__p__pp__dummy = true)))

axiom prot__def_axiom2 :
  (forall self__:us_rep2 [prot(self__)].
  (((((self__).us_split_discrs4).rec__p__pp__b = true) and
  (((self__).us_split_fields5).rec__p__pp__dummy = true)) ->
  (prot(self__) = true)))

type us_split_fields6 = { rec__p__pp__dummy1 : bool; rec__p__pp__r1 : us_rep1
}

function us_split_fields_rec__p__pp__dummy__2__projection(a: us_split_fields6) : bool =
  (a).rec__p__pp__dummy1

function us_split_fields_rec__p__pp__r__2__projection(a: us_split_fields6) : us_rep1 =
  (a).rec__p__pp__r1

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs5 : us_split_discrs3; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__5__projection(a: us_rep3) : us_split_discrs3 =
  (a).us_split_discrs5

function us_rep___split_fields__5__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function to_base1(a: us_rep3) : us_rep2 = { us_split_discrs4 =
  (a).us_split_discrs5; us_split_fields5 = { rec__p__pp__dummy =
  ((a).us_split_fields7).rec__p__pp__dummy1; rec__p__pp__r =
  ((a).us_split_fields7).rec__p__pp__r1 } }

function of_base1(r: us_rep2) : us_rep3 = { us_split_discrs5 =
  (r).us_split_discrs4; us_split_fields7 = { rec__p__pp__dummy1 =
  ((r).us_split_fields5).rec__p__pp__dummy; rec__p__pp__r1 =
  ((r).us_split_fields5).rec__p__pp__r } }

predicate in_range5(rec__p__pp__b1: bool, rec__p__pp__c1: int, a: us_rep2) =
  ((rec__p__pp__b1 = ((a).us_split_discrs4).rec__p__pp__b) and
  (rec__p__pp__c1 = to_rep(((a).us_split_discrs4).rec__p__pp__c)))

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic p__pp__b__first__bit1 : int

logic p__pp__b__last__bit1 : int

logic p__pp__b__position1 : int

axiom p__pp__b__first__bit_axiom1 : (0 <= p__pp__b__first__bit1)

axiom p__pp__b__last__bit_axiom1 :
  (p__pp__b__first__bit1 <  p__pp__b__last__bit1)

axiom p__pp__b__position_axiom1 : (0 <= p__pp__b__position1)

logic p__pp__c__first__bit1 : int

logic p__pp__c__last__bit1 : int

logic p__pp__c__position1 : int

axiom p__pp__c__first__bit_axiom1 : (0 <= p__pp__c__first__bit1)

axiom p__pp__c__last__bit_axiom1 :
  (p__pp__c__first__bit1 <  p__pp__c__last__bit1)

axiom p__pp__c__position_axiom1 : (0 <= p__pp__c__position1)

logic p__pp__dummy__first__bit1 : int

logic p__pp__dummy__last__bit1 : int

logic p__pp__dummy__position1 : int

axiom p__pp__dummy__first__bit_axiom1 : (0 <= p__pp__dummy__first__bit1)

axiom p__pp__dummy__last__bit_axiom1 :
  (p__pp__dummy__first__bit1 <  p__pp__dummy__last__bit1)

axiom p__pp__dummy__position_axiom1 : (0 <= p__pp__dummy__position1)

logic p__pp__r__first__bit1 : int

logic p__pp__r__last__bit1 : int

logic p__pp__r__position1 : int

axiom p__pp__r__first__bit_axiom1 : (0 <= p__pp__r__first__bit1)

axiom p__pp__r__last__bit_axiom1 :
  (p__pp__r__first__bit1 <  p__pp__r__last__bit1)

axiom p__pp__r__position_axiom1 : (0 <= p__pp__r__position1)

logic user_eq7 : us_rep3, us_rep3 -> bool

type txS__ref = { txS__content : us_rep3
}

function txS__ref_txS__content__projection(a: txS__ref) : us_rep3 =
  (a).txS__content

logic x__split_discrs : us_split_discrs3

logic attr__ATTRIBUTE_ADDRESS : int

type t8s__ref = { t8s__content : us_t
}

function t8s__ref_t8s__content__projection(a: t8s__ref) : us_t =
  (a).t8s__content

type us_split_fields8 = { rec__p__my_rec__content2 : us_t
}

function us_split_fields_rec__p__my_rec__content__3__projection(a: us_split_fields8) : us_t =
  (a).rec__p__my_rec__content2

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_discrs6 : us_split_discrs; us_split_fields9 :
us_split_fields8
}

function us_rep___split_discrs__3__projection(a: us_rep4) : us_split_discrs =
  (a).us_split_discrs6

function us_rep___split_fields__3__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function to_base2(a: us_rep4) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs6; us_split_fields1 = { rec__p__my_rec__content =
  of_array(to_array(((a).us_split_fields9).rec__p__my_rec__content2),
  first1(((a).us_split_fields9).rec__p__my_rec__content2),
  last1(((a).us_split_fields9).rec__p__my_rec__content2)) } }

function of_base2(r: us_rep) : us_rep4 = { us_split_discrs6 =
  (r).us_split_discrs1; us_split_fields9 = { rec__p__my_rec__content2 =
  of_array(to_array(((r).us_split_fields1).rec__p__my_rec__content),
  first1(((r).us_split_fields1).rec__p__my_rec__content),
  last1(((r).us_split_fields1).rec__p__my_rec__content)) } }

function bool_eq8(a: us_rep4, b: us_rep4) : bool =
  (if ((to_rep(((a).us_split_discrs6).rec__p__my_rec__c) = to_rep(((b).us_split_discrs6).rec__p__my_rec__c)) and
  (bool_eq5(((a).us_split_fields9).rec__p__my_rec__content2,
  ((b).us_split_fields9).rec__p__my_rec__content2) = true)) then true else false)

predicate in_range6(rec__p__my_rec__c1: int, a: us_rep) =
  (rec__p__my_rec__c1 = to_rep(((a).us_split_discrs1).rec__p__my_rec__c))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic p__my_rec__c__first__bit2 : int

logic p__my_rec__c__last__bit2 : int

logic p__my_rec__c__position2 : int

axiom p__my_rec__c__first__bit_axiom2 : (0 <= p__my_rec__c__first__bit2)

axiom p__my_rec__c__last__bit_axiom2 :
  (p__my_rec__c__first__bit2 <  p__my_rec__c__last__bit2)

axiom p__my_rec__c__position_axiom2 : (0 <= p__my_rec__c__position2)

logic p__my_rec__content__first__bit2 : int

logic p__my_rec__content__last__bit2 : int

logic p__my_rec__content__position2 : int

axiom p__my_rec__content__first__bit_axiom2 :
  (0 <= p__my_rec__content__first__bit2)

axiom p__my_rec__content__last__bit_axiom2 :
  (p__my_rec__content__first__bit2 <  p__my_rec__content__last__bit2)

axiom p__my_rec__content__position_axiom2 :
  (0 <= p__my_rec__content__position2)

logic user_eq8 : us_rep4, us_rep4 -> bool

logic dummy6 : us_rep4

type t7s__ref = { t7s__content : us_rep4
}

function t7s__ref_t7s__content__projection(a: t7s__ref) : us_rep4 =
  (a).t7s__content

type t10s__ref = { t10s__content : us_t
}

function t10s__ref_t10s__content__projection(a: t10s__ref) : us_t =
  (a).t10s__content

logic temp_____aggregate_def_225 : int, int, int -> us_t

predicate dynamic_invariant2(temp___expr_216: us_rep3,
  temp___is_init_212: bool, temp___skip_constant_213: bool,
  temp___do_toplevel_214: bool, temp___do_typ_inv_215: bool) =
  (((not (temp___skip_constant_213 = true)) -> in_range5(of_int(1), 10,
  to_base1(temp___expr_216))) and (let temp___218 =
  ((temp___expr_216).us_split_discrs5).rec__p__pp__c : natural in
  (in_range4(to_rep(temp___218),
  to_base(((temp___expr_216).us_split_fields7).rec__p__pp__r1)) and
  (dynamic_property(1, to_rep(temp___218),
  first1(((((temp___expr_216).us_split_fields7).rec__p__pp__r1).us_split_fields3).rec__p__my_rec__content1),
  last1(((((temp___expr_216).us_split_fields7).rec__p__pp__r1).us_split_fields3).rec__p__my_rec__content1)) and
  ((first1(((((temp___expr_216).us_split_fields7).rec__p__pp__r1).us_split_fields3).rec__p__my_rec__content1) = 1) and
  (last1(((((temp___expr_216).us_split_fields7).rec__p__pp__r1).us_split_fields3).rec__p__my_rec__content1) = to_rep(temp___218)))))))

predicate default_initial_assumption(temp___expr_221: us_rep3,
  temp___skip_top_level_222: bool) = (let temp___224 =
  ((temp___expr_221).us_split_discrs5).rec__p__pp__c : natural in
  (((((temp___expr_221).us_split_discrs5).rec__p__pp__b = of_int(1)) and
  (to_rep(((temp___expr_221).us_split_discrs5).rec__p__pp__c) = 10)) and
  ((((temp___expr_221).us_split_fields7).rec__p__pp__dummy1 = of_int(1)) and
  (((temp___expr_221).us_split_fields7).rec__p__pp__r1 = of_base(to_base2({
  us_split_discrs6 = { rec__p__my_rec__c = temp___224 }; us_split_fields9 = {
  rec__p__my_rec__content2 = of_array(to_array(temp_____aggregate_def_225(0,
  1, to_rep(temp___224))), first1(temp_____aggregate_def_225(0, 1,
  to_rep(temp___224))), last1(temp_____aggregate_def_225(0, 1,
  to_rep(temp___224)))) } }))))))

logic c : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

logic d : bool

logic attr__ATTRIBUTE_ADDRESS2 : int

logic e : bool

logic attr__ATTRIBUTE_ADDRESS3 : int

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range2(temp___expr_46))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

predicate dynamic_invariant5(temp___expr_166: us_t, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = ((not (temp___skip_constant_163 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_166),
  last1(temp___expr_166)))

predicate dynamic_invariant6(temp___expr_172: us_rep,
  temp___is_init_168: bool, temp___skip_constant_169: bool,
  temp___do_toplevel_170: bool, temp___do_typ_inv_171: bool) =
  (let temp___173 = ((temp___expr_172).us_split_discrs1).rec__p__my_rec__c
  : natural in (dynamic_property(1, to_rep(temp___173),
  first1(((temp___expr_172).us_split_fields1).rec__p__my_rec__content),
  last1(((temp___expr_172).us_split_fields1).rec__p__my_rec__content)) and
  ((first1(((temp___expr_172).us_split_fields1).rec__p__my_rec__content) = 1) and
  (last1(((temp___expr_172).us_split_fields1).rec__p__my_rec__content) = to_rep(temp___173)))))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  (dynamic_invariant(temp___227, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___228, temp___229) ->
  (first1(temp_____aggregate_def_225(temp___227, temp___228,
  temp___229)) = temp___228))))

axiom def_axiom1 :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  (dynamic_invariant(temp___227, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___228, temp___229) ->
  (last1(temp_____aggregate_def_225(temp___227, temp___228,
  temp___229)) = temp___229))))

axiom def_axiom2 :
  (forall temp___227:int. forall temp___228:int. forall temp___229:int.
  (dynamic_invariant(temp___227, true, true, true, true) ->
  (forall temp___230:int. ((to_array(temp_____aggregate_def_225(temp___227,
  temp___228, temp___229))[temp___230]) = rliteral))))

 (* File "p.ads", line 1, characters 0-0 *)
goal defqtvc :
  ((exists usf:int. (dynamic_invariant(usf, true, true, true, true) and
   (exists usf1:us_rep.
   (to_rep(((usf1).us_split_discrs1).rec__p__my_rec__c) = usf)))) ->
  ((exists usf:int. (dynamic_invariant(usf, true, true, true, true) and
   (exists usf1:bool.
   (exists usf2:us_rep2.
   (((((usf2).us_split_discrs4).rec__p__pp__b = usf1) and
   (to_rep(((usf2).us_split_discrs4).rec__p__pp__c) = usf)) and
   in_range1(usf)))))) -> (in_range1(10) -> in_range(1))))
