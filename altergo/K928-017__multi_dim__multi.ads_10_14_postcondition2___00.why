(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

logic attr__ATTRIBUTE_ADDRESS : int

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> integer

logic set : map, int, int, integer -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:integer [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:integer [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq2(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156))))))) then true else false)

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_155:int. forall temp___idx_156:int.
  ((((a__first <= temp___idx_155) and (temp___idx_155 <= a__last)) and
  ((a__first_2 <= temp___idx_156) and (temp___idx_156 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_155, temp___idx_156)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_155),
  ((b__first_2 - a__first_2) + temp___idx_156)))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic b : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type ta4D2

logic ta4D2qtint : ta4D2 -> int

axiom ta4D2qtaxiom : (forall i:ta4D2. (1 <= ta4D2qtint(i)))

axiom ta4D2qtaxiom1 : (forall i:ta4D2. (ta4D2qtint(i) <= 2))

predicate in_range2(x: int) = ((1 <= x) and (x <= 2))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : ta4D2, ta4D2 -> bool

logic dummy1 : ta4D2

type ta4D2__ref = { ta4D2__content : ta4D2
}

function ta4D2__ref_ta4D2__content__projection(a: ta4D2__ref) : ta4D2 =
  (a).ta4D2__content

logic temp_____aggregate_def_183 : int, int, int, int -> map

logic temp_____aggregate_def_191 : int -> map

logic temp_____aggregate_def_196 : int, int, int -> map

logic temp_____aggregate_def_203 : int, int, int -> map

logic temp_____aggregate_def_210 : int, int, int, int -> map

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 2)

axiom def_axiom :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  forall temp___188:int. (((dynamic_invariant(temp___185, true, true, true,
  true) and dynamic_invariant(temp___186, true, true, true, true)) and
  (dynamic_invariant(temp___187, true, true, true, true) and
  dynamic_invariant(temp___188, true, true, true, true))) ->
  (to_rep(get(temp_____aggregate_def_183(temp___185, temp___186, temp___187,
  temp___188), 1, 1)) = temp___185)))

axiom def_axiom1 :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  forall temp___188:int. (((dynamic_invariant(temp___185, true, true, true,
  true) and dynamic_invariant(temp___186, true, true, true, true)) and
  (dynamic_invariant(temp___187, true, true, true, true) and
  dynamic_invariant(temp___188, true, true, true, true))) ->
  (get(temp_____aggregate_def_183(temp___185, temp___186, temp___187,
  temp___188), 1, 2) = rliteral)))

axiom def_axiom2 :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  forall temp___188:int. (((dynamic_invariant(temp___185, true, true, true,
  true) and dynamic_invariant(temp___186, true, true, true, true)) and
  (dynamic_invariant(temp___187, true, true, true, true) and
  dynamic_invariant(temp___188, true, true, true, true))) ->
  (to_rep(get(temp_____aggregate_def_183(temp___185, temp___186, temp___187,
  temp___188), 2, 1)) = temp___187)))

axiom def_axiom3 :
  (forall temp___185:int. forall temp___186:int. forall temp___187:int.
  forall temp___188:int. (((dynamic_invariant(temp___185, true, true, true,
  true) and dynamic_invariant(temp___186, true, true, true, true)) and
  (dynamic_invariant(temp___187, true, true, true, true) and
  dynamic_invariant(temp___188, true, true, true, true))) ->
  (get(temp_____aggregate_def_183(temp___185, temp___186, temp___187,
  temp___188), 2, 2) = rliteral)))

axiom def_axiom4 :
  (forall temp___193:int. (dynamic_invariant(temp___193, true, true, true,
  true) ->
  (forall temp___194:int. forall temp___195:int.
  (to_rep(get(temp_____aggregate_def_191(temp___193), temp___194,
  temp___195)) = temp___193))))

axiom def_axiom5 :
  (forall temp___198:int. forall temp___199:int. forall temp___200:int.
  (((dynamic_invariant(temp___198, true, true, true, true) and
  dynamic_invariant(temp___199, true, true, true, true)) and
  dynamic_invariant(temp___200, true, true, true, true)) ->
  (forall temp___201:int. forall temp___202:int. ((temp___201 = 1) ->
  ((temp___202 = 1) -> (to_rep(get(temp_____aggregate_def_196(temp___198,
  temp___199, temp___200), temp___201, temp___202)) = temp___198))))))

axiom def_axiom6 :
  (forall temp___198:int. forall temp___199:int. forall temp___200:int.
  (((dynamic_invariant(temp___198, true, true, true, true) and
  dynamic_invariant(temp___199, true, true, true, true)) and
  dynamic_invariant(temp___200, true, true, true, true)) ->
  (forall temp___201:int. forall temp___202:int. ((temp___201 = 1) ->
  ((not (temp___202 = 1)) ->
  (to_rep(get(temp_____aggregate_def_196(temp___198, temp___199, temp___200),
  temp___201, temp___202)) = temp___199))))))

axiom def_axiom7 :
  (forall temp___198:int. forall temp___199:int. forall temp___200:int.
  (((dynamic_invariant(temp___198, true, true, true, true) and
  dynamic_invariant(temp___199, true, true, true, true)) and
  dynamic_invariant(temp___200, true, true, true, true)) ->
  (forall temp___201:int. forall temp___202:int. ((not (temp___201 = 1)) ->
  ((temp___201 = 2) -> (to_rep(get(temp_____aggregate_def_196(temp___198,
  temp___199, temp___200), temp___201, temp___202)) = temp___200))))))

axiom def_axiom8 :
  (forall temp___205:int. forall temp___206:int. forall temp___207:int.
  (((dynamic_invariant(temp___205, true, true, true, true) and
  dynamic_invariant(temp___206, true, true, true, true)) and
  dynamic_invariant(temp___207, true, true, true, true)) ->
  (forall temp___208:int. forall temp___209:int. ((temp___208 = 1) ->
  ((temp___209 = 1) -> (get(temp_____aggregate_def_203(temp___205,
  temp___206, temp___207), temp___208, temp___209) = rliteral))))))

axiom def_axiom9 :
  (forall temp___205:int. forall temp___206:int. forall temp___207:int.
  (((dynamic_invariant(temp___205, true, true, true, true) and
  dynamic_invariant(temp___206, true, true, true, true)) and
  dynamic_invariant(temp___207, true, true, true, true)) ->
  (forall temp___208:int. forall temp___209:int. ((temp___208 = 1) ->
  ((not (temp___209 = 1)) ->
  (to_rep(get(temp_____aggregate_def_203(temp___205, temp___206, temp___207),
  temp___208, temp___209)) = temp___206))))))

axiom def_axiom10 :
  (forall temp___205:int. forall temp___206:int. forall temp___207:int.
  (((dynamic_invariant(temp___205, true, true, true, true) and
  dynamic_invariant(temp___206, true, true, true, true)) and
  dynamic_invariant(temp___207, true, true, true, true)) ->
  (forall temp___208:int. forall temp___209:int. ((not (temp___208 = 1)) ->
  ((temp___208 = 2) -> (to_rep(get(temp_____aggregate_def_203(temp___205,
  temp___206, temp___207), temp___208, temp___209)) = temp___207))))))

axiom def_axiom11 :
  (forall temp___212:int. forall temp___213:int. forall temp___214:int.
  forall temp___215:int. (((dynamic_invariant(temp___212, true, true, true,
  true) and dynamic_invariant(temp___213, true, true, true, true)) and
  (dynamic_invariant(temp___214, true, true, true, true) and
  dynamic_invariant(temp___215, true, true, true, true))) ->
  (forall temp___216:int. forall temp___217:int. ((temp___216 = 2) ->
  ((temp___217 = 1) -> (get(temp_____aggregate_def_210(temp___212,
  temp___213, temp___214, temp___215), temp___216, temp___217) = rliteral))))))

axiom def_axiom12 :
  (forall temp___212:int. forall temp___213:int. forall temp___214:int.
  forall temp___215:int. (((dynamic_invariant(temp___212, true, true, true,
  true) and dynamic_invariant(temp___213, true, true, true, true)) and
  (dynamic_invariant(temp___214, true, true, true, true) and
  dynamic_invariant(temp___215, true, true, true, true))) ->
  (forall temp___216:int. forall temp___217:int. ((temp___216 = 2) ->
  ((not (temp___217 = 1)) -> ((temp___217 = 2) ->
  (to_rep(get(temp_____aggregate_def_210(temp___212, temp___213, temp___214,
  temp___215), temp___216, temp___217)) = temp___213)))))))

axiom def_axiom13 :
  (forall temp___212:int. forall temp___213:int. forall temp___214:int.
  forall temp___215:int. (((dynamic_invariant(temp___212, true, true, true,
  true) and dynamic_invariant(temp___213, true, true, true, true)) and
  (dynamic_invariant(temp___214, true, true, true, true) and
  dynamic_invariant(temp___215, true, true, true, true))) ->
  (forall temp___216:int. forall temp___217:int. ((not (temp___216 = 2)) ->
  ((temp___217 = 1) -> (to_rep(get(temp_____aggregate_def_210(temp___212,
  temp___213, temp___214, temp___215), temp___216,
  temp___217)) = temp___214))))))

axiom def_axiom14 :
  (forall temp___212:int. forall temp___213:int. forall temp___214:int.
  forall temp___215:int. (((dynamic_invariant(temp___212, true, true, true,
  true) and dynamic_invariant(temp___213, true, true, true, true)) and
  (dynamic_invariant(temp___214, true, true, true, true) and
  dynamic_invariant(temp___215, true, true, true, true))) ->
  (forall temp___216:int. forall temp___217:int. ((not (temp___216 = 2)) ->
  ((not (temp___217 = 1)) -> ((temp___217 = 2) ->
  (to_rep(get(temp_____aggregate_def_210(temp___212, temp___213, temp___214,
  temp___215), temp___216, temp___217)) = temp___215)))))))

 (* File "multi.ads", line 8, characters 0-0 *)
goal defqtvc :
  (forall one:int. (dynamic_invariant(one, true, false, true, true) ->
  (dynamic_invariant(b, true, false, true, true) -> ((one = 1) ->
  (forall a:map.
  ((exists spark__branch:bool.
   ((spark__branch = (if (b = 1) then true else false)) and
   (if (spark__branch = true) then (a = temp_____aggregate_def_183(one, 2,
   one,
   2)) else (exists spark__branch1:bool.
            ((spark__branch1 = (if (b = 2) then true else false)) and
            (if (spark__branch1 = true) then (a = temp_____aggregate_def_191(one)) else 
            (exists spark__branch2:bool.
            ((spark__branch2 = (if (b = 3) then true else false)) and
            (if (spark__branch2 = true) then (a = temp_____aggregate_def_196(one,
            one,
            one)) else (exists spark__branch3:bool.
                       ((spark__branch3 = (if (b = 4) then true else false)) and
                       (if (spark__branch3 = true) then (a = temp_____aggregate_def_203(2,
                       one, one)) else (a = temp_____aggregate_def_210(2,
                       one, one, one)))))))))))))) ->
  ((b = 1) ->
  (forall k:int. (((1 <= k) and (k <= 2)) -> (to_rep(get(a, k, one)) = one))))))))))
