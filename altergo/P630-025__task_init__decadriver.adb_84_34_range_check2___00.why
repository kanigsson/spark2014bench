(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq1(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne1(x: t, y: t) : bool =
  (if (not (x = y)) then true else false)

function bool_lt1(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le1(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt1(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge1(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int1(b: bool) : int = (if (b = true) then 1 else 0)

function of_int1(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type bits_8

logic attr__ATTRIBUTE_MODULUS : t

function bool_eq5(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : bits_8, bits_8 -> bool

logic dummy2 : bits_8

type bits_8__ref = { bits_8__content : bits_8
}

function bits_8__ref_bits_8__content__projection(a: bits_8__ref) : bits_8 =
  (a).bits_8__content

logic to_rep2 : bits_8 -> t

logic of_rep2 : t -> bits_8

axiom inversion_axiom2 :
  (forall x:bits_8 [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom coerce_axiom2 :
  (forall x:t [to_rep2(of_rep2(x))]. (to_rep2(of_rep2(x)) = x))

function to_int2(x: bits_8) : int = tqtint(to_rep2(x))

axiom range_int_axiom :
  (forall x:bits_8 [to_int2(x)]. uint_in_range(to_int2(x)))

type map__ref = { map__content : (int,bits_8) farray
}

logic slide : (int,bits_8) farray, int, int -> (int,bits_8) farray

axiom slide_eq :
  (forall a:(int,bits_8) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bits_8) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,bits_8) farray, a__first: int, a__last: int,
  b: (int,bits_8) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bits_8) farray. forall b:(int,bits_8) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep2((a[temp___idx_154])) = to_rep2((b[((b__first - a__first) + temp___idx_154)]))))))))

logic frame__first : integer

logic frame__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type t1

logic first : t1 -> integer

logic last : t1 -> integer

logic mk : int, int -> t1

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,bits_8) farray; rt : t1
}

function to_array(a: us_t) : (int,bits_8) farray = (a).elts

function of_array(a: (int,bits_8) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq6((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type byte_array__ref = { byte_array__content : us_t
}

function byte_array__ref_byte_array__content__projection(a: byte_array__ref) : us_t =
  (a).byte_array__content

type frame_length

logic frame_lengthqtint : frame_length -> int

axiom frame_lengthqtaxiom :
  (forall i:frame_length. (0 <= frame_lengthqtint(i)))

axiom frame_lengthqtaxiom1 :
  (forall i:frame_length. (frame_lengthqtint(i) <= 1024))

predicate in_range3(x: int) = ((0 <= x) and (x <= 1024))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : frame_length, frame_length -> bool

logic dummy4 : frame_length

type frame_length__ref = { frame_length__content : frame_length
}

function frame_length__ref_frame_length__content__projection(a: frame_length__ref) : frame_length =
  (a).frame_length__content

function to_rep3(x: frame_length) : int = frame_lengthqtint(x)

logic of_rep3 : int -> frame_length

axiom inversion_axiom3 :
  (forall x:frame_length [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom2 :
  (forall x:frame_length [to_rep3(x)]. in_range3(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range3(x) ->
  (to_rep3(of_rep3(x)) = x)))

type rx_errors

predicate in_range4(x: int) = ((0 <= x) and (x <= 5))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : rx_errors, rx_errors -> bool

logic dummy5 : rx_errors

type rx_errors__ref = { rx_errors__content : rx_errors
}

function rx_errors__ref_rx_errors__content__projection(a: rx_errors__ref) : rx_errors =
  (a).rx_errors__content

logic to_rep4 : rx_errors -> int

logic of_rep4 : int -> rx_errors

axiom inversion_axiom4 :
  (forall x:rx_errors [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom3 : (forall x:rx_errors [to_rep4(x)]. in_range4(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range4(x) ->
  (to_rep4(of_rep4(x)) = x)))

logic dummy6 : (int,bits_8) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq6 : (int,bits_8) farray, (int,bits_8) farray -> bool

type us_split_fields = { rec__decadriver__rx_frame_type__size : frame_length;
rec__decadriver__rx_frame_type__frame : (int,bits_8) farray;
rec__decadriver__rx_frame_type__error : rx_errors;
rec__decadriver__rx_frame_type__overrun : bool
}

function us_split_fields_rec__decadriver__rx_frame_type__size__projection(a: us_split_fields) : frame_length =
  (a).rec__decadriver__rx_frame_type__size

function us_split_fields_rec__decadriver__rx_frame_type__frame__projection(a: us_split_fields) : (int,bits_8) farray =
  (a).rec__decadriver__rx_frame_type__frame

function us_split_fields_rec__decadriver__rx_frame_type__error__projection(a: us_split_fields) : rx_errors =
  (a).rec__decadriver__rx_frame_type__error

function us_split_fields_rec__decadriver__rx_frame_type__overrun__projection(a: us_split_fields) : bool =
  (a).rec__decadriver__rx_frame_type__overrun

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq10(a: us_rep, b: us_rep) : bool =
  (if (((to_rep3(((a).us_split_fields1).rec__decadriver__rx_frame_type__size) = to_rep3(((b).us_split_fields1).rec__decadriver__rx_frame_type__size)) and
  (bool_eq6(((a).us_split_fields1).rec__decadriver__rx_frame_type__frame, 0,
  1024, ((b).us_split_fields1).rec__decadriver__rx_frame_type__frame, 0,
  1024) = true)) and
  ((to_rep4(((a).us_split_fields1).rec__decadriver__rx_frame_type__error) = to_rep4(((b).us_split_fields1).rec__decadriver__rx_frame_type__error)) and
  (to_int1(((a).us_split_fields1).rec__decadriver__rx_frame_type__overrun) = to_int1(((b).us_split_fields1).rec__decadriver__rx_frame_type__overrun)))) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic decadriver__rx_frame_type__size__first__bit : int

logic decadriver__rx_frame_type__size__last__bit : int

logic decadriver__rx_frame_type__size__position : int

axiom decadriver__rx_frame_type__size__first__bit_axiom :
  (0 <= decadriver__rx_frame_type__size__first__bit)

axiom decadriver__rx_frame_type__size__last__bit_axiom :
  (decadriver__rx_frame_type__size__first__bit <  decadriver__rx_frame_type__size__last__bit)

axiom decadriver__rx_frame_type__size__position_axiom :
  (0 <= decadriver__rx_frame_type__size__position)

logic decadriver__rx_frame_type__frame__first__bit : int

logic decadriver__rx_frame_type__frame__last__bit : int

logic decadriver__rx_frame_type__frame__position : int

axiom decadriver__rx_frame_type__frame__first__bit_axiom :
  (0 <= decadriver__rx_frame_type__frame__first__bit)

axiom decadriver__rx_frame_type__frame__last__bit_axiom :
  (decadriver__rx_frame_type__frame__first__bit <  decadriver__rx_frame_type__frame__last__bit)

axiom decadriver__rx_frame_type__frame__position_axiom :
  (0 <= decadriver__rx_frame_type__frame__position)

logic decadriver__rx_frame_type__error__first__bit : int

logic decadriver__rx_frame_type__error__last__bit : int

logic decadriver__rx_frame_type__error__position : int

axiom decadriver__rx_frame_type__error__first__bit_axiom :
  (0 <= decadriver__rx_frame_type__error__first__bit)

axiom decadriver__rx_frame_type__error__last__bit_axiom :
  (decadriver__rx_frame_type__error__first__bit <  decadriver__rx_frame_type__error__last__bit)

axiom decadriver__rx_frame_type__error__position_axiom :
  (0 <= decadriver__rx_frame_type__error__position)

logic decadriver__rx_frame_type__overrun__first__bit : int

logic decadriver__rx_frame_type__overrun__last__bit : int

logic decadriver__rx_frame_type__overrun__position : int

axiom decadriver__rx_frame_type__overrun__first__bit_axiom :
  (0 <= decadriver__rx_frame_type__overrun__first__bit)

axiom decadriver__rx_frame_type__overrun__last__bit_axiom :
  (decadriver__rx_frame_type__overrun__first__bit <  decadriver__rx_frame_type__overrun__last__bit)

axiom decadriver__rx_frame_type__overrun__position_axiom :
  (0 <= decadriver__rx_frame_type__overrun__position)

logic user_eq7 : us_rep, us_rep -> bool

logic dummy7 : us_rep

type rx_frame_type__ref = { rx_frame_type__content : us_rep
}

function rx_frame_type__ref_rx_frame_type__content__projection(a: rx_frame_type__ref) : us_rep =
  (a).rx_frame_type__content

type rx_frame_queue_index

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 1)

predicate in_range5(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 1))

function bool_eq11(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> t

logic user_eq8 : rx_frame_queue_index, rx_frame_queue_index -> bool

logic dummy8 : rx_frame_queue_index

type rx_frame_queue_index__ref = { rx_frame_queue_index__content :
rx_frame_queue_index
}

function rx_frame_queue_index__ref_rx_frame_queue_index__content__projection(a: rx_frame_queue_index__ref) : rx_frame_queue_index =
  (a).rx_frame_queue_index__content

type map__ref1 = { map__content1 : (t,us_rep) farray
}

logic slide1 : (t,us_rep) farray, t, t -> (t,us_rep) farray

axiom slide_eq1 :
  (forall a:(t,us_rep) farray.
  (forall first2:t [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(t,us_rep) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide1(a, old_first, new_first)[i])]. ((slide1(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

function bool_eq12(a: (t,us_rep) farray, a__first: t, a__last: t,
  b: (t,us_rep) farray, b__first: t, b__last: t) : bool =
  (if ((if ule(a__first, a__last) then (ule(b__first, b__last) and
  (sub(a__last, a__first) = sub(b__last, b__first))) else ugt(b__first,
  b__last)) and
  (forall temp___idx_155:t. ((ule(a__first, temp___idx_155) and
  ule(temp___idx_155, a__last)) -> (bool_eq10((a[temp___idx_155]),
  (b[add(sub(b__first, a__first), temp___idx_155)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq12(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> ule(b__first, b__last)))))

axiom bool_eq_rev5 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq12(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> (sub(a__last, a__first) = sub(b__last,
  b__first))))))

axiom bool_eq_rev6 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq12(b, b__first, b__last, a, a__first, a__last) = true) ->
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last)))))

axiom bool_eq_rev7 :
  (forall a:(t,us_rep) farray. forall b:(t,us_rep) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq12(b, b__first, b__last, a, a__first, a__last) = true) ->
  (forall temp___idx_155:t. ((ule(a__first, temp___idx_155) and
  ule(temp___idx_155, a__last)) -> (bool_eq10((a[temp___idx_155]),
  (b[add(sub(b__first, a__first), temp___idx_155)])) = true))))))

type us_split_fields2 = { rec__decadriver__receiver_type__frame_queue :
(t,us_rep) farray; rec__decadriver__receiver_type__queue_head :
rx_frame_queue_index; rec__decadriver__receiver_type__rx_count : natural;
rec__decadriver__receiver_type__overrun_occurred : bool;
rec__decadriver__receiver_type__frame_ready : bool
}

function us_split_fields_rec__decadriver__receiver_type__frame_queue__projection(a: us_split_fields2) : (t,us_rep) farray =
  (a).rec__decadriver__receiver_type__frame_queue

function us_split_fields_rec__decadriver__receiver_type__queue_head__projection(a: us_split_fields2) : rx_frame_queue_index =
  (a).rec__decadriver__receiver_type__queue_head

function us_split_fields_rec__decadriver__receiver_type__rx_count__projection(a: us_split_fields2) : natural =
  (a).rec__decadriver__receiver_type__rx_count

function us_split_fields_rec__decadriver__receiver_type__overrun_occurred__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__receiver_type__overrun_occurred

function us_split_fields_rec__decadriver__receiver_type__frame_ready__projection(a: us_split_fields2) : bool =
  (a).rec__decadriver__receiver_type__frame_ready

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic decadriver__receiver_type__frame_queue__first__bit : int

logic decadriver__receiver_type__frame_queue__last__bit : int

logic decadriver__receiver_type__frame_queue__position : int

axiom decadriver__receiver_type__frame_queue__first__bit_axiom :
  (0 <= decadriver__receiver_type__frame_queue__first__bit)

axiom decadriver__receiver_type__frame_queue__last__bit_axiom :
  (decadriver__receiver_type__frame_queue__first__bit <  decadriver__receiver_type__frame_queue__last__bit)

axiom decadriver__receiver_type__frame_queue__position_axiom :
  (0 <= decadriver__receiver_type__frame_queue__position)

logic decadriver__receiver_type__queue_head__first__bit : int

logic decadriver__receiver_type__queue_head__last__bit : int

logic decadriver__receiver_type__queue_head__position : int

axiom decadriver__receiver_type__queue_head__first__bit_axiom :
  (0 <= decadriver__receiver_type__queue_head__first__bit)

axiom decadriver__receiver_type__queue_head__last__bit_axiom :
  (decadriver__receiver_type__queue_head__first__bit <  decadriver__receiver_type__queue_head__last__bit)

axiom decadriver__receiver_type__queue_head__position_axiom :
  (0 <= decadriver__receiver_type__queue_head__position)

logic decadriver__receiver_type__rx_count__first__bit : int

logic decadriver__receiver_type__rx_count__last__bit : int

logic decadriver__receiver_type__rx_count__position : int

axiom decadriver__receiver_type__rx_count__first__bit_axiom :
  (0 <= decadriver__receiver_type__rx_count__first__bit)

axiom decadriver__receiver_type__rx_count__last__bit_axiom :
  (decadriver__receiver_type__rx_count__first__bit <  decadriver__receiver_type__rx_count__last__bit)

axiom decadriver__receiver_type__rx_count__position_axiom :
  (0 <= decadriver__receiver_type__rx_count__position)

logic decadriver__receiver_type__overrun_occurred__first__bit : int

logic decadriver__receiver_type__overrun_occurred__last__bit : int

logic decadriver__receiver_type__overrun_occurred__position : int

axiom decadriver__receiver_type__overrun_occurred__first__bit_axiom :
  (0 <= decadriver__receiver_type__overrun_occurred__first__bit)

axiom decadriver__receiver_type__overrun_occurred__last__bit_axiom :
  (decadriver__receiver_type__overrun_occurred__first__bit <  decadriver__receiver_type__overrun_occurred__last__bit)

axiom decadriver__receiver_type__overrun_occurred__position_axiom :
  (0 <= decadriver__receiver_type__overrun_occurred__position)

logic decadriver__receiver_type__frame_ready__first__bit : int

logic decadriver__receiver_type__frame_ready__last__bit : int

logic decadriver__receiver_type__frame_ready__position : int

axiom decadriver__receiver_type__frame_ready__first__bit_axiom :
  (0 <= decadriver__receiver_type__frame_ready__first__bit)

axiom decadriver__receiver_type__frame_ready__last__bit_axiom :
  (decadriver__receiver_type__frame_ready__first__bit <  decadriver__receiver_type__frame_ready__last__bit)

axiom decadriver__receiver_type__frame_ready__position_axiom :
  (0 <= decadriver__receiver_type__frame_ready__position)

logic user_eq9 : us_rep1, us_rep1 -> bool

type receiver_type__ref = { receiver_type__content : us_rep1
}

function receiver_type__ref_receiver_type__content__projection(a: receiver_type__ref) : us_rep1 =
  (a).receiver_type__content

logic to_rep5 : rx_frame_queue_index -> t

logic of_rep5 : t -> rx_frame_queue_index

axiom inversion_axiom5 :
  (forall x:rx_frame_queue_index [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom4 :
  (forall x:rx_frame_queue_index [to_rep5(x)]. in_range5(to_rep5(x)))

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 2)

axiom coerce_axiom5 :
  (forall x:t [to_rep5(of_rep5(x))]. (let y = urem(x, rliteral2) : t in
  (in_range5(y) -> (to_rep5(of_rep5(x)) = y))))

function to_int3(x: rx_frame_queue_index) : int = tqtint(to_rep5(x))

axiom range_int_axiom1 :
  (forall x:rx_frame_queue_index [to_int3(x)]. in_range_int(to_int3(x)))

logic temp_____aggregate_def_403 : us_rep -> (t,us_rep) farray

logic temp_____aggregate_def_407 : t -> (int,bits_8) farray

predicate dynamic_invariant1(temp___expr_397: us_rep1,
  temp___is_init_393: bool, temp___skip_constant_394: bool,
  temp___do_toplevel_395: bool, temp___do_typ_inv_396: bool) =
  (forall temp___398:t. ((ule(rliteral, temp___398) and ule(temp___398,
  rliteral1)) -> (let temp___399 =
  (((temp___expr_397).us_split_fields3).rec__decadriver__receiver_type__frame_queue[temp___398])
  : us_rep in
  (if (to_rep4(((temp___399).us_split_fields1).rec__decadriver__rx_frame_type__error) = 0) then (0 <  to_rep3(((temp___399).us_split_fields1).rec__decadriver__rx_frame_type__size)) else (to_rep3(((temp___399).us_split_fields1).rec__decadriver__rx_frame_type__size) = 0)))))

logic rliteral3 : frame_length

axiom rliteral_axiom3 : (frame_lengthqtint(rliteral3) = 0)

predicate default_initial_assumption(temp___expr_401: us_rep1,
  temp___skip_top_level_402: bool) =
  (((((temp___expr_401).us_split_fields3).rec__decadriver__receiver_type__frame_queue = temp_____aggregate_def_403({
  us_split_fields1 = { rec__decadriver__rx_frame_type__size = rliteral3;
  rec__decadriver__rx_frame_type__frame =
  temp_____aggregate_def_407(rliteral);
  rec__decadriver__rx_frame_type__error = of_rep4(0);
  rec__decadriver__rx_frame_type__overrun = of_int1(0) } })) and
  (to_rep5(((temp___expr_401).us_split_fields3).rec__decadriver__receiver_type__queue_head) = rliteral1)) and
  (((to_rep(((temp___expr_401).us_split_fields3).rec__decadriver__receiver_type__rx_count) = 0) and
  (((temp___expr_401).us_split_fields3).rec__decadriver__receiver_type__overrun_occurred = of_int1(0))) and
  (((temp___expr_401).us_split_fields3).rec__decadriver__receiver_type__frame_ready = of_int1(0))))

logic r6b : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r9b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant2(temp___expr_276: int, temp___is_init_272: bool,
  temp___skip_constant_273: bool, temp___do_toplevel_274: bool,
  temp___do_typ_inv_275: bool) = (((temp___is_init_272 = true) or
  (0 <= 1024)) -> in_range3(temp___expr_276))

predicate dynamic_invariant3(temp___expr_283: int, temp___is_init_279: bool,
  temp___skip_constant_280: bool, temp___do_toplevel_281: bool,
  temp___do_typ_inv_282: bool) = (((temp___is_init_279 = true) or
  (0 <= 5)) -> in_range4(temp___expr_283))

type t8b__ref = { t8b__content : us_t
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : us_t =
  (a).t8b__content

type t11b__ref = { t11b__content : us_t
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_t =
  (a).t11b__content

type t13b__ref = { t13b__content : us_t
}

function t13b__ref_t13b__content__projection(a: t13b__ref) : us_t =
  (a).t13b__content

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant5(temp___expr_310: us_rep,
  temp___is_init_306: bool, temp___skip_constant_307: bool,
  temp___do_toplevel_308: bool, temp___do_typ_inv_309: bool) =
  ((temp___do_toplevel_308 = true) -> ((temp___is_init_306 = true) ->
  (if (to_rep4(((temp___expr_310).us_split_fields1).rec__decadriver__rx_frame_type__error) = 0) then (0 <  to_rep3(((temp___expr_310).us_split_fields1).rec__decadriver__rx_frame_type__size)) else (to_rep3(((temp___expr_310).us_split_fields1).rec__decadriver__rx_frame_type__size) = 0))))

predicate dynamic_predicate(temp___321: us_rep) =
  (if (to_rep4(((temp___321).us_split_fields1).rec__decadriver__rx_frame_type__error) = 0) then (0 <  to_rep3(((temp___321).us_split_fields1).rec__decadriver__rx_frame_type__size)) else (to_rep3(((temp___321).us_split_fields1).rec__decadriver__rx_frame_type__size) = 0))

predicate dynamic_invariant6(temp___expr_327: t, temp___is_init_323: bool,
  temp___skip_constant_324: bool, temp___do_toplevel_325: bool,
  temp___do_typ_inv_326: bool) = (((temp___is_init_323 = true) or
  ule(rliteral, rliteral1)) -> in_range5(temp___expr_327))

axiom def_axiom :
  (forall temp___405:us_rep. (dynamic_invariant5(temp___405, true, true,
  true, true) ->
  (forall temp___406:t.
  ((temp_____aggregate_def_403(temp___405)[temp___406]) = temp___405))))

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 255)

predicate dynamic_invariant7(temp___expr_297: t, temp___is_init_293: bool,
  temp___skip_constant_294: bool, temp___do_toplevel_295: bool,
  temp___do_typ_inv_296: bool) = true

predicate dynamic_invariant8(temp___expr_304: us_t, temp___is_init_300: bool,
  temp___skip_constant_301: bool, temp___do_toplevel_302: bool,
  temp___do_typ_inv_303: bool) = ((not (temp___skip_constant_301 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_304),
  last1(temp___expr_304)))

axiom def_axiom1 :
  (forall temp___409:t. (dynamic_invariant7(temp___409, true, true, true,
  true) ->
  (forall temp___410:int.
  (to_rep2((temp_____aggregate_def_407(temp___409)[temp___410])) = temp___409))))

 (* File "decadriver.ads", line 80, characters 0-0 *)
goal defqtvc :
  (forall frame:(int,bits_8) farray. forall size:int. forall error:int.
  forall self__:us_split_fields2. (dynamic_invariant1({ us_split_fields3 =
  self__ }, true, false, true, true) -> (dynamic_property(0, 2147483647,
  to_rep1(frame__first), to_rep1(frame__last)) -> (dynamic_invariant2(size,
  false, false, true, true) -> (dynamic_invariant3(error, false, false, true,
  true) -> (((0 <  length(to_rep1(frame__first), to_rep1(frame__last))) and
  ((self__).rec__decadriver__receiver_type__frame_ready = true)) ->
  (forall o:t.
  ((to_rep5((self__).rec__decadriver__receiver_type__queue_head) = o) ->
  (forall o1:int.
  ((to_rep3(((((self__).rec__decadriver__receiver_type__frame_queue[o])).us_split_fields1).rec__decadriver__rx_frame_type__size) = o1) ->
  (forall size1:int. ((size1 = o1) ->
  (forall o2:t.
  ((to_rep5((self__).rec__decadriver__receiver_type__queue_head) = o2) ->
  (forall o3:int.
  ((to_rep4(((((self__).rec__decadriver__receiver_type__frame_queue[o2])).us_split_fields1).rec__decadriver__rx_frame_type__error) = o3) ->
  (forall error1:int. ((error1 = o3) ->
  ((exists spark__branch:bool.
   ((spark__branch = (if (error1 = 0) then true else false)) and
   ((not (spark__branch = true)) or
   (exists o4:int. ((to_rep1(frame__last) = o4) and
   (exists o5:int. ((to_rep1(frame__first) = o5) and (let o6 = length(o5, o4)
   : int in (in_range1(o6) and
   (exists spark__branch1:bool.
   ((spark__branch1 = (if (size1 <= o6) then true else false)) and
   (if (spark__branch1 = true) then (exists o7:int.
                                    ((to_rep1(frame__first) = o7) and
                                    (let o8 = (o7 + (size1 - 1)) : int in
                                    (in_range1(o8) and ((o8 = r6b) and
                                    (dynamic_invariant(r6b, true, false,
                                    true, true) and ((size1 = r9b) and
                                    (dynamic_invariant2(r9b, true, false,
                                    true, true) and
                                    (exists o9:t.
                                    ((to_rep5((self__).rec__decadriver__receiver_type__queue_head) = o9) and
                                    (((1 <= r9b) -> (((0 <= 1) and
                                    (1 <= 1024)) and ((0 <= r9b) and
                                    (r9b <= 1024)))) and (let temp___985 =
                                    of_array(((((self__).rec__decadriver__receiver_type__frame_queue[o9])).us_split_fields1).rec__decadriver__rx_frame_type__frame,
                                    1, r9b) : us_t in
                                    ((if (first1(temp___985) <= last1(temp___985)) then ((to_rep1(frame__first) <= r6b) and
                                    ((last1(temp___985) - first1(temp___985)) = (r6b - to_rep1(frame__first)))) else (r6b <  to_rep1(frame__first))) and
                                    (exists o10:int.
                                    ((to_rep1(frame__first) = o10) and
                                    (exists o11:int.
                                    ((to_rep1(frame__first) = o11) and
                                    (let temp___986 =
                                    of_array(slide(to_array(temp___985),
                                    first1(temp___985), o11), o10, r6b)
                                    : us_t in
                                    (exists temp___987:int.
                                    ((to_rep1(frame__first) = temp___987) and
                                    (((temp___987 <= r6b) ->
                                    (((to_rep1(frame__first) <= temp___987) and
                                    (temp___987 <= to_rep1(frame__last))) and
                                    ((to_rep1(frame__first) <= r6b) and
                                    (r6b <= to_rep1(frame__last))))) and
                                    (let temp___988 = of_array(frame,
                                    temp___987, r6b) : us_t in
                                    ((if (first1(temp___986) <= last1(temp___986)) then ((first1(temp___988) <= last1(temp___988)) and
                                    ((last1(temp___986) - first1(temp___986)) = (last1(temp___988) - first1(temp___988)))) else (last1(temp___988) <  first1(temp___988))) and
                                    (exists usf:(int,bits_8) farray.
                                    (forall temp___990:int.
                                    (if ((to_rep1(frame__first) <= temp___990) and
                                    (temp___990 <= r6b)) then ((usf[temp___990]) = (to_array(temp___986)[temp___990])) else ((usf[temp___990]) = (frame[temp___990])))))))))))))))))))))))))))) else 
   (exists o7:int. ((to_rep1(frame__last) = o7) and
   (exists o8:int. ((to_rep1(frame__first) = o8) and (let o9 = length(o8, o7)
   : int in (in_range1(o9) and
   (exists o10:t.
   ((to_rep5((self__).rec__decadriver__receiver_type__queue_head) = o10) and
   (((1 <= o9) -> (((0 <= 1) and (1 <= 1024)) and ((0 <= o9) and
   (o9 <= 1024)))) and (let temp___995 =
   of_array(((((self__).rec__decadriver__receiver_type__frame_queue[o10])).us_split_fields1).rec__decadriver__rx_frame_type__frame,
   1, o9) : us_t in (let temp___996 = of_array(to_array(temp___995),
   first1(temp___995), last1(temp___995)) : us_t in
   ((if (first1(temp___996) <= last1(temp___996)) then ((to_rep1(frame__first) <= to_rep1(frame__last)) and
   ((last1(temp___996) - first1(temp___996)) = (to_rep1(frame__last) - to_rep1(frame__first)))) else (to_rep1(frame__last) <  to_rep1(frame__first))) and
   (exists o11:int. (to_rep1(frame__first) = o11)))))))))))))))))))))))))) ->
  (forall o4:t.
  ((to_rep5((self__).rec__decadriver__receiver_type__queue_head) = o4) ->
  (forall o5:rx_frame_queue_index. ((to_rep5(o5) = urem(add(o4, rliteral1),
  rliteral2)) ->
  (forall self__1:us_split_fields2. ((self__1 = {
  rec__decadriver__receiver_type__frame_queue =
  (self__).rec__decadriver__receiver_type__frame_queue;
  rec__decadriver__receiver_type__queue_head = o5;
  rec__decadriver__receiver_type__rx_count =
  (self__).rec__decadriver__receiver_type__rx_count;
  rec__decadriver__receiver_type__overrun_occurred =
  (self__).rec__decadriver__receiver_type__overrun_occurred;
  rec__decadriver__receiver_type__frame_ready =
  (self__).rec__decadriver__receiver_type__frame_ready }) ->
  (forall o6:int.
  ((to_rep((self__1).rec__decadriver__receiver_type__rx_count) = o6) ->
  in_range2((o6 - 1)))))))))))))))))))))))))))))
