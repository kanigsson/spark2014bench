(* this is a prelude for Alt-Ergo integer arithmetic *)
(* this is a prelude for Alt-Ergo real arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t

logic tqtint : t -> int

axiom tqtaxiom : (forall i:t. (0 <= tqtint(i)))

axiom tqtaxiom1 : (forall i:t. (tqtint(i) <= 255))

logic nth : t, int -> bool

axiom nth_out_of_bound :
  (forall x:t. forall n:int. (((n <  0) or (8 <= n)) -> (nth(x, n) = false)))

logic zeros : t

axiom Nth_zeros : (forall n:int. (nth(zeros, n) = false))

logic one : t

logic ones : t

axiom Nth_ones :
  (forall n:int. (((0 <= n) and (n <  8)) -> (nth(ones, n) = true)))

logic bw_and : t, t -> t

axiom Nth_bw_and :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_and(v1, v2), n) = andb(nth(v1, n), nth(v2, n)))))

logic bw_or : t, t -> t

axiom Nth_bw_or :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_or(v1, v2), n) = orb(nth(v1, n), nth(v2, n)))))

logic bw_xor : t, t -> t

axiom Nth_bw_xor :
  (forall v1:t. forall v2:t. forall n:int. (((0 <= n) and (n <  8)) ->
  (nth(bw_xor(v1, v2), n) = xorb(nth(v1, n), nth(v2, n)))))

logic bw_not : t -> t

axiom Nth_bw_not :
  (forall v:t. forall n:int. (((0 <= n) and (n <  8)) -> (nth(bw_not(v),
  n) = notb(nth(v, n)))))

logic lsr : t, int -> t

axiom Lsr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  (((n + s) <  8) -> (nth(lsr(b, s), n) = nth(b, (n + s)))))))

axiom Lsr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> ((0 <= n) ->
  ((8 <= (n + s)) -> (nth(lsr(b, s), n) = false)))))

axiom lsr_zeros : (forall x:t. (lsr(x, 0) = x))

logic asr : t, int -> t

axiom Asr_nth_low :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> (((n + s) <  8) -> (nth(asr(b, s), n) = nth(b, (n + s)))))))

axiom Asr_nth_high :
  (forall b:t. forall n:int. forall s:int. ((0 <= s) -> (((0 <= n) and
  (n <  8)) -> ((8 <= (n + s)) -> (nth(asr(b, s), n) = nth(b, (8 - 1)))))))

axiom asr_zeros : (forall x:t. (asr(x, 0) = x))

logic lsl : t, int -> t

axiom Lsl_nth_high :
  (forall b:t. forall n:int. forall s:int. (((0 <= s) and ((s <= n) and
  (n <  8))) -> (nth(lsl(b, s), n) = nth(b, (n - s)))))

axiom Lsl_nth_low :
  (forall b:t. forall n:int. forall s:int. (((0 <= n) and (n <  s)) ->
  (nth(lsl(b, s), n) = false)))

axiom lsl_zeros : (forall x:t. (lsl(x, 0) = x))

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_1 : (forall x:int. ((x % 1) = 0))

axiom Div_1 : (forall x:int. ((x / 1) = x))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

logic rotate_right : t, int -> t

axiom Nth_rotate_right :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_right(v, n), i) = nth(v, ((i + n) % 8))))))

logic rotate_left : t, int -> t

axiom Nth_rotate_left :
  (forall v:t. forall n:int. forall i:int. (((0 <= i) and (i <  8)) ->
  ((0 <= n) -> (nth(rotate_left(v, n), i) = nth(v, ((i - n) % 8))))))

logic pow2 : int -> int

axiom Power_0 : (pow2(0) = 1)

axiom Power_s : (forall n:int. ((0 <= n) -> (pow2((n + 1)) = (2 * pow2(n)))))

axiom Power_1 : (pow2(1) = 2)

axiom Power_sum :
  (forall n:int. forall m:int. (((0 <= n) and (0 <= m)) ->
  (pow2((n + m)) = (pow2(n) * pow2(m)))))

axiom pow2pos : (forall i:int. ((0 <= i) -> (0 <  pow2(i))))

axiom pow2_0 : (pow2(0) = 1)

axiom pow2_1 : (pow2(1) = 2)

axiom pow2_2 : (pow2(2) = 4)

axiom pow2_3 : (pow2(3) = 8)

axiom pow2_4 : (pow2(4) = 16)

axiom pow2_5 : (pow2(5) = 32)

axiom pow2_6 : (pow2(6) = 64)

axiom pow2_7 : (pow2(7) = 128)

axiom pow2_8 : (pow2(8) = 256)

axiom pow2_9 : (pow2(9) = 512)

axiom pow2_10 : (pow2(10) = 1024)

axiom pow2_11 : (pow2(11) = 2048)

axiom pow2_12 : (pow2(12) = 4096)

axiom pow2_13 : (pow2(13) = 8192)

axiom pow2_14 : (pow2(14) = 16384)

axiom pow2_15 : (pow2(15) = 32768)

axiom pow2_16 : (pow2(16) = 65536)

axiom pow2_17 : (pow2(17) = 131072)

axiom pow2_18 : (pow2(18) = 262144)

axiom pow2_19 : (pow2(19) = 524288)

axiom pow2_20 : (pow2(20) = 1048576)

axiom pow2_21 : (pow2(21) = 2097152)

axiom pow2_22 : (pow2(22) = 4194304)

axiom pow2_23 : (pow2(23) = 8388608)

axiom pow2_24 : (pow2(24) = 16777216)

axiom pow2_25 : (pow2(25) = 33554432)

axiom pow2_26 : (pow2(26) = 67108864)

axiom pow2_27 : (pow2(27) = 134217728)

axiom pow2_28 : (pow2(28) = 268435456)

axiom pow2_29 : (pow2(29) = 536870912)

axiom pow2_30 : (pow2(30) = 1073741824)

axiom pow2_31 : (pow2(31) = 2147483648)

axiom pow2_32 : (pow2(32) = 4294967296)

axiom pow2_33 : (pow2(33) = 8589934592)

axiom pow2_34 : (pow2(34) = 17179869184)

axiom pow2_35 : (pow2(35) = 34359738368)

axiom pow2_36 : (pow2(36) = 68719476736)

axiom pow2_37 : (pow2(37) = 137438953472)

axiom pow2_38 : (pow2(38) = 274877906944)

axiom pow2_39 : (pow2(39) = 549755813888)

axiom pow2_40 : (pow2(40) = 1099511627776)

axiom pow2_41 : (pow2(41) = 2199023255552)

axiom pow2_42 : (pow2(42) = 4398046511104)

axiom pow2_43 : (pow2(43) = 8796093022208)

axiom pow2_44 : (pow2(44) = 17592186044416)

axiom pow2_45 : (pow2(45) = 35184372088832)

axiom pow2_46 : (pow2(46) = 70368744177664)

axiom pow2_47 : (pow2(47) = 140737488355328)

axiom pow2_48 : (pow2(48) = 281474976710656)

axiom pow2_49 : (pow2(49) = 562949953421312)

axiom pow2_50 : (pow2(50) = 1125899906842624)

axiom pow2_51 : (pow2(51) = 2251799813685248)

axiom pow2_52 : (pow2(52) = 4503599627370496)

axiom pow2_53 : (pow2(53) = 9007199254740992)

axiom pow2_54 : (pow2(54) = 18014398509481984)

axiom pow2_55 : (pow2(55) = 36028797018963968)

axiom pow2_56 : (pow2(56) = 72057594037927936)

axiom pow2_57 : (pow2(57) = 144115188075855872)

axiom pow2_58 : (pow2(58) = 288230376151711744)

axiom pow2_59 : (pow2(59) = 576460752303423488)

axiom pow2_60 : (pow2(60) = 1152921504606846976)

axiom pow2_61 : (pow2(61) = 2305843009213693952)

axiom pow2_62 : (pow2(62) = 4611686018427387904)

axiom pow2_63 : (pow2(63) = 9223372036854775808)

axiom pow2_64 : (pow2(64) = 18446744073709551616)

logic is_signed_positive : t -> prop

logic of_int : int -> t

function to_int(x: t) : int =
  (if is_signed_positive(x) then tqtint(x) else (-(256 - tqtint(x))))

axiom to_uint_extensionality :
  (forall v:t. forall vqt:t. ((tqtint(v) = tqtint(vqt)) -> (v = vqt)))

axiom to_int_extensionality :
  (forall v:t. forall vqt:t. ((to_int(v) = to_int(vqt)) -> (v = vqt)))

predicate uint_in_range(i: int) = ((0 <= i) and (i <= 255))

axiom to_uint_bounds : (forall v:t. (0 <= tqtint(v)))

axiom to_uint_bounds1 : (forall v:t. (tqtint(v) <  256))

axiom to_uint_of_int :
  (forall i:int. (((0 <= i) and (i <  256)) -> (tqtint(of_int(i)) = i)))

logic size_bv : t

axiom to_uint_size_bv : (tqtint(size_bv) = 8)

axiom to_uint_zeros : (tqtint(zeros) = 0)

axiom to_uint_one : (tqtint(one) = 1)

axiom to_uint_ones : (tqtint(ones) = 255)

predicate ult(x: t, y: t) = (tqtint(x) <  tqtint(y))

predicate ule(x: t, y: t) = (tqtint(x) <= tqtint(y))

predicate ugt(x: t, y: t) = (tqtint(y) <  tqtint(x))

predicate uge(x: t, y: t) = (tqtint(y) <= tqtint(x))

predicate slt(v1: t, v2: t) = (to_int(v1) <  to_int(v2))

predicate sle(v1: t, v2: t) = (to_int(v1) <= to_int(v2))

predicate sgt(v1: t, v2: t) = (to_int(v2) <  to_int(v1))

predicate sge(v1: t, v2: t) = (to_int(v2) <= to_int(v1))

axiom positive_is_ge_zeros :
  (forall x:t. (is_signed_positive(x) -> sge(x, zeros)))

axiom positive_is_ge_zeros1 :
  (forall x:t. (sge(x, zeros) -> is_signed_positive(x)))

logic add : t, t -> t

axiom to_uint_add_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) + tqtint(v2)) <  256) ->
  (tqtint(add(v1, v2)) = (tqtint(v1) + tqtint(v2)))))

logic sub : t, t -> t

axiom to_uint_sub_bounded :
  (forall v1:t. forall v2:t. (((0 <= (tqtint(v1) - tqtint(v2))) and
  ((tqtint(v1) - tqtint(v2)) <  256)) -> (tqtint(sub(v1,
  v2)) = (tqtint(v1) - tqtint(v2)))))

logic neg : t -> t

axiom to_uint_neg : (forall v:t. (tqtint(neg(v)) = ((-tqtint(v)) % 256)))

logic mul : t, t -> t

axiom to_uint_mul_bounded :
  (forall v1:t. forall v2:t. (((tqtint(v1) * tqtint(v2)) <  256) ->
  (tqtint(mul(v1, v2)) = (tqtint(v1) * tqtint(v2)))))

logic udiv : t, t -> t

axiom to_uint_udiv :
  (forall v1:t. forall v2:t. (tqtint(udiv(v1,
  v2)) = (tqtint(v1) / tqtint(v2))))

logic urem : t, t -> t

axiom to_uint_urem :
  (forall v1:t. forall v2:t. (tqtint(urem(v1,
  v2)) = (tqtint(v1) % tqtint(v2))))

logic lsr_bv : t, t -> t

axiom lsr_bv_is_lsr :
  (forall x:t. forall n:t. (lsr_bv(x, n) = lsr(x, tqtint(n))))

axiom to_uint_lsr :
  (forall v:t. forall n:t. (tqtint(lsr_bv(v,
  n)) = (tqtint(v) / pow2(tqtint(n)))))

logic asr_bv : t, t -> t

axiom asr_bv_is_asr :
  (forall x:t. forall n:t. (asr_bv(x, n) = asr(x, tqtint(n))))

logic lsl_bv : t, t -> t

axiom lsl_bv_is_lsl :
  (forall x:t. forall n:t. (lsl_bv(x, n) = lsl(x, tqtint(n))))

axiom to_uint_lsl :
  (forall v:t. forall n:t. (tqtint(lsl_bv(v,
  n)) = ((tqtint(v) * pow2(tqtint(n))) % 256)))

logic rotate_right_bv : t, t -> t

logic rotate_left_bv : t, t -> t

axiom rotate_left_bv_is_rotate_left :
  (forall v:t. forall n:t. (rotate_left_bv(v, n) = rotate_left(v,
  tqtint(n))))

axiom rotate_right_bv_is_rotate_right :
  (forall v:t. forall n:t. (rotate_right_bv(v, n) = rotate_right(v,
  tqtint(n))))

logic nth_bv : t, t -> bool

axiom Nth_bv_is_nth :
  (forall x:t. forall i:t. (nth(x, tqtint(i)) = nth_bv(x, i)))

axiom Nth_bv_is_nth2 :
  (forall x:t. forall i:int. (((0 <= i) and (i <  256)) -> (nth_bv(x,
  of_int(i)) = nth(x, i))))

logic eq_sub_bv : t, t, t, t -> prop

predicate eq_sub(a: t, b: t, i: int, n: int) =
  (forall j:int. (((i <= j) and (j <  (i + n))) -> (nth(a, j) = nth(b, j))))

axiom eq_sub_equiv :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub(a, b, tqtint(i),
  tqtint(n)) -> eq_sub_bv(a, b, i, n)))

axiom eq_sub_equiv1 :
  (forall a:t. forall b:t. forall i:t. forall n:t. (eq_sub_bv(a, b, i, n) ->
  eq_sub(a, b, tqtint(i), tqtint(n))))

axiom Extensionality :
  (forall x:t. forall y:t [eq_sub(x, y, 0, 8)]. (eq_sub(x, y, 0, 8) ->
  (x = y)))

type t__ref = { t__content : t
}

function bool_eq(x: t, y: t) : bool = (if (x = y) then true else false)

function bool_ne(x: t, y: t) : bool = (if (not (x = y)) then true else false)

function bool_lt(x: t, y: t) : bool = (if ult(x, y) then true else false)

function bool_le(x: t, y: t) : bool = (if ule(x, y) then true else false)

function bool_gt(x: t, y: t) : bool = (if ugt(x, y) then true else false)

function bool_ge(x: t, y: t) : bool = (if uge(x, y) then true else false)

logic power : t, int -> t

axiom Power_01 : (forall x:t. (power(x, 0) = one))

axiom Power_11 : (forall x:t. (power(x, 1) = x))

axiom Power_s1 :
  (forall x:t. forall n:int. ((0 <= n) -> (power(x, (n + 1)) = mul(x,
  power(x, n)))))

axiom Power_s_alt :
  (forall x:t. forall n:int. ((0 <  n) -> (power(x, n) = mul(x, power(x,
  (n - 1))))))

axiom Power_sum1 :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n + m)) = mul(power(x, n), power(x, m))))))

axiom Power_mult :
  (forall x:t. forall n:int. forall m:int. ((0 <= n) -> ((0 <= m) ->
  (power(x, (n * m)) = power(power(x, n), m)))))

axiom Power_mult2 :
  (forall x:t. forall y:t. forall n:int. ((0 <= n) -> (power(mul(x, y),
  n) = mul(power(x, n), power(y, n)))))

function bv_min(x: t, y: t) : t = (if ule(x, y) then x else y)

function bv_max(x: t, y: t) : t = (if ule(x, y) then y else x)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

axiom bv_min_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_min(x, y)) = min(tqtint(x),
  tqtint(y))))

axiom bv_max_to_uint :
  (forall x:t. forall y:t. (tqtint(bv_max(x, y)) = max(tqtint(x),
  tqtint(y))))

axiom add_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x + y) / z) = ((x / z) + (y / z)))))

axiom sub_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x - y) / z) = ((x / z) - (y / z)))))

axiom neg_div :
  (forall x:real. forall y:real. ((not (y = 0.0)) ->
  (((-x) / y) = (-(x / y)))))

axiom assoc_mul_div :
  (forall x:real. forall y:real. forall z:real. ((not (z = 0.0)) ->
  (((x * y) / z) = (x * (y / z)))))

axiom assoc_div_mul :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> (((x / y) / z) = (x / (y * z)))))

axiom assoc_div_div :
  (forall x:real. forall y:real. forall z:real. (((not (y = 0.0)) and
  (not (z = 0.0))) -> ((x / (y / z)) = ((x * z) / y))))

type t1

logic tqtreal : t1 -> real

logic tqtisFinite : t1 -> prop

axiom tqtaxiom2 :
  (forall x:t1. (tqtisFinite(x) ->
  ((-340282346638528859811704183484516925440.0) <= tqtreal(x))))

axiom tqtaxiom3 :
  (forall x:t1. (tqtisFinite(x) ->
  (tqtreal(x) <= 340282346638528859811704183484516925440.0)))

axiom Abs_le :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> ((-y) <= x)))

axiom Abs_le1 :
  (forall x:real. forall y:real. ((abs_real(x) <= y) -> (x <= y)))

axiom Abs_le2 :
  (forall x:real. forall y:real. ((((-y) <= x) and (x <= y)) ->
  (abs_real(x) <= y)))

axiom Abs_pos : (forall x:real. (0.0 <= abs_real(x)))

axiom Abs_sum :
  (forall x:real. forall y:real.
  (abs_real((x + y)) <= (abs_real(x) + abs_real(y))))

axiom Abs_prod :
  (forall x:real. forall y:real.
  (abs_real((x * y)) = (abs_real(x) * abs_real(y))))

axiom triangular_inequality :
  (forall x:real. forall y:real. forall z:real.
  (abs_real((x - z)) <= (abs_real((x - y)) + abs_real((y - z)))))

axiom Injective :
  (forall x:int. forall y:int. ((real_of_int(x) = real_of_int(y)) ->
  (x = y)))

axiom Monotonic :
  (forall x:int. forall y:int. ((x <= y) ->
  (real_of_int(x) <= real_of_int(y))))

logic truncate : real -> int

axiom Truncate_int : (forall i:int. (truncate(real_of_int(i)) = i))

axiom Truncate_down_pos :
  (forall x:real. ((0.0 <= x) -> (real_of_int(truncate(x)) <= x)))

axiom Truncate_down_pos1 :
  (forall x:real. ((0.0 <= x) -> (x <  real_of_int((truncate(x) + 1)))))

axiom Truncate_up_neg :
  (forall x:real. ((x <= 0.0) -> (real_of_int((truncate(x) - 1)) <  x)))

axiom Truncate_up_neg1 :
  (forall x:real. ((x <= 0.0) -> (x <= real_of_int(truncate(x)))))

axiom Real_of_truncate :
  (forall x:real. ((x - 1.0) <= real_of_int(truncate(x))))

axiom Real_of_truncate1 :
  (forall x:real. (real_of_int(truncate(x)) <= (x + 1.0)))

axiom Truncate_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (truncate(x) <= truncate(y))))

axiom Truncate_monotonic_int1 :
  (forall x:real. forall i:int. ((x <= real_of_int(i)) ->
  (truncate(x) <= i)))

axiom Truncate_monotonic_int2 :
  (forall x:real. forall i:int. ((real_of_int(i) <= x) ->
  (i <= truncate(x))))

axiom Floor_int : (forall i:int. (int_floor(real_of_int(i)) = i))

axiom Ceil_int : (forall i:int. (int_ceil(real_of_int(i)) = i))

axiom Floor_down : (forall x:real. (real_of_int(int_floor(x)) <= x))

axiom Floor_down1 : (forall x:real. (x <  real_of_int((int_floor(x) + 1))))

axiom Ceil_up : (forall x:real. (real_of_int((int_ceil(x) - 1)) <  x))

axiom Ceil_up1 : (forall x:real. (x <= real_of_int(int_ceil(x))))

axiom Floor_monotonic :
  (forall x:real. forall y:real. ((x <= y) ->
  (int_floor(x) <= int_floor(y))))

axiom Ceil_monotonic :
  (forall x:real. forall y:real. ((x <= y) -> (int_ceil(x) <= int_ceil(y))))

logic match_mode : fpa_rounding_mode, 'a, 'a, 'a, 'a, 'a -> 'a

axiom match_mode_RNE :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToEven, z, z1, z2, z3, z4) = z))

axiom match_mode_RNA :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(NearestTiesToAway, z, z1, z2, z3, z4) = z1))

axiom match_mode_RTP :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Up, z, z1, z2, z3, z4) = z2))

axiom match_mode_RTN :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(Down, z, z1, z2, z3, z4) = z3))

axiom match_mode_RTZ :
  (forall z:'a. forall z1:'a. forall z2:'a. forall z3:'a. forall z4:'a.
  (match_mode(ToZero, z, z1, z2, z3, z4) = z4))

predicate to_nearest(m: fpa_rounding_mode) = ((m = NearestTiesToEven) or
  (m = NearestTiesToAway))

logic zeroF : t1

logic add1 : fpa_rounding_mode, t1, t1 -> t1

logic sub1 : fpa_rounding_mode, t1, t1 -> t1

logic mul1 : fpa_rounding_mode, t1, t1 -> t1

logic div : fpa_rounding_mode, t1, t1 -> t1

logic abs : t1 -> t1

logic neg1 : t1 -> t1

logic fma : fpa_rounding_mode, t1, t1, t1 -> t1

logic sqrt : fpa_rounding_mode, t1 -> t1

logic roundToIntegral : fpa_rounding_mode, t1 -> t1

logic min1 : t1, t1 -> t1

logic max1 : t1, t1 -> t1

logic le : t1, t1 -> prop

logic lt : t1, t1 -> prop

logic eq : t1, t1 -> prop

logic is_normal : t1 -> prop

logic is_subnormal : t1 -> prop

logic is_zero : t1 -> prop

logic is_infinite : t1 -> prop

logic is_nan : t1 -> prop

logic is_positive : t1 -> prop

logic is_negative : t1 -> prop

predicate is_plus_infinity(x: t1) = (is_infinite(x) and is_positive(x))

predicate is_minus_infinity(x: t1) = (is_infinite(x) and is_negative(x))

predicate is_plus_zero(x: t1) = (is_zero(x) and is_positive(x))

predicate is_minus_zero(x: t1) = (is_zero(x) and is_negative(x))

predicate is_not_nan(x: t1) = (tqtisFinite(x) or is_infinite(x))

axiom is_not_nan1 : (forall x:t1. (is_not_nan(x) -> (not is_nan(x))))

axiom is_not_nan2 : (forall x:t1. ((not is_nan(x)) -> is_not_nan(x)))

axiom is_not_finite :
  (forall x:t1. ((not tqtisFinite(x)) -> (is_infinite(x) or is_nan(x))))

axiom is_not_finite1 :
  (forall x:t1. ((is_infinite(x) or is_nan(x)) -> (not tqtisFinite(x))))

axiom zeroF_is_positive : is_positive(zeroF)

axiom zeroF_is_zero : is_zero(zeroF)

axiom zero_to_real :
  (forall x:t1 [is_zero(x)]. (is_zero(x) -> tqtisFinite(x)))

axiom zero_to_real1 :
  (forall x:t1 [is_zero(x)]. (is_zero(x) -> (tqtreal(x) = 0.0)))

axiom zero_to_real2 :
  (forall x:t1 [is_zero(x)]. ((tqtisFinite(x) and (tqtreal(x) = 0.0)) ->
  is_zero(x)))

logic of_int1 : fpa_rounding_mode, int -> t1

logic to_int1 : fpa_rounding_mode, t1 -> int

axiom zero_of_int : (forall m:fpa_rounding_mode. (zeroF = of_int1(m, 0)))

logic max_int1 : int

axiom max_real_int : (0x1.FFFFFEp127 = real_of_int(max_int1))

predicate in_range(x: real) = (((-0x1.FFFFFEp127) <= x) and
  (x <= 0x1.FFFFFEp127))

predicate in_int_range(i: int) = (((-max_int1) <= i) and (i <= max_int1))

axiom is_finite : (forall x:t1. (tqtisFinite(x) -> in_range(tqtreal(x))))

predicate no_overflow(m: fpa_rounding_mode, x: real) = in_range(float32(m,x))

axiom Bounded_real_no_overflow :
  (forall m:fpa_rounding_mode. forall x:real. (in_range(x) -> no_overflow(m,
  x)))

axiom Round_to_real :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  (float32(m,tqtreal(x)) = tqtreal(x))))

axiom Round_down_le : (forall x:real. (float32(Down,x) <= x))

axiom Round_up_ge : (forall x:real. (x <= float32(Up,x)))

axiom Round_down_neg :
  (forall x:real. (float32(Down,(-x)) = (-float32(Up,x))))

axiom Round_up_neg : (forall x:real. (float32(Up,(-x)) = (-float32(Down,x))))

predicate in_safe_int_range(i: int) = (((-16777216) <= i) and
  (i <= 16777216))

axiom Exact_rounding_for_integers :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (float32(m,real_of_int(i)) = real_of_int(i))))

predicate same_sign(x: t1, y: t1) = ((is_positive(x) and is_positive(y)) or
  (is_negative(x) and is_negative(y)))

predicate diff_sign(x: t1, y: t1) = ((is_positive(x) and is_negative(y)) or
  (is_negative(x) and is_positive(y)))

axiom feq_eq :
  (forall x:t1. forall y:t1. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((not is_zero(x)) -> (eq(x, y) -> (x = y))))))

axiom eq_feq :
  (forall x:t1. forall y:t1. (tqtisFinite(x) -> (tqtisFinite(y) ->
  ((x = y) -> eq(x, y)))))

axiom eq_refl : (forall x:t1. (tqtisFinite(x) -> eq(x, x)))

axiom eq_sym : (forall x:t1. forall y:t1. (eq(x, y) -> eq(y, x)))

axiom eq_trans :
  (forall x:t1. forall y:t1. forall z:t1. (eq(x, y) -> (eq(y, z) -> eq(x,
  z))))

axiom eq_zero : eq(zeroF, neg1(zeroF))

axiom eq_to_real_finite :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and tqtisFinite(y)) -> (eq(x,
  y) -> (tqtreal(x) = tqtreal(y)))))

axiom eq_to_real_finite1 :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and tqtisFinite(y)) ->
  ((tqtreal(x) = tqtreal(y)) -> eq(x, y))))

axiom lt_finite :
  (forall x:t1. forall y:t1 [lt(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> (lt(x, y) -> (tqtreal(x) <  tqtreal(y)))))

axiom lt_finite1 :
  (forall x:t1. forall y:t1 [lt(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((tqtreal(x) <  tqtreal(y)) -> lt(x, y))))

axiom le_finite :
  (forall x:t1. forall y:t1 [le(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> (le(x, y) -> (tqtreal(x) <= tqtreal(y)))))

axiom le_finite1 :
  (forall x:t1. forall y:t1 [le(x, y)]. ((tqtisFinite(x) and
  tqtisFinite(y)) -> ((tqtreal(x) <= tqtreal(y)) -> le(x, y))))

axiom le_lt_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((le(x, y) and lt(y, z)) -> lt(x,
  z)))

axiom lt_le_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((lt(x, y) and le(y, z)) -> lt(x,
  z)))

axiom le_ge_asym :
  (forall x:t1. forall y:t1. ((le(x, y) and le(y, x)) -> eq(x, y)))

axiom not_lt_ge :
  (forall x:t1. forall y:t1. (((not lt(x, y)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(y, x)))

axiom not_gt_le :
  (forall x:t1. forall y:t1. (((not lt(y, x)) and (is_not_nan(x) and
  is_not_nan(y))) -> le(x, y)))

axiom lt_lt_finite :
  (forall x:t1. forall y:t1. forall z:t1. (lt(x, y) -> (lt(y, z) ->
  tqtisFinite(y))))

axiom positive_to_real :
  (forall x:t1 [is_positive(x)]. (tqtisFinite(x) -> (is_positive(x) ->
  (0.0 <= tqtreal(x)))))

axiom to_real_positive :
  (forall x:t1 [is_positive(x)]. (tqtisFinite(x) -> ((0.0 <  tqtreal(x)) ->
  is_positive(x))))

axiom negative_to_real :
  (forall x:t1 [is_negative(x)]. (tqtisFinite(x) -> (is_negative(x) ->
  (tqtreal(x) <= 0.0))))

axiom to_real_negative :
  (forall x:t1 [is_negative(x)]. (tqtisFinite(x) -> ((tqtreal(x) <  0.0) ->
  is_negative(x))))

axiom negative_xor_positive :
  (forall x:t1. (not (is_positive(x) and is_negative(x))))

axiom negative_or_positive :
  (forall x:t1. (is_not_nan(x) -> (is_positive(x) or is_negative(x))))

axiom diff_sign_trans :
  (forall x:t1. forall y:t1. forall z:t1. ((diff_sign(x, y) and diff_sign(y,
  z)) -> same_sign(x, z)))

axiom diff_sign_product :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and (tqtisFinite(y) and
  ((tqtreal(x) * tqtreal(y)) <  0.0))) -> diff_sign(x, y)))

axiom same_sign_product :
  (forall x:t1. forall y:t1. ((tqtisFinite(x) and (tqtisFinite(y) and
  same_sign(x, y))) -> (0.0 <= (tqtreal(x) * tqtreal(y)))))

predicate product_sign(z: t1, x: t1, y: t1) = ((same_sign(x, y) ->
  is_positive(z)) and (diff_sign(x, y) -> is_negative(z)))

predicate overflow_value(m: fpa_rounding_mode, x: t1) =
  ((((((m = NearestTiesToEven) -> is_infinite(x)) and
  ((m = NearestTiesToAway) -> is_infinite(x))) and ((m = Up) ->
  (if is_positive(x) then is_infinite(x) else (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127)))))) and ((m = Down) ->
  (if is_positive(x) then (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127)) else is_infinite(x)))) and ((m = ToZero) ->
  (if is_positive(x) then (tqtisFinite(x) and
  (tqtreal(x) = 0x1.FFFFFEp127)) else (tqtisFinite(x) and
  (tqtreal(x) = (-0x1.FFFFFEp127))))))

predicate sign_zero_result(m: fpa_rounding_mode, x: t1) = (is_zero(x) ->
  ((((((m = NearestTiesToEven) -> is_positive(x)) and
  ((m = NearestTiesToAway) -> is_positive(x))) and ((m = Up) ->
  is_positive(x))) and ((m = Down) -> is_negative(x))) and ((m = ToZero) ->
  is_positive(x))))

axiom add_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> tqtisFinite(add1(m, x, y))))))

axiom add_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) + tqtreal(y))) -> (tqtreal(add1(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y))))))))

axiom add_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite(add1(m, x, y)) -> tqtisFinite(x)))

axiom add_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (tqtisFinite(add1(m, x, y)) -> tqtisFinite(y)))

axiom add_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add1(m, x, y)) -> no_overflow(m,
  (tqtreal(x) + tqtreal(y))))))

axiom add_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [add1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(add1(m, x, y)) -> (tqtreal(add1(m, x,
  y)) = float32(m,(tqtreal(x) + tqtreal(y)))))))

axiom sub_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> tqtisFinite(sub1(m, x, y))))))

axiom sub_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) - tqtreal(y))) -> (tqtreal(sub1(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y))))))))

axiom sub_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite(sub1(m, x, y)) -> tqtisFinite(x)))

axiom sub_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (tqtisFinite(sub1(m, x, y)) -> tqtisFinite(y)))

axiom sub_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub1(m, x, y)) -> no_overflow(m,
  (tqtreal(x) - tqtreal(y))))))

axiom sub_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [sub1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(sub1(m, x, y)) -> (tqtreal(sub1(m, x,
  y)) = float32(m,(tqtreal(x) - tqtreal(y)))))))

axiom mul_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> tqtisFinite(mul1(m, x, y))))))

axiom mul_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> (no_overflow(m,
  (tqtreal(x) * tqtreal(y))) -> (tqtreal(mul1(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y))))))))

axiom mul_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite(mul1(m, x, y)) -> tqtisFinite(x)))

axiom mul_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (tqtisFinite(mul1(m, x, y)) -> tqtisFinite(y)))

axiom mul_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul1(m, x, y)) -> no_overflow(m,
  (tqtreal(x) * tqtreal(y))))))

axiom mul_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [mul1(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(mul1(m, x, y)) -> (tqtreal(mul1(m, x,
  y)) = float32(m,(tqtreal(x) * tqtreal(y)))))))

axiom div_finite :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> tqtisFinite(div(m, x, y)))))))

axiom div_finite1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(x) -> (tqtisFinite(y) -> ((not is_zero(y)) -> (no_overflow(m,
  (tqtreal(x) / tqtreal(y))) -> (tqtreal(div(m, x,
  y)) = float32(m,(tqtreal(x) / tqtreal(y)))))))))

axiom div_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (tqtisFinite(div(m, x, y)) -> ((tqtisFinite(x) and (tqtisFinite(y) and
  (not is_zero(y)))) or (tqtisFinite(x) and (is_infinite(y) and
  (tqtreal(div(m, x, y)) = 0.0))))))

axiom div_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  no_overflow(m, (tqtreal(x) / tqtreal(y)))))))

axiom div_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1 [div(m, x, y)].
  (to_nearest(m) -> (tqtisFinite(div(m, x, y)) -> (tqtisFinite(y) ->
  (tqtreal(div(m, x, y)) = float32(m,(tqtreal(x) / tqtreal(y))))))))

axiom neg_finite :
  (forall x:t1 [neg1(x)]. (tqtisFinite(x) -> tqtisFinite(neg1(x))))

axiom neg_finite1 :
  (forall x:t1 [neg1(x)]. (tqtisFinite(x) ->
  (tqtreal(neg1(x)) = (-tqtreal(x)))))

axiom neg_finite_rev :
  (forall x:t1 [neg1(x)]. (tqtisFinite(neg1(x)) -> tqtisFinite(x)))

axiom neg_finite_rev1 :
  (forall x:t1 [neg1(x)]. (tqtisFinite(neg1(x)) ->
  (tqtreal(neg1(x)) = (-tqtreal(x)))))

axiom abs_finite :
  (forall x:t1 [abs(x)]. (tqtisFinite(x) -> tqtisFinite(abs(x))))

axiom abs_finite1 :
  (forall x:t1 [abs(x)]. (tqtisFinite(x) ->
  (tqtreal(abs(x)) = abs_real(tqtreal(x)))))

axiom abs_finite2 :
  (forall x:t1 [abs(x)]. (tqtisFinite(x) -> is_positive(abs(x))))

axiom abs_finite_rev :
  (forall x:t1 [abs(x)]. (tqtisFinite(abs(x)) -> tqtisFinite(x)))

axiom abs_finite_rev1 :
  (forall x:t1 [abs(x)]. (tqtisFinite(abs(x)) ->
  (tqtreal(abs(x)) = abs_real(tqtreal(x)))))

axiom abs_universal : (forall x:t1 [abs(x)]. (not is_negative(abs(x))))

axiom fma_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(x)))

axiom fma_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(y)))

axiom fma_finite_rev2 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (tqtisFinite(fma(m, x, y, z)) -> tqtisFinite(z)))

axiom fma_finite_rev_n :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  no_overflow(m, ((tqtreal(x) * tqtreal(y)) + tqtreal(z))))))

axiom fma_finite_rev_n1 :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. forall z:t1 [fma(m,
  x, y, z)]. (to_nearest(m) -> (tqtisFinite(fma(m, x, y, z)) ->
  (tqtreal(fma(m, x, y,
  z)) = float32(m,((tqtreal(x) * tqtreal(y)) + tqtreal(z)))))))

function sqr(x: real) : real = (x * x)

axiom sqrt_finite_rev :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> tqtisFinite(x)))

axiom sqrt_finite_rev1 :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (0.0 <= tqtreal(x))))

axiom sqrt_finite_rev2 :
  (forall m:fpa_rounding_mode. forall x:t1 [sqrt(m, x)]. (tqtisFinite(sqrt(m,
  x)) -> (tqtreal(sqrt(m, x)) = float32(m,sqrt_real(tqtreal(x))))))

predicate same_sign_real(x: t1, r: real) = ((is_positive(x) and
  (0.0 <  r)) or (is_negative(x) and (r <  0.0)))

axiom of_int_add_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i + j)) -> eq(of_int1(m, (i + j)), add1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_sub_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i - j)) -> eq(of_int1(m, (i - j)), sub1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom of_int_mul_exact :
  (forall m:fpa_rounding_mode. forall n:fpa_rounding_mode. forall i:int.
  forall j:int. (in_safe_int_range(i) -> (in_safe_int_range(j) ->
  (in_safe_int_range((i * j)) -> eq(of_int1(m, (i * j)), mul1(n, of_int1(m,
  i), of_int1(m, j)))))))

axiom Min_r1 : (forall x:t1. forall y:t1. (le(y, x) -> eq(min1(x, y), y)))

axiom Min_l : (forall x:t1. forall y:t1. (le(x, y) -> eq(min1(x, y), x)))

axiom Max_r : (forall x:t1. forall y:t1. (le(y, x) -> eq(max1(x, y), x)))

axiom Max_l1 : (forall x:t1. forall y:t1. (le(x, y) -> eq(max1(x, y), y)))

logic is_int : t1 -> prop

axiom zeroF_is_int : is_int(zeroF)

axiom of_int_is_int :
  (forall m:fpa_rounding_mode. forall x:int. (in_int_range(x) ->
  is_int(of_int1(m, x))))

axiom big_float_is_int :
  (forall m:fpa_rounding_mode. forall i:t1. (tqtisFinite(i) -> ((le(i,
  neg1(of_int1(m, 16777216))) or le(of_int1(m, 16777216), i)) -> is_int(i))))

axiom roundToIntegral_is_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  is_int(roundToIntegral(m, x))))

axiom eq_is_int :
  (forall x:t1. forall y:t1. (eq(x, y) -> (is_int(x) -> is_int(y))))

axiom add_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(add1(m, x, y)) -> is_int(add1(m, x, y))))))

axiom sub_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(sub1(m, x, y)) -> is_int(sub1(m, x, y))))))

axiom mul_int :
  (forall x:t1. forall y:t1. forall m:fpa_rounding_mode. (is_int(x) ->
  (is_int(y) -> (tqtisFinite(mul1(m, x, y)) -> is_int(mul1(m, x, y))))))

axiom fma_int :
  (forall x:t1. forall y:t1. forall z:t1. forall m:fpa_rounding_mode.
  (is_int(x) -> (is_int(y) -> (is_int(z) -> (tqtisFinite(fma(m, x, y, z)) ->
  is_int(fma(m, x, y, z)))))))

axiom neg_int : (forall x:t1. (is_int(x) -> is_int(neg1(x))))

axiom abs_int1 : (forall x:t1. (is_int(x) -> is_int(abs(x))))

axiom is_int_of_int :
  (forall x:t1. forall m:fpa_rounding_mode. forall mqt:fpa_rounding_mode.
  (is_int(x) -> eq(x, of_int1(mqt, to_int1(m, x)))))

axiom is_int_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) ->
  in_int_range(to_int1(m, x))))

axiom is_int_is_finite : (forall x:t1. (is_int(x) -> tqtisFinite(x)))

axiom int_to_real :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) ->
  (tqtreal(x) = real_of_int(to_int1(m, x)))))

axiom truncate_int :
  (forall m:fpa_rounding_mode. forall i:t1. (is_int(i) ->
  eq(roundToIntegral(m, i), i)))

axiom truncate_neg :
  (forall x:t1. (tqtisFinite(x) -> (is_negative(x) ->
  (roundToIntegral(ToZero, x) = roundToIntegral(Up, x)))))

axiom truncate_pos :
  (forall x:t1. (tqtisFinite(x) -> (is_positive(x) ->
  (roundToIntegral(ToZero, x) = roundToIntegral(Down, x)))))

axiom ceil_le :
  (forall x:t1. (tqtisFinite(x) -> le(x, roundToIntegral(Up, x))))

axiom ceil_lest :
  (forall x:t1. forall y:t1. ((le(x, y) and is_int(y)) ->
  le(roundToIntegral(Up, x), y)))

axiom ceil_to_real :
  (forall x:t1. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Up,
  x)) = real_of_int(int_ceil(tqtreal(x))))))

axiom ceil_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) -> (to_int1(m,
  roundToIntegral(Up, x)) = int_ceil(tqtreal(x)))))

axiom floor_le :
  (forall x:t1. (tqtisFinite(x) -> le(roundToIntegral(Down, x), x)))

axiom floor_lest :
  (forall x:t1. forall y:t1. ((le(y, x) and is_int(y)) -> le(y,
  roundToIntegral(Down, x))))

axiom floor_to_real :
  (forall x:t1. (tqtisFinite(x) -> (tqtreal(roundToIntegral(Down,
  x)) = real_of_int(int_floor(tqtreal(x))))))

axiom floor_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) -> (to_int1(m,
  roundToIntegral(Down, x)) = int_floor(tqtreal(x)))))

axiom RNA_down :
  (forall x:t1. (lt(sub1(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub1(NearestTiesToEven, roundToIntegral(Up, x), x)) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x))))

axiom RNA_up :
  (forall x:t1. (lt(sub1(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub1(NearestTiesToEven, x, roundToIntegral(Down, x))) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x))))

axiom RNA_down_tie :
  (forall x:t1. (eq(sub1(NearestTiesToEven, x, roundToIntegral(Down, x)),
  sub1(NearestTiesToEven, roundToIntegral(Up, x), x)) -> (is_negative(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Down, x)))))

axiom RNA_up_tie :
  (forall x:t1. (eq(sub1(NearestTiesToEven, roundToIntegral(Up, x), x),
  sub1(NearestTiesToEven, x, roundToIntegral(Down, x))) -> (is_positive(x) ->
  (roundToIntegral(NearestTiesToAway, x) = roundToIntegral(Up, x)))))

axiom to_int_roundToIntegral :
  (forall m:fpa_rounding_mode. forall x:t1. (to_int1(m, x) = to_int1(m,
  roundToIntegral(m, x))))

axiom to_int_monotonic :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite(x) ->
  (tqtisFinite(y) -> (le(x, y) -> (to_int1(m, x) <= to_int1(m, y))))))

axiom to_int_of_int :
  (forall m:fpa_rounding_mode. forall i:int. (in_safe_int_range(i) ->
  (to_int1(m, of_int1(m, i)) = i)))

axiom eq_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. forall y:t1. (tqtisFinite(x) ->
  (eq(x, y) -> (to_int1(m, x) = to_int1(m, y)))))

axiom neg_to_int :
  (forall m:fpa_rounding_mode. forall x:t1. (is_int(x) -> (to_int1(m,
  neg1(x)) = (-to_int1(m, x)))))

axiom roundToIntegral_is_finite :
  (forall m:fpa_rounding_mode. forall x:t1. (tqtisFinite(x) ->
  tqtisFinite(roundToIntegral(m, x))))

axiom round_bound_ne :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  (((x - (0x1.0p-24 * abs_real(x))) - 0x1.0p-150) <= float32(NearestTiesToEven,x))))

axiom round_bound_ne1 :
  (forall x:real [float32(NearestTiesToEven,x)].
  (no_overflow(NearestTiesToEven, x) ->
  (float32(NearestTiesToEven,x) <= ((x + (0x1.0p-24 * abs_real(x))) + 0x1.0p-150))))

predicate neq(x: t1, y: t1) = (not eq(x, y))

function bool_lt1(x: t1, y: t1) : bool = (if lt(x, y) then true else false)

function bool_le1(x: t1, y: t1) : bool = (if le(x, y) then true else false)

function bool_gt1(x: t1, y: t1) : bool = (if lt(y, x) then true else false)

function bool_ge1(x: t1, y: t1) : bool = (if le(y, x) then true else false)

function bool_eq1(x: t1, y: t1) : bool = (if eq(x, y) then true else false)

function bool_neq(x: t1, y: t1) : bool = (if (not eq(x,
  y)) then true else false)

logic rem : t1, t1 -> t1

logic fliteral : t1

axiom fliteral_axiom : tqtisFinite(fliteral)

axiom fliteral_axiom1 : (tqtreal(fliteral) = 1.0)

axiom one_is_int : is_int(fliteral)

axiom one_of_int : (fliteral = of_int1(NearestTiesToAway, 1))

type t__ref1 = { t__content1 : t1
}

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int2(b: bool) : int = (if (b = true) then 1 else 0)

function of_int2(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic battery_threshold : t1

logic attr__ATTRIBUTE_ADDRESS : int

type battery_level_type

function bool_eq3(x: t1, y: t1) : bool = (if eq(x, y) then true else false)

logic user_eq : battery_level_type, battery_level_type -> bool

logic attr__ATTRIBUTE_IMAGE1 : t1 -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> t1

logic dummy : battery_level_type

type battery_level_type__ref = { battery_level_type__content :
battery_level_type
}

function battery_level_type__ref_battery_level_type__content__projection(a: battery_level_type__ref) : battery_level_type =
  (a).battery_level_type__content

logic to_rep : battery_level_type -> t1

logic of_rep : t1 -> battery_level_type

axiom inversion_axiom :
  (forall x:battery_level_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:battery_level_type [to_rep(x)]. tqtisFinite(to_rep(x)))

axiom coerce_axiom :
  (forall x:t1 [to_rep(of_rep(x))]. (tqtisFinite(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (t,battery_level_type) farray
}

logic slide : (t,battery_level_type) farray, t,
  t -> (t,battery_level_type) farray

axiom slide_eq :
  (forall a:(t,battery_level_type) farray.
  (forall first:t [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(t,battery_level_type) farray.
  (forall old_first:t.
  (forall new_first:t.
  (forall i:t [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[sub(i, sub(new_first, old_first))]))))))

function bool_eq4(a: (t,battery_level_type) farray, a__first: t, a__last: t,
  b: (t,battery_level_type) farray, b__first: t, b__last: t) : bool =
  (if ((if ule(a__first, a__last) then (ule(b__first, b__last) and
  (sub(a__last, a__first) = sub(b__last, b__first))) else ugt(b__first,
  b__last)) and
  (forall temp___idx_154:t. ((ule(a__first, temp___idx_154) and
  ule(temp___idx_154, a__last)) -> eq(to_rep((a[temp___idx_154])),
  to_rep((b[add(sub(b__first, a__first), temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(t,battery_level_type) farray.
  forall b:(t,battery_level_type) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> ule(b__first, b__last)))))

axiom bool_eq_rev1 :
  (forall a:(t,battery_level_type) farray.
  forall b:(t,battery_level_type) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  (ule(a__first, a__last) -> (sub(a__last, a__first) = sub(b__last,
  b__first))))))

axiom bool_eq_rev2 :
  (forall a:(t,battery_level_type) farray.
  forall b:(t,battery_level_type) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  ((not ule(a__first, a__last)) -> ugt(b__first, b__last)))))

axiom bool_eq_rev3 :
  (forall a:(t,battery_level_type) farray.
  forall b:(t,battery_level_type) farray.
  (forall a__first:t. forall a__last:t. forall b__first:t. forall b__last:t.
  ((bool_eq4(b, b__first, b__last, a, a__first, a__last) = true) ->
  (forall temp___idx_154:t. ((ule(a__first, temp___idx_154) and
  ule(temp___idx_154, a__last)) -> eq(to_rep((a[temp___idx_154])),
  to_rep((b[add(sub(b__first, a__first), temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic time_below_threshold : (t,battery_level_type) farray, t -> t

logic time_below_threshold__function_guard : t,
  (t,battery_level_type) farray, t -> prop

type time_slot

logic rliteral : t

axiom rliteral_axiom : (tqtint(rliteral) = 0)

logic rliteral1 : t

axiom rliteral_axiom1 : (tqtint(rliteral1) = 49)

predicate in_range2(x: t) = (ule(rliteral, x) and ule(x, rliteral1))

predicate in_range_int(x: int) = ((0 <= x) and (x <= 49))

function bool_eq5(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> t

logic user_eq1 : time_slot, time_slot -> bool

logic dummy1 : time_slot

type time_slot__ref = { time_slot__content : time_slot
}

function time_slot__ref_time_slot__content__projection(a: time_slot__ref) : time_slot =
  (a).time_slot__content

predicate dynamic_invariant(temp___expr_169: t, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  ule(rliteral, rliteral1)) -> in_range2(temp___expr_169))

type time_slot_length

logic attr__ATTRIBUTE_MODULUS : t

logic rliteral2 : t

axiom rliteral_axiom2 : (tqtint(rliteral2) = 50)

predicate in_range3(x: t) = (ule(rliteral, x) and ule(x, rliteral2))

predicate in_range_int1(x: int) = ((0 <= x) and (x <= 50))

function bool_eq6(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> t

logic user_eq2 : time_slot_length, time_slot_length -> bool

logic dummy2 : time_slot_length

type time_slot_length__ref = { time_slot_length__content : time_slot_length
}

function time_slot_length__ref_time_slot_length__content__projection(a: time_slot_length__ref) : time_slot_length =
  (a).time_slot_length__content

predicate dynamic_invariant1(temp___expr_183: t, temp___is_init_179: bool,
  temp___skip_constant_180: bool, temp___do_toplevel_181: bool,
  temp___do_typ_inv_182: bool) = (((temp___is_init_179 = true) or
  ule(rliteral, rliteral2)) -> in_range3(temp___expr_183))

logic rliteral3 : t

axiom rliteral_axiom3 : (tqtint(rliteral3) = 1)

axiom time_below_threshold__post_axiom :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  (le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time]))) ->
  (result = rliteral)))))))

axiom time_below_threshold__post_axiom1 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  ((not le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time])))) ->
  ((forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
   lt(to_rep((failsafe__model__battery_level_at[s])), battery_threshold))) ->
  (result = rliteral2))))))))

axiom time_below_threshold__post_axiom2 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  ((not le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time])))) ->
  ((not (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
        lt(to_rep((failsafe__model__battery_level_at[s])),
        battery_threshold)))) ->
  ult(result, rliteral2))))))))

axiom time_below_threshold__post_axiom3 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  ((not le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time])))) ->
  ((not (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
        lt(to_rep((failsafe__model__battery_level_at[s])),
        battery_threshold)))) ->
  le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[(if ult(failsafe__model__current_time,
  result) then add(sub(failsafe__model__current_time, result),
  rliteral2) else sub(failsafe__model__current_time, result))]))))))))))

axiom time_below_threshold__post_axiom4 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  ((not le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time])))) ->
  ((not (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
        lt(to_rep((failsafe__model__battery_level_at[s])),
        battery_threshold)))) ->
  (uge(failsafe__model__current_time, sub(result, rliteral3)) ->
  (forall s:t. ((ule((if ult(failsafe__model__current_time, sub(result,
  rliteral3)) then add(sub(failsafe__model__current_time, sub(result,
  rliteral3)), rliteral2) else sub(failsafe__model__current_time, sub(result,
  rliteral3))), s) and ule(s, failsafe__model__current_time)) ->
  lt(to_rep((failsafe__model__battery_level_at[s])), battery_threshold)))))))))))

axiom time_below_threshold__post_axiom5 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  ((not le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time])))) ->
  ((not (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
        lt(to_rep((failsafe__model__battery_level_at[s])),
        battery_threshold)))) ->
  ((not uge(failsafe__model__current_time, sub(result, rliteral3))) ->
  (forall s:t. ((ule(rliteral, s) and ule(s,
  failsafe__model__current_time)) ->
  lt(to_rep((failsafe__model__battery_level_at[s])), battery_threshold)))))))))))

axiom time_below_threshold__post_axiom6 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  ((not le(battery_threshold,
  to_rep((failsafe__model__battery_level_at[failsafe__model__current_time])))) ->
  ((not (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
        lt(to_rep((failsafe__model__battery_level_at[s])),
        battery_threshold)))) ->
  ((not uge(failsafe__model__current_time, sub(result, rliteral3))) ->
  (forall s:t. ((ule((if ult(failsafe__model__current_time, sub(result,
  rliteral3)) then add(sub(failsafe__model__current_time, sub(result,
  rliteral3)), rliteral2) else sub(failsafe__model__current_time, sub(result,
  rliteral3))), s) and ule(s, rliteral1)) ->
  lt(to_rep((failsafe__model__battery_level_at[s])), battery_threshold)))))))))))

axiom time_below_threshold__post_axiom7 :
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  (forall failsafe__model__current_time:t
  [time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  (dynamic_invariant(failsafe__model__current_time, true, true, true,
  true) -> (let result =
  time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time) : t in
  (time_below_threshold__function_guard(result,
  failsafe__model__battery_level_at, failsafe__model__current_time) ->
  dynamic_invariant1(result, true, false, true, true))))))

logic attr__ATTRIBUTE_ADDRESS3 : int

logic is_valid : t, (t,battery_level_type) farray, t -> bool

logic is_valid__function_guard : bool, t, (t,battery_level_type) farray,
  t -> prop

type tcounterS

logic attr__ATTRIBUTE_MODULUS1 : t

predicate in_range4(x: t) = (ule(rliteral, x) and ule(x, rliteral2))

predicate in_range_int2(x: int) = ((0 <= x) and (x <= 50))

function bool_eq7(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> t

logic user_eq3 : tcounterS, tcounterS -> bool

logic dummy3 : tcounterS

type tcounterS__ref = { tcounterS__content : tcounterS
}

function tcounterS__ref_tcounterS__content__projection(a: tcounterS__ref) : tcounterS =
  (a).tcounterS__content

predicate dynamic_invariant2(temp___expr_208: t, temp___is_init_204: bool,
  temp___skip_constant_205: bool, temp___do_toplevel_206: bool,
  temp___do_typ_inv_207: bool) = (((temp___is_init_204 = true) or
  ule(rliteral, rliteral2)) -> in_range4(temp___expr_208))

axiom is_valid__def_axiom :
  (forall failsafe__model__current_time:t.
  forall failsafe__model__battery_level_at:(t,battery_level_type) farray.
  time_below_threshold__function_guard(time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time), failsafe__model__battery_level_at,
  failsafe__model__current_time))

axiom is_valid__def_axiom1 :
  (forall failsafe__counter:t. forall failsafe__model__current_time:t.
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray
  [is_valid(failsafe__counter, failsafe__model__battery_level_at,
  failsafe__model__current_time)]. ((is_valid(failsafe__counter,
  failsafe__model__battery_level_at,
  failsafe__model__current_time) = true) ->
  (failsafe__counter = time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)))))

axiom is_valid__def_axiom2 :
  (forall failsafe__counter:t. forall failsafe__model__current_time:t.
  (forall failsafe__model__battery_level_at:(t,battery_level_type) farray
  [is_valid(failsafe__counter, failsafe__model__battery_level_at,
  failsafe__model__current_time)].
  ((failsafe__counter = time_below_threshold(failsafe__model__battery_level_at,
  failsafe__model__current_time)) -> (is_valid(failsafe__counter,
  failsafe__model__battery_level_at, failsafe__model__current_time) = true))))

logic battery_level : t1

logic attr__ATTRIBUTE_ADDRESS4 : int

logic c : t

logic attr__ATTRIBUTE_ADDRESS5 : int

logic fliteral1 : t1

axiom fliteral_axiom2 : tqtisFinite(fliteral1)

axiom fliteral_axiom3 :
  (tqtreal(fliteral1) = 340282346638528859811704183484516925440.0)

predicate dynamic_invariant3(temp___expr_162: t1, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  le(neg1(fliteral1), fliteral1)) -> tqtisFinite(temp___expr_162))

type unsigned_8

logic attr__ATTRIBUTE_MODULUS2 : t

function bool_eq8(x: t, y: t) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : t -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> t

logic user_eq4 : unsigned_8, unsigned_8 -> bool

logic dummy4 : unsigned_8

type unsigned_8__ref = { unsigned_8__content : unsigned_8
}

function unsigned_8__ref_unsigned_8__content__projection(a: unsigned_8__ref) : unsigned_8 =
  (a).unsigned_8__content

logic rliteral4 : t

axiom rliteral_axiom4 : (tqtint(rliteral4) = 255)

predicate dynamic_invariant4(temp___expr_176: t, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = true

logic fliteral2 : t1

axiom fliteral_axiom4 : tqtisFinite(fliteral2)

axiom fliteral_axiom5 : (tqtreal(fliteral2) = 0.20000000298023223876953125)

axiom battery_threshold__def_axiom : (battery_threshold = fliteral2)

 (* File "failsafe.ads", line 54, characters 0-0 *)
goal defqtvc :
  (forall battery_level_at:(t,battery_level_type) farray.
  forall current_time:t. forall counter:t.
  (forall current_time1:t. ((current_time1 = current_time) ->
  (dynamic_invariant3(battery_threshold, true, false, true, true) ->
  ((fliteral2 = battery_threshold) -> (dynamic_invariant2(counter, true,
  false, true, true) -> (dynamic_invariant(current_time, true, false, true,
  true) -> (dynamic_invariant3(battery_level, true, false, true, true) ->
  ((forall battery_level_at1:(t,battery_level_type) farray.
   forall current_time2:t. forall counter1:t.
   is_valid__function_guard(is_valid(counter1, battery_level_at1,
   current_time2), counter1, battery_level_at1, current_time2)) ->
  ((is_valid(counter, battery_level_at, current_time) = true) ->
  ((counter = c) -> (dynamic_invariant4(c, true, false, true, true) ->
  ((forall battery_level_at1:(t,battery_level_type) farray.
   forall current_time2:t.
   time_below_threshold__function_guard(time_below_threshold(battery_level_at1,
   current_time2), battery_level_at1, current_time2)) ->
  ((counter = time_below_threshold(battery_level_at, current_time)) ->
  (((forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
    lt(to_rep((battery_level_at[s])), battery_threshold))) ->
  (counter = rliteral2)) ->
  (((forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
    ((not (s = (if ule(sub(rliteral2, current_time),
    rliteral3) then sub(add(current_time, rliteral3),
    rliteral2) else add(current_time, rliteral3)))) ->
    lt(to_rep((battery_level_at[s])), battery_threshold)))) ->
  uge(counter, rliteral1)) ->
  (forall o:t. ((let temp___264 = add(current_time, rliteral3) : t in
  (if ule(sub(rliteral2, current_time), rliteral3) then (o = sub(temp___264,
  rliteral2)) else (o = temp___264))) ->
  (forall current_time2:t. ((current_time2 = o) ->
  (forall o1:battery_level_type. ((to_rep(o1) = battery_level) ->
  (forall battery_level_at1:(t,battery_level_type) farray.
  ((battery_level_at1 = (battery_level_at[current_time2 <- o1])) ->
  (forall spark__branch:bool. ((spark__branch = (if lt(battery_level,
  battery_threshold) then true else false)) -> ((spark__branch = true) ->
  (let o2 = add(counter, rliteral3) : t in (let o3 = (if ule(o2,
  rliteral2) then o2 else rliteral2) : t in (in_range4(o3) ->
  (forall counter1:t. ((counter1 = o3) -> ((le(battery_threshold,
  to_rep((battery_level_at1[current_time2]))) -> (counter1 = rliteral)) ->
  (((c = rliteral2) -> (counter1 = rliteral2)) ->
  ((((not (c = rliteral2)) and
  (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
  lt(to_rep((battery_level_at1[s])), battery_threshold)))) ->
  (c = rliteral1)) -> ((((not (c = rliteral2)) and
  (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
  lt(to_rep((battery_level_at1[s])), battery_threshold)))) ->
  (counter1 = rliteral2)) ->
  (((lt(to_rep((battery_level_at1[current_time2])), battery_threshold) and
  (not (forall s:t. ((ule(rliteral, s) and ule(s, rliteral1)) ->
       lt(to_rep((battery_level_at1[s])), battery_threshold))))) ->
  (le(battery_threshold, to_rep((battery_level_at1[(if ult(current_time2,
  counter1) then add(sub(current_time2, counter1),
  rliteral2) else sub(current_time2, counter1))]))) and
  (if uge(current_time2, sub(counter1,
  rliteral3)) then (forall s:t. ((ule((if ult(current_time2, sub(counter1,
                   rliteral3)) then add(sub(current_time2, sub(counter1,
                   rliteral3)), rliteral2) else sub(current_time2,
                   sub(counter1, rliteral3))), s) and ule(s,
                   current_time2)) -> lt(to_rep((battery_level_at1[s])),
                   battery_threshold))) else ((forall s:t. ((ule(rliteral,
                                              s) and ule(s,
                                              current_time2)) ->
                                              lt(to_rep((battery_level_at1[s])),
                                              battery_threshold))) and
  (forall s:t. ((ule((if ult(current_time2, sub(counter1,
  rliteral3)) then add(sub(current_time2, sub(counter1, rliteral3)),
  rliteral2) else sub(current_time2, sub(counter1, rliteral3))), s) and
  ule(s, rliteral1)) -> lt(to_rep((battery_level_at1[s])),
  battery_threshold))))))) ->
  ((forall current_time3:t.
   forall battery_level_at2:(t,battery_level_type) farray.
   time_below_threshold__function_guard(time_below_threshold(battery_level_at2,
   current_time3), battery_level_at2, current_time3)) ->
  (counter1 = time_below_threshold(battery_level_at1, current_time2))))))))))))))))))))))))))))))))))))))))
