(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 8))

predicate in_range1(x: int) = ((1 <= x) and (x <= 8))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : index, index -> bool

logic dummy : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

function to_rep(x: index) : int = indexqtint(x)

logic of_rep : int -> index

axiom inversion_axiom : (forall x:index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,index) farray
}

logic slide : (int,index) farray, int, int -> (int,index) farray

axiom slide_eq :
  (forall a:(int,index) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,index) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,index) farray, a__first: int, a__last: int,
  b: (int,index) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,index) farray. forall b:(int,index) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic consistent : (int,index) farray, int -> bool

logic consistent__function_guard : bool, (int,index) farray, int -> prop

predicate dynamic_invariant(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (1 <= 8)) -> in_range1(temp___expr_162))

axiom consistent__def_axiom :
  (forall b:(int,index) farray.
  (forall k:int [consistent(b, k)]. ((consistent(b, k) = true) ->
  (forall i:int. (((1 <= i) and (i <= k)) ->
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (not (to_rep((b[i])) = to_rep((b[j])))))))))))

axiom consistent__def_axiom1 :
  (forall b:(int,index) farray.
  (forall k:int [consistent(b, k)]. ((consistent(b, k) = true) ->
  (forall i:int. (((1 <= i) and (i <= k)) ->
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (not ((i - j) = (to_rep((b[i])) - to_rep((b[j]))))))))))))

axiom consistent__def_axiom2 :
  (forall b:(int,index) farray.
  (forall k:int [consistent(b, k)]. ((consistent(b, k) = true) ->
  (forall i:int. (((1 <= i) and (i <= k)) ->
  (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
  (not ((i - j) = (to_rep((b[j])) - to_rep((b[i]))))))))))))

axiom consistent__def_axiom3 :
  (forall b:(int,index) farray.
  (forall k:int [consistent(b, k)].
  ((forall i:int. (((1 <= i) and (i <= k)) ->
   (forall j:int. (((1 <= j) and (j <= (i - 1))) ->
   (((not (to_rep((b[i])) = to_rep((b[j])))) and
   (not ((i - j) = (to_rep((b[i])) - to_rep((b[j])))))) and
   (not ((i - j) = (to_rep((b[j])) - to_rep((b[i])))))))))) ->
  (consistent(b, k) = true))))

logic copy_until : (int,index) farray, int,
  (int,index) farray -> (int,index) farray

logic copy_until__function_guard : (int,index) farray, (int,index) farray,
  int, (int,index) farray -> prop

axiom copy_until__post_axiom :
  (forall b:(int,index) farray. forall c:(int,index) farray.
  (forall i:int [copy_until(b, i, c)]. (dynamic_invariant(i, true, true,
  true, true) -> (let result = copy_until(b, i, c) : (int,index) farray in
  (copy_until__function_guard(result, b, i, c) ->
  (forall j:int. (((1 <= j) and (j <= i)) ->
  (to_rep((result[j])) = to_rep((b[j]))))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic c : (int,index) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

 (* File "queen.ads", line 47, characters 0-0 *)
goal defqtvc :
  (forall b:(int,index) farray.
  (forall b1:(int,index) farray. ((b1 = b) -> (dynamic_invariant(i, true,
  false, true, true) -> (((not (1 <  i)) or in_range1((i - 1))) -> (let o =
  (if (1 <  i) then consistent(b, (i - 1)) else of_int(1)) : bool in
  (((not (1 <  i)) or (let o1 = (i - 1) : int in
  (consistent__function_guard(o, b, o1) and ((o = true) <->
  (forall i1:int. (((1 <= i1) and (i1 <= o1)) ->
  (forall j:int. (((1 <= j) and (j <= (i1 - 1))) ->
  (((not (to_rep((b[i1])) = to_rep((b[j])))) and
  (not ((i1 - j) = (to_rep((b[i1])) - to_rep((b[j])))))) and
  (not ((i1 - j) = (to_rep((b[j])) - to_rep((b[i1])))))))))))))) ->
  (forall usf:int. ((andb((if (1 <= usf) then true else false),
  (if (usf <= (i - 1)) then true else false)) = true) -> (1 <= usf))))))))))
