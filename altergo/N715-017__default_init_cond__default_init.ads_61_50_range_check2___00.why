(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic nat_ok : int -> bool

logic nat_ok__function_guard : bool, int -> prop

type nat

logic natqtint : nat -> int

axiom natqtaxiom : (forall i:nat. (0 <= natqtint(i)))

axiom natqtaxiom1 : (forall i:nat. (natqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : nat, nat -> bool

logic dummy : nat

type nat__ref = { nat__content : nat
}

function nat__ref_nat__content__projection(a: nat__ref) : nat =
  (a).nat__content

predicate dynamic_invariant(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_194))

axiom temp___result_198qtdef :
  (forall temp___197:int. nat_ok__function_guard(nat_ok(temp___197),
  temp___197))

predicate default_initial_assumption(temp___expr_195: int,
  temp___skip_top_level_196: bool) = ((temp___expr_195 = 0) and
  ((not (temp___skip_top_level_196 = true)) ->
  (nat_ok(temp___expr_195) = true)))

axiom nat_ok__def_axiom :
  (forall x:int [nat_ok(x)]. ((nat_ok(x) = true) -> (x = 0)))

axiom nat_ok__def_axiom1 :
  (forall x:int [nat_ok(x)]. ((x = 0) -> (nat_ok(x) = true)))

 (* File "/home/kanig/dev/spark2014/benchmark_script/data/tmp-test-N715-017__default_init_cond-15469/src/gnatprove/default_init__nat.mlw", line 129, characters 5-8 *)
goal defqtvc : in_range(0)
