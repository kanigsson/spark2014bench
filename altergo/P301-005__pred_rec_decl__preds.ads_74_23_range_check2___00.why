(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic i45s : int

logic attr__ATTRIBUTE_ADDRESS : int

type rec_int_bad

logic rec_int_badqtint : rec_int_bad -> int

axiom rec_int_badqtaxiom :
  (forall i:rec_int_bad. ((- 2147483648) <= rec_int_badqtint(i)))

axiom rec_int_badqtaxiom1 :
  (forall i:rec_int_bad. (rec_int_badqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : rec_int_bad, rec_int_bad -> bool

logic dummy : rec_int_bad

type rec_int_bad__ref = { rec_int_bad__content : rec_int_bad
}

function rec_int_bad__ref_rec_int_bad__content__projection(a: rec_int_bad__ref) : rec_int_bad =
  (a).rec_int_bad__content

function to_rep(x: rec_int_bad) : int = rec_int_badqtint(x)

logic of_rep : int -> rec_int_bad

axiom inversion_axiom :
  (forall x:rec_int_bad [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:rec_int_bad [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__preds__rec_wrap_bad__x : rec_int_bad
}

function us_split_fields_rec__preds__rec_wrap_bad__x__projection(a: us_split_fields) : rec_int_bad =
  (a).rec__preds__rec_wrap_bad__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__4__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__preds__rec_wrap_bad__x) = to_rep(((b).us_split_fields1).rec__preds__rec_wrap_bad__x)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic preds__rec_wrap_bad__x__first__bit : int

logic preds__rec_wrap_bad__x__last__bit : int

logic preds__rec_wrap_bad__x__position : int

axiom preds__rec_wrap_bad__x__first__bit_axiom :
  (0 <= preds__rec_wrap_bad__x__first__bit)

axiom preds__rec_wrap_bad__x__last__bit_axiom :
  (preds__rec_wrap_bad__x__first__bit <  preds__rec_wrap_bad__x__last__bit)

axiom preds__rec_wrap_bad__x__position_axiom :
  (0 <= preds__rec_wrap_bad__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type rec_wrap_bad__ref = { rec_wrap_bad__content : us_rep
}

function rec_wrap_bad__ref_rec_wrap_bad__content__projection(a: rec_wrap_bad__ref) : us_rep =
  (a).rec_wrap_bad__content

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_352: us_rep,
  temp___is_init_348: bool, temp___skip_constant_349: bool,
  temp___do_toplevel_350: bool, temp___do_typ_inv_351: bool) =
  (let temp___354 =
  to_rep(((temp___expr_352).us_split_fields1).rec__preds__rec_wrap_bad__x)
  : int in ((((- 2147483648) <= temp___354) and (temp___354 <= (- 1))) or
  ((1 <= temp___354) and (temp___354 <= 2147483647))))

predicate default_initial_assumption(temp___expr_355: us_rep,
  temp___skip_top_level_356: bool) =
  (to_rep(((temp___expr_355).us_split_fields1).rec__preds__rec_wrap_bad__x) = 0)

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant1(temp___expr_332: int, temp___is_init_328: bool,
  temp___skip_constant_329: bool, temp___do_toplevel_330: bool,
  temp___do_typ_inv_331: bool) = ((((temp___is_init_328 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_332)) and
  ((temp___do_toplevel_330 = true) ->
  ((((- 2147483648) <= temp___expr_332) and (temp___expr_332 <= (- 1))) or
  ((1 <= temp___expr_332) and (temp___expr_332 <= 2147483647)))))

predicate dynamic_predicate(temp___336: int) =
  ((((- 2147483648) <= temp___336) and (temp___336 <= (- 1))) or
  ((1 <= temp___336) and (temp___336 <= 2147483647)))

 (* File "preds.adb", line 69, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:rec_int_bad. (dynamic_invariant1(i45s, true, false,
  true, true) -> (dynamic_invariant1(i45s, true, false, true, true) ->
  (dynamic_invariant({ us_split_fields1 = { rec__preds__rec_wrap_bad__x =
  x__split_fields } }, false, false, true, true) -> in_range(0)))))
