(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type enum_t

predicate in_range2(x: int) = ((0 <= x) and (x <= 2))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : enum_t, enum_t -> bool

logic dummy1 : enum_t

type enum_t__ref = { enum_t__content : enum_t
}

function enum_t__ref_enum_t__content__projection(a: enum_t__ref) : enum_t =
  (a).enum_t__content

logic to_rep1 : enum_t -> int

logic of_rep1 : int -> enum_t

axiom inversion_axiom1 :
  (forall x:enum_t [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:enum_t [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__mixed__rec__b : bool; rec__mixed__rec__e :
enum_t; rec__mixed__rec__i : integer
}

function us_split_fields_rec__mixed__rec__b__projection(a: us_split_fields) : bool =
  (a).rec__mixed__rec__b

function us_split_fields_rec__mixed__rec__e__projection(a: us_split_fields) : enum_t =
  (a).rec__mixed__rec__e

function us_split_fields_rec__mixed__rec__i__projection(a: us_split_fields) : integer =
  (a).rec__mixed__rec__i

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((to_int(((a).us_split_fields1).rec__mixed__rec__b) = to_int(((b).us_split_fields1).rec__mixed__rec__b)) and
  (to_rep1(((a).us_split_fields1).rec__mixed__rec__e) = to_rep1(((b).us_split_fields1).rec__mixed__rec__e))) and
  (to_rep(((a).us_split_fields1).rec__mixed__rec__i) = to_rep(((b).us_split_fields1).rec__mixed__rec__i))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic mixed__rec__b__first__bit : int

logic mixed__rec__b__last__bit : int

logic mixed__rec__b__position : int

axiom mixed__rec__b__first__bit_axiom : (0 <= mixed__rec__b__first__bit)

axiom mixed__rec__b__last__bit_axiom :
  (mixed__rec__b__first__bit <  mixed__rec__b__last__bit)

axiom mixed__rec__b__position_axiom : (0 <= mixed__rec__b__position)

logic mixed__rec__e__first__bit : int

logic mixed__rec__e__last__bit : int

logic mixed__rec__e__position : int

axiom mixed__rec__e__first__bit_axiom : (0 <= mixed__rec__e__first__bit)

axiom mixed__rec__e__last__bit_axiom :
  (mixed__rec__e__first__bit <  mixed__rec__e__last__bit)

axiom mixed__rec__e__position_axiom : (0 <= mixed__rec__e__position)

logic mixed__rec__i__first__bit : int

logic mixed__rec__i__last__bit : int

logic mixed__rec__i__position : int

axiom mixed__rec__i__first__bit_axiom : (0 <= mixed__rec__i__first__bit)

axiom mixed__rec__i__last__bit_axiom :
  (mixed__rec__i__first__bit <  mixed__rec__i__last__bit)

axiom mixed__rec__i__position_axiom : (0 <= mixed__rec__i__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type rec____ref = { rec____content : us_rep
}

function rec____ref_rec____content__projection(a: rec____ref) : us_rep =
  (a).rec____content

logic r : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant1(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 2)) -> in_range2(temp___expr_167))

 (* File "mixed.adb", line 20, characters 0-0 *)
goal defqtvc :
  (forall mixed__id__result:us_split_fields. (({ us_split_fields1 =
  mixed__id__result } = r) -> (bool_eq3(r, { us_split_fields1 =
  mixed__id__result }) = true)))
