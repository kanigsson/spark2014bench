(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : count_type, count_type -> bool

logic dummy1 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

function to_rep1(x: count_type) : int = count_typeqtint(x)

logic of_rep1 : int -> count_type

axiom inversion_axiom1 :
  (forall x:count_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:count_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields = { rec__replacement__inverse_sets__cursor__node :
count_type
}

function us_split_fields_rec__replacement__inverse_sets__cursor__node__projection(a: us_split_fields) : count_type =
  (a).rec__replacement__inverse_sets__cursor__node

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (to_rep1(((a).us_split_fields1).rec__replacement__inverse_sets__cursor__node) = to_rep1(((b).us_split_fields1).rec__replacement__inverse_sets__cursor__node)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic replacement__inverse_sets__cursor__node__first__bit : int

logic replacement__inverse_sets__cursor__node__last__bit : int

logic replacement__inverse_sets__cursor__node__position : int

axiom replacement__inverse_sets__cursor__node__first__bit_axiom :
  (0 <= replacement__inverse_sets__cursor__node__first__bit)

axiom replacement__inverse_sets__cursor__node__last__bit_axiom :
  (replacement__inverse_sets__cursor__node__first__bit <  replacement__inverse_sets__cursor__node__last__bit)

axiom replacement__inverse_sets__cursor__node__position_axiom :
  (0 <= replacement__inverse_sets__cursor__node__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type cursor__ref = { cursor__content : us_rep
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep =
  (a).cursor__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__replacement__inverse_sets__map__capacity :
count_type
}

function us_split_discrs_rec__replacement__inverse_sets__map__capacity__projection(a: us_split_discrs) : count_type =
  (a).rec__replacement__inverse_sets__map__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = { rec__replacement__inverse_sets__map : us_main_type
}

function us_split_fields_rec__replacement__inverse_sets__map__projection(a: us_split_fields2) : us_main_type =
  (a).rec__replacement__inverse_sets__map

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__replacement__inverse_sets__map__capacity) = to_rep1(((b).us_split_discrs1).rec__replacement__inverse_sets__map__capacity)) and
  (us_main_eq(((a).us_split_fields3).rec__replacement__inverse_sets__map,
  ((b).us_split_fields3).rec__replacement__inverse_sets__map) = true)) then true else false)

predicate in_range3(rec__replacement__inverse_sets__map__capacity1: int,
  a: us_split_discrs) =
  (rec__replacement__inverse_sets__map__capacity1 = to_rep1((a).rec__replacement__inverse_sets__map__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic replacement__inverse_sets__map__capacity__first__bit : int

logic replacement__inverse_sets__map__capacity__last__bit : int

logic replacement__inverse_sets__map__capacity__position : int

axiom replacement__inverse_sets__map__capacity__first__bit_axiom :
  (0 <= replacement__inverse_sets__map__capacity__first__bit)

axiom replacement__inverse_sets__map__capacity__last__bit_axiom :
  (replacement__inverse_sets__map__capacity__first__bit <  replacement__inverse_sets__map__capacity__last__bit)

axiom replacement__inverse_sets__map__capacity__position_axiom :
  (0 <= replacement__inverse_sets__map__capacity__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type map__ref = { map__content : us_rep1
}

function map__ref_map__content__projection(a: map__ref) : us_rep1 =
  (a).map__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep2

logic bool_eq5 : us_rep2, us_rep2 -> bool

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq4 : us_rep2, us_rep2 -> bool

logic dummy4 : us_rep2

type map__ref1 = { map__content1 : us_rep2
}

function map__ref_map__content__3__projection(a: map__ref1) : us_rep2 =
  (a).map__content1

type key_type__ref = { key_type__content : us_rep
}

function key_type__ref_key_type__content__3__projection(a: key_type__ref) : us_rep =
  (a).key_type__content

logic has_key : us_rep2, us_rep -> bool

logic has_key__function_guard : bool, us_rep2, us_rep -> prop

logic positions : us_rep1 -> us_rep2

logic positions__function_guard : us_rep2, us_rep1 -> prop

function has_element(container: us_rep1, position: us_rep) : bool =
  has_key(positions(container), position)

logic has_element__function_guard : bool, us_rep1, us_rep -> prop

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq6 : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : us_rep3, us_rep3 -> bool

logic dummy5 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

logic get : us_rep3, int -> int

logic get__function_guard : int, us_rep3, int -> prop

logic get1 : us_rep2, us_rep -> int

logic get__function_guard1 : int, us_rep2, us_rep -> prop

logic keys : us_rep1 -> us_rep3

logic keys__function_guard : us_rep3, us_rep1 -> prop

function key(container: us_rep1, position: us_rep) : int =
  get(keys(container), get1(positions(container), position))

logic key__function_guard : int, us_rep1, us_rep -> prop

type key_type

logic key_typeqtint : key_type -> int

axiom key_typeqtaxiom :
  (forall i:key_type. ((- 2147483648) <= key_typeqtint(i)))

axiom key_typeqtaxiom1 :
  (forall i:key_type. (key_typeqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : key_type, key_type -> bool

logic dummy6 : key_type

type key_type__ref1 = { key_type__content1 : key_type
}

function key_type__ref_key_type__content__projection(a: key_type__ref1) : key_type =
  (a).key_type__content1

predicate dynamic_invariant1(temp___expr_263: int, temp___is_init_259: bool,
  temp___skip_constant_260: bool, temp___do_toplevel_261: bool,
  temp___do_typ_inv_262: bool) = (((temp___is_init_259 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_263))

type us_main_type3

logic us_main_eq3 : us_main_type3, us_main_type3 -> bool

type us_rep4

logic bool_eq8 : us_rep4, us_rep4 -> bool

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic user_eq7 : us_rep4, us_rep4 -> bool

logic dummy7 : us_rep4

type map__ref2 = { map__content2 : us_rep4
}

function map__ref_map__content__2__projection(a: map__ref2) : us_rep4 =
  (a).map__content2

logic get2 : us_rep4, int -> int

logic get__function_guard2 : int, us_rep4, int -> prop

logic model : us_rep1 -> us_rep4

logic model__function_guard : us_rep4, us_rep1 -> prop

function element(container: us_rep1, position: us_rep) : int =
  get2(model(container), key(container, position))

logic element__function_guard : int, us_rep1, us_rep -> prop

type element_type

logic element_typeqtint : element_type -> int

axiom element_typeqtaxiom :
  (forall i:element_type. ((- 2147483648) <= element_typeqtint(i)))

axiom element_typeqtaxiom1 :
  (forall i:element_type. (element_typeqtint(i) <= 2147483647))

predicate in_range5(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : element_type, element_type -> bool

logic dummy8 : element_type

type element_type__ref = { element_type__content : element_type
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : element_type =
  (a).element_type__content

predicate dynamic_invariant2(temp___expr_270: int, temp___is_init_266: bool,
  temp___skip_constant_267: bool, temp___do_toplevel_268: bool,
  temp___do_typ_inv_269: bool) = (((temp___is_init_266 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range5(temp___expr_270))

logic keys_included : us_rep4, us_rep4 -> bool

logic keys_included__function_guard : bool, us_rep4, us_rep4 -> prop

function same_keys(left: us_rep4, right: us_rep4) : bool =
  andb(keys_included(left, right), keys_included(right, left))

logic same_keys__function_guard : bool, us_rep4, us_rep4 -> prop

logic elements_equal_except : us_rep4, us_rep4, int -> bool

logic elements_equal_except__function_guard : bool, us_rep4, us_rep4,
  int -> prop

logic bool_eq10 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq10(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq10(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

logic length1 : us_rep3 -> int

logic length__function_guard : int, us_rep3 -> prop

function last(container: us_rep3) : int = (0 + length1(container))

logic last__function_guard : int, us_rep3 -> prop

function oeq(left: us_rep3, right: us_rep3) : bool =
  andb(bool_eq10(length1(left), length1(right)),
  (if (forall n:int. (((1 <= n) and (n <= last(left))) -> (get(left,
      n) = get(right, n)))) then true else false))

logic oeq__function_guard : bool, us_rep3, us_rep3 -> prop

logic oeq1 : us_rep2, us_rep2 -> bool

logic oeq__function_guard1 : bool, us_rep2, us_rep2 -> prop

logic oeq2 : us_rep1, us_rep1 -> bool

logic oeq__function_guard2 : bool, us_rep1, us_rep1 -> prop

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq3(a, b)]. (user_eq3(a,
  b) = oeq2(a, b)))

logic has_key1 : us_rep4, int -> bool

logic has_key__function_guard1 : bool, us_rep4, int -> prop

function contains(container: us_rep1, key1: int) : bool =
  has_key1(model(container), key1)

logic contains__function_guard : bool, us_rep1, int -> prop

function equivalent_keys(left: int, right: int) : bool =
  andb(notb(bool_lt(left, right)), notb(bool_lt(right, left)))

logic equivalent_keys__function_guard : bool, int, int -> prop

logic no_element : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic find : us_rep3, int -> int

logic find__function_guard : int, us_rep3, int -> prop

logic find1 : us_rep1, int -> us_rep

logic find__function_guard1 : us_rep, us_rep1, int -> prop

axiom find__post_axiom :
  (forall container:us_rep1.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> ((not (has_key1(model(container), key1) = true)) ->
  (not (has_key(positions(container), find1(container, key1)) = true))))))

axiom find__post_axiom1 :
  (forall container:us_rep1.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> ((not (has_key1(model(container), key1) = true)) ->
  (bool_eq3(find1(container, key1), no_element) = true)))))

axiom find__post_axiom2 :
  (forall container:us_rep1.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> ((has_key1(model(container), key1) = true) ->
  (has_key(positions(container), find1(container, key1)) = true)))))

axiom find__post_axiom3 :
  (forall container:us_rep1.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> ((has_key1(model(container), key1) = true) ->
  (get1(positions(container), find1(container, key1)) = find(keys(container),
  key1))))))

axiom find__post_axiom4 :
  (forall container:us_rep1.
  (forall key1:int [find1(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> ((has_key1(model(container), key1) = true) ->
  (equivalent_keys(key(container, find1(container, key1)), key1) = true)))))

type map__ref3 = { map__content3 : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq11(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq11(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last1 : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last1(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last2(a: us_t) : int = to_rep(last1((a).rt))

function length2(a: us_t) : int =
  (if (first1(a) <= last2(a)) then ((last2(a) - first1(a)) + 1) else 0)

logic value__size5 : int

logic object__size5 : int

logic component__size : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom5 : (0 <= alignment5)

function bool_eq12(x: us_t, y: us_t) : bool = bool_eq11((x).elts,
  to_rep(first((x).rt)), to_rep(last1((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last1((y).rt)))

logic user_eq9 : us_t, us_t -> bool

logic dummy9 : us_t

type set__ref = { set__content : us_t
}

function set__ref_set__content__projection(a: set__ref) : us_t =
  (a).set__content

logic a : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic replacement__inverse_sets__map__capacity__first__bit1 : int

logic replacement__inverse_sets__map__capacity__last__bit1 : int

logic replacement__inverse_sets__map__capacity__position1 : int

axiom replacement__inverse_sets__map__capacity__first__bit_axiom1 :
  (0 <= replacement__inverse_sets__map__capacity__first__bit1)

axiom replacement__inverse_sets__map__capacity__last__bit_axiom1 :
  (replacement__inverse_sets__map__capacity__first__bit1 <  replacement__inverse_sets__map__capacity__last__bit1)

axiom replacement__inverse_sets__map__capacity__position_axiom1 :
  (0 <= replacement__inverse_sets__map__capacity__position1)

logic user_eq10 : us_rep1, us_rep1 -> bool

logic dummy10 : us_rep1

type inverse_set__ref = { inverse_set__content : us_rep1
}

function inverse_set__ref_inverse_set__content__projection(a1: inverse_set__ref) : us_rep1 =
  (a1).inverse_set__content

logic d__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

axiom user_eq__def_axiom1 :
  (forall a1:us_rep1. forall b:us_rep1 [user_eq10(a1, b)]. (user_eq10(a1,
  b) = oeq2(a1, b)))

logic k : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic d_old : us_rep1

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant3(temp___expr_257: us_t, temp___is_init_253: bool,
  temp___skip_constant_254: bool, temp___do_toplevel_255: bool,
  temp___do_typ_inv_256: bool) = ((not (temp___skip_constant_254 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_257),
  last2(temp___expr_257)))

predicate dynamic_invariant4(temp___expr_277: int, temp___is_init_273: bool,
  temp___skip_constant_274: bool, temp___do_toplevel_275: bool,
  temp___do_typ_inv_276: bool) = (((temp___is_init_273 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_277))

logic rliteral : count_type

axiom rliteral_axiom : (count_typeqtint(rliteral) = 0)

axiom no_element__def_axiom : (no_element = { us_split_fields1 = {
  rec__replacement__inverse_sets__cursor__node = rliteral } })

logic length3 : us_rep1 -> int

logic length__function_guard1 : int, us_rep1 -> prop

axiom length__post_axiom :
  (forall container:us_rep1 [length3(container)].
  (length3(container) <= to_rep1(((container).us_split_discrs1).rec__replacement__inverse_sets__map__capacity)))

axiom length__post_axiom1 :
  (forall container:us_rep1 [length3(container)].
  dynamic_invariant4(length3(container), true, false, true, true))

function k_bigger_than_range(container: us_rep3, fst: int, lst: int,
  key1: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (get(container,
      i) <  key1))) then true else false)

logic k_bigger_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

function k_smaller_than_range(container: us_rep3, fst: int, lst: int,
  key1: int) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) -> (key1 <  get(container,
      i)))) then true else false)

logic k_smaller_than_range__function_guard : bool, us_rep3, int, int,
  int -> prop

function k_is_find(container: us_rep3, key1: int, position: int) : bool =
  andb((if (0 <  position) then k_bigger_than_range(container, 1,
  (position - 1), key1) else of_int(1)),
  (if (position <  length1(container)) then k_smaller_than_range(container,
  (position + 1), length1(container), key1) else of_int(1)))

logic k_is_find__function_guard : bool, us_rep3, int, int -> prop

axiom user_eq__def_axiom2 :
  (forall a1:us_rep3. forall b:us_rep3 [user_eq5(a1, b)]. (user_eq5(a1,
  b) = oeq(a1, b)))

predicate default_initial_assumption(temp___expr_358: us_rep3,
  temp___skip_top_level_359: bool) =
  ((not (temp___skip_top_level_359 = true)) ->
  (length1(temp___expr_358) = 0))

axiom find__post_axiom5 :
  (forall container:us_rep3.
  (forall key1:int [find(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> (let result = find(container, key1) : int in
  ((0 <  result) -> (result <= length1(container)))))))

axiom find__post_axiom6 :
  (forall container:us_rep3.
  (forall key1:int [find(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> (let result = find(container, key1) : int in
  ((0 <  result) -> (equivalent_keys(key1, get(container,
  result)) = true))))))

axiom find__post_axiom7 :
  (forall container:us_rep3.
  (forall key1:int [find(container, key1)]. (dynamic_invariant1(key1, true,
  true, true, true) -> dynamic_invariant4(find(container, key1), true, false,
  true, true))))

logic length4 : us_rep4 -> int

logic length__function_guard2 : int, us_rep4 -> prop

logic oeq3 : us_rep4, us_rep4 -> bool

logic oeq__function_guard3 : bool, us_rep4, us_rep4 -> prop

logic is_empty : us_rep4 -> bool

logic is_empty__function_guard : bool, us_rep4 -> prop

axiom user_eq__def_axiom3 :
  (forall a1:us_rep4. forall b:us_rep4 [user_eq7(a1, b)]. (user_eq7(a1,
  b) = oeq3(a1, b)))

predicate default_initial_assumption1(temp___expr_322: us_rep4,
  temp___skip_top_level_323: bool) =
  ((not (temp___skip_top_level_323 = true)) ->
  ((is_empty(temp___expr_322) = true) and (length4(temp___expr_322) = 0)))

function iter_has_element(container: us_rep3, position: int) : bool =
  andb((if (1 <= position) then true else false),
  (if (position <= last(container)) then true else false))

logic iter_has_element__function_guard : bool, us_rep3, int -> prop

type key_type1

logic key_typeqtint1 : key_type1 -> int

axiom key_typeqtaxiom2 :
  (forall i:key_type1. ((- 2147483648) <= key_typeqtint1(i)))

axiom key_typeqtaxiom3 :
  (forall i:key_type1. (key_typeqtint1(i) <= 2147483647))

predicate in_range6(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : key_type1, key_type1 -> bool

logic dummy11 : key_type1

type key_type__ref2 = { key_type__content2 : key_type1
}

function key_type__ref_key_type__content__2__projection(a1: key_type__ref2) : key_type1 =
  (a1).key_type__content2

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 2147483647))

predicate in_range7(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : extended_index, extended_index -> bool

logic dummy12 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__projection(a1: extended_index__ref) : extended_index =
  (a1).extended_index__content

axiom keys__post_axiom :
  (forall container:us_rep1 [keys(container)].
  (length1(keys(container)) = length3(container)))

axiom keys__post_axiom1 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep3 in
  (forall temp___430:int. ((in_range7(temp___430) and
  (iter_has_element(result, temp___430) = true)) ->
  (has_key1(model(container), get(result, temp___430)) = true)))))

axiom keys__post_axiom2 :
  (forall container:us_rep1 [keys(container)].
  (forall key1:int. ((in_range6(key1) and (has_key1(model(container),
  key1) = true)) -> (0 <  find(keys(container), key1)))))

axiom keys__post_axiom3 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep3 in
  (forall key1:int. ((in_range6(key1) and (has_key1(model(container),
  key1) = true)) -> (equivalent_keys(get(result, find(result, key1)),
  key1) = true)))))

axiom keys__post_axiom4 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep3 in
  (forall i:int. (((1 <= i) and (i <= length3(container))) -> (find(result,
  get(result, i)) = i)))))

axiom keys__post_axiom5 :
  (forall container:us_rep1 [keys(container)]. (let result = keys(container)
  : us_rep3 in
  (forall i:int. (((1 <= i) and (i <= length3(container))) ->
  (k_is_find(result, get(result, i), i) = true)))))

logic length5 : us_rep2 -> int

logic length__function_guard3 : int, us_rep2 -> prop

logic is_empty1 : us_rep2 -> bool

logic is_empty__function_guard1 : bool, us_rep2 -> prop

axiom user_eq__def_axiom4 :
  (forall a1:us_rep2. forall b:us_rep2 [user_eq4(a1, b)]. (user_eq4(a1,
  b) = oeq1(a1, b)))

predicate default_initial_assumption2(temp___expr_381: us_rep2,
  temp___skip_top_level_382: bool) =
  ((not (temp___skip_top_level_382 = true)) ->
  ((is_empty1(temp___expr_381) = true) and (length5(temp___expr_381) = 0)))

axiom positions__post_axiom :
  (forall container:us_rep1 [positions(container)].
  (not (has_key(positions(container), no_element) = true)))

axiom positions__post_axiom1 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep2 in
  (forall i:us_rep. ((has_key(result, i) = true) -> (1 <= get1(result, i))))))

axiom positions__post_axiom2 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep2 in
  (forall i:us_rep. ((has_key(result, i) = true) -> (get1(result,
  i) <= length3(container))))))

axiom positions__post_axiom3 :
  (forall container:us_rep1 [positions(container)]. (let result =
  positions(container) : us_rep2 in
  (forall i:us_rep. ((has_key(result, i) = true) ->
  (forall j:us_rep. ((has_key(result, j) = true) -> ((get1(result,
  i) = get1(result, j)) -> (bool_eq3(i, j) = true))))))))

axiom oeq__post_axiom :
  (forall left:us_rep1. forall right:us_rep1 [oeq2(left, right)].
  ((oeq2(left, right) = true) -> (oeq3(model(left), model(right)) = true)))

axiom oeq__post_axiom1 :
  (forall left:us_rep1. forall right:us_rep1 [oeq2(left, right)].
  ((oeq3(model(left), model(right)) = true) -> (oeq2(left, right) = true)))

predicate dynamic_invariant5(temp___expr_307: int, temp___is_init_303: bool,
  temp___skip_constant_304: bool, temp___do_toplevel_305: bool,
  temp___do_typ_inv_306: bool) = (((temp___is_init_303 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range6(temp___expr_307))

axiom has_key__post_axiom :
  (forall container:us_rep4.
  (forall key1:int [has_key1(container, key1)]. (dynamic_invariant5(key1,
  true, true, true, true) -> ((of_int(1) = true) ->
  ((exists k1:int. ((in_range6(k1) and (has_key1(container, k1) = true)) and
   (equivalent_keys(k1, key1) = true))) ->
  (has_key1(container, key1) = true))))))

logic witness : us_rep4, int -> int

logic witness__function_guard : int, us_rep4, int -> prop

logic w_get : us_rep4, int -> int

logic w_get__function_guard : int, us_rep4, int -> prop

type element_type1

logic element_typeqtint1 : element_type1 -> int

axiom element_typeqtaxiom2 :
  (forall i:element_type1. ((- 2147483648) <= element_typeqtint1(i)))

axiom element_typeqtaxiom3 :
  (forall i:element_type1. (element_typeqtint1(i) <= 2147483647))

predicate in_range8(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq13 : element_type1, element_type1 -> bool

logic dummy13 : element_type1

type element_type__ref1 = { element_type__content1 : element_type1
}

function element_type__ref_element_type__content__2__projection(a1: element_type__ref1) : element_type1 =
  (a1).element_type__content1

predicate dynamic_invariant6(temp___expr_314: int, temp___is_init_310: bool,
  temp___skip_constant_311: bool, temp___do_toplevel_312: bool,
  temp___do_typ_inv_313: bool) = (((temp___is_init_310 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range8(temp___expr_314))

axiom get__post_axiom :
  (forall container:us_rep4.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant5(key1, true,
  true, true, true) and (has_key1(container, key1) = true)) ->
  ((of_int(1) = true) -> (get2(container, key1) = w_get(container,
  witness(container, key1)))))))

axiom get__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant5(key1, true,
  true, true, true) and (has_key1(container, key1) = true)) ->
  ((of_int(1) = true) ->
  (forall k1:int. ((in_range6(k1) and (has_key1(container, k1) = true)) ->
  ((equivalent_keys(k1, key1) = true) -> (witness(container,
  key1) = witness(container, k1)))))))))

axiom get__post_axiom2 :
  (forall container:us_rep4.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant5(key1, true,
  true, true, true) and (has_key1(container, key1) = true)) ->
  ((of_int(1) = true) ->
  (forall k1:int. ((in_range6(k1) and (has_key1(container, k1) = true)) ->
  ((witness(container, key1) = witness(container, k1)) ->
  (equivalent_keys(k1, key1) = true))))))))

axiom get__post_axiom3 :
  (forall container:us_rep4.
  (forall key1:int [get2(container, key1)]. ((dynamic_invariant5(key1, true,
  true, true, true) and (has_key1(container, key1) = true)) ->
  dynamic_invariant6(get2(container, key1), true, false, true, true))))

axiom length__post_axiom2 :
  (forall container:us_rep4 [length4(container)].
  dynamic_invariant4(length4(container), true, false, true, true))

axiom oeq__post_axiom2 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) ->
  (forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
  (has_key1(right, key1) = true)))))

axiom oeq__post_axiom3 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) ->
  (forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
  (get2(right, key1) = get2(left, key1))))))

axiom oeq__post_axiom4 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  ((oeq3(left, right) = true) ->
  (forall key1:int. ((in_range6(key1) and (has_key1(right, key1) = true)) ->
  (has_key1(left, key1) = true)))))

axiom oeq__post_axiom5 :
  (forall left:us_rep4. forall right:us_rep4 [oeq3(left, right)].
  (((forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
    ((has_key1(right, key1) = true) and (get2(right, key1) = get2(left,
    key1))))) and
  (forall key1:int. ((in_range6(key1) and (has_key1(right, key1) = true)) ->
  (has_key1(left, key1) = true)))) -> (oeq3(left, right) = true)))

axiom is_empty__post_axiom :
  (forall container:us_rep4 [is_empty(container)].
  ((is_empty(container) = true) ->
  (forall key1:int. (not (in_range6(key1) and (has_key1(container,
  key1) = true))))))

axiom is_empty__post_axiom1 :
  (forall container:us_rep4 [is_empty(container)].
  ((forall key1:int. (not (in_range6(key1) and (has_key1(container,
   key1) = true)))) ->
  (is_empty(container) = true)))

axiom keys_included__post_axiom :
  (forall left:us_rep4. forall right:us_rep4 [keys_included(left, right)].
  ((keys_included(left, right) = true) ->
  (forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
  (has_key1(right, key1) = true)))))

axiom keys_included__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4 [keys_included(left, right)].
  ((forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
   (has_key1(right, key1) = true))) ->
  (keys_included(left, right) = true)))

axiom elements_equal_except__post_axiom :
  (forall left:us_rep4. forall right:us_rep4.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (dynamic_invariant5(new_key, true, true, true, true) ->
  ((elements_equal_except(left, right, new_key) = true) ->
  (forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
  ((not (equivalent_keys(key1, new_key) = true)) -> (has_key1(right,
  key1) = true))))))))

axiom elements_equal_except__post_axiom1 :
  (forall left:us_rep4. forall right:us_rep4.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (dynamic_invariant5(new_key, true, true, true, true) ->
  ((elements_equal_except(left, right, new_key) = true) ->
  (forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
  ((not (equivalent_keys(key1, new_key) = true)) -> (get2(left,
  key1) = get2(right, key1)))))))))

axiom elements_equal_except__post_axiom2 :
  (forall left:us_rep4. forall right:us_rep4.
  (forall new_key:int [elements_equal_except(left, right, new_key)].
  (dynamic_invariant5(new_key, true, true, true, true) ->
  ((forall key1:int. ((in_range6(key1) and (has_key1(left, key1) = true)) ->
   ((not (equivalent_keys(key1, new_key) = true)) -> ((has_key1(right,
   key1) = true) and (get2(left, key1) = get2(right, key1)))))) ->
  (elements_equal_except(left, right, new_key) = true)))))

logic has_witness : us_rep4, int -> bool

logic has_witness__function_guard : bool, us_rep4, int -> prop

axiom witness__post_axiom :
  (forall container:us_rep4.
  (forall key1:int [witness(container, key1)]. ((dynamic_invariant5(key1,
  true, true, true, true) and (has_key1(container, key1) = true)) ->
  (has_witness(container, witness(container, key1)) = true))))

axiom witness__post_axiom1 :
  (forall container:us_rep4.
  (forall key1:int [witness(container, key1)]. ((dynamic_invariant5(key1,
  true, true, true, true) and (has_key1(container, key1) = true)) ->
  dynamic_invariant4(witness(container, key1), true, false, true, true))))

axiom w_get__post_axiom :
  (forall container:us_rep4.
  (forall witness1:int [w_get(container, witness1)].
  ((dynamic_invariant4(witness1, true, true, true, true) and
  (has_witness(container, witness1) = true)) ->
  dynamic_invariant6(w_get(container, witness1), true, false, true, true))))

predicate dynamic_invariant7(temp___expr_350: int, temp___is_init_346: bool,
  temp___skip_constant_347: bool, temp___do_toplevel_348: bool,
  temp___do_typ_inv_349: bool) = (((temp___is_init_346 = true) or
  (0 <= 2147483647)) -> in_range7(temp___expr_350))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length1(container)].
  ((0 + length1(container)) <= 2147483647))

axiom length__post_axiom4 :
  (forall container:us_rep3 [length1(container)].
  dynamic_invariant4(length1(container), true, false, true, true))

type element_type2

logic element_typeqtint2 : element_type2 -> int

axiom element_typeqtaxiom4 :
  (forall i:element_type2. ((- 2147483648) <= element_typeqtint2(i)))

axiom element_typeqtaxiom5 :
  (forall i:element_type2. (element_typeqtint2(i) <= 2147483647))

predicate in_range9(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq14 : element_type2, element_type2 -> bool

logic dummy14 : element_type2

type element_type__ref2 = { element_type__content2 : element_type2
}

function element_type__ref_element_type__content__3__projection(a1: element_type__ref2) : element_type2 =
  (a1).element_type__content2

predicate dynamic_invariant8(temp___expr_343: int, temp___is_init_339: bool,
  temp___skip_constant_340: bool, temp___do_toplevel_341: bool,
  temp___do_typ_inv_342: bool) = (((temp___is_init_339 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range9(temp___expr_343))

axiom get__post_axiom4 :
  (forall container:us_rep3.
  (forall position:int [get(container, position)].
  ((dynamic_invariant7(position, true, true, true, true) and
  ((1 <= position) and (position <= last(container)))) ->
  dynamic_invariant8(get(container, position), true, false, true, true))))

axiom has_key__post_axiom1 :
  (forall container:us_rep2.
  (forall key1:us_rep [has_key(container, key1)]. ((of_int(0) = true) ->
  ((exists k1:us_rep. ((has_key(container, k1) = true) and (bool_eq3(k1,
   key1) = true))) ->
  (has_key(container, key1) = true)))))

logic witness1 : us_rep2, us_rep -> int

logic witness__function_guard1 : int, us_rep2, us_rep -> prop

logic w_get1 : us_rep2, int -> int

logic w_get__function_guard1 : int, us_rep2, int -> prop

type element_type3

logic element_typeqtint3 : element_type3 -> int

axiom element_typeqtaxiom6 :
  (forall i:element_type3. (1 <= element_typeqtint3(i)))

axiom element_typeqtaxiom7 :
  (forall i:element_type3. (element_typeqtint3(i) <= 2147483647))

predicate in_range10(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq15 : element_type3, element_type3 -> bool

logic dummy15 : element_type3

type element_type__ref3 = { element_type__content3 : element_type3
}

function element_type__ref_element_type__content__4__projection(a1: element_type__ref3) : element_type3 =
  (a1).element_type__content3

predicate dynamic_invariant9(temp___expr_373: int, temp___is_init_369: bool,
  temp___skip_constant_370: bool, temp___do_toplevel_371: bool,
  temp___do_typ_inv_372: bool) = (((temp___is_init_369 = true) or
  (1 <= 2147483647)) -> in_range10(temp___expr_373))

axiom get__post_axiom5 :
  (forall container:us_rep2.
  (forall key1:us_rep [get1(container, key1)]. ((has_key(container,
  key1) = true) -> ((of_int(0) = true) -> (get1(container,
  key1) = w_get1(container, witness1(container, key1)))))))

axiom get__post_axiom6 :
  (forall container:us_rep2.
  (forall key1:us_rep [get1(container, key1)]. ((has_key(container,
  key1) = true) -> ((of_int(0) = true) ->
  (forall k1:us_rep. ((has_key(container, k1) = true) -> ((bool_eq3(k1,
  key1) = true) -> (witness1(container, key1) = witness1(container, k1)))))))))

axiom get__post_axiom7 :
  (forall container:us_rep2.
  (forall key1:us_rep [get1(container, key1)]. ((has_key(container,
  key1) = true) -> ((of_int(0) = true) ->
  (forall k1:us_rep. ((has_key(container, k1) = true) ->
  ((witness1(container, key1) = witness1(container, k1)) -> (bool_eq3(k1,
  key1) = true))))))))

axiom get__post_axiom8 :
  (forall container:us_rep2.
  (forall key1:us_rep [get1(container, key1)]. ((has_key(container,
  key1) = true) -> dynamic_invariant9(get1(container, key1), true, false,
  true, true))))

axiom length__post_axiom5 :
  (forall container:us_rep2 [length5(container)].
  dynamic_invariant4(length5(container), true, false, true, true))

axiom oeq__post_axiom6 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) ->
  (forall key1:us_rep. ((has_key(left, key1) = true) -> (has_key(right,
  key1) = true)))))

axiom oeq__post_axiom7 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) ->
  (forall key1:us_rep. ((has_key(left, key1) = true) -> (get1(right,
  key1) = get1(left, key1))))))

axiom oeq__post_axiom8 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  ((oeq1(left, right) = true) ->
  (forall key1:us_rep. ((has_key(right, key1) = true) -> (has_key(left,
  key1) = true)))))

axiom oeq__post_axiom9 :
  (forall left:us_rep2. forall right:us_rep2 [oeq1(left, right)].
  (((forall key1:us_rep. ((has_key(left, key1) = true) -> ((has_key(right,
    key1) = true) and (get1(right, key1) = get1(left, key1))))) and
  (forall key1:us_rep. ((has_key(right, key1) = true) -> (has_key(left,
  key1) = true)))) -> (oeq1(left, right) = true)))

axiom is_empty__post_axiom2 :
  (forall container:us_rep2 [is_empty1(container)].
  ((is_empty1(container) = true) ->
  (forall key1:us_rep. (not (has_key(container, key1) = true)))))

axiom is_empty__post_axiom3 :
  (forall container:us_rep2 [is_empty1(container)].
  ((forall key1:us_rep. (not (has_key(container, key1) = true))) ->
  (is_empty1(container) = true)))

logic has_witness1 : us_rep2, int -> bool

logic has_witness__function_guard1 : bool, us_rep2, int -> prop

axiom witness__post_axiom2 :
  (forall container:us_rep2.
  (forall key1:us_rep [witness1(container, key1)]. ((has_key(container,
  key1) = true) -> (has_witness1(container, witness1(container,
  key1)) = true))))

axiom witness__post_axiom3 :
  (forall container:us_rep2.
  (forall key1:us_rep [witness1(container, key1)]. ((has_key(container,
  key1) = true) -> dynamic_invariant4(witness1(container, key1), true, false,
  true, true))))

axiom w_get__post_axiom1 :
  (forall container:us_rep2.
  (forall witness2:int [w_get1(container, witness2)].
  ((dynamic_invariant4(witness2, true, true, true, true) and
  (has_witness1(container, witness2) = true)) ->
  dynamic_invariant9(w_get1(container, witness2), true, false, true, true))))

 (* File "replacement.ads", line 15, characters 0-0 *)
goal defqtvc :
  (forall d__split_fields:us_main_type. (dynamic_invariant3(a, true, false,
  true, true) -> (dynamic_invariant(k, true, false, true, true) -> (let o = k
  : int in (let o1 = { us_split_discrs1 = d__split_discrs; us_split_fields3 =
  { rec__replacement__inverse_sets__map = d__split_fields } } : us_rep1 in
  (let o2 = contains(o1, o) : bool in (((o2 = true) <-> (has_key1(model(o1),
  o) = true)) -> ((o2 = true) -> (let temp___813 = { us_split_discrs1 =
  d__split_discrs; us_split_fields3 = { rec__replacement__inverse_sets__map =
  d__split_fields } } : us_rep1 in
  (forall usf:count_type. (let usf1 = { us_split_fields1 = {
  rec__replacement__inverse_sets__cursor__node = usf } } : us_rep in
  (let o3 = has_element(temp___813, usf1) : bool in (((o3 = true) <->
  (has_key(positions(temp___813), usf1) = true)) ->
  ((andb((if true then true else false), o3) = true) -> (let o4 = {
  us_split_discrs1 = d__split_discrs; us_split_fields3 = {
  rec__replacement__inverse_sets__map = d__split_fields } } : us_rep1 in
  (let o5 = key(o4, usf1) : int in ((dynamic_invariant1(o5, true, false,
  true, true) and (o5 = get(keys(o4), get1(positions(o4), usf1)))) ->
  (let o6 = { us_split_discrs1 = d__split_discrs; us_split_fields3 = {
  rec__replacement__inverse_sets__map = d__split_fields } } : us_rep1 in
  (let temp___814 = element(o6, usf1) : int in
  ((dynamic_invariant2(temp___814, true, false, true, true) and
  (temp___814 = get2(model(o6), key(o6, usf1)))) ->
  (first1(a) <= temp___814)))))))))))))))))))))
