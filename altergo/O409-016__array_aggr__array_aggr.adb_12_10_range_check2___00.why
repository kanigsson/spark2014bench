(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

logic one : int

logic attr__ATTRIBUTE_ADDRESS : int

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map

type map__ref = { map__content : map
}

logic get : map, int, int -> natural

logic set : map, int, int, natural -> map

axiom Select_eq :
  (forall m:map.
  (forall i:int.
  (forall j:int.
  (forall a:natural [set(m, i, j, a)]. (get(set(m, i, j, a), i, j) = a)))))

axiom Select_neq :
  (forall m:map.
  (forall i:int. forall i2:int.
  (forall j:int. forall j2:int.
  (forall a:natural [get(set(m, i, j, a), i2, j2)| set(m, i, j, a), get(m,
  i2, j2)]. ((not ((i = i2) and (j = j2))) -> (get(set(m, i, j, a), i2,
  j2) = get(m, i2, j2)))))))

logic slide : map, int, int, int, int -> map

axiom slide_def :
  (forall a:map.
  (forall new_first:int. forall old_first:int.
  (forall new_first_2:int. forall old_first_2:int.
  (forall i:int.
  (forall j:int [get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j)]. (get(slide(a, old_first, new_first, old_first_2,
  new_first_2), i, j) = get(a, (i - (new_first - old_first)),
  (j - (new_first_2 - old_first_2)))))))))

function bool_eq2(a: map, a__first: int, a__last: int, a__first_2: int,
  a__last_2: int, b: map, b__first: int, b__last: int, b__first_2: int,
  b__last_2: int) : bool =
  (if (((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (if (a__first_2 <= a__last_2) then ((b__first_2 <= b__last_2) and
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))) else (b__last_2 <  b__first_2))) and
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_154, temp___idx_155)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155))))))) then true else false)

axiom bool_eq_rev :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  (b__first_2 <= b__last_2)))))

axiom bool_eq_rev4 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((a__first_2 <= a__last_2) ->
  ((a__last_2 - a__first_2) = (b__last_2 - b__first_2))))))

axiom bool_eq_rev5 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) -> ((not (a__first_2 <= a__last_2)) ->
  (b__last_2 <  b__first_2)))))

axiom bool_eq_rev6 :
  (forall a:map. forall b:map.
  (forall a__first:int. forall a__last:int. forall a__first_2:int.
  forall a__last_2:int. forall b__first:int. forall b__last:int.
  forall b__first_2:int. forall b__last_2:int. ((bool_eq2(b, b__first,
  b__last, b__first_2, b__last_2, a, a__first, a__last, a__first_2,
  a__last_2) = true) ->
  (forall temp___idx_154:int. forall temp___idx_155:int.
  ((((a__first <= temp___idx_154) and (temp___idx_154 <= a__last)) and
  ((a__first_2 <= temp___idx_155) and (temp___idx_155 <= a__last_2))) ->
  (to_rep(get(a, temp___idx_154, temp___idx_155)) = to_rep(get(b,
  ((b__first - a__first) + temp___idx_154),
  ((b__first_2 - a__first_2) + temp___idx_155)))))))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

logic first : int

predicate dynamic_property(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type my_positive__ref = { my_positive__content : integer
}

function my_positive__ref_my_positive__content__projection(a: my_positive__ref) : integer =
  (a).my_positive__content

type tTdSP1

logic tTdSP1qtint : tTdSP1 -> int

axiom tTdSP1qtaxiom : (forall i:tTdSP1. (1 <= tTdSP1qtint(i)))

axiom tTdSP1qtaxiom1 : (forall i:tTdSP1. (tTdSP1qtint(i) <= 2))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : tTdSP1, tTdSP1 -> bool

logic dummy3 : tTdSP1

type tTdSP1__ref = { tTdSP1__content : tTdSP1
}

function tTdSP1__ref_tTdSP1__content__projection(a: tTdSP1__ref) : tTdSP1 =
  (a).tTdSP1__content

type tTdSP2

logic tTdSP2qtint : tTdSP2 -> int

axiom tTdSP2qtaxiom : (forall i:tTdSP2. (1 <= tTdSP2qtint(i)))

axiom tTdSP2qtaxiom1 : (forall i:tTdSP2. (tTdSP2qtint(i) <= 2))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : tTdSP2, tTdSP2 -> bool

logic dummy4 : tTdSP2

type tTdSP2__ref = { tTdSP2__content : tTdSP2
}

function tTdSP2__ref_tTdSP2__content__projection(a: tTdSP2__ref) : tTdSP2 =
  (a).tTdSP2__content

type t8b

logic t8bqtint : t8b -> int

axiom t8bqtaxiom : (forall i:t8b. (0 <= t8bqtint(i)))

axiom t8bqtaxiom1 : (forall i:t8b. (t8bqtint(i) <= 1))

predicate in_range5(x: int) = ((0 <= x) and (x <= 1))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : t8b, t8b -> bool

logic dummy5 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : t8b =
  (a).t8b__content

type t9b

logic t9bqtint : t9b -> int

axiom t9bqtaxiom : (forall i:t9b. (3 <= t9bqtint(i)))

axiom t9bqtaxiom1 : (forall i:t9b. (t9bqtint(i) <= 4))

predicate in_range6(x: int) = ((3 <= x) and (x <= 4))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : t9b, t9b -> bool

logic dummy6 : t9b

type t9b__ref = { t9b__content : t9b
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : t9b =
  (a).t9b__content

type tTeSP1

logic tTeSP1qtint : tTeSP1 -> int

axiom tTeSP1qtaxiom : (forall i:tTeSP1. (1 <= tTeSP1qtint(i)))

axiom tTeSP1qtaxiom1 : (forall i:tTeSP1. (tTeSP1qtint(i) <= 2))

predicate in_range7(x: int) = ((1 <= x) and (x <= 2))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq7 : tTeSP1, tTeSP1 -> bool

logic dummy7 : tTeSP1

type tTeSP1__ref = { tTeSP1__content : tTeSP1
}

function tTeSP1__ref_tTeSP1__content__projection(a: tTeSP1__ref) : tTeSP1 =
  (a).tTeSP1__content

type tTeSP2

logic tTeSP2qtint : tTeSP2 -> int

axiom tTeSP2qtaxiom : (forall i:tTeSP2. (1 <= tTeSP2qtint(i)))

axiom tTeSP2qtaxiom1 : (forall i:tTeSP2. (tTeSP2qtint(i) <= 2))

predicate in_range8(x: int) = ((1 <= x) and (x <= 2))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq8 : tTeSP2, tTeSP2 -> bool

logic dummy8 : tTeSP2

type tTeSP2__ref = { tTeSP2__content : tTeSP2
}

function tTeSP2__ref_tTeSP2__content__projection(a: tTeSP2__ref) : tTeSP2 =
  (a).tTeSP2__content

type t11b

logic t11bqtint : t11b -> int

axiom t11bqtaxiom : (forall i:t11b. (3 <= t11bqtint(i)))

axiom t11bqtaxiom1 : (forall i:t11b. (t11bqtint(i) <= 4))

predicate in_range9(x: int) = ((3 <= x) and (x <= 4))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq9 : t11b, t11b -> bool

logic dummy9 : t11b

type t11b__ref = { t11b__content : t11b
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : t11b =
  (a).t11b__content

type t12b

logic t12bqtint : t12b -> int

axiom t12bqtaxiom : (forall i:t12b. (0 <= t12bqtint(i)))

axiom t12bqtaxiom1 : (forall i:t12b. (t12bqtint(i) <= 1))

predicate in_range10(x: int) = ((0 <= x) and (x <= 1))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE11 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check11 : us_image -> prop

logic attr__ATTRIBUTE_VALUE11 : us_image -> int

logic user_eq10 : t12b, t12b -> bool

logic dummy10 : t12b

type t12b__ref = { t12b__content : t12b
}

function t12b__ref_t12b__content__projection(a: t12b__ref) : t12b =
  (a).t12b__content

logic array_aggr__bi_dim_aggr_ok__aggregate_ko1__d__aggregate_def : int -> map

logic array_aggr__bi_dim_aggr_ok__aggregate_ko1__e__aggregate_def : int -> map

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_18))

predicate dynamic_invariant2(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (first <= 2147483647)) -> dynamic_property(first, 2147483647,
  temp___expr_160))

axiom first__def_axiom : (first = one)

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___305:int. (dynamic_invariant(temp___305, true, true, true,
  true) ->
  (forall temp___306:int. forall temp___307:int.
  (get(array_aggr__bi_dim_aggr_ok__aggregate_ko1__d__aggregate_def(temp___305),
  temp___306, temp___307) = rliteral))))

axiom def_axiom1 :
  (forall temp___310:int. (dynamic_invariant(temp___310, true, true, true,
  true) ->
  (forall temp___311:int. forall temp___312:int.
  (get(array_aggr__bi_dim_aggr_ok__aggregate_ko1__e__aggregate_def(temp___310),
  temp___311, temp___312) = rliteral))))

 (* File "array_aggr.adb", line 10, characters 0-0 *)
goal defqtvc : (dynamic_invariant(one, true, false, true, true) ->
  (dynamic_invariant(one, true, false, true, true) -> ((one <= 1) ->
  (forall d:map.
  ((d = slide(array_aggr__bi_dim_aggr_ok__aggregate_ko1__d__aggregate_def(0),
  0, 1, 3, 1)) -> ((1 <= 2) -> (first <= 1)))))))
