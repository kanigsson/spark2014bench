(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type tarray_tD1

logic tarray_tD1qtint : tarray_tD1 -> int

axiom tarray_tD1qtaxiom : (forall i:tarray_tD1. (1 <= tarray_tD1qtint(i)))

axiom tarray_tD1qtaxiom1 : (forall i:tarray_tD1. (tarray_tD1qtint(i) <= 10))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : tarray_tD1, tarray_tD1 -> bool

logic dummy2 : tarray_tD1

type tarray_tD1__ref = { tarray_tD1__content : tarray_tD1
}

function tarray_tD1__ref_tarray_tD1__content__projection(a: tarray_tD1__ref) : tarray_tD1 =
  (a).tarray_tD1__content

type t8b

logic t8bqtint : t8b -> int

axiom t8bqtaxiom : (forall i:t8b. (1 <= t8bqtint(i)))

axiom t8bqtaxiom1 : (forall i:t8b. (t8bqtint(i) <= 10))

predicate in_range4(x: int) = ((1 <= x) and (x <= 10))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : t8b, t8b -> bool

logic dummy3 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : t8b =
  (a).t8b__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "loop_related_legal.adb", line 5, characters 0-0 *)
goal defqtvc :
  (forall arr:(int,natural) farray.
  (forall n:int. ((n = 1) -> ((andb((if (1 <= n) then true else false),
  (if (n <= 10) then true else false)) = true) ->
  (forall temp___loop_entry_171:(int,natural) farray.
  ((temp___loop_entry_171 = arr) ->
  (forall spark__branch:bool. forall arr1:(int,natural) farray.
  ((exists o:int. ((to_rep((arr[n])) = o) and
   ((spark__branch = (if (o <  2147483647) then true else false)) and
   (if (spark__branch = true) then (exists o1:int.
                                   ((to_rep((arr[n])) = o1) and (let o2 =
                                   (o1 + 1) : int in (in_range1(o2) and
                                   (exists o3:natural. ((to_rep(o3) = o2) and
                                   (arr1 = (arr[n <- o3])))))))) else (arr1 = arr))))) ->
  (forall arr2:(int,natural) farray. forall n1:int.
  ((forall i:int. (((1 <= i) and (i <= 10)) ->
   (to_rep((temp___loop_entry_171[i])) <= to_rep((arr2[i]))))) ->
  ((andb((if ((forall temp___168:int. (((1 <= temp___168) and
              (temp___168 <= 10)) -> (((10 <  temp___168) or
              ((temp___168 <  1) or (n1 <  temp___168))) ->
              ((arr2[temp___168]) = (arr[temp___168]))))) and
  in_range4(n1)) then true else false), (if ((1 <= n1) and
  (n1 <= 10)) then true else false)) = true) -> ((not (n1 = 10)) ->
  (forall n2:int. ((n2 = (n1 + 1)) ->
  (forall arr3:(int,natural) farray.
  ((exists o:int. ((to_rep((arr2[n2])) = o) and
   (exists spark__branch1:bool.
   ((spark__branch1 = (if (o <  2147483647) then true else false)) and
   (if (spark__branch1 = true) then (exists o1:int.
                                    ((to_rep((arr2[n2])) = o1) and (let o2 =
                                    (o1 + 1) : int in (in_range1(o2) and
                                    (exists o3:natural.
                                    ((to_rep(o3) = o2) and
                                    (arr3 = (arr2[n2 <- o3])))))))) else (arr3 = arr2)))))) ->
  (forall i:int. (((1 <= i) and (i <= 10)) ->
  (to_rep((temp___loop_entry_171[i])) <= to_rep((arr3[i])))))))))))))))))))))
