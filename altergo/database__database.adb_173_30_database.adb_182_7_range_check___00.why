(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type ext_account_num

logic ext_account_numqtint : ext_account_num -> int

axiom ext_account_numqtaxiom :
  (forall i:ext_account_num. (0 <= ext_account_numqtint(i)))

axiom ext_account_numqtaxiom1 :
  (forall i:ext_account_num. (ext_account_numqtint(i) <= 200000))

predicate in_range1(x: int) = ((0 <= x) and (x <= 200000))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : ext_account_num, ext_account_num -> bool

logic dummy : ext_account_num

type ext_account_num__ref = { ext_account_num__content : ext_account_num
}

function ext_account_num__ref_ext_account_num__content__projection(a: ext_account_num__ref) : ext_account_num =
  (a).ext_account_num__content

function to_rep(x: ext_account_num) : int = ext_account_numqtint(x)

logic of_rep : int -> ext_account_num

axiom inversion_axiom :
  (forall x:ext_account_num [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:ext_account_num [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__database__availability__account_link__available
: bool; rec__database__availability__account_link__prev : ext_account_num;
rec__database__availability__account_link__next : ext_account_num
}

function us_split_fields_rec__database__availability__account_link__available__projection(a: us_split_fields) : bool =
  (a).rec__database__availability__account_link__available

function us_split_fields_rec__database__availability__account_link__prev__projection(a: us_split_fields) : ext_account_num =
  (a).rec__database__availability__account_link__prev

function us_split_fields_rec__database__availability__account_link__next__projection(a: us_split_fields) : ext_account_num =
  (a).rec__database__availability__account_link__next

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (((to_int(((a).us_split_fields1).rec__database__availability__account_link__available) = to_int(((b).us_split_fields1).rec__database__availability__account_link__available)) and
  (to_rep(((a).us_split_fields1).rec__database__availability__account_link__prev) = to_rep(((b).us_split_fields1).rec__database__availability__account_link__prev))) and
  (to_rep(((a).us_split_fields1).rec__database__availability__account_link__next) = to_rep(((b).us_split_fields1).rec__database__availability__account_link__next))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic database__availability__account_link__available__first__bit : int

logic database__availability__account_link__available__last__bit : int

logic database__availability__account_link__available__position : int

axiom database__availability__account_link__available__first__bit_axiom :
  (0 <= database__availability__account_link__available__first__bit)

axiom database__availability__account_link__available__last__bit_axiom :
  (database__availability__account_link__available__first__bit <  database__availability__account_link__available__last__bit)

axiom database__availability__account_link__available__position_axiom :
  (0 <= database__availability__account_link__available__position)

logic database__availability__account_link__prev__first__bit : int

logic database__availability__account_link__prev__last__bit : int

logic database__availability__account_link__prev__position : int

axiom database__availability__account_link__prev__first__bit_axiom :
  (0 <= database__availability__account_link__prev__first__bit)

axiom database__availability__account_link__prev__last__bit_axiom :
  (database__availability__account_link__prev__first__bit <  database__availability__account_link__prev__last__bit)

axiom database__availability__account_link__prev__position_axiom :
  (0 <= database__availability__account_link__prev__position)

logic database__availability__account_link__next__first__bit : int

logic database__availability__account_link__next__last__bit : int

logic database__availability__account_link__next__position : int

axiom database__availability__account_link__next__first__bit_axiom :
  (0 <= database__availability__account_link__next__first__bit)

axiom database__availability__account_link__next__last__bit_axiom :
  (database__availability__account_link__next__first__bit <  database__availability__account_link__next__last__bit)

axiom database__availability__account_link__next__position_axiom :
  (0 <= database__availability__account_link__next__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type account_link__ref = { account_link__content : us_rep
}

function account_link__ref_account_link__content__projection(a: account_link__ref) : us_rep =
  (a).account_link__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq3((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic no_account_link : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

predicate dynamic_invariant(temp___expr_182: int, temp___is_init_178: bool,
  temp___skip_constant_179: bool, temp___do_toplevel_180: bool,
  temp___do_typ_inv_181: bool) = (((temp___is_init_178 = true) or
  (0 <= 200000)) -> in_range1(temp___expr_182))

type account_num

logic account_numqtint : account_num -> int

axiom account_numqtaxiom : (forall i:account_num. (1 <= account_numqtint(i)))

axiom account_numqtaxiom1 :
  (forall i:account_num. (account_numqtint(i) <= 200000))

predicate in_range2(x: int) = ((1 <= x) and (x <= 200000))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : account_num, account_num -> bool

logic dummy2 : account_num

type account_num__ref = { account_num__content : account_num
}

function account_num__ref_account_num__content__projection(a: account_num__ref) : account_num =
  (a).account_num__content

logic rliteral : ext_account_num

axiom rliteral_axiom : (ext_account_numqtint(rliteral) = 0)

axiom no_account_link__def_axiom : (no_account_link = { us_split_fields1 = {
  rec__database__availability__account_link__available = of_int(0);
  rec__database__availability__account_link__prev = rliteral;
  rec__database__availability__account_link__next = rliteral } })

predicate dynamic_invariant1(temp___expr_189: int, temp___is_init_185: bool,
  temp___skip_constant_186: bool, temp___do_toplevel_187: bool,
  temp___do_typ_inv_188: bool) = (((temp___is_init_185 = true) or
  (1 <= 200000)) -> in_range2(temp___expr_189))

 (* File "database.adb", line 25, characters 0-0 *)
goal defqtvc :
  (forall links:(int,us_rep) farray. forall tmp_prev:int.
  forall tmp_next:int. (({ us_split_fields1 = {
  rec__database__availability__account_link__available = of_int(0);
  rec__database__availability__account_link__prev = rliteral;
  rec__database__availability__account_link__next = rliteral }
  } = no_account_link) ->
  (forall first_available:int. ((first_available = 1) ->
  (dynamic_invariant(first_available, true, false, true, true) ->
  (dynamic_invariant(tmp_prev, false, false, true, true) ->
  (dynamic_invariant(tmp_next, false, false, true, true) ->
  (forall i:int. ((i = 1) -> ((andb((if (1 <= i) then true else false),
  (if (i <= 200000) then true else false)) = true) ->
  (forall links1:(int,us_rep) farray. forall tmp_prev1:int.
  forall tmp_next1:int. forall i1:int.
  ((andb((if ((dynamic_invariant(tmp_prev1, false, true, true, true) and
  dynamic_invariant(tmp_next1, false, true, true, true)) and
  (forall temp___562:int. (((1 <= temp___562) and (temp___562 <= 200000)) ->
  (((200000 <  temp___562) or ((temp___562 <  1) or (i1 <= temp___562))) ->
  ((links1[temp___562]) = (links[temp___562])))))) then true else false),
  (if ((1 <= i1) and (i1 <= 200000)) then true else false)) = true) ->
  (forall spark__branch:bool. forall tmp_prev2:int.
  (((spark__branch = (if (i1 = 1) then true else false)) and
  (if (spark__branch = true) then (tmp_prev2 = 0) else (tmp_prev2 = (i1 - 1)))) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (i1 = 200000) then true else false)) ->
  ((not (spark__branch1 = true)) -> in_range1((i1 + 1)))))))))))))))))))
