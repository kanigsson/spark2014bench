(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq3(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range3(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE3 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> bool

type us_split_fields = { rec__types_with_invariants_auto__my_integer__sign :
bool; rec__types_with_invariants_auto__my_integer__val : natural
}

function us_split_fields_rec__types_with_invariants_auto__my_integer__sign__projection(a: us_split_fields) : bool =
  (a).rec__types_with_invariants_auto__my_integer__sign

function us_split_fields_rec__types_with_invariants_auto__my_integer__val__projection(a: us_split_fields) : natural =
  (a).rec__types_with_invariants_auto__my_integer__val

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq4(a: us_rep, b: us_rep) : bool =
  (if ((to_int(((a).us_split_fields1).rec__types_with_invariants_auto__my_integer__sign) = to_int(((b).us_split_fields1).rec__types_with_invariants_auto__my_integer__sign)) and
  (to_rep(((a).us_split_fields1).rec__types_with_invariants_auto__my_integer__val) = to_rep(((b).us_split_fields1).rec__types_with_invariants_auto__my_integer__val))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic types_with_invariants_auto__my_integer__sign__first__bit : int

logic types_with_invariants_auto__my_integer__sign__last__bit : int

logic types_with_invariants_auto__my_integer__sign__position : int

axiom types_with_invariants_auto__my_integer__sign__first__bit_axiom :
  (0 <= types_with_invariants_auto__my_integer__sign__first__bit)

axiom types_with_invariants_auto__my_integer__sign__last__bit_axiom :
  (types_with_invariants_auto__my_integer__sign__first__bit <  types_with_invariants_auto__my_integer__sign__last__bit)

axiom types_with_invariants_auto__my_integer__sign__position_axiom :
  (0 <= types_with_invariants_auto__my_integer__sign__position)

logic types_with_invariants_auto__my_integer__val__first__bit : int

logic types_with_invariants_auto__my_integer__val__last__bit : int

logic types_with_invariants_auto__my_integer__val__position : int

axiom types_with_invariants_auto__my_integer__val__first__bit_axiom :
  (0 <= types_with_invariants_auto__my_integer__val__first__bit)

axiom types_with_invariants_auto__my_integer__val__last__bit_axiom :
  (types_with_invariants_auto__my_integer__val__first__bit <  types_with_invariants_auto__my_integer__val__last__bit)

axiom types_with_invariants_auto__my_integer__val__position_axiom :
  (0 <= types_with_invariants_auto__my_integer__val__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type my_integer__ref = { my_integer__content : us_rep
}

function my_integer__ref_my_integer__content__projection(a: my_integer__ref) : us_rep =
  (a).my_integer__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq4((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,us_rep) farray; rt : t
}

function to_array(a: us_t) : (int,us_rep) farray = (a).elts

function of_array(a: (int,us_rep) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type my_array__ref = { my_array__content : us_t
}

function my_array__ref_my_array__content__projection(a: my_array__ref) : us_t =
  (a).my_array__content

type t8s__ref = { t8s__content : us_t
}

function t8s__ref_t8s__content__projection(a: t8s__ref) : us_t =
  (a).t8s__content

type us_split_discrs = { rec__use_types_with_invariants_auto__container__c :
natural
}

function us_split_discrs_rec__use_types_with_invariants_auto__container__c__projection(a: us_split_discrs) : natural =
  (a).rec__use_types_with_invariants_auto__container__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields2 = {
rec__use_types_with_invariants_auto__container__content : us_t
}

function us_split_fields_rec__use_types_with_invariants_auto__container__content__projection(a: us_split_fields2) : us_t =
  (a).rec__use_types_with_invariants_auto__container__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs1 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__use_types_with_invariants_auto__container__c) = to_rep(((b).us_split_discrs1).rec__use_types_with_invariants_auto__container__c)) and
  (bool_eq6(((a).us_split_fields3).rec__use_types_with_invariants_auto__container__content,
  ((b).us_split_fields3).rec__use_types_with_invariants_auto__container__content) = true)) then true else false)

predicate in_range4(rec__use_types_with_invariants_auto__container__c1: int,
  a: us_split_discrs) =
  (rec__use_types_with_invariants_auto__container__c1 = to_rep((a).rec__use_types_with_invariants_auto__container__c))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic use_types_with_invariants_auto__container__c__first__bit : int

logic use_types_with_invariants_auto__container__c__last__bit : int

logic use_types_with_invariants_auto__container__c__position : int

axiom use_types_with_invariants_auto__container__c__first__bit_axiom :
  (0 <= use_types_with_invariants_auto__container__c__first__bit)

axiom use_types_with_invariants_auto__container__c__last__bit_axiom :
  (use_types_with_invariants_auto__container__c__first__bit <  use_types_with_invariants_auto__container__c__last__bit)

axiom use_types_with_invariants_auto__container__c__position_axiom :
  (0 <= use_types_with_invariants_auto__container__c__position)

logic use_types_with_invariants_auto__container__content__first__bit : int

logic use_types_with_invariants_auto__container__content__last__bit : int

logic use_types_with_invariants_auto__container__content__position : int

axiom use_types_with_invariants_auto__container__content__first__bit_axiom :
  (0 <= use_types_with_invariants_auto__container__content__first__bit)

axiom use_types_with_invariants_auto__container__content__last__bit_axiom :
  (use_types_with_invariants_auto__container__content__first__bit <  use_types_with_invariants_auto__container__content__last__bit)

axiom use_types_with_invariants_auto__container__content__position_axiom :
  (0 <= use_types_with_invariants_auto__container__content__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type container__ref = { container__content : us_rep1
}

function container__ref_container__content__projection(a: container__ref) : us_rep1 =
  (a).container__content

type us_split_fields4 = {
rec__types_with_invariants_auto__my_integer_bad__sign : bool;
rec__types_with_invariants_auto__my_integer_bad__val : natural
}

function us_split_fields_rec__types_with_invariants_auto__my_integer_bad__sign__projection(a: us_split_fields4) : bool =
  (a).rec__types_with_invariants_auto__my_integer_bad__sign

function us_split_fields_rec__types_with_invariants_auto__my_integer_bad__val__projection(a: us_split_fields4) : natural =
  (a).rec__types_with_invariants_auto__my_integer_bad__val

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq8(a: us_rep2, b: us_rep2) : bool =
  (if ((to_int(((a).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__sign) = to_int(((b).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__sign)) and
  (to_rep(((a).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__val) = to_rep(((b).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__val))) then true else false)

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic types_with_invariants_auto__my_integer_bad__sign__first__bit : int

logic types_with_invariants_auto__my_integer_bad__sign__last__bit : int

logic types_with_invariants_auto__my_integer_bad__sign__position : int

axiom types_with_invariants_auto__my_integer_bad__sign__first__bit_axiom :
  (0 <= types_with_invariants_auto__my_integer_bad__sign__first__bit)

axiom types_with_invariants_auto__my_integer_bad__sign__last__bit_axiom :
  (types_with_invariants_auto__my_integer_bad__sign__first__bit <  types_with_invariants_auto__my_integer_bad__sign__last__bit)

axiom types_with_invariants_auto__my_integer_bad__sign__position_axiom :
  (0 <= types_with_invariants_auto__my_integer_bad__sign__position)

logic types_with_invariants_auto__my_integer_bad__val__first__bit : int

logic types_with_invariants_auto__my_integer_bad__val__last__bit : int

logic types_with_invariants_auto__my_integer_bad__val__position : int

axiom types_with_invariants_auto__my_integer_bad__val__first__bit_axiom :
  (0 <= types_with_invariants_auto__my_integer_bad__val__first__bit)

axiom types_with_invariants_auto__my_integer_bad__val__last__bit_axiom :
  (types_with_invariants_auto__my_integer_bad__val__first__bit <  types_with_invariants_auto__my_integer_bad__val__last__bit)

axiom types_with_invariants_auto__my_integer_bad__val__position_axiom :
  (0 <= types_with_invariants_auto__my_integer_bad__val__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type my_integer_bad__ref = { my_integer_bad__content : us_rep2
}

function my_integer_bad__ref_my_integer_bad__content__projection(a: my_integer_bad__ref) : us_rep2 =
  (a).my_integer_bad__content

type map__ref1 = { map__content1 : (int,us_rep2) farray
}

logic slide1 : (int,us_rep2) farray, int, int -> (int,us_rep2) farray

axiom slide_eq1 :
  (forall a:(int,us_rep2) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep2) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,us_rep2) farray, a__first: int, a__last: int,
  b: (int,us_rep2) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq8((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep2) farray. forall b:(int,us_rep2) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq8((a[temp___idx_155]),
  (b[((b__first - a__first) + temp___idx_155)])) = true))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t1 = { elts1 : (int,us_rep2) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,us_rep2) farray = (a).elts1

function of_array1(a: (int,us_rep2) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep1(first2((a).rt1))

function last3(a: us_t1) : int = to_rep1(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size4 : int

logic object__size4 : int

logic component__size1 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom4 : (0 <= alignment4)

function bool_eq10(x: us_t1, y: us_t1) : bool = bool_eq9((x).elts1,
  to_rep1(first2((x).rt1)), to_rep1(last2((x).rt1)), (y).elts1,
  to_rep1(first2((y).rt1)), to_rep1(last2((y).rt1)))

logic user_eq7 : us_t1, us_t1 -> bool

logic dummy7 : us_t1

type my_array_bad__ref = { my_array_bad__content : us_t1
}

function my_array_bad__ref_my_array_bad__content__projection(a: my_array_bad__ref) : us_t1 =
  (a).my_array_bad__content

type t13s__ref = { t13s__content : us_t1
}

function t13s__ref_t13s__content__projection(a: t13s__ref) : us_t1 =
  (a).t13s__content

type us_split_discrs2 = {
rec__use_types_with_invariants_auto__container_bad__c : natural
}

function us_split_discrs_rec__use_types_with_invariants_auto__container_bad__c__projection(a: us_split_discrs2) : natural =
  (a).rec__use_types_with_invariants_auto__container_bad__c

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs2
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref1) : us_split_discrs2 =
  (a).us_split_discrs__content1

type us_split_fields6 = {
rec__use_types_with_invariants_auto__container_bad__content : us_t1
}

function us_split_fields_rec__use_types_with_invariants_auto__container_bad__content__projection(a: us_split_fields6) : us_t1 =
  (a).rec__use_types_with_invariants_auto__container_bad__content

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_discrs3 : us_split_discrs2; us_split_fields7 :
us_split_fields6
}

function us_rep___split_discrs__2__projection(a: us_rep3) : us_split_discrs2 =
  (a).us_split_discrs3

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq11(a: us_rep3, b: us_rep3) : bool =
  (if ((to_rep(((a).us_split_discrs3).rec__use_types_with_invariants_auto__container_bad__c) = to_rep(((b).us_split_discrs3).rec__use_types_with_invariants_auto__container_bad__c)) and
  (bool_eq10(((a).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content,
  ((b).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content) = true)) then true else false)

predicate in_range5(rec__use_types_with_invariants_auto__container_bad__c1: int,
  a: us_split_discrs2) =
  (rec__use_types_with_invariants_auto__container_bad__c1 = to_rep((a).rec__use_types_with_invariants_auto__container_bad__c))

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic use_types_with_invariants_auto__container_bad__c__first__bit : int

logic use_types_with_invariants_auto__container_bad__c__last__bit : int

logic use_types_with_invariants_auto__container_bad__c__position : int

axiom use_types_with_invariants_auto__container_bad__c__first__bit_axiom :
  (0 <= use_types_with_invariants_auto__container_bad__c__first__bit)

axiom use_types_with_invariants_auto__container_bad__c__last__bit_axiom :
  (use_types_with_invariants_auto__container_bad__c__first__bit <  use_types_with_invariants_auto__container_bad__c__last__bit)

axiom use_types_with_invariants_auto__container_bad__c__position_axiom :
  (0 <= use_types_with_invariants_auto__container_bad__c__position)

logic use_types_with_invariants_auto__container_bad__content__first__bit : int

logic use_types_with_invariants_auto__container_bad__content__last__bit : int

logic use_types_with_invariants_auto__container_bad__content__position : int

axiom use_types_with_invariants_auto__container_bad__content__first__bit_axiom :
  (0 <= use_types_with_invariants_auto__container_bad__content__first__bit)

axiom use_types_with_invariants_auto__container_bad__content__last__bit_axiom :
  (use_types_with_invariants_auto__container_bad__content__first__bit <  use_types_with_invariants_auto__container_bad__content__last__bit)

axiom use_types_with_invariants_auto__container_bad__content__position_axiom :
  (0 <= use_types_with_invariants_auto__container_bad__content__position)

logic user_eq8 : us_rep3, us_rep3 -> bool

logic dummy8 : us_rep3

type container_bad__ref = { container_bad__content : us_rep3
}

function container_bad__ref_container_bad__content__projection(a: container_bad__ref) : us_rep3 =
  (a).container_bad__content

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant2(temp___expr_183: us_rep1,
  temp___is_init_179: bool, temp___skip_constant_180: bool,
  temp___do_toplevel_181: bool, temp___do_typ_inv_182: bool) =
  (let temp___184 =
  ((temp___expr_183).us_split_discrs1).rec__use_types_with_invariants_auto__container__c
  : natural in ((dynamic_property(1, to_rep(temp___184),
  first1(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content),
  last1(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content)) and
  ((first1(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content) = 1) and
  (last1(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content) = to_rep(temp___184)))) and
  (forall temp___185:int.
  (((first1(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content) <= temp___185) and
  (temp___185 <= last1(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content))) ->
  ((temp___do_typ_inv_182 = true) -> (let temp___186 =
  (to_array(((temp___expr_183).us_split_fields3).rec__use_types_with_invariants_auto__container__content)[temp___185])
  : us_rep in
  ((to_rep(((temp___186).us_split_fields1).rec__types_with_invariants_auto__my_integer__val) = 0) ->
  (((temp___186).us_split_fields1).rec__types_with_invariants_auto__my_integer__sign = true))))))))

predicate dynamic_invariant3(temp___expr_208: us_rep3,
  temp___is_init_204: bool, temp___skip_constant_205: bool,
  temp___do_toplevel_206: bool, temp___do_typ_inv_207: bool,
  types_with_invariants_auto__zero_is_positive: bool) = (let temp___209 =
  ((temp___expr_208).us_split_discrs3).rec__use_types_with_invariants_auto__container_bad__c
  : natural in ((dynamic_property1(1, to_rep(temp___209),
  first3(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content),
  last3(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content)) and
  ((first3(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content) = 1) and
  (last3(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content) = to_rep(temp___209)))) and
  (forall temp___210:int.
  (((first3(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content) <= temp___210) and
  (temp___210 <= last3(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content))) ->
  ((temp___do_typ_inv_207 = true) -> (let temp___211 =
  (to_array1(((temp___expr_208).us_split_fields7).rec__use_types_with_invariants_auto__container_bad__content)[temp___210])
  : us_rep2 in
  ((to_rep(((temp___211).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__val) = 0) ->
  ((((temp___211).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__sign = true) <->
  (types_with_invariants_auto__zero_is_positive = true)))))))))

predicate dynamic_invariant4(temp___expr_166: us_rep,
  temp___is_init_162: bool, temp___skip_constant_163: bool,
  temp___do_toplevel_164: bool, temp___do_typ_inv_165: bool) =
  ((temp___do_typ_inv_165 = true) ->
  ((to_rep(((temp___expr_166).us_split_fields1).rec__types_with_invariants_auto__my_integer__val) = 0) ->
  (((temp___expr_166).us_split_fields1).rec__types_with_invariants_auto__my_integer__sign = true)))

predicate default_initial_assumption(temp___expr_168: us_rep,
  temp___skip_top_level_169: bool) =
  ((((temp___expr_168).us_split_fields1).rec__types_with_invariants_auto__my_integer__sign = of_int(1)) and
  (to_rep(((temp___expr_168).us_split_fields1).rec__types_with_invariants_auto__my_integer__val) = 0))

predicate type_invariant(temp___170: us_rep) =
  ((to_rep(((temp___170).us_split_fields1).rec__types_with_invariants_auto__my_integer__val) = 0) ->
  (((temp___170).us_split_fields1).rec__types_with_invariants_auto__my_integer__sign = true))

predicate dynamic_invariant5(temp___expr_191: us_rep2,
  temp___is_init_187: bool, temp___skip_constant_188: bool,
  temp___do_toplevel_189: bool, temp___do_typ_inv_190: bool,
  types_with_invariants_auto__zero_is_positive: bool) =
  ((temp___do_typ_inv_190 = true) ->
  ((to_rep(((temp___expr_191).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__val) = 0) ->
  ((((temp___expr_191).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__sign = true) <->
  (types_with_invariants_auto__zero_is_positive = true))))

predicate default_initial_assumption1(temp___expr_193: us_rep2,
  temp___skip_top_level_194: bool) =
  ((((temp___expr_193).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__sign = of_int(1)) and
  (to_rep(((temp___expr_193).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__val) = 0))

predicate type_invariant1(temp___195: us_rep2,
  types_with_invariants_auto__zero_is_positive: bool) =
  ((to_rep(((temp___195).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__val) = 0) ->
  ((((temp___195).us_split_fields5).rec__types_with_invariants_auto__my_integer_bad__sign = true) <->
  (types_with_invariants_auto__zero_is_positive = true)))

 (* File "use_types_with_invariants_auto.ads", line 3, characters 0-0 *)
goal defqtvc :
  ((exists usf:int. (dynamic_invariant(usf, true, true, true, true) and
   (exists usf1:us_rep1.
   (to_rep(((usf1).us_split_discrs1).rec__use_types_with_invariants_auto__container__c) = usf)))) ->
  (forall usf:int. (dynamic_invariant(usf, true, true, true, true) ->
  (forall usf1:us_rep3.
  ((to_rep(((usf1).us_split_discrs3).rec__use_types_with_invariants_auto__container_bad__c) = usf) ->
  ((1 <= usf) -> (1 <= 1)))))))
