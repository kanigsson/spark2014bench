(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : character, character -> bool

logic dummy1 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

logic concat : (int,character) farray, int, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_def :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat(a, a_first, a_last, b,
  b_first, b_last)[i]) = (a[i]))))))

axiom concat_def1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a_first:int. forall a_last:int. forall b_first:int.
  forall b_last:int.
  (forall i:int [(concat(a, a_first, a_last, b, b_first, b_last)[i])].
  ((a_last <  i) -> ((concat(a, a_first, a_last, b, b_first,
  b_last)[i]) = (b[((i - a_last) + (b_first - 1))]))))))

logic concat_singleton_left : character, int, (int,character) farray, int,
  int -> (int,character) farray

axiom concat_singleton_left_def :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  ((concat_singleton_left(a, a_first, b, b_first, b_last)[a_first]) = a))))

axiom concat_singleton_left_def1 :
  (forall a:character.
  (forall b:(int,character) farray.
  (forall a_first:int. forall b_first:int. forall b_last:int
  [concat_singleton_left(a, a_first, b, b_first, b_last)].
  (forall i:int [(concat_singleton_left(a, a_first, b, b_first, b_last)[i])].
  ((a_first <  i) -> ((concat_singleton_left(a, a_first, b, b_first,
  b_last)[i]) = (b[((i - a_first) + (b_first - 1))])))))))

logic concat_singleton_right : (int,character) farray, int, int,
  character -> (int,character) farray

axiom concat_singleton_right_def :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)]. ((concat_singleton_right(a, a_first, a_last,
  b)[(a_last + 1)]) = b))))

axiom concat_singleton_right_def1 :
  (forall a:(int,character) farray.
  (forall b:character.
  (forall a_first:int. forall a_last:int [concat_singleton_right(a, a_first,
  a_last, b)].
  (forall i:int [(concat_singleton_right(a, a_first, a_last, b)[i])| (a[i])].
  (((a_first <= i) and (i <= a_last)) -> ((concat_singleton_right(a, a_first,
  a_last, b)[i]) = (a[i])))))))

logic concat_singletons : character, int, character -> (int,character) farray

axiom concat_singletons_def :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  ((concat_singletons(a, a_first, b)[a_first]) = a)))

axiom concat_singletons_def1 :
  (forall a:character. forall b:character.
  (forall a_first:int [concat_singletons(a, a_first, b)].
  ((concat_singletons(a, a_first, b)[(a_first + 1)]) = b)))

logic singleton : character, int -> (int,character) farray

axiom singleton_def :
  (forall v:character.
  (forall i:int [(singleton(v, i)[i])]. ((singleton(v, i)[i]) = v)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : integer, integer -> bool

logic dummy2 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range3(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range3(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range3(f) -> (in_range3(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range3(low) and (in_range3(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type natural_index

logic natural_indexqtint : natural_index -> int

axiom natural_indexqtaxiom :
  (forall i:natural_index. (0 <= natural_indexqtint(i)))

axiom natural_indexqtaxiom1 :
  (forall i:natural_index. (natural_indexqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : natural_index, natural_index -> bool

logic dummy4 : natural_index

type natural_index__ref = { natural_index__content : natural_index
}

function natural_index__ref_natural_index__content__projection(a: natural_index__ref) : natural_index =
  (a).natural_index__content

function to_rep2(x: natural_index) : int = natural_indexqtint(x)

logic of_rep2 : int -> natural_index

axiom inversion_axiom2 :
  (forall x:natural_index [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:natural_index [to_rep2(x)]. in_range4(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range4(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t49s__ref = { t49s__content : us_t
}

function t49s__ref_t49s__content__projection(a: t49s__ref) : us_t =
  (a).t49s__content

type us_split_discrs = { rec__bounded_dynamic_strings__sequence__capacity :
natural_index
}

function us_split_discrs_rec__bounded_dynamic_strings__sequence__capacity__projection(a: us_split_discrs) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__bounded_dynamic_strings__sequence__current_length : natural_index;
rec__bounded_dynamic_strings__sequence__content : us_t
}

function us_split_fields_rec__bounded_dynamic_strings__sequence__current_length__projection(a: us_split_fields) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__current_length

function us_split_fields_rec__bounded_dynamic_strings__sequence__content__projection(a: us_split_fields) : us_t =
  (a).rec__bounded_dynamic_strings__sequence__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq8(a: us_rep, b: us_rep) : bool =
  (if ((to_rep2(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = to_rep2(((b).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep2(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = to_rep2(((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (bool_eq6(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__content,
  ((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = true))) then true else false)

predicate in_range5(rec__bounded_dynamic_strings__sequence__capacity1: int,
  a: us_split_discrs) =
  (rec__bounded_dynamic_strings__sequence__capacity1 = to_rep2((a).rec__bounded_dynamic_strings__sequence__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic bounded_dynamic_strings__sequence__capacity__first__bit : int

logic bounded_dynamic_strings__sequence__capacity__last__bit : int

logic bounded_dynamic_strings__sequence__capacity__position : int

axiom bounded_dynamic_strings__sequence__capacity__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__first__bit)

axiom bounded_dynamic_strings__sequence__capacity__last__bit_axiom :
  (bounded_dynamic_strings__sequence__capacity__first__bit <  bounded_dynamic_strings__sequence__capacity__last__bit)

axiom bounded_dynamic_strings__sequence__capacity__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__position)

logic bounded_dynamic_strings__sequence__current_length__first__bit : int

logic bounded_dynamic_strings__sequence__current_length__last__bit : int

logic bounded_dynamic_strings__sequence__current_length__position : int

axiom bounded_dynamic_strings__sequence__current_length__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__first__bit)

axiom bounded_dynamic_strings__sequence__current_length__last__bit_axiom :
  (bounded_dynamic_strings__sequence__current_length__first__bit <  bounded_dynamic_strings__sequence__current_length__last__bit)

axiom bounded_dynamic_strings__sequence__current_length__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__position)

logic bounded_dynamic_strings__sequence__content__first__bit : int

logic bounded_dynamic_strings__sequence__content__last__bit : int

logic bounded_dynamic_strings__sequence__content__position : int

axiom bounded_dynamic_strings__sequence__content__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__first__bit)

axiom bounded_dynamic_strings__sequence__content__last__bit_axiom :
  (bounded_dynamic_strings__sequence__content__first__bit <  bounded_dynamic_strings__sequence__content__last__bit)

axiom bounded_dynamic_strings__sequence__content__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic length2 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_258: us_rep,
  temp___is_init_254: bool, temp___skip_constant_255: bool,
  temp___do_toplevel_256: bool, temp___do_typ_inv_257: bool) =
  (((temp___do_toplevel_256 = true) -> (let temp___260 =
  to_rep2(((temp___expr_258).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)
  : int in ((0 <= temp___260) and
  (temp___260 <= to_rep2(((temp___expr_258).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))))) and
  (let temp___261 =
  ((temp___expr_258).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity
  : natural_index in (dynamic_property(1, to_rep2(temp___261),
  first1(((temp___expr_258).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  last1(((temp___expr_258).us_split_fields1).rec__bounded_dynamic_strings__sequence__content)) and
  ((first1(((temp___expr_258).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = 1) and
  (last1(((temp___expr_258).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = to_rep2(temp___261))))))

predicate dynamic_predicate(temp___263: us_rep) = (let temp___265 =
  to_rep2(((temp___263).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)
  : int in ((0 <= temp___265) and
  (temp___265 <= to_rep2(((temp___263).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))))

predicate dynamic_invariant1(temp___expr_244: int, temp___is_init_240: bool,
  temp___skip_constant_241: bool, temp___do_toplevel_242: bool,
  temp___do_typ_inv_243: bool) = (((temp___is_init_240 = true) or
  (0 <= 2147483647)) -> in_range4(temp___expr_244))

axiom length__post_axiom :
  (forall this:us_rep [length2(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = length2(this) : int in
  (length__function_guard(result, this) -> dynamic_invariant1(result, true,
  false, true, true)))))

axiom length__def_axiom :
  (forall this:us_rep [length2(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (length2(this) = to_rep2(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))))

type list__ref = { list__content : us_t
}

function list__ref_list__content__projection(a: list__ref) : us_t =
  (a).list__content

logic value : us_rep -> us_t

logic value__function_guard : us_t, us_rep -> prop

logic empty : us_rep -> bool

logic empty__function_guard : bool, us_rep -> prop

type t60s__ref = { t60s__content : us_t
}

function t60s__ref_t60s__content__projection(a: t60s__ref) : us_t =
  (a).t60s__content

predicate dynamic_invariant2(temp___expr_228: us_t, temp___is_init_224: bool,
  temp___skip_constant_225: bool, temp___do_toplevel_226: bool,
  temp___do_typ_inv_227: bool) = ((not (temp___skip_constant_225 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_228),
  last1(temp___expr_228)))

axiom value__post_axiom :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (forall this1:us_rep. length__function_guard(length2(this1), this1))))

axiom value__post_axiom1 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (forall this1:us_rep. length__function_guard(length2(this1), this1))))

axiom value__post_axiom2 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (forall this1:us_rep. length__function_guard(length2(this1), this1))))

axiom value__post_axiom3 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (forall this1:us_rep. empty__function_guard(empty(this1), this1))))

axiom value__post_axiom4 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = value(this) : us_t in
  (value__function_guard(result, this) ->
  (length1(result) = length2(this))))))

axiom value__post_axiom5 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = value(this) : us_t in
  (value__function_guard(result, this) -> (first1(result) = 1)))))

axiom value__post_axiom6 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = value(this) : us_t in
  (value__function_guard(result, this) -> (last1(result) = length2(this))))))

axiom value__post_axiom7 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (value__function_guard(value(this), this) ->
  ((0 <  length2(this)) -> (not (empty(this) = true))))))

axiom value__post_axiom8 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (value__function_guard(value(this), this) ->
  ((not (empty(this) = true)) -> (0 <  length2(this))))))

axiom value__post_axiom9 :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = value(this) : us_t in
  (value__function_guard(result, this) -> dynamic_invariant2(result, true,
  false, true, true)))))

axiom value__def_axiom :
  (forall this:us_rep [value(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (value(this) = of_array(to_array(of_array(to_array(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))),
  first1(of_array(to_array(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))),
  last1(of_array(to_array(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)))))))

logic tail : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic to____split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

logic i52s : us_rep

logic attr__ATTRIBUTE_ADDRESS2 : int

logic new_length : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic r130b : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 2147483647))

predicate in_range6(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq6 : index, index -> bool

logic dummy6 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant3(temp___expr_251: int, temp___is_init_247: bool,
  temp___skip_constant_248: bool, temp___do_toplevel_249: bool,
  temp___do_typ_inv_250: bool) = (((temp___is_init_247 = true) or
  (1 <= 2147483647)) -> in_range6(temp___expr_251))

type t132b__ref = { t132b__content : us_t
}

function t132b__ref_t132b__content__projection(a: t132b__ref) : us_t =
  (a).t132b__content

predicate dynamic_invariant4(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant5(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant6(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant7(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_18))

axiom empty__post_axiom :
  (forall this:us_rep [empty(this)]. (dynamic_invariant(this, true, true,
  true, true) ->
  (forall this1:us_rep. length__function_guard(length2(this1), this1))))

axiom empty__post_axiom1 :
  (forall this:us_rep [empty(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = empty(this) : bool in
  (empty__function_guard(result, this) -> ((result = true) ->
  (length2(this) = 0))))))

axiom empty__post_axiom2 :
  (forall this:us_rep [empty(this)]. (dynamic_invariant(this, true, true,
  true, true) -> (let result = empty(this) : bool in
  (empty__function_guard(result, this) -> ((length2(this) = 0) ->
  (result = true))))))

axiom empty__def_axiom :
  (forall this:us_rep [empty(this)]. ((empty(this) = true) ->
  (to_rep2(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = 0)))

axiom empty__def_axiom1 :
  (forall this:us_rep [empty(this)].
  ((to_rep2(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = 0) ->
  (empty(this) = true)))

 (* File "bounded_dynamic_arrays.ads", line 135, characters 0-0 *)
goal defqtvc :
  (forall to____split_fields:us_split_fields.
  (forall to____split_fields1:us_split_fields.
  ((to____split_fields1 = to____split_fields) -> (dynamic_invariant(i52s,
  true, false, true, true) -> (dynamic_invariant(i52s, true, false, true,
  true) -> (dynamic_invariant(tail, true, false, true, true) ->
  (dynamic_invariant({ us_split_discrs1 = to____split_discrs;
  us_split_fields1 = to____split_fields }, true, false, true, true) ->
  (length__function_guard(length2(tail), tail) ->
  ((forall to____split_fields2:us_split_fields.
   length__function_guard(length2({ us_split_discrs1 = to____split_discrs;
   us_split_fields1 = to____split_fields2 }), { us_split_discrs1 =
   to____split_discrs; us_split_fields1 = to____split_fields2 })) ->
  ((let temp___1612 = (length2(tail) + length2({ us_split_discrs1 =
  to____split_discrs; us_split_fields1 = to____split_fields })) : int in
  ((1 <= temp___1612) and
  (temp___1612 <= to_rep2((to____split_discrs).rec__bounded_dynamic_strings__sequence__capacity)))) ->
  (forall o:int.
  ((to_rep2((to____split_fields).rec__bounded_dynamic_strings__sequence__current_length) = o) ->
  (let o1 = tail : us_rep in (let o2 = length2(o1) : int in
  ((length__function_guard(o2, o1) and (dynamic_invariant1(o2, true, false,
  true, true) and
  (o2 = to_rep2(((o1).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)))) ->
  (let o3 = (o2 + o) : int in (in_range6(o3) -> ((o3 = new_length) ->
  (dynamic_invariant3(new_length, true, false, true, true) ->
  (forall bounded_dynamic_strings__append__R130b__assume:int.
  ((to_rep2((to____split_discrs).rec__bounded_dynamic_strings__sequence__capacity) = bounded_dynamic_strings__append__R130b__assume) ->
  ((bounded_dynamic_strings__append__R130b__assume = r130b) ->
  (dynamic_invariant1(r130b, true, false, true, true) ->
  (forall temp___1581:us_t.
  ((forall o4:us_rep. length__function_guard(length2(o4), o4)) ->
  ((forall o4:us_rep. length__function_guard(length2(o4), o4)) ->
  ((forall o4:us_rep. length__function_guard(length2(o4), o4)) ->
  ((forall o4:us_rep. empty__function_guard(empty(o4), o4)) ->
  ((forall o4:us_rep. length__function_guard(length2(o4), o4)) ->
  ((forall o4:us_rep. length__function_guard(length2(o4), o4)) ->
  ((forall o4:us_rep. length__function_guard(length2(o4), o4)) ->
  ((forall o4:us_rep. empty__function_guard(empty(o4), o4)) -> ((let o4 =
  tail : us_rep in (let temp___1580 = value(o4) : us_t in
  ((value__function_guard(temp___1580, o4) and
  (dynamic_invariant2(temp___1580, true, false, true, true) and
  ((temp___1580 = of_array(to_array(of_array(to_array(((o4).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2(((o4).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))),
  first1(of_array(to_array(((o4).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2(((o4).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))),
  last1(of_array(to_array(((o4).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2(((o4).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))))) and
  ((((length1(temp___1580) = length2(o4)) and (first1(temp___1580) = 1)) and
  (last1(temp___1580) = length2(o4))) and ((0 <  length2(o4)) <->
  (not (empty(o4) = true))))))) and (let o5 = { us_split_discrs1 =
  to____split_discrs; us_split_fields1 = to____split_fields } : us_rep in
  (let temp___1579 = value(o5) : us_t in ((value__function_guard(temp___1579,
  o5) and (dynamic_invariant2(temp___1579, true, false, true, true) and
  ((temp___1579 = of_array(to_array(of_array(to_array((to____split_fields).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2((to____split_fields).rec__bounded_dynamic_strings__sequence__current_length))),
  first1(of_array(to_array((to____split_fields).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2((to____split_fields).rec__bounded_dynamic_strings__sequence__current_length))),
  last1(of_array(to_array((to____split_fields).rec__bounded_dynamic_strings__sequence__content),
  1,
  to_rep2((to____split_fields).rec__bounded_dynamic_strings__sequence__current_length))))) and
  ((((length1(temp___1579) = length2(o5)) and (first1(temp___1579) = 1)) and
  (last1(temp___1579) = length2(o5))) and ((0 <  length2(o5)) <->
  (not (empty(o5) = true))))))) and
  (if (length1(temp___1579) = 0) then (temp___1581 = of_array(to_array(temp___1580),
  first1(temp___1580), last1(temp___1580))) else (let o6 =
  ((first1(temp___1579) + (length(first1(temp___1579),
  last1(temp___1579)) + length(first1(temp___1580),
  last1(temp___1580)))) - 1) : int in (in_range1(o6) and
  (temp___1581 = of_array(concat(to_array(temp___1579), first1(temp___1579),
  last1(temp___1579), to_array(temp___1580), first1(temp___1580),
  last1(temp___1580)), first1(temp___1579), o6))))))))))) ->
  ((first1(temp___1581) <= last1(temp___1581)) ->
  (1 <= new_length)))))))))))))))))))))))))))))))))))
