(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type t_nat32

logic t_nat32qtint : t_nat32 -> int

axiom t_nat32qtaxiom : (forall i:t_nat32. (0 <= t_nat32qtint(i)))

axiom t_nat32qtaxiom1 : (forall i:t_nat32. (t_nat32qtint(i) <= 4294967295))

predicate in_range(x: int) = ((0 <= x) and (x <= 4294967295))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : t_nat32, t_nat32 -> bool

logic dummy : t_nat32

type t_nat32__ref = { t_nat32__content : t_nat32
}

function t_nat32__ref_t_nat32__content__projection(a: t_nat32__ref) : t_nat32 =
  (a).t_nat32__content

function to_rep(x: t_nat32) : int = t_nat32qtint(x)

logic of_rep : int -> t_nat32

axiom inversion_axiom :
  (forall x:t_nat32 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:t_nat32 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type t_data_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 1))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : t_data_type, t_data_type -> bool

logic dummy1 : t_data_type

type t_data_type__ref = { t_data_type__content : t_data_type
}

function t_data_type__ref_t_data_type__content__projection(a: t_data_type__ref) : t_data_type =
  (a).t_data_type__content

logic to_rep1 : t_data_type -> int

logic of_rep1 : int -> t_data_type

axiom inversion_axiom1 :
  (forall x:t_data_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:t_data_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_discrs = { rec__data__t_strong_data_type__data_type :
t_data_type
}

function us_split_discrs_rec__data__t_strong_data_type__data_type__projection(a: us_split_discrs) : t_data_type =
  (a).rec__data__t_strong_data_type__data_type

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__data__t_strong_data_type__min_nat32 : t_nat32
}

function us_split_fields_rec__data__t_strong_data_type__min_nat32__projection(a: us_split_fields) : t_nat32 =
  (a).rec__data__t_strong_data_type__min_nat32

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate data__t_strong_data_type__min_nat32__pred(a: us_rep) =
  (to_rep1(((a).us_split_discrs1).rec__data__t_strong_data_type__data_type) = 1)

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__data__t_strong_data_type__data_type) = to_rep1(((b).us_split_discrs1).rec__data__t_strong_data_type__data_type)) and
  (data__t_strong_data_type__min_nat32__pred(a) ->
  (to_rep(((a).us_split_fields1).rec__data__t_strong_data_type__min_nat32) = to_rep(((b).us_split_fields1).rec__data__t_strong_data_type__min_nat32)))) then true else false)

predicate in_range2(rec__data__t_strong_data_type__data_type1: int,
  a: us_split_discrs) =
  (rec__data__t_strong_data_type__data_type1 = to_rep1((a).rec__data__t_strong_data_type__data_type))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic data__t_strong_data_type__data_type__first__bit : int

logic data__t_strong_data_type__data_type__last__bit : int

logic data__t_strong_data_type__data_type__position : int

axiom data__t_strong_data_type__data_type__first__bit_axiom :
  (0 <= data__t_strong_data_type__data_type__first__bit)

axiom data__t_strong_data_type__data_type__last__bit_axiom :
  (data__t_strong_data_type__data_type__first__bit <  data__t_strong_data_type__data_type__last__bit)

axiom data__t_strong_data_type__data_type__position_axiom :
  (0 <= data__t_strong_data_type__data_type__position)

logic data__t_strong_data_type__min_nat32__first__bit : int

logic data__t_strong_data_type__min_nat32__last__bit : int

logic data__t_strong_data_type__min_nat32__position : int

axiom data__t_strong_data_type__min_nat32__first__bit_axiom :
  (0 <= data__t_strong_data_type__min_nat32__first__bit)

axiom data__t_strong_data_type__min_nat32__last__bit_axiom :
  (data__t_strong_data_type__min_nat32__first__bit <  data__t_strong_data_type__min_nat32__last__bit)

axiom data__t_strong_data_type__min_nat32__position_axiom :
  (0 <= data__t_strong_data_type__min_nat32__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t_strong_data_type__ref = { t_strong_data_type__content : us_rep
}

function t_strong_data_type__ref_t_strong_data_type__content__projection(a: t_strong_data_type__ref) : us_rep =
  (a).t_strong_data_type__content

logic is_nat32 : us_rep -> bool

logic is_nat32__function_guard : bool, us_rep -> prop

predicate default_initial_assumption(temp___expr_177: us_rep,
  temp___skip_top_level_178: bool) =
  (to_rep1(((temp___expr_177).us_split_discrs1).rec__data__t_strong_data_type__data_type) = 0)

axiom is_nat32__def_axiom :
  (forall strong_data_type:us_rep [is_nat32(strong_data_type)].
  ((is_nat32(strong_data_type) = true) ->
  (to_rep1(((strong_data_type).us_split_discrs1).rec__data__t_strong_data_type__data_type) = 1)))

axiom is_nat32__def_axiom1 :
  (forall strong_data_type:us_rep [is_nat32(strong_data_type)].
  ((to_rep1(((strong_data_type).us_split_discrs1).rec__data__t_strong_data_type__data_type) = 1) ->
  (is_nat32(strong_data_type) = true)))

logic strong_data_type : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_161: int, temp___is_init_157: bool,
  temp___skip_constant_158: bool, temp___do_toplevel_159: bool,
  temp___do_typ_inv_160: bool) = (((temp___is_init_157 = true) or
  (0 <= 4294967295)) -> in_range(temp___expr_161))

predicate dynamic_invariant1(temp___expr_168: int, temp___is_init_164: bool,
  temp___skip_constant_165: bool, temp___do_toplevel_166: bool,
  temp___do_typ_inv_167: bool) = (((temp___is_init_164 = true) or
  (0 <= 1)) -> in_range1(temp___expr_168))

 (* File "data.ads", line 10, characters 0-0 *)
goal defqtvc : (is_nat32__function_guard(is_nat32(strong_data_type),
  strong_data_type) -> ((is_nat32(strong_data_type) = true) ->
  data__t_strong_data_type__min_nat32__pred(strong_data_type)))
