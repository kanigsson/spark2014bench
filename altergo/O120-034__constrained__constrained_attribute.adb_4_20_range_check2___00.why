(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__constrained_attribute__mut_rec__d : integer
}

function us_split_discrs_rec__constrained_attribute__mut_rec__d__projection(a: us_split_discrs) : integer =
  (a).rec__constrained_attribute__mut_rec__d

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__constrained_attribute__mut_rec__f : integer
}

function us_split_fields_rec__constrained_attribute__mut_rec__f__projection(a: us_split_fields) : integer =
  (a).rec__constrained_attribute__mut_rec__f

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d) = to_rep(((b).us_split_discrs1).rec__constrained_attribute__mut_rec__d)) and
  (to_rep(((a).us_split_fields1).rec__constrained_attribute__mut_rec__f) = to_rep(((b).us_split_fields1).rec__constrained_attribute__mut_rec__f))) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic constrained_attribute__mut_rec__d__first__bit : int

logic constrained_attribute__mut_rec__d__last__bit : int

logic constrained_attribute__mut_rec__d__position : int

axiom constrained_attribute__mut_rec__d__first__bit_axiom :
  (0 <= constrained_attribute__mut_rec__d__first__bit)

axiom constrained_attribute__mut_rec__d__last__bit_axiom :
  (constrained_attribute__mut_rec__d__first__bit <  constrained_attribute__mut_rec__d__last__bit)

axiom constrained_attribute__mut_rec__d__position_axiom :
  (0 <= constrained_attribute__mut_rec__d__position)

logic constrained_attribute__mut_rec__f__first__bit : int

logic constrained_attribute__mut_rec__f__last__bit : int

logic constrained_attribute__mut_rec__f__position : int

axiom constrained_attribute__mut_rec__f__first__bit_axiom :
  (0 <= constrained_attribute__mut_rec__f__first__bit)

axiom constrained_attribute__mut_rec__f__last__bit_axiom :
  (constrained_attribute__mut_rec__f__first__bit <  constrained_attribute__mut_rec__f__last__bit)

axiom constrained_attribute__mut_rec__f__position_axiom :
  (0 <= constrained_attribute__mut_rec__f__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type mut_rec__ref = { mut_rec__content : us_rep
}

function mut_rec__ref_mut_rec__content__projection(a: mut_rec__ref) : us_rep =
  (a).mut_rec__content

logic is_constrained : us_rep -> bool

logic is_constrained__function_guard : bool, us_rep -> prop

predicate default_initial_assumption(temp___expr_161: us_rep,
  temp___skip_top_level_162: bool) =
  ((to_rep(((temp___expr_161).us_split_discrs1).rec__constrained_attribute__mut_rec__d) = 0) and
  (to_rep(((temp___expr_161).us_split_fields1).rec__constrained_attribute__mut_rec__f) = 0))

axiom is_constrained__post_axiom : true

axiom is_constrained__post_axiom1 :
  (forall r:us_rep [is_constrained(r)]. (let result = is_constrained(r)
  : bool in (is_constrained__function_guard(result, r) -> (result = true))))

axiom is_constrained__def_axiom : true

axiom is_constrained__def_axiom1 :
  (forall r:us_rep [is_constrained(r)]. (is_constrained(r) = true))

logic a__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

predicate in_range1(rec__constrained_attribute__mut_rec__d1: int,
  a: us_rep) =
  (rec__constrained_attribute__mut_rec__d1 = to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic constrained_attribute__mut_rec__d__first__bit1 : int

logic constrained_attribute__mut_rec__d__last__bit1 : int

logic constrained_attribute__mut_rec__d__position1 : int

axiom constrained_attribute__mut_rec__d__first__bit_axiom1 :
  (0 <= constrained_attribute__mut_rec__d__first__bit1)

axiom constrained_attribute__mut_rec__d__last__bit_axiom1 :
  (constrained_attribute__mut_rec__d__first__bit1 <  constrained_attribute__mut_rec__d__last__bit1)

axiom constrained_attribute__mut_rec__d__position_axiom1 :
  (0 <= constrained_attribute__mut_rec__d__position1)

logic constrained_attribute__mut_rec__f__first__bit1 : int

logic constrained_attribute__mut_rec__f__last__bit1 : int

logic constrained_attribute__mut_rec__f__position1 : int

axiom constrained_attribute__mut_rec__f__first__bit_axiom1 :
  (0 <= constrained_attribute__mut_rec__f__first__bit1)

axiom constrained_attribute__mut_rec__f__last__bit_axiom1 :
  (constrained_attribute__mut_rec__f__first__bit1 <  constrained_attribute__mut_rec__f__last__bit1)

axiom constrained_attribute__mut_rec__f__position_axiom1 :
  (0 <= constrained_attribute__mut_rec__f__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type tbS__ref = { tbS__content : us_rep
}

function tbS__ref_tbS__content__projection(a: tbS__ref) : us_rep =
  (a).tbS__content

logic b__split_discrs : us_split_discrs

logic b__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_170: us_rep,
  temp___is_init_166: bool, temp___skip_constant_167: bool,
  temp___do_toplevel_168: bool, temp___do_typ_inv_169: bool) =
  ((not (temp___skip_constant_167 = true)) -> in_range1(0, temp___expr_170))

predicate default_initial_assumption1(temp___expr_172: us_rep,
  temp___skip_top_level_173: bool) =
  ((to_rep(((temp___expr_172).us_split_discrs1).rec__constrained_attribute__mut_rec__d) = 0) and
  (to_rep(((temp___expr_172).us_split_fields1).rec__constrained_attribute__mut_rec__f) = 0))

predicate in_range2(rec__constrained_attribute__mut_rec__d1: int,
  a: us_rep) =
  (rec__constrained_attribute__mut_rec__d1 = to_rep(((a).us_split_discrs1).rec__constrained_attribute__mut_rec__d))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic constrained_attribute__mut_rec__d__first__bit2 : int

logic constrained_attribute__mut_rec__d__last__bit2 : int

logic constrained_attribute__mut_rec__d__position2 : int

axiom constrained_attribute__mut_rec__d__first__bit_axiom2 :
  (0 <= constrained_attribute__mut_rec__d__first__bit2)

axiom constrained_attribute__mut_rec__d__last__bit_axiom2 :
  (constrained_attribute__mut_rec__d__first__bit2 <  constrained_attribute__mut_rec__d__last__bit2)

axiom constrained_attribute__mut_rec__d__position_axiom2 :
  (0 <= constrained_attribute__mut_rec__d__position2)

logic constrained_attribute__mut_rec__f__first__bit2 : int

logic constrained_attribute__mut_rec__f__last__bit2 : int

logic constrained_attribute__mut_rec__f__position2 : int

axiom constrained_attribute__mut_rec__f__first__bit_axiom2 :
  (0 <= constrained_attribute__mut_rec__f__first__bit2)

axiom constrained_attribute__mut_rec__f__last__bit_axiom2 :
  (constrained_attribute__mut_rec__f__first__bit2 <  constrained_attribute__mut_rec__f__last__bit2)

axiom constrained_attribute__mut_rec__f__position_axiom2 :
  (0 <= constrained_attribute__mut_rec__f__position2)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type t1b__ref = { t1b__content : us_rep
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_rep =
  (a).t1b__content

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

 (* File "constrained_attribute.ads", line 9, characters 0-0 *)
goal defqtvc :
  (forall a__split_fields:integer. ((a__split_fields = rliteral) ->
  (forall a__split_discrs:integer. ((a__split_discrs = rliteral) ->
  ((a__attr__constrained = false) -> in_range(0))))))
