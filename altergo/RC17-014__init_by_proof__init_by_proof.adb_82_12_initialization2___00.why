(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic bool_eq2 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq2(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq2(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

type my_int

logic my_intqtint : my_int -> int

axiom my_intqtaxiom : (forall i:my_int. ((- 2147483648) <= my_intqtint(i)))

axiom my_intqtaxiom1 : (forall i:my_int. (my_intqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : my_int, my_int -> bool

logic dummy2 : my_int

type my_int__ref = { my_int__content : my_int
}

function my_int__ref_my_int__content__projection(a: my_int__ref) : my_int =
  (a).my_int__content

type my_int__init_wrapper = { rec__value : my_int; attr__init : bool
}

function my_int__init_wrapper_rec__value__projection(a: my_int__init_wrapper) : my_int =
  (a).rec__value

function my_int__init_wrapper_attr__init__projection(a: my_int__init_wrapper) : bool =
  (a).attr__init

function to_rep1(x: my_int) : int = my_intqtint(x)

logic of_rep1 : int -> my_int

axiom inversion_axiom1 :
  (forall x:my_int [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:my_int [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,my_int__init_wrapper) farray
}

logic slide : (int,my_int__init_wrapper) farray, int,
  int -> (int,my_int__init_wrapper) farray

axiom slide_eq :
  (forall a:(int,my_int__init_wrapper) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,my_int__init_wrapper) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,my_int__init_wrapper) farray, a__first: int,
  a__last: int, b: (int,my_int__init_wrapper) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1(((a[temp___idx_156])).rec__value) = to_rep1(((b[((b__first - a__first) + temp___idx_156)])).rec__value))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,my_int__init_wrapper) farray.
  forall b:(int,my_int__init_wrapper) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,my_int__init_wrapper) farray.
  forall b:(int,my_int__init_wrapper) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,my_int__init_wrapper) farray.
  forall b:(int,my_int__init_wrapper) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,my_int__init_wrapper) farray.
  forall b:(int,my_int__init_wrapper) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_rep1(((a[temp___idx_156])).rec__value) = to_rep1(((b[((b__first - a__first) + temp___idx_156)])).rec__value)))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,my_int__init_wrapper) farray; rt : t
}

function to_array(a: us_t) : (int,my_int__init_wrapper) farray = (a).elts

function of_array(a: (int,my_int__init_wrapper) farray, f: int,
  l: int) : us_t = { elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type int_array__ref = { int_array__content : us_t
}

function int_array__ref_int_array__content__projection(a: int_array__ref) : us_t =
  (a).int_array__content

type t13b__ref = { t13b__content : us_t
}

function t13b__ref_t13b__content__projection(a: t13b__ref) : us_t =
  (a).t13b__content

type t30b__ref = { t30b__content : us_t
}

function t30b__ref_t30b__content__projection(a: t30b__ref) : us_t =
  (a).t30b__content

type t27b__ref = { t27b__content : us_t
}

function t27b__ref_t27b__content__projection(a: t27b__ref) : us_t =
  (a).t27b__content

type map__ref1 = { map__content1 : (int,integer) farray
}

logic slide1 : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq1 :
  (forall a:(int,integer) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_157:int. (((a__first <= temp___idx_157) and
  (temp___idx_157 <= a__last)) ->
  (to_rep((a[temp___idx_157])) = to_rep((b[((b__first - a__first) + temp___idx_157)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic b__first : integer

logic b__last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t1 = { elts1 : (int,integer) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,integer) farray = (a).elts1

function of_array1(a: (int,integer) farray, f: int, l: int) : us_t1 = {
  elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

function length2(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

function bool_eq7(x: us_t1, y: us_t1) : bool = bool_eq6((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy4 : us_t1

type int_array_init__ref = { int_array_init__content : us_t1
}

function int_array_init__ref_int_array_init__content__projection(a: int_array_init__ref) : us_t1 =
  (a).int_array_init__content

type tTbufSP1

logic tTbufSP1qtint : tTbufSP1 -> int

axiom tTbufSP1qtaxiom : (forall i:tTbufSP1. (1 <= tTbufSP1qtint(i)))

axiom tTbufSP1qtaxiom1 : (forall i:tTbufSP1. (tTbufSP1qtint(i) <= 150))

predicate in_range3(x: int) = ((1 <= x) and (x <= 150))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tTbufSP1, tTbufSP1 -> bool

logic dummy5 : tTbufSP1

type tTbufSP1__ref = { tTbufSP1__content : tTbufSP1
}

function tTbufSP1__ref_tTbufSP1__content__projection(a: tTbufSP1__ref) : tTbufSP1 =
  (a).tTbufSP1__content

predicate default_initial_assumption(temp___expr_273: (int,my_int__init_wrapper) farray,
  temp___skip_top_level_274: bool) =
  (forall temp___275:int. (((1 <= temp___275) and (temp___275 <= 150)) ->
  (((temp___expr_273[temp___275])).attr__init = false)))

type t39b

logic t39bqtint : t39b -> int

axiom t39bqtaxiom : (forall i:t39b. (1 <= t39bqtint(i)))

axiom t39bqtaxiom1 : (forall i:t39b. (t39bqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : t39b, t39b -> bool

logic dummy6 : t39b

type t39b__ref = { t39b__content : t39b
}

function t39b__ref_t39b__content__projection(a: t39b__ref) : t39b =
  (a).t39b__content

logic convert : (int,my_int__init_wrapper) farray -> (int,integer) farray

axiom convert__def :
  (forall a:(int,my_int__init_wrapper) farray.
  (forall temp___279:int.
  (to_rep1(((a[temp___279])).rec__value) = to_rep((convert(a)[temp___279])))))

predicate dynamic_invariant1(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant2(temp___expr_190: int, temp___is_init_186: bool,
  temp___skip_constant_187: bool, temp___do_toplevel_188: bool,
  temp___do_typ_inv_189: bool) = (((temp___is_init_186 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range2(temp___expr_190))

predicate dynamic_invariant3(temp___expr_197: us_t, temp___is_init_193: bool,
  temp___skip_constant_194: bool, temp___do_toplevel_195: bool,
  temp___do_typ_inv_196: bool) = ((not (temp___skip_constant_194 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_197),
  last1(temp___expr_197)))

predicate dynamic_invariant4(temp___expr_203: us_t1,
  temp___is_init_199: bool, temp___skip_constant_200: bool,
  temp___do_toplevel_201: bool, temp___do_typ_inv_202: bool) =
  ((not (temp___skip_constant_200 = true)) -> dynamic_property1(1,
  2147483647, first3(temp___expr_203), last3(temp___expr_203)))

 (* File "init_by_proof.adb", line 2, characters 0-0 *)
goal defqtvc :
  (forall buf:(int,my_int__init_wrapper) farray. forall x:int.
  (default_initial_assumption(buf, false) -> (dynamic_invariant(x, false,
  false, true, true) ->
  (forall o:integer. ((to_rep(o) = 150) ->
  (forall o1:integer. ((to_rep(o1) = 1) ->
  (forall error:bool.
  forall init_by_proof__read__buf:(int,my_int__init_wrapper) farray.
  forall o2:(int,my_int__init_wrapper) farray.
  ((o2 = init_by_proof__read__buf) -> (((not (error = true)) ->
  (let temp___221 = of_array(o2, to_rep(o1), (to_rep(o1) + (100 - 1)))
  : us_t in
  (forall temp___222:int. (((first1(temp___221) <= temp___222) and
  (temp___222 <= last1(temp___221))) ->
  (((to_array(temp___221)[temp___222])).attr__init = true))))) ->
  (let temp___277 = of_array(init_by_proof__read__buf, 1, 150) : us_t in
  (forall buf1:(int,my_int__init_wrapper) farray.
  ((buf1 = slide(to_array(temp___277), first1(temp___277), 1)) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (error = true) then false else true)) ->
  ((spark__branch = true) ->
  ((exists o3:int. (to_rep1(((buf1[10])).rec__value) = o3)) ->
  (forall o3:integer. ((to_rep(o3) = 150) ->
  (forall o4:integer. ((to_rep(o4) = 1) ->
  (forall init_by_proof__process__buf:(int,my_int__init_wrapper) farray.
  ((let temp___242 = of_array(init_by_proof__process__buf, to_rep(o4),
  (to_rep(o4) + (100 - 1))) : us_t in
  (forall temp___243:int. (((first1(temp___242) <= temp___243) and
  (temp___243 <= last1(temp___242))) ->
  (((to_array(temp___242)[temp___243])).attr__init = true)))) ->
  (let temp___278 = of_array(init_by_proof__process__buf, 1, 150) : us_t in
  (forall buf2:(int,my_int__init_wrapper) farray.
  ((buf2 = slide(to_array(temp___278), first1(temp___278), 1)) ->
  (dynamic_property1(1, 2147483647, 1, 100) -> (((1 <= 100) -> (((1 <= 1) and
  (1 <= 150)) and ((1 <= 100) and (100 <= 150)))) ->
  ((forall temp___284:int. (((1 <= temp___284) and (temp___284 <= 100)) ->
   (((buf2[temp___284])).attr__init = true))) ->
  (let init_by_proof__B_4__b__assume = of_array1(convert(buf2), 1, 100)
  : us_t1 in ((to_rep(b__first) = first3(init_by_proof__B_4__b__assume)) ->
  ((to_rep(b__last) = last3(init_by_proof__B_4__b__assume)) ->
  (dynamic_property1(1, 2147483647, to_rep(b__first), to_rep(b__last)) ->
  (((buf2[20])).attr__init = true))))))))))))))))))))))))))))))))))
