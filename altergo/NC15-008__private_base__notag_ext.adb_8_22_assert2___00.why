(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__notag_base__t__c : integer
}

function us_split_fields_rec__notag_base__t__c__projection(a: us_split_fields) : integer =
  (a).rec__notag_base__t__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__notag_base__t__c) = to_rep(((b).us_split_fields1).rec__notag_base__t__c)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic notag_base__t__c__first__bit : int

logic notag_base__t__c__last__bit : int

logic notag_base__t__c__position : int

axiom notag_base__t__c__first__bit_axiom :
  (0 <= notag_base__t__c__first__bit)

axiom notag_base__t__c__last__bit_axiom :
  (notag_base__t__c__first__bit <  notag_base__t__c__last__bit)

axiom notag_base__t__c__position_axiom : (0 <= notag_base__t__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type u__ref = { u__content : us_rep
}

function u__ref_u__content__projection(a: u__ref) : us_rep = (a).u__content

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic notag_base__t__c__first__bit1 : int

logic notag_base__t__c__last__bit1 : int

logic notag_base__t__c__position1 : int

axiom notag_base__t__c__first__bit_axiom1 :
  (0 <= notag_base__t__c__first__bit1)

axiom notag_base__t__c__last__bit_axiom1 :
  (notag_base__t__c__first__bit1 <  notag_base__t__c__last__bit1)

axiom notag_base__t__c__position_axiom1 : (0 <= notag_base__t__c__position1)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type t__ref = { t__content : us_rep
}

function t__ref_t__content__projection(a: t__ref) : us_rep = (a).t__content

logic sum : us_rep -> int

logic sum__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

axiom sum__post_axiom :
  (forall x:us_rep [sum(x)]. (let result = sum(x) : int in
  (sum__function_guard(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom sum__def_axiom :
  (forall x:us_rep [sum(x)].
  (sum(x) = to_rep(((x).us_split_fields1).rec__notag_base__t__c)))

logic create : int -> us_rep

logic create__function_guard : us_rep, int -> prop

logic create1 : int -> us_rep

logic create__function_guard1 : us_rep, int -> prop

axiom create__def_axiom :
  (forall c:int [create1(c)]. (dynamic_invariant(c, true, true, true,
  true) -> (forall c1:int. create__function_guard(create(c1), c1))))

axiom create__def_axiom1 :
  (forall c:int [create1(c)]. (dynamic_invariant(c, true, true, true,
  true) -> (create1(c) = create(c))))

logic a : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic b : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

axiom a__def_axiom : create__function_guard1(create1(1), 1)

axiom a__def_axiom1 : (a = create1(1))

axiom b__def_axiom : create__function_guard1(create1(2), 2)

axiom b__def_axiom1 : (b = create1(2))

axiom create__post_axiom :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (forall result:us_rep. sum__function_guard(sum(result), result))))

axiom create__post_axiom1 :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (let result = create(c) : us_rep in (create__function_guard(result, c) ->
  (sum(result) = c)))))

axiom create__def_axiom2 :
  (forall c:int [create(c)]. (dynamic_invariant(c, true, true, true, true) ->
  (create(c) = { us_split_fields1 = { rec__notag_base__t__c = of_rep(c) }
  })))

 (* File "notag_ext.ads", line 12, characters 0-0 *)
goal defqtvc : (let notag_ext__test__a__assume = create1(1) : us_rep in
  (create__function_guard(create(1), 1) ->
  ((create__function_guard1(notag_ext__test__a__assume, 1) and
  (notag_ext__test__a__assume = create(1))) ->
  ((notag_ext__test__a__assume = a) -> (let notag_ext__test__b__assume =
  create1(2) : us_rep in (create__function_guard(create(2), 2) ->
  ((create__function_guard1(notag_ext__test__b__assume, 2) and
  (notag_ext__test__b__assume = create(2))) ->
  ((notag_ext__test__b__assume = b) -> (sum__function_guard(sum(a), a) ->
  (sum__function_guard(sum(b), b) -> (not (sum(a) = sum(b)))))))))))))
