(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type us_split_discrs = { rec__test_constrained__cc__b : bool
}

function us_split_discrs_rec__test_constrained__cc__b__projection(a: us_split_discrs) : bool =
  (a).rec__test_constrained__cc__b

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_rep = { us_split_discrs1 : us_split_discrs
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_int(((a).us_split_discrs1).rec__test_constrained__cc__b) = to_int(((b).us_split_discrs1).rec__test_constrained__cc__b)) then true else false)

predicate in_range1(rec__test_constrained__cc__b1: bool,
  a: us_split_discrs) =
  (rec__test_constrained__cc__b1 = (a).rec__test_constrained__cc__b)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic test_constrained__cc__b__first__bit : int

logic test_constrained__cc__b__last__bit : int

logic test_constrained__cc__b__position : int

axiom test_constrained__cc__b__first__bit_axiom :
  (0 <= test_constrained__cc__b__first__bit)

axiom test_constrained__cc__b__last__bit_axiom :
  (test_constrained__cc__b__first__bit <  test_constrained__cc__b__last__bit)

axiom test_constrained__cc__b__position_axiom :
  (0 <= test_constrained__cc__b__position)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type cc__ref = { cc__content : us_rep
}

function cc__ref_cc__content__projection(a: cc__ref) : us_rep =
  (a).cc__content

logic f : unit -> us_rep

logic f__function_guard : us_rep, unit -> prop

predicate default_initial_assumption(temp___expr_185: us_rep,
  temp___skip_top_level_186: bool) =
  (((temp___expr_185).us_split_discrs1).rec__test_constrained__cc__b = of_int(0))

type us_split_fields = { rec__test_constrained__cc_h__c : us_rep
}

function us_split_fields_rec__test_constrained__cc_h__c__projection(a: us_split_fields) : us_rep =
  (a).rec__test_constrained__cc_h__c

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep1 = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep1) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if (bool_eq1(((a).us_split_fields1).rec__test_constrained__cc_h__c,
  ((b).us_split_fields1).rec__test_constrained__cc_h__c) = true) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic test_constrained__cc_h__c__first__bit : int

logic test_constrained__cc_h__c__last__bit : int

logic test_constrained__cc_h__c__position : int

axiom test_constrained__cc_h__c__first__bit_axiom :
  (0 <= test_constrained__cc_h__c__first__bit)

axiom test_constrained__cc_h__c__last__bit_axiom :
  (test_constrained__cc_h__c__first__bit <  test_constrained__cc_h__c__last__bit)

axiom test_constrained__cc_h__c__position_axiom :
  (0 <= test_constrained__cc_h__c__position)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type cc_h__ref = { cc_h__content : us_rep1
}

function cc_h__ref_cc_h__content__projection(a: cc_h__ref) : us_rep1 =
  (a).cc_h__content

type us_rep2 = { rec__test_constrained__cc_acc__is_null_pointer : bool;
rec__test_constrained__cc_acc__pointer_address : int;
rec__test_constrained__cc_acc__pointer_value : us_rep1
}

function us_rep_rec__test_constrained__cc_acc__is_null_pointer__projection(a: us_rep2) : bool =
  (a).rec__test_constrained__cc_acc__is_null_pointer

function us_rep_rec__test_constrained__cc_acc__pointer_address__projection(a: us_rep2) : int =
  (a).rec__test_constrained__cc_acc__pointer_address

function us_rep_rec__test_constrained__cc_acc__pointer_value__projection(a: us_rep2) : us_rep1 =
  (a).rec__test_constrained__cc_acc__pointer_value

type us_rep__ref = { us_rep__content : us_rep2
}

function us_rep__ref___rep__content__projection(a: us_rep__ref) : us_rep2 =
  (a).us_rep__content

function bool_eq3(a: us_rep2, b: us_rep2) : bool =
  (if (((a).rec__test_constrained__cc_acc__is_null_pointer = (b).rec__test_constrained__cc_acc__is_null_pointer) and
  ((not ((a).rec__test_constrained__cc_acc__is_null_pointer = true)) ->
  (((a).rec__test_constrained__cc_acc__pointer_address = (b).rec__test_constrained__cc_acc__pointer_address) and
  ((a).rec__test_constrained__cc_acc__pointer_value = (b).rec__test_constrained__cc_acc__pointer_value)))) then true else false)

predicate rec__test_constrained__cc_acc__pointer_value__pred(a: us_rep2) =
  (not ((a).rec__test_constrained__cc_acc__is_null_pointer = true))

logic us_null_pointer : us_rep2

axiom us_null_pointer__def_axiom :
  ((us_null_pointer).rec__test_constrained__cc_acc__is_null_pointer = true)

logic dummy2 : us_rep2

type cc_acc__ref = { cc_acc__content : us_rep2
}

function cc_acc__ref_cc_acc__content__projection(a: cc_acc__ref) : us_rep2 =
  (a).cc_acc__content

logic f_acc : unit -> us_rep2

logic f_acc__function_guard : us_rep2, unit -> prop

predicate default_initial_assumption1(temp___expr_204: us_rep2,
  temp___skip_top_level_205: bool) =
  ((temp___expr_204).rec__test_constrained__cc_acc__is_null_pointer = true)

logic f_h : unit -> us_rep1

logic f_h__function_guard : us_rep1, unit -> prop

predicate default_initial_assumption2(temp___expr_194: us_rep1,
  temp___skip_top_level_195: bool) =
  (((((temp___expr_194).us_split_fields1).rec__test_constrained__cc_h__c).us_split_discrs1).rec__test_constrained__cc__b = of_int(0))

logic x__attr__constrained : bool

logic attr__ATTRIBUTE_ADDRESS : int

 (* File "test_constrained.adb", line 1, characters 0-0 *)
goal defqtvc :
  (forall x__split_discrs:bool. ((x__attr__constrained = false) ->
  (default_initial_assumption({ us_split_discrs1 = {
  rec__test_constrained__cc__b = x__split_discrs } }, false) ->
  (not (x__attr__constrained = true)))))
