(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : natural, natural -> bool

logic dummy4 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep2(x: natural) : int = naturalqtint(x)

logic of_rep2 : int -> natural

axiom inversion_axiom2 :
  (forall x:natural [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:natural [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

function to_rep3(x: positive) : int = positiveqtint(x)

logic of_rep3 : int -> positive

axiom inversion_axiom3 :
  (forall x:positive [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:positive [to_rep3(x)]. in_range1(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range1(x) ->
  (to_rep3(of_rep3(x)) = x)))

type t2s__ref = { t2s__content : us_t
}

function t2s__ref_t2s__content__projection(a: t2s__ref) : us_t =
  (a).t2s__content

type us_split_discrs = {
rec__ada___ada___ada__strings__superbounded__super_string__max_length :
positive
}

function us_split_discrs_rec__ada___ada___ada__strings__superbounded__super_string__max_length__projection(a: us_split_discrs) : positive =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__max_length

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__2__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__ada___ada___ada__strings__superbounded__super_string__current_length :
natural; rec__ada___ada___ada__strings__superbounded__super_string__data :
us_t
}

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__projection(a: us_split_fields) : natural =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__current_length

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__projection(a: us_split_fields) : us_t =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__2__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__2__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq6(a: us_rep, b: us_rep) : bool =
  (if ((to_rep3(((a).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length) = to_rep3(((b).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length)) and
  ((to_rep2(((a).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__current_length) = to_rep2(((b).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__current_length)) and
  (bool_eq4(((a).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data,
  ((b).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data) = true))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic ada___ada___ada__strings__superbounded__super_string__max_length__first__bit : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__last__bit : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__position : int

axiom ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__first__bit)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom :
  (ada___ada___ada__strings__superbounded__super_string__max_length__first__bit <  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__position)

logic ada___ada___ada__strings__superbounded__super_string__current_length__first__bit : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__last__bit : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__position : int

axiom ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__first__bit)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom :
  (ada___ada___ada__strings__superbounded__super_string__current_length__first__bit <  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__position)

logic ada___ada___ada__strings__superbounded__super_string__data__first__bit : int

logic ada___ada___ada__strings__superbounded__super_string__data__last__bit : int

logic ada___ada___ada__strings__superbounded__super_string__data__position : int

axiom ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__first__bit)

axiom ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom :
  (ada___ada___ada__strings__superbounded__super_string__data__first__bit <  ada___ada___ada__strings__superbounded__super_string__data__last__bit)

axiom ada___ada___ada__strings__superbounded__super_string__data__position_axiom :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type super_string__ref = { super_string__content : us_rep
}

function super_string__ref_super_string__content__projection(a: super_string__ref) : us_rep =
  (a).super_string__content

type tT92sP1

logic tT92sP1qtint : tT92sP1 -> int

axiom tT92sP1qtaxiom : (forall i:tT92sP1. (1 <= tT92sP1qtint(i)))

axiom tT92sP1qtaxiom1 : (forall i:tT92sP1. (tT92sP1qtint(i) <= 20))

predicate in_range4(x: int) = ((1 <= x) and (x <= 20))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : tT92sP1, tT92sP1 -> bool

logic dummy6 : tT92sP1

type tT92sP1__ref = { tT92sP1__content : tT92sP1
}

function tT92sP1__ref_tT92sP1__content__projection(a: tT92sP1__ref) : tT92sP1 =
  (a).tT92sP1__content

logic dummy7 : (int,character) farray

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq7 : (int,character) farray, (int,character) farray -> bool

type us_split_fields2 = {
rec__ada___ada___ada__strings__superbounded__super_string__current_length1 :
natural; rec__ada___ada___ada__strings__superbounded__super_string__data1 :
(int,character) farray
}

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__current_length__3__projection(a: us_split_fields2) : natural =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__current_length1

function us_split_fields_rec__ada___ada___ada__strings__superbounded__super_string__data__3__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__ada___ada___ada__strings__superbounded__super_string__data1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__4__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__4__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__ada___ada___ada__strings__superbounded__super_string__current_length =
  ((a).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length1;
  rec__ada___ada___ada__strings__superbounded__super_string__data =
  of_array(((a).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data1,
  1, 20) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__ada___ada___ada__strings__superbounded__super_string__current_length1 =
  ((r).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__current_length;
  rec__ada___ada___ada__strings__superbounded__super_string__data1 =
  to_array(((r).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data)
  } }

function bool_eq8(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep3(((a).us_split_discrs2).rec__ada___ada___ada__strings__superbounded__super_string__max_length) = to_rep3(((b).us_split_discrs2).rec__ada___ada___ada__strings__superbounded__super_string__max_length)) and
  ((to_rep2(((a).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length1) = to_rep2(((b).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length1)) and
  (bool_eq3(((a).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data1,
  1, 20,
  ((b).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__data1,
  1, 20) = true))) then true else false)

predicate in_range5(rec__ada___ada___ada__strings__superbounded__super_string__max_length1: int,
  a: us_rep) =
  (rec__ada___ada___ada__strings__superbounded__super_string__max_length1 = to_rep3(((a).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__max_length__position1 : int

axiom ada___ada___ada__strings__superbounded__super_string__max_length__first__bit_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__last__bit_axiom1 :
  (ada___ada___ada__strings__superbounded__super_string__max_length__first__bit1 <  ada___ada___ada__strings__superbounded__super_string__max_length__last__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__max_length__position_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__max_length__position1)

logic ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__current_length__position1 : int

axiom ada___ada___ada__strings__superbounded__super_string__current_length__first__bit_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__last__bit_axiom1 :
  (ada___ada___ada__strings__superbounded__super_string__current_length__first__bit1 <  ada___ada___ada__strings__superbounded__super_string__current_length__last__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__current_length__position_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__current_length__position1)

logic ada___ada___ada__strings__superbounded__super_string__data__first__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__data__last__bit1 : int

logic ada___ada___ada__strings__superbounded__super_string__data__position1 : int

axiom ada___ada___ada__strings__superbounded__super_string__data__first__bit_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__first__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__data__last__bit_axiom1 :
  (ada___ada___ada__strings__superbounded__super_string__data__first__bit1 <  ada___ada___ada__strings__superbounded__super_string__data__last__bit1)

axiom ada___ada___ada__strings__superbounded__super_string__data__position_axiom1 :
  (0 <= ada___ada___ada__strings__superbounded__super_string__data__position1)

logic user_eq8 : us_rep1, us_rep1 -> bool

logic dummy8 : us_rep1

type bounded_string__ref = { bounded_string__content : us_rep1
}

function bounded_string__ref_bounded_string__content__projection(a: bounded_string__ref) : us_rep1 =
  (a).bounded_string__content

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

predicate dynamic_invariant(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

logic length1 : us_rep1 -> int

logic length__function_guard : int, us_rep1 -> prop

logic to_bounded_string : us_t, int -> us_rep1

logic to_bounded_string__function_guard : us_rep1, us_t, int -> prop

predicate dynamic_invariant1(temp___expr_210: us_rep1,
  temp___is_init_206: bool, temp___skip_constant_207: bool,
  temp___do_toplevel_208: bool, temp___do_typ_inv_209: bool) =
  ((not (temp___skip_constant_207 = true)) -> in_range5(20,
  to_base(temp___expr_210)))

predicate default_initial_assumption(temp___expr_213: us_rep1,
  temp___skip_top_level_214: bool) =
  ((to_rep3(((temp___expr_213).us_split_discrs2).rec__ada___ada___ada__strings__superbounded__super_string__max_length) = 20) and
  (to_rep2(((temp___expr_213).us_split_fields3).rec__ada___ada___ada__strings__superbounded__super_string__current_length1) = 0))

type truncation

predicate in_range6(x: int) = ((0 <= x) and (x <= 2))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq9 : truncation, truncation -> bool

logic dummy9 : truncation

type truncation__ref = { truncation__content : truncation
}

function truncation__ref_truncation__content__projection(a: truncation__ref) : truncation =
  (a).truncation__content

predicate dynamic_invariant2(temp___expr_223: int, temp___is_init_219: bool,
  temp___skip_constant_220: bool, temp___do_toplevel_221: bool,
  temp___do_typ_inv_222: bool) = (((temp___is_init_219 = true) or
  (0 <= 2)) -> in_range6(temp___expr_223))

axiom to_bounded_string__post_axiom :
  (forall source:us_t.
  (forall drop:int [to_bounded_string(source, drop)].
  (((dynamic_invariant(source, true, true, true, true) and
  dynamic_invariant2(drop, true, true, true, true)) and
  ((20 <  length(source)) -> (not (drop = 2)))) ->
  (length1(to_bounded_string(source, drop)) = min(20, length(source))))))

axiom to_bounded_string__post_axiom1 :
  (forall source:us_t.
  (forall drop:int [to_bounded_string(source, drop)].
  (((dynamic_invariant(source, true, true, true, true) and
  dynamic_invariant2(drop, true, true, true, true)) and
  ((20 <  length(source)) -> (not (drop = 2)))) ->
  dynamic_invariant1(to_bounded_string(source, drop), true, false, true,
  true))))

type element_type__ref = { element_type__content : us_rep1
}

function element_type__ref_element_type__content__projection(a: element_type__ref) : us_rep1 =
  (a).element_type__content

type capacity_range

logic capacity_rangeqtint : capacity_range -> int

axiom capacity_rangeqtaxiom :
  (forall i:capacity_range. (0 <= capacity_rangeqtint(i)))

axiom capacity_rangeqtaxiom1 :
  (forall i:capacity_range. (capacity_rangeqtint(i) <= 100))

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq10 : capacity_range, capacity_range -> bool

logic dummy10 : capacity_range

type capacity_range__ref = { capacity_range__content : capacity_range
}

function capacity_range__ref_capacity_range__content__projection(a: capacity_range__ref) : capacity_range =
  (a).capacity_range__content

function to_rep4(x: capacity_range) : int = capacity_rangeqtint(x)

logic of_rep4 : int -> capacity_range

axiom inversion_axiom4 :
  (forall x:capacity_range [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 :
  (forall x:capacity_range [to_rep4(x)]. in_range7(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range7(x) ->
  (to_rep4(of_rep4(x)) = x)))

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs3 = { rec__repr2__vec__vector__capacity : capacity_range
}

function us_split_discrs_rec__repr2__vec__vector__capacity__projection(a: us_split_discrs3) : capacity_range =
  (a).rec__repr2__vec__vector__capacity

type us_split_discrs__ref1 = { us_split_discrs__content1 : us_split_discrs3
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref1) : us_split_discrs3 =
  (a).us_split_discrs__content1

type us_split_fields4 = { rec__repr2__vec__vector : us_main_type
}

function us_split_fields_rec__repr2__vec__vector__projection(a: us_split_fields4) : us_main_type =
  (a).rec__repr2__vec__vector

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_discrs4 : us_split_discrs3; us_split_fields5 :
us_split_fields4
}

function us_rep___split_discrs__projection(a: us_rep2) : us_split_discrs3 =
  (a).us_split_discrs4

function us_rep___split_fields__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq11(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep4(((a).us_split_discrs4).rec__repr2__vec__vector__capacity) = to_rep4(((b).us_split_discrs4).rec__repr2__vec__vector__capacity)) and
  (us_main_eq(((a).us_split_fields5).rec__repr2__vec__vector,
  ((b).us_split_fields5).rec__repr2__vec__vector) = true)) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic repr2__vec__vector__capacity__first__bit : int

logic repr2__vec__vector__capacity__last__bit : int

logic repr2__vec__vector__capacity__position : int

axiom repr2__vec__vector__capacity__first__bit_axiom :
  (0 <= repr2__vec__vector__capacity__first__bit)

axiom repr2__vec__vector__capacity__last__bit_axiom :
  (repr2__vec__vector__capacity__first__bit <  repr2__vec__vector__capacity__last__bit)

axiom repr2__vec__vector__capacity__position_axiom :
  (0 <= repr2__vec__vector__capacity__position)

logic user_eq11 : us_rep2, us_rep2 -> bool

logic dummy11 : us_rep2

type vector__ref = { vector__content : us_rep2
}

function vector__ref_vector__content__projection(a: vector__ref) : us_rep2 =
  (a).vector__content

logic length2 : us_rep2 -> int

logic length__function_guard1 : int, us_rep2 -> prop

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_rep3

logic bool_eq12 : us_rep3, us_rep3 -> bool

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic user_eq12 : us_rep3, us_rep3 -> bool

logic dummy12 : us_rep3

type sequence__ref = { sequence__content : us_rep3
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep3 =
  (a).sequence__content

type element_type__ref1 = { element_type__content1 : us_rep1
}

function element_type__ref_element_type__content__2__projection(a: element_type__ref1) : us_rep1 =
  (a).element_type__content1

logic model : us_rep2 -> us_rep3

logic model__function_guard : us_rep3, us_rep2 -> prop

logic length3 : us_rep3 -> int

logic length__function_guard2 : int, us_rep3 -> prop

function last2(container: us_rep3) : int = (0 + length3(container))

logic last__function_guard : int, us_rep3 -> prop

function last_index(container: us_rep2) : int = last2(model(container))

logic last_index__function_guard : int, us_rep2 -> prop

logic get : us_rep3, int -> us_rep1

logic get__function_guard : us_rep1, us_rep3, int -> prop

logic oeq : us_rep1, us_rep1 -> bool

logic oeq__function_guard : bool, us_rep1, us_rep1 -> prop

function constant_range(container: us_rep3, fst: int, lst: int,
  item: us_rep1) : bool =
  (if (forall i:int. (((fst <= i) and (i <= lst)) ->
      (oeq(of_base(to_base(get(container, i))),
      of_base(to_base(item))) = true))) then true else false)

logic constant_range__function_guard : bool, us_rep3, int, int,
  us_rep1 -> prop

logic to_vector : us_rep1, int -> us_rep2

logic to_vector__function_guard : us_rep2, us_rep1, int -> prop

predicate dynamic_invariant3(temp___expr_184: int, temp___is_init_180: bool,
  temp___skip_constant_181: bool, temp___do_toplevel_182: bool,
  temp___do_typ_inv_183: bool) = (((temp___is_init_180 = true) or
  (0 <= 100)) -> in_range7(temp___expr_184))

axiom to_vector__post_axiom :
  (forall new_item:us_rep1.
  (forall length4:int [to_vector(new_item, length4)].
  (dynamic_invariant3(length4, true, true, true, true) ->
  (length2(to_vector(new_item, length4)) = length4))))

axiom to_vector__post_axiom1 :
  (forall new_item:us_rep1.
  (forall length4:int [to_vector(new_item, length4)].
  (dynamic_invariant3(length4, true, true, true, true) -> (let result =
  to_vector(new_item, length4) : us_rep2 in (constant_range(model(result), 1,
  last_index(result), of_base(to_base(new_item))) = true)))))

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic repr2__vec__vector__capacity__first__bit1 : int

logic repr2__vec__vector__capacity__last__bit1 : int

logic repr2__vec__vector__capacity__position1 : int

axiom repr2__vec__vector__capacity__first__bit_axiom1 :
  (0 <= repr2__vec__vector__capacity__first__bit1)

axiom repr2__vec__vector__capacity__last__bit_axiom1 :
  (repr2__vec__vector__capacity__first__bit1 <  repr2__vec__vector__capacity__last__bit1)

axiom repr2__vec__vector__capacity__position_axiom1 :
  (0 <= repr2__vec__vector__capacity__position1)

logic user_eq13 : us_rep2, us_rep2 -> bool

logic dummy13 : us_rep2

type vec_t__ref = { vec_t__content : us_rep2
}

function vec_t__ref_vec_t__content__projection(a: vec_t__ref) : us_rep2 =
  (a).vec_t__content

logic x__split_discrs : us_split_discrs3

logic attr__ATTRIBUTE_ADDRESS : int

logic temp___String_Literal_327 : unit -> (int,character) farray

predicate dynamic_invariant4(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range3(temp___expr_39))

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant6(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant7(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

type count_type

logic count_typeqtint : count_type -> int

axiom count_typeqtaxiom : (forall i:count_type. (0 <= count_typeqtint(i)))

axiom count_typeqtaxiom1 :
  (forall i:count_type. (count_typeqtint(i) <= 2147483647))

predicate in_range8(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq13(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq14 : count_type, count_type -> bool

logic dummy14 : count_type

type count_type__ref = { count_type__content : count_type
}

function count_type__ref_count_type__content__projection(a: count_type__ref) : count_type =
  (a).count_type__content

predicate dynamic_invariant8(temp___expr_177: int, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  (0 <= 2147483647)) -> in_range8(temp___expr_177))

predicate dynamic_invariant9(temp___expr_203: us_rep,
  temp___is_init_199: bool, temp___skip_constant_200: bool,
  temp___do_toplevel_201: bool, temp___do_typ_inv_202: bool) =
  (let temp___204 =
  ((temp___expr_203).us_split_discrs1).rec__ada___ada___ada__strings__superbounded__super_string__max_length
  : positive in (dynamic_property(1, to_rep3(temp___204),
  first1(((temp___expr_203).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data),
  last1(((temp___expr_203).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data)) and
  ((first1(((temp___expr_203).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data) = 1) and
  (last1(((temp___expr_203).us_split_fields1).rec__ada___ada___ada__strings__superbounded__super_string__data) = to_rep3(temp___204)))))

type length_range

logic length_rangeqtint : length_range -> int

axiom length_rangeqtaxiom :
  (forall i:length_range. (0 <= length_rangeqtint(i)))

axiom length_rangeqtaxiom1 :
  (forall i:length_range. (length_rangeqtint(i) <= 20))

predicate in_range9(x: int) = ((0 <= x) and (x <= 20))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE8 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check8 : us_image -> prop

logic attr__ATTRIBUTE_VALUE8 : us_image -> int

logic user_eq15 : length_range, length_range -> bool

logic dummy15 : length_range

type length_range__ref = { length_range__content : length_range
}

function length_range__ref_length_range__content__projection(a: length_range__ref) : length_range =
  (a).length_range__content

predicate dynamic_invariant10(temp___expr_230: int, temp___is_init_226: bool,
  temp___skip_constant_227: bool, temp___do_toplevel_228: bool,
  temp___do_typ_inv_229: bool) = (((temp___is_init_226 = true) or
  (0 <= 20)) -> in_range9(temp___expr_230))

axiom length__post_axiom :
  (forall source:us_rep1 [length1(source)]. (dynamic_invariant1(source, true,
  true, true, true) -> dynamic_invariant10(length1(source), true, false,
  true, true)))

type extended_index

logic extended_indexqtint : extended_index -> int

axiom extended_indexqtaxiom :
  (forall i:extended_index. (0 <= extended_indexqtint(i)))

axiom extended_indexqtaxiom1 :
  (forall i:extended_index. (extended_indexqtint(i) <= 101))

predicate in_range10(x: int) = ((0 <= x) and (x <= 101))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE9 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check9 : us_image -> prop

logic attr__ATTRIBUTE_VALUE9 : us_image -> int

logic user_eq16 : extended_index, extended_index -> bool

logic dummy16 : extended_index

type extended_index__ref = { extended_index__content : extended_index
}

function extended_index__ref_extended_index__content__2__projection(a: extended_index__ref) : extended_index =
  (a).extended_index__content

predicate dynamic_invariant11(temp___expr_297: int, temp___is_init_293: bool,
  temp___skip_constant_294: bool, temp___do_toplevel_295: bool,
  temp___do_typ_inv_296: bool) = (((temp___is_init_293 = true) or
  (0 <= 101)) -> in_range10(temp___expr_297))

function capacity(container: us_rep2) : int =
  to_rep4(((container).us_split_discrs4).rec__repr2__vec__vector__capacity)

logic capacity__function_guard : int, us_rep2 -> prop

axiom length__post_axiom1 :
  (forall container:us_rep2 [length2(container)].
  (length2(container) <= capacity(container)))

axiom length__post_axiom2 :
  (forall container:us_rep2 [length2(container)].
  dynamic_invariant3(length2(container), true, false, true, true))

predicate default_initial_assumption1(temp___expr_252: us_rep3,
  temp___skip_top_level_253: bool) =
  ((not (temp___skip_top_level_253 = true)) ->
  (length3(temp___expr_252) = 0))

axiom model__post_axiom :
  (forall container:us_rep2 [model(container)].
  (length3(model(container)) = length2(container)))

axiom user_eq__def_axiom :
  (forall a:us_rep1. forall b:us_rep1 [user_eq8(a, b)]. (user_eq8(a,
  b) = oeq(of_base(to_base(a)), of_base(to_base(b)))))

type extended_index1

logic extended_indexqtint1 : extended_index1 -> int

axiom extended_indexqtaxiom2 :
  (forall i:extended_index1. (0 <= extended_indexqtint1(i)))

axiom extended_indexqtaxiom3 :
  (forall i:extended_index1. (extended_indexqtint1(i) <= 100))

predicate in_range11(x: int) = ((0 <= x) and (x <= 100))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE10 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check10 : us_image -> prop

logic attr__ATTRIBUTE_VALUE10 : us_image -> int

logic user_eq17 : extended_index1, extended_index1 -> bool

logic dummy17 : extended_index1

type extended_index__ref1 = { extended_index__content1 : extended_index1
}

function extended_index__ref_extended_index__content__projection(a: extended_index__ref1) : extended_index1 =
  (a).extended_index__content1

predicate dynamic_invariant12(temp___expr_280: int, temp___is_init_276: bool,
  temp___skip_constant_277: bool, temp___do_toplevel_278: bool,
  temp___do_typ_inv_279: bool) = (((temp___is_init_276 = true) or
  (0 <= 100)) -> in_range11(temp___expr_280))

axiom length__post_axiom3 :
  (forall container:us_rep3 [length3(container)].
  ((0 + length3(container)) <= 100))

axiom length__post_axiom4 :
  (forall container:us_rep3 [length3(container)].
  dynamic_invariant8(length3(container), true, false, true, true))

axiom get__post_axiom :
  (forall container:us_rep3.
  (forall position:int [get(container, position)].
  ((dynamic_invariant12(position, true, true, true, true) and
  ((1 <= position) and (position <= last2(container)))) -> in_range5(20,
  to_base(get(container, position))))))

axiom user_eq__def_axiom1 :
  (forall a:us_rep1. forall b:us_rep1 [user_eq8(a, b)]. (user_eq8(a,
  b) = oeq(of_base(to_base(a)), of_base(to_base(b)))))

 (* File "repr3.ads", line 5, characters 0-0 *)
goal defqtvc : (let o = of_array(temp___String_Literal_327(void), 1, 0)
  : us_t in (let o1 = to_bounded_string(o, 2) : us_rep1 in
  ((dynamic_invariant1(o1, true, false, true, true) and
  (length1(o1) = min(20, length(o)))) -> in_range5(20, to_base(o1)))))
