(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic n : int

logic attr__ATTRIBUTE_ADDRESS : int

logic half_range : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type unsigned_byte

logic unsigned_byteqtint : unsigned_byte -> int

axiom unsigned_byteqtaxiom :
  (forall i:unsigned_byte. (0 <= unsigned_byteqtint(i)))

axiom unsigned_byteqtaxiom1 :
  (forall i:unsigned_byte. (unsigned_byteqtint(i) <= 255))

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : unsigned_byte, unsigned_byte -> bool

logic dummy : unsigned_byte

type unsigned_byte__ref = { unsigned_byte__content : unsigned_byte
}

function unsigned_byte__ref_unsigned_byte__content__projection(a: unsigned_byte__ref) : unsigned_byte =
  (a).unsigned_byte__content

predicate dynamic_invariant(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (0 <= 255)) -> in_range1(temp___expr_178))

type t31b

logic t31bqtint : t31b -> int

axiom t31bqtaxiom : (forall i:t31b. (0 <= t31bqtint(i)))

axiom t31bqtaxiom1 : (forall i:t31b. (t31bqtint(i) <= 127))

predicate in_range2(x: int) = ((0 <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : t31b, t31b -> bool

logic dummy1 : t31b

type t31b__ref = { t31b__content : t31b
}

function t31b__ref_t31b__content__projection(a: t31b__ref) : t31b =
  (a).t31b__content

axiom half_range__def_axiom : (half_range = 127)

 (* File "arithmetic.adb", line 129, characters 0-0 *)
goal defqtvc :
  (forall r:int. (dynamic_invariant(n, true, false, true, true) ->
  (dynamic_invariant(half_range, true, false, true, true) ->
  (dynamic_invariant(r, false, false, true, true) ->
  (forall r1:int.
  ((exists i:int. ((i = 0) and (if (andb((if (0 <= i) then true else false),
   (if (i <= 127) then true else false)) = true) then (exists r2:int.
                                                      ((r2 = i) and
                                                      (if (orb((if ((r2 + r2) = n) then true else false),
                                                      (if (((r2 + r2) + 1) = n) then true else false)) = true) then (r1 = r2) else 
                                                      (exists r3:int.
                                                      exists i1:int.
                                                      ((((r3 = i1) and
                                                      (((r3 + r3) + 1) <  n)) and
                                                      in_range1(r3)) and
                                                      ((andb((if (in_range2(i1) and
                                                      dynamic_invariant(r3,
                                                      false, true, true,
                                                      true)) then true else false),
                                                      (if ((0 <= i1) and
                                                      (i1 <= 127)) then true else false)) = true) and
                                                      (if (i1 = 127) then (r1 = r3) else 
                                                      (exists i2:int.
                                                      ((i2 = (i1 + 1)) and
                                                      ((r1 = i2) and
                                                      (orb((if ((r1 + r1) = n) then true else false),
                                                      (if (((r1 + r1) + 1) = n) then true else false)) = true))))))))))) else (r1 = r)))) ->
  (forall arithmetic__halve_c__result:int.
  ((arithmetic__halve_c__result = r1) ->
  (((arithmetic__halve_c__result + arithmetic__halve_c__result) = n) or
  (((arithmetic__halve_c__result + arithmetic__halve_c__result) + 1) = n))))))))))
