(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic dummy1 : (int,natural) farray

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq1 : (int,natural) farray, (int,natural) farray -> bool

type us_split_fields = { rec__declare_iterable__container__content :
(int,natural) farray
}

function us_split_fields_rec__declare_iterable__container__content__projection(a: us_split_fields) : (int,natural) farray =
  (a).rec__declare_iterable__container__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq3(a: us_rep, b: us_rep) : bool =
  (if (bool_eq2(((a).us_split_fields1).rec__declare_iterable__container__content,
  1, 100, ((b).us_split_fields1).rec__declare_iterable__container__content,
  1, 100) = true) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic declare_iterable__container__content__first__bit : int

logic declare_iterable__container__content__last__bit : int

logic declare_iterable__container__content__position : int

axiom declare_iterable__container__content__first__bit_axiom :
  (0 <= declare_iterable__container__content__first__bit)

axiom declare_iterable__container__content__last__bit_axiom :
  (declare_iterable__container__content__first__bit <  declare_iterable__container__content__last__bit)

axiom declare_iterable__container__content__position_axiom :
  (0 <= declare_iterable__container__content__position)

logic user_eq2 : us_rep, us_rep -> bool

logic dummy2 : us_rep

type container__ref = { container__content : us_rep
}

function container__ref_container__content__projection(a: container__ref) : us_rep =
  (a).container__content

logic has_element : us_rep, int -> bool

logic has_element__function_guard : bool, us_rep, int -> prop

type cursor

logic cursorqtint : cursor -> int

axiom cursorqtaxiom : (forall i:cursor. (0 <= cursorqtint(i)))

axiom cursorqtaxiom1 : (forall i:cursor. (cursorqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : cursor, cursor -> bool

logic dummy3 : cursor

type cursor__ref = { cursor__content : cursor
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : cursor =
  (a).cursor__content

predicate dynamic_invariant(temp___expr_191: int, temp___is_init_187: bool,
  temp___skip_constant_188: bool, temp___do_toplevel_189: bool,
  temp___do_typ_inv_190: bool) = (((temp___is_init_187 = true) or
  (0 <= 100)) -> in_range2(temp___expr_191))

type valid_cursor

logic valid_cursorqtint : valid_cursor -> int

axiom valid_cursorqtaxiom :
  (forall i:valid_cursor. (1 <= valid_cursorqtint(i)))

axiom valid_cursorqtaxiom1 :
  (forall i:valid_cursor. (valid_cursorqtint(i) <= 100))

predicate in_range3(x: int) = ((1 <= x) and (x <= 100))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : valid_cursor, valid_cursor -> bool

logic dummy4 : valid_cursor

type valid_cursor__ref = { valid_cursor__content : valid_cursor
}

function valid_cursor__ref_valid_cursor__content__projection(a: valid_cursor__ref) : valid_cursor =
  (a).valid_cursor__content

axiom has_element__def_axiom :
  (forall x:us_rep.
  (forall c:int [has_element(x, c)]. ((has_element(x, c) = true) ->
  in_range3(c))))

axiom has_element__def_axiom1 :
  (forall x:us_rep.
  (forall c:int [has_element(x, c)]. (in_range3(c) -> (has_element(x,
  c) = true))))

logic next : us_rep, int -> int

logic next__function_guard : int, us_rep, int -> prop

axiom next__post_axiom :
  (forall x:us_rep. forall c:int. has_element__function_guard(has_element(x,
  c), x, c))

axiom next__post_axiom1 :
  (forall x:us_rep.
  (forall c:int [next(x, c)]. ((dynamic_invariant(c, true, true, true,
  true) and (has_element(x, c) = true)) -> (let result = next(x, c) : int in
  (next__function_guard(result, x, c) -> dynamic_invariant(result, true,
  false, true, true))))))

axiom next__def_axiom :
  (forall x:us_rep.
  (forall c:int [next(x, c)]. (dynamic_invariant(c, true, true, true,
  true) -> (next(x, c) = (if (c = 100) then 0 else (c + 1))))))

logic first : us_rep -> int

logic first__function_guard : int, us_rep -> prop

axiom first__post_axiom :
  (forall x:us_rep [first(x)]. (let result = first(x) : int in
  (first__function_guard(result, x) -> dynamic_invariant(result, true, false,
  true, true))))

axiom first__def_axiom : (forall x:us_rep [first(x)]. (first(x) = 1))

logic element : us_rep, int -> int

logic element__function_guard : int, us_rep, int -> prop

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_39))

axiom element__post_axiom :
  (forall x:us_rep. forall c:int. has_element__function_guard(has_element(x,
  c), x, c))

axiom element__post_axiom1 :
  (forall x:us_rep.
  (forall c:int [element(x, c)]. ((dynamic_invariant(c, true, true, true,
  true) and (has_element(x, c) = true)) -> (let result = element(x, c)
  : int in (element__function_guard(result, x, c) ->
  dynamic_invariant1(result, true, false, true, true))))))

axiom element__def_axiom :
  (forall x:us_rep.
  (forall c:int [element(x, c)]. (dynamic_invariant(c, true, true, true,
  true) -> (element(x,
  c) = to_rep((((x).us_split_fields1).rec__declare_iterable__container__content[c]))))))

logic from_nat_array : (int,natural) farray -> us_rep

logic from_nat_array__function_guard : us_rep, (int,natural) farray -> prop

axiom from_nat_array__def_axiom :
  (forall a:(int,natural) farray [from_nat_array(a)]. (from_nat_array(a) = {
  us_split_fields1 = { rec__declare_iterable__container__content = a } }))

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type us_split_fields2 = { rec__for_loop_iterable__container_holder__content :
us_rep
}

function us_split_fields_rec__for_loop_iterable__container_holder__content__projection(a: us_split_fields2) : us_rep =
  (a).rec__for_loop_iterable__container_holder__content

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq6(a: us_rep1, b: us_rep1) : bool =
  (if (bool_eq3(((a).us_split_fields3).rec__for_loop_iterable__container_holder__content,
  ((b).us_split_fields3).rec__for_loop_iterable__container_holder__content) = true) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic for_loop_iterable__container_holder__content__first__bit : int

logic for_loop_iterable__container_holder__content__last__bit : int

logic for_loop_iterable__container_holder__content__position : int

axiom for_loop_iterable__container_holder__content__first__bit_axiom :
  (0 <= for_loop_iterable__container_holder__content__first__bit)

axiom for_loop_iterable__container_holder__content__last__bit_axiom :
  (for_loop_iterable__container_holder__content__first__bit <  for_loop_iterable__container_holder__content__last__bit)

axiom for_loop_iterable__container_holder__content__position_axiom :
  (0 <= for_loop_iterable__container_holder__content__position)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type container_holder__ref = { container_holder__content : us_rep1
}

function container_holder__ref_container_holder__content__projection(a: container_holder__ref) : us_rep1 =
  (a).container_holder__content

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic for_loop_iterable__p4__a__aggregate_def : int -> (int,natural) farray

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 0)

axiom def_axiom :
  (forall temp___284:int. (dynamic_invariant1(temp___284, true, true, true,
  true) ->
  (forall temp___285:int.
  ((for_loop_iterable__p4__a__aggregate_def(temp___284)[temp___285]) = rliteral))))

predicate dynamic_invariant2(temp___expr_198: int, temp___is_init_194: bool,
  temp___skip_constant_195: bool, temp___do_toplevel_196: bool,
  temp___do_typ_inv_197: bool) = (((temp___is_init_194 = true) or
  (1 <= 100)) -> in_range3(temp___expr_198))

 (* File "for_loop_iterable.adb", line 37, characters 0-0 *)
goal defqtvc :
  (forall e:int.
  (forall a:(int,natural) farray.
  ((a = for_loop_iterable__p4__a__aggregate_def(0)) ->
  (let for_loop_iterable__p4__g__assume = from_nat_array(a) : us_rep in
  ((from_nat_array__function_guard(for_loop_iterable__p4__g__assume, a) and
  (for_loop_iterable__p4__g__assume = { us_split_fields1 = {
  rec__declare_iterable__container__content = a } })) ->
  (forall g__split_fields:(int,natural) farray. (({
  rec__declare_iterable__container__content = g__split_fields
  } = (for_loop_iterable__p4__g__assume).us_split_fields1) ->
  (forall h__split_fields:(int,natural) farray.
  ((h__split_fields = g__split_fields) -> (let o = { us_split_fields1 = {
  rec__declare_iterable__container__content = h__split_fields } } : us_rep in
  (let o1 = first(o) : int in ((first__function_guard(o1, o) and
  (dynamic_invariant(o1, true, false, true, true) and (o1 = 1))) ->
  (forall e1:int. ((let o2 = { us_split_fields1 = {
  rec__declare_iterable__container__content = h__split_fields } } : us_rep in
  (let o3 = has_element(o2, o1) : bool in ((has_element__function_guard(o3,
  o2, o1) and ((o3 = true) <-> in_range3(o1))) and
  (if (o3 = true) then (let o4 = { us_split_fields1 = {
  rec__declare_iterable__container__content = h__split_fields } } : us_rep in
  (let o5 = element(o4, o1) : int in ((element__function_guard(o5, o4,
  o1) and (dynamic_invariant1(o5, true, false, true, true) and
  (o5 = to_rep((h__split_fields[o1]))))) and
  (e1 = o5)))) else (e1 = e))))) -> (let o2 = { us_split_fields1 = {
  rec__declare_iterable__container__content = h__split_fields } } : us_rep in
  (let o3 = has_element(o2, o1) : bool in ((has_element__function_guard(o3,
  o2, o1) and ((o3 = true) <-> in_range3(o1))) -> ((o3 = true) ->
  (forall h__split_fields1:(int,natural) farray. forall e2:int.
  forall temp___291:int.
  ((forall h__split_fields2:(int,natural) farray. forall temp___2911:int.
   has_element__function_guard(has_element({ us_split_fields1 = {
   rec__declare_iterable__container__content = h__split_fields2 } },
   temp___2911), { us_split_fields1 = {
   rec__declare_iterable__container__content = h__split_fields2 } },
   temp___2911)) ->
  ((forall h__split_fields2:(int,natural) farray. forall temp___2911:int.
   element__function_guard(element({ us_split_fields1 = {
   rec__declare_iterable__container__content = h__split_fields2 } },
   temp___2911), { us_split_fields1 = {
   rec__declare_iterable__container__content = h__split_fields2 } },
   temp___2911)) ->
  ((andb((if true then true else false), (if ((has_element({
  us_split_fields1 = { rec__declare_iterable__container__content =
  h__split_fields1 } }, temp___291) = true) and (e2 = element({
  us_split_fields1 = { rec__declare_iterable__container__content =
  h__split_fields1 } }, temp___291))) then true else false)) = true) ->
  (forall declare_iterable__set__x__fields:(int,natural) farray.
  (forall h__split_fields2:(int,natural) farray.
  ((h__split_fields2 = declare_iterable__set__x__fields) -> ((e2 = 0) ->
  (let o4 = { us_split_fields1 = {
  rec__declare_iterable__container__content = h__split_fields2 } }
  : us_rep in (let o5 = next(o4, temp___291) : int in
  ((next__function_guard(o5, o4, temp___291) and (dynamic_invariant(o5, true,
  false, true, true) and
  (o5 = (if (temp___291 = 100) then 0 else (temp___291 + 1))))) -> (let o6 =
  { us_split_fields1 = { rec__declare_iterable__container__content =
  h__split_fields2 } } : us_rep in (let o7 = has_element(o6, o5) : bool in
  ((has_element__function_guard(o7, o6, o5) and ((o7 = true) <->
  in_range3(o5))) -> ((o7 = true) ->
  ((forall temp___2911:int. forall o8:us_rep.
   has_element__function_guard(has_element(o8, temp___2911), o8,
   temp___2911)) ->
  (has_element({ us_split_fields1 = {
  rec__declare_iterable__container__content = h__split_fields2 } },
  temp___291) = true)))))))))))))))))))))))))))))))))))
