(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

logic cpu_id : int

logic attr__ATTRIBUTE_ADDRESS : int

type max_lsid_type

logic max_lsid_typeqtint : max_lsid_type -> int

axiom max_lsid_typeqtaxiom :
  (forall i:max_lsid_type. (0 <= max_lsid_typeqtint(i)))

axiom max_lsid_typeqtaxiom1 :
  (forall i:max_lsid_type. (max_lsid_typeqtint(i) <= 5))

predicate in_range1(x: int) = ((0 <= x) and (x <= 5))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : max_lsid_type, max_lsid_type -> bool

logic dummy1 : max_lsid_type

type max_lsid_type__ref = { max_lsid_type__content : max_lsid_type
}

function max_lsid_type__ref_max_lsid_type__content__projection(a: max_lsid_type__ref) : max_lsid_type =
  (a).max_lsid_type__content

function to_rep1(x: max_lsid_type) : int = max_lsid_typeqtint(x)

logic of_rep1 : int -> max_lsid_type

axiom inversion_axiom1 :
  (forall x:max_lsid_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:max_lsid_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type tmax_lsid_typeB

logic tmax_lsid_typeBqtint : tmax_lsid_typeB -> int

axiom tmax_lsid_typeBqtaxiom :
  (forall i:tmax_lsid_typeB. ((- 128) <= tmax_lsid_typeBqtint(i)))

axiom tmax_lsid_typeBqtaxiom1 :
  (forall i:tmax_lsid_typeB. (tmax_lsid_typeBqtint(i) <= 127))

predicate in_range2(x: int) = (((- 128) <= x) and (x <= 127))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : tmax_lsid_typeB, tmax_lsid_typeB -> bool

logic dummy2 : tmax_lsid_typeB

type tmax_lsid_typeB__ref = { tmax_lsid_typeB__content : tmax_lsid_typeB
}

function tmax_lsid_typeB__ref_tmax_lsid_typeB__content__projection(a: tmax_lsid_typeB__ref) : tmax_lsid_typeB =
  (a).tmax_lsid_typeB__content

function to_rep2(x: tmax_lsid_typeB) : int = tmax_lsid_typeBqtint(x)

logic of_rep2 : int -> tmax_lsid_typeB

axiom inversion_axiom2 :
  (forall x:tmax_lsid_typeB [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:tmax_lsid_typeB [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep((a[temp___idx_159])) = to_rep((b[((b__first - a__first) + temp___idx_159)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_159:int. (((a__first <= temp___idx_159) and
  (temp___idx_159 <= a__last)) ->
  (to_rep((a[temp___idx_159])) = to_rep((b[((b__first - a__first) + temp___idx_159)]))))))))

type t

logic first : t -> tmax_lsid_typeB

logic last : t -> tmax_lsid_typeB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type state_array__ref = { state_array__content : us_t
}

function state_array__ref_state_array__content__projection(a: state_array__ref) : us_t =
  (a).state_array__content

type t9s__ref = { t9s__content : us_t
}

function t9s__ref_t9s__content__projection(a: t9s__ref) : us_t =
  (a).t9s__content

type us_split_discrs = { rec__foo__subject_state__max_id : max_lsid_type
}

function us_split_discrs_rec__foo__subject_state__max_id__projection(a: us_split_discrs) : max_lsid_type =
  (a).rec__foo__subject_state__max_id

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__foo__subject_state__states : us_t
}

function us_split_fields_rec__foo__subject_state__states__projection(a: us_split_fields) : us_t =
  (a).rec__foo__subject_state__states

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__foo__subject_state__max_id) = to_rep1(((b).us_split_discrs1).rec__foo__subject_state__max_id)) and
  (bool_eq4(((a).us_split_fields1).rec__foo__subject_state__states,
  ((b).us_split_fields1).rec__foo__subject_state__states) = true)) then true else false)

predicate in_range3(rec__foo__subject_state__max_id1: int,
  a: us_split_discrs) =
  (rec__foo__subject_state__max_id1 = to_rep1((a).rec__foo__subject_state__max_id))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic foo__subject_state__max_id__first__bit : int

logic foo__subject_state__max_id__last__bit : int

logic foo__subject_state__max_id__position : int

axiom foo__subject_state__max_id__first__bit_axiom :
  (0 <= foo__subject_state__max_id__first__bit)

axiom foo__subject_state__max_id__last__bit_axiom :
  (foo__subject_state__max_id__first__bit <  foo__subject_state__max_id__last__bit)

axiom foo__subject_state__max_id__position_axiom :
  (0 <= foo__subject_state__max_id__position)

logic foo__subject_state__states__first__bit : int

logic foo__subject_state__states__last__bit : int

logic foo__subject_state__states__position : int

axiom foo__subject_state__states__first__bit_axiom :
  (0 <= foo__subject_state__states__first__bit)

axiom foo__subject_state__states__last__bit_axiom :
  (foo__subject_state__states__first__bit <  foo__subject_state__states__last__bit)

axiom foo__subject_state__states__position_axiom :
  (0 <= foo__subject_state__states__position)

logic user_eq4 : us_rep, us_rep -> bool

logic dummy4 : us_rep

type subject_state__ref = { subject_state__content : us_rep
}

function subject_state__ref_subject_state__content__projection(a: subject_state__ref) : us_rep =
  (a).subject_state__content

type t10s__ref = { t10s__content : us_t
}

function t10s__ref_t10s__content__projection(a: t10s__ref) : us_t =
  (a).t10s__content

type us_split_fields2 = { rec__foo__subject_state__states1 : us_t
}

function us_split_fields_rec__foo__subject_state__states__2__projection(a: us_split_fields2) : us_t =
  (a).rec__foo__subject_state__states1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__foo__subject_state__states =
  of_array(to_array(((a).us_split_fields3).rec__foo__subject_state__states1),
  first1(((a).us_split_fields3).rec__foo__subject_state__states1),
  last1(((a).us_split_fields3).rec__foo__subject_state__states1)) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__foo__subject_state__states1 =
  of_array(to_array(((r).us_split_fields1).rec__foo__subject_state__states),
  first1(((r).us_split_fields1).rec__foo__subject_state__states),
  last1(((r).us_split_fields1).rec__foo__subject_state__states)) } }

function bool_eq6(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs2).rec__foo__subject_state__max_id) = to_rep1(((b).us_split_discrs2).rec__foo__subject_state__max_id)) and
  (bool_eq4(((a).us_split_fields3).rec__foo__subject_state__states1,
  ((b).us_split_fields3).rec__foo__subject_state__states1) = true)) then true else false)

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic foo__subject_state__max_id__first__bit1 : int

logic foo__subject_state__max_id__last__bit1 : int

logic foo__subject_state__max_id__position1 : int

axiom foo__subject_state__max_id__first__bit_axiom1 :
  (0 <= foo__subject_state__max_id__first__bit1)

axiom foo__subject_state__max_id__last__bit_axiom1 :
  (foo__subject_state__max_id__first__bit1 <  foo__subject_state__max_id__last__bit1)

axiom foo__subject_state__max_id__position_axiom1 :
  (0 <= foo__subject_state__max_id__position1)

logic foo__subject_state__states__first__bit1 : int

logic foo__subject_state__states__last__bit1 : int

logic foo__subject_state__states__position1 : int

axiom foo__subject_state__states__first__bit_axiom1 :
  (0 <= foo__subject_state__states__first__bit1)

axiom foo__subject_state__states__last__bit_axiom1 :
  (foo__subject_state__states__first__bit1 <  foo__subject_state__states__last__bit1)

axiom foo__subject_state__states__position_axiom1 :
  (0 <= foo__subject_state__states__position1)

logic user_eq5 : us_rep1, us_rep1 -> bool

logic dummy5 : us_rep1

type tstatesS__ref = { tstatesS__content : us_rep1
}

function tstatesS__ref_tstatesS__content__projection(a: tstatesS__ref) : us_rep1 =
  (a).tstatesS__content

logic states__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

type map__ref1 = { map__content1 : (int,max_lsid_type) farray
}

logic slide1 : (int,max_lsid_type) farray, int,
  int -> (int,max_lsid_type) farray

axiom slide_eq1 :
  (forall a:(int,max_lsid_type) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,max_lsid_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq7(a: (int,max_lsid_type) farray, a__first: int, a__last: int,
  b: (int,max_lsid_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,max_lsid_type) farray. forall b:(int,max_lsid_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,max_lsid_type) farray. forall b:(int,max_lsid_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,max_lsid_type) farray. forall b:(int,max_lsid_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,max_lsid_type) farray. forall b:(int,max_lsid_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq7(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

logic cpu_lsid_last : (int,max_lsid_type) farray

logic attr__ATTRIBUTE_ADDRESS2 : int

predicate dynamic_invariant(temp___expr_217: us_rep1,
  temp___is_init_213: bool, temp___skip_constant_214: bool,
  temp___do_toplevel_215: bool, temp___do_typ_inv_216: bool) =
  (((not (temp___skip_constant_214 = true)) ->
  in_range3(to_rep1((cpu_lsid_last[cpu_id])),
  (to_base(temp___expr_217)).us_split_discrs1)) and (dynamic_property(0,
  to_rep1((cpu_lsid_last[cpu_id])),
  first1(((temp___expr_217).us_split_fields3).rec__foo__subject_state__states1),
  last1(((temp___expr_217).us_split_fields3).rec__foo__subject_state__states1)) and
  ((first1(((temp___expr_217).us_split_fields3).rec__foo__subject_state__states1) = 0) and
  (last1(((temp___expr_217).us_split_fields3).rec__foo__subject_state__states1) = to_rep1((cpu_lsid_last[cpu_id]))))))

predicate default_initial_assumption(temp___expr_220: us_rep1,
  temp___skip_top_level_221: bool) =
  ((to_rep1(((temp___expr_220).us_split_discrs2).rec__foo__subject_state__max_id) = to_rep1((cpu_lsid_last[cpu_id]))) and
  ((first1(((temp___expr_220).us_split_fields3).rec__foo__subject_state__states1) = 0) and
  (last1(((temp___expr_220).us_split_fields3).rec__foo__subject_state__states1) = to_rep1((cpu_lsid_last[cpu_id])))))

logic id : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic i11s : int

logic attr__ATTRIBUTE_ADDRESS4 : int

type cpu_range

logic cpu_rangeqtint : cpu_range -> int

axiom cpu_rangeqtaxiom : (forall i:cpu_range. (0 <= cpu_rangeqtint(i)))

axiom cpu_rangeqtaxiom1 : (forall i:cpu_range. (cpu_rangeqtint(i) <= 1))

predicate in_range4(x: int) = ((0 <= x) and (x <= 1))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : cpu_range, cpu_range -> bool

logic dummy6 : cpu_range

type cpu_range__ref = { cpu_range__content : cpu_range
}

function cpu_range__ref_cpu_range__content__projection(a: cpu_range__ref) : cpu_range =
  (a).cpu_range__content

predicate dynamic_invariant1(temp___expr_170: int, temp___is_init_166: bool,
  temp___skip_constant_167: bool, temp___do_toplevel_168: bool,
  temp___do_typ_inv_169: bool) = (((temp___is_init_166 = true) or
  (0 <= 1)) -> in_range4(temp___expr_170))

type local_subject_id_type

logic local_subject_id_typeqtint : local_subject_id_type -> int

axiom local_subject_id_typeqtaxiom :
  (forall i:local_subject_id_type. (0 <= local_subject_id_typeqtint(i)))

axiom local_subject_id_typeqtaxiom1 :
  (forall i:local_subject_id_type. (local_subject_id_typeqtint(i) <= 5))

predicate in_range5(x: int) = ((0 <= x) and (x <= 5))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq7 : local_subject_id_type, local_subject_id_type -> bool

logic dummy7 : local_subject_id_type

type local_subject_id_type__ref = { local_subject_id_type__content :
local_subject_id_type
}

function local_subject_id_type__ref_local_subject_id_type__content__projection(a: local_subject_id_type__ref) : local_subject_id_type =
  (a).local_subject_id_type__content

predicate dynamic_invariant2(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = ((((temp___is_init_190 = true) or
  (0 <= 5)) -> in_range5(temp___expr_194)) and
  ((temp___do_toplevel_192 = true) -> ((temp___is_init_190 = true) ->
  (temp___expr_194 <= to_rep1((cpu_lsid_last[cpu_id]))))))

predicate dynamic_predicate(temp___198: int) =
  (temp___198 <= to_rep1((cpu_lsid_last[cpu_id])))

predicate dynamic_invariant3(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

predicate dynamic_invariant4(temp___expr_177: int, temp___is_init_173: bool,
  temp___skip_constant_174: bool, temp___do_toplevel_175: bool,
  temp___do_typ_inv_176: bool) = (((temp___is_init_173 = true) or
  (0 <= 5)) -> in_range1(temp___expr_177))

logic foo__cpu_lsid_last__aggregate_def : int,
  int -> (int,max_lsid_type) farray

axiom cpu_lsid_last__def_axiom :
  (cpu_lsid_last = foo__cpu_lsid_last__aggregate_def(3, 4))

logic rliteral : max_lsid_type

axiom rliteral_axiom : (max_lsid_typeqtint(rliteral) = 3)

logic rliteral1 : max_lsid_type

axiom rliteral_axiom1 : (max_lsid_typeqtint(rliteral1) = 4)

axiom def_axiom :
  (forall temp___156:int. forall temp___157:int.
  ((dynamic_invariant4(temp___156, true, true, true, true) and
  dynamic_invariant4(temp___157, true, true, true, true)) ->
  ((foo__cpu_lsid_last__aggregate_def(temp___156,
  temp___157)[0]) = rliteral)))

axiom def_axiom1 :
  (forall temp___156:int. forall temp___157:int.
  ((dynamic_invariant4(temp___156, true, true, true, true) and
  dynamic_invariant4(temp___157, true, true, true, true)) ->
  ((foo__cpu_lsid_last__aggregate_def(temp___156,
  temp___157)[1]) = rliteral1)))

predicate dynamic_invariant5(temp___expr_210: us_rep,
  temp___is_init_206: bool, temp___skip_constant_207: bool,
  temp___do_toplevel_208: bool, temp___do_typ_inv_209: bool) =
  (let temp___211 =
  ((temp___expr_210).us_split_discrs1).rec__foo__subject_state__max_id
  : max_lsid_type in (dynamic_property(0, to_rep1(temp___211),
  first1(((temp___expr_210).us_split_fields1).rec__foo__subject_state__states),
  last1(((temp___expr_210).us_split_fields1).rec__foo__subject_state__states)) and
  ((first1(((temp___expr_210).us_split_fields1).rec__foo__subject_state__states) = 0) and
  (last1(((temp___expr_210).us_split_fields1).rec__foo__subject_state__states) = to_rep1(temp___211)))))

 (* File "foo.ads", line 35, characters 0-0 *)
goal defqtvc :
  (forall states__split_fields:us_t. (dynamic_invariant2(i11s, true, false,
  true, true) -> (dynamic_invariant1(cpu_id, true, false, true, true) ->
  (dynamic_invariant2(i11s, true, false, true, true) -> (dynamic_invariant({
  us_split_discrs2 = states__split_discrs; us_split_fields3 = {
  rec__foo__subject_state__states1 = states__split_fields } }, true, false,
  true, true) -> (dynamic_invariant2(id, true, false, true, true) ->
  (first1(states__split_fields) <= id)))))))
