(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

type character

predicate in_range3(x: int) = ((0 <= x) and (x <= 255))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range3(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range3(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range4(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : positive, positive -> bool

logic dummy3 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

predicate dynamic_invariant(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant1(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range3(temp___expr_74))

logic head : us_t -> int

logic head__function_guard : int, us_t -> prop

axiom head__post_axiom :
  (forall s:us_t [head(s)]. (dynamic_invariant(s, true, true, true, true) ->
  (let result = head(s) : int in (head__function_guard(result, s) ->
  dynamic_invariant1(result, true, false, true, true)))))

axiom head__def_axiom :
  (forall s:us_t [head(s)]. (dynamic_invariant(s, true, true, true, true) ->
  (head(s) = to_rep((to_array(s)[first1(s)])))))

logic tail : us_t -> us_t

logic tail__function_guard : us_t, us_t -> prop

type t16s__ref = { t16s__content : us_t
}

function t16s__ref_t16s__content__projection(a: t16s__ref) : us_t =
  (a).t16s__content

axiom tail__post_axiom :
  (forall s:us_t [tail(s)]. (dynamic_invariant(s, true, true, true, true) ->
  (let result = tail(s) : us_t in (tail__function_guard(result, s) ->
  dynamic_invariant(result, true, false, true, true)))))

axiom tail__def_axiom :
  (forall s:us_t [tail(s)]. (dynamic_invariant(s, true, true, true, true) ->
  (tail(s) = of_array(to_array(of_array(to_array(s), (first1(s) + 1),
  last1(s))), first1(of_array(to_array(s), (first1(s) + 1), last1(s))),
  last1(of_array(to_array(s), (first1(s) + 1), last1(s)))))))

logic s1 : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic s2 : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

logic slow_lcs_length : us_t, us_t -> int

logic slow_lcs_length__function_guard : int, us_t, us_t -> prop

logic temp___String_Literal_202 : unit -> (int,character) farray

logic temp___String_Literal_206 : unit -> (int,character) farray

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range4(temp___expr_46))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

 (* File "string_utilities.ads", line 13, characters 0-0 *)
goal defqtvc : (dynamic_invariant(s1, true, false, true, true) ->
  (dynamic_invariant(s2, true, false, true, true) ->
  ((not (orb(bool_eq4(to_array(s1), first1(s1), last1(s1),
  temp___String_Literal_202(void), 1, 0), bool_eq4(to_array(s2), first1(s2),
  last1(s2), temp___String_Literal_206(void), 1, 0)) = true)) -> (let o = s2
  : us_t in (let o1 = head(o) : int in ((head__function_guard(o1, o) and
  (dynamic_invariant1(o1, true, false, true, true) and
  (o1 = to_rep((to_array(o)[first1(o)]))))) -> (let o2 = s1 : us_t in
  (let o3 = head(o2) : int in ((head__function_guard(o3, o2) and
  (dynamic_invariant1(o3, true, false, true, true) and
  (o3 = to_rep((to_array(o2)[first1(o2)]))))) -> ((not (o3 = o1)) ->
  (let o4 = s2 : us_t in (let o5 = s1 : us_t in (let o6 = tail(o5) : us_t in
  ((tail__function_guard(o6, o5) and (dynamic_invariant(o6, true, false,
  true, true) and (o6 = of_array(to_array(of_array(to_array(o5),
  (first1(o5) + 1), last1(o5))), first1(of_array(to_array(o5),
  (first1(o5) + 1), last1(o5))), last1(of_array(to_array(o5),
  (first1(o5) + 1), last1(o5))))))) -> (let o7 = slow_lcs_length(o6, o4)
  : int in ((forall o8:us_t. head__function_guard(head(o8), o8)) ->
  ((forall o8:us_t. head__function_guard(head(o8), o8)) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. forall o9:us_t.
   slow_lcs_length__function_guard(slow_lcs_length(tail(o9), tail(o8)),
   tail(o9), tail(o8))) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. forall o9:us_t.
   slow_lcs_length__function_guard(slow_lcs_length(o9, tail(o8)), o9,
   tail(o8))) -> ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. tail__function_guard(tail(o8), o8)) ->
  ((forall o8:us_t. forall o9:us_t.
   slow_lcs_length__function_guard(slow_lcs_length(tail(o9), o8), tail(o9),
   o8)) -> ((slow_lcs_length__function_guard(o7, o6, o4) and
  (dynamic_invariant2(o7, true, false, true, true) and
  (o7 = (if ((bool_eq4(to_array(o6), first1(o6), last1(o6),
  temp___String_Literal_202(void), 1, 0) = true) or (bool_eq4(to_array(o4),
  first1(o4), last1(o4), temp___String_Literal_206(void), 1,
  0) = true)) then 0 else (if (head(o6) = head(o4)) then (1 + slow_lcs_length(tail(o6),
  tail(o4))) else max(slow_lcs_length(o6, tail(o4)),
  slow_lcs_length(tail(o6), o4))))))) -> (let o8 = s2 : us_t in (let o9 =
  tail(o8) : us_t in ((tail__function_guard(o9, o8) and
  (dynamic_invariant(o9, true, false, true, true) and
  (o9 = of_array(to_array(of_array(to_array(o8), (first1(o8) + 1),
  last1(o8))), first1(of_array(to_array(o8), (first1(o8) + 1), last1(o8))),
  last1(of_array(to_array(o8), (first1(o8) + 1), last1(o8))))))) ->
  (let o10 = s1 : us_t in (let o11 = slow_lcs_length(o10, o9) : int in
  ((forall o12:us_t. head__function_guard(head(o12), o12)) ->
  ((forall o12:us_t. head__function_guard(head(o12), o12)) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. forall o13:us_t.
   slow_lcs_length__function_guard(slow_lcs_length(tail(o13), tail(o12)),
   tail(o13), tail(o12))) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. forall o13:us_t.
   slow_lcs_length__function_guard(slow_lcs_length(o13, tail(o12)), o13,
   tail(o12))) -> ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. tail__function_guard(tail(o12), o12)) ->
  ((forall o12:us_t. forall o13:us_t.
   slow_lcs_length__function_guard(slow_lcs_length(tail(o13), o12),
   tail(o13), o12)) -> ((slow_lcs_length__function_guard(o11, o10, o9) and
  (dynamic_invariant2(o11, true, false, true, true) and
  (o11 = (if ((bool_eq4(to_array(o10), first1(o10), last1(o10),
  temp___String_Literal_202(void), 1, 0) = true) or (bool_eq4(to_array(o9),
  first1(o9), last1(o9), temp___String_Literal_206(void), 1,
  0) = true)) then 0 else (if (head(o10) = head(o9)) then (1 + slow_lcs_length(tail(o10),
  tail(o9))) else max(slow_lcs_length(o10, tail(o9)),
  slow_lcs_length(tail(o10), o9))))))) -> in_range2(max(o11,
  o7))))))))))))))))))))))))))))))))))))))))))))))))))
