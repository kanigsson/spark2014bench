(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type cell_type

predicate in_range1(x: int) = ((0 <= x) and (x <= 7))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : cell_type, cell_type -> bool

logic dummy : cell_type

type cell_type__ref = { cell_type__content : cell_type
}

function cell_type__ref_cell_type__content__projection(a: cell_type__ref) : cell_type =
  (a).cell_type__content

logic to_rep : cell_type -> int

logic of_rep : int -> cell_type

axiom inversion_axiom :
  (forall x:cell_type [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:cell_type [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__tetris__cell__kind : cell_type
}

function us_split_fields_rec__tetris__cell__kind__projection(a: us_split_fields) : cell_type =
  (a).rec__tetris__cell__kind

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__tetris__cell__kind) = to_rep(((b).us_split_fields1).rec__tetris__cell__kind)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic tetris__cell__kind__first__bit : int

logic tetris__cell__kind__last__bit : int

logic tetris__cell__kind__position : int

axiom tetris__cell__kind__first__bit_axiom :
  (0 <= tetris__cell__kind__first__bit)

axiom tetris__cell__kind__last__bit_axiom :
  (tetris__cell__kind__first__bit <  tetris__cell__kind__last__bit)

axiom tetris__cell__kind__position_axiom :
  (0 <= tetris__cell__kind__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type cell__ref = { cell__content : us_rep
}

function cell__ref_cell__content__projection(a: cell__ref) : us_rep =
  (a).cell__content

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy2 : (int,us_rep) farray

logic value__size1 : int

logic object__size1 : int

logic component__size : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq2 : (int,us_rep) farray, (int,us_rep) farray -> bool

type map__ref1 = { map__content1 : (int,(int,us_rep) farray) farray
}

logic slide1 : (int,(int,us_rep) farray) farray, int,
  int -> (int,(int,us_rep) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,us_rep) farray) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,(int,us_rep) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,(int,us_rep) farray) farray, a__first: int,
  a__last: int, b: (int,(int,us_rep) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 8,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 8) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,us_rep) farray) farray.
  forall b:(int,(int,us_rep) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 8,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 8) = true))))))

logic attr__ATTRIBUTE_ADDRESS2 : int

logic is_empty_cell : (int,(int,us_rep) farray) farray, int, int -> bool

logic is_empty_cell__function_guard : bool, (int,(int,us_rep) farray) farray,
  int, int -> prop

type y_coord

logic y_coordqtint : y_coord -> int

axiom y_coordqtaxiom : (forall i:y_coord. (1 <= y_coordqtint(i)))

axiom y_coordqtaxiom1 : (forall i:y_coord. (y_coordqtint(i) <= 16))

predicate in_range2(x: int) = ((1 <= x) and (x <= 16))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq3 : y_coord, y_coord -> bool

logic dummy3 : y_coord

type y_coord__ref = { y_coord__content : y_coord
}

function y_coord__ref_y_coord__content__projection(a: y_coord__ref) : y_coord =
  (a).y_coord__content

predicate dynamic_invariant(temp___expr_171: int, temp___is_init_167: bool,
  temp___skip_constant_168: bool, temp___do_toplevel_169: bool,
  temp___do_typ_inv_170: bool) = (((temp___is_init_167 = true) or
  (1 <= 16)) -> in_range2(temp___expr_171))

type x_coord

logic x_coordqtint : x_coord -> int

axiom x_coordqtaxiom : (forall i:x_coord. (1 <= x_coordqtint(i)))

axiom x_coordqtaxiom1 : (forall i:x_coord. (x_coordqtint(i) <= 8))

predicate in_range3(x: int) = ((1 <= x) and (x <= 8))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : x_coord, x_coord -> bool

logic dummy4 : x_coord

type x_coord__ref = { x_coord__content : x_coord
}

function x_coord__ref_x_coord__content__projection(a: x_coord__ref) : x_coord =
  (a).x_coord__content

predicate dynamic_invariant1(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (1 <= 8)) -> in_range3(temp___expr_178))

axiom is_empty_cell__def_axiom :
  (forall the_board:(int,(int,us_rep) farray) farray.
  (forall xpos:int. forall ypos:int [is_empty_cell(the_board, xpos, ypos)].
  ((is_empty_cell(the_board, xpos, ypos) = true) ->
  (to_rep(((((the_board[ypos])[xpos])).us_split_fields1).rec__tetris__cell__kind) = 0))))

axiom is_empty_cell__def_axiom1 :
  (forall the_board:(int,(int,us_rep) farray) farray.
  (forall xpos:int. forall ypos:int [is_empty_cell(the_board, xpos, ypos)].
  ((to_rep(((((the_board[ypos])[xpos])).us_split_fields1).rec__tetris__cell__kind) = 0) ->
  (is_empty_cell(the_board, xpos, ypos) = true))))

type piece_count_type

logic piece_count_typeqtint : piece_count_type -> int

axiom piece_count_typeqtaxiom :
  (forall i:piece_count_type. (0 <= piece_count_typeqtint(i)))

axiom piece_count_typeqtaxiom1 :
  (forall i:piece_count_type. (piece_count_typeqtint(i) <= 1000))

predicate in_range4(x: int) = ((0 <= x) and (x <= 1000))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq5 : piece_count_type, piece_count_type -> bool

logic dummy5 : piece_count_type

type piece_count_type__ref = { piece_count_type__content : piece_count_type
}

function piece_count_type__ref_piece_count_type__content__projection(a: piece_count_type__ref) : piece_count_type =
  (a).piece_count_type__content

predicate dynamic_invariant2(temp___expr_164: int, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = (((temp___is_init_160 = true) or
  (0 <= 1000)) -> in_range4(temp___expr_164))

predicate dynamic_invariant3(temp___expr_185: int, temp___is_init_181: bool,
  temp___skip_constant_182: bool, temp___do_toplevel_183: bool,
  temp___do_typ_inv_184: bool) = (((temp___is_init_181 = true) or
  (0 <= 7)) -> in_range1(temp___expr_185))

 (* File "controller.ads", line 6, characters 0-0 *)
goal defqtvc :
  (forall piece_count:int. forall create_piece:bool.
  forall game_board:(int,(int,us_rep) farray) farray.
  (dynamic_invariant2(piece_count, true, false, true, true) ->
  (forall spark__branch:bool.
  ((spark__branch = (if (to_int(create_piece) = to_int(of_int(1))) then true else false)) ->
  ((spark__branch = true) -> (let o = is_empty_cell(game_board, 4, 1)
  : bool in ((is_empty_cell__function_guard(o, game_board, 4, 1) and
  ((o = true) <->
  (to_rep(((((game_board[1])[4])).us_split_fields1).rec__tetris__cell__kind) = 0))) ->
  (forall spark__branch1:bool. ((spark__branch1 = o) ->
  ((spark__branch1 = true) -> in_range4((piece_count + 1))))))))))))
