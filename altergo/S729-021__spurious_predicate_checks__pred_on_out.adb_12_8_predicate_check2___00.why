(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__pred_on_out__t1__x : integer
}

function us_split_fields_rec__pred_on_out__t1__x__projection(a: us_split_fields) : integer =
  (a).rec__pred_on_out__t1__x

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__pred_on_out__t1__x) = to_rep(((b).us_split_fields1).rec__pred_on_out__t1__x)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic pred_on_out__t1__x__first__bit : int

logic pred_on_out__t1__x__last__bit : int

logic pred_on_out__t1__x__position : int

axiom pred_on_out__t1__x__first__bit_axiom :
  (0 <= pred_on_out__t1__x__first__bit)

axiom pred_on_out__t1__x__last__bit_axiom :
  (pred_on_out__t1__x__first__bit <  pred_on_out__t1__x__last__bit)

axiom pred_on_out__t1__x__position_axiom :
  (0 <= pred_on_out__t1__x__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type t1__ref = { t1__content : us_rep
}

function t1__ref_t1__content__projection(a: t1__ref) : us_rep =
  (a).t1__content

type s1__ref = { s1__content : us_rep
}

function s1__ref_s1__content__projection(a: s1__ref) : us_rep =
  (a).s1__content

logic i1b : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_189: us_rep,
  temp___is_init_185: bool, temp___skip_constant_186: bool,
  temp___do_toplevel_187: bool, temp___do_typ_inv_188: bool) =
  ((temp___do_toplevel_187 = true) -> ((temp___is_init_185 = true) ->
  in_range1(to_rep(((temp___expr_189).us_split_fields1).rec__pred_on_out__t1__x))))

predicate dynamic_predicate(temp___194: us_rep) =
  in_range1(to_rep(((temp___194).us_split_fields1).rec__pred_on_out__t1__x))

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

predicate dynamic_invariant2(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 1)

 (* File "pred_on_out.adb", line 9, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:integer. (dynamic_invariant(i1b, true, false, true,
  true) -> (dynamic_invariant(i1b, true, false, true, true) ->
  (dynamic_invariant({ us_split_fields1 = { rec__pred_on_out__t1__x =
  x__split_fields } }, false, false, true, true) -> dynamic_predicate({
  us_split_fields1 = { rec__pred_on_out__t1__x = rliteral } })))))
