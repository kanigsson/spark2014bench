(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type value

logic valueqtint : value -> int

axiom valueqtaxiom : (forall i:value. ((- 23) <= valueqtint(i)))

axiom valueqtaxiom1 : (forall i:value. (valueqtint(i) <= 69))

predicate in_range1(x: int) = (((- 23) <= x) and (x <= 69))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value, value -> bool

logic dummy : value

type value__ref = { value__content : value
}

function value__ref_value__content__projection(a: value__ref) : value =
  (a).value__content

function to_rep(x: value) : int = valueqtint(x)

logic of_rep : int -> value

axiom inversion_axiom : (forall x:value [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:value [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,value) farray
}

logic slide : (int,value) farray, int, int -> (int,value) farray

axiom slide_eq :
  (forall a:(int,value) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,value) farray, a__first: int, a__last: int,
  b: (int,value) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,value) farray. forall b:(int,value) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic create_step_array : int -> (int,value) farray

logic create_step_array__function_guard : (int,value) farray, int -> prop

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (0 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 1001))

predicate in_range2(x: int) = ((0 <= x) and (x <= 1001))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index, index -> bool

logic dummy1 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

predicate dynamic_invariant(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 1001)) -> in_range2(temp___expr_169))

axiom create_step_array__post_axiom :
  (forall i:int [create_step_array(i)]. (dynamic_invariant(i, true, true,
  true, true) -> (let result = create_step_array(i) : (int,value) farray in
  (create_step_array__function_guard(result, i) ->
  (forall j:int. (((0 <= j) and (j <= 1001)) -> ((j <  i) ->
  (to_rep((result[j])) = (- 23)))))))))

axiom create_step_array__post_axiom1 :
  (forall i:int [create_step_array(i)]. (dynamic_invariant(i, true, true,
  true, true) -> (let result = create_step_array(i) : (int,value) farray in
  (create_step_array__function_guard(result, i) ->
  (forall j:int. (((0 <= j) and (j <= 1001)) -> ((i <= j) ->
  (to_rep((result[j])) = 69))))))))

logic i : int

logic attr__ATTRIBUTE_ADDRESS : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type counter

logic counterqtint : counter -> int

axiom counterqtaxiom : (forall i1:counter. (0 <= counterqtint(i1)))

axiom counterqtaxiom1 : (forall i1:counter. (counterqtint(i1) <= 1002))

predicate in_range3(x: int) = ((0 <= x) and (x <= 1002))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : counter, counter -> bool

logic dummy2 : counter

type counter__ref = { counter__content : counter
}

function counter__ref_counter__content__projection(a: counter__ref) : counter =
  (a).counter__content

predicate dynamic_invariant1(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (0 <= 1002)) -> in_range3(temp___expr_162))

predicate dynamic_invariant2(temp___expr_176: int, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = (((temp___is_init_172 = true) or
  ((- 23) <= 69)) -> in_range1(temp___expr_176))

 (* File "complex_arrays.adb", line 171, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  (forall c:int. ((c = 0) -> (dynamic_invariant1(c, true, false, true,
  true) -> (let o = i : int in (let o1 = create_step_array(o)
  : (int,value) farray in ((create_step_array__function_guard(o1, o) and
  (forall j:int. (((0 <= j) and (j <= 1001)) -> (((j <  o) ->
  (to_rep((o1[j])) = (- 23))) and ((o <= j) -> (to_rep((o1[j])) = 69)))))) ->
  (forall step:(int,value) farray. ((step = o1) ->
  (forall c1:int.
  ((exists j:int. ((j = 0) and (if (andb((if (0 <= j) then true else false),
   (if (j <= 1001) then true else false)) = true) then (exists spark__branch:bool.
                                                       exists c2:int.
                                                       ((exists o2:int.
                                                        ((to_rep((step[j])) = o2) and
                                                        ((spark__branch = (if (o2 = (- 23)) then true else false)) and
                                                        (if (spark__branch = true) then (let o3 =
                                                        (c + 1) : int in
                                                        (in_range3(o3) and
                                                        (c2 = o3))) else (c2 = c))))) and
                                                       (exists j1:int.
                                                       ((((forall k:int.
                                                          (((0 <= k) and
                                                          (k <= 1001)) ->
                                                          (((k <  i) ->
                                                          (to_rep((step[k])) = (- 23))) and
                                                          ((i <= k) ->
                                                          (to_rep((step[k])) = 69))))) and
                                                       ((j1 <  i) ->
                                                       (c1 = (j1 + 1)))) and
                                                       ((i <= j1) ->
                                                       (c1 = i))) and
                                                       ((andb((if (dynamic_invariant1(c1,
                                                       true, true, true,
                                                       true) and
                                                       in_range2(j1)) then true else false),
                                                       (if ((0 <= j1) and
                                                       (j1 <= 1001)) then true else false)) = true) and
                                                       (j1 = 1001)))))) else (c1 = c)))) ->
  (forall complex_arrays__use_step_array__result:int.
  ((complex_arrays__use_step_array__result = c1) ->
  (i = complex_arrays__use_step_array__result))))))))))))))
