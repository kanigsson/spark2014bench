(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : positive, positive -> bool

logic dummy1 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range2(x: int) = ((0 <= x) and (x <= 255))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : character, character -> bool

logic dummy2 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

logic dummy4 : (int,character) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq4 : (int,character) farray, (int,character) farray -> bool

type us_split_fields = { rec__instr__instrument__name :
(int,character) farray; rec__ext__ : us_private
}

function us_split_fields_rec__instr__instrument__name__projection(a: us_split_fields) : (int,character) farray =
  (a).rec__instr__instrument__name

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if (bool_eq3(((a).us_split_fields1).rec__instr__instrument__name, 1, 14,
  ((b).us_split_fields1).rec__instr__instrument__name, 1,
  14) = true) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic instr__instrument__name__first__bit : int

logic instr__instrument__name__last__bit : int

logic instr__instrument__name__position : int

axiom instr__instrument__name__first__bit_axiom :
  (0 <= instr__instrument__name__first__bit)

axiom instr__instrument__name__last__bit_axiom :
  (instr__instrument__name__first__bit <  instr__instrument__name__last__bit)

axiom instr__instrument__name__position_axiom :
  (0 <= instr__instrument__name__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type instrument__ref = { instrument__content : us_rep
}

function instrument__ref_instrument__content__projection(a: instrument__ref) : us_rep =
  (a).instrument__content

type speed

logic speedqtint : speed -> int

axiom speedqtaxiom : (forall i:speed. (0 <= speedqtint(i)))

axiom speedqtaxiom1 : (forall i:speed. (speedqtint(i) <= 85))

predicate in_range3(x: int) = ((0 <= x) and (x <= 85))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq6 : speed, speed -> bool

logic dummy6 : speed

type speed__ref = { speed__content : speed
}

function speed__ref_speed__content__projection(a: speed__ref) : speed =
  (a).speed__content

function to_rep2(x: speed) : int = speedqtint(x)

logic of_rep2 : int -> speed

axiom inversion_axiom2 :
  (forall x:speed [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:speed [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields2 = { rec__instr__speedometer__value : speed;
rec__instr__instrument__name1 : (int,character) farray; rec__ext__1 :
us_private
}

function us_split_fields_rec__instr__speedometer__value__projection(a: us_split_fields2) : speed =
  (a).rec__instr__speedometer__value

function us_split_fields_rec__instr__instrument__name__2__projection(a: us_split_fields2) : (int,character) farray =
  (a).rec__instr__instrument__name1

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : speed, us_private -> us_private

logic extract__instr__speedometer__value : us_private -> speed

axiom extract__instr__speedometer__value__conv :
  (forall instr__speedometer__value:speed.
  (forall rec__ext__2:us_private.
  (extract__instr__speedometer__value(hide_ext__(instr__speedometer__value,
  rec__ext__2)) = instr__speedometer__value)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields3).rec__instr__instrument__name1; rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__instr__speedometer__value,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__instr__speedometer__value =
  extract__instr__speedometer__value(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name1 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__1 =
  extract__ext__(((r).us_split_fields1).rec__ext__) }; attr__tag1 =
  (r).attr__tag }

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep2(((a).us_split_fields3).rec__instr__speedometer__value) = to_rep2(((b).us_split_fields3).rec__instr__speedometer__value)) and
  (bool_eq3(((a).us_split_fields3).rec__instr__instrument__name1, 1, 14,
  ((b).us_split_fields3).rec__instr__instrument__name1, 1,
  14) = true)) then true else false)

logic us_tag1 : int

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic instr__speedometer__value__first__bit : int

logic instr__speedometer__value__last__bit : int

logic instr__speedometer__value__position : int

axiom instr__speedometer__value__first__bit_axiom :
  (0 <= instr__speedometer__value__first__bit)

axiom instr__speedometer__value__last__bit_axiom :
  (instr__speedometer__value__first__bit <  instr__speedometer__value__last__bit)

axiom instr__speedometer__value__position_axiom :
  (0 <= instr__speedometer__value__position)

logic instr__instrument__name__first__bit1 : int

logic instr__instrument__name__last__bit1 : int

logic instr__instrument__name__position1 : int

axiom instr__instrument__name__first__bit_axiom1 :
  (0 <= instr__instrument__name__first__bit1)

axiom instr__instrument__name__last__bit_axiom1 :
  (instr__instrument__name__first__bit1 <  instr__instrument__name__last__bit1)

axiom instr__instrument__name__position_axiom1 :
  (0 <= instr__instrument__name__position1)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type speedometer__ref = { speedometer__content : us_rep1
}

function speedometer__ref_speedometer__content__projection(a: speedometer__ref) : us_rep1 =
  (a).speedometer__content

type percent

logic percentqtint : percent -> int

axiom percentqtaxiom : (forall i:percent. (0 <= percentqtint(i)))

axiom percentqtaxiom1 : (forall i:percent. (percentqtint(i) <= 100))

predicate in_range4(x: int) = ((0 <= x) and (x <= 100))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq8 : percent, percent -> bool

logic dummy8 : percent

type percent__ref = { percent__content : percent
}

function percent__ref_percent__content__projection(a: percent__ref) : percent =
  (a).percent__content

function to_rep3(x: percent) : int = percentqtint(x)

logic of_rep3 : int -> percent

axiom inversion_axiom3 :
  (forall x:percent [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:percent [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type us_split_fields4 = { rec__instr__gauge__value : percent;
rec__instr__instrument__name2 : (int,character) farray; rec__ext__2 :
us_private
}

function us_split_fields_rec__instr__gauge__value__projection(a: us_split_fields4) : percent =
  (a).rec__instr__gauge__value

function us_split_fields_rec__instr__instrument__name__3__projection(a: us_split_fields4) : (int,character) farray =
  (a).rec__instr__instrument__name2

function us_split_fields_rec__ext____3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_attr__tag__3__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : percent, us_private -> us_private

logic extract__instr__gauge__value : us_private -> percent

axiom extract__instr__gauge__value__conv :
  (forall instr__gauge__value:percent.
  (forall rec__ext__3:us_private.
  (extract__instr__gauge__value(hide_ext__1(instr__gauge__value,
  rec__ext__3)) = instr__gauge__value)))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields5).rec__instr__instrument__name2; rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__instr__gauge__value,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_fields5 = {
  rec__instr__gauge__value =
  extract__instr__gauge__value(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name2 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__2 =
  extract__ext__1(((r).us_split_fields1).rec__ext__) }; attr__tag2 =
  (r).attr__tag }

function bool_eq9(a: us_rep2, b: us_rep2) : bool =
  (if ((to_rep3(((a).us_split_fields5).rec__instr__gauge__value) = to_rep3(((b).us_split_fields5).rec__instr__gauge__value)) and
  (bool_eq3(((a).us_split_fields5).rec__instr__instrument__name2, 1, 14,
  ((b).us_split_fields5).rec__instr__instrument__name2, 1,
  14) = true)) then true else false)

logic us_tag2 : int

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic instr__gauge__value__first__bit : int

logic instr__gauge__value__last__bit : int

logic instr__gauge__value__position : int

axiom instr__gauge__value__first__bit_axiom :
  (0 <= instr__gauge__value__first__bit)

axiom instr__gauge__value__last__bit_axiom :
  (instr__gauge__value__first__bit <  instr__gauge__value__last__bit)

axiom instr__gauge__value__position_axiom :
  (0 <= instr__gauge__value__position)

logic instr__instrument__name__first__bit2 : int

logic instr__instrument__name__last__bit2 : int

logic instr__instrument__name__position2 : int

axiom instr__instrument__name__first__bit_axiom2 :
  (0 <= instr__instrument__name__first__bit2)

axiom instr__instrument__name__last__bit_axiom2 :
  (instr__instrument__name__first__bit2 <  instr__instrument__name__last__bit2)

axiom instr__instrument__name__position_axiom2 :
  (0 <= instr__instrument__name__position2)

logic user_eq9 : us_rep2, us_rep2 -> bool

logic dummy9 : us_rep2

type gauge__ref = { gauge__content : us_rep2
}

function gauge__ref_gauge__content__projection(a: gauge__ref) : us_rep2 =
  (a).gauge__content

type us_split_fields6 = { rec__instr__graphic_gauge__size : integer;
rec__instr__graphic_gauge__fill : character; rec__instr__graphic_gauge__empty
: character; rec__instr__instrument__name3 : (int,character) farray;
rec__instr__gauge__value1 : percent; rec__ext__3 : us_private
}

function us_split_fields_rec__instr__graphic_gauge__size__projection(a: us_split_fields6) : integer =
  (a).rec__instr__graphic_gauge__size

function us_split_fields_rec__instr__graphic_gauge__fill__projection(a: us_split_fields6) : character =
  (a).rec__instr__graphic_gauge__fill

function us_split_fields_rec__instr__graphic_gauge__empty__projection(a: us_split_fields6) : character =
  (a).rec__instr__graphic_gauge__empty

function us_split_fields_rec__instr__instrument__name__4__projection(a: us_split_fields6) : (int,character) farray =
  (a).rec__instr__instrument__name3

function us_split_fields_rec__instr__gauge__value__2__projection(a: us_split_fields6) : percent =
  (a).rec__instr__gauge__value1

function us_split_fields_rec__ext____4__projection(a: us_split_fields6) : us_private =
  (a).rec__ext__3

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6; attr__tag3 : int
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function us_rep_attr__tag__4__projection(a: us_rep3) : int = (a).attr__tag3

logic hide_ext__2 : integer, character, character, percent,
  us_private -> us_private

logic extract__instr__graphic_gauge__size : us_private -> integer

axiom extract__instr__graphic_gauge__size__conv :
  (forall instr__graphic_gauge__size:integer.
  (forall instr__graphic_gauge__fill:character.
  forall instr__graphic_gauge__empty:character.
  (forall instr__graphic_gauge__value:percent.
  (forall rec__ext__4:us_private.
  (extract__instr__graphic_gauge__size(hide_ext__2(instr__graphic_gauge__size,
  instr__graphic_gauge__fill, instr__graphic_gauge__empty,
  instr__graphic_gauge__value, rec__ext__4)) = instr__graphic_gauge__size)))))

logic extract__instr__graphic_gauge__fill : us_private -> character

axiom extract__instr__graphic_gauge__fill__conv :
  (forall instr__graphic_gauge__size:integer.
  (forall instr__graphic_gauge__fill:character.
  forall instr__graphic_gauge__empty:character.
  (forall instr__graphic_gauge__value:percent.
  (forall rec__ext__4:us_private.
  (extract__instr__graphic_gauge__fill(hide_ext__2(instr__graphic_gauge__size,
  instr__graphic_gauge__fill, instr__graphic_gauge__empty,
  instr__graphic_gauge__value, rec__ext__4)) = instr__graphic_gauge__fill)))))

logic extract__instr__graphic_gauge__empty : us_private -> character

axiom extract__instr__graphic_gauge__empty__conv :
  (forall instr__graphic_gauge__size:integer.
  (forall instr__graphic_gauge__fill:character.
  forall instr__graphic_gauge__empty:character.
  (forall instr__graphic_gauge__value:percent.
  (forall rec__ext__4:us_private.
  (extract__instr__graphic_gauge__empty(hide_ext__2(instr__graphic_gauge__size,
  instr__graphic_gauge__fill, instr__graphic_gauge__empty,
  instr__graphic_gauge__value, rec__ext__4)) = instr__graphic_gauge__empty)))))

axiom extract__instr__gauge__value__conv1 :
  (forall instr__graphic_gauge__size:integer.
  (forall instr__graphic_gauge__fill:character.
  forall instr__graphic_gauge__empty:character.
  (forall instr__graphic_gauge__value:percent.
  (forall rec__ext__4:us_private.
  (extract__instr__gauge__value(hide_ext__2(instr__graphic_gauge__size,
  instr__graphic_gauge__fill, instr__graphic_gauge__empty,
  instr__graphic_gauge__value, rec__ext__4)) = instr__graphic_gauge__value)))))

logic extract__ext__2 : us_private -> us_private

function to_base2(a: us_rep3) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields7).rec__instr__instrument__name3; rec__ext__ =
  hide_ext__2(((a).us_split_fields7).rec__instr__graphic_gauge__size,
  ((a).us_split_fields7).rec__instr__graphic_gauge__fill,
  ((a).us_split_fields7).rec__instr__graphic_gauge__empty,
  ((a).us_split_fields7).rec__instr__gauge__value1,
  ((a).us_split_fields7).rec__ext__3) }; attr__tag = (a).attr__tag3 }

function of_base2(r: us_rep) : us_rep3 = { us_split_fields7 = {
  rec__instr__graphic_gauge__size =
  extract__instr__graphic_gauge__size(((r).us_split_fields1).rec__ext__);
  rec__instr__graphic_gauge__fill =
  extract__instr__graphic_gauge__fill(((r).us_split_fields1).rec__ext__);
  rec__instr__graphic_gauge__empty =
  extract__instr__graphic_gauge__empty(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name3 =
  ((r).us_split_fields1).rec__instr__instrument__name;
  rec__instr__gauge__value1 =
  extract__instr__gauge__value(((r).us_split_fields1).rec__ext__);
  rec__ext__3 = extract__ext__2(((r).us_split_fields1).rec__ext__) };
  attr__tag3 = (r).attr__tag }

function bool_eq10(a: us_rep3, b: us_rep3) : bool =
  (if (((to_rep(((a).us_split_fields7).rec__instr__graphic_gauge__size) = to_rep(((b).us_split_fields7).rec__instr__graphic_gauge__size)) and
  (to_rep1(((a).us_split_fields7).rec__instr__graphic_gauge__fill) = to_rep1(((b).us_split_fields7).rec__instr__graphic_gauge__fill))) and
  (((to_rep1(((a).us_split_fields7).rec__instr__graphic_gauge__empty) = to_rep1(((b).us_split_fields7).rec__instr__graphic_gauge__empty)) and
  (bool_eq3(((a).us_split_fields7).rec__instr__instrument__name3, 1, 14,
  ((b).us_split_fields7).rec__instr__instrument__name3, 1, 14) = true)) and
  (to_rep3(((a).us_split_fields7).rec__instr__gauge__value1) = to_rep3(((b).us_split_fields7).rec__instr__gauge__value1)))) then true else false)

logic us_tag3 : int

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic instr__graphic_gauge__size__first__bit : int

logic instr__graphic_gauge__size__last__bit : int

logic instr__graphic_gauge__size__position : int

axiom instr__graphic_gauge__size__first__bit_axiom :
  (0 <= instr__graphic_gauge__size__first__bit)

axiom instr__graphic_gauge__size__last__bit_axiom :
  (instr__graphic_gauge__size__first__bit <  instr__graphic_gauge__size__last__bit)

axiom instr__graphic_gauge__size__position_axiom :
  (0 <= instr__graphic_gauge__size__position)

logic instr__graphic_gauge__fill__first__bit : int

logic instr__graphic_gauge__fill__last__bit : int

logic instr__graphic_gauge__fill__position : int

axiom instr__graphic_gauge__fill__first__bit_axiom :
  (0 <= instr__graphic_gauge__fill__first__bit)

axiom instr__graphic_gauge__fill__last__bit_axiom :
  (instr__graphic_gauge__fill__first__bit <  instr__graphic_gauge__fill__last__bit)

axiom instr__graphic_gauge__fill__position_axiom :
  (0 <= instr__graphic_gauge__fill__position)

logic instr__graphic_gauge__empty__first__bit : int

logic instr__graphic_gauge__empty__last__bit : int

logic instr__graphic_gauge__empty__position : int

axiom instr__graphic_gauge__empty__first__bit_axiom :
  (0 <= instr__graphic_gauge__empty__first__bit)

axiom instr__graphic_gauge__empty__last__bit_axiom :
  (instr__graphic_gauge__empty__first__bit <  instr__graphic_gauge__empty__last__bit)

axiom instr__graphic_gauge__empty__position_axiom :
  (0 <= instr__graphic_gauge__empty__position)

logic instr__instrument__name__first__bit3 : int

logic instr__instrument__name__last__bit3 : int

logic instr__instrument__name__position3 : int

axiom instr__instrument__name__first__bit_axiom3 :
  (0 <= instr__instrument__name__first__bit3)

axiom instr__instrument__name__last__bit_axiom3 :
  (instr__instrument__name__first__bit3 <  instr__instrument__name__last__bit3)

axiom instr__instrument__name__position_axiom3 :
  (0 <= instr__instrument__name__position3)

logic instr__gauge__value__first__bit1 : int

logic instr__gauge__value__last__bit1 : int

logic instr__gauge__value__position1 : int

axiom instr__gauge__value__first__bit_axiom1 :
  (0 <= instr__gauge__value__first__bit1)

axiom instr__gauge__value__last__bit_axiom1 :
  (instr__gauge__value__first__bit1 <  instr__gauge__value__last__bit1)

axiom instr__gauge__value__position_axiom1 :
  (0 <= instr__gauge__value__position1)

logic user_eq10 : us_rep3, us_rep3 -> bool

logic dummy10 : us_rep3

type graphic_gauge__ref = { graphic_gauge__content : us_rep3
}

function graphic_gauge__ref_graphic_gauge__content__projection(a: graphic_gauge__ref) : us_rep3 =
  (a).graphic_gauge__content

type sixty

logic sixtyqtint : sixty -> int

axiom sixtyqtaxiom : (forall i:sixty. (0 <= sixtyqtint(i)))

axiom sixtyqtaxiom1 : (forall i:sixty. (sixtyqtint(i) <= 60))

predicate in_range5(x: int) = ((0 <= x) and (x <= 60))

function bool_eq11(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq11 : sixty, sixty -> bool

logic dummy11 : sixty

type sixty__ref = { sixty__content : sixty
}

function sixty__ref_sixty__content__projection(a: sixty__ref) : sixty =
  (a).sixty__content

function to_rep4(x: sixty) : int = sixtyqtint(x)

logic of_rep4 : int -> sixty

axiom inversion_axiom4 :
  (forall x:sixty [to_rep4(x)]. (of_rep4(to_rep4(x)) = x))

axiom range_axiom4 : (forall x:sixty [to_rep4(x)]. in_range5(to_rep4(x)))

axiom coerce_axiom4 :
  (forall x:int [to_rep4(of_rep4(x))]. (in_range5(x) ->
  (to_rep4(of_rep4(x)) = x)))

type twenty_four

logic twenty_fourqtint : twenty_four -> int

axiom twenty_fourqtaxiom : (forall i:twenty_four. (0 <= twenty_fourqtint(i)))

axiom twenty_fourqtaxiom1 :
  (forall i:twenty_four. (twenty_fourqtint(i) <= 24))

predicate in_range6(x: int) = ((0 <= x) and (x <= 24))

function bool_eq12(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq12 : twenty_four, twenty_four -> bool

logic dummy12 : twenty_four

type twenty_four__ref = { twenty_four__content : twenty_four
}

function twenty_four__ref_twenty_four__content__projection(a: twenty_four__ref) : twenty_four =
  (a).twenty_four__content

function to_rep5(x: twenty_four) : int = twenty_fourqtint(x)

logic of_rep5 : int -> twenty_four

axiom inversion_axiom5 :
  (forall x:twenty_four [to_rep5(x)]. (of_rep5(to_rep5(x)) = x))

axiom range_axiom5 :
  (forall x:twenty_four [to_rep5(x)]. in_range6(to_rep5(x)))

axiom coerce_axiom5 :
  (forall x:int [to_rep5(of_rep5(x))]. (in_range6(x) ->
  (to_rep5(of_rep5(x)) = x)))

type us_split_fields8 = { rec__instr__clock__seconds : sixty;
rec__instr__clock__minutes : sixty; rec__instr__clock__hours : twenty_four;
rec__instr__instrument__name4 : (int,character) farray; rec__ext__4 :
us_private
}

function us_split_fields_rec__instr__clock__seconds__projection(a: us_split_fields8) : sixty =
  (a).rec__instr__clock__seconds

function us_split_fields_rec__instr__clock__minutes__projection(a: us_split_fields8) : sixty =
  (a).rec__instr__clock__minutes

function us_split_fields_rec__instr__clock__hours__projection(a: us_split_fields8) : twenty_four =
  (a).rec__instr__clock__hours

function us_split_fields_rec__instr__instrument__name__5__projection(a: us_split_fields8) : (int,character) farray =
  (a).rec__instr__instrument__name4

function us_split_fields_rec__ext____5__projection(a: us_split_fields8) : us_private =
  (a).rec__ext__4

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8; attr__tag4 : int
}

function us_rep___split_fields__5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function us_rep_attr__tag__5__projection(a: us_rep4) : int = (a).attr__tag4

logic hide_ext__3 : sixty, sixty, twenty_four, us_private -> us_private

logic extract__instr__clock__seconds : us_private -> sixty

axiom extract__instr__clock__seconds__conv :
  (forall instr__clock__seconds:sixty. forall instr__clock__minutes:sixty.
  (forall instr__clock__hours:twenty_four.
  (forall rec__ext__5:us_private.
  (extract__instr__clock__seconds(hide_ext__3(instr__clock__seconds,
  instr__clock__minutes, instr__clock__hours,
  rec__ext__5)) = instr__clock__seconds))))

logic extract__instr__clock__minutes : us_private -> sixty

axiom extract__instr__clock__minutes__conv :
  (forall instr__clock__seconds:sixty. forall instr__clock__minutes:sixty.
  (forall instr__clock__hours:twenty_four.
  (forall rec__ext__5:us_private.
  (extract__instr__clock__minutes(hide_ext__3(instr__clock__seconds,
  instr__clock__minutes, instr__clock__hours,
  rec__ext__5)) = instr__clock__minutes))))

logic extract__instr__clock__hours : us_private -> twenty_four

axiom extract__instr__clock__hours__conv :
  (forall instr__clock__seconds:sixty. forall instr__clock__minutes:sixty.
  (forall instr__clock__hours:twenty_four.
  (forall rec__ext__5:us_private.
  (extract__instr__clock__hours(hide_ext__3(instr__clock__seconds,
  instr__clock__minutes, instr__clock__hours,
  rec__ext__5)) = instr__clock__hours))))

logic extract__ext__3 : us_private -> us_private

function to_base3(a: us_rep4) : us_rep = { us_split_fields1 = {
  rec__instr__instrument__name =
  ((a).us_split_fields9).rec__instr__instrument__name4; rec__ext__ =
  hide_ext__3(((a).us_split_fields9).rec__instr__clock__seconds,
  ((a).us_split_fields9).rec__instr__clock__minutes,
  ((a).us_split_fields9).rec__instr__clock__hours,
  ((a).us_split_fields9).rec__ext__4) }; attr__tag = (a).attr__tag4 }

function of_base3(r: us_rep) : us_rep4 = { us_split_fields9 = {
  rec__instr__clock__seconds =
  extract__instr__clock__seconds(((r).us_split_fields1).rec__ext__);
  rec__instr__clock__minutes =
  extract__instr__clock__minutes(((r).us_split_fields1).rec__ext__);
  rec__instr__clock__hours =
  extract__instr__clock__hours(((r).us_split_fields1).rec__ext__);
  rec__instr__instrument__name4 =
  ((r).us_split_fields1).rec__instr__instrument__name; rec__ext__4 =
  extract__ext__3(((r).us_split_fields1).rec__ext__) }; attr__tag4 =
  (r).attr__tag }

function bool_eq13(a: us_rep4, b: us_rep4) : bool =
  (if (((to_rep4(((a).us_split_fields9).rec__instr__clock__seconds) = to_rep4(((b).us_split_fields9).rec__instr__clock__seconds)) and
  (to_rep4(((a).us_split_fields9).rec__instr__clock__minutes) = to_rep4(((b).us_split_fields9).rec__instr__clock__minutes))) and
  ((to_rep5(((a).us_split_fields9).rec__instr__clock__hours) = to_rep5(((b).us_split_fields9).rec__instr__clock__hours)) and
  (bool_eq3(((a).us_split_fields9).rec__instr__instrument__name4, 1, 14,
  ((b).us_split_fields9).rec__instr__instrument__name4, 1,
  14) = true))) then true else false)

logic us_tag4 : int

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic instr__clock__seconds__first__bit : int

logic instr__clock__seconds__last__bit : int

logic instr__clock__seconds__position : int

axiom instr__clock__seconds__first__bit_axiom :
  (0 <= instr__clock__seconds__first__bit)

axiom instr__clock__seconds__last__bit_axiom :
  (instr__clock__seconds__first__bit <  instr__clock__seconds__last__bit)

axiom instr__clock__seconds__position_axiom :
  (0 <= instr__clock__seconds__position)

logic instr__clock__minutes__first__bit : int

logic instr__clock__minutes__last__bit : int

logic instr__clock__minutes__position : int

axiom instr__clock__minutes__first__bit_axiom :
  (0 <= instr__clock__minutes__first__bit)

axiom instr__clock__minutes__last__bit_axiom :
  (instr__clock__minutes__first__bit <  instr__clock__minutes__last__bit)

axiom instr__clock__minutes__position_axiom :
  (0 <= instr__clock__minutes__position)

logic instr__clock__hours__first__bit : int

logic instr__clock__hours__last__bit : int

logic instr__clock__hours__position : int

axiom instr__clock__hours__first__bit_axiom :
  (0 <= instr__clock__hours__first__bit)

axiom instr__clock__hours__last__bit_axiom :
  (instr__clock__hours__first__bit <  instr__clock__hours__last__bit)

axiom instr__clock__hours__position_axiom :
  (0 <= instr__clock__hours__position)

logic instr__instrument__name__first__bit4 : int

logic instr__instrument__name__last__bit4 : int

logic instr__instrument__name__position4 : int

axiom instr__instrument__name__first__bit_axiom4 :
  (0 <= instr__instrument__name__first__bit4)

axiom instr__instrument__name__last__bit_axiom4 :
  (instr__instrument__name__first__bit4 <  instr__instrument__name__last__bit4)

axiom instr__instrument__name__position_axiom4 :
  (0 <= instr__instrument__name__position4)

logic user_eq13 : us_rep4, us_rep4 -> bool

logic dummy13 : us_rep4

type clock__ref = { clock__content : us_rep4
}

function clock__ref_clock__content__projection(a: clock__ref) : us_rep4 =
  (a).clock__content

logic us_tag5 : int

logic value__size7 : int

logic object__size7 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom alignment_axiom7 : (0 <= alignment7)

logic instr__instrument__name__first__bit5 : int

logic instr__instrument__name__last__bit5 : int

logic instr__instrument__name__position5 : int

axiom instr__instrument__name__first__bit_axiom5 :
  (0 <= instr__instrument__name__first__bit5)

axiom instr__instrument__name__last__bit_axiom5 :
  (instr__instrument__name__first__bit5 <  instr__instrument__name__last__bit5)

axiom instr__instrument__name__position_axiom5 :
  (0 <= instr__instrument__name__position5)

logic instr__clock__seconds__first__bit1 : int

logic instr__clock__seconds__last__bit1 : int

logic instr__clock__seconds__position1 : int

axiom instr__clock__seconds__first__bit_axiom1 :
  (0 <= instr__clock__seconds__first__bit1)

axiom instr__clock__seconds__last__bit_axiom1 :
  (instr__clock__seconds__first__bit1 <  instr__clock__seconds__last__bit1)

axiom instr__clock__seconds__position_axiom1 :
  (0 <= instr__clock__seconds__position1)

logic instr__clock__minutes__first__bit1 : int

logic instr__clock__minutes__last__bit1 : int

logic instr__clock__minutes__position1 : int

axiom instr__clock__minutes__first__bit_axiom1 :
  (0 <= instr__clock__minutes__first__bit1)

axiom instr__clock__minutes__last__bit_axiom1 :
  (instr__clock__minutes__first__bit1 <  instr__clock__minutes__last__bit1)

axiom instr__clock__minutes__position_axiom1 :
  (0 <= instr__clock__minutes__position1)

logic instr__clock__hours__first__bit1 : int

logic instr__clock__hours__last__bit1 : int

logic instr__clock__hours__position1 : int

axiom instr__clock__hours__first__bit_axiom1 :
  (0 <= instr__clock__hours__first__bit1)

axiom instr__clock__hours__last__bit_axiom1 :
  (instr__clock__hours__first__bit1 <  instr__clock__hours__last__bit1)

axiom instr__clock__hours__position_axiom1 :
  (0 <= instr__clock__hours__position1)

logic user_eq14 : us_rep4, us_rep4 -> bool

logic dummy14 : us_rep4

type chronometer__ref = { chronometer__content : us_rep4
}

function chronometer__ref_chronometer__content__projection(a: chronometer__ref) : us_rep4 =
  (a).chronometer__content

logic display_value__specific_post : int, us_rep -> prop

logic x : us_rep3

logic attr__ATTRIBUTE_ADDRESS : int

logic lg : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type ts1S__ref = { ts1S__content : us_t
}

function ts1S__ref_ts1S__content__projection(a: ts1S__ref) : us_t =
  (a).ts1S__content

logic s1 : us_t

logic attr__ATTRIBUTE_ADDRESS2 : int

type ts2S__ref = { ts2S__content : us_t
}

function ts2S__ref_ts2S__content__projection(a: ts2S__ref) : us_t =
  (a).ts2S__content

logic s2 : us_t

logic attr__ATTRIBUTE_ADDRESS3 : int

logic temp___String_Literal_177 : unit -> (int,character) farray

axiom temp___String_Literal_177__def_axiom :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[1])) = 32))

axiom temp___String_Literal_177__def_axiom1 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[2])) = 32))

axiom temp___String_Literal_177__def_axiom2 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[3])) = 32))

axiom temp___String_Literal_177__def_axiom3 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[4])) = 32))

axiom temp___String_Literal_177__def_axiom4 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[5])) = 32))

axiom temp___String_Literal_177__def_axiom5 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[6])) = 32))

axiom temp___String_Literal_177__def_axiom6 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[7])) = 32))

axiom temp___String_Literal_177__def_axiom7 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[8])) = 32))

axiom temp___String_Literal_177__def_axiom8 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[9])) = 32))

axiom temp___String_Literal_177__def_axiom9 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[10])) = 32))

axiom temp___String_Literal_177__def_axiom10 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[11])) = 32))

axiom temp___String_Literal_177__def_axiom11 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[12])) = 32))

axiom temp___String_Literal_177__def_axiom12 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[13])) = 32))

axiom temp___String_Literal_177__def_axiom13 :
  (forall us_void_param:unit [temp___String_Literal_177(us_void_param)].
  (to_rep1((temp___String_Literal_177(us_void_param)[14])) = 32))

predicate default_initial_assumption(temp___expr_250: us_rep3,
  temp___skip_top_level_251: bool) =
  (((temp___expr_250).attr__tag3 = us_tag3) and
  (((to_rep(((temp___expr_250).us_split_fields7).rec__instr__graphic_gauge__size) = 20) and
  (to_rep1(((temp___expr_250).us_split_fields7).rec__instr__graphic_gauge__fill) = 42)) and
  (((to_rep1(((temp___expr_250).us_split_fields7).rec__instr__graphic_gauge__empty) = 46) and
  (((temp___expr_250).us_split_fields7).rec__instr__instrument__name3 = temp___String_Literal_177(void))) and
  (to_rep3(((temp___expr_250).us_split_fields7).rec__instr__gauge__value1) = 0))))

type t9b__ref = { t9b__content : us_t
}

function t9b__ref_t9b__content__projection(a: t9b__ref) : us_t =
  (a).t9b__content

logic instr__display_value__4__s1__aggregate_def : int, int, int -> us_t

predicate dynamic_invariant1(temp___expr_317: us_t, temp___is_init_313: bool,
  temp___skip_constant_314: bool, temp___do_toplevel_315: bool,
  temp___do_typ_inv_316: bool) = ((not (temp___skip_constant_314 = true)) ->
  (dynamic_property(1, lg, first1(temp___expr_317),
  last1(temp___expr_317)) and ((first1(temp___expr_317) = 1) and
  (last1(temp___expr_317) = lg))))

predicate default_initial_assumption1(temp___expr_319: us_t,
  temp___skip_top_level_320: bool) = ((first1(temp___expr_319) = 1) and
  (last1(temp___expr_319) = lg))

type t11b__ref = { t11b__content : us_t
}

function t11b__ref_t11b__content__projection(a: t11b__ref) : us_t =
  (a).t11b__content

logic instr__display_value__4__s2__aggregate_def : int, int, int -> us_t

predicate dynamic_invariant2(temp___expr_327: us_t, temp___is_init_323: bool,
  temp___skip_constant_324: bool, temp___do_toplevel_325: bool,
  temp___do_typ_inv_326: bool) = ((not (temp___skip_constant_324 = true)) ->
  (dynamic_property((lg + 1),
  to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size),
  first1(temp___expr_327), last1(temp___expr_327)) and
  ((first1(temp___expr_327) = (lg + 1)) and
  (last1(temp___expr_327) = to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size)))))

predicate default_initial_assumption2(temp___expr_329: us_t,
  temp___skip_top_level_330: bool) =
  ((first1(temp___expr_329) = (lg + 1)) and
  (last1(temp___expr_329) = to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size)))

predicate dynamic_invariant3(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range1(temp___expr_46))

predicate dynamic_invariant4(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range2(temp___expr_74))

predicate dynamic_invariant5(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

axiom lg__def_axiom :
  (lg = div((to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size) * to_rep3(((x).us_split_fields7).rec__instr__gauge__value1)),
  100))

axiom s1__def_axiom :
  (s1 = of_array(to_array(instr__display_value__4__s1__aggregate_def(to_rep1(((x).us_split_fields7).rec__instr__graphic_gauge__fill),
  1, lg)),
  first1(instr__display_value__4__s1__aggregate_def(to_rep1(((x).us_split_fields7).rec__instr__graphic_gauge__fill),
  1, lg)),
  last1(instr__display_value__4__s1__aggregate_def(to_rep1(((x).us_split_fields7).rec__instr__graphic_gauge__fill),
  1, lg))))

axiom def_axiom :
  (forall temp___158:int. forall temp___159:int. forall temp___160:int.
  (dynamic_invariant4(temp___158, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___159, temp___160) ->
  (first1(instr__display_value__4__s1__aggregate_def(temp___158, temp___159,
  temp___160)) = temp___159))))

axiom def_axiom1 :
  (forall temp___158:int. forall temp___159:int. forall temp___160:int.
  (dynamic_invariant4(temp___158, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___159, temp___160) ->
  (last1(instr__display_value__4__s1__aggregate_def(temp___158, temp___159,
  temp___160)) = temp___160))))

axiom def_axiom2 :
  (forall temp___158:int. forall temp___159:int. forall temp___160:int.
  (dynamic_invariant4(temp___158, true, true, true, true) ->
  (forall temp___161:int.
  (to_rep1((to_array(instr__display_value__4__s1__aggregate_def(temp___158,
  temp___159, temp___160))[temp___161])) = temp___158))))

axiom s2__def_axiom :
  (s2 = of_array(slide(to_array(instr__display_value__4__s2__aggregate_def(to_rep1(((x).us_split_fields7).rec__instr__graphic_gauge__empty),
  (lg + 1), to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size))),
  first1(instr__display_value__4__s2__aggregate_def(to_rep1(((x).us_split_fields7).rec__instr__graphic_gauge__empty),
  (lg + 1), to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size))),
  (lg + 1)), (lg + 1),
  to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size)))

axiom def_axiom3 :
  (forall temp___164:int. forall temp___165:int. forall temp___166:int.
  (dynamic_invariant4(temp___164, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___165, temp___166) ->
  (first1(instr__display_value__4__s2__aggregate_def(temp___164, temp___165,
  temp___166)) = temp___165))))

axiom def_axiom4 :
  (forall temp___164:int. forall temp___165:int. forall temp___166:int.
  (dynamic_invariant4(temp___164, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___165, temp___166) ->
  (last1(instr__display_value__4__s2__aggregate_def(temp___164, temp___165,
  temp___166)) = temp___166))))

axiom def_axiom5 :
  (forall temp___164:int. forall temp___165:int. forall temp___166:int.
  (dynamic_invariant4(temp___164, true, true, true, true) ->
  (forall temp___167:int.
  (to_rep1((to_array(instr__display_value__4__s2__aggregate_def(temp___164,
  temp___165, temp___166))[temp___167])) = temp___164))))

predicate dynamic_invariant6(temp___expr_193: int, temp___is_init_189: bool,
  temp___skip_constant_190: bool, temp___do_toplevel_191: bool,
  temp___do_typ_inv_192: bool) = (((temp___is_init_189 = true) or
  (0 <= 85)) -> in_range3(temp___expr_193))

predicate dynamic_invariant7(temp___expr_220: int, temp___is_init_216: bool,
  temp___skip_constant_217: bool, temp___do_toplevel_218: bool,
  temp___do_typ_inv_219: bool) = (((temp___is_init_216 = true) or
  (0 <= 100)) -> in_range4(temp___expr_220))

predicate dynamic_invariant8(temp___expr_258: int, temp___is_init_254: bool,
  temp___skip_constant_255: bool, temp___do_toplevel_256: bool,
  temp___do_typ_inv_257: bool) = (((temp___is_init_254 = true) or
  (0 <= 60)) -> in_range5(temp___expr_258))

predicate dynamic_invariant9(temp___expr_265: int, temp___is_init_261: bool,
  temp___skip_constant_262: bool, temp___do_toplevel_263: bool,
  temp___do_typ_inv_264: bool) = (((temp___is_init_261 = true) or
  (0 <= 24)) -> in_range6(temp___expr_265))

predicate default_initial_assumption3(temp___expr_175: us_rep,
  temp___skip_top_level_176: bool) =
  (((temp___expr_175).attr__tag = us_tag) and
  (((temp___expr_175).us_split_fields1).rec__instr__instrument__name = temp___String_Literal_177(void)))

predicate default_initial_assumption4(temp___expr_202: us_rep1,
  temp___skip_top_level_203: bool) =
  (((temp___expr_202).attr__tag1 = us_tag1) and
  ((to_rep2(((temp___expr_202).us_split_fields3).rec__instr__speedometer__value) = 0) and
  (((temp___expr_202).us_split_fields3).rec__instr__instrument__name1 = temp___String_Literal_177(void))))

predicate default_initial_assumption5(temp___expr_229: us_rep2,
  temp___skip_top_level_230: bool) =
  (((temp___expr_229).attr__tag2 = us_tag2) and
  ((to_rep3(((temp___expr_229).us_split_fields5).rec__instr__gauge__value) = 0) and
  (((temp___expr_229).us_split_fields5).rec__instr__instrument__name2 = temp___String_Literal_177(void))))

predicate default_initial_assumption6(temp___expr_274: us_rep4,
  temp___skip_top_level_275: bool) =
  (((temp___expr_274).attr__tag4 = us_tag4) and
  (((to_rep4(((temp___expr_274).us_split_fields9).rec__instr__clock__seconds) = 0) and
  (to_rep4(((temp___expr_274).us_split_fields9).rec__instr__clock__minutes) = 0)) and
  ((to_rep5(((temp___expr_274).us_split_fields9).rec__instr__clock__hours) = 0) and
  (((temp___expr_274).us_split_fields9).rec__instr__instrument__name4 = temp___String_Literal_177(void)))))

predicate default_initial_assumption7(temp___expr_298: us_rep4,
  temp___skip_top_level_299: bool) =
  (((temp___expr_298).attr__tag4 = us_tag5) and
  (((((temp___expr_298).us_split_fields9).rec__instr__instrument__name4 = temp___String_Literal_177(void)) and
  (to_rep4(((temp___expr_298).us_split_fields9).rec__instr__clock__seconds) = 0)) and
  ((to_rep4(((temp___expr_298).us_split_fields9).rec__instr__clock__minutes) = 0) and
  (to_rep5(((temp___expr_298).us_split_fields9).rec__instr__clock__hours) = 0))))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "instr.ads", line 54, characters 0-0 *)
goal defqtvc :
  (forall o:int.
  ((to_rep3(((x).us_split_fields7).rec__instr__gauge__value1) = o) ->
  (forall o1:int.
  ((to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size) = o1) ->
  (let o2 = (o1 * o) : int in (in_range(o2) -> ((div(o2, 100) = lg) ->
  (dynamic_invariant(lg, true, false, true, true) ->
  (forall o3:int.
  ((to_rep1(((x).us_split_fields7).rec__instr__graphic_gauge__fill) = o3) ->
  (let temp___369 = instr__display_value__4__s1__aggregate_def(o3, 1, lg)
  : us_t in ((first1(temp___369) = 1) -> ((last1(temp___369) = lg) ->
  ((if (first1(temp___369) <= last1(temp___369)) then ((1 <= lg) and
  ((last1(temp___369) - first1(temp___369)) = (lg - 1))) else (lg <  1)) ->
  ((of_array(to_array(temp___369), first1(temp___369),
  last1(temp___369)) = s1) -> (dynamic_invariant1(s1, true, false, true,
  true) ->
  (((lg + 1) <= to_rep(((x).us_split_fields7).rec__instr__graphic_gauge__size)) ->
  (1 <= (lg + 1)))))))))))))))))))
