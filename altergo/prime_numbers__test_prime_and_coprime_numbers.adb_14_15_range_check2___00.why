(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : positive, positive -> bool

logic dummy : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range(temp___expr_46))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range1(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_int((a[temp___idx_154])) = to_int((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic valid_prime_data : (int,bool) farray -> bool

logic valid_prime_data__function_guard : bool, (int,bool) farray -> prop

logic are_coprime : int, int -> bool

logic are_coprime__function_guard : bool, int, int -> prop

logic initialize_coprime_list : int -> (int,bool) farray

logic initialize_coprime_list__function_guard : (int,bool) farray,
  int -> prop

logic bool_eq3 : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq3(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq3(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function min(x: int, y: int) : int = (if (x <= y) then x else y)

function max(x: int, y: int) : int = (if (x <= y) then y else x)

axiom Min_r : (forall x:int. forall y:int. ((y <= x) -> (min(x, y) = y)))

axiom Max_l : (forall x:int. forall y:int. ((y <= x) -> (max(x, y) = x)))

axiom Min_comm : (forall x:int. forall y:int. (min(x, y) = min(y, x)))

axiom Max_comm : (forall x:int. forall y:int. (max(x, y) = max(y, x)))

axiom Min_assoc :
  (forall x:int. forall y:int. forall z:int. (min(min(x, y), z) = min(x,
  min(y, z))))

axiom Max_assoc :
  (forall x:int. forall y:int. forall z:int. (max(max(x, y), z) = max(x,
  max(y, z))))

logic has_true : (int,bool) farray, int, int -> bool

logic has_true__function_guard : bool, (int,bool) farray, int, int -> prop

logic nearest_number : (int,bool) farray, int, int -> int

logic nearest_number__function_guard : int, (int,bool) farray, int,
  int -> prop

type value_type

logic value_typeqtint : value_type -> int

axiom value_typeqtaxiom : (forall i:value_type. (0 <= value_typeqtint(i)))

axiom value_typeqtaxiom1 :
  (forall i:value_type. (value_typeqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : value_type, value_type -> bool

logic dummy1 : value_type

type value_type__ref = { value_type__content : value_type
}

function value_type__ref_value_type__content__projection(a: value_type__ref) : value_type =
  (a).value_type__content

predicate dynamic_invariant1(temp___expr_200: int, temp___is_init_196: bool,
  temp___skip_constant_197: bool, temp___do_toplevel_198: bool,
  temp___do_typ_inv_199: bool) = (((temp___is_init_196 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_200))

axiom nearest_number__post_axiom :
  (forall number_list:(int,bool) farray.
  (forall mode:int. forall value:int [nearest_number(number_list, mode,
  value)]. in_range2(nearest_number(number_list, mode, value))))

logic is_prime : int -> bool

logic is_prime__function_guard : bool, int -> prop

logic has_prime : int, int -> bool

logic has_prime__function_guard : bool, int, int -> prop

logic nearest_prime_number : int, int, (int,bool) farray -> int

logic nearest_prime_number__function_guard : int, int, int,
  (int,bool) farray -> prop

axiom nearest_prime_number__post_axiom :
  (forall value:int. forall mode:int.
  (forall test_prime_and_coprime_numbers__p__set__is_prime:(int,bool) farray
  [nearest_prime_number(value, mode,
  test_prime_and_coprime_numbers__p__set__is_prime)].
  in_range2(nearest_prime_number(value, mode,
  test_prime_and_coprime_numbers__p__set__is_prime))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

axiom is_prime__def_axiom :
  (forall value:int [is_prime(value)]. ((is_prime(value) = true) ->
  (2 <= value)))

axiom is_prime__def_axiom1 :
  (forall value:int [is_prime(value)]. ((is_prime(value) = true) ->
  (forall v:int. (((2 <= v) and (v <= (value - 1))) -> (not (mod1(value,
  v) = 0))))))

axiom is_prime__def_axiom2 :
  (forall value:int [is_prime(value)]. (((2 <= value) and
  (forall v:int. (((2 <= v) and (v <= (value - 1))) -> (not (mod1(value,
  v) = 0))))) -> (is_prime(value) = true)))

axiom valid_prime_data__def_axiom :
  (forall v:int. is_prime__function_guard(is_prime(v), v))

axiom valid_prime_data__def_axiom1 :
  (forall test_prime_and_coprime_numbers__p__set__is_prime:(int,bool) farray
  [valid_prime_data(test_prime_and_coprime_numbers__p__set__is_prime)].
  ((valid_prime_data(test_prime_and_coprime_numbers__p__set__is_prime) = true) ->
  (forall v:int. (((0 <= v) and (v <= 100000)) ->
  (((test_prime_and_coprime_numbers__p__set__is_prime[v]) = true) ->
  (is_prime(v) = true))))))

axiom valid_prime_data__def_axiom2 :
  (forall test_prime_and_coprime_numbers__p__set__is_prime:(int,bool) farray
  [valid_prime_data(test_prime_and_coprime_numbers__p__set__is_prime)].
  ((valid_prime_data(test_prime_and_coprime_numbers__p__set__is_prime) = true) ->
  (forall v:int. (((0 <= v) and (v <= 100000)) -> ((is_prime(v) = true) ->
  ((test_prime_and_coprime_numbers__p__set__is_prime[v]) = true))))))

axiom valid_prime_data__def_axiom3 :
  (forall test_prime_and_coprime_numbers__p__set__is_prime:(int,bool) farray
  [valid_prime_data(test_prime_and_coprime_numbers__p__set__is_prime)].
  ((forall v:int. (((0 <= v) and (v <= 100000)) ->
   (((test_prime_and_coprime_numbers__p__set__is_prime[v]) = true) <->
   (is_prime(v) = true)))) ->
  (valid_prime_data(test_prime_and_coprime_numbers__p__set__is_prime) = true)))

axiom are_coprime__def_axiom :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((are_coprime(v1,
  v2) = true) -> (0 <  v1)))

axiom are_coprime__def_axiom1 :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((are_coprime(v1,
  v2) = true) -> (0 <  v2)))

axiom are_coprime__def_axiom2 :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((are_coprime(v1,
  v2) = true) ->
  (forall v:int. (((2 <= v) and (v <= min(v1, v2))) -> (not ((mod1(v1,
  v) = 0) and (mod1(v2, v) = 0)))))))

axiom are_coprime__def_axiom3 :
  (forall v1:int. forall v2:int [are_coprime(v1, v2)]. ((((0 <  v1) and
  (0 <  v2)) and
  (forall v:int. (((2 <= v) and (v <= min(v1, v2))) -> (not ((mod1(v1,
  v) = 0) and (mod1(v2, v) = 0)))))) -> (are_coprime(v1, v2) = true)))

axiom has_true__def_axiom :
  (forall number_list:(int,bool) farray.
  (forall low:int. forall high:int [has_true(number_list, low, high)].
  ((has_true(number_list, low, high) = true) ->
  (exists v:int. (((low <= v) and (v <= high)) and
  ((number_list[v]) = true))))))

axiom has_true__def_axiom1 :
  (forall number_list:(int,bool) farray.
  (forall low:int. forall high:int [has_true(number_list, low, high)].
  ((exists v:int. (((low <= v) and (v <= high)) and
   ((number_list[v]) = true))) ->
  (has_true(number_list, low, high) = true))))

axiom has_prime__def_axiom :
  (forall v:int. is_prime__function_guard(is_prime(v), v))

axiom has_prime__def_axiom1 :
  (forall low:int. forall high:int [has_prime(low, high)]. ((has_prime(low,
  high) = true) ->
  (exists v:int. (((low <= v) and (v <= high)) and (is_prime(v) = true)))))

axiom has_prime__def_axiom2 :
  (forall low:int. forall high:int [has_prime(low, high)].
  ((exists v:int. (((low <= v) and (v <= high)) and (is_prime(v) = true))) ->
  (has_prime(low, high) = true)))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "test_prime_and_coprime_numbers.adb", line 3, characters 0-0 *)
goal defqtvc :
  (forall is_prime1:(int,bool) farray. forall result__:int.
  ((forall is_prime2:(int,bool) farray.
   valid_prime_data__function_guard(valid_prime_data(is_prime2), is_prime2)) ->
  ((valid_prime_data(is_prime1) = true) -> (dynamic_invariant(result__,
  false, false, true, true) -> (let o = nearest_prime_number(555, 1,
  is_prime1) : int in
  ((forall o1:int. is_prime__function_guard(is_prime(o1), o1)) ->
  (is_prime__function_guard(is_prime(555), 555) ->
  (is_prime__function_guard(is_prime(555), 555) ->
  ((forall v:int. is_prime__function_guard(is_prime(v), v)) ->
  (is_prime__function_guard(is_prime(555), 555) ->
  ((forall v:int. is_prime__function_guard(is_prime(v), v)) ->
  (is_prime__function_guard(is_prime(555), 555) ->
  ((forall v:int. is_prime__function_guard(is_prime(v), v)) ->
  ((forall v:int. is_prime__function_guard(is_prime(v), v)) ->
  ((nearest_prime_number__function_guard(o, 555, 1, is_prime1) and
  (dynamic_invariant1(o, true, false, true, true) and ((((0 <= o) and
  (o <= 100000)) and (is_prime(o) = true)) and
  (if (is_prime(555) = true) then (o = 555) else (if (andb(notb(is_prime(555)),
  bool_eq3(1, 0)) = true) then ((555 <  o) and
  (forall v:int. (((555 <= v) and (v <= (o - 1))) ->
  (not (is_prime(v) = true))))) else (if (andb(notb(is_prime(555)),
  bool_eq3(1, 1)) = true) then ((o <  555) and
  (forall v:int. ((((o + 1) <= v) and (v <= 555)) ->
  (not (is_prime(v) = true))))) else ((andb(notb(is_prime(555)), bool_eq3(1,
  2)) = true) ->
  ((forall v:int. (((max(0, ((555 - abs_int((555 - o))) + 1)) <= v) and
   (v <= 555)) -> (not (is_prime(v) = true)))) and
  (forall v:int. (((555 <= v) and (v <= min(100000,
  ((555 + abs_int((555 - o))) - 1)))) -> (not (is_prime(v) = true)))))))))))) ->
  (in_range(o) -> (let o1 = initialize_coprime_list(2000)
  : (int,bool) farray in
  ((forall v:int. are_coprime__function_guard(are_coprime(2000, v), 2000, v)) ->
  ((initialize_coprime_list__function_guard(o1, 2000) and
  (forall v:int. (((0 <= v) and (v <= 100000)) -> (((o1[v]) = true) <->
  (are_coprime(2000, v) = true))))) ->
  (forall coprimes:(int,bool) farray. ((coprimes = o1) -> (let o2 =
  nearest_number(coprimes, 1, 555) : int in
  ((nearest_number__function_guard(o2, coprimes, 1, 555) and
  (dynamic_invariant1(o2, true, false, true, true) and ((((0 <= o2) and
  (o2 <= 100000)) and ((coprimes[o2]) = true)) and
  (if (bool_eq3(to_int((coprimes[555])),
  to_int(of_int(1))) = true) then (o2 = 555) else (if (andb(bool_eq3(to_int((coprimes[555])),
  to_int(of_int(0))), bool_eq3(1, 0)) = true) then ((555 <  o2) and
  (forall v:int. (((555 <= v) and (v <= (o2 - 1))) ->
  (not ((coprimes[v]) = true))))) else (if (andb(bool_eq3(to_int((coprimes[555])),
  to_int(of_int(0))), bool_eq3(1, 1)) = true) then ((o2 <  555) and
  (forall v:int. ((((o2 + 1) <= v) and (v <= 555)) ->
  (not ((coprimes[v]) = true))))) else ((andb(bool_eq3(to_int((coprimes[555])),
  to_int(of_int(0))), bool_eq3(1, 2)) = true) ->
  ((forall v:int. (((max(0, ((555 - abs_int((555 - o2))) + 1)) <= v) and
   (v <= 555)) -> (not ((coprimes[v]) = true)))) and
  (forall v:int. (((555 <= v) and (v <= min(100000,
  ((555 + abs_int((555 - o2))) - 1)))) -> (not ((coprimes[v]) = true)))))))))))) ->
  in_range(o2))))))))))))))))))))))))
