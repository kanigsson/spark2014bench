(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

predicate dynamic_invariant(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type topt_indexB

logic topt_indexBqtint : topt_indexB -> int

axiom topt_indexBqtaxiom :
  (forall i:topt_indexB. ((- 2147483648) <= topt_indexBqtint(i)))

axiom topt_indexBqtaxiom1 :
  (forall i:topt_indexB. (topt_indexBqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : topt_indexB, topt_indexB -> bool

logic dummy1 : topt_indexB

type topt_indexB__ref = { topt_indexB__content : topt_indexB
}

function topt_indexB__ref_topt_indexB__content__projection(a: topt_indexB__ref) : topt_indexB =
  (a).topt_indexB__content

function to_rep1(x: topt_indexB) : int = topt_indexBqtint(x)

logic of_rep1 : int -> topt_indexB

axiom inversion_axiom1 :
  (forall x:topt_indexB [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:topt_indexB [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index, index -> bool

logic dummy2 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> topt_indexB

logic last : t -> topt_indexB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type ar__ref = { ar__content : us_t
}

function ar__ref_ar__content__projection(a: ar__ref) : us_t = (a).ar__content

logic empty : us_t -> bool

logic empty__function_guard : bool, us_t -> prop

predicate dynamic_invariant1(temp___expr_176: us_t, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = ((not (temp___skip_constant_173 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_176),
  last1(temp___expr_176)))

axiom empty__def_axiom :
  (forall a:us_t [empty(a)]. ((empty(a) = true) -> (last1(a) <  first1(a))))

axiom empty__def_axiom1 :
  (forall a:us_t [empty(a)]. ((last1(a) <  first1(a)) -> (empty(a) = true)))

logic sorted : us_t -> bool

logic sorted__function_guard : bool, us_t -> prop

axiom sorted__def_axiom :
  (forall a:us_t [sorted(a)]. ((sorted(a) = true) ->
  (forall i1:int. (((first1(a) <= i1) and (i1 <= last1(a))) ->
  (forall i2:int. (((i1 <= i2) and (i2 <= last1(a))) ->
  (to_rep((to_array(a)[i1])) <= to_rep((to_array(a)[i2])))))))))

axiom sorted__def_axiom1 :
  (forall a:us_t [sorted(a)].
  ((forall i1:int. (((first1(a) <= i1) and (i1 <= last1(a))) ->
   (forall i2:int. (((i1 <= i2) and (i2 <= last1(a))) ->
   (to_rep((to_array(a)[i1])) <= to_rep((to_array(a)[i2]))))))) ->
  (sorted(a) = true)))

logic a : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_invariant2(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_169))

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "binary_search.ads", line 14, characters 0-0 *)
goal defqtvc :
  (forall left:int. forall right:int. forall med:int. (dynamic_invariant1(a,
  true, false, true, true) -> (dynamic_invariant(i, true, false, true,
  true) -> (sorted__function_guard(sorted(a), a) -> ((sorted(a) = true) ->
  (forall binary_search__search__result:int. ((dynamic_invariant2(left,
  false, false, true, true) and (dynamic_invariant2(right, false, false,
  true, true) and (dynamic_invariant2(med, false, false, true, true) and
  (let o = a : us_t in (let o1 = empty(o) : bool in
  ((empty__function_guard(o1, o) and ((o1 = true) <->
  (last1(o) <  first1(o)))) and
  (exists spark__branch:bool. ((spark__branch = o1) and
  (if (spark__branch = true) then (binary_search__search__result = 0) else (let o2 =
  first1(a) : int in (in_range3(o2) and
  (exists left1:int. ((left1 = o2) and (let o3 = last1(a) : int in
  (in_range3(o3) and
  (exists right1:int. ((right1 = o3) and (((first1(a) <= left1) and
  (left1 <= last1(a))) and
  (exists o4:int. ((to_rep((to_array(a)[left1])) = o4) and
  (exists spark__branch1:bool.
  ((spark__branch1 = andb((if (left1 = right1) then true else false),
  (if (o4 = i) then true else false))) and
  (if (spark__branch1 = true) then (binary_search__search__result = left1) else (((first1(a) <= right1) and
  (right1 <= last1(a))) and
  (exists o5:int. ((to_rep((to_array(a)[right1])) = o5) and
  (((first1(a) <= left1) and (left1 <= last1(a))) and
  (exists o6:int. ((to_rep((to_array(a)[left1])) = o6) and
  (exists spark__branch2:bool.
  ((spark__branch2 = orb((if (i <  o6) then true else false),
  (if (o5 <  i) then true else false))) and
  (if (spark__branch2 = true) then (binary_search__search__result = 0) else (((left1 <  right1) and
  (exists left2:int. exists right2:int. exists med1:int.
  ((((first1(a) <= left2) and (left2 <= last1(a))) and
  ((first1(a) <= right2) and (right2 <= last1(a)))) and
  ((andb((if ((dynamic_invariant2(right2, false, true, true, true) and
  dynamic_invariant2(med1, false, true, true, true)) and
  dynamic_invariant2(left2, false, true, true, true)) then true else false),
  (if (left2 <  right2) then true else false)) = true) and
  (exists temp___203:int. ((temp___203 = (right2 - left2)) and (let o7 =
  (left2 + div((right2 - left2), 2)) : int in (in_range2(o7) and
  (in_range3(o7) and
  (exists med2:int. ((med2 = o7) and (((first1(a) <= med2) and
  (med2 <= last1(a))) and
  (exists o8:int. ((to_rep((to_array(a)[med2])) = o8) and
  (exists spark__branch3:bool.
  ((spark__branch3 = (if (o8 <  i) then true else false)) and
  ((not (spark__branch3 = true)) and (((first1(a) <= med2) and
  (med2 <= last1(a))) and
  (exists o9:int. ((to_rep((to_array(a)[med2])) = o9) and
  (exists spark__branch4:bool.
  ((spark__branch4 = (if (i <  o9) then true else false)) and
  ((not (spark__branch4 = true)) and
  (binary_search__search__result = med2)))))))))))))))))))))))) or
  (((not (left1 <  right1)) or
  (exists left2:int. exists right2:int. exists med1:int.
  ((((first1(a) <= left2) and (left2 <= last1(a))) and
  ((first1(a) <= right2) and (right2 <= last1(a)))) and
  ((andb((if ((dynamic_invariant2(right2, false, true, true, true) and
  dynamic_invariant2(med1, false, true, true, true)) and
  dynamic_invariant2(left2, false, true, true, true)) then true else false),
  (if (left2 <  right2) then true else false)) = true) and
  (exists temp___203:int. ((temp___203 = (right2 - left2)) and (let o7 =
  (left2 + div((right2 - left2), 2)) : int in (in_range2(o7) and
  (in_range3(o7) and
  (exists med2:int. ((med2 = o7) and
  (exists left3:int. exists right3:int. ((((first1(a) <= med2) and
  (med2 <= last1(a))) and
  (exists o8:int. ((to_rep((to_array(a)[med2])) = o8) and
  (exists spark__branch3:bool.
  ((spark__branch3 = (if (o8 <  i) then true else false)) and
  (if (spark__branch3 = true) then ((let o9 = (med2 + 1) : int in
  (in_range2(o9) and (left3 = o9))) and
  (right3 = right2)) else ((((first1(a) <= med2) and (med2 <= last1(a))) and
  (exists o9:int. ((to_rep((to_array(a)[med2])) = o9) and
  (exists spark__branch4:bool.
  ((spark__branch4 = (if (i <  o9) then true else false)) and
  ((spark__branch4 = true) and (let o10 = (med2 - 1) : int in
  (in_range3(o10) and (right3 = o10))))))))) and (left3 = left2)))))))) and
  (not (left3 <  right3))))))))))))))) and
  (binary_search__search__result = 0))))))))))))))))))))))))))))))))))) ->
  (((first1(a) <= binary_search__search__result) and
  (binary_search__search__result <= last1(a))) ->
  (to_rep((to_array(a)[binary_search__search__result])) = i)))))))))
