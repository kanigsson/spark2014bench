(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic div : int, int -> int

logic mod : int, int -> int

axiom Div_mod :
  (forall x:int. forall y:int. ((not (y = 0)) -> (x = ((y * div(x,
  y)) + mod(x, y)))))

axiom Div_bound :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_bound1 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (div(x, y) <= x)))

axiom Mod_bound :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((-abs_int(y)) <  mod(x,
  y))))

axiom Mod_bound1 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (mod(x, y) <  abs_int(y))))

axiom Div_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= div(x, y))))

axiom Div_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (0 <  y)) -> (div(x, y) <= 0)))

axiom Mod_sign_pos :
  (forall x:int. forall y:int. (((0 <= x) and (not (y = 0))) -> (0 <= mod(x,
  y))))

axiom Mod_sign_neg :
  (forall x:int. forall y:int. (((x <= 0) and (not (y = 0))) -> (mod(x,
  y) <= 0)))

axiom Rounds_toward_zero :
  (forall x:int. forall y:int. ((not (y = 0)) -> (abs_int((div(x,
  y) * y)) <= abs_int(x))))

axiom Div_1 : (forall x:int. (div(x, 1) = x))

axiom Mod_1 : (forall x:int. (mod(x, 1) = 0))

axiom Div_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (div(x, y) = 0)))

axiom Mod_inf :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> (mod(x, y) = x)))

axiom Div_mult :
  (forall x:int. forall y:int. forall z:int [div(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (div(((x * y) + z),
  x) = (y + div(z, x)))))

axiom Mod_mult :
  (forall x:int. forall y:int. forall z:int [mod(((x * y) + z), x)].
  (((0 <  x) and ((0 <= y) and (0 <= z))) -> (mod(((x * y) + z), x) = mod(z,
  x))))

axiom Div_mod1 :
  (forall x:int. forall y:int. ((not (y = 0)) ->
  (x = ((y * (x / y)) + (x % y)))))

axiom Mod_bound2 :
  (forall x:int. forall y:int. ((not (y = 0)) -> (0 <= (x % y))))

axiom Mod_bound3 :
  (forall x:int. forall y:int. ((not (y = 0)) -> ((x % y) <  abs_int(y))))

axiom Div_unique :
  (forall x:int. forall y:int. forall q:int. ((0 <  y) ->
  ((((q * y) <= x) and (x <  ((q * y) + y))) -> ((x / y) = q))))

axiom Div_bound2 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> (0 <= (x / y))))

axiom Div_bound3 :
  (forall x:int. forall y:int. (((0 <= x) and (0 <  y)) -> ((x / y) <= x)))

axiom Mod_11 : (forall x:int. ((x % 1) = 0))

axiom Div_11 : (forall x:int. ((x / 1) = x))

axiom Div_inf1 :
  (forall x:int. forall y:int. (((0 <= x) and (x <  y)) -> ((x / y) = 0)))

axiom Div_inf_neg :
  (forall x:int. forall y:int. (((0 <  x) and (x <= y)) ->
  (((-x) / y) = (- 1))))

axiom Mod_0 : (forall y:int. ((not (y = 0)) -> ((0 % y) = 0)))

axiom Div_1_left : (forall y:int. ((1 <  y) -> ((1 / y) = 0)))

axiom Div_minus1_left : (forall y:int. ((1 <  y) -> (((- 1) / y) = (- 1))))

axiom Mod_1_left : (forall y:int. ((1 <  y) -> ((1 % y) = 1)))

axiom Mod_minus1_left :
  (forall y:int [((- 1) % y)]. ((1 <  y) -> (((- 1) % y) = (y - 1))))

axiom Div_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) / x)].
  ((0 <  x) -> ((((x * y) + z) / x) = (y + (z / x)))))

axiom Mod_mult1 :
  (forall x:int. forall y:int. forall z:int [(((x * y) + z) % x)].
  ((0 <  x) -> ((((x * y) + z) % x) = (z % x))))

function mod1(x: int, y: int) : int =
  (if (0 <  y) then (x % y) else ((x % y) + y))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

logic mach : int

logic attr__ATTRIBUTE_ADDRESS : int

logic present_heading : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic target_heading : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic bank : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic heading_offset : int, int -> int

logic heading_offset__function_guard : int, int, int -> prop

type headdegree

logic headdegreeqtint : headdegree -> int

axiom headdegreeqtaxiom : (forall i:headdegree. (0 <= headdegreeqtint(i)))

axiom headdegreeqtaxiom1 : (forall i:headdegree. (headdegreeqtint(i) <= 359))

predicate in_range1(x: int) = ((0 <= x) and (x <= 359))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : headdegree, headdegree -> bool

logic dummy : headdegree

type headdegree__ref = { headdegree__content : headdegree
}

function headdegree__ref_headdegree__content__projection(a: headdegree__ref) : headdegree =
  (a).headdegree__content

predicate dynamic_invariant(temp___expr_167: int, temp___is_init_163: bool,
  temp___skip_constant_164: bool, temp___do_toplevel_165: bool,
  temp___do_typ_inv_166: bool) = (((temp___is_init_163 = true) or
  (0 <= 359)) -> in_range1(temp___expr_167))

axiom heading_offset__post_axiom :
  (forall present:int. forall target:int [heading_offset(present, target)].
  ((dynamic_invariant(present, true, true, true, true) and
  dynamic_invariant(target, true, true, true, true)) -> (let result =
  heading_offset(present, target) : int in
  (heading_offset__function_guard(result, present, target) ->
  dynamic_invariant(result, true, false, true, true)))))

logic scale_movement : int, int, int, int -> int

logic scale_movement__function_guard : int, int, int, int, int -> prop

type machnumber

logic machnumberqtint : machnumber -> int

axiom machnumberqtaxiom : (forall i:machnumber. (0 <= machnumberqtint(i)))

axiom machnumberqtaxiom1 : (forall i:machnumber. (machnumberqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : machnumber, machnumber -> bool

logic dummy1 : machnumber

type machnumber__ref = { machnumber__content : machnumber
}

function machnumber__ref_machnumber__content__projection(a: machnumber__ref) : machnumber =
  (a).machnumber__content

predicate dynamic_invariant1(temp___expr_160: int, temp___is_init_156: bool,
  temp___skip_constant_157: bool, temp___do_toplevel_158: bool,
  temp___do_typ_inv_159: bool) = (((temp___is_init_156 = true) or
  (0 <= 100)) -> in_range2(temp___expr_160))

type controlangle

logic controlangleqtint : controlangle -> int

axiom controlangleqtaxiom :
  (forall i:controlangle. ((- 45) <= controlangleqtint(i)))

axiom controlangleqtaxiom1 :
  (forall i:controlangle. (controlangleqtint(i) <= 45))

predicate in_range3(x: int) = (((- 45) <= x) and (x <= 45))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : controlangle, controlangle -> bool

logic dummy2 : controlangle

type controlangle__ref = { controlangle__content : controlangle
}

function controlangle__ref_controlangle__content__projection(a: controlangle__ref) : controlangle =
  (a).controlangle__content

predicate dynamic_invariant2(temp___expr_195: int, temp___is_init_191: bool,
  temp___skip_constant_192: bool, temp___do_toplevel_193: bool,
  temp___do_typ_inv_194: bool) = (((temp___is_init_191 = true) or
  ((- 45) <= 45)) -> in_range3(temp___expr_195))

type scaledata

logic scaledataqtint : scaledata -> int

axiom scaledataqtaxiom : (forall i:scaledata. ((- 100) <= scaledataqtint(i)))

axiom scaledataqtaxiom1 : (forall i:scaledata. (scaledataqtint(i) <= 100))

predicate in_range4(x: int) = (((- 100) <= x) and (x <= 100))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : scaledata, scaledata -> bool

logic dummy3 : scaledata

type scaledata__ref = { scaledata__content : scaledata
}

function scaledata__ref_scaledata__content__projection(a: scaledata__ref) : scaledata =
  (a).scaledata__content

predicate dynamic_invariant3(temp___expr_202: int, temp___is_init_198: bool,
  temp___skip_constant_199: bool, temp___do_toplevel_200: bool,
  temp___do_typ_inv_201: bool) = (((temp___is_init_198 = true) or
  ((- 100) <= 100)) -> in_range4(temp___expr_202))

axiom scale_movement__post_axiom :
  (forall mach1:int. forall present:int. forall target:int. forall max:int
  [scale_movement(mach1, present, target, max)].
  (((((dynamic_invariant1(mach1, true, true, true, true) and
  dynamic_invariant3(present, true, true, true, true)) and
  dynamic_invariant3(target, true, true, true, true)) and
  dynamic_invariant2(max, true, true, true, true)) and (0 <  max)) ->
  (let result = scale_movement(mach1, present, target, max) : int in
  (scale_movement__function_guard(result, mach1, present, target, max) ->
  ((-max) <= result)))))

axiom scale_movement__post_axiom1 :
  (forall mach1:int. forall present:int. forall target:int. forall max:int
  [scale_movement(mach1, present, target, max)].
  (((((dynamic_invariant1(mach1, true, true, true, true) and
  dynamic_invariant3(present, true, true, true, true)) and
  dynamic_invariant3(target, true, true, true, true)) and
  dynamic_invariant2(max, true, true, true, true)) and (0 <  max)) ->
  (let result = scale_movement(mach1, present, target, max) : int in
  (scale_movement__function_guard(result, mach1, present, target, max) ->
  (result <= max)))))

axiom scale_movement__post_axiom2 :
  (forall mach1:int. forall present:int. forall target:int. forall max:int
  [scale_movement(mach1, present, target, max)].
  (((((dynamic_invariant1(mach1, true, true, true, true) and
  dynamic_invariant3(present, true, true, true, true)) and
  dynamic_invariant3(target, true, true, true, true)) and
  dynamic_invariant2(max, true, true, true, true)) and (0 <  max)) ->
  (let result = scale_movement(mach1, present, target, max) : int in
  (scale_movement__function_guard(result, mach1, present, target, max) ->
  dynamic_invariant2(result, true, false, true, true)))))

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

type degreespersec

logic degreespersecqtint : degreespersec -> int

axiom degreespersecqtaxiom :
  (forall i:degreespersec. ((- 180) <= degreespersecqtint(i)))

axiom degreespersecqtaxiom1 :
  (forall i:degreespersec. (degreespersecqtint(i) <= 180))

predicate in_range5(x: int) = (((- 180) <= x) and (x <= 180))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : degreespersec, degreespersec -> bool

logic dummy4 : degreespersec

type degreespersec__ref = { degreespersec__content : degreespersec
}

function degreespersec__ref_degreespersec__content__projection(a: degreespersec__ref) : degreespersec =
  (a).degreespersec__content

predicate dynamic_invariant4(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  ((- 180) <= 180)) -> in_range5(temp___expr_181))

logic c11b : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic c12b : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic c13b : int

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic attr__ATTRIBUTE_ADDRESS11 : int

logic c16b : int

logic attr__ATTRIBUTE_ADDRESS12 : int

logic c17b : int

logic attr__ATTRIBUTE_ADDRESS13 : int

logic attr__ATTRIBUTE_ADDRESS14 : int

logic attr__ATTRIBUTE_ADDRESS15 : int

logic c20b : int

logic attr__ATTRIBUTE_ADDRESS16 : int

logic c21b : int

logic attr__ATTRIBUTE_ADDRESS17 : int

logic c22b : int

logic attr__ATTRIBUTE_ADDRESS18 : int

logic attr__ATTRIBUTE_ADDRESS19 : int

type bankangle

logic bankangleqtint : bankangle -> int

axiom bankangleqtaxiom : (forall i:bankangle. ((- 45) <= bankangleqtint(i)))

axiom bankangleqtaxiom1 : (forall i:bankangle. (bankangleqtint(i) <= 45))

predicate in_range6(x: int) = (((- 45) <= x) and (x <= 45))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq5 : bankangle, bankangle -> bool

logic dummy5 : bankangle

type bankangle__ref = { bankangle__content : bankangle
}

function bankangle__ref_bankangle__content__projection(a: bankangle__ref) : bankangle =
  (a).bankangle__content

predicate dynamic_invariant5(temp___expr_174: int, temp___is_init_170: bool,
  temp___skip_constant_171: bool, temp___do_toplevel_172: bool,
  temp___do_typ_inv_173: bool) = (((temp___is_init_170 = true) or
  ((- 45) <= 45)) -> in_range6(temp___expr_174))

type degreespersec1

logic degreespersecqtint1 : degreespersec1 -> int

axiom degreespersecqtaxiom2 :
  (forall i:degreespersec1. ((- 180) <= degreespersecqtint1(i)))

axiom degreespersecqtaxiom3 :
  (forall i:degreespersec1. (degreespersecqtint1(i) <= 180))

predicate in_range7(x: int) = (((- 180) <= x) and (x <= 180))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq6 : degreespersec1, degreespersec1 -> bool

logic dummy6 : degreespersec1

type degreespersec__ref1 = { degreespersec__content1 : degreespersec1
}

function degreespersec__ref_degreespersec__content__2__projection(a: degreespersec__ref1) : degreespersec1 =
  (a).degreespersec__content1

predicate dynamic_invariant6(temp___expr_188: int, temp___is_init_184: bool,
  temp___skip_constant_185: bool, temp___do_toplevel_186: bool,
  temp___do_typ_inv_187: bool) = (((temp___is_init_184 = true) or
  ((- 180) <= 180)) -> in_range7(temp___expr_188))

axiom c11b__def_axiom : (c11b = present_heading)

axiom c12b__def_axiom : (c12b = target_heading)

axiom c13b__def_axiom : (c13b = bank)

axiom c16b__def_axiom : (c16b = c11b)

axiom c17b__def_axiom : (c17b = c12b)

axiom c22b__def_axiom : (c22b = mach)

axiom cdiv_cases :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((0 <  d) -> (div(n,
  d) = (n / d)))))

axiom cdiv_cases1 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((0 <  d) -> (div(n,
  d) = (-((-n) / d))))))

axiom cdiv_cases2 :
  (forall n:int. forall d:int [div(n, d)]. ((0 <= n) -> ((d <  0) -> (div(n,
  d) = (-(n / (-d)))))))

axiom cdiv_cases3 :
  (forall n:int. forall d:int [div(n, d)]. ((n <= 0) -> ((d <  0) -> (div(n,
  d) = ((-n) / (-d))))))

axiom cmod_cases :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((0 <  d) -> (mod(n,
  d) = (n % d)))))

axiom cmod_cases1 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((0 <  d) -> (mod(n,
  d) = (-((-n) % d))))))

axiom cmod_cases2 :
  (forall n:int. forall d:int [mod(n, d)]. ((0 <= n) -> ((d <  0) -> (mod(n,
  d) = (n % (-d))))))

axiom cmod_cases3 :
  (forall n:int. forall d:int [mod(n, d)]. ((n <= 0) -> ((d <  0) -> (mod(n,
  d) = (-((-n) % (-d)))))))

 (* File "ap-heading-roll.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall present_rollrate:int. forall target_rollrate:int.
  forall aileron_movement:int. forall target_bank:int. forall result__:int.
  forall result__1:int. forall offset:int. forall target_angle:int.
  (dynamic_invariant1(mach, true, false, true, true) ->
  (dynamic_invariant(present_heading, true, false, true, true) ->
  (dynamic_invariant(target_heading, true, false, true, true) ->
  (dynamic_invariant5(bank, true, false, true, true) ->
  (dynamic_invariant6(present_rollrate, false, false, true, true) ->
  (dynamic_invariant6(target_rollrate, false, false, true, true) ->
  (dynamic_invariant2(aileron_movement, false, false, true, true) ->
  (forall ada___ada___ada___ap__heading__roll__rate__calc_rollrate__present_rollrate:int.
  (dynamic_invariant4(ada___ada___ada___ap__heading__roll__rate__calc_rollrate__present_rollrate,
  true, true, true, true) ->
  (forall present_rollrate1:int.
  ((present_rollrate1 = ada___ada___ada___ap__heading__roll__rate__calc_rollrate__present_rollrate) ->
  ((present_heading = c11b) -> (dynamic_invariant(c11b, true, false, true,
  true) -> ((target_heading = c12b) -> (dynamic_invariant(c12b, true, false,
  true, true) -> ((bank = c13b) -> (dynamic_invariant5(c13b, true, false,
  true, true) -> (dynamic_invariant5(target_bank, false, false, true,
  true) -> (dynamic_invariant6(result__, false, false, true, true) ->
  ((c11b = c16b) -> (dynamic_invariant(c16b, true, false, true, true) ->
  ((c12b = c17b) -> (dynamic_invariant(c17b, true, false, true, true) ->
  (dynamic_invariant5(result__1, false, false, true, true) ->
  (dynamic_invariant(offset, false, false, true, true) -> (let o = c17b
  : int in (let o1 = c16b : int in (let o2 = heading_offset(o1, o) : int in
  ((heading_offset__function_guard(o2, o1, o) and dynamic_invariant(o2, true,
  false, true, true)) ->
  (forall offset1:int. ((offset1 = o2) ->
  (forall spark__branch:bool. forall result__2:int.
  ((exists spark__branch1:bool.
   ((spark__branch1 = andb((if (40 <  offset1) then true else false),
   (if (offset1 <= 180) then true else false))) and
   (if (spark__branch1 = true) then ((result__2 = 40) and
   (spark__branch = spark__branch1)) else (exists spark__branch2:bool.
                                          ((spark__branch2 = andb((if (180 <  offset1) then true else false),
                                          (if (offset1 <  320) then true else false))) and
                                          (if (spark__branch2 = true) then ((result__2 = (- 40)) and
                                          (spark__branch = spark__branch2)) else ((spark__branch = (if (offset1 <= 40) then true else false)) and
                                          (if (spark__branch = true) then (in_range6(offset1) and
                                          (result__2 = offset1)) else (let o3 =
                                          (360 - offset1) : int in
                                          (in_range6(o3) and
                                          (result__2 = o3))))))))))) ->
  (forall target_bank1:int. ((target_bank1 = result__2) ->
  (forall result__3:int. ((result__3 = div((target_bank1 - c13b), 5)) ->
  (forall result__4:int.
  ((exists spark__branch1:bool.
   ((spark__branch1 = (if (10 <  result__3) then true else false)) and
   (if (spark__branch1 = true) then (result__4 = 10) else (exists spark__branch2:bool.
                                                          ((spark__branch2 = (if (result__3 <  (- 10)) then true else false)) and
                                                          (if (spark__branch2 = true) then (result__4 = (- 10)) else (result__4 = result__3))))))) ->
  (forall target_rollrate1:int. ((target_rollrate1 = result__4) ->
  ((present_rollrate1 = c20b) -> (dynamic_invariant6(c20b, true, false, true,
  true) -> ((target_rollrate1 = c21b) -> (dynamic_invariant6(c21b, true,
  false, true, true) -> ((mach = c22b) -> (dynamic_invariant1(c22b, true,
  false, true, true) -> (dynamic_invariant2(target_angle, false, false, true,
  true) -> (not (2 = 0)))))))))))))))))))))))))))))))))))))))))))))))))))
