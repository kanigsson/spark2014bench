(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_discrs = { rec__private_child__root__c : natural
}

function us_split_discrs_rec__private_child__root__c__projection(a: us_split_discrs) : natural =
  (a).rec__private_child__root__c

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields; attr__tag : int
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

function bool_eq1(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_discrs1).rec__private_child__root__c) = to_rep(((b).us_split_discrs1).rec__private_child__root__c)) then true else false)

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic private_child__root__c__first__bit : int

logic private_child__root__c__last__bit : int

logic private_child__root__c__position : int

axiom private_child__root__c__first__bit_axiom :
  (0 <= private_child__root__c__first__bit)

axiom private_child__root__c__last__bit_axiom :
  (private_child__root__c__first__bit <  private_child__root__c__last__bit)

axiom private_child__root__c__position_axiom :
  (0 <= private_child__root__c__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type root__ref = { root__content : us_rep
}

function root__ref_root__content__projection(a: root__ref) : us_rep =
  (a).root__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields2 = { rec__private_child__p_c__nested__c : us_main_type;
rec__ext__1 : us_private
}

function us_split_fields_rec__private_child__p_c__nested__c__projection(a: us_split_fields2) : us_main_type =
  (a).rec__private_child__p_c__nested__c

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2; attr__tag1 : int
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_main_type, us_private -> us_private

logic extract__private_child__p_c__nested__c : us_private -> us_main_type

axiom extract__private_child__p_c__nested__c__conv :
  (forall private_child__p_c__nested__c:us_main_type.
  (forall rec__ext__2:us_private.
  (extract__private_child__p_c__nested__c(hide_ext__(private_child__p_c__nested__c,
  rec__ext__2)) = private_child__p_c__nested__c)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__private_child__p_c__nested__c,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__private_child__p_c__nested__c =
  extract__private_child__p_c__nested__c(((r).us_split_fields1).rec__ext__);
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

function bool_eq2(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs2).rec__private_child__root__c) = to_rep(((b).us_split_discrs2).rec__private_child__root__c)) and
  (us_main_eq(((a).us_split_fields3).rec__private_child__p_c__nested__c,
  ((b).us_split_fields3).rec__private_child__p_c__nested__c) = true)) then true else false)

logic us_tag1 : int

predicate in_range1(rec__private_child__root__c1: int, a: us_rep) =
  (rec__private_child__root__c1 = to_rep(((a).us_split_discrs1).rec__private_child__root__c))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic private_child__root__c__first__bit1 : int

logic private_child__root__c__last__bit1 : int

logic private_child__root__c__position1 : int

axiom private_child__root__c__first__bit_axiom1 :
  (0 <= private_child__root__c__first__bit1)

axiom private_child__root__c__last__bit_axiom1 :
  (private_child__root__c__first__bit1 <  private_child__root__c__last__bit1)

axiom private_child__root__c__position_axiom1 :
  (0 <= private_child__root__c__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

logic dummy2 : us_rep1

type txS__ref = { txS__content : us_rep1
}

function txS__ref_txS__content__projection(a: txS__ref) : us_rep1 =
  (a).txS__content

logic x__split_discrs : us_split_discrs

logic x__attr__tag : int

logic attr__ATTRIBUTE_ADDRESS : int

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic private_child__root__c__first__bit2 : int

logic private_child__root__c__last__bit2 : int

logic private_child__root__c__position2 : int

axiom private_child__root__c__first__bit_axiom2 :
  (0 <= private_child__root__c__first__bit2)

axiom private_child__root__c__last__bit_axiom2 :
  (private_child__root__c__first__bit2 <  private_child__root__c__last__bit2)

axiom private_child__root__c__position_axiom2 :
  (0 <= private_child__root__c__position2)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type c__ref = { c__content : us_rep1
}

function c__ref_c__content__projection(a: c__ref) : us_rep1 = (a).c__content

logic is_valid : us_rep1 -> bool

logic is_valid__function_guard : bool, us_rep1 -> prop

logic is_valid1 : int, us_rep1 -> bool

logic is_valid__function_guard1 : bool, int, us_rep1 -> prop

predicate dynamic_invariant(temp___expr_187: us_rep1,
  temp___is_init_183: bool, temp___skip_constant_184: bool,
  temp___do_toplevel_185: bool, temp___do_typ_inv_186: bool) =
  ((not (temp___skip_constant_184 = true)) -> in_range1(10,
  to_base(temp___expr_187)))

axiom temp___result_193qtdef :
  (forall temp___192:us_rep1. is_valid__function_guard(is_valid(temp___192),
  temp___192))

predicate default_initial_assumption(temp___expr_189: us_rep1,
  temp___skip_top_level_190: bool) =
  ((((temp___expr_189).attr__tag1 = us_tag1) and
  (to_rep(((temp___expr_189).us_split_discrs2).rec__private_child__root__c) = 10)) and
  ((not (temp___skip_top_level_190 = true)) ->
  (is_valid(temp___expr_189) = true)))

predicate dynamic_invariant1(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq3(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE1 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> bool

logic us_tag3 : int

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic private_child__root__c__first__bit3 : int

logic private_child__root__c__last__bit3 : int

logic private_child__root__c__position3 : int

axiom private_child__root__c__first__bit_axiom3 :
  (0 <= private_child__root__c__first__bit3)

axiom private_child__root__c__last__bit_axiom3 :
  (private_child__root__c__first__bit3 <  private_child__root__c__last__bit3)

axiom private_child__root__c__position_axiom3 :
  (0 <= private_child__root__c__position3)

logic user_eq4 : us_rep1, us_rep1 -> bool

logic dummy4 : us_rep1

type child__ref = { child__content : us_rep1
}

function child__ref_child__content__projection(a: child__ref) : us_rep1 =
  (a).child__content

axiom private_child__p_c__nested__c__compat_axiom :
  (forall x:us_rep1 [is_valid1(us_tag2, x)].
  (is_valid__function_guard1(is_valid1(us_tag2, x), us_tag2, x) ->
  (forall x1:us_rep1. is_valid__function_guard(is_valid(x1), x1))))

axiom private_child__p_c__nested__c__compat_axiom1 :
  (forall x:us_rep1 [is_valid1(us_tag2, x)].
  (is_valid__function_guard1(is_valid1(us_tag2, x), us_tag2, x) ->
  (to_int(is_valid(x)) = to_int(is_valid1(us_tag2, x)))))

axiom private_child__p_c__child__compat_axiom :
  (forall x:us_rep1 [is_valid1(us_tag3, x)].
  (is_valid__function_guard1(is_valid1(us_tag3, x), us_tag3, x) ->
  (forall x1:us_rep1. is_valid__function_guard(is_valid(x1), x1))))

axiom private_child__p_c__child__compat_axiom1 :
  (forall x:us_rep1 [is_valid1(us_tag3, x)].
  (is_valid__function_guard1(is_valid1(us_tag3, x), us_tag3, x) ->
  (to_int(is_valid(x)) = to_int(is_valid1(us_tag3, x)))))

axiom private_child__TxS__compat_axiom :
  (forall x:us_rep1 [is_valid1(us_tag1, x)].
  (is_valid__function_guard1(is_valid1(us_tag1, x), us_tag1, x) ->
  (forall x1:us_rep1. is_valid__function_guard(is_valid(x1), x1))))

axiom private_child__TxS__compat_axiom1 :
  (forall x:us_rep1 [is_valid1(us_tag1, x)].
  (is_valid__function_guard1(is_valid1(us_tag1, x), us_tag1, x) ->
  (to_int(is_valid(x)) = to_int(is_valid1(us_tag1, x)))))

 (* File "private_child.ads", line 2, characters 0-0 *)
goal defqtvc : in_range(10)
