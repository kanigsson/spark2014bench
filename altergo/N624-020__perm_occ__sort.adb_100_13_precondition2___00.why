(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

logic bool_eq : int, int -> bool

logic bool_ne : int, int -> bool

logic bool_lt : int, int -> bool

logic bool_le : int, int -> bool

logic bool_gt : int, int -> bool

logic bool_ge : int, int -> bool

axiom bool_eq_axiom :
  (forall x:int. (forall y:int. ((bool_eq(x, y) = true) -> (x = y))))

axiom bool_eq_axiom1 :
  (forall x:int. (forall y:int. ((x = y) -> (bool_eq(x, y) = true))))

axiom bool_ne_axiom :
  (forall x:int. (forall y:int. ((bool_ne(x, y) = true) -> (not (x = y)))))

axiom bool_ne_axiom1 :
  (forall x:int. (forall y:int. ((not (x = y)) -> (bool_ne(x, y) = true))))

axiom bool_lt_axiom :
  (forall x:int. (forall y:int. ((bool_lt(x, y) = true) -> (x <  y))))

axiom bool_lt_axiom1 :
  (forall x:int. (forall y:int. ((x <  y) -> (bool_lt(x, y) = true))))

axiom bool_int__le_axiom :
  (forall x:int. (forall y:int. ((bool_le(x, y) = true) -> (x <= y))))

axiom bool_int__le_axiom1 :
  (forall x:int. (forall y:int. ((x <= y) -> (bool_le(x, y) = true))))

axiom bool_gt_axiom :
  (forall x:int. (forall y:int. ((bool_gt(x, y) = true) -> (y <  x))))

axiom bool_gt_axiom1 :
  (forall x:int. (forall y:int. ((y <  x) -> (bool_gt(x, y) = true))))

axiom bool_ge_axiom :
  (forall x:int. (forall y:int. ((bool_ge(x, y) = true) -> (y <= x))))

axiom bool_ge_axiom1 :
  (forall x:int. (forall y:int. ((y <= x) -> (bool_ge(x, y) = true))))

function length(x: int, y: int) : int =
  (if (x <= y) then ((y - x) + 1) else 0)

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq1(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

predicate dynamic_invariant(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range3(temp___expr_46))

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic values__first : integer

logic values__last : integer

logic attr__ATTRIBUTE_ADDRESS : int

type index

logic indexqtint : index -> int

axiom indexqtaxiom : (forall i:index. (1 <= indexqtint(i)))

axiom indexqtaxiom1 : (forall i:index. (indexqtint(i) <= 100))

predicate in_range4(x: int) = ((1 <= x) and (x <= 100))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : index, index -> bool

logic dummy3 : index

type index__ref = { index__content : index
}

function index__ref_index__content__projection(a: index__ref) : index =
  (a).index__content

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range4(low) and in_range4(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length1(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type nat_array__ref = { nat_array__content : us_t
}

function nat_array__ref_nat_array__content__projection(a: nat_array__ref) : us_t =
  (a).nat_array__content

logic is_perm : us_t, us_t -> bool

logic is_perm__function_guard : bool, us_t, us_t -> prop

logic occ : us_t, int -> int

logic occ__function_guard : int, us_t, int -> prop

predicate dynamic_invariant1(temp___expr_172: us_t, temp___is_init_168: bool,
  temp___skip_constant_169: bool, temp___do_toplevel_170: bool,
  temp___do_typ_inv_171: bool) = ((not (temp___skip_constant_169 = true)) ->
  dynamic_property(1, 100, first1(temp___expr_172), last1(temp___expr_172)))

axiom is_perm__def_axiom :
  (forall a:us_t. forall e:int. occ__function_guard(occ(a, e), a, e))

axiom is_perm__def_axiom1 :
  (forall b:us_t. forall e:int. occ__function_guard(occ(b, e), b, e))

axiom is_perm__def_axiom2 :
  (forall a:us_t. forall b:us_t [is_perm(a, b)]. ((is_perm(a, b) = true) ->
  (forall e:int. (((0 <= e) and (e <= 2147483647)) -> (occ(a, e) = occ(b,
  e))))))

axiom is_perm__def_axiom3 :
  (forall a:us_t. forall b:us_t [is_perm(a, b)].
  ((forall e:int. (((0 <= e) and (e <= 2147483647)) -> (occ(a, e) = occ(b,
   e)))) ->
  (is_perm(a, b) = true)))

logic index_of_minimum : us_t -> int

logic index_of_minimum__function_guard : int, us_t -> prop

axiom index_of_minimum__post_axiom :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) ->
  (first1(values) <= result)))))

axiom index_of_minimum__post_axiom1 :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) ->
  (result <= last1(values))))))

axiom index_of_minimum__post_axiom2 :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) ->
  (forall i:int. (((first1(values) <= i) and (i <= last1(values))) ->
  (to_rep((to_array(values)[result])) <= to_rep((to_array(values)[i])))))))))

axiom index_of_minimum__post_axiom3 :
  (forall values:us_t [index_of_minimum(values)].
  ((dynamic_invariant1(values, true, true, true, true) and
  (0 <  length1(values))) -> (let result = index_of_minimum(values) : int in
  (index_of_minimum__function_guard(result, values) ->
  dynamic_invariant(result, true, false, true, true)))))

logic attr__ATTRIBUTE_ADDRESS1 : int

logic previous__first : integer

logic previous__last : integer

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

type tpreviousS__ref = { tpreviousS__content : us_t
}

function tpreviousS__ref_tpreviousS__content__projection(a: tpreviousS__ref) : us_t =
  (a).tpreviousS__content

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq5 : integer, integer -> bool

logic dummy5 : integer

type t25b__ref = { t25b__content : integer
}

function t25b__ref_t25b__content__projection(a: t25b__ref) : integer =
  (a).t25b__content

type t27b__ref = { t27b__content : us_t
}

function t27b__ref_t27b__content__projection(a: t27b__ref) : us_t =
  (a).t27b__content

predicate dynamic_invariant2(temp___expr_296: us_t, temp___is_init_292: bool,
  temp___skip_constant_293: bool, temp___do_toplevel_294: bool,
  temp___do_typ_inv_295: bool) = ((not (temp___skip_constant_293 = true)) ->
  (dynamic_property(to_rep1(values__first), to_rep1(values__last),
  first1(temp___expr_296), last1(temp___expr_296)) and
  ((first1(temp___expr_296) = to_rep1(values__first)) and
  (last1(temp___expr_296) = to_rep1(values__last)))))

predicate default_initial_assumption(temp___expr_298: us_t,
  temp___skip_top_level_299: bool) =
  ((first1(temp___expr_298) = to_rep1(values__first)) and
  (last1(temp___expr_298) = to_rep1(values__last)))

predicate dynamic_invariant3(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

predicate dynamic_invariant4(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

predicate dynamic_invariant5(temp___expr_165: int, temp___is_init_161: bool,
  temp___skip_constant_162: bool, temp___do_toplevel_163: bool,
  temp___do_typ_inv_164: bool) = (((temp___is_init_161 = true) or
  (1 <= 100)) -> in_range4(temp___expr_165))

type nb_occ

logic nb_occqtint : nb_occ -> int

axiom nb_occqtaxiom : (forall i:nb_occ. (0 <= nb_occqtint(i)))

axiom nb_occqtaxiom1 : (forall i:nb_occ. (nb_occqtint(i) <= 100))

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq6 : nb_occ, nb_occ -> bool

logic dummy6 : nb_occ

type nb_occ__ref = { nb_occ__content : nb_occ
}

function nb_occ__ref_nb_occ__content__projection(a: nb_occ__ref) : nb_occ =
  (a).nb_occ__content

predicate dynamic_invariant6(temp___expr_178: int, temp___is_init_174: bool,
  temp___skip_constant_175: bool, temp___do_toplevel_176: bool,
  temp___do_typ_inv_177: bool) = (((temp___is_init_174 = true) or
  (0 <= 100)) -> in_range5(temp___expr_178))

logic remove_last : us_t -> us_t

logic remove_last__function_guard : us_t, us_t -> prop

type t17s__ref = { t17s__content : us_t
}

function t17s__ref_t17s__content__projection(a: t17s__ref) : us_t =
  (a).t17s__content

axiom remove_last__post_axiom :
  (forall a:us_t [remove_last(a)]. ((dynamic_invariant1(a, true, true, true,
  true) and (0 <  length1(a))) -> (let result = remove_last(a) : us_t in
  (remove_last__function_guard(result, a) -> dynamic_invariant1(result, true,
  false, true, true)))))

axiom remove_last__def_axiom :
  (forall a:us_t [remove_last(a)]. (dynamic_invariant1(a, true, true, true,
  true) -> (remove_last(a) = of_array(to_array(of_array(to_array(a),
  first1(a), (last1(a) - 1))), first1(of_array(to_array(a), first1(a),
  (last1(a) - 1))), last1(of_array(to_array(a), first1(a),
  (last1(a) - 1)))))))

logic occ_def : us_t, int -> int

logic occ_def__function_guard : int, us_t, int -> prop

axiom occ_def__def_axiom :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) ->
  (forall a1:us_t. remove_last__function_guard(remove_last(a1), a1)))))

axiom occ_def__def_axiom1 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) ->
  (forall a1:us_t. remove_last__function_guard(remove_last(a1), a1)))))

axiom occ_def__def_axiom2 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) ->
  (forall a1:us_t. forall e1:int.
  occ_def__function_guard(occ_def(remove_last(a1), e1), remove_last(a1), e1)))))

axiom occ_def__def_axiom3 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) ->
  (forall a1:us_t. remove_last__function_guard(remove_last(a1), a1)))))

axiom occ_def__def_axiom4 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) ->
  (forall a1:us_t. remove_last__function_guard(remove_last(a1), a1)))))

axiom occ_def__def_axiom5 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) ->
  (forall a1:us_t. forall e1:int.
  occ_def__function_guard(occ_def(remove_last(a1), e1), remove_last(a1), e1)))))

axiom occ_def__def_axiom6 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. (((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) and
  occ_def__function_guard(occ_def(a, e), a, e)) -> (occ_def(a,
  e) = (if (length1(a) = 0) then 0 else (if (to_rep((to_array(a)[last1(a)])) = e) then (occ_def(remove_last(a),
  e) + 1) else occ_def(remove_last(a), e)))))))

axiom occ_def__post_axiom :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. ((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) -> (let result =
  occ_def(a, e) : int in (occ_def__function_guard(result, a, e) ->
  (result <= length1(a)))))))

axiom occ_def__post_axiom1 :
  (forall a:us_t.
  (forall e:int [occ_def(a, e)]. ((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) -> (let result =
  occ_def(a, e) : int in (occ_def__function_guard(result, a, e) ->
  dynamic_invariant6(result, true, false, true, true))))))

axiom occ__post_axiom :
  (forall a:us_t.
  (forall e:int [occ(a, e)]. ((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) -> (let result =
  occ(a, e) : int in (occ__function_guard(result, a, e) ->
  (result <= length1(a)))))))

axiom occ__post_axiom1 :
  (forall a:us_t.
  (forall e:int [occ(a, e)]. ((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) -> (let result =
  occ(a, e) : int in (occ__function_guard(result, a, e) ->
  dynamic_invariant6(result, true, false, true, true))))))

axiom occ__def_axiom :
  (forall a:us_t.
  (forall e:int [occ(a, e)]. ((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) ->
  (forall a1:us_t. forall e1:int. occ_def__function_guard(occ_def(a1, e1),
  a1, e1)))))

axiom occ__def_axiom1 :
  (forall a:us_t.
  (forall e:int [occ(a, e)]. ((dynamic_invariant1(a, true, true, true,
  true) and dynamic_invariant3(e, true, true, true, true)) -> (occ(a,
  e) = occ_def(a, e)))))

 (* File "sort.ads", line 7, characters 0-0 *)
goal defqtvc :
  (forall values:(int,natural) farray. forall smallest:int.
  forall previous:(int,natural) farray.
  (forall values1:(int,natural) farray. ((values1 = values) ->
  (dynamic_property(1, 100, to_rep1(values__first), to_rep1(values__last)) ->
  (dynamic_invariant(smallest, false, false, true, true) ->
  (default_initial_assumption(of_array(previous, to_rep1(previous__first),
  to_rep1(previous__last)), false) ->
  ((dynamic_property(to_rep1(values__first), to_rep1(values__last),
  to_rep1(previous__first), to_rep1(previous__last)) and
  ((to_rep1(previous__first) = to_rep1(values__first)) and
  (to_rep1(previous__last) = to_rep1(values__last)))) ->
  (forall o:int. ((to_rep1(values__last) = o) ->
  (forall o1:int. ((to_rep1(values__first) = o1) ->
  (forall spark__branch:bool. ((spark__branch = (if (length(o1,
  o) = 0) then true else false)) -> ((not (spark__branch = true)) ->
  (forall temp___304:int. ((to_rep1(values__first) = temp___304) ->
  (forall o2:int. ((to_rep1(values__last) = o2) -> (let o3 = (o2 - 1)
  : int in (in_range1(o3) ->
  (forall current:int. ((current = temp___304) ->
  ((andb((if (temp___304 <= current) then true else false),
  (if (current <= o3) then true else false)) = true) ->
  (forall temp___loop_entry_316:(int,natural) farray.
  ((temp___loop_entry_316 = values) ->
  (forall temp___306:int. ((to_rep1(values__last) = temp___306) ->
  (((current <= temp___306) -> (((to_rep1(values__first) <= current) and
  (current <= to_rep1(values__last))) and
  ((to_rep1(values__first) <= temp___306) and
  (temp___306 <= to_rep1(values__last))))) -> (let temp___307 =
  of_array(values, current, temp___306) : us_t in (let o4 =
  of_array(to_array(temp___307), first1(temp___307), last1(temp___307))
  : us_t in (let o5 = index_of_minimum(o4) : int in
  ((index_of_minimum__function_guard(o5, o4) and (dynamic_invariant(o5, true,
  false, true, true) and (((first1(o4) <= o5) and (o5 <= last1(o4))) and
  (forall i:int. (((first1(o4) <= i) and (i <= last1(o4))) ->
  (to_rep((to_array(o4)[o5])) <= to_rep((to_array(o4)[i])))))))) ->
  (forall smallest1:int. ((smallest1 = o5) ->
  (forall spark__branch1:bool.
  ((spark__branch1 = (if (smallest1 = current) then false else true)) ->
  ((spark__branch1 = true) ->
  ((if (to_rep1(values__first) <= to_rep1(values__last)) then (to_rep1(values__first) <= to_rep1(values__last)) else (to_rep1(values__last) <  to_rep1(values__first))) ->
  (forall o6:int. ((to_rep1(values__last) = o6) ->
  (forall o7:int. ((to_rep1(values__first) = o7) ->
  (forall o8:int. ((to_rep1(values__first) = o8) ->
  (forall o9:int. ((to_rep1(values__first) = o9) -> (let temp___308 =
  of_array(slide(values, o9, o8), o7, o6) : us_t in
  ((if (first1(temp___308) <= last1(temp___308)) then ((to_rep1(previous__first) <= to_rep1(previous__last)) and
  ((last1(temp___308) - first1(temp___308)) = (to_rep1(previous__last) - to_rep1(previous__first)))) else (to_rep1(previous__last) <  to_rep1(previous__first))) ->
  (in_range3(current) -> (to_rep1(values__first) <= current))))))))))))))))))))))))))))))))))))))))))))))))))
