(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type character

predicate in_range1(x: int) = ((0 <= x) and (x <= 255))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : character, character -> bool

logic dummy : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

predicate dynamic_invariant(temp___expr_74: int, temp___is_init_70: bool,
  temp___skip_constant_71: bool, temp___do_toplevel_72: bool,
  temp___do_typ_inv_73: bool) = (((temp___is_init_70 = true) or
  (0 <= 255)) -> in_range1(temp___expr_74))

logic to_rep : character -> int

logic of_rep : int -> character

axiom inversion_axiom :
  (forall x:character [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:character [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq2(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq2(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep((a[temp___idx_91])) = to_rep((b[((b__first - a__first) + temp___idx_91)]))))))))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom : (forall i:index_type. (1 <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 65536))

predicate in_range2(x: int) = ((1 <= x) and (x <= 65536))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : index_type, index_type -> bool

logic dummy1 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

function to_rep1(x: index_type) : int = index_typeqtint(x)

logic of_rep1 : int -> index_type

axiom inversion_axiom1 :
  (forall x:index_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:index_type [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type length_type

logic length_typeqtint : length_type -> int

axiom length_typeqtaxiom : (forall i:length_type. (0 <= length_typeqtint(i)))

axiom length_typeqtaxiom1 :
  (forall i:length_type. (length_typeqtint(i) <= 65536))

predicate in_range3(x: int) = ((0 <= x) and (x <= 65536))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : length_type, length_type -> bool

logic dummy2 : length_type

type length_type__ref = { length_type__content : length_type
}

function length_type__ref_length_type__content__projection(a: length_type__ref) : length_type =
  (a).length_type__content

function to_rep2(x: length_type) : int = length_typeqtint(x)

logic of_rep2 : int -> length_type

axiom inversion_axiom2 :
  (forall x:length_type [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:length_type [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range4(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : integer, integer -> bool

logic dummy3 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range5(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq4 : positive, positive -> bool

logic dummy4 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

function to_rep3(x: integer) : int = integerqtint(x)

logic of_rep3 : int -> integer

axiom inversion_axiom3 :
  (forall x:integer [to_rep3(x)]. (of_rep3(to_rep3(x)) = x))

axiom range_axiom3 : (forall x:integer [to_rep3(x)]. in_range4(to_rep3(x)))

axiom coerce_axiom3 :
  (forall x:int [to_rep3(of_rep3(x))]. (in_range4(x) ->
  (to_rep3(of_rep3(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  (to_rep3(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range4(f) -> (in_range4(l) ->
  (to_rep3(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range4(low) and (in_range4(high) and ((low <= high) ->
  (in_range5(low) and in_range5(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep3(first((a).rt))

function last1(a: us_t) : int = to_rep3(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq7(x: us_t, y: us_t) : bool = bool_eq2((x).elts,
  to_rep3(first((x).rt)), to_rep3(last((x).rt)), (y).elts,
  to_rep3(first((y).rt)), to_rep3(last((y).rt)))

logic user_eq5 : us_t, us_t -> bool

logic dummy5 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type t3s__ref = { t3s__content : us_t
}

function t3s__ref_t3s__content__projection(a: t3s__ref) : us_t =
  (a).t3s__content

type us_split_discrs = { rec__bounded_strings__bounded_string__bound :
index_type
}

function us_split_discrs_rec__bounded_strings__bounded_string__bound__projection(a: us_split_discrs) : index_type =
  (a).rec__bounded_strings__bounded_string__bound

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__bounded_strings__bounded_string__text : us_t;
rec__bounded_strings__bounded_string__length : length_type
}

function us_split_fields_rec__bounded_strings__bounded_string__text__projection(a: us_split_fields) : us_t =
  (a).rec__bounded_strings__bounded_string__text

function us_split_fields_rec__bounded_strings__bounded_string__length__projection(a: us_split_fields) : length_type =
  (a).rec__bounded_strings__bounded_string__length

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq8(a: us_rep, b: us_rep) : bool =
  (if ((to_rep1(((a).us_split_discrs1).rec__bounded_strings__bounded_string__bound) = to_rep1(((b).us_split_discrs1).rec__bounded_strings__bounded_string__bound)) and
  ((bool_eq7(((a).us_split_fields1).rec__bounded_strings__bounded_string__text,
  ((b).us_split_fields1).rec__bounded_strings__bounded_string__text) = true) and
  (to_rep2(((a).us_split_fields1).rec__bounded_strings__bounded_string__length) = to_rep2(((b).us_split_fields1).rec__bounded_strings__bounded_string__length)))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic bounded_strings__bounded_string__bound__first__bit : int

logic bounded_strings__bounded_string__bound__last__bit : int

logic bounded_strings__bounded_string__bound__position : int

axiom bounded_strings__bounded_string__bound__first__bit_axiom :
  (0 <= bounded_strings__bounded_string__bound__first__bit)

axiom bounded_strings__bounded_string__bound__last__bit_axiom :
  (bounded_strings__bounded_string__bound__first__bit <  bounded_strings__bounded_string__bound__last__bit)

axiom bounded_strings__bounded_string__bound__position_axiom :
  (0 <= bounded_strings__bounded_string__bound__position)

logic bounded_strings__bounded_string__text__first__bit : int

logic bounded_strings__bounded_string__text__last__bit : int

logic bounded_strings__bounded_string__text__position : int

axiom bounded_strings__bounded_string__text__first__bit_axiom :
  (0 <= bounded_strings__bounded_string__text__first__bit)

axiom bounded_strings__bounded_string__text__last__bit_axiom :
  (bounded_strings__bounded_string__text__first__bit <  bounded_strings__bounded_string__text__last__bit)

axiom bounded_strings__bounded_string__text__position_axiom :
  (0 <= bounded_strings__bounded_string__text__position)

logic bounded_strings__bounded_string__length__first__bit : int

logic bounded_strings__bounded_string__length__last__bit : int

logic bounded_strings__bounded_string__length__position : int

axiom bounded_strings__bounded_string__length__first__bit_axiom :
  (0 <= bounded_strings__bounded_string__length__first__bit)

axiom bounded_strings__bounded_string__length__last__bit_axiom :
  (bounded_strings__bounded_string__length__first__bit <  bounded_strings__bounded_string__length__last__bit)

axiom bounded_strings__bounded_string__length__position_axiom :
  (0 <= bounded_strings__bounded_string__length__position)

logic user_eq6 : us_rep, us_rep -> bool

logic dummy6 : us_rep

type bounded_string__ref = { bounded_string__content : us_rep
}

function bounded_string__ref_bounded_string__content__projection(a: bounded_string__ref) : us_rep =
  (a).bounded_string__content

logic length1 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

predicate dynamic_invariant1(temp___expr_176: us_rep,
  temp___is_init_172: bool, temp___skip_constant_173: bool,
  temp___do_toplevel_174: bool, temp___do_typ_inv_175: bool) =
  (let temp___177 =
  ((temp___expr_176).us_split_discrs1).rec__bounded_strings__bounded_string__bound
  : index_type in (dynamic_property(1, to_rep1(temp___177),
  first1(((temp___expr_176).us_split_fields1).rec__bounded_strings__bounded_string__text),
  last1(((temp___expr_176).us_split_fields1).rec__bounded_strings__bounded_string__text)) and
  ((first1(((temp___expr_176).us_split_fields1).rec__bounded_strings__bounded_string__text) = 1) and
  (last1(((temp___expr_176).us_split_fields1).rec__bounded_strings__bounded_string__text) = to_rep1(temp___177)))))

predicate dynamic_invariant2(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  (0 <= 65536)) -> in_range3(temp___expr_169))

axiom length__post_axiom :
  (forall source:us_rep [length1(source)]. (dynamic_invariant1(source, true,
  true, true, true) -> (let result = length1(source) : int in
  (length__function_guard(result, source) -> dynamic_invariant2(result, true,
  false, true, true)))))

axiom length__def_axiom :
  (forall source:us_rep [length1(source)]. (dynamic_invariant1(source, true,
  true, true, true) ->
  (length1(source) = to_rep2(((source).us_split_fields1).rec__bounded_strings__bounded_string__length))))

logic upper_bound : int

logic attr__ATTRIBUTE_ADDRESS : int

logic initializer : int

logic attr__ATTRIBUTE_ADDRESS1 : int

type t1b__ref = { t1b__content : us_t
}

function t1b__ref_t1b__content__projection(a: t1b__ref) : us_t =
  (a).t1b__content

type us_split_fields2 = { rec__bounded_strings__bounded_string__text1 : us_t;
rec__bounded_strings__bounded_string__length1 : length_type
}

function us_split_fields_rec__bounded_strings__bounded_string__text__2__projection(a: us_split_fields2) : us_t =
  (a).rec__bounded_strings__bounded_string__text1

function us_split_fields_rec__bounded_strings__bounded_string__length__2__projection(a: us_split_fields2) : length_type =
  (a).rec__bounded_strings__bounded_string__length1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__2__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__bounded_strings__bounded_string__text =
  of_array(to_array(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1),
  first1(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1),
  last1(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1));
  rec__bounded_strings__bounded_string__length =
  ((a).us_split_fields3).rec__bounded_strings__bounded_string__length1 } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__bounded_strings__bounded_string__text1 =
  of_array(to_array(((r).us_split_fields1).rec__bounded_strings__bounded_string__text),
  first1(((r).us_split_fields1).rec__bounded_strings__bounded_string__text),
  last1(((r).us_split_fields1).rec__bounded_strings__bounded_string__text));
  rec__bounded_strings__bounded_string__length1 =
  ((r).us_split_fields1).rec__bounded_strings__bounded_string__length } }

function bool_eq9(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_discrs2).rec__bounded_strings__bounded_string__bound) = to_rep1(((b).us_split_discrs2).rec__bounded_strings__bounded_string__bound)) and
  ((bool_eq7(((a).us_split_fields3).rec__bounded_strings__bounded_string__text1,
  ((b).us_split_fields3).rec__bounded_strings__bounded_string__text1) = true) and
  (to_rep2(((a).us_split_fields3).rec__bounded_strings__bounded_string__length1) = to_rep2(((b).us_split_fields3).rec__bounded_strings__bounded_string__length1)))) then true else false)

predicate in_range6(rec__bounded_strings__bounded_string__bound1: int,
  a: us_rep) =
  (rec__bounded_strings__bounded_string__bound1 = to_rep1(((a).us_split_discrs1).rec__bounded_strings__bounded_string__bound))

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic bounded_strings__bounded_string__bound__first__bit1 : int

logic bounded_strings__bounded_string__bound__last__bit1 : int

logic bounded_strings__bounded_string__bound__position1 : int

axiom bounded_strings__bounded_string__bound__first__bit_axiom1 :
  (0 <= bounded_strings__bounded_string__bound__first__bit1)

axiom bounded_strings__bounded_string__bound__last__bit_axiom1 :
  (bounded_strings__bounded_string__bound__first__bit1 <  bounded_strings__bounded_string__bound__last__bit1)

axiom bounded_strings__bounded_string__bound__position_axiom1 :
  (0 <= bounded_strings__bounded_string__bound__position1)

logic bounded_strings__bounded_string__text__first__bit1 : int

logic bounded_strings__bounded_string__text__last__bit1 : int

logic bounded_strings__bounded_string__text__position1 : int

axiom bounded_strings__bounded_string__text__first__bit_axiom1 :
  (0 <= bounded_strings__bounded_string__text__first__bit1)

axiom bounded_strings__bounded_string__text__last__bit_axiom1 :
  (bounded_strings__bounded_string__text__first__bit1 <  bounded_strings__bounded_string__text__last__bit1)

axiom bounded_strings__bounded_string__text__position_axiom1 :
  (0 <= bounded_strings__bounded_string__text__position1)

logic bounded_strings__bounded_string__length__first__bit1 : int

logic bounded_strings__bounded_string__length__last__bit1 : int

logic bounded_strings__bounded_string__length__position1 : int

axiom bounded_strings__bounded_string__length__first__bit_axiom1 :
  (0 <= bounded_strings__bounded_string__length__first__bit1)

axiom bounded_strings__bounded_string__length__last__bit_axiom1 :
  (bounded_strings__bounded_string__length__first__bit1 <  bounded_strings__bounded_string__length__last__bit1)

axiom bounded_strings__bounded_string__length__position_axiom1 :
  (0 <= bounded_strings__bounded_string__length__position1)

logic user_eq7 : us_rep1, us_rep1 -> bool

logic dummy7 : us_rep1

type tresultS__ref = { tresultS__content : us_rep1
}

function tresultS__ref_tresultS__content__projection(a: tresultS__ref) : us_rep1 =
  (a).tresultS__content

logic result____split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS2 : int

type t5s__ref = { t5s__content : us_t
}

function t5s__ref_t5s__content__projection(a: t5s__ref) : us_t =
  (a).t5s__content

logic temp_____aggregate_def_199 : int, int, int -> us_t

predicate dynamic_invariant3(temp___expr_193: us_rep1,
  temp___is_init_189: bool, temp___skip_constant_190: bool,
  temp___do_toplevel_191: bool, temp___do_typ_inv_192: bool) =
  (((not (temp___skip_constant_190 = true)) -> in_range6(upper_bound,
  to_base(temp___expr_193))) and (dynamic_property(1, upper_bound,
  first1(((temp___expr_193).us_split_fields3).rec__bounded_strings__bounded_string__text1),
  last1(((temp___expr_193).us_split_fields3).rec__bounded_strings__bounded_string__text1)) and
  ((first1(((temp___expr_193).us_split_fields3).rec__bounded_strings__bounded_string__text1) = 1) and
  (last1(((temp___expr_193).us_split_fields3).rec__bounded_strings__bounded_string__text1) = upper_bound))))

axiom temp___result_207qtdef :
  (forall temp___206:us_rep1.
  length__function_guard(length1(to_base(temp___206)), to_base(temp___206)))

predicate default_initial_assumption(temp___expr_196: us_rep1,
  temp___skip_top_level_197: bool) = ((let temp___198 =
  ((temp___expr_196).us_split_discrs2).rec__bounded_strings__bounded_string__bound
  : index_type in
  ((to_rep1(((temp___expr_196).us_split_discrs2).rec__bounded_strings__bounded_string__bound) = upper_bound) and
  ((((temp___expr_196).us_split_fields3).rec__bounded_strings__bounded_string__text1 = of_array(to_array(temp_____aggregate_def_199(32,
  1, to_rep1(temp___198))), first1(temp_____aggregate_def_199(32, 1,
  to_rep1(temp___198))), last1(temp_____aggregate_def_199(32, 1,
  to_rep1(temp___198))))) and
  (to_rep2(((temp___expr_196).us_split_fields3).rec__bounded_strings__bounded_string__length1) = 0)))) and
  ((not (temp___skip_top_level_197 = true)) ->
  (length1(to_base(temp___expr_196)) = 0)))

predicate dynamic_invariant4(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  (1 <= 65536)) -> in_range2(temp___expr_162))

type t3b__ref = { t3b__content : us_t
}

function t3b__ref_t3b__content__projection(a: t3b__ref) : us_t =
  (a).t3b__content

logic temp_____aggregate_def_228 : int, int, int -> us_t

predicate dynamic_invariant5(temp___expr_46: int, temp___is_init_42: bool,
  temp___skip_constant_43: bool, temp___do_toplevel_44: bool,
  temp___do_typ_inv_45: bool) = (((temp___is_init_42 = true) or
  (1 <= 2147483647)) -> in_range5(temp___expr_46))

predicate dynamic_invariant6(temp___expr_96: us_t, temp___is_init_92: bool,
  temp___skip_constant_93: bool, temp___do_toplevel_94: bool,
  temp___do_typ_inv_95: bool) = ((not (temp___skip_constant_93 = true)) ->
  dynamic_property(1, 2147483647, first1(temp___expr_96),
  last1(temp___expr_96)))

predicate dynamic_invariant7(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range4(temp___expr_18))

axiom def_axiom :
  (forall temp___230:int. forall temp___231:int. forall temp___232:int.
  (dynamic_invariant(temp___230, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___231, temp___232) ->
  (first1(temp_____aggregate_def_228(temp___230, temp___231,
  temp___232)) = temp___231))))

axiom def_axiom1 :
  (forall temp___230:int. forall temp___231:int. forall temp___232:int.
  (dynamic_invariant(temp___230, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___231, temp___232) ->
  (last1(temp_____aggregate_def_228(temp___230, temp___231,
  temp___232)) = temp___232))))

axiom def_axiom2 :
  (forall temp___230:int. forall temp___231:int. forall temp___232:int.
  (dynamic_invariant(temp___230, true, true, true, true) ->
  (forall temp___233:int.
  (to_rep((to_array(temp_____aggregate_def_228(temp___230, temp___231,
  temp___232))[temp___233])) = temp___230))))

axiom def_axiom3 :
  (forall temp___201:int. forall temp___202:int. forall temp___203:int.
  (dynamic_invariant(temp___201, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___202, temp___203) ->
  (first1(temp_____aggregate_def_199(temp___201, temp___202,
  temp___203)) = temp___202))))

axiom def_axiom4 :
  (forall temp___201:int. forall temp___202:int. forall temp___203:int.
  (dynamic_invariant(temp___201, true, true, true, true) ->
  (dynamic_property(1, 2147483647, temp___202, temp___203) ->
  (last1(temp_____aggregate_def_199(temp___201, temp___202,
  temp___203)) = temp___203))))

axiom def_axiom5 :
  (forall temp___201:int. forall temp___202:int. forall temp___203:int.
  (dynamic_invariant(temp___201, true, true, true, true) ->
  (forall temp___204:int.
  (to_rep((to_array(temp_____aggregate_def_199(temp___201, temp___202,
  temp___203))[temp___204])) = temp___201))))

 (* File "bounded_strings.ads", line 19, characters 0-0 *)
goal defqtvc :
  (forall result____split_fields:us_split_fields2.
  (dynamic_invariant4(upper_bound, true, false, true, true) ->
  (dynamic_invariant(initializer, true, false, true, true) ->
  (in_range2(upper_bound) -> (default_initial_assumption({ us_split_discrs2 =
  result____split_discrs; us_split_fields3 = result____split_fields },
  false) -> (dynamic_invariant3({ us_split_discrs2 = result____split_discrs;
  us_split_fields3 = result____split_fields }, false, false, true, true) ->
  (let temp___234 = temp_____aggregate_def_228(32, 1, upper_bound) : us_t in
  ((first1(temp___234) = 1) -> ((last1(temp___234) = upper_bound) ->
  ((if (first1(temp___234) <= last1(temp___234)) then ((1 <= upper_bound) and
  ((last1(temp___234) - first1(temp___234)) = (upper_bound - 1))) else (upper_bound <  1)) ->
  (let temp___236 = of_array(to_array(temp___234), first1(temp___234),
  last1(temp___234)) : us_t in (let temp___237 =
  (result____split_fields).rec__bounded_strings__bounded_string__text1
  : us_t in ((first1(temp___236) <= last1(temp___236)) ->
  (first1(temp___237) <= last1(temp___237)))))))))))))))
