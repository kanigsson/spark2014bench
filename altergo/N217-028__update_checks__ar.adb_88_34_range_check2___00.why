(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type et1

logic et1qtint : et1 -> int

axiom et1qtaxiom : (forall i:et1. (0 <= et1qtint(i)))

axiom et1qtaxiom1 : (forall i:et1. (et1qtint(i) <= 99))

predicate in_range(x: int) = ((0 <= x) and (x <= 99))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : et1, et1 -> bool

logic dummy : et1

type et1__ref = { et1__content : et1
}

function et1__ref_et1__content__projection(a: et1__ref) : et1 =
  (a).et1__content

function to_rep(x: et1) : int = et1qtint(x)

logic of_rep : int -> et1

axiom inversion_axiom : (forall x:et1 [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:et1 [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type map__ref = { map__content : (int,et1) farray
}

logic slide : (int,et1) farray, int, int -> (int,et1) farray

axiom slide_eq :
  (forall a:(int,et1) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,et1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq1(a: (int,et1) farray, a__first: int, a__last: int,
  b: (int,et1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,et1) farray. forall b:(int,et1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq1(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

logic attr__ATTRIBUTE_ADDRESS : int

logic i : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic e : int

logic attr__ATTRIBUTE_ADDRESS2 : int

type it1

logic it1qtint : it1 -> int

axiom it1qtaxiom : (forall i1:it1. (1 <= it1qtint(i1)))

axiom it1qtaxiom1 : (forall i1:it1. (it1qtint(i1) <= 10))

predicate in_range1(x: int) = ((1 <= x) and (x <= 10))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : it1, it1 -> bool

logic dummy1 : it1

type it1__ref = { it1__content : it1
}

function it1__ref_it1__content__projection(a: it1__ref) : it1 =
  (a).it1__content

predicate dynamic_invariant(temp___expr_166: int, temp___is_init_162: bool,
  temp___skip_constant_163: bool, temp___do_toplevel_164: bool,
  temp___do_typ_inv_165: bool) = (((temp___is_init_162 = true) or
  (1 <= 10)) -> in_range1(temp___expr_166))

predicate dynamic_invariant1(temp___expr_173: int, temp___is_init_169: bool,
  temp___skip_constant_170: bool, temp___do_toplevel_171: bool,
  temp___do_typ_inv_172: bool) = (((temp___is_init_169 = true) or
  (0 <= 99)) -> in_range(temp___expr_173))

logic temp_____aggregate_def_262 : (int,et1) farray, int,
  int -> (int,et1) farray

axiom def_axiom :
  (forall temp___264:(int,et1) farray.
  (forall temp___265:int. forall temp___266:int.
  ((dynamic_invariant(temp___265, true, true, true, true) and
  dynamic_invariant1(temp___266, true, true, true, true)) ->
  (forall temp___267:int. ((temp___267 = temp___265) ->
  (to_rep((temp_____aggregate_def_262(temp___264, temp___265,
  temp___266)[temp___267])) = temp___266))))))

axiom def_axiom1 :
  (forall temp___264:(int,et1) farray.
  (forall temp___265:int. forall temp___266:int.
  ((dynamic_invariant(temp___265, true, true, true, true) and
  dynamic_invariant1(temp___266, true, true, true, true)) ->
  (forall temp___267:int. ((not (temp___267 = temp___265)) ->
  ((temp_____aggregate_def_262(temp___264, temp___265,
  temp___266)[temp___267]) = (temp___264[temp___267])))))))

 (* File "ar.adb", line 85, characters 0-0 *)
goal defqtvc : (dynamic_invariant(i, true, false, true, true) ->
  (dynamic_invariant1(e, true, false, true, true) -> in_range((e - 1))))
