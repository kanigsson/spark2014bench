(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type natural_index

logic natural_indexqtint : natural_index -> int

axiom natural_indexqtaxiom :
  (forall i:natural_index. (0 <= natural_indexqtint(i)))

axiom natural_indexqtaxiom1 :
  (forall i:natural_index. (natural_indexqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : natural_index, natural_index -> bool

logic dummy : natural_index

type natural_index__ref = { natural_index__content : natural_index
}

function natural_index__ref_natural_index__content__projection(a: natural_index__ref) : natural_index =
  (a).natural_index__content

function to_rep(x: natural_index) : int = natural_indexqtint(x)

logic of_rep : int -> natural_index

axiom inversion_axiom :
  (forall x:natural_index [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom :
  (forall x:natural_index [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type positive

logic positiveqtint : positive -> int

axiom positiveqtaxiom : (forall i:positive. (1 <= positiveqtint(i)))

axiom positiveqtaxiom1 :
  (forall i:positive. (positiveqtint(i) <= 2147483647))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : positive, positive -> bool

logic dummy2 : positive

type positive__ref = { positive__content : positive
}

function positive__ref_positive__content__projection(a: positive__ref) : positive =
  (a).positive__content

type character

predicate in_range4(x: int) = ((0 <= x) and (x <= 255))

function bool_eq4(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq3 : character, character -> bool

logic dummy3 : character

type character__ref = { character__content : character
}

function character__ref_character__content__projection(a: character__ref) : character =
  (a).character__content

logic to_rep1 : character -> int

logic of_rep1 : int -> character

axiom inversion_axiom1 :
  (forall x:character [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:character [to_rep1(x)]. in_range4(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range4(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,character) farray
}

logic slide : (int,character) farray, int, int -> (int,character) farray

axiom slide_eq :
  (forall a:(int,character) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,character) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,character) farray, a__first: int, a__last: int,
  b: (int,character) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,character) farray. forall b:(int,character) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_91:int. (((a__first <= temp___idx_91) and
  (temp___idx_91 <= a__last)) ->
  (to_rep1((a[temp___idx_91])) = to_rep1((b[((b__first - a__first) + temp___idx_91)]))))))))

function to_rep2(x: integer) : int = integerqtint(x)

logic of_rep2 : int -> integer

axiom inversion_axiom2 :
  (forall x:integer [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 : (forall x:integer [to_rep2(x)]. in_range2(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range2(x) ->
  (to_rep2(of_rep2(x)) = x)))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep2(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,character) farray; rt : t
}

function to_array(a: us_t) : (int,character) farray = (a).elts

function of_array(a: (int,character) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep2(first((a).rt))

function last1(a: us_t) : int = to_rep2(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq6(x: us_t, y: us_t) : bool = bool_eq5((x).elts,
  to_rep2(first((x).rt)), to_rep2(last((x).rt)), (y).elts,
  to_rep2(first((y).rt)), to_rep2(last((y).rt)))

logic user_eq4 : us_t, us_t -> bool

logic dummy4 : us_t

type string____ref = { string____content : us_t
}

function string____ref_string____content__projection(a: string____ref) : us_t =
  (a).string____content

type t5s__ref = { t5s__content : us_t
}

function t5s__ref_t5s__content__projection(a: t5s__ref) : us_t =
  (a).t5s__content

type us_split_discrs = { rec__bounded_dynamic_strings__sequence__capacity :
natural_index
}

function us_split_discrs_rec__bounded_dynamic_strings__sequence__capacity__projection(a: us_split_discrs) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__capacity

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = {
rec__bounded_dynamic_strings__sequence__current_length : natural_index;
rec__bounded_dynamic_strings__sequence__content : us_t
}

function us_split_fields_rec__bounded_dynamic_strings__sequence__current_length__projection(a: us_split_fields) : natural_index =
  (a).rec__bounded_dynamic_strings__sequence__current_length

function us_split_fields_rec__bounded_dynamic_strings__sequence__content__projection(a: us_split_fields) : us_t =
  (a).rec__bounded_dynamic_strings__sequence__content

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq7(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity) = to_rep(((b).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity)) and
  ((to_rep(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = to_rep(((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)) and
  (bool_eq6(((a).us_split_fields1).rec__bounded_dynamic_strings__sequence__content,
  ((b).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = true))) then true else false)

predicate in_range5(rec__bounded_dynamic_strings__sequence__capacity1: int,
  a: us_split_discrs) =
  (rec__bounded_dynamic_strings__sequence__capacity1 = to_rep((a).rec__bounded_dynamic_strings__sequence__capacity))

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic bounded_dynamic_strings__sequence__capacity__first__bit : int

logic bounded_dynamic_strings__sequence__capacity__last__bit : int

logic bounded_dynamic_strings__sequence__capacity__position : int

axiom bounded_dynamic_strings__sequence__capacity__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__first__bit)

axiom bounded_dynamic_strings__sequence__capacity__last__bit_axiom :
  (bounded_dynamic_strings__sequence__capacity__first__bit <  bounded_dynamic_strings__sequence__capacity__last__bit)

axiom bounded_dynamic_strings__sequence__capacity__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__capacity__position)

logic bounded_dynamic_strings__sequence__current_length__first__bit : int

logic bounded_dynamic_strings__sequence__current_length__last__bit : int

logic bounded_dynamic_strings__sequence__current_length__position : int

axiom bounded_dynamic_strings__sequence__current_length__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__first__bit)

axiom bounded_dynamic_strings__sequence__current_length__last__bit_axiom :
  (bounded_dynamic_strings__sequence__current_length__first__bit <  bounded_dynamic_strings__sequence__current_length__last__bit)

axiom bounded_dynamic_strings__sequence__current_length__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__current_length__position)

logic bounded_dynamic_strings__sequence__content__first__bit : int

logic bounded_dynamic_strings__sequence__content__last__bit : int

logic bounded_dynamic_strings__sequence__content__position : int

axiom bounded_dynamic_strings__sequence__content__first__bit_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__first__bit)

axiom bounded_dynamic_strings__sequence__content__last__bit_axiom :
  (bounded_dynamic_strings__sequence__content__first__bit <  bounded_dynamic_strings__sequence__content__last__bit)

axiom bounded_dynamic_strings__sequence__content__position_axiom :
  (0 <= bounded_dynamic_strings__sequence__content__position)

logic user_eq5 : us_rep, us_rep -> bool

logic dummy5 : us_rep

type sequence__ref = { sequence__content : us_rep
}

function sequence__ref_sequence__content__projection(a: sequence__ref) : us_rep =
  (a).sequence__content

logic this : us_rep

logic attr__ATTRIBUTE_ADDRESS : int

logic length1 : us_rep -> int

logic length__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_194: int, temp___is_init_190: bool,
  temp___skip_constant_191: bool, temp___do_toplevel_192: bool,
  temp___do_typ_inv_193: bool) = (((temp___is_init_190 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_194))

predicate dynamic_invariant1(temp___expr_208: us_rep,
  temp___is_init_204: bool, temp___skip_constant_205: bool,
  temp___do_toplevel_206: bool, temp___do_typ_inv_207: bool) =
  (((temp___do_toplevel_206 = true) -> (let temp___210 =
  to_rep(((temp___expr_208).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)
  : int in ((0 <= temp___210) and
  (temp___210 <= to_rep(((temp___expr_208).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))))) and
  (let temp___211 =
  ((temp___expr_208).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity
  : natural_index in (dynamic_property(1, to_rep(temp___211),
  first1(((temp___expr_208).us_split_fields1).rec__bounded_dynamic_strings__sequence__content),
  last1(((temp___expr_208).us_split_fields1).rec__bounded_dynamic_strings__sequence__content)) and
  ((first1(((temp___expr_208).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = 1) and
  (last1(((temp___expr_208).us_split_fields1).rec__bounded_dynamic_strings__sequence__content) = to_rep(temp___211))))))

predicate dynamic_predicate(temp___213: us_rep) = (let temp___215 =
  to_rep(((temp___213).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length)
  : int in ((0 <= temp___215) and
  (temp___215 <= to_rep(((temp___213).us_split_discrs1).rec__bounded_dynamic_strings__sequence__capacity))))

axiom length__post_axiom :
  (forall this1:us_rep [length1(this1)]. (dynamic_invariant1(this1, true,
  true, true, true) -> (let result = length1(this1) : int in
  (length__function_guard(result, this1) -> dynamic_invariant(result, true,
  false, true, true)))))

axiom length__def_axiom :
  (forall this1:us_rep [length1(this1)]. (dynamic_invariant1(this1, true,
  true, true, true) ->
  (length1(this1) = to_rep(((this1).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length))))

logic i8s : us_rep

logic attr__ATTRIBUTE_ADDRESS1 : int

 (* File "bounded_dynamic_arrays.ads", line 24, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(i8s, true, false, true, true) ->
  (dynamic_invariant1(i8s, true, false, true, true) ->
  (dynamic_invariant1(this, true, false, true, true) ->
  (forall o:int.
  ((to_rep(((this).us_split_fields1).rec__bounded_dynamic_strings__sequence__current_length) = o) ->
  (forall bounded_dynamic_strings__empty__result:bool.
  ((bounded_dynamic_strings__empty__result = (if (o = 0) then true else false)) ->
  ((bounded_dynamic_strings__empty__result = true) ->
  (length__function_guard(length1(this), this) -> (length1(this) = 1))))))))))
