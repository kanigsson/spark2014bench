(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type value_type

logic value_typeqtint : value_type -> int

axiom value_typeqtaxiom :
  (forall i:value_type. ((- 2147483648) <= value_typeqtint(i)))

axiom value_typeqtaxiom1 :
  (forall i:value_type. (value_typeqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : value_type, value_type -> bool

logic dummy : value_type

type value_type__ref = { value_type__content : value_type
}

function value_type__ref_value_type__content__projection(a: value_type__ref) : value_type =
  (a).value_type__content

type tindex_typeB

logic tindex_typeBqtint : tindex_typeB -> int

axiom tindex_typeBqtaxiom :
  (forall i:tindex_typeB. ((- 2147483648) <= tindex_typeBqtint(i)))

axiom tindex_typeBqtaxiom1 :
  (forall i:tindex_typeB. (tindex_typeBqtint(i) <= 2147483647))

predicate in_range2(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : tindex_typeB, tindex_typeB -> bool

logic dummy1 : tindex_typeB

type tindex_typeB__ref = { tindex_typeB__content : tindex_typeB
}

function tindex_typeB__ref_tindex_typeB__content__projection(a: tindex_typeB__ref) : tindex_typeB =
  (a).tindex_typeB__content

function to_rep(x: tindex_typeB) : int = tindex_typeBqtint(x)

logic of_rep : int -> tindex_typeB

axiom inversion_axiom :
  (forall x:tindex_typeB [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:tindex_typeB [to_rep(x)]. in_range2(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range2(x) ->
  (to_rep(of_rep(x)) = x)))

type index_type

logic index_typeqtint : index_type -> int

axiom index_typeqtaxiom :
  (forall i:index_type. ((- 2147483648) <= index_typeqtint(i)))

axiom index_typeqtaxiom1 :
  (forall i:index_type. (index_typeqtint(i) <= 2147483647))

predicate in_range3(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq2 : index_type, index_type -> bool

logic dummy2 : index_type

type index_type__ref = { index_type__content : index_type
}

function index_type__ref_index_type__content__projection(a: index_type__ref) : index_type =
  (a).index_type__content

function to_rep1(x: value_type) : int = value_typeqtint(x)

logic of_rep1 : int -> value_type

axiom inversion_axiom1 :
  (forall x:value_type [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:value_type [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type map__ref = { map__content : (int,value_type) farray
}

logic slide : (int,value_type) farray, int, int -> (int,value_type) farray

axiom slide_eq :
  (forall a:(int,value_type) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,value_type) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq4(a: (int,value_type) farray, a__first: int, a__last: int,
  b: (int,value_type) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,value_type) farray. forall b:(int,value_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,value_type) farray. forall b:(int,value_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,value_type) farray. forall b:(int,value_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,value_type) farray. forall b:(int,value_type) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq4(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep1((a[temp___idx_154])) = to_rep1((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> tindex_typeB

logic last : t -> tindex_typeB

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range2(f) -> (in_range2(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range2(low) and (in_range2(high) and ((low <= high) ->
  (in_range3(low) and in_range3(high)))))

type us_t = { elts : (int,value_type) farray; rt : t
}

function to_array(a: us_t) : (int,value_type) farray = (a).elts

function of_array(a: (int,value_type) farray, f: int, l: int) : us_t = {
  elts = a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq5(x: us_t, y: us_t) : bool = bool_eq4((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type generic_array__ref = { generic_array__content : us_t
}

function generic_array__ref_generic_array__content__projection(a: generic_array__ref) : us_t =
  (a).generic_array__content

logic has_value_inc : us_t, int, int -> bool

logic has_value_inc__function_guard : bool, us_t, int, int -> prop

predicate dynamic_invariant(temp___expr_162: int, temp___is_init_158: bool,
  temp___skip_constant_159: bool, temp___do_toplevel_160: bool,
  temp___do_typ_inv_161: bool) = (((temp___is_init_158 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_162))

predicate dynamic_invariant1(temp___expr_169: int, temp___is_init_165: bool,
  temp___skip_constant_166: bool, temp___do_toplevel_167: bool,
  temp___do_typ_inv_168: bool) = (((temp___is_init_165 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range3(temp___expr_169))

predicate dynamic_invariant2(temp___expr_176: us_t, temp___is_init_172: bool,
  temp___skip_constant_173: bool, temp___do_toplevel_174: bool,
  temp___do_typ_inv_175: bool) = ((not (temp___skip_constant_173 = true)) ->
  dynamic_property((- 2147483648), 2147483647, first1(temp___expr_176),
  last1(temp___expr_176)))

axiom has_value_inc__def_axiom :
  (forall a:us_t.
  (forall lastindex:int. forall val__:int [has_value_inc(a, lastindex,
  val__)]. ((has_value_inc(a, lastindex, val__) = true) ->
  (exists i:int. (((first1(a) <= i) and (i <= lastindex)) and
  (to_rep1((to_array(a)[i])) = val__))))))

axiom has_value_inc__def_axiom1 :
  (forall a:us_t.
  (forall lastindex:int. forall val__:int [has_value_inc(a, lastindex,
  val__)].
  ((exists i:int. (((first1(a) <= i) and (i <= lastindex)) and
   (to_rep1((to_array(a)[i])) = val__))) ->
  (has_value_inc(a, lastindex, val__) = true))))

logic has_value_exc : us_t, int, int -> bool

logic has_value_exc__function_guard : bool, us_t, int, int -> prop

axiom has_value_exc__def_axiom :
  (forall a:us_t.
  (forall lastindex:int. forall val__:int [has_value_exc(a, lastindex,
  val__)]. ((has_value_exc(a, lastindex, val__) = true) ->
  (exists i:int. (((first1(a) <= i) and (i <= lastindex)) and
  ((i <  lastindex) and (to_rep1((to_array(a)[i])) = val__)))))))

axiom has_value_exc__def_axiom1 :
  (forall a:us_t.
  (forall lastindex:int. forall val__:int [has_value_exc(a, lastindex,
  val__)].
  ((exists i:int. (((first1(a) <= i) and (i <= lastindex)) and
   ((i <  lastindex) and (to_rep1((to_array(a)[i])) = val__)))) ->
  (has_value_exc(a, lastindex, val__) = true))))

logic a : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic val__ : int

logic attr__ATTRIBUTE_ADDRESS1 : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

predicate dynamic_property1(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq4 : tindex_typeB, tindex_typeB -> bool

logic dummy4 : tindex_typeB

type t9b__ref = { t9b__content : tindex_typeB
}

function t9b__ref_t9b__content__projection(a1: t9b__ref) : tindex_typeB =
  (a1).t9b__content

 (* File "array_algorithms.ads", line 56, characters 0-0 *)
goal defqtvc :
  (forall location:int. (dynamic_invariant2(a, true, false, true, true) ->
  (dynamic_invariant(val__, true, false, true, true) ->
  (dynamic_invariant1(location, false, false, true, true) ->
  (forall found:bool. ((found = of_int(0)) ->
  (forall location1:int. ((location1 = first1(a)) ->
  (forall found1:bool. forall location2:int. ((let temp___235 = first1(a)
  : int in (let temp___236 = last1(a) : int in
  (exists i:int. ((i = temp___235) and
  (if (andb((if (temp___235 <= i) then true else false),
  (if (i <= temp___236) then true else false)) = true) then ((((exists o:int.
                                                               ((to_rep1((to_array(a)[i])) = o) and
                                                               (exists spark__branch:bool.
                                                               ((spark__branch = (if (o = val__) then true else false)) and
                                                               ((not (spark__branch = true)) and
                                                               (exists i1:int.
                                                               (((forall j:int.
                                                                 (((first1(a) <= j) and
                                                                 (j <= i1)) ->
                                                                 (not (to_rep1((to_array(a)[j])) = val__)))) and
                                                               (not (found = true))) and
                                                               ((andb((if (dynamic_invariant1(location1,
                                                               false, true,
                                                               true,
                                                               true) and
                                                               dynamic_property1(first1(a),
                                                               last1(a),
                                                               i1)) then true else false),
                                                               (if ((first1(a) <= i1) and
                                                               (i1 <= last1(a))) then true else false)) = true) and
                                                               (i1 = temp___236))))))))) and
  (found1 = found)) and (location2 = location1)) or
  (exists i1:int.
  ((exists o:int. ((to_rep1((to_array(a)[i])) = o) and
   (exists spark__branch:bool.
   ((spark__branch = (if (o = val__) then true else false)) and
   (if (spark__branch = true) then (i1 = i) else (exists i2:int.
                                                 (((forall j:int.
                                                   (((first1(a) <= j) and
                                                   (j <= i2)) ->
                                                   (not (to_rep1((to_array(a)[j])) = val__)))) and
                                                 (not (found = true))) and
                                                 ((andb((if (dynamic_invariant1(location1,
                                                 false, true, true, true) and
                                                 dynamic_property1(first1(a),
                                                 last1(a),
                                                 i2)) then true else false),
                                                 (if ((first1(a) <= i2) and
                                                 (i2 <= last1(a))) then true else false)) = true) and
                                                 ((not (i2 = temp___236)) and
                                                 ((i1 = (i2 + 1)) and
                                                 (exists o1:int.
                                                 ((to_rep1((to_array(a)[i1])) = o1) and
                                                 (exists spark__branch1:bool.
                                                 ((spark__branch1 = (if (o1 = val__) then true else false)) and
                                                 (spark__branch1 = true))))))))))))))) and
  ((found1 = of_int(1)) and (location2 = i1))))) else ((found1 = found) and
  (location2 = location1))))))) -> ((found1 = true) -> (let o = val__
  : int in (let o1 = a : us_t in (let o2 = has_value_exc(o1, location2, o)
  : bool in ((has_value_exc__function_guard(o2, o1, location2, o) and
  ((o2 = true) <->
  (exists i:int. (((first1(o1) <= i) and (i <= location2)) and
  ((i <  location2) and (to_rep1((to_array(o1)[i])) = o)))))) -> (let o3 =
  val__ : int in (let o4 = last1(a) : int in (let o5 = a : us_t in (let o6 =
  has_value_inc(o5, o4, o3) : bool in ((has_value_inc__function_guard(o6, o5,
  o4, o3) and ((o6 = true) <->
  (exists i:int. (((first1(o5) <= i) and (i <= o4)) and
  (to_rep1((to_array(o5)[i])) = o3))))) ->
  (first1(a) <= location2)))))))))))))))))))))
