(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : natural, natural -> bool

logic dummy : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function to_rep(x: natural) : int = naturalqtint(x)

logic of_rep : int -> natural

axiom inversion_axiom :
  (forall x:natural [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:natural [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : integer, integer -> bool

logic dummy1 : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep1(x: integer) : int = integerqtint(x)

logic of_rep1 : int -> integer

axiom inversion_axiom1 :
  (forall x:integer [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 : (forall x:integer [to_rep1(x)]. in_range1(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range1(x) ->
  (to_rep1(of_rep1(x)) = x)))

type category

logic categoryqtint : category -> int

axiom categoryqtaxiom : (forall i:category. (1 <= categoryqtint(i)))

axiom categoryqtaxiom1 : (forall i:category. (categoryqtint(i) <= 8))

predicate in_range2(x: int) = ((1 <= x) and (x <= 8))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : category, category -> bool

logic dummy2 : category

type category__ref = { category__content : category
}

function category__ref_category__content__projection(a: category__ref) : category =
  (a).category__content

type map__ref = { map__content : (int,natural) farray
}

logic slide : (int,natural) farray, int, int -> (int,natural) farray

axiom slide_eq :
  (forall a:(int,natural) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,natural) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,natural) farray, a__first: int, a__last: int,
  b: (int,natural) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,natural) farray. forall b:(int,natural) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep1(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,natural) farray; rt : t
}

function to_array(a: us_t) : (int,natural) farray = (a).elts

function of_array(a: (int,natural) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep1(first((a).rt))

function last1(a: us_t) : int = to_rep1(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep1(first((x).rt)), to_rep1(last((x).rt)), (y).elts,
  to_rep1(first((y).rt)), to_rep1(last((y).rt)))

logic user_eq3 : us_t, us_t -> bool

logic dummy3 : us_t

type num_item_t__ref = { num_item_t__content : us_t
}

function num_item_t__ref_num_item_t__content__projection(a: num_item_t__ref) : us_t =
  (a).num_item_t__content

logic num_item_per_category : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic cat : int

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant(temp___expr_174: int, temp___is_init_170: bool,
  temp___skip_constant_171: bool, temp___do_toplevel_172: bool,
  temp___do_typ_inv_173: bool) = (((temp___is_init_170 = true) or
  (1 <= 8)) -> in_range2(temp___expr_174))

predicate dynamic_invariant1(temp___expr_181: us_t, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = ((not (temp___skip_constant_178 = true)) ->
  dynamic_property(1, 8, first1(temp___expr_181), last1(temp___expr_181)))

type t3s

logic t3sqtint : t3s -> int

axiom t3sqtaxiom : (forall i:t3s. (1 <= t3sqtint(i)))

axiom t3sqtaxiom1 : (forall i:t3s. (t3sqtint(i) <= 8))

predicate in_range3(x: int) = ((1 <= x) and (x <= 8))

function bool_eq5(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : t3s, t3s -> bool

logic dummy4 : t3s

type t3s__ref = { t3s__content : t3s
}

function t3s__ref_t3s__content__projection(a: t3s__ref) : t3s =
  (a).t3s__content

logic counter_example__num_item_per_category__aggregate_def : int, int, int,
  int, int, int, int, int -> (int,natural) farray

predicate dynamic_invariant2(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range(temp___expr_39))

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom num_item_per_category__def_axiom :
  (num_item_per_category = of_array(counter_example__num_item_per_category__aggregate_def(3,
  8, 10000, 42, 98, 76, 0, 1), 1, 8))

logic rliteral : natural

axiom rliteral_axiom : (naturalqtint(rliteral) = 3)

logic rliteral1 : natural

axiom rliteral_axiom1 : (naturalqtint(rliteral1) = 8)

logic rliteral2 : natural

axiom rliteral_axiom2 : (naturalqtint(rliteral2) = 10000)

logic rliteral3 : natural

axiom rliteral_axiom3 : (naturalqtint(rliteral3) = 42)

logic rliteral4 : natural

axiom rliteral_axiom4 : (naturalqtint(rliteral4) = 98)

logic rliteral5 : natural

axiom rliteral_axiom5 : (naturalqtint(rliteral5) = 76)

logic rliteral6 : natural

axiom rliteral_axiom6 : (naturalqtint(rliteral6) = 0)

logic rliteral7 : natural

axiom rliteral_axiom7 : (naturalqtint(rliteral7) = 1)

axiom def_axiom :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[1]) = rliteral)))

axiom def_axiom1 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[2]) = rliteral1)))

axiom def_axiom2 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[3]) = rliteral2)))

axiom def_axiom3 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[4]) = rliteral3)))

axiom def_axiom4 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[5]) = rliteral4)))

axiom def_axiom5 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[6]) = rliteral5)))

axiom def_axiom6 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[7]) = rliteral6)))

axiom def_axiom7 :
  (forall temp___156:int. forall temp___157:int. forall temp___158:int.
  forall temp___159:int. forall temp___160:int. forall temp___161:int.
  forall temp___162:int. forall temp___163:int.
  (((dynamic_invariant2(temp___156, true, true, true, true) and
  dynamic_invariant2(temp___157, true, true, true, true)) and
  (((dynamic_invariant2(temp___158, true, true, true, true) and
  dynamic_invariant2(temp___159, true, true, true, true)) and
  dynamic_invariant2(temp___160, true, true, true, true)) and
  ((dynamic_invariant2(temp___161, true, true, true, true) and
  dynamic_invariant2(temp___162, true, true, true, true)) and
  dynamic_invariant2(temp___163, true, true, true, true)))) ->
  ((counter_example__num_item_per_category__aggregate_def(temp___156,
  temp___157, temp___158, temp___159, temp___160, temp___161, temp___162,
  temp___163)[8]) = rliteral7)))

 (* File "counter_example.adb", line 3, characters 0-0 *)
goal defqtvc : (dynamic_invariant1(num_item_per_category, true, false, true,
  true) ->
  ((of_array(counter_example__num_item_per_category__aggregate_def(3, 8,
  10000, 42, 98, 76, 0, 1), 1, 8) = num_item_per_category) ->
  (dynamic_invariant(cat, true, false, true, true) ->
  (first1(num_item_per_category) <= cat))))
