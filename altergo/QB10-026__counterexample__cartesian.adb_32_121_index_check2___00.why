(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range1(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range2(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq2(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

predicate dynamic_invariant(temp___expr_39: int, temp___is_init_35: bool,
  temp___skip_constant_36: bool, temp___do_toplevel_37: bool,
  temp___do_typ_inv_38: bool) = (((temp___is_init_35 = true) or
  (0 <= 2147483647)) -> in_range2(temp___expr_39))

type map__ref = { map__content : (int,integer) farray
}

logic slide : (int,integer) farray, int, int -> (int,integer) farray

axiom slide_eq :
  (forall a:(int,integer) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,integer) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,integer) farray, a__first: int, a__last: int,
  b: (int,integer) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,integer) farray. forall b:(int,integer) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) ->
  (to_rep((a[temp___idx_154])) = to_rep((b[((b__first - a__first) + temp___idx_154)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t = { elts : (int,integer) farray; rt : t
}

function to_array(a: us_t) : (int,integer) farray = (a).elts

function of_array(a: (int,integer) farray, f: int, l: int) : us_t = { elts =
  a; rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type integer_array__ref = { integer_array__content : us_t
}

function integer_array__ref_integer_array__content__projection(a: integer_array__ref) : us_t =
  (a).integer_array__content

logic dummy3 : (int,integer) farray

logic value__size1 : int

logic object__size1 : int

logic component__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq3 : (int,integer) farray, (int,integer) farray -> bool

type map__ref1 = { map__content1 : (int,(int,integer) farray) farray
}

logic slide1 : (int,(int,integer) farray) farray, int,
  int -> (int,(int,integer) farray) farray

axiom slide_eq1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall first2:int [slide1(a, first2, first2)]. (slide1(a, first2,
  first2) = a)))

axiom slide_def1 :
  (forall a:(int,(int,integer) farray) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,(int,integer) farray) farray, a__first: int,
  a__last: int, b: (int,(int,integer) farray) farray, b__first: int,
  b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,(int,integer) farray) farray.
  forall b:(int,(int,integer) farray) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_155:int. (((a__first <= temp___idx_155) and
  (temp___idx_155 <= a__last)) -> (bool_eq3((a[temp___idx_155]), 1, 2,
  (b[((b__first - a__first) + temp___idx_155)]), 1, 2) = true))))))

type t1

logic first2 : t1 -> integer

logic last2 : t1 -> integer

logic mk1 : int, int -> t1

axiom mk_def2 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(first2(mk1(f, l))) = f))))

axiom mk_def3 :
  (forall f:int. forall l:int [mk1(f, l)]. (in_range1(f) -> (in_range1(l) ->
  (to_rep(last2(mk1(f, l))) = l))))

predicate dynamic_property1(range_first: int, range_last: int, low: int,
  high: int) = (in_range1(low) and (in_range1(high) and ((low <= high) ->
  (in_range2(low) and in_range2(high)))))

type us_t1 = { elts1 : (int,(int,integer) farray) farray; rt1 : t1
}

function to_array1(a: us_t1) : (int,(int,integer) farray) farray = (a).elts1

function of_array1(a: (int,(int,integer) farray) farray, f: int,
  l: int) : us_t1 = { elts1 = a; rt1 = mk1(f, l) }

function first3(a: us_t1) : int = to_rep(first2((a).rt1))

function last3(a: us_t1) : int = to_rep(last2((a).rt1))

function length1(a: us_t1) : int =
  (if (first3(a) <= last3(a)) then ((last3(a) - first3(a)) + 1) else 0)

logic value__size2 : int

logic object__size2 : int

logic component__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom2 : (0 <= alignment2)

function bool_eq6(x: us_t1, y: us_t1) : bool = bool_eq5((x).elts1,
  to_rep(first2((x).rt1)), to_rep(last2((x).rt1)), (y).elts1,
  to_rep(first2((y).rt1)), to_rep(last2((y).rt1)))

logic user_eq4 : us_t1, us_t1 -> bool

logic dummy4 : us_t1

type integer_product_type__ref = { integer_product_type__content : us_t1
}

function integer_product_type__ref_integer_product_type__content__projection(a: integer_product_type__ref) : us_t1 =
  (a).integer_product_type__content

logic in_array : (int,integer) farray, us_t1 -> bool

logic in_array__function_guard : bool, (int,integer) farray, us_t1 -> prop

type tpair_typeD1

logic tpair_typeD1qtint : tpair_typeD1 -> int

axiom tpair_typeD1qtaxiom :
  (forall i:tpair_typeD1. (1 <= tpair_typeD1qtint(i)))

axiom tpair_typeD1qtaxiom1 :
  (forall i:tpair_typeD1. (tpair_typeD1qtint(i) <= 2))

predicate in_range3(x: int) = ((1 <= x) and (x <= 2))

function bool_eq7(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq5 : tpair_typeD1, tpair_typeD1 -> bool

logic dummy5 : tpair_typeD1

type tpair_typeD1__ref = { tpair_typeD1__content : tpair_typeD1
}

function tpair_typeD1__ref_tpair_typeD1__content__projection(a: tpair_typeD1__ref) : tpair_typeD1 =
  (a).tpair_typeD1__content

predicate dynamic_invariant1(temp___expr_180: us_t1,
  temp___is_init_176: bool, temp___skip_constant_177: bool,
  temp___do_toplevel_178: bool, temp___do_typ_inv_179: bool) =
  ((not (temp___skip_constant_177 = true)) -> dynamic_property1(0,
  2147483647, first3(temp___expr_180), last3(temp___expr_180)))

axiom in_array__def_axiom :
  (forall element:(int,integer) farray.
  (forall arr:us_t1 [in_array(element, arr)]. ((in_array(element,
  arr) = true) ->
  (exists i:int. (((first3(arr) <= i) and (i <= last3(arr))) and
  (bool_eq3((to_array1(arr)[i]), 1, 2, element, 1, 2) = true))))))

axiom in_array__def_axiom1 :
  (forall element:(int,integer) farray.
  (forall arr:us_t1 [in_array(element, arr)].
  ((exists i:int. (((first3(arr) <= i) and (i <= last3(arr))) and
   (bool_eq3((to_array1(arr)[i]), 1, 2, element, 1, 2) = true))) ->
  (in_array(element, arr) = true))))

logic array1 : us_t

logic attr__ATTRIBUTE_ADDRESS : int

logic array2 : us_t

logic attr__ATTRIBUTE_ADDRESS1 : int

logic result_length : int

logic attr__ATTRIBUTE_ADDRESS2 : int

logic result____first : integer

logic result____last : integer

logic attr__ATTRIBUTE_ADDRESS3 : int

logic attr__ATTRIBUTE_ADDRESS4 : int

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

predicate dynamic_invariant2(temp___expr_164: us_t, temp___is_init_160: bool,
  temp___skip_constant_161: bool, temp___do_toplevel_162: bool,
  temp___do_typ_inv_163: bool) = ((not (temp___skip_constant_161 = true)) ->
  dynamic_property(0, 2147483647, first1(temp___expr_164),
  last1(temp___expr_164)))

type tresultS__ref = { tresultS__content : us_t1
}

function tresultS__ref_tresultS__content__projection(a: tresultS__ref) : us_t1 =
  (a).tresultS__content

type t6b__ref = { t6b__content : us_t1
}

function t6b__ref_t6b__content__projection(a: t6b__ref) : us_t1 =
  (a).t6b__content

predicate dynamic_property2(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq8(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq6 : integer, integer -> bool

logic dummy6 : integer

type t7b__ref = { t7b__content : integer
}

function t7b__ref_t7b__content__projection(a: t7b__ref) : integer =
  (a).t7b__content

predicate dynamic_property3(first_int: int, last_int: int, x: int) =
  ((first_int <= x) and (x <= last_int))

function bool_eq9(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq7 : integer, integer -> bool

logic dummy7 : integer

type t8b__ref = { t8b__content : integer
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : integer =
  (a).t8b__content

logic temp_____aggregate_def_208 : int, int -> (int,integer) farray

logic cartesian__cartesian_product__result__aggregate_def : (int,integer) farray,
  int, int -> us_t1

logic temp_____aggregate_def_273 : int, int -> (int,integer) farray

logic temp_____aggregate_def_285 : int, int -> (int,integer) farray

predicate dynamic_invariant3(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range1(temp___expr_18))

axiom result_length__def_axiom :
  (result_length = (length(array1) * length(array2)))

axiom def_axiom :
  (forall temp___269:(int,integer) farray.
  (forall temp___270:int. forall temp___271:int. (dynamic_property1(0,
  2147483647, temp___270, temp___271) ->
  (first3(cartesian__cartesian_product__result__aggregate_def(temp___269,
  temp___270, temp___271)) = temp___270))))

axiom def_axiom1 :
  (forall temp___269:(int,integer) farray.
  (forall temp___270:int. forall temp___271:int. (dynamic_property1(0,
  2147483647, temp___270, temp___271) ->
  (last3(cartesian__cartesian_product__result__aggregate_def(temp___269,
  temp___270, temp___271)) = temp___271))))

axiom def_axiom2 :
  (forall temp___269:(int,integer) farray.
  (forall temp___270:int. forall temp___271:int.
  (forall temp___272:int.
  ((to_array1(cartesian__cartesian_product__result__aggregate_def(temp___269,
  temp___270, temp___271))[temp___272]) = temp___269))))

logic rliteral : integer

axiom rliteral_axiom : (integerqtint(rliteral) = 0)

axiom def_axiom3 :
  (forall temp___275:int. forall temp___276:int.
  ((dynamic_invariant3(temp___275, true, true, true, true) and
  dynamic_invariant3(temp___276, true, true, true, true)) ->
  ((temp_____aggregate_def_273(temp___275, temp___276)[1]) = rliteral)))

axiom def_axiom4 :
  (forall temp___275:int. forall temp___276:int.
  ((dynamic_invariant3(temp___275, true, true, true, true) and
  dynamic_invariant3(temp___276, true, true, true, true)) ->
  ((temp_____aggregate_def_273(temp___275, temp___276)[2]) = rliteral)))

axiom def_axiom5 :
  (forall temp___287:int. forall temp___288:int.
  ((dynamic_invariant3(temp___287, true, true, true, true) and
  dynamic_invariant3(temp___288, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_285(temp___287,
  temp___288)[1])) = temp___287)))

axiom def_axiom6 :
  (forall temp___287:int. forall temp___288:int.
  ((dynamic_invariant3(temp___287, true, true, true, true) and
  dynamic_invariant3(temp___288, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_285(temp___287,
  temp___288)[2])) = temp___288)))

axiom def_axiom7 :
  (forall temp___210:int. forall temp___211:int.
  ((dynamic_invariant3(temp___210, true, true, true, true) and
  dynamic_invariant3(temp___211, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_208(temp___210,
  temp___211)[1])) = temp___210)))

axiom def_axiom8 :
  (forall temp___210:int. forall temp___211:int.
  ((dynamic_invariant3(temp___210, true, true, true, true) and
  dynamic_invariant3(temp___211, true, true, true, true)) ->
  (to_rep((temp_____aggregate_def_208(temp___210,
  temp___211)[2])) = temp___211)))

predicate dynamic_invariant4(temp___expr_247: us_t1,
  temp___is_init_243: bool, temp___skip_constant_244: bool,
  temp___do_toplevel_245: bool, temp___do_typ_inv_246: bool) =
  ((not (temp___skip_constant_244 = true)) -> (dynamic_property1(1,
  result_length, first3(temp___expr_247), last3(temp___expr_247)) and
  ((first3(temp___expr_247) = 1) and
  (last3(temp___expr_247) = result_length))))

predicate default_initial_assumption(temp___expr_250: us_t1,
  temp___skip_top_level_251: bool) = ((first3(temp___expr_250) = 1) and
  (last3(temp___expr_250) = result_length))

 (* File "cartesian.ads", line 43, characters 0-0 *)
goal defqtvc : (dynamic_invariant2(array1, true, false, true, true) ->
  (dynamic_invariant2(array2, true, false, true, true) ->
  (((length(array1) <  255) and (length(array2) <  255)) -> (let o =
  length(array2) : int in (in_range1(o) -> (let o1 = length(array1) : int in
  (in_range1(o1) -> (let o2 = (o1 * o) : int in (in_range1(o2) ->
  (in_range2(o2) -> ((o2 = result_length) ->
  (dynamic_invariant(result_length, true, false, true, true) ->
  (let temp___278 =
  cartesian__cartesian_product__result__aggregate_def(temp_____aggregate_def_273(0,
  0), 1, result_length) : us_t1 in ((first3(temp___278) = 1) ->
  ((last3(temp___278) = result_length) ->
  ((if (first3(temp___278) <= last3(temp___278)) then ((1 <= result_length) and
  ((last3(temp___278) - first3(temp___278)) = (result_length - 1))) else (result_length <  1)) ->
  (let cartesian__cartesian_product__result__assume =
  of_array1(to_array1(temp___278), first3(temp___278), last3(temp___278))
  : us_t1 in
  (forall result__:(int,(int,integer) farray) farray.
  ((result__ = to_array1(cartesian__cartesian_product__result__assume)) ->
  ((to_rep(result____first) = first3(cartesian__cartesian_product__result__assume)) ->
  ((to_rep(result____last) = last3(cartesian__cartesian_product__result__assume)) ->
  ((dynamic_property1(1, result_length, to_rep(result____first),
  to_rep(result____last)) and ((to_rep(result____first) = 1) and
  (to_rep(result____last) = result_length))) ->
  (forall result_index:int. ((result_index = 0) ->
  (dynamic_invariant(result_index, true, false, true, true) ->
  (let temp___281 = first1(array1) : int in
  (forall index1:int. ((index1 = temp___281) ->
  ((andb((if (temp___281 <= index1) then true else false),
  (if (index1 <= last1(array1)) then true else false)) = true) ->
  (let temp___283 = first1(array2) : int in
  (forall index2:int. ((index2 = temp___283) ->
  ((andb((if (temp___283 <= index2) then true else false),
  (if (index2 <= last1(array2)) then true else false)) = true) -> (let o3 =
  (result_index + 1) : int in (in_range1(o3) ->
  (forall result_index1:int. ((result_index1 = o3) ->
  (forall o4:int. ((to_rep((to_array(array2)[index2])) = o4) ->
  (forall o5:int. ((to_rep((to_array(array1)[index1])) = o5) ->
  (((to_rep(result____first) <= result_index1) and
  (result_index1 <= to_rep(result____last))) ->
  (forall result__1:(int,(int,integer) farray) farray.
  ((result__1 = (result__[result_index1 <- temp_____aggregate_def_285(o5,
  o4)])) -> (let o6 = (index2 - first1(array2)) : int in (in_range1(o6) ->
  (let o7 = length(array2) : int in (in_range1(o7) -> (let o8 =
  (index1 - first1(array1)) : int in (in_range1(o8) -> (let o9 = (o8 * o7)
  : int in (in_range1(o9) -> (let o10 = (o9 + o6) : int in (in_range1(o10) ->
  (in_range1((o10 + 1)) ->
  (forall usf:int. ((andb((if (first1(array2) <= usf) then true else false),
  (if (usf <= index2) then true else false)) = true) ->
  (first1(array1) <= index1))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
