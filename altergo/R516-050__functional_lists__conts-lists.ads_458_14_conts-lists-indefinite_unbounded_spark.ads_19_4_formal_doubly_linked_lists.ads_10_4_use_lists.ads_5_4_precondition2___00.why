(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type us_split_fields = { rec__ext__ : us_private
}

function us_split_fields_rec__ext____projection(a: us_split_fields) : us_private =
  (a).rec__ext__

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields; attr__tag : int
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function us_rep_attr__tag__projection(a: us_rep) : int = (a).attr__tag

logic us_dispatch_eq : us_rep, us_rep -> bool

logic us_tag : int

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic user_eq : us_rep, us_rep -> bool

logic dummy : us_rep

type limited_base_list__ref = { limited_base_list__content : us_rep
}

function limited_base_list__ref_limited_base_list__content__projection(a: limited_base_list__ref) : us_rep =
  (a).limited_base_list__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_fields2 = {
rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list
: us_main_type; rec__ext__1 : us_private
}

function us_split_fields_rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__projection(a: us_split_fields2) : us_main_type =
  (a).rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list

function us_split_fields_rec__ext____2__projection(a: us_split_fields2) : us_private =
  (a).rec__ext__1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2; attr__tag1 : int
}

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function us_rep_attr__tag__2__projection(a: us_rep1) : int = (a).attr__tag1

logic hide_ext__ : us_main_type, us_private -> us_private

logic extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list : us_private -> us_main_type

axiom extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__conv :
  (forall use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list:us_main_type.
  (forall rec__ext__2:us_private.
  (extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list(hide_ext__(use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list,
  rec__ext__2)) = use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list)))

logic extract__ext__ : us_private -> us_private

function to_base(a: us_rep1) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__(((a).us_split_fields3).rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list,
  ((a).us_split_fields3).rec__ext__1) }; attr__tag = (a).attr__tag1 }

function of_base(r: us_rep) : us_rep1 = { us_split_fields3 = {
  rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list =
  extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list(((r).us_split_fields1).rec__ext__);
  rec__ext__1 = extract__ext__(((r).us_split_fields1).rec__ext__) };
  attr__tag1 = (r).attr__tag }

logic us_tag1 : int

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic user_eq1 : us_rep1, us_rep1 -> bool

logic dummy1 : us_rep1

type nodes_list__ref = { nodes_list__content : us_rep1
}

function nodes_list__ref_nodes_list__content__projection(a: nodes_list__ref) : us_rep1 =
  (a).nodes_list__content

type us_main_type1

logic us_main_eq1 : us_main_type1, us_main_type1 -> bool

type us_split_fields4 = {
rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1
: us_main_type; rec__use_lists__my_lists__element_lists__lists__list :
us_main_type1; rec__ext__2 : us_private
}

function us_split_fields_rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__2__projection(a: us_split_fields4) : us_main_type =
  (a).rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1

function us_split_fields_rec__use_lists__my_lists__element_lists__lists__list__projection(a: us_split_fields4) : us_main_type1 =
  (a).rec__use_lists__my_lists__element_lists__lists__list

function us_split_fields_rec__ext____3__projection(a: us_split_fields4) : us_private =
  (a).rec__ext__2

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4; attr__tag2 : int
}

function us_rep___split_fields__4__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function us_rep_attr__tag__3__projection(a: us_rep2) : int = (a).attr__tag2

logic hide_ext__1 : us_main_type, us_main_type1, us_private -> us_private

axiom extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list__conv1 :
  (forall use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list:us_main_type.
  (forall use_lists__my_lists__element_lists__lists__list:us_main_type1.
  (forall rec__ext__3:us_private.
  (extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list(hide_ext__1(use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list,
  use_lists__my_lists__element_lists__lists__list,
  rec__ext__3)) = use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list))))

logic extract__use_lists__my_lists__element_lists__lists__list : us_private -> us_main_type1

axiom extract__use_lists__my_lists__element_lists__lists__list__conv :
  (forall use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list:us_main_type.
  (forall use_lists__my_lists__element_lists__lists__list:us_main_type1.
  (forall rec__ext__3:us_private.
  (extract__use_lists__my_lists__element_lists__lists__list(hide_ext__1(use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list,
  use_lists__my_lists__element_lists__lists__list,
  rec__ext__3)) = use_lists__my_lists__element_lists__lists__list))))

logic extract__ext__1 : us_private -> us_private

function to_base1(a: us_rep2) : us_rep = { us_split_fields1 = { rec__ext__ =
  hide_ext__1(((a).us_split_fields5).rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1,
  ((a).us_split_fields5).rec__use_lists__my_lists__element_lists__lists__list,
  ((a).us_split_fields5).rec__ext__2) }; attr__tag = (a).attr__tag2 }

function of_base1(r: us_rep) : us_rep2 = { us_split_fields5 = {
  rec__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list1 =
  extract__use_lists__my_lists__element_lists__nodes__private_nodes_list__nodes_list(((r).us_split_fields1).rec__ext__);
  rec__use_lists__my_lists__element_lists__lists__list =
  extract__use_lists__my_lists__element_lists__lists__list(((r).us_split_fields1).rec__ext__);
  rec__ext__2 = extract__ext__1(((r).us_split_fields1).rec__ext__) };
  attr__tag2 = (r).attr__tag }

logic us_tag2 : int

logic value__size2 : int

logic object__size2 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq2 : us_rep2, us_rep2 -> bool

logic dummy2 : us_rep2

type list__ref = { list__content : us_rep2
}

function list__ref_list__content__projection(a: list__ref) : us_rep2 =
  (a).list__content

predicate default_initial_assumption(temp___expr_337: us_rep2,
  temp___skip_top_level_338: bool) = ((temp___expr_337).attr__tag2 = us_tag2)

type us_main_type2

logic us_main_eq2 : us_main_type2, us_main_type2 -> bool

type us_rep3

logic bool_eq : us_rep3, us_rep3 -> bool

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq3 : us_rep3, us_rep3 -> bool

logic dummy3 : us_rep3

type cursor__ref = { cursor__content : us_rep3
}

function cursor__ref_cursor__content__projection(a: cursor__ref) : us_rep3 =
  (a).cursor__content

logic has_element : us_rep2, us_rep3 -> bool

logic has_element__function_guard : bool, us_rep2, us_rep3 -> prop

logic next : us_rep2, us_rep3 -> us_rep3

logic next__function_guard : us_rep3, us_rep2, us_rep3 -> prop

logic self : us_rep2

logic attr__ATTRIBUTE_ADDRESS : int

logic position : us_rep3

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate default_initial_assumption1(temp___expr_271: us_rep,
  temp___skip_top_level_272: bool) = ((temp___expr_271).attr__tag = us_tag)

predicate default_initial_assumption2(temp___expr_318: us_rep1,
  temp___skip_top_level_319: bool) = ((temp___expr_318).attr__tag1 = us_tag1)

 (* File "conts-lists.ads", line 456, characters 0-0 *)
goal defqtvc :
  ((forall o:us_rep3. forall o1:us_rep2.
   has_element__function_guard(has_element(o1, o), o1, o)) ->
  (has_element(self, position) = true))
