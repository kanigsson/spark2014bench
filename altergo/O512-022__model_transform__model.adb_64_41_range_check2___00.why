(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq(x: bool, y: bool) : bool = (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> bool

type name_t

logic name_tqtint : name_t -> int

axiom name_tqtaxiom : (forall i:name_t. (0 <= name_tqtint(i)))

axiom name_tqtaxiom1 : (forall i:name_t. (name_tqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq : name_t, name_t -> bool

logic dummy : name_t

type name_t__ref = { name_t__content : name_t
}

function name_t__ref_name_t__content__projection(a: name_t__ref) : name_t =
  (a).name_t__content

function to_rep(x: name_t) : int = name_tqtint(x)

logic of_rep : int -> name_t

axiom inversion_axiom :
  (forall x:name_t [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:name_t [to_rep(x)]. in_range1(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range1(x) ->
  (to_rep(of_rep(x)) = x)))

type us_split_fields = { rec__model__uml_state__name_data : name_t
}

function us_split_fields_rec__model__uml_state__name_data__projection(a: us_split_fields) : name_t =
  (a).rec__model__uml_state__name_data

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_fields1 : us_split_fields
}

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function bool_eq2(a: us_rep, b: us_rep) : bool =
  (if (to_rep(((a).us_split_fields1).rec__model__uml_state__name_data) = to_rep(((b).us_split_fields1).rec__model__uml_state__name_data)) then true else false)

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic model__uml_state__name_data__first__bit : int

logic model__uml_state__name_data__last__bit : int

logic model__uml_state__name_data__position : int

axiom model__uml_state__name_data__first__bit_axiom :
  (0 <= model__uml_state__name_data__first__bit)

axiom model__uml_state__name_data__last__bit_axiom :
  (model__uml_state__name_data__first__bit <  model__uml_state__name_data__last__bit)

axiom model__uml_state__name_data__position_axiom :
  (0 <= model__uml_state__name_data__position)

logic user_eq1 : us_rep, us_rep -> bool

logic dummy1 : us_rep

type uml_state__ref = { uml_state__content : us_rep
}

function uml_state__ref_uml_state__content__projection(a: uml_state__ref) : us_rep =
  (a).uml_state__content

logic name : us_rep -> int

logic name__function_guard : int, us_rep -> prop

predicate dynamic_invariant(temp___expr_181: int, temp___is_init_177: bool,
  temp___skip_constant_178: bool, temp___do_toplevel_179: bool,
  temp___do_typ_inv_180: bool) = (((temp___is_init_177 = true) or
  (0 <= 2147483647)) -> in_range1(temp___expr_181))

axiom name__post_axiom :
  (forall self:us_rep [name(self)]. (let result = name(self) : int in
  (name__function_guard(result, self) -> dynamic_invariant(result, true,
  false, true, true))))

axiom name__def_axiom :
  (forall self:us_rep [name(self)].
  (name(self) = to_rep(((self).us_split_fields1).rec__model__uml_state__name_data)))

type uml_state_access

logic uml_state_accessqtint : uml_state_access -> int

axiom uml_state_accessqtaxiom :
  (forall i:uml_state_access. (0 <= uml_state_accessqtint(i)))

axiom uml_state_accessqtaxiom1 :
  (forall i:uml_state_access. (uml_state_accessqtint(i) <= 100))

predicate in_range2(x: int) = ((0 <= x) and (x <= 100))

function bool_eq3(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE2 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> int

logic user_eq2 : uml_state_access, uml_state_access -> bool

logic dummy2 : uml_state_access

type uml_state_access__ref = { uml_state_access__content : uml_state_access
}

function uml_state_access__ref_uml_state_access__content__projection(a: uml_state_access__ref) : uml_state_access =
  (a).uml_state_access__content

function to_rep1(x: uml_state_access) : int = uml_state_accessqtint(x)

logic of_rep1 : int -> uml_state_access

axiom inversion_axiom1 :
  (forall x:uml_state_access [to_rep1(x)]. (of_rep1(to_rep1(x)) = x))

axiom range_axiom1 :
  (forall x:uml_state_access [to_rep1(x)]. in_range2(to_rep1(x)))

axiom coerce_axiom1 :
  (forall x:int [to_rep1(of_rep1(x))]. (in_range2(x) ->
  (to_rep1(of_rep1(x)) = x)))

type us_split_fields2 = { rec__model__uml_transition__from_data :
uml_state_access; rec__model__uml_transition__to_data : uml_state_access
}

function us_split_fields_rec__model__uml_transition__from_data__projection(a: us_split_fields2) : uml_state_access =
  (a).rec__model__uml_transition__from_data

function us_split_fields_rec__model__uml_transition__to_data__projection(a: us_split_fields2) : uml_state_access =
  (a).rec__model__uml_transition__to_data

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__2__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_fields3 : us_split_fields2
}

function us_rep___split_fields__2__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function bool_eq4(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep1(((a).us_split_fields3).rec__model__uml_transition__from_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__from_data)) and
  (to_rep1(((a).us_split_fields3).rec__model__uml_transition__to_data) = to_rep1(((b).us_split_fields3).rec__model__uml_transition__to_data))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic model__uml_transition__from_data__first__bit : int

logic model__uml_transition__from_data__last__bit : int

logic model__uml_transition__from_data__position : int

axiom model__uml_transition__from_data__first__bit_axiom :
  (0 <= model__uml_transition__from_data__first__bit)

axiom model__uml_transition__from_data__last__bit_axiom :
  (model__uml_transition__from_data__first__bit <  model__uml_transition__from_data__last__bit)

axiom model__uml_transition__from_data__position_axiom :
  (0 <= model__uml_transition__from_data__position)

logic model__uml_transition__to_data__first__bit : int

logic model__uml_transition__to_data__last__bit : int

logic model__uml_transition__to_data__position : int

axiom model__uml_transition__to_data__first__bit_axiom :
  (0 <= model__uml_transition__to_data__first__bit)

axiom model__uml_transition__to_data__last__bit_axiom :
  (model__uml_transition__to_data__first__bit <  model__uml_transition__to_data__last__bit)

axiom model__uml_transition__to_data__position_axiom :
  (0 <= model__uml_transition__to_data__position)

logic user_eq3 : us_rep1, us_rep1 -> bool

logic dummy3 : us_rep1

type uml_transition__ref = { uml_transition__content : us_rep1
}

function uml_transition__ref_uml_transition__content__projection(a: uml_transition__ref) : us_rep1 =
  (a).uml_transition__content

logic from : us_rep1 -> int

logic from__function_guard : int, us_rep1 -> prop

predicate dynamic_invariant1(temp___expr_196: int, temp___is_init_192: bool,
  temp___skip_constant_193: bool, temp___do_toplevel_194: bool,
  temp___do_typ_inv_195: bool) = (((temp___is_init_192 = true) or
  (0 <= 100)) -> in_range2(temp___expr_196))

axiom from__post_axiom :
  (forall self:us_rep1 [from(self)]. (let result = from(self) : int in
  (from__function_guard(result, self) -> dynamic_invariant1(result, true,
  false, true, true))))

axiom from__def_axiom :
  (forall self:us_rep1 [from(self)].
  (from(self) = to_rep1(((self).us_split_fields3).rec__model__uml_transition__from_data)))

logic to__ : us_rep1 -> int

logic to____function_guard : int, us_rep1 -> prop

axiom to____post_axiom :
  (forall self:us_rep1 [to__(self)]. (let result = to__(self) : int in
  (to____function_guard(result, self) -> dynamic_invariant1(result, true,
  false, true, true))))

axiom to____def_axiom :
  (forall self:us_rep1 [to__(self)].
  (to__(self) = to_rep1(((self).us_split_fields3).rec__model__uml_transition__to_data)))

type map__ref = { map__content : (int,us_rep) farray
}

logic slide : (int,us_rep) farray, int, int -> (int,us_rep) farray

axiom slide_eq :
  (forall a:(int,us_rep) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,us_rep) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq5(a: (int,us_rep) farray, a__first: int, a__last: int,
  b: (int,us_rep) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true)))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,us_rep) farray. forall b:(int,us_rep) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq5(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_154:int. (((a__first <= temp___idx_154) and
  (temp___idx_154 <= a__last)) -> (bool_eq2((a[temp___idx_154]),
  (b[((b__first - a__first) + temp___idx_154)])) = true))))))

logic dummy4 : (int,us_rep) farray

logic value__size2 : int

logic object__size2 : int

logic component__size : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq4 : (int,us_rep) farray, (int,us_rep) farray -> bool

type map__ref1 = { map__content1 : (int,us_rep1) farray
}

logic slide1 : (int,us_rep1) farray, int, int -> (int,us_rep1) farray

axiom slide_eq1 :
  (forall a:(int,us_rep1) farray.
  (forall first:int [slide1(a, first, first)]. (slide1(a, first, first) = a)))

axiom slide_def1 :
  (forall a:(int,us_rep1) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide1(a, old_first, new_first)[i])]. ((slide1(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq6(a: (int,us_rep1) farray, a__first: int, a__last: int,
  b: (int,us_rep1) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true)))) then true else false)

axiom bool_eq_rev4 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev5 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev6 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev7 :
  (forall a:(int,us_rep1) farray. forall b:(int,us_rep1) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq6(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) -> (bool_eq4((a[temp___idx_156]),
  (b[((b__first - a__first) + temp___idx_156)])) = true))))))

logic dummy5 : (int,us_rep1) farray

logic value__size3 : int

logic object__size3 : int

logic component__size1 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom3 : (0 <= alignment3)

logic user_eq5 : (int,us_rep1) farray, (int,us_rep1) farray -> bool

type us_split_fields4 = { rec__model__uml_state_machine__owned_state_data :
(int,us_rep) farray; rec__model__uml_state_machine__owned_transition_data :
(int,us_rep1) farray
}

function us_split_fields_rec__model__uml_state_machine__owned_state_data__projection(a: us_split_fields4) : (int,us_rep) farray =
  (a).rec__model__uml_state_machine__owned_state_data

function us_split_fields_rec__model__uml_state_machine__owned_transition_data__projection(a: us_split_fields4) : (int,us_rep1) farray =
  (a).rec__model__uml_state_machine__owned_transition_data

type us_split_fields__ref2 = { us_split_fields__content2 : us_split_fields4
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref2) : us_split_fields4 =
  (a).us_split_fields__content2

type us_rep2 = { us_split_fields5 : us_split_fields4
}

function us_rep___split_fields__3__projection(a: us_rep2) : us_split_fields4 =
  (a).us_split_fields5

function bool_eq7(a: us_rep2, b: us_rep2) : bool =
  (if ((bool_eq5(((a).us_split_fields5).rec__model__uml_state_machine__owned_state_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_state_data, 0,
  100) = true) and
  (bool_eq6(((a).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100,
  ((b).us_split_fields5).rec__model__uml_state_machine__owned_transition_data,
  0, 100) = true)) then true else false)

logic value__size4 : int

logic object__size4 : int

logic alignment4 : int

axiom value__size_axiom4 : (0 <= value__size4)

axiom object__size_axiom4 : (0 <= object__size4)

axiom alignment_axiom4 : (0 <= alignment4)

logic model__uml_state_machine__owned_state_data__first__bit : int

logic model__uml_state_machine__owned_state_data__last__bit : int

logic model__uml_state_machine__owned_state_data__position : int

axiom model__uml_state_machine__owned_state_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_state_data__first__bit)

axiom model__uml_state_machine__owned_state_data__last__bit_axiom :
  (model__uml_state_machine__owned_state_data__first__bit <  model__uml_state_machine__owned_state_data__last__bit)

axiom model__uml_state_machine__owned_state_data__position_axiom :
  (0 <= model__uml_state_machine__owned_state_data__position)

logic model__uml_state_machine__owned_transition_data__first__bit : int

logic model__uml_state_machine__owned_transition_data__last__bit : int

logic model__uml_state_machine__owned_transition_data__position : int

axiom model__uml_state_machine__owned_transition_data__first__bit_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__first__bit)

axiom model__uml_state_machine__owned_transition_data__last__bit_axiom :
  (model__uml_state_machine__owned_transition_data__first__bit <  model__uml_state_machine__owned_transition_data__last__bit)

axiom model__uml_state_machine__owned_transition_data__position_axiom :
  (0 <= model__uml_state_machine__owned_transition_data__position)

logic user_eq6 : us_rep2, us_rep2 -> bool

logic dummy6 : us_rep2

type uml_state_machine__ref = { uml_state_machine__content : us_rep2
}

function uml_state_machine__ref_uml_state_machine__content__projection(a: uml_state_machine__ref) : us_rep2 =
  (a).uml_state_machine__content

logic owned_state : us_rep2 -> (int,us_rep) farray

logic owned_state__function_guard : (int,us_rep) farray, us_rep2 -> prop

axiom owned_state__def_axiom :
  (forall self:us_rep2 [owned_state(self)].
  (owned_state(self) = ((self).us_split_fields5).rec__model__uml_state_machine__owned_state_data))

logic owned_transition : us_rep2 -> (int,us_rep1) farray

logic owned_transition__function_guard : (int,us_rep1) farray,
  us_rep2 -> prop

axiom owned_transition__def_axiom :
  (forall self:us_rep2 [owned_transition(self)].
  (owned_transition(self) = ((self).us_split_fields5).rec__model__uml_state_machine__owned_transition_data))

type us_split_fields6 = { rec__model__uml_action__name_data : name_t
}

function us_split_fields_rec__model__uml_action__name_data__projection(a: us_split_fields6) : name_t =
  (a).rec__model__uml_action__name_data

type us_split_fields__ref3 = { us_split_fields__content3 : us_split_fields6
}

function us_split_fields__ref___split_fields__content__4__projection(a: us_split_fields__ref3) : us_split_fields6 =
  (a).us_split_fields__content3

type us_rep3 = { us_split_fields7 : us_split_fields6
}

function us_rep___split_fields__4__projection(a: us_rep3) : us_split_fields6 =
  (a).us_split_fields7

function bool_eq8(a: us_rep3, b: us_rep3) : bool =
  (if (to_rep(((a).us_split_fields7).rec__model__uml_action__name_data) = to_rep(((b).us_split_fields7).rec__model__uml_action__name_data)) then true else false)

logic value__size5 : int

logic object__size5 : int

logic alignment5 : int

axiom value__size_axiom5 : (0 <= value__size5)

axiom object__size_axiom5 : (0 <= object__size5)

axiom alignment_axiom5 : (0 <= alignment5)

logic model__uml_action__name_data__first__bit : int

logic model__uml_action__name_data__last__bit : int

logic model__uml_action__name_data__position : int

axiom model__uml_action__name_data__first__bit_axiom :
  (0 <= model__uml_action__name_data__first__bit)

axiom model__uml_action__name_data__last__bit_axiom :
  (model__uml_action__name_data__first__bit <  model__uml_action__name_data__last__bit)

axiom model__uml_action__name_data__position_axiom :
  (0 <= model__uml_action__name_data__position)

logic user_eq7 : us_rep3, us_rep3 -> bool

logic dummy7 : us_rep3

type uml_action__ref = { uml_action__content : us_rep3
}

function uml_action__ref_uml_action__content__projection(a: uml_action__ref) : us_rep3 =
  (a).uml_action__content

logic no_uml_action : us_rep3

logic attr__ATTRIBUTE_ADDRESS : int

type map__ref2 = { map__content2 : (int,us_rep3) farray
}

logic slide2 : (int,us_rep3) farray, int, int -> (int,us_rep3) farray

axiom slide_eq2 :
  (forall a:(int,us_rep3) farray.
  (forall first:int [slide2(a, first, first)]. (slide2(a, first, first) = a)))

axiom slide_def2 :
  (forall a:(int,us_rep3) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide2(a, old_first, new_first)[i])]. ((slide2(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq9(a: (int,us_rep3) farray, a__first: int, a__last: int,
  b: (int,us_rep3) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_161:int. (((a__first <= temp___idx_161) and
  (temp___idx_161 <= a__last)) -> (bool_eq8((a[temp___idx_161]),
  (b[((b__first - a__first) + temp___idx_161)])) = true)))) then true else false)

axiom bool_eq_rev8 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev9 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev10 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev11 :
  (forall a:(int,us_rep3) farray. forall b:(int,us_rep3) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq9(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_161:int. (((a__first <= temp___idx_161) and
  (temp___idx_161 <= a__last)) -> (bool_eq8((a[temp___idx_161]),
  (b[((b__first - a__first) + temp___idx_161)])) = true))))))

logic no_uml_action_vector : (int,us_rep3) farray

logic attr__ATTRIBUTE_ADDRESS1 : int

logic name1 : us_rep3 -> int

logic name__function_guard1 : int, us_rep3 -> prop

axiom name__post_axiom1 :
  (forall self:us_rep3 [name1(self)]. (let result = name1(self) : int in
  (name__function_guard1(result, self) -> dynamic_invariant(result, true,
  false, true, true))))

axiom name__def_axiom1 :
  (forall self:us_rep3 [name1(self)].
  (name1(self) = to_rep(((self).us_split_fields7).rec__model__uml_action__name_data)))

type uml_action_access

logic uml_action_accessqtint : uml_action_access -> int

axiom uml_action_accessqtaxiom :
  (forall i:uml_action_access. (0 <= uml_action_accessqtint(i)))

axiom uml_action_accessqtaxiom1 :
  (forall i:uml_action_access. (uml_action_accessqtint(i) <= 100))

predicate in_range3(x: int) = ((0 <= x) and (x <= 100))

function bool_eq10(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq8 : uml_action_access, uml_action_access -> bool

logic dummy8 : uml_action_access

type uml_action_access__ref = { uml_action_access__content :
uml_action_access
}

function uml_action_access__ref_uml_action_access__content__projection(a: uml_action_access__ref) : uml_action_access =
  (a).uml_action_access__content

function to_rep2(x: uml_action_access) : int = uml_action_accessqtint(x)

logic of_rep2 : int -> uml_action_access

axiom inversion_axiom2 :
  (forall x:uml_action_access [to_rep2(x)]. (of_rep2(to_rep2(x)) = x))

axiom range_axiom2 :
  (forall x:uml_action_access [to_rep2(x)]. in_range3(to_rep2(x)))

axiom coerce_axiom2 :
  (forall x:int [to_rep2(of_rep2(x))]. (in_range3(x) ->
  (to_rep2(of_rep2(x)) = x)))

type us_split_fields8 = { rec__model__uml_control_flow__from_data :
uml_action_access; rec__model__uml_control_flow__to_data : uml_action_access
}

function us_split_fields_rec__model__uml_control_flow__from_data__projection(a: us_split_fields8) : uml_action_access =
  (a).rec__model__uml_control_flow__from_data

function us_split_fields_rec__model__uml_control_flow__to_data__projection(a: us_split_fields8) : uml_action_access =
  (a).rec__model__uml_control_flow__to_data

type us_split_fields__ref4 = { us_split_fields__content4 : us_split_fields8
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref4) : us_split_fields8 =
  (a).us_split_fields__content4

type us_rep4 = { us_split_fields9 : us_split_fields8
}

function us_rep___split_fields__5__projection(a: us_rep4) : us_split_fields8 =
  (a).us_split_fields9

function bool_eq11(a: us_rep4, b: us_rep4) : bool =
  (if ((to_rep2(((a).us_split_fields9).rec__model__uml_control_flow__from_data) = to_rep2(((b).us_split_fields9).rec__model__uml_control_flow__from_data)) and
  (to_rep2(((a).us_split_fields9).rec__model__uml_control_flow__to_data) = to_rep2(((b).us_split_fields9).rec__model__uml_control_flow__to_data))) then true else false)

logic value__size6 : int

logic object__size6 : int

logic alignment6 : int

axiom value__size_axiom6 : (0 <= value__size6)

axiom object__size_axiom6 : (0 <= object__size6)

axiom alignment_axiom6 : (0 <= alignment6)

logic model__uml_control_flow__from_data__first__bit : int

logic model__uml_control_flow__from_data__last__bit : int

logic model__uml_control_flow__from_data__position : int

axiom model__uml_control_flow__from_data__first__bit_axiom :
  (0 <= model__uml_control_flow__from_data__first__bit)

axiom model__uml_control_flow__from_data__last__bit_axiom :
  (model__uml_control_flow__from_data__first__bit <  model__uml_control_flow__from_data__last__bit)

axiom model__uml_control_flow__from_data__position_axiom :
  (0 <= model__uml_control_flow__from_data__position)

logic model__uml_control_flow__to_data__first__bit : int

logic model__uml_control_flow__to_data__last__bit : int

logic model__uml_control_flow__to_data__position : int

axiom model__uml_control_flow__to_data__first__bit_axiom :
  (0 <= model__uml_control_flow__to_data__first__bit)

axiom model__uml_control_flow__to_data__last__bit_axiom :
  (model__uml_control_flow__to_data__first__bit <  model__uml_control_flow__to_data__last__bit)

axiom model__uml_control_flow__to_data__position_axiom :
  (0 <= model__uml_control_flow__to_data__position)

logic user_eq9 : us_rep4, us_rep4 -> bool

logic dummy9 : us_rep4

type uml_control_flow__ref = { uml_control_flow__content : us_rep4
}

function uml_control_flow__ref_uml_control_flow__content__projection(a: uml_control_flow__ref) : us_rep4 =
  (a).uml_control_flow__content

logic no_uml_control_flow : us_rep4

logic attr__ATTRIBUTE_ADDRESS2 : int

type map__ref3 = { map__content3 : (int,us_rep4) farray
}

logic slide3 : (int,us_rep4) farray, int, int -> (int,us_rep4) farray

axiom slide_eq3 :
  (forall a:(int,us_rep4) farray.
  (forall first:int [slide3(a, first, first)]. (slide3(a, first, first) = a)))

axiom slide_def3 :
  (forall a:(int,us_rep4) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide3(a, old_first, new_first)[i])]. ((slide3(a,
  old_first, new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq12(a: (int,us_rep4) farray, a__first: int, a__last: int,
  b: (int,us_rep4) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_166:int. (((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) -> (bool_eq11((a[temp___idx_166]),
  (b[((b__first - a__first) + temp___idx_166)])) = true)))) then true else false)

axiom bool_eq_rev12 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev13 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev14 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev15 :
  (forall a:(int,us_rep4) farray. forall b:(int,us_rep4) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq12(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_166:int. (((a__first <= temp___idx_166) and
  (temp___idx_166 <= a__last)) -> (bool_eq11((a[temp___idx_166]),
  (b[((b__first - a__first) + temp___idx_166)])) = true))))))

logic no_uml_control_flow_vector : (int,us_rep4) farray

logic attr__ATTRIBUTE_ADDRESS3 : int

logic from1 : us_rep4 -> int

logic from__function_guard1 : int, us_rep4 -> prop

predicate dynamic_invariant2(temp___expr_307: int, temp___is_init_303: bool,
  temp___skip_constant_304: bool, temp___do_toplevel_305: bool,
  temp___do_typ_inv_306: bool) = (((temp___is_init_303 = true) or
  (0 <= 100)) -> in_range3(temp___expr_307))

axiom from__post_axiom1 :
  (forall self:us_rep4 [from1(self)]. (let result = from1(self) : int in
  (from__function_guard1(result, self) -> dynamic_invariant2(result, true,
  false, true, true))))

axiom from__def_axiom1 :
  (forall self:us_rep4 [from1(self)].
  (from1(self) = to_rep2(((self).us_split_fields9).rec__model__uml_control_flow__from_data)))

logic to__1 : us_rep4 -> int

logic to____function_guard1 : int, us_rep4 -> prop

axiom to____post_axiom1 :
  (forall self:us_rep4 [to__1(self)]. (let result = to__1(self) : int in
  (to____function_guard1(result, self) -> dynamic_invariant2(result, true,
  false, true, true))))

axiom to____def_axiom1 :
  (forall self:us_rep4 [to__1(self)].
  (to__1(self) = to_rep2(((self).us_split_fields9).rec__model__uml_control_flow__to_data)))

logic dummy10 : (int,us_rep3) farray

logic value__size7 : int

logic object__size7 : int

logic component__size2 : int

logic alignment7 : int

axiom value__size_axiom7 : (0 <= value__size7)

axiom object__size_axiom7 : (0 <= object__size7)

axiom component__size_axiom2 : (0 <= component__size2)

axiom alignment_axiom7 : (0 <= alignment7)

logic user_eq10 : (int,us_rep3) farray, (int,us_rep3) farray -> bool

logic dummy11 : (int,us_rep4) farray

logic value__size8 : int

logic object__size8 : int

logic component__size3 : int

logic alignment8 : int

axiom value__size_axiom8 : (0 <= value__size8)

axiom object__size_axiom8 : (0 <= object__size8)

axiom component__size_axiom3 : (0 <= component__size3)

axiom alignment_axiom8 : (0 <= alignment8)

logic user_eq11 : (int,us_rep4) farray, (int,us_rep4) farray -> bool

type us_split_fields10 = { rec__model__uml_activity__owned_action_data :
(int,us_rep3) farray; rec__model__uml_activity__owned_flow_data :
(int,us_rep4) farray
}

function us_split_fields_rec__model__uml_activity__owned_action_data__projection(a: us_split_fields10) : (int,us_rep3) farray =
  (a).rec__model__uml_activity__owned_action_data

function us_split_fields_rec__model__uml_activity__owned_flow_data__projection(a: us_split_fields10) : (int,us_rep4) farray =
  (a).rec__model__uml_activity__owned_flow_data

type us_split_fields__ref5 = { us_split_fields__content5 : us_split_fields10
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref5) : us_split_fields10 =
  (a).us_split_fields__content5

type us_rep5 = { us_split_fields11 : us_split_fields10
}

function us_rep___split_fields__6__projection(a: us_rep5) : us_split_fields10 =
  (a).us_split_fields11

function bool_eq13(a: us_rep5, b: us_rep5) : bool =
  (if ((bool_eq9(((a).us_split_fields11).rec__model__uml_activity__owned_action_data,
  0, 100,
  ((b).us_split_fields11).rec__model__uml_activity__owned_action_data, 0,
  100) = true) and
  (bool_eq12(((a).us_split_fields11).rec__model__uml_activity__owned_flow_data,
  0, 100, ((b).us_split_fields11).rec__model__uml_activity__owned_flow_data,
  0, 100) = true)) then true else false)

logic value__size9 : int

logic object__size9 : int

logic alignment9 : int

axiom value__size_axiom9 : (0 <= value__size9)

axiom object__size_axiom9 : (0 <= object__size9)

axiom alignment_axiom9 : (0 <= alignment9)

logic model__uml_activity__owned_action_data__first__bit : int

logic model__uml_activity__owned_action_data__last__bit : int

logic model__uml_activity__owned_action_data__position : int

axiom model__uml_activity__owned_action_data__first__bit_axiom :
  (0 <= model__uml_activity__owned_action_data__first__bit)

axiom model__uml_activity__owned_action_data__last__bit_axiom :
  (model__uml_activity__owned_action_data__first__bit <  model__uml_activity__owned_action_data__last__bit)

axiom model__uml_activity__owned_action_data__position_axiom :
  (0 <= model__uml_activity__owned_action_data__position)

logic model__uml_activity__owned_flow_data__first__bit : int

logic model__uml_activity__owned_flow_data__last__bit : int

logic model__uml_activity__owned_flow_data__position : int

axiom model__uml_activity__owned_flow_data__first__bit_axiom :
  (0 <= model__uml_activity__owned_flow_data__first__bit)

axiom model__uml_activity__owned_flow_data__last__bit_axiom :
  (model__uml_activity__owned_flow_data__first__bit <  model__uml_activity__owned_flow_data__last__bit)

axiom model__uml_activity__owned_flow_data__position_axiom :
  (0 <= model__uml_activity__owned_flow_data__position)

logic user_eq12 : us_rep5, us_rep5 -> bool

logic dummy12 : us_rep5

type uml_activity__ref = { uml_activity__content : us_rep5
}

function uml_activity__ref_uml_activity__content__projection(a: uml_activity__ref) : us_rep5 =
  (a).uml_activity__content

logic no_uml_activity : us_rep5

logic attr__ATTRIBUTE_ADDRESS4 : int

logic owned_action : us_rep5 -> (int,us_rep3) farray

logic owned_action__function_guard : (int,us_rep3) farray, us_rep5 -> prop

axiom owned_action__def_axiom :
  (forall self:us_rep5 [owned_action(self)].
  (owned_action(self) = ((self).us_split_fields11).rec__model__uml_activity__owned_action_data))

logic owned_flow : us_rep5 -> (int,us_rep4) farray

logic owned_flow__function_guard : (int,us_rep4) farray, us_rep5 -> prop

axiom owned_flow__def_axiom :
  (forall self:us_rep5 [owned_flow(self)].
  (owned_flow(self) = ((self).us_split_fields11).rec__model__uml_activity__owned_flow_data))

type uml_control_flow_access

logic uml_control_flow_accessqtint : uml_control_flow_access -> int

axiom uml_control_flow_accessqtaxiom :
  (forall i:uml_control_flow_access. (0 <= uml_control_flow_accessqtint(i)))

axiom uml_control_flow_accessqtaxiom1 :
  (forall i:uml_control_flow_access.
  (uml_control_flow_accessqtint(i) <= 100))

predicate in_range4(x: int) = ((0 <= x) and (x <= 100))

function bool_eq14(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE4 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check4 : us_image -> prop

logic attr__ATTRIBUTE_VALUE4 : us_image -> int

logic user_eq13 : uml_control_flow_access, uml_control_flow_access -> bool

logic dummy13 : uml_control_flow_access

type uml_control_flow_access__ref = { uml_control_flow_access__content :
uml_control_flow_access
}

function uml_control_flow_access__ref_uml_control_flow_access__content__projection(a: uml_control_flow_access__ref) : uml_control_flow_access =
  (a).uml_control_flow_access__content

logic sm : us_rep2

logic attr__ATTRIBUTE_ADDRESS5 : int

logic attr__ATTRIBUTE_ADDRESS6 : int

logic attr__ATTRIBUTE_ADDRESS7 : int

logic attr__ATTRIBUTE_ADDRESS8 : int

logic r1b : (int,us_rep) farray

logic attr__ATTRIBUTE_ADDRESS9 : int

logic attr__ATTRIBUTE_ADDRESS10 : int

logic r7b : (int,us_rep1) farray

logic attr__ATTRIBUTE_ADDRESS11 : int

logic attr__ATTRIBUTE_ADDRESS12 : int

type uml_transition_access

logic uml_transition_accessqtint : uml_transition_access -> int

axiom uml_transition_accessqtaxiom :
  (forall i:uml_transition_access. (0 <= uml_transition_accessqtint(i)))

axiom uml_transition_accessqtaxiom1 :
  (forall i:uml_transition_access. (uml_transition_accessqtint(i) <= 100))

predicate in_range5(x: int) = ((0 <= x) and (x <= 100))

function bool_eq15(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE5 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check5 : us_image -> prop

logic attr__ATTRIBUTE_VALUE5 : us_image -> int

logic user_eq14 : uml_transition_access, uml_transition_access -> bool

logic dummy14 : uml_transition_access

type uml_transition_access__ref = { uml_transition_access__content :
uml_transition_access
}

function uml_transition_access__ref_uml_transition_access__content__projection(a: uml_transition_access__ref) : uml_transition_access =
  (a).uml_transition_access__content

logic model__no_uml_action_vector__aggregate_def : us_rep3 -> (int,us_rep3) farray

logic model__no_uml_control_flow_vector__aggregate_def : us_rep4 -> (int,us_rep4) farray

type t2b

logic t2bqtint : t2b -> int

axiom t2bqtaxiom : (forall i:t2b. (0 <= t2bqtint(i)))

axiom t2bqtaxiom1 : (forall i:t2b. (t2bqtint(i) <= 100))

predicate in_range6(x: int) = ((0 <= x) and (x <= 100))

function bool_eq16(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE6 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check6 : us_image -> prop

logic attr__ATTRIBUTE_VALUE6 : us_image -> int

logic user_eq15 : t2b, t2b -> bool

logic dummy15 : t2b

type t2b__ref = { t2b__content : t2b
}

function t2b__ref_t2b__content__projection(a: t2b__ref) : t2b =
  (a).t2b__content

type t8b

logic t8bqtint : t8b -> int

axiom t8bqtaxiom : (forall i:t8b. (0 <= t8bqtint(i)))

axiom t8bqtaxiom1 : (forall i:t8b. (t8bqtint(i) <= 100))

predicate in_range7(x: int) = ((0 <= x) and (x <= 100))

function bool_eq17(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE7 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check7 : us_image -> prop

logic attr__ATTRIBUTE_VALUE7 : us_image -> int

logic user_eq16 : t8b, t8b -> bool

logic dummy16 : t8b

type t8b__ref = { t8b__content : t8b
}

function t8b__ref_t8b__content__projection(a: t8b__ref) : t8b =
  (a).t8b__content

predicate dynamic_invariant3(temp___expr_223: int, temp___is_init_219: bool,
  temp___skip_constant_220: bool, temp___do_toplevel_221: bool,
  temp___do_typ_inv_222: bool) = (((temp___is_init_219 = true) or
  (0 <= 100)) -> in_range5(temp___expr_223))

logic rliteral : name_t

axiom rliteral_axiom : (name_tqtint(rliteral) = 0)

axiom no_uml_action__def_axiom : (no_uml_action = { us_split_fields7 = {
  rec__model__uml_action__name_data = rliteral } })

axiom no_uml_action_vector__def_axiom :
  (no_uml_action_vector = model__no_uml_action_vector__aggregate_def(no_uml_action))

axiom def_axiom :
  (forall temp___163:us_rep3.
  (forall temp___164:int.
  ((model__no_uml_action_vector__aggregate_def(temp___163)[temp___164]) = temp___163)))

logic rliteral1 : uml_action_access

axiom rliteral_axiom1 : (uml_action_accessqtint(rliteral1) = 0)

axiom no_uml_control_flow__def_axiom : (no_uml_control_flow = {
  us_split_fields9 = { rec__model__uml_control_flow__from_data = rliteral1;
  rec__model__uml_control_flow__to_data = rliteral1 } })

predicate dynamic_invariant4(temp___expr_334: int, temp___is_init_330: bool,
  temp___skip_constant_331: bool, temp___do_toplevel_332: bool,
  temp___do_typ_inv_333: bool) = (((temp___is_init_330 = true) or
  (0 <= 100)) -> in_range4(temp___expr_334))

axiom no_uml_control_flow_vector__def_axiom :
  (no_uml_control_flow_vector = model__no_uml_control_flow_vector__aggregate_def(no_uml_control_flow))

axiom def_axiom1 :
  (forall temp___168:us_rep4.
  (forall temp___169:int.
  ((model__no_uml_control_flow_vector__aggregate_def(temp___168)[temp___169]) = temp___168)))

axiom no_uml_activity__def_axiom : (no_uml_activity = { us_split_fields11 = {
  rec__model__uml_activity__owned_action_data = no_uml_action_vector;
  rec__model__uml_activity__owned_flow_data = no_uml_control_flow_vector } })

axiom r1b__def_axiom : owned_state__function_guard(owned_state(sm), sm)

axiom r1b__def_axiom1 : (r1b = owned_state(sm))

axiom r7b__def_axiom : owned_transition__function_guard(owned_transition(sm),
  sm)

axiom r7b__def_axiom1 : (r7b = owned_transition(sm))

 (* File "model.ads", line 160, characters 0-0 *)
goal defqtvc :
  ((model__no_uml_action_vector__aggregate_def(no_uml_action) = no_uml_action_vector) ->
  ((model__no_uml_control_flow_vector__aggregate_def(no_uml_control_flow) = no_uml_control_flow_vector) ->
  (({ us_split_fields11 = { rec__model__uml_activity__owned_action_data =
  no_uml_action_vector; rec__model__uml_activity__owned_flow_data =
  no_uml_control_flow_vector } } = no_uml_activity) ->
  (forall av:(int,us_rep3) farray. ((av = no_uml_action_vector) ->
  (forall cfv:(int,us_rep4) farray. ((cfv = no_uml_control_flow_vector) ->
  (forall act__split_fields:us_split_fields10.
  ((act__split_fields = (no_uml_activity).us_split_fields11) -> (let o = sm
  : us_rep2 in (let model__transform__L_1__R1b__assume = owned_state(o)
  : (int,us_rep) farray in
  ((owned_state__function_guard(model__transform__L_1__R1b__assume, o) and
  (model__transform__L_1__R1b__assume = ((o).us_split_fields5).rec__model__uml_state_machine__owned_state_data)) ->
  ((model__transform__L_1__R1b__assume = r1b) ->
  (forall s:int. ((s = 0) -> ((andb((if (0 <= s) then true else false),
  (if (s <= 100) then true else false)) = true) ->
  (forall usf:int. ((andb((if (0 <= usf) then true else false),
  (if (usf <= (s - 1)) then true else false)) = true) -> in_range3(usf)))))))))))))))))))
