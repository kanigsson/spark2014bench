(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

type natural

logic naturalqtint : natural -> int

axiom naturalqtaxiom : (forall i:natural. (0 <= naturalqtint(i)))

axiom naturalqtaxiom1 : (forall i:natural. (naturalqtint(i) <= 2147483647))

predicate in_range1(x: int) = ((0 <= x) and (x <= 2147483647))

function bool_eq1(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE1 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check1 : us_image -> prop

logic attr__ATTRIBUTE_VALUE1 : us_image -> int

logic user_eq1 : natural, natural -> bool

logic dummy1 : natural

type natural__ref = { natural__content : natural
}

function natural__ref_natural__content__projection(a: natural__ref) : natural =
  (a).natural__content

function ite(b: bool, x: 'a, y: 'a) : 'a = match_bool(b, x, y)

function bool_eq2(x: bool, y: bool) : bool =
  (if (x = y) then true else false)

function to_int(b: bool) : int = (if (b = true) then 1 else 0)

function of_int(i: int) : bool = (if (i = 0) then false else true)

predicate in_range2(x: int) = ((x = 0) or (x = 1))

logic attr__ATTRIBUTE_IMAGE2 : bool -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check2 : us_image -> prop

logic attr__ATTRIBUTE_VALUE2 : us_image -> bool

type map__ref = { map__content : (int,bool) farray
}

logic slide : (int,bool) farray, int, int -> (int,bool) farray

axiom slide_eq :
  (forall a:(int,bool) farray.
  (forall first:int [slide(a, first, first)]. (slide(a, first, first) = a)))

axiom slide_def :
  (forall a:(int,bool) farray.
  (forall old_first:int.
  (forall new_first:int.
  (forall i:int [(slide(a, old_first, new_first)[i])]. ((slide(a, old_first,
  new_first)[i]) = (a[(i - (new_first - old_first))]))))))

function bool_eq3(a: (int,bool) farray, a__first: int, a__last: int,
  b: (int,bool) farray, b__first: int, b__last: int) : bool =
  (if ((if (a__first <= a__last) then ((b__first <= b__last) and
  ((a__last - a__first) = (b__last - b__first))) else (b__last <  b__first)) and
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_int((a[temp___idx_156])) = to_int((b[((b__first - a__first) + temp___idx_156)])))))) then true else false)

axiom bool_eq_rev :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) -> (b__first <= b__last)))))

axiom bool_eq_rev1 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((a__first <= a__last) ->
  ((a__last - a__first) = (b__last - b__first))))))

axiom bool_eq_rev2 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) -> ((not (a__first <= a__last)) ->
  (b__last <  b__first)))))

axiom bool_eq_rev3 :
  (forall a:(int,bool) farray. forall b:(int,bool) farray.
  (forall a__first:int. forall a__last:int. forall b__first:int.
  forall b__last:int. ((bool_eq3(b, b__first, b__last, a, a__first,
  a__last) = true) ->
  (forall temp___idx_156:int. (((a__first <= temp___idx_156) and
  (temp___idx_156 <= a__last)) ->
  (to_int((a[temp___idx_156])) = to_int((b[((b__first - a__first) + temp___idx_156)]))))))))

type t

logic first : t -> integer

logic last : t -> integer

logic mk : int, int -> t

axiom mk_def :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(first(mk(f, l))) = f))))

axiom mk_def1 :
  (forall f:int. forall l:int [mk(f, l)]. (in_range(f) -> (in_range(l) ->
  (to_rep(last(mk(f, l))) = l))))

predicate dynamic_property(range_first: int, range_last: int, low: int,
  high: int) = (in_range(low) and (in_range(high) and ((low <= high) ->
  (in_range1(low) and in_range1(high)))))

type us_t = { elts : (int,bool) farray; rt : t
}

function to_array(a: us_t) : (int,bool) farray = (a).elts

function of_array(a: (int,bool) farray, f: int, l: int) : us_t = { elts = a;
  rt = mk(f, l) }

function first1(a: us_t) : int = to_rep(first((a).rt))

function last1(a: us_t) : int = to_rep(last((a).rt))

function length(a: us_t) : int =
  (if (first1(a) <= last1(a)) then ((last1(a) - first1(a)) + 1) else 0)

logic value__size : int

logic object__size : int

logic component__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom component__size_axiom : (0 <= component__size)

axiom alignment_axiom : (0 <= alignment)

function bool_eq4(x: us_t, y: us_t) : bool = bool_eq3((x).elts,
  to_rep(first((x).rt)), to_rep(last((x).rt)), (y).elts,
  to_rep(first((y).rt)), to_rep(last((y).rt)))

logic user_eq2 : us_t, us_t -> bool

logic dummy2 : us_t

type a1__ref = { a1__content : us_t
}

function a1__ref_a1__content__2__projection(a: a1__ref) : us_t =
  (a).a1__content

type t61b__ref = { t61b__content : us_t
}

function t61b__ref_t61b__content__projection(a: t61b__ref) : us_t =
  (a).t61b__content

type us_split_discrs = { rec__do_checks__do_discriminant_check__r1__j :
integer
}

function us_split_discrs_rec__do_checks__do_discriminant_check__r1__j__projection(a: us_split_discrs) : integer =
  (a).rec__do_checks__do_discriminant_check__r1__j

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__3__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__do_checks__do_discriminant_check__r1__arr :
us_t
}

function us_split_fields_rec__do_checks__do_discriminant_check__r1__arr__projection(a: us_split_fields) : us_t =
  (a).rec__do_checks__do_discriminant_check__r1__arr

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__5__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__3__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__5__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

predicate do_checks__do_discriminant_check__r1__arr__pred(a: us_rep) =
  ((1 <= to_rep(((a).us_split_discrs1).rec__do_checks__do_discriminant_check__r1__j)) and
  (to_rep(((a).us_split_discrs1).rec__do_checks__do_discriminant_check__r1__j) <= 2147483647))

function bool_eq5(a: us_rep, b: us_rep) : bool =
  (if ((to_rep(((a).us_split_discrs1).rec__do_checks__do_discriminant_check__r1__j) = to_rep(((b).us_split_discrs1).rec__do_checks__do_discriminant_check__r1__j)) and
  (do_checks__do_discriminant_check__r1__arr__pred(a) ->
  (bool_eq4(((a).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr,
  ((b).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr) = true))) then true else false)

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic do_checks__do_discriminant_check__r1__j__first__bit : int

logic do_checks__do_discriminant_check__r1__j__last__bit : int

logic do_checks__do_discriminant_check__r1__j__position : int

axiom do_checks__do_discriminant_check__r1__j__first__bit_axiom :
  (0 <= do_checks__do_discriminant_check__r1__j__first__bit)

axiom do_checks__do_discriminant_check__r1__j__last__bit_axiom :
  (do_checks__do_discriminant_check__r1__j__first__bit <  do_checks__do_discriminant_check__r1__j__last__bit)

axiom do_checks__do_discriminant_check__r1__j__position_axiom :
  (0 <= do_checks__do_discriminant_check__r1__j__position)

logic do_checks__do_discriminant_check__r1__arr__first__bit : int

logic do_checks__do_discriminant_check__r1__arr__last__bit : int

logic do_checks__do_discriminant_check__r1__arr__position : int

axiom do_checks__do_discriminant_check__r1__arr__first__bit_axiom :
  (0 <= do_checks__do_discriminant_check__r1__arr__first__bit)

axiom do_checks__do_discriminant_check__r1__arr__last__bit_axiom :
  (do_checks__do_discriminant_check__r1__arr__first__bit <  do_checks__do_discriminant_check__r1__arr__last__bit)

axiom do_checks__do_discriminant_check__r1__arr__position_axiom :
  (0 <= do_checks__do_discriminant_check__r1__arr__position)

logic user_eq3 : us_rep, us_rep -> bool

logic dummy3 : us_rep

type r1__ref = { r1__content : us_rep
}

function r1__ref_r1__content__projection(a: r1__ref) : us_rep =
  (a).r1__content

predicate dynamic_invariant(temp___expr_552: us_rep,
  temp___is_init_548: bool, temp___skip_constant_549: bool,
  temp___do_toplevel_550: bool, temp___do_typ_inv_551: bool) =
  (let temp___553 =
  ((temp___expr_552).us_split_discrs1).rec__do_checks__do_discriminant_check__r1__j
  : integer in
  (do_checks__do_discriminant_check__r1__arr__pred(temp___expr_552) ->
  (dynamic_property(1, to_rep(temp___553),
  first1(((temp___expr_552).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr),
  last1(((temp___expr_552).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr)) and
  ((first1(((temp___expr_552).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr) = 1) and
  (last1(((temp___expr_552).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr) = to_rep(temp___553))))))

type tT62bP1

logic tT62bP1qtint : tT62bP1 -> int

axiom tT62bP1qtaxiom : (forall i:tT62bP1. (1 <= tT62bP1qtint(i)))

axiom tT62bP1qtaxiom1 : (forall i:tT62bP1. (tT62bP1qtint(i) <= 10))

predicate in_range3(x: int) = ((1 <= x) and (x <= 10))

function bool_eq6(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE3 : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check3 : us_image -> prop

logic attr__ATTRIBUTE_VALUE3 : us_image -> int

logic user_eq4 : tT62bP1, tT62bP1 -> bool

logic dummy4 : tT62bP1

type tT62bP1__ref = { tT62bP1__content : tT62bP1
}

function tT62bP1__ref_tT62bP1__content__projection(a: tT62bP1__ref) : tT62bP1 =
  (a).tT62bP1__content

logic dummy5 : (int,bool) farray

logic value__size2 : int

logic object__size2 : int

logic component__size1 : int

logic alignment2 : int

axiom value__size_axiom2 : (0 <= value__size2)

axiom object__size_axiom2 : (0 <= object__size2)

axiom component__size_axiom1 : (0 <= component__size1)

axiom alignment_axiom2 : (0 <= alignment2)

logic user_eq5 : (int,bool) farray, (int,bool) farray -> bool

type us_split_fields2 = { rec__do_checks__do_discriminant_check__r1__arr1 :
(int,bool) farray
}

function us_split_fields_rec__do_checks__do_discriminant_check__r1__arr__2__projection(a: us_split_fields2) : (int,bool) farray =
  (a).rec__do_checks__do_discriminant_check__r1__arr1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__6__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__4__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__6__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = {
  rec__do_checks__do_discriminant_check__r1__arr =
  of_array(((a).us_split_fields3).rec__do_checks__do_discriminant_check__r1__arr1,
  1, 10) } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = {
  rec__do_checks__do_discriminant_check__r1__arr1 =
  to_array(((r).us_split_fields1).rec__do_checks__do_discriminant_check__r1__arr)
  } }

predicate do_checks__do_discriminant_check__r1__arr__pred1(a: us_rep1) =
  ((1 <= to_rep(((a).us_split_discrs2).rec__do_checks__do_discriminant_check__r1__j)) and
  (to_rep(((a).us_split_discrs2).rec__do_checks__do_discriminant_check__r1__j) <= 2147483647))

function bool_eq7(a: us_rep1, b: us_rep1) : bool =
  (if ((to_rep(((a).us_split_discrs2).rec__do_checks__do_discriminant_check__r1__j) = to_rep(((b).us_split_discrs2).rec__do_checks__do_discriminant_check__r1__j)) and
  (do_checks__do_discriminant_check__r1__arr__pred1(a) ->
  (bool_eq3(((a).us_split_fields3).rec__do_checks__do_discriminant_check__r1__arr1,
  1, 10,
  ((b).us_split_fields3).rec__do_checks__do_discriminant_check__r1__arr1, 1,
  10) = true))) then true else false)

predicate in_range4(rec__do_checks__do_discriminant_check__r1__j1: int,
  a: us_rep) =
  (rec__do_checks__do_discriminant_check__r1__j1 = to_rep(((a).us_split_discrs1).rec__do_checks__do_discriminant_check__r1__j))

logic value__size3 : int

logic object__size3 : int

logic alignment3 : int

axiom value__size_axiom3 : (0 <= value__size3)

axiom object__size_axiom3 : (0 <= object__size3)

axiom alignment_axiom3 : (0 <= alignment3)

logic do_checks__do_discriminant_check__r1__j__first__bit1 : int

logic do_checks__do_discriminant_check__r1__j__last__bit1 : int

logic do_checks__do_discriminant_check__r1__j__position1 : int

axiom do_checks__do_discriminant_check__r1__j__first__bit_axiom1 :
  (0 <= do_checks__do_discriminant_check__r1__j__first__bit1)

axiom do_checks__do_discriminant_check__r1__j__last__bit_axiom1 :
  (do_checks__do_discriminant_check__r1__j__first__bit1 <  do_checks__do_discriminant_check__r1__j__last__bit1)

axiom do_checks__do_discriminant_check__r1__j__position_axiom1 :
  (0 <= do_checks__do_discriminant_check__r1__j__position1)

logic do_checks__do_discriminant_check__r1__arr__first__bit1 : int

logic do_checks__do_discriminant_check__r1__arr__last__bit1 : int

logic do_checks__do_discriminant_check__r1__arr__position1 : int

axiom do_checks__do_discriminant_check__r1__arr__first__bit_axiom1 :
  (0 <= do_checks__do_discriminant_check__r1__arr__first__bit1)

axiom do_checks__do_discriminant_check__r1__arr__last__bit_axiom1 :
  (do_checks__do_discriminant_check__r1__arr__first__bit1 <  do_checks__do_discriminant_check__r1__arr__last__bit1)

axiom do_checks__do_discriminant_check__r1__arr__position_axiom1 :
  (0 <= do_checks__do_discriminant_check__r1__arr__position1)

logic user_eq6 : us_rep1, us_rep1 -> bool

logic dummy6 : us_rep1

type r2__ref = { r2__content : us_rep1
}

function r2__ref_r2__content__projection(a: r2__ref) : us_rep1 =
  (a).r2__content

predicate dynamic_invariant1(temp___expr_559: us_rep1,
  temp___is_init_555: bool, temp___skip_constant_556: bool,
  temp___do_toplevel_557: bool, temp___do_typ_inv_558: bool) =
  ((not (temp___skip_constant_556 = true)) -> in_range4(10,
  to_base(temp___expr_559)))

predicate default_initial_assumption(temp___expr_562: us_rep1,
  temp___skip_top_level_563: bool) =
  (to_rep(((temp___expr_562).us_split_discrs2).rec__do_checks__do_discriminant_check__r1__j) = 10)

logic x__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

logic y__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant2(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "do_checks.adb", line 462, characters 0-0 *)
goal defqtvc :
  (forall x__split_fields:us_t. forall y__split_fields:(int,bool) farray.
  (dynamic_invariant({ us_split_discrs1 = x__split_discrs; us_split_fields1 =
  { rec__do_checks__do_discriminant_check__r1__arr = x__split_fields } },
  true, false, true, true) -> (dynamic_invariant1({ us_split_discrs2 =
  y__split_discrs; us_split_fields3 = {
  rec__do_checks__do_discriminant_check__r1__arr1 = y__split_fields } },
  true, false, true, true) ->
  ((to_rep((x__split_discrs).rec__do_checks__do_discriminant_check__r1__j) = 10) ->
  in_range4(10, { us_split_discrs1 = x__split_discrs; us_split_fields1 = {
  rec__do_checks__do_discriminant_check__r1__arr = x__split_fields } })))))
