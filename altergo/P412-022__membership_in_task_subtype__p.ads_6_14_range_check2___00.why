(* this is a prelude for Alt-Ergo integer arithmetic *)
type string

logic match_bool : bool, 'a, 'a -> 'a

axiom match_bool_True :
  (forall z:'a. forall z1:'a. (match_bool(true, z, z1) = z))

axiom match_bool_False :
  (forall z:'a. forall z1:'a. (match_bool(false, z, z1) = z1))

function andb(x: bool, y: bool) : bool = match_bool(x, y, false)

function orb(x: bool, y: bool) : bool = match_bool(x, true, y)

function notb(x: bool) : bool = match_bool(x, false, true)

function xorb(x: bool, y: bool) : bool = match_bool(x, notb(y), y)

function implb(x: bool, y: bool) : bool = match_bool(x, y, true)

type us_private

logic private__bool_eq : us_private, us_private -> bool

logic us_null_ext__ : us_private

type us_type_of_heap

type us_type_of_heap__ref = { us_type_of_heap__content : us_type_of_heap
}

type us_image

type int__ref = { int__content : int }

type bool__ref = { bool__content : bool }

type us_fixed__ref = { us_fixed__content : int }

type real__ref = { real__content : real }

type us_private__ref = { us_private__content : us_private
}

function int__ref___projection(a: int__ref) : int = (a).int__content

function us_fixed__ref___projection(a: us_fixed__ref) : int =
  (a).us_fixed__content

function bool__ref___projection(a: bool__ref) : bool = (a).bool__content

function real__ref___projection(a: real__ref) : real = (a).real__content

function us_private__ref___projection(a: us_private__ref) : us_private =
  (a).us_private__content

type integer

logic integerqtint : integer -> int

axiom integerqtaxiom :
  (forall i:integer. ((- 2147483648) <= integerqtint(i)))

axiom integerqtaxiom1 : (forall i:integer. (integerqtint(i) <= 2147483647))

predicate in_range(x: int) = (((- 2147483648) <= x) and (x <= 2147483647))

function bool_eq(x: int, y: int) : bool = (if (x = y) then true else false)

logic attr__ATTRIBUTE_IMAGE : int -> us_image

logic attr__ATTRIBUTE_VALUE__pre_check : us_image -> prop

logic attr__ATTRIBUTE_VALUE : us_image -> int

logic user_eq : integer, integer -> bool

logic dummy : integer

type integer__ref = { integer__content : integer
}

function integer__ref_integer__content__projection(a: integer__ref) : integer =
  (a).integer__content

type us_main_type

logic us_main_eq : us_main_type, us_main_type -> bool

type us_split_discrs = { rec__p__tt__x : integer
}

function us_split_discrs_rec__p__tt__x__projection(a: us_split_discrs) : integer =
  (a).rec__p__tt__x

type us_split_discrs__ref = { us_split_discrs__content : us_split_discrs
}

function us_split_discrs__ref___split_discrs__content__projection(a: us_split_discrs__ref) : us_split_discrs =
  (a).us_split_discrs__content

type us_split_fields = { rec__p__tt : us_main_type
}

function us_split_fields_rec__p__tt__projection(a: us_split_fields) : us_main_type =
  (a).rec__p__tt

type us_split_fields__ref = { us_split_fields__content : us_split_fields
}

function us_split_fields__ref___split_fields__content__projection(a: us_split_fields__ref) : us_split_fields =
  (a).us_split_fields__content

type us_rep = { us_split_discrs1 : us_split_discrs; us_split_fields1 :
us_split_fields
}

function us_rep___split_discrs__projection(a: us_rep) : us_split_discrs =
  (a).us_split_discrs1

function us_rep___split_fields__projection(a: us_rep) : us_split_fields =
  (a).us_split_fields1

function to_rep(x: integer) : int = integerqtint(x)

logic of_rep : int -> integer

axiom inversion_axiom :
  (forall x:integer [to_rep(x)]. (of_rep(to_rep(x)) = x))

axiom range_axiom : (forall x:integer [to_rep(x)]. in_range(to_rep(x)))

axiom coerce_axiom :
  (forall x:int [to_rep(of_rep(x))]. (in_range(x) ->
  (to_rep(of_rep(x)) = x)))

predicate in_range1(rec__p__tt__x1: int, a: us_split_discrs) =
  (rec__p__tt__x1 = to_rep((a).rec__p__tt__x))

logic value__size : int

logic object__size : int

logic alignment : int

axiom value__size_axiom : (0 <= value__size)

axiom object__size_axiom : (0 <= object__size)

axiom alignment_axiom : (0 <= alignment)

logic p__tt__x__first__bit : int

logic p__tt__x__last__bit : int

logic p__tt__x__position : int

axiom p__tt__x__first__bit_axiom : (0 <= p__tt__x__first__bit)

axiom p__tt__x__last__bit_axiom :
  (p__tt__x__first__bit <  p__tt__x__last__bit)

axiom p__tt__x__position_axiom : (0 <= p__tt__x__position)

logic user_eq1 : us_rep, us_rep -> bool

type tt__ref = { tt__content : us_rep
}

function tt__ref_tt__content__projection(a: tt__ref) : us_rep =
  (a).tt__content

type us_split_fields2 = { rec__p__tt1 : us_main_type
}

function us_split_fields_rec__p__tt__3__projection(a: us_split_fields2) : us_main_type =
  (a).rec__p__tt1

type us_split_fields__ref1 = { us_split_fields__content1 : us_split_fields2
}

function us_split_fields__ref___split_fields__content__3__projection(a: us_split_fields__ref1) : us_split_fields2 =
  (a).us_split_fields__content1

type us_rep1 = { us_split_discrs2 : us_split_discrs; us_split_fields3 :
us_split_fields2
}

function us_rep___split_discrs__3__projection(a: us_rep1) : us_split_discrs =
  (a).us_split_discrs2

function us_rep___split_fields__3__projection(a: us_rep1) : us_split_fields2 =
  (a).us_split_fields3

function to_base(a: us_rep1) : us_rep = { us_split_discrs1 =
  (a).us_split_discrs2; us_split_fields1 = { rec__p__tt =
  ((a).us_split_fields3).rec__p__tt1 } }

function of_base(r: us_rep) : us_rep1 = { us_split_discrs2 =
  (r).us_split_discrs1; us_split_fields3 = { rec__p__tt1 =
  ((r).us_split_fields1).rec__p__tt } }

logic value__size1 : int

logic object__size1 : int

logic alignment1 : int

axiom value__size_axiom1 : (0 <= value__size1)

axiom object__size_axiom1 : (0 <= object__size1)

axiom alignment_axiom1 : (0 <= alignment1)

logic p__tt__x__first__bit1 : int

logic p__tt__x__last__bit1 : int

logic p__tt__x__position1 : int

axiom p__tt__x__first__bit_axiom1 : (0 <= p__tt__x__first__bit1)

axiom p__tt__x__last__bit_axiom1 :
  (p__tt__x__first__bit1 <  p__tt__x__last__bit1)

axiom p__tt__x__position_axiom1 : (0 <= p__tt__x__position1)

logic user_eq2 : us_rep1, us_rep1 -> bool

type tto1S__ref = { tto1S__content : us_rep1
}

function tto1S__ref_tto1S__content__projection(a: tto1S__ref) : us_rep1 =
  (a).tto1S__content

logic to1__split_discrs : us_split_discrs

logic attr__ATTRIBUTE_ADDRESS : int

predicate dynamic_invariant(temp___expr_195: us_rep1,
  temp___is_init_191: bool, temp___skip_constant_192: bool,
  temp___do_toplevel_193: bool, temp___do_typ_inv_194: bool) =
  ((not (temp___skip_constant_192 = true)) -> in_range1(1,
  (to_base(temp___expr_195)).us_split_discrs1))

predicate default_initial_assumption(temp___expr_197: us_rep1,
  temp___skip_top_level_198: bool) =
  (to_rep(((temp___expr_197).us_split_discrs2).rec__p__tt__x) = 1)

logic foo : bool

logic attr__ATTRIBUTE_ADDRESS1 : int

predicate dynamic_invariant1(temp___expr_18: int, temp___is_init_14: bool,
  temp___skip_constant_15: bool, temp___do_toplevel_16: bool,
  temp___do_typ_inv_17: bool) = (((temp___is_init_14 = true) or
  ((- 2147483648) <= 2147483647)) -> in_range(temp___expr_18))

 (* File "p.ads", line 1, characters 0-0 *)
goal defqtvc : true
